[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/783026889",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-783026889",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 783026889,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MzAyNjg4OQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-22T03:17:19Z",
    "updated_at": "2021-06-03T05:25:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21160 (net/net processing: Move tx inventory into net_processing by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/783026889/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/785710010",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-785710010",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 785710010,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NTcxMDAxMA==",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?u=d06d2903ce6ad8b9d0c66ef9225fa21adfe22c7f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-25T08:18:37Z",
    "updated_at": "2021-02-25T08:18:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/785710010/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/829668926",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-829668926",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 829668926,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTY2ODkyNg==",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-29T23:26:53Z",
    "updated_at": "2021-04-29T23:26:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK, will review more closely soon.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/829668926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/836811768",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-836811768",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 836811768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzNjgxMTc2OA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-10T15:04:35Z",
    "updated_at": "2021-05-10T15:04:35Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/836811768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842280881",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-842280881",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 842280881,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjI4MDg4MQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-17T12:22:48Z",
    "updated_at": "2021-05-17T12:22:48Z",
    "author_association": "MEMBER",
    "body": "> Approach ACK [4890e2f](https://github.com/bitcoin/bitcoin/commit/4890e2f2fdefaa18b0e96bcaf3691fb3f0213572)\r\n> \r\n> Some squashing is warranted.\r\n\r\nThanks! Indeed. Re-arranging.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842280881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853612805",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-853612805",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 853612805,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MzYxMjgwNQ==",
    "user": {
      "login": "dunxen",
      "id": 3072149,
      "node_id": "MDQ6VXNlcjMwNzIxNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3072149?u=65cb2813caf6d3bd597f12240214cbfecc4e6f82&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dunxen",
      "html_url": "https://github.com/dunxen",
      "followers_url": "https://api.github.com/users/dunxen/followers",
      "following_url": "https://api.github.com/users/dunxen/following{/other_user}",
      "gists_url": "https://api.github.com/users/dunxen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dunxen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dunxen/subscriptions",
      "organizations_url": "https://api.github.com/users/dunxen/orgs",
      "repos_url": "https://api.github.com/users/dunxen/repos",
      "events_url": "https://api.github.com/users/dunxen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dunxen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-03T06:40:06Z",
    "updated_at": "2021-06-03T06:40:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK. Will take a closer look later today :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853612805/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/855652920",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-855652920",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 855652920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1NTY1MjkyMA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-07T07:05:11Z",
    "updated_at": "2021-06-07T07:05:11Z",
    "author_association": "MEMBER",
    "body": "Thanks for the concept ACKs @mzumsande, @duncandean and @laanwj and the approach ACKs @vasild and @ariard. Now ready for final review. \r\n\r\nThis screenshot illustrates the higher latency of I2P peers, which disadvantages them under our inbound eviction criteria even relative to onion peers.\r\n\r\n![Screenshot from 2021-06-07 08-56-56](https://user-images.githubusercontent.com/2415484/120973346-544b3400-c75e-11eb-901e-667f36ebcd54.png)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/855652920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859579163",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-859579163",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 859579163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTU3OTE2Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-11T13:23:35Z",
    "updated_at": "2021-06-11T15:05:18Z",
    "author_association": "MEMBER",
    "body": "Updated per the discussions above and rebased.  The CI failure seems unrelated.  I'm running a node on this branch with `-maxconnections=40`.\r\n\r\nEdit: repushed to give the unrelated CI issue another chance.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859579163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860083875",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-860083875",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 860083875,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDA4Mzg3NQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-12T17:27:08Z",
    "updated_at": "2021-06-12T17:27:08Z",
    "author_association": "MEMBER",
    "body": "Thanks for the feedback @vasild and @ariard. All the feedback taken, will re-push after reworking the tests. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860083875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860239666",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-860239666",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 860239666,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDIzOTY2Ng==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-13T16:45:51Z",
    "updated_at": "2021-06-13T18:27:14Z",
    "author_association": "MEMBER",
    "body": "Updated, taking all review feedback by @vasild and @ariard, and also improving readability and updating the tests.\r\n\r\n`git diff 4253019 a457f34 --color-words`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860239666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860624384",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-860624384",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 860624384,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDYyNDM4NA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-14T11:53:32Z",
    "updated_at": "2021-06-14T12:54:51Z",
    "author_association": "MEMBER",
    "body": "I've been running this PR (various versions) on a busy node for the last weeks. Unfortunately this node has a really high `maxconnections` (500, while average number of connected peers is 200) so I just realize I haven't been actually testing the eviction behavior :blush: \r\n\r\nIn any case\r\nCode review (and lightly tested) ACK a457f34e5039b75ee015b273028c3ee153656d5c\r\nCode review re-ACK 1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860624384/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860648064",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-860648064",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 860648064,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDY0ODA2NA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-14T12:33:53Z",
    "updated_at": "2021-06-14T12:34:21Z",
    "author_association": "MEMBER",
    "body": "Thanks @vasild and @laanwj.  Updated per `git diff a457f34 1b1088d --color-words` for the review suggestion and to add 4 test cases, and updated the PR description to thank/credit @vasild and @ariard.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860648064/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860681508",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-860681508",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
    "id": 860681508,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDY4MTUwOA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-14T13:23:32Z",
    "updated_at": "2021-06-14T13:23:32Z",
    "author_association": "MEMBER",
    "body": "> Wow! How long does it take to get up to 200 peers? Mine is restarted a lot but never gets above 35-40.\r\n\r\nLast restart was last week, it gets connections quite quickly. Then again it is connected to all possible networks and has had a >99% uptime for a few years. Either that helps or maybe it's just all spy nodes :slightly_smiling_face: \r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860681508/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625210280",
    "pull_request_review_id": 650516145,
    "id": 625210280,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTIxMDI4MA==",
    "diff_hunk": "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_i2p) {\n+            ++network_counts[1];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[2];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "831b3294d92b23f85617e77ea3f90082de73ce3a",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Before this PR we would have protected 25% onions. With this PR up to commit 517976187 (inclusive) we would protect 12.5% onions and with the full PR - just 8.3%. What about:\r\n\r\n```suggestion\r\n        const size_t protect_size_per_network{total_protect_size / networks};\r\n```",
    "created_at": "2021-05-03T16:33:42Z",
    "updated_at": "2021-05-08T15:13:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625210280",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625210280"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625210280"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625210280/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 931,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625212333",
    "pull_request_review_id": 650516145,
    "id": 625212333,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTIxMjMzMw==",
    "diff_hunk": "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "831b3294d92b23f85617e77ea3f90082de73ce3a",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "These are used as booleans. I would suggest something like:\r\n\r\n```cpp\r\nstruct {\r\n    bool local{false};\r\n    bool i2p{false};\r\n    bool onion{false};\r\n} networks;\r\n...\r\nif (node.m_is_local) {\r\n    networks.local = true;\r\n}\r\n\r\n// if (networks) becomes:\r\nif (networks.local || networks.i2p || networks.onion)\r\n```",
    "created_at": "2021-05-03T16:37:09Z",
    "updated_at": "2021-05-08T15:13:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625212333",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625212333"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625212333"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625212333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 914,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625223765",
    "pull_request_review_id": 650516145,
    "id": 625223765,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTIyMzc2NQ==",
    "diff_hunk": "@@ -1022,7 +1055,7 @@ bool CConnman::AttemptToEvictConnection()\n                                                HasAllDesirableServiceFlags(node->nServices),\n                                                peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n                                                node->m_prefer_evict, node->addr.IsLocal(),\n-                                               node->m_inbound_onion};\n+                                               node->m_inbound_onion, node->addr.IsI2P()};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "831b3294d92b23f85617e77ea3f90082de73ce3a",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Passing multiple booleans like `is_onion`, `is_i2p`, etc is a bit un-flexible and leaves the possibility for contradictions like having both flags set to true. Fuzzing could do that and I expect that there may be (or may be added) some legit assert somewhere in the code to ensure that nonsensical values like `is_onion==true` and `is_i2p==true` are not passed (resulting in an assertion failure during fuzzing).\r\n\r\nWhat about passing `enum Network` instead?",
    "created_at": "2021-05-03T16:55:49Z",
    "updated_at": "2021-05-08T15:13:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625223765",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625223765"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625223765"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625223765/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1058,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626485716",
    "pull_request_review_id": 652197438,
    "id": 626485716,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjQ4NTcxNg==",
    "diff_hunk": "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_i2p) {\n+            ++network_counts[1];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[2];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "831b3294d92b23f85617e77ea3f90082de73ce3a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Those are initial (not necessarily final) percentages iff onion, i2p and localhost peers are all present in the eviction candidates. For instance, if no i2p or localhost peers are among the candidats, then the full 25% is made available to onions. And if localhost or i2p peers are present, any initially reserved slots that they don't use are made available for onions. (See the commit messages for a more detailed description). I'm not against adjusting the ratios though.",
    "created_at": "2021-05-05T11:32:02Z",
    "updated_at": "2021-05-08T15:13:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626485716",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626485716"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626485716"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626485716/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 931,
    "side": "RIGHT",
    "in_reply_to_id": 625210280
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626495780",
    "pull_request_review_id": 652210679,
    "id": 626495780,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjQ5NTc4MA==",
    "diff_hunk": "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 36,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "831b3294d92b23f85617e77ea3f90082de73ce3a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's used to determine the number of networks from which we have disadvantaged candidates (indeed that could be done with bools also, replacing count_if with a sum of each boolean) but I anticipate possibly also using the actual counts to determine the distribution size or order of the protected slots.",
    "created_at": "2021-05-05T11:49:35Z",
    "updated_at": "2021-05-08T15:13:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626495780",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626495780"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626495780"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626495780/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 914,
    "side": "RIGHT",
    "in_reply_to_id": 625212333
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627764474",
    "pull_request_review_id": 653895708,
    "id": 627764474,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc2NDQ3NA==",
    "diff_hunk": "@@ -1022,7 +1055,7 @@ bool CConnman::AttemptToEvictConnection()\n                                                HasAllDesirableServiceFlags(node->nServices),\n                                                peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n                                                node->m_prefer_evict, node->addr.IsLocal(),\n-                                               node->m_inbound_onion};\n+                                               node->m_inbound_onion, node->addr.IsI2P()};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "831b3294d92b23f85617e77ea3f90082de73ce3a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Passing `enum Network`, instead of multiple booleans, indeed allowed rewriting this to be better abstracted and generalizable. WIP, for now the initial rewrite is in an additional commit.",
    "created_at": "2021-05-06T21:05:47Z",
    "updated_at": "2021-05-08T15:13:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r627764474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627764474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r627764474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627764474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1058,
    "side": "RIGHT",
    "in_reply_to_id": 625223765
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633484515",
    "pull_request_review_id": 660903857,
    "id": 633484515,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzQ4NDUxNQ==",
    "diff_hunk": "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_i2p) {\n+            ++network_counts[1];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[2];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "831b3294d92b23f85617e77ea3f90082de73ce3a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I played around with a more generous version that would protect more than 1/4 in the case of eviction candidates from multiple disadvantaged networks.  Didn't keep it for now, but memoizing the commit: e5c27dd.",
    "created_at": "2021-05-17T12:26:00Z",
    "updated_at": "2021-05-17T12:26:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r633484515",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633484515"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r633484515"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633484515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 931,
    "side": "RIGHT",
    "in_reply_to_id": 625210280
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640068051",
    "pull_request_review_id": 669469370,
    "id": 640068051,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDA2ODA1MQ==",
    "diff_hunk": "@@ -902,26 +902,44 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     // disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 2> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[1];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};\n \n+        if (protect_size_per_network) {\n+            size_t total_to_protect{protect_size_per_network};\n+\n+            if (network_counts[0]) {\n+                // Protect localhost peers, sorted by longest uptime.\n+                EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, total_to_protect,\n+                                   [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+                total_to_protect += protect_size_per_network;\n+            }\n+\n+            if (network_counts[1]) {\n+                // Protect onion peers (connected via our onion service), sorted by longest uptime.\n+                const size_t onion_peers_to_protect{total_to_protect - (initial_size - vEvictionCandidates.size())};\n+                EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_peers_to_protect,",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "161aed5142048bb5c681628eb3d25d574cfbba47",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why you don't pass `k=protect_size_per_network` to `EraseLastKElements` ?\r\n\r\nLet's say initial_size=200, total_protect_size=100.\r\nIf you count two networks, protected_size_per_network=25.\r\n\r\nIf the first network does exist, vEvictionCandidates is reduced to 175, total_to_protect increased to 50\r\nAnd the second network does exist, 50 - 200 - 175, k is equal to 25\r\n\r\nIf the first network doesn't exist, vEvictionCandidates isn't reduced, total_to_protect is equal to 25\r\nAnd the second network does exist, 25 - 200 - 200, k is equal to 25\r\n\r\nLet me know if I get the math wrong, or the logic is altered in following commits (after 5179761)\r\n\r\nAlso, `total_to_protect`, `protect_size_per_network` are confusing. Maybe rename `total_to_protect` to `already_selected_for_protect_size` ?",
    "created_at": "2021-05-26T19:39:20Z",
    "updated_at": "2021-05-26T20:28:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r640068051",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640068051"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r640068051"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640068051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 938,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640096971",
    "pull_request_review_id": 669469370,
    "id": 640096971,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDA5Njk3MQ==",
    "diff_hunk": "@@ -851,6 +851,12 @@ static bool CompareOnionTimeConnected(const NodeEvictionCandidate& a, const Node\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+static bool CompareI2PTimeConnected(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b)\n+{\n+    if (a.m_is_i2p != b.m_is_i2p) return b.m_is_i2p;\n+    return a.nTimeConnected > b.nTimeConnected;\n+}\n+",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "2aaeeff3e8f6c24c9ac0eebf6fbcf9e409a3a141",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What would be the purpose of the follow-up you're envisioning ?\r\n\r\nAFAIU this current patchset, any unused protected slots across a high-latency network is reallocated to the next one by summing up `protect_size_per_network` and passing through `total_to_protect` ?",
    "created_at": "2021-05-26T20:26:18Z",
    "updated_at": "2021-05-26T20:28:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r640096971",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640096971"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r640096971"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640096971/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 859,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644332628",
    "pull_request_review_id": 674697946,
    "id": 644332628,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDMzMjYyOA==",
    "diff_hunk": "@@ -851,6 +851,12 @@ static bool CompareOnionTimeConnected(const NodeEvictionCandidate& a, const Node\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+static bool CompareI2PTimeConnected(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b)\n+{\n+    if (a.m_is_i2p != b.m_is_i2p) return b.m_is_i2p;\n+    return a.nTimeConnected > b.nTimeConnected;\n+}\n+",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "2aaeeff3e8f6c24c9ac0eebf6fbcf9e409a3a141",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You're right. The commit message was out of date. Updated.",
    "created_at": "2021-06-02T21:28:23Z",
    "updated_at": "2021-06-02T21:28:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644332628",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644332628"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644332628"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644332628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 859,
    "side": "RIGHT",
    "in_reply_to_id": 640096971
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644337039",
    "pull_request_review_id": 674703478,
    "id": 644337039,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDMzNzAzOQ==",
    "diff_hunk": "@@ -902,26 +902,44 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     // disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 2> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[1];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};\n \n+        if (protect_size_per_network) {\n+            size_t total_to_protect{protect_size_per_network};\n+\n+            if (network_counts[0]) {\n+                // Protect localhost peers, sorted by longest uptime.\n+                EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, total_to_protect,\n+                                   [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+                total_to_protect += protect_size_per_network;\n+            }\n+\n+            if (network_counts[1]) {\n+                // Protect onion peers (connected via our onion service), sorted by longest uptime.\n+                const size_t onion_peers_to_protect{total_to_protect - (initial_size - vEvictionCandidates.size())};\n+                EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_peers_to_protect,",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "161aed5142048bb5c681628eb3d25d574cfbba47",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since the inital number of protected slots per network goes down quickly as the number of networks increases, it seems good to not waste any unused slots in this basic greedy knapsack. So we calculate `peers_to_protect` for each iteration having potential peers to protect, in order to recover any unused slots from the previous iteration.",
    "created_at": "2021-06-02T21:36:35Z",
    "updated_at": "2021-06-02T21:36:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644337039",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644337039"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644337039"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644337039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 938,
    "side": "RIGHT",
    "in_reply_to_id": 640068051
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644338502",
    "pull_request_review_id": 674705350,
    "id": 644338502,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDMzODUwMg==",
    "diff_hunk": "@@ -902,26 +902,44 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     // disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 2> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[1];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};\n \n+        if (protect_size_per_network) {\n+            size_t total_to_protect{protect_size_per_network};\n+\n+            if (network_counts[0]) {\n+                // Protect localhost peers, sorted by longest uptime.\n+                EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, total_to_protect,\n+                                   [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+                total_to_protect += protect_size_per_network;\n+            }\n+\n+            if (network_counts[1]) {\n+                // Protect onion peers (connected via our onion service), sorted by longest uptime.\n+                const size_t onion_peers_to_protect{total_to_protect - (initial_size - vEvictionCandidates.size())};\n+                EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_peers_to_protect,",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "161aed5142048bb5c681628eb3d25d574cfbba47",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hm, `s/total_to_protect/available_to_protect/`? Edit: done.",
    "created_at": "2021-06-02T21:39:32Z",
    "updated_at": "2021-06-02T21:43:00Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644338502",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644338502"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644338502"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644338502/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 938,
    "side": "RIGHT",
    "in_reply_to_id": 640068051
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647319655",
    "pull_request_review_id": 677464350,
    "id": 647319655,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzMxOTY1NQ==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "_(I needed a pen and paper for this)_\r\n\r\nLets assume `initial_size = 100`.\r\n\r\nCase 1: `candidates` contains 1 localhost peer, 20 I2P peers and 20 Tor peers. From those, the protected will be: 1 localhost, 15 I2P, 8 Tor.\r\n\r\nCase 2: `candidates` contains 0 localhost peers, 20 I2P peers and 20 Tor peers. From those, the protected will be: 12 I2P peers and 12 Tor peers.\r\n\r\nCase 2 looks strange compared to Case 1 because _less_ I2P peers will be protected when there are no localhost ones. I would expect less peers from some earlier networks to result in more protections from subsequent networks.",
    "created_at": "2021-06-08T10:37:37Z",
    "updated_at": "2021-06-08T13:12:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647319655",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647319655"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647319655"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647319655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647322855",
    "pull_request_review_id": 677464350,
    "id": 647322855,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzMyMjg1NQ==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why \"minimum\"? I think that either `protect_size_per_network` or less peers will be protected, so that is a \"maximum\", no?",
    "created_at": "2021-06-08T10:44:11Z",
    "updated_at": "2021-06-08T13:12:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647322855",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647322855"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647322855"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647322855/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 925,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 927,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647413273",
    "pull_request_review_id": 677464350,
    "id": 647413273,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzQxMzI3Mw==",
    "diff_hunk": "@@ -883,6 +871,17 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+struct CompareNodeNetworkTime {",
    "path": "src/net.cpp",
    "position": 39,
    "original_position": 23,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I find this hard to grasp. Some comments would be nice. For example:\r\n```cpp\r\n/**\r\n * Define an order between NodeEvictionCandidate objects based on network and connection time.\r\n * Nodes near the beginning are more likely to be disconnected, nodes near the end will be\r\n * protected (less likely to be disconnected).\r\n * - First all nodes that do not belong to `network`, among them:\r\n *   - first nodes that have been connected shorter\r\n *   - later nodes that have been connected longer\r\n * - Later all nodes that belong to `network`, among them, sorted by connection time as above.\r\n */\r\nstruct CompareNodeNetworkTime {\r\n```",
    "created_at": "2021-06-08T12:57:07Z",
    "updated_at": "2021-06-08T13:12:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647413273",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647413273"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647413273"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647413273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 883,
    "original_line": 883,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647417447",
    "pull_request_review_id": 677464350,
    "id": 647417447,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzQxNzQ0Nw==",
    "diff_hunk": "@@ -883,6 +871,17 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+struct CompareNodeNetworkTime {\n+    const Network network, localhost;\n+    CompareNodeNetworkTime(Network n, Network l) : network(n), localhost(l) {}\n+    bool operator()(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b) const\n+    {\n+        if (network == localhost && a.m_is_local != b.m_is_local) return b.m_is_local;\n+        if ((a.m_network == network) != (b.m_network == network)) return b.m_network == network;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If `network == localhost` and `a.m_is_local == b.m_is_local` then the control flow will continue to the second `if`. I think this is wrong or at least confusing because if this is the localhost comparator (`network == localhost`) then it should not sort based on `m_network`. Here is an example that does not involve passing the constant `localhost` if that makes it easier to understand, feel free to ignore:\r\n\r\n```cpp\r\nstruct CompareNodeNetworkTime { \r\n    const Network m_network;\r\n    const bool m_is_local;\r\n    CompareNodeNetworkTime(Network network, bool is_local)\r\n        : m_network(network), m_is_local(is_local)\r\n    { \r\n    } \r\n    bool operator()(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b) const\r\n    { \r\n        if (m_is_local) {\r\n            if (a.m_is_local != b.m_is_local) {\r\n                return b.m_is_local;\r\n            }\r\n        } else if ((a.m_network == m_network) != (b.m_network == m_network)) {\r\n            return b.m_network == m_network;\r\n        }   \r\n        return a.nTimeConnected > b.nTimeConnected;\r\n    };  \r\n};\r\n\r\n...\r\n\r\nCompareNodeNetworkTime(n.id, n.id == localhost)\r\n```\r\n",
    "created_at": "2021-06-08T13:02:07Z",
    "updated_at": "2021-06-08T13:12:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647417447",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647417447"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647417447"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647417447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 879,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 880,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647471801",
    "pull_request_review_id": 678559917,
    "id": 647471801,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzQ3MTgwMQ==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unused slots can be recovered, so the number protected can be higher, and yes, if there are fewer peers of that network, the number protected can be lower. Perhaps s/minimum/initial/. ",
    "created_at": "2021-06-08T14:00:59Z",
    "updated_at": "2021-06-08T14:00:59Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647471801",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647471801"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647471801"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647471801/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 925,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 927,
    "side": "RIGHT",
    "in_reply_to_id": 647322855
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648020574",
    "pull_request_review_id": 679276720,
    "id": 648020574,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODAyMDU3NA==",
    "diff_hunk": "@@ -883,6 +871,17 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+struct CompareNodeNetworkTime {\n+    const Network network, localhost;\n+    CompareNodeNetworkTime(Network n, Network l) : network(n), localhost(l) {}\n+    bool operator()(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b) const\n+    {\n+        if (network == localhost && a.m_is_local != b.m_is_local) return b.m_is_local;\n+        if ((a.m_network == network) != (b.m_network == network)) return b.m_network == network;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The suggestion is equivalent/does the same thing, assuming the following change is also made to the caller. \r\n```diff\r\n-                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\r\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, n.id == localhost), peers_to_protect,\r\n```\r\n",
    "created_at": "2021-06-09T06:59:45Z",
    "updated_at": "2021-06-09T06:59:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648020574",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648020574"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648020574"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648020574/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 879,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 880,
    "side": "RIGHT",
    "in_reply_to_id": 647417447
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648033899",
    "pull_request_review_id": 679294541,
    "id": 648033899,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODAzMzg5OQ==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think the outcome of Case 2 is ideal.  Case 1 protects many I2P peers because that network gets the unused slots from the localhost allocation.  What change would you suggest?  Keep in mind that this is a subcomponent seen in isolation; another 1/4 of the remaining peers will be protected based on their uptime.",
    "created_at": "2021-06-09T07:20:28Z",
    "updated_at": "2021-06-09T07:20:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648033899",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648033899"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648033899"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648033899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648082182",
    "pull_request_review_id": 679358530,
    "id": 648082182,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODA4MjE4Mg==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hm, maybe we can tally the number of networks that have more than `protect_size_per_network` peers and try to share the leftover slots between them so that Case 1 protects 1 / 11 / 12 instead of 1 / 15 / 8.",
    "created_at": "2021-06-09T08:26:18Z",
    "updated_at": "2021-06-09T08:26:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648082182",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648082182"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648082182"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648082182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648169448",
    "pull_request_review_id": 679474233,
    "id": 648169448,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE2OTQ0OA==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Right, it can be higher or lower. Neither one of \"minimum\" or \"maximum\" is suitable. `s/minimum/initial/` looks good.",
    "created_at": "2021-06-09T10:21:45Z",
    "updated_at": "2021-06-09T10:21:46Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648169448",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648169448"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648169448"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648169448/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 925,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 927,
    "side": "RIGHT",
    "in_reply_to_id": 647322855
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648183294",
    "pull_request_review_id": 679492907,
    "id": 648183294,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODE4MzI5NA==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": ">  What change would you suggest?\r\n\r\n```cpp\r\nvoid ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\r\n{\r\n    // Treat localhost connections as a separate network.\r\n    static constexpr Network NET_LOCALHOST{NET_MAX};\r\n\r\n    const std::array<Network, 3> networks{NET_LOCALHOST, NET_I2P, NET_ONION};\r\n\r\n    // Protect the half of the remaining nodes which have been connected the longest.\r\n    // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\r\n    // To favorise the diversity of our peer connections, reserve up to half of\r\n    // these protected spots for onion, localhost and I2P peers, even if they're\r\n    // not longest uptime overall. This helps protect these higher-latency peers\r\n    // that tend to be otherwise disadvantaged under our eviction criteria.\r\n    const size_t total_to_protect{candidates.size() / 2};\r\n\r\n    // Protect up to 25% of `candidates` due to network. We may protect less if\r\n    // there are no candidates that belong to `networks`.\r\n\r\n    const size_t max_protect_due_to_network{total_to_protect / 2};\r\n    size_t num_protected{0};\r\n\r\n    while (num_protected < max_protect_due_to_network) {\r\n        const size_t remaining_to_protect{max_protect_due_to_network - num_protected};\r\n        const size_t protect_per_network{std::max(remaining_to_protect / networks.size(), 1UL)};\r\n        bool protected_at_least_one{false};\r\n\r\n        for (const Network net : networks) {\r\n            const size_t before = candidates.size();\r\n            EraseLastKElements(candidates,\r\n                               CompareNodeNetworkTime(net, net == NET_LOCALHOST),\r\n                               protect_per_network,\r\n                               [&net](const NodeEvictionCandidate& c) {\r\n                                   return net == NET_LOCALHOST ? c.m_is_local : c.m_network == net;\r\n                               });\r\n            const size_t after = candidates.size();\r\n            if (after < before) {\r\n                protected_at_least_one = true;\r\n                num_protected += before - after;\r\n                if (num_protected >= max_protect_due_to_network) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!protected_at_least_one) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    // Protect another 25% to 50% of `candidates` due to uptime/longevity. For example, if\r\n    // 25% were protected due to network then we will protect 25% due to uptime, if\r\n    // 20% were protected due to network then we will protect 30% due to uptime.\r\n    const size_t remaining{total_to_protect - num_protected};\r\n    EraseLastKElements(candidates, ReverseCompareNodeTimeConnected, remaining);\r\n}\r\n```\r\n\r\nwill result in:\r\n```\r\n(number of peers that belong to localhost, i2p, tor => protected peers from localhost, i2p, tor)\r\n1, 20, 20 => 1, 12, 12\r\n0, 20, 20 => 0, 13, 12\r\n```\r\n\r\nFeel free to ignore.",
    "created_at": "2021-06-09T10:43:20Z",
    "updated_at": "2021-06-09T10:43:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648183294",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648183294"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648183294"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648183294/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648613692",
    "pull_request_review_id": 680061239,
    "id": 648613692,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODYxMzY5Mg==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This seems like a nice approach, multi-pass with simpler data structures. Will adapt the tests to it to check all the test cases.  Edit: only 4 \"combined\" test cases needed to be updated, and this version does better on those. ",
    "created_at": "2021-06-09T19:28:26Z",
    "updated_at": "2021-06-09T19:41:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648613692",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648613692"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648613692"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648613692/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649189169",
    "pull_request_review_id": 680791861,
    "id": 649189169,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTE4OTE2OQ==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It looks like we should keep the `Net` struct and `<` sort operator so the result can independent of the order of members in the `networks` array, so a hybrid approach, also adding an `is_local` member to the struct to no longer need `net == localhost` throughout the code.",
    "created_at": "2021-06-10T13:35:30Z",
    "updated_at": "2021-06-10T13:35:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649189169",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649189169"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649189169"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649189169/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649206111",
    "pull_request_review_id": 680815438,
    "id": 649206111,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTIwNjExMQ==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, with the above snippet, the result may depend on the order of elements in the `networks` array, but only up to 1 which I think it ok - after all, if we want to split evenly e.g. 10 slots among 3 networks, some network will get 4 slots and the rest will get 3 slots.\r\n\r\nThe current code also depends on the order in `networks` because it does \"stable\" sort, right?",
    "created_at": "2021-06-10T13:54:19Z",
    "updated_at": "2021-06-10T13:54:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649206111",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649206111"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649206111"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649206111/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649229635",
    "pull_request_review_id": 680848241,
    "id": 649229635,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTIyOTYzNQ==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The results make more sense when they depend on number of peers by network, e.g. if you have 10 I2P peers and 3 onion ones, best to give first chance at unused slots to the I2P peers so we protect, say, 3 I2P and 2 onions rather than the opposite.  Stable sort only makes a difference if the peer counts are equal. I'll propose this separately in the last commit for feedback.",
    "created_at": "2021-06-10T14:19:47Z",
    "updated_at": "2021-06-10T14:19:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649229635",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649229635"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649229635"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649229635/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649233724",
    "pull_request_review_id": 680853861,
    "id": 649233724,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTIzMzcyNA==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What I like is that we focused on different aspects and the combined result seems to provide the best eviction protection, so this is great.",
    "created_at": "2021-06-10T14:24:14Z",
    "updated_at": "2021-06-10T14:24:14Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649233724",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649233724"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649233724"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649233724/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649244859",
    "pull_request_review_id": 680869136,
    "id": 649244859,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTI0NDg1OQ==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "So, if we have 10 I2P peers and 3 onion ones and we want to protect 6 in total, we will protect 3 I2P and 3 onion, this is desired, right?\r\n\r\nIf we have again 10 I2P and 3 onion and want to protect 5, do we want to protect 3 I2P and 2 onion or 2 I2P and 3 onion? I am not sure. One may argue that protecting one more (but we are talking about just one here) from the rare network (onion) is better because it is easier to find peers from the more popular network (I2P), so the ones from the rare network are more scarce and precious. Or a counter argument could be to keep the proportion - if we have more I2P, then keep more I2P.\r\n\r\nPersonally, I think it is not so important because it is just 1 peer we are talking about here and I would favor code simplicity over enforcing either approach with more complex code.",
    "created_at": "2021-06-10T14:35:55Z",
    "updated_at": "2021-06-10T14:35:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649244859",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649244859"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649244859"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649244859/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649246190",
    "pull_request_review_id": 680870930,
    "id": 649246190,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTI0NjE5MA==",
    "diff_hunk": "@@ -883,6 +871,17 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+struct CompareNodeNetworkTime {\n+    const Network network, localhost;\n+    CompareNodeNetworkTime(Network n, Network l) : network(n), localhost(l) {}\n+    bool operator()(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b) const\n+    {\n+        if (network == localhost && a.m_is_local != b.m_is_local) return b.m_is_local;\n+        if ((a.m_network == network) != (b.m_network == network)) return b.m_network == network;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Updated to pass an `is_local` bool.",
    "created_at": "2021-06-10T14:37:22Z",
    "updated_at": "2021-06-10T14:37:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649246190",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649246190"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649246190"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649246190/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 879,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 880,
    "side": "RIGHT",
    "in_reply_to_id": 647417447
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649247964",
    "pull_request_review_id": 680873414,
    "id": 649247964,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTI0Nzk2NA==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks. This line is now no longer used.",
    "created_at": "2021-06-10T14:39:15Z",
    "updated_at": "2021-06-10T14:39:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649247964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649247964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649247964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649247964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 925,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 927,
    "side": "RIGHT",
    "in_reply_to_id": 647322855
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649277371",
    "pull_request_review_id": 680914077,
    "id": 649277371,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTI3NzM3MQ==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, this is about tradeoffs. The simplest code was when only a `Network` was passed around all the code without the `is_local` bool everywhere, but that simplicity had a logic encapsulation drawback (perhaps some others), so I rewrote everything and brought back `is_local`. \r\n\r\nI've redone this pull several times because I'd like it to do the right thing, whether networks with more peers get first priority at unused slots or networks with fewer.  When running a node with a reduced number of connections (`-maxconnections`), an eviction candidate can be one of a small number. If people prefer to have the array order decide independently of the number of peers, it seems we should clearly document that dependency. Edit: documented.\r\n\r\nI've separated the changes out to separate commits. Am going through everything before pushing the update.",
    "created_at": "2021-06-10T15:11:29Z",
    "updated_at": "2021-06-11T13:27:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649277371",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649277371"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649277371"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649277371/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649292684",
    "pull_request_review_id": 680935401,
    "id": 649292684,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTI5MjY4NA==",
    "diff_hunk": "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "My thought is that having separate protection buckets for each of the disadvantaged networks is the essential step here to improving the diversity of our inbound peer connections...and that unused protection slots should be distributed among disadvantaged networks having remaining eviction candidates by descending order of their count, and in the case of a tie, fall back to the array order.",
    "created_at": "2021-06-10T15:29:01Z",
    "updated_at": "2021-06-11T11:34:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649292684",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649292684"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649292684"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649292684/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 927,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 961,
    "side": "RIGHT",
    "in_reply_to_id": 647319655
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649452442",
    "pull_request_review_id": 681157090,
    "id": 649452442,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTQ1MjQ0Mg==",
    "diff_hunk": "@@ -883,6 +871,17 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+struct CompareNodeNetworkTime {",
    "path": "src/net.cpp",
    "position": 39,
    "original_position": 23,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done, added documentation.",
    "created_at": "2021-06-10T19:09:44Z",
    "updated_at": "2021-06-10T19:09:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649452442",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649452442"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r649452442"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/649452442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 883,
    "original_line": 883,
    "side": "RIGHT",
    "in_reply_to_id": 647413273
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650032286",
    "pull_request_review_id": 681905665,
    "id": 650032286,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDAzMjI4Ng==",
    "diff_hunk": "@@ -894,40 +902,62 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) {\n+                                    return n.is_local ? c.m_is_local : c.m_network == n.id;\n+                                });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};\n+        const size_t protect_per_network{std::max(remaining_to_protect / networks.size(), static_cast<size_t>(1))};\n+        bool protected_at_least_one{false};\n+        for (const Net& n : networks) {\n+            if (n.count == 0) continue;\n+            const size_t before = candidates.size();\n+            EraseLastKElements(candidates, CompareNodeNetworkTime(n.is_local, n.id), protect_per_network,\n+                               [&n](const NodeEvictionCandidate& c) {\n+                                   return n.is_local ? c.m_is_local : c.m_network == n.id;\n+                               });\n+            const size_t after = candidates.size();\n+            if (before > after) {\n+                protected_at_least_one = true;\n+                num_protected += before - after;\n+                if (num_protected >= max_protect_by_network) break;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 120,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "22b1dae1e07326e9644cc0ffcb50196352f32a3d",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "_off-topic, please ignore_\r\n\r\n```cpp\r\nif (cond) statement;\r\n```\r\nvs\r\n```cpp\r\nif (cond) {\r\n    statement;\r\n}\r\n```\r\n\r\nPutting everything on one line has 3 disadvantages:\r\n1. It is not gdb friendly - it is not possible to set a breakpoint on `statement;` - to stop after `cond` and before `statement` (if `cond` was true).\r\n2. It is not friendly to line-based code coverage - it will show that that line was executed even if `statement` was not.\r\n3. It is not diff friendly:\r\n3.1.\r\n```diff\r\n-if (cond) statement;\r\n+if (cond) {\r\n+    statement;\r\n+    another;\r\n+}\r\n```\r\nVS\r\n```diff\r\n if (cond) {\r\n     statement;\r\n+    another;\r\n }\r\n```\r\n3.2.\r\n```diff\r\n-if (some || involved(123) || STUFF + here / 9 || you_have_to_check_if_this_is_the_same) woho(x * 19 - y);\r\n+if (some || involved(123) || STUFF + here / 9 || you_have_to_check_if_this_is_the_same) woho(x * 29 - y);\r\n```\r\nVS\r\n```diff\r\n if (some || involved(123) || STUFF + here / 9 || no_need_to_check_in_this_case) {\r\n-    woho(x * 19 - y);\r\n+    woho(x * 29 - y);\r\n }\r\n```\r\n",
    "created_at": "2021-06-11T14:38:58Z",
    "updated_at": "2021-06-11T15:09:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650032286",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650032286"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650032286"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650032286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 946,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650041974",
    "pull_request_review_id": 681905665,
    "id": 650041974,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDA0MTk3NA==",
    "diff_hunk": "@@ -36,7 +32,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n             /* nKeyedNetGroup */ random_context.randrange(100),\n             /* prefer_evict */ random_context.randbool(),\n             /* m_is_local */ random_context.randbool(),\n-            /* m_is_onion */ random_context.randbool(),\n+            /* m_network */ static_cast<Network>(random_context.randrange(static_cast<int>(Network::NET_INTERNAL))),",
    "path": "src/test/net_peer_eviction_tests.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This implies that `NET_INTERNAL` has the highest value which may change in the future.\r\n\r\n```suggestion\r\n            /* m_network */ ALL_NETWORKS[random_context.randrange(ALL_NETWORKS.size())],\r\n```",
    "created_at": "2021-06-11T14:51:38Z",
    "updated_at": "2021-06-11T15:09:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650041974",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650041974"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650041974"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650041974/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650133285",
    "pull_request_review_id": 682042627,
    "id": 650133285,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDEzMzI4NQ==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "micro-nit: i would prefer `eviction_candidates`",
    "created_at": "2021-06-11T16:49:29Z",
    "updated_at": "2021-06-11T18:35:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650133285",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650133285"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650133285"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650133285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 905,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650141548",
    "pull_request_review_id": 682042627,
    "id": 650141548,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE0MTU0OA==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe you can precise onion as \"torv3\" or \"tor\" ? \r\n\r\nI think even if Tor is the most well-known deployed onion routing you have multiple other existing onion routing constructions. In fact, I2P's garlic routing is widely similar to Tor's onion routing. Or [Sphinx](https://www.freehaven.net/anonbib/cache/DBLP:conf/sp/DanezisG09.pdf) as deployed on LN communication layer is also a format of onion. Pedantic point :)",
    "created_at": "2021-06-11T17:03:11Z",
    "updated_at": "2021-06-11T18:35:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650141548",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650141548"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650141548"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650141548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 910,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650149599",
    "pull_request_review_id": 682063946,
    "id": 650149599,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE0OTU5OQ==",
    "diff_hunk": "@@ -36,7 +32,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n             /* nKeyedNetGroup */ random_context.randrange(100),\n             /* prefer_evict */ random_context.randbool(),\n             /* m_is_local */ random_context.randbool(),\n-            /* m_is_onion */ random_context.randbool(),\n+            /* m_network */ static_cast<Network>(random_context.randrange(static_cast<int>(Network::NET_INTERNAL))),",
    "path": "src/test/net_peer_eviction_tests.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point, looks like your suggestion with this might do it:\r\n```diff\r\n+++ b/src/test/net_peer_eviction_tests.cpp\r\n@@ -4,6 +4,7 @@\r\n #include <net.h>\r\n+#include <test/util/net.h>\r\n #include <test/util/setup_common.h>\r\n \r\n@@ -32,7 +33,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\r\n-            /* m_network */ static_cast<Network>(random_context.randrange(static_cast<int>(Network::NET_INTERNAL))),\r\n+            /* m_network */ ALL_NETWORKS[random_context.randrange(ALL_NETWORKS.size())],\r\n\r\n+++ b/src/test/util/net.h\r\n@@ -68,7 +68,7 @@ constexpr ConnectionType ALL_CONNECTION_TYPES[]{\r\n-constexpr Network ALL_NETWORKS[]{\r\n+constexpr std::array ALL_NETWORKS{\r\n```\r\n",
    "created_at": "2021-06-11T17:17:22Z",
    "updated_at": "2021-06-11T17:19:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650149599",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650149599"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650149599"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650149599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT",
    "in_reply_to_id": 650041974
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650164339",
    "pull_request_review_id": 682042627,
    "id": 650164339,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE2NDMzOQ==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 99,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "IIUC, in the worst-case scenario, at least 1 peer is protected among all the disadvantaged network, the one with the most candidates. \r\n\r\nI think that's an interesting property.",
    "created_at": "2021-06-11T17:43:22Z",
    "updated_at": "2021-06-11T18:35:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650164339",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650164339"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650164339"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650164339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 929,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650167989",
    "pull_request_review_id": 682042627,
    "id": 650167989,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE2Nzk4OQ==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 104,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: to reduce confusion among sets of eviction candidates, maybe called this variable `disadvantaged_to_protect\"\r\n\r\n`remaining_to_protect` is already used as another variable name at the end of this function.",
    "created_at": "2021-06-11T17:50:00Z",
    "updated_at": "2021-06-11T18:35:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650167989",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650167989"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650167989"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650167989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 934,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650174352",
    "pull_request_review_id": 682042627,
    "id": 650174352,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE3NDM1Mg==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think I would favor sorting network by ascending candidate count, otherwise I believe it would bias towards anonymity networks with abundant peers, decreasing our local diversity of anonymity network ?\r\n\r\nI think this point has been already discussed in this [thread](https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647319655). I agree it's minor.",
    "created_at": "2021-06-11T18:01:07Z",
    "updated_at": "2021-06-11T18:35:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650174352",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650174352"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650174352"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650174352/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 918,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650190229",
    "pull_request_review_id": 682042627,
    "id": 650190229,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE5MDIyOQ==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};\n+        const size_t protect_per_network{std::max(remaining_to_protect / networks.size(), static_cast<size_t>(1))};\n+        bool protected_at_least_one{false};\n+        for (const Net& n : networks) {\n+            if (n.count == 0) continue;\n+            const size_t before = candidates.size();\n+            EraseLastKElements(candidates, CompareNodeNetworkTime(n.is_local, n.id), protect_per_network,\n+                               [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+            const size_t after = candidates.size();\n+            if (before > after) {\n+                protected_at_least_one = true;\n+                num_protected += before - after;\n+                if (num_protected >= max_protect_by_network) break;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Following diff doesn't break `net_peer_eviction_tests`, is this an expected behavior ?\r\n\r\n```\r\n@@ -943,7 +943,7 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candid\r\n             if (before > after) {\r\n                 protected_at_least_one = true;\r\n                 num_protected += before - after;\r\n-                if (num_protected >= max_protect_by_network) break;\r\n+                if (num_protected == max_protect_by_network) break;\r\n             }\r\n         }\r\n         if (!protected_at_least_one) break;\r\n ```        ",
    "created_at": "2021-06-11T18:29:41Z",
    "updated_at": "2021-06-11T18:35:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650190229",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650190229"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650190229"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650190229/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 946,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650191749",
    "pull_request_review_id": 682042627,
    "id": 650191749,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDE5MTc0OQ==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};\n+        const size_t protect_per_network{std::max(remaining_to_protect / networks.size(), static_cast<size_t>(1))};\n+        bool protected_at_least_one{false};",
    "path": "src/net.cpp",
    "position": 120,
    "original_position": 106,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What do you think about commenting the purpose of this variable ?\r\n\r\n\"If not more eviction candidates remain to protect among disadvantaged networks, ensure we exit cleanly\"",
    "created_at": "2021-06-11T18:32:23Z",
    "updated_at": "2021-06-11T18:35:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650191749",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650191749"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650191749"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650191749/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 944,
    "original_line": 944,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414862",
    "pull_request_review_id": 682340479,
    "id": 650414862,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQxNDg2Mg==",
    "diff_hunk": "@@ -894,40 +902,62 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) {\n+                                    return n.is_local ? c.m_is_local : c.m_network == n.id;\n+                                });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};\n+        const size_t protect_per_network{std::max(remaining_to_protect / networks.size(), static_cast<size_t>(1))};\n+        bool protected_at_least_one{false};\n+        for (const Net& n : networks) {\n+            if (n.count == 0) continue;\n+            const size_t before = candidates.size();\n+            EraseLastKElements(candidates, CompareNodeNetworkTime(n.is_local, n.id), protect_per_network,\n+                               [&n](const NodeEvictionCandidate& c) {\n+                                   return n.is_local ? c.m_is_local : c.m_network == n.id;\n+                               });\n+            const size_t after = candidates.size();\n+            if (before > after) {\n+                protected_at_least_one = true;\n+                num_protected += before - after;\n+                if (num_protected >= max_protect_by_network) break;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 120,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "22b1dae1e07326e9644cc0ffcb50196352f32a3d",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Brackets and newlines added",
    "created_at": "2021-06-12T17:22:33Z",
    "updated_at": "2021-06-12T17:22:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414862",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414862"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414862"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414862/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 946,
    "side": "RIGHT",
    "in_reply_to_id": 650032286
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414880",
    "pull_request_review_id": 682340484,
    "id": 650414880,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQxNDg4MA==",
    "diff_hunk": "@@ -36,7 +32,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n             /* nKeyedNetGroup */ random_context.randrange(100),\n             /* prefer_evict */ random_context.randbool(),\n             /* m_is_local */ random_context.randbool(),\n-            /* m_is_onion */ random_context.randbool(),\n+            /* m_network */ static_cast<Network>(random_context.randrange(static_cast<int>(Network::NET_INTERNAL))),",
    "path": "src/test/net_peer_eviction_tests.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-06-12T17:22:43Z",
    "updated_at": "2021-06-12T17:22:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414880",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414880"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414880"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT",
    "in_reply_to_id": 650041974
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414897",
    "pull_request_review_id": 682340491,
    "id": 650414897,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQxNDg5Nw==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2021-06-12T17:22:48Z",
    "updated_at": "2021-06-12T17:22:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414897",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414897"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414897"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 905,
    "side": "RIGHT",
    "in_reply_to_id": 650133285
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414905",
    "pull_request_review_id": 682340500,
    "id": 650414905,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQxNDkwNQ==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2021-06-12T17:22:58Z",
    "updated_at": "2021-06-12T17:22:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414905",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414905"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414905"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 910,
    "side": "RIGHT",
    "in_reply_to_id": 650141548
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414941",
    "pull_request_review_id": 682340511,
    "id": 650414941,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQxNDk0MQ==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 99,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, if there are at least 4 eviction candidates. (Changed per your review feedback from the disadvantaged network with the most candidates to the one with the fewest.)",
    "created_at": "2021-06-12T17:23:11Z",
    "updated_at": "2021-06-12T17:23:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414941",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414941"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414941"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 929,
    "side": "RIGHT",
    "in_reply_to_id": 650164339
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414948",
    "pull_request_review_id": 682340517,
    "id": 650414948,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQxNDk0OA==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 104,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2021-06-12T17:23:16Z",
    "updated_at": "2021-06-12T17:23:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414948",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414948"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414948"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 934,
    "side": "RIGHT",
    "in_reply_to_id": 650167989
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414986",
    "pull_request_review_id": 682340544,
    "id": 650414986,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQxNDk4Ng==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done. As the unit tests show, one peer can make a difference when the numbers are low, e.g. when -maxconnections has been reduced or only one candidate will be protected. ",
    "created_at": "2021-06-12T17:23:48Z",
    "updated_at": "2021-06-12T17:23:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414986",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414986"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650414986"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650414986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 918,
    "side": "RIGHT",
    "in_reply_to_id": 650174352
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650415002",
    "pull_request_review_id": 682340559,
    "id": 650415002,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQxNTAwMg==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};\n+        const size_t protect_per_network{std::max(remaining_to_protect / networks.size(), static_cast<size_t>(1))};\n+        bool protected_at_least_one{false};",
    "path": "src/net.cpp",
    "position": 120,
    "original_position": 106,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-06-12T17:24:16Z",
    "updated_at": "2021-06-12T17:24:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650415002",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650415002"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650415002"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650415002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 944,
    "original_line": 944,
    "side": "RIGHT",
    "in_reply_to_id": 650191749
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650416293",
    "pull_request_review_id": 682341347,
    "id": 650416293,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQxNjI5Mw==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};\n+        const size_t protect_per_network{std::max(remaining_to_protect / networks.size(), static_cast<size_t>(1))};\n+        bool protected_at_least_one{false};\n+        for (const Net& n : networks) {\n+            if (n.count == 0) continue;\n+            const size_t before = candidates.size();\n+            EraseLastKElements(candidates, CompareNodeNetworkTime(n.is_local, n.id), protect_per_network,\n+                               [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+            const size_t after = candidates.size();\n+            if (before > after) {\n+                protected_at_least_one = true;\n+                num_protected += before - after;\n+                if (num_protected >= max_protect_by_network) break;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for checking this! Agree, the tests pass with this change:\r\n```diff\r\n-                if (num_protected >= max_protect_by_network) {\r\n+                assert(num_protected <= max_protect_by_network);\r\n+                if (num_protected == max_protect_by_network) {\r\n```\r\nI think it's expected behavior based on these lines:\r\n```cpp\r\n    while (num_protected < max_protect_by_network) {\r\n        const size_t disadvantaged_to_protect{max_protect_by_network - num_protected};\r\n        const size_t protect_per_network{std::max(disadvantaged_to_protect / networks.size(), static_cast<size_t>(1))};\r\n```\r\n\r\nEdit: This pull has seen several rewrites, so tomorrow I plan to re-verify the pertinence of each test and check for missing cases.",
    "created_at": "2021-06-12T17:37:49Z",
    "updated_at": "2021-06-13T08:50:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650416293",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650416293"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650416293"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650416293/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 946,
    "side": "RIGHT",
    "in_reply_to_id": 650190229
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650553691",
    "pull_request_review_id": 682430070,
    "id": 650553691,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU1MzY5MQ==",
    "diff_hunk": "@@ -36,7 +32,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n             /* nKeyedNetGroup */ random_context.randrange(100),\n             /* prefer_evict */ random_context.randbool(),\n             /* m_is_local */ random_context.randbool(),\n-            /* m_is_onion */ random_context.randbool(),\n+            /* m_network */ static_cast<Network>(random_context.randrange(static_cast<int>(Network::NET_INTERNAL))),",
    "path": "src/test/net_peer_eviction_tests.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Huh, the CI is barfing on this change. Strange.",
    "created_at": "2021-06-13T17:18:33Z",
    "updated_at": "2021-06-13T17:18:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650553691",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650553691"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650553691"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650553691/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT",
    "in_reply_to_id": 650041974
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650556232",
    "pull_request_review_id": 682431757,
    "id": 650556232,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU1NjIzMg==",
    "diff_hunk": "@@ -36,7 +32,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n             /* nKeyedNetGroup */ random_context.randrange(100),\n             /* prefer_evict */ random_context.randbool(),\n             /* m_is_local */ random_context.randbool(),\n-            /* m_is_onion */ random_context.randbool(),\n+            /* m_network */ static_cast<Network>(random_context.randrange(static_cast<int>(Network::NET_INTERNAL))),",
    "path": "src/test/net_peer_eviction_tests.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This might be a compiler bug. I used `static constexpr auto ALL_FEE_ESTIMATE_HORIZONS = std::array{` to work around that.",
    "created_at": "2021-06-13T17:43:17Z",
    "updated_at": "2021-06-13T17:43:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650556232",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650556232"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650556232"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650556232/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT",
    "in_reply_to_id": 650041974
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650559654",
    "pull_request_review_id": 682433912,
    "id": 650559654,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU1OTY1NA==",
    "diff_hunk": "@@ -36,7 +32,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n             /* nKeyedNetGroup */ random_context.randrange(100),\n             /* prefer_evict */ random_context.randbool(),\n             /* m_is_local */ random_context.randbool(),\n-            /* m_is_onion */ random_context.randbool(),\n+            /* m_network */ static_cast<Network>(random_context.randrange(static_cast<int>(Network::NET_INTERNAL))),",
    "path": "src/test/net_peer_eviction_tests.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks! Will try that.",
    "created_at": "2021-06-13T18:16:18Z",
    "updated_at": "2021-06-13T18:16:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650559654",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650559654"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650559654"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650559654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT",
    "in_reply_to_id": 650041974
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650578603",
    "pull_request_review_id": 682445761,
    "id": 650578603,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDU3ODYwMw==",
    "diff_hunk": "@@ -36,7 +32,7 @@ std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_c\n             /* nKeyedNetGroup */ random_context.randrange(100),\n             /* prefer_evict */ random_context.randbool(),\n             /* m_is_local */ random_context.randbool(),\n-            /* m_is_onion */ random_context.randbool(),\n+            /* m_network */ static_cast<Network>(random_context.randrange(static_cast<int>(Network::NET_INTERNAL))),",
    "path": "src/test/net_peer_eviction_tests.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It worked \ud83d\udc4d",
    "created_at": "2021-06-13T21:17:39Z",
    "updated_at": "2021-06-13T21:17:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650578603",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650578603"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650578603"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650578603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT",
    "in_reply_to_id": 650041974
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650818867",
    "pull_request_review_id": 682737970,
    "id": 650818867,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDgxODg2Nw==",
    "diff_hunk": "@@ -894,40 +903,71 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& eviction_candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n+    // To favorise the diversity of our peer connections, reserve up to half of these protected\n+    // spots for Tor/onion, localhost and I2P peers, even if they're not longest uptime overall.\n+    // This helps protect these higher-latency peers that tend to be otherwise\n     // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    const size_t initial_size = eviction_candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Disadvantaged networks to protect: I2P, localhost, Tor/onion. In case of equal counts, earlier\n+    // array members have first opportunity to recover unused slots from the previous iteration.\n+    struct Net { bool is_local; Network id; size_t count; };\n+    std::array<Net, 3> networks{{{0, NET_I2P, 0}, {/* localhost */ 1, NET_MAX, 0}, {0, NET_ONION, 0}}};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 96,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "a457f34e5039b75ee015b273028c3ee153656d5c",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: use `true` /  `false` for `bool`:\r\n\r\n```suggestion\r\n    std::array<Net, 3> networks{{{false, NET_I2P, 0}, {/* localhost */ true, NET_MAX, 0}, {false, NET_ONION, 0}}};\r\n```",
    "created_at": "2021-06-14T10:11:49Z",
    "updated_at": "2021-06-14T11:24:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650818867",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650818867"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650818867"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650818867/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 920,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650865137",
    "pull_request_review_id": 682800052,
    "id": 650865137,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDg2NTEzNw==",
    "diff_hunk": "@@ -894,40 +903,71 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& eviction_candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n+    // To favorise the diversity of our peer connections, reserve up to half of these protected\n+    // spots for Tor/onion, localhost and I2P peers, even if they're not longest uptime overall.\n+    // This helps protect these higher-latency peers that tend to be otherwise\n     // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    const size_t initial_size = eviction_candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Disadvantaged networks to protect: I2P, localhost, Tor/onion. In case of equal counts, earlier\n+    // array members have first opportunity to recover unused slots from the previous iteration.\n+    struct Net { bool is_local; Network id; size_t count; };\n+    std::array<Net, 3> networks{{{0, NET_I2P, 0}, {/* localhost */ 1, NET_MAX, 0}, {0, NET_ONION, 0}}};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 96,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "a457f34e5039b75ee015b273028c3ee153656d5c",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, I did this to keep the line length down as it's a standard conversion, but sure.",
    "created_at": "2021-06-14T11:29:32Z",
    "updated_at": "2021-06-14T11:29:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650865137",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650865137"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650865137"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650865137/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 920,
    "side": "RIGHT",
    "in_reply_to_id": 650818867
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650869018",
    "pull_request_review_id": 682805251,
    "id": 650869018,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDg2OTAxOA==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};\n+        const size_t protect_per_network{std::max(remaining_to_protect / networks.size(), static_cast<size_t>(1))};\n+        bool protected_at_least_one{false};\n+        for (const Net& n : networks) {\n+            if (n.count == 0) continue;\n+            const size_t before = candidates.size();\n+            EraseLastKElements(candidates, CompareNodeNetworkTime(n.is_local, n.id), protect_per_network,\n+                               [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+            const size_t after = candidates.size();\n+            if (before > after) {\n+                protected_at_least_one = true;\n+                num_protected += before - after;\n+                if (num_protected >= max_protect_by_network) break;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Given that `num_protected` is incremented with a non-constant number, that could be larger than `1`, I assume it could become larger than `max_protect_by_network` at some point. Thus `>=` for comparison instead of `==`.\r\n\r\nHow could replacing `>=` with `==` and an assert change anything? I think if it changes anything then it must be a trigger of the assert - if it was equal before, then behavior is unchanged (`>=` is the same as `==`) and if it was strictly larger, before we would have executed `break;` and after the change - triggered the assert.\r\n\r\nTo me that assert looks scary, even if some (non-obvious) arithmetic a few lines above mandates it will never be triggered. The code may be altered in the future which may change this. Also, even if it happens that `num_protected > max_protect_by_network`, then nothing really bad has happened - we protected some peers (more than we intended), the program can continue executing just fine.\r\n\r\n_(the code at the time I write this does not contain an assert (a457f34e5039b75ee015b273028c3ee153656d5c))_",
    "created_at": "2021-06-14T11:36:16Z",
    "updated_at": "2021-06-14T11:36:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650869018",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650869018"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650869018"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650869018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 946,
    "side": "RIGHT",
    "in_reply_to_id": 650190229
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650877124",
    "pull_request_review_id": 682816353,
    "id": 650877124,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDg3NzEyNA==",
    "diff_hunk": "@@ -894,40 +902,58 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n+    // Networks to protect: localhost, onion, I2P. In case of equal counts, earlier array members\n+    // have the first opportunity to recover unused protection slots from the previous iteration.\n+    struct Net { Network id; size_t count; bool is_local; };\n+    std::array<Net, 3> networks{{{/* localhost */ NET_MAX, 0, 1}, {NET_ONION, 0, 0}, {NET_I2P, 0, 0}}};\n+\n+    for (Net& n : networks) { // Count and store the number of eviction candidates per network.\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(),\n+                                [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+    }\n+    // Sort `networks` by descending candidate count, to give networks having more candidates\n+    // the first opportunity to recover unused protection slots from the previous iteration.\n+    std::stable_sort(networks.begin(), networks.end(), [](Net a, Net b) { return a.count > b.count; });\n+\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Protect up to 25% of the candidates by disadvantaged network.\n+    const size_t max_protect_by_network{total_protect_size / 2};\n+    size_t num_protected{0};\n+\n+    while (num_protected < max_protect_by_network) {\n+        const size_t remaining_to_protect{max_protect_by_network - num_protected};\n+        const size_t protect_per_network{std::max(remaining_to_protect / networks.size(), static_cast<size_t>(1))};\n+        bool protected_at_least_one{false};\n+        for (const Net& n : networks) {\n+            if (n.count == 0) continue;\n+            const size_t before = candidates.size();\n+            EraseLastKElements(candidates, CompareNodeNetworkTime(n.is_local, n.id), protect_per_network,\n+                               [&n](const NodeEvictionCandidate& c) { return n.is_local ? c.m_is_local : c.m_network == n.id; });\n+            const size_t after = candidates.size();\n+            if (before > after) {\n+                protected_at_least_one = true;\n+                num_protected += before - after;\n+                if (num_protected >= max_protect_by_network) break;",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 116,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "42530190d82ee1692a546a8daae89e3ba0f5a3a2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Right, the assert was just for sanity testing (I wrote more tests but didn't find a way to hit the assert), no plan to add it. ",
    "created_at": "2021-06-14T11:50:25Z",
    "updated_at": "2021-06-14T11:50:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650877124",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650877124"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650877124"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650877124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 946,
    "side": "RIGHT",
    "in_reply_to_id": 650190229
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650885978",
    "pull_request_review_id": 682828264,
    "id": 650885978,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDg4NTk3OA==",
    "diff_hunk": "@@ -894,40 +903,71 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& eviction_candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n+    // To favorise the diversity of our peer connections, reserve up to half of these protected\n+    // spots for Tor/onion, localhost and I2P peers, even if they're not longest uptime overall.\n+    // This helps protect these higher-latency peers that tend to be otherwise\n     // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    const size_t initial_size = eviction_candidates.size();\n+    const size_t total_protect_size{initial_size / 2};\n+\n+    // Disadvantaged networks to protect: I2P, localhost, Tor/onion. In case of equal counts, earlier\n+    // array members have first opportunity to recover unused slots from the previous iteration.\n+    struct Net { bool is_local; Network id; size_t count; };\n+    std::array<Net, 3> networks{{{0, NET_I2P, 0}, {/* localhost */ 1, NET_MAX, 0}, {0, NET_ONION, 0}}};",
    "path": "src/net.cpp",
    "position": null,
    "original_position": 96,
    "commit_id": "1b1088d52fbff8b1c9438d6aa8c6edcbdd471457",
    "original_commit_id": "a457f34e5039b75ee015b273028c3ee153656d5c",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done.",
    "created_at": "2021-06-14T12:04:43Z",
    "updated_at": "2021-06-14T12:04:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650885978",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650885978"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r650885978"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650885978/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 920,
    "side": "RIGHT",
    "in_reply_to_id": 650818867
  }
]