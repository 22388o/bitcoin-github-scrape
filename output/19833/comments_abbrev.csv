DrahtBot,2020-08-29 18:30:25,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22341](https://github.com/bitcoin/bitcoin/pull/22341) (rpc: add getxpub by Sjors)\n* [#20205](https://github.com/bitcoin",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-683326649,683326649,
hebasto,2020-08-30 07:46:56,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-683388458,683388458,
promag,2020-08-31 14:33:51,"> we will be forced to guard all such functions with negative assertions `EXCLUSIVE_LOCKS_REQUIRED(!m_wallet->cs_wallet)`\n\nSeems unnecessary no? Locking an already locked `Mutex` fails. If you really want static analysis then we could add a new method in the private implementation just to add the annotation?",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-683817419,683817419,
MarcoFalke,2020-08-31 14:34:32,"> Placing LOCK() macros in member functions of a class that implements an interface is not a good idea. When CWallet::cs_wallet actually transits from RecurviseMutex to Mutex we will be forced to guard all such functions with negative assertions EXCLUSIVE_LOCKS_REQUIRED(!m_wallet->cs_wallet). But they won't work as they are placed not in a header file.\n\nThere are already LOCK(cs_wallet) in the",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-683817871,683817871,
hebasto,2020-08-31 14:41:11,"@promag \n> > we will be forced to guard all such functions with negative assertions `EXCLUSIVE_LOCKS_REQUIRED(!m_wallet->cs_wallet)`\n> \n> Seems unnecessary no? Locking an already locked `Mutex` fails.\n\nYes, it does. In run time.\n\n> If you really want static analysis then we could add a new method in the private implementation just to add the annotation?\n\nActually moving implement",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-683822082,683822082,
promag,2020-08-31 14:45:26,"> Actually moving implementation class declaration into a header will help.\n\nI don't understand what you mean, please elaborate.",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-683825024,683825024,
ryanofsky,2020-08-31 15:05:51,"I don't think you could use EXCLUSIVE_LOCKS_REQUIRED(!m_wallet->cs_wallet) in the interfaces::WalletImpl class, for the same reason you couldn't use EXCLUSIVE_LOCKS_REQUIRED(!pwallet->cs_wallet) on RPC methods, because method callers can't know which wallet object the wallet pointer points to, so couldn't provably meet the requirements.\n\nTo make cs_wallet non-recursive, you I think you just ne",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-683837483,683837483,
ryanofsky,2020-08-31 15:11:02,"> Actually moving implementation class declaration into a header will help.\n\nThe reason the implementation class is not in a header is that implementation class methods are never called directly. They are only called through the interface, and the interface is only called by the GUI. I don't think there's a way to make GUI aware of cs_wallet and be able to satisfy assertions about whether it i",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-683840639,683840639,
hebasto,2020-08-31 17:33:30,"@ryanofsky \n> > Actually moving implementation class declaration into a header will help.\n> \n> The reason the implementation class is not in a header is that implementation class methods are never called directly. They are only called through the interface, and the interface is only called by the GUI. I don't think there's a way to make GUI aware of cs_wallet and be able to satisfy assertion",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-683922388,683922388,
promag,2020-11-07 11:51:38,"@hebasto rebased to have a fresh build, mind taking a 2nd look?\n\n@meshcollider ping.",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-723436488,723436488,
hebasto,2021-09-03 15:31:42,"@promag \n\nA friendly reminder to rebase :)\n\nHappy to re-ACK then.",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-912624434,912624434,
promag,2021-09-04 10:39:12,"To be fair #22100 simplified this change, 97dbdcd7eb1cf8c10f9cfd92c23ac9ef58d1d5cb is no longer necessary.",https://github.com/bitcoin/bitcoin/pull/19833#issuecomment-912951315,912951315,
hebasto,2020-08-30 08:45:19,"Probably, it would be a cleaner code with two methods:\n- `getBalance() EXCLUSIVE_LOCKS_REQUIRED(!m_wallet->cs_wallet)`\n- `getBalance_cs() EXCLUSIVE_LOCKS_REQUIRED(m_wallet->cs_wallet)`\n\nSee:\n- https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-646226615\n- a7b1a649ec473bd9811e34cf489bd88b3c3d6406 (#19238)",https://github.com/bitcoin/bitcoin/pull/19833#discussion_r479741525,479741525,src/interfaces/wallet.cpp
hebasto,2020-08-30 10:48:49,It could replace 6 instances of added `WITH_LOCK()` :),https://github.com/bitcoin/bitcoin/pull/19833#discussion_r479753710,479753710,src/interfaces/wallet.cpp
promag,2020-08-31 12:46:47,Do you mean `getBalance` or `GetBalance`? I don't see why we want that on `interfaces::Wallet`. If you mean `GetBalance` then ATM I tend to prefer explicit `WITH_LOCK`/`LOCK` for so few cases. If we go that way then I'd prefer to overload `GetBalance(Lock)`.,https://github.com/bitcoin/bitcoin/pull/19833#discussion_r480105962,480105962,src/interfaces/wallet.cpp
hebasto,2020-08-31 13:49:37,"> Do you mean `getBalance` or `GetBalance`?\n\nMy suggestion is wrong and confusing. Please ignore it.\n\n> If we go that way then I'd prefer to overload `GetBalance(Lock)`.\n\nI'm afraid Clang Thread Safety Analysis won't understand it due to https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#no-alias-analysis",https://github.com/bitcoin/bitcoin/pull/19833#discussion_r480143790,480143790,src/interfaces/wallet.cpp
hebasto,2020-11-12 09:56:36,Could the lock be bounded to `GetBalance` only?,https://github.com/bitcoin/bitcoin/pull/19833#discussion_r521978861,521978861,src/interfaces/wallet.cpp
promag,2020-11-12 10:20:36,WITH_LOCK?,https://github.com/bitcoin/bitcoin/pull/19833#discussion_r521994566,521994566,src/interfaces/wallet.cpp
hebasto,2020-11-12 10:22:45,"> WITH_LOCK?\n\nThat is my thought.",https://github.com/bitcoin/bitcoin/pull/19833#discussion_r521995978,521995978,src/interfaces/wallet.cpp
promag,2020-11-12 15:18:59,I think it's no big deal for now. I'll do it it I have to update.,https://github.com/bitcoin/bitcoin/pull/19833#discussion_r522185664,522185664,src/interfaces/wallet.cpp
