[
  {
    "sha": "3d4fa83587759095b7f0ccfe4075808098d4ae7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDRmYTgzNTg3NzU5MDk1YjdmMGNjZmU0MDc1ODA4MDk4ZDRhZTdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-29T16:49:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-30T12:23:35Z"
      },
      "message": "Stop translating command line options\n\nMany options are extremely technical, and refer internals, making it\ndifficult to translate usefully. This came up in discussion of e.g.\n #10949. If a message is not understood by translators (which are\ntypically end-users, not developers) they'll either translate it\nliterally, making it harder to understand instead of easier, with the\nadded drawback of the user no longer being able to google it.\n\nAlso the translation was only working for bitcoin-qt as with\nthe console programs, there is no translation backend. So it was\ninjecting never-used translation messages for bitcoin-cli, -tx.\n\nFor these reasons, stop translating options help completely. This should\nnot affect the output **in any way** except for bitcoin-qt when a\nnon-English language is configured in the locale.\n\nThis implements #10962.",
      "tree": {
        "sha": "a64937b619cc45b8f3d30795fa36f7bbe8f0c914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a64937b619cc45b8f3d30795fa36f7bbe8f0c914"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d4fa83587759095b7f0ccfe4075808098d4ae7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d4fa83587759095b7f0ccfe4075808098d4ae7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d4fa83587759095b7f0ccfe4075808098d4ae7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d4fa83587759095b7f0ccfe4075808098d4ae7f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a8e3f480612e29f5a8b208f31cedc687f66b9df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a8e3f480612e29f5a8b208f31cedc687f66b9df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a8e3f480612e29f5a8b208f31cedc687f66b9df"
      }
    ],
    "stats": {
      "total": 413,
      "additions": 206,
      "deletions": 207
    },
    "files": [
      {
        "sha": "1a2671e8d13ba64d7ada713dbc382e232ddf6ddc",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -24,15 +24,15 @@ static const int64_t DEFAULT_PLOT_HEIGHT = 768;\n \n static void SetupBenchArgs()\n {\n-    gArgs.AddArg(\"-?\", _(\"Print this help message and exit\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-list\", _(\"List benchmarks without executing them. Can be combined with -scaling and -filter\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-evals=<n>\", strprintf(_(\"Number of measurement evaluations to perform. (default: %u)\"), DEFAULT_BENCH_EVALUATIONS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-filter=<regex>\", strprintf(_(\"Regular expression filter to select benchmark by name (default: %s)\"), DEFAULT_BENCH_FILTER), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-scaling=<n>\", strprintf(_(\"Scaling factor for benchmark's runtime (default: %u)\"), DEFAULT_BENCH_SCALING), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-printer=(console|plot)\", strprintf(_(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\"), DEFAULT_BENCH_PRINTER), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(_(\"URL to use for plotly.js (default: %s)\"), DEFAULT_PLOT_PLOTLYURL), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-width=<x>\", strprintf(_(\"Plot width in pixel (default: %u)\"), DEFAULT_PLOT_WIDTH), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-plot-height=<x>\", strprintf(_(\"Plot height in pixel (default: %u)\"), DEFAULT_PLOT_HEIGHT), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-list\", \"List benchmarks without executing them. Can be combined with -scaling and -filter\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-evals=<n>\", strprintf(\"Number of measurement evaluations to perform. (default: %u)\", DEFAULT_BENCH_EVALUATIONS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-filter=<regex>\", strprintf(\"Regular expression filter to select benchmark by name (default: %s)\", DEFAULT_BENCH_FILTER), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-scaling=<n>\", strprintf(\"Scaling factor for benchmark's runtime (default: %u)\", DEFAULT_BENCH_SCALING), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-printer=(console|plot)\", strprintf(\"Choose printer format. console: print data to console. plot: Print results as HTML graph (default: %s)\", DEFAULT_BENCH_PRINTER), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-plotlyurl=<uri>\", strprintf(\"URL to use for plotly.js (default: %s)\", DEFAULT_PLOT_PLOTLYURL), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-width=<x>\", strprintf(\"Plot width in pixel (default: %u)\", DEFAULT_PLOT_WIDTH), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-plot-height=<x>\", strprintf(\"Plot height in pixel (default: %u)\", DEFAULT_PLOT_HEIGHT), false, OptionsCategory::OPTIONS);\n }\n \n int"
      },
      {
        "sha": "84c0325014558b7610701e6c346d38666d5aaf7b",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -34,21 +34,21 @@ static void SetupCliArgs()\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n \n-    gArgs.AddArg(\"-?\", _(\"This help message\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", _(\"Specify data directory\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-getinfo\", _(\"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", false, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions();\n-    gArgs.AddArg(\"-named\", strprintf(_(\"Pass named instead of positional arguments (default: %s)\"), DEFAULT_NAMED), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(_(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\"), DEFAULT_HTTP_CLIENT_TIMEOUT), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwait\", _(\"Wait for RPC server to start\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-rpcwallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind)\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-stdinrpcpass\", strprintf(_(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\")), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-stdinrpcpass\", strprintf(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\"), false, OptionsCategory::OPTIONS);\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -82,13 +82,13 @@ static int AppInitRPC(int argc, char* argv[])\n     SetupCliArgs();\n     gArgs.ParseParameters(argc, argv);\n     if (argc < 2 || HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n-        std::string strUsage = strprintf(_(\"%s RPC client version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\";\n+        std::string strUsage = strprintf(\"%s RPC client version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\";\n         if (!gArgs.IsArgSet(\"-version\")) {\n-            strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +\n-                  \"  bitcoin-cli [options] <command> [params]  \" + strprintf(_(\"Send command to %s\"), _(PACKAGE_NAME)) + \"\\n\" +\n-                  \"  bitcoin-cli [options] -named <command> [name=value] ... \" + strprintf(_(\"Send command to %s (with named arguments)\"), _(PACKAGE_NAME)) + \"\\n\" +\n-                  \"  bitcoin-cli [options] help                \" + _(\"List commands\") + \"\\n\" +\n-                  \"  bitcoin-cli [options] help <command>      \" + _(\"Get help for a command\") + \"\\n\";\n+            strUsage += \"\\nUsage:\\n\"\n+                  \"  bitcoin-cli [options] <command> [params]  \" + strprintf(\"Send command to %s\", PACKAGE_NAME) + \"\\n\" +\n+                  \"  bitcoin-cli [options] -named <command> [name=value] ... \" + strprintf(\"Send command to %s (with named arguments)\", PACKAGE_NAME) + \"\\n\" +\n+                  \"  bitcoin-cli [options] help                List commands\\n\" +\n+                  \"  bitcoin-cli [options] help <command>      Get help for a command\\n\";\n \n             strUsage += \"\\n\" + gArgs.GetHelpMessage();\n         }\n@@ -364,7 +364,7 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n     } else if (response.status == HTTP_UNAUTHORIZED) {\n         if (failedToGetAuthCookie) {\n             throw std::runtime_error(strprintf(\n-                _(\"Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (%s)\"),\n+                \"Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (%s)\",\n                 GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string().c_str()));\n         } else {\n             throw std::runtime_error(\"Authorization failed: Incorrect rpcuser or rpcpassword\");"
      },
      {
        "sha": "8b542dc9b8c545d118e1952aad60ae832813152b",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -33,37 +33,37 @@ static const int CONTINUE_EXECUTION=-1;\n \n static void SetupBitcoinTxArgs()\n {\n-    gArgs.AddArg(\"-?\", _(\"This help message\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-create\", _(\"Create new, empty TX.\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-json\", _(\"Select JSON output\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-txid\", _(\"Output only the hex-encoded transaction id of the resultant transaction.\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-?\", \"This help message\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-create\", \"Create new, empty TX.\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-json\", \"Select JSON output\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-txid\", \"Output only the hex-encoded transaction id of the resultant transaction.\", false, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions();\n \n-    gArgs.AddArg(\"delin=N\", _(\"Delete input N from TX\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"delout=N\", _(\"Delete output N from TX\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", _(\"Add input to TX\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"locktime=N\", _(\"Set TX lock time to N\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"nversion=N\", _(\"Set TX version to N\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outdata=[VALUE:]DATA\", _(\"Add data-based output to TX\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", _(\"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS\") + \". \" +\n-        _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output\") + \". \" +\n-        _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", _(\"Add pay-to-pubkey output to TX\") + \". \" +\n-        _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output\") + \". \" +\n-        _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"outscript=VALUE:SCRIPT[:FLAGS]\", _(\"Add raw script output to TX\") + \". \" +\n-        _(\"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output\") + \". \" +\n-        _(\"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"replaceable(=N)\", _(\"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\"), false, OptionsCategory::COMMANDS);\n-    gArgs.AddArg(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n-        _(\"This command requires JSON registers:\") +\n-        _(\"prevtxs=JSON object\") + \", \" +\n-        _(\"privatekeys=JSON object\") + \". \" +\n-        _(\"See signrawtransaction docs for format of sighash flags, JSON objects.\"), false, OptionsCategory::COMMANDS);\n-\n-    gArgs.AddArg(\"load=NAME:FILENAME\", _(\"Load JSON file FILENAME into register NAME\"), false, OptionsCategory::REGISTER_COMMANDS);\n-    gArgs.AddArg(\"set=NAME:JSON-STRING\", _(\"Set register NAME to given JSON-STRING\"), false, OptionsCategory::REGISTER_COMMANDS);\n+    gArgs.AddArg(\"delin=N\", \"Delete input N from TX\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"delout=N\", \"Delete output N from TX\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"in=TXID:VOUT(:SEQUENCE_NUMBER)\", \"Add input to TX\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"locktime=N\", \"Set TX lock time to N\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"nversion=N\", \"Set TX version to N\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outaddr=VALUE:ADDRESS\", \"Add address-based output to TX\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outdata=[VALUE:]DATA\", \"Add data-based output to TX\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\", \"Add Pay To n-of-m Multi-sig output to TX. n = REQUIRED, m = PUBKEYS. \"\n+        \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outpubkey=VALUE:PUBKEY[:FLAGS]\", \"Add pay-to-pubkey output to TX. \"\n+        \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-pubkey-hash output. \"\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"outscript=VALUE:SCRIPT[:FLAGS]\", \"Add raw script output to TX. \"\n+        \"Optionally add the \\\"W\\\" flag to produce a pay-to-witness-script-hash output. \"\n+        \"Optionally add the \\\"S\\\" flag to wrap the output in a pay-to-script-hash.\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"replaceable(=N)\", \"Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)\", false, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"sign=SIGHASH-FLAGS\", \"Add zero or more signatures to transaction. \"\n+        \"This command requires JSON registers:\"\n+        \"prevtxs=JSON object, \"\n+        \"privatekeys=JSON object. \"\n+        \"See signrawtransaction docs for format of sighash flags, JSON objects.\", false, OptionsCategory::COMMANDS);\n+\n+    gArgs.AddArg(\"load=NAME:FILENAME\", \"Load JSON file FILENAME into register NAME\", false, OptionsCategory::REGISTER_COMMANDS);\n+    gArgs.AddArg(\"set=NAME:JSON-STRING\", \"Set register NAME to given JSON-STRING\", false, OptionsCategory::REGISTER_COMMANDS);\n }\n \n //\n@@ -90,10 +90,10 @@ static int AppInitRawTx(int argc, char* argv[])\n \n     if (argc < 2 || HelpRequested(gArgs)) {\n         // First part of help message is specific to this utility\n-        std::string strUsage = strprintf(_(\"%s bitcoin-tx utility version\"), _(PACKAGE_NAME)) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n-            _(\"Usage:\") + \"\\n\" +\n-              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n-              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+        std::string strUsage = strprintf(\"%s bitcoin-tx utility version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            \"Usage:\\n\"\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  Update hex-encoded bitcoin transaction\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   Create hex-encoded bitcoin transaction\\n\" +\n               \"\\n\";\n         strUsage += gArgs.GetHelpMessage();\n "
      },
      {
        "sha": "35c05dad4192e0c80c4389ae55b9d61ec3f1e8bb",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -63,22 +63,22 @@ static bool AppInit(int argc, char* argv[])\n     // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n     SetupServerArgs();\n #if HAVE_DECL_DAEMON\n-    gArgs.AddArg(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-daemon\", \"Run in the background as a daemon and accept commands\", false, OptionsCategory::OPTIONS);\n #endif\n     gArgs.ParseParameters(argc, argv);\n \n     // Process help and version before taking care about datadir\n     if (HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n-        std::string strUsage = strprintf(_(\"%s Daemon\"), _(PACKAGE_NAME)) + \" \" + _(\"version\") + \" \" + FormatFullVersion() + \"\\n\";\n+        std::string strUsage = strprintf(\"%s Daemon\", PACKAGE_NAME) + \" version \" + FormatFullVersion() + \"\\n\";\n \n         if (gArgs.IsArgSet(\"-version\"))\n         {\n             strUsage += FormatParagraph(LicenseInfo());\n         }\n         else\n         {\n-            strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +\n-                  \"  bitcoind [options]                     \" + strprintf(_(\"Start %s Daemon\"), _(PACKAGE_NAME)) + \"\\n\";\n+            strUsage += \"\\nUsage:\\n\"\n+                  \"  bitcoind [options]                     \" + strprintf(\"Start %s Daemon\", PACKAGE_NAME) + \"\\n\";\n \n             strUsage += \"\\n\" + gArgs.GetHelpMessage();\n         }"
      },
      {
        "sha": "787d8d8f6aa3fff62b9929f96ac75762d2500891",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -18,7 +18,7 @@ void SetupChainParamsBaseOptions()\n {\n     gArgs.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                                    \"This is intended for regression testing tools and app development.\", true, OptionsCategory::CHAINPARAMS);\n-    gArgs.AddArg(\"-testnet\", _(\"Use the test chain\"), false, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-testnet\", \"Use the test chain\", false, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "882371946c11e55182b20d308ff0aad90cd0f7f4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 98,
        "changes": 195,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -350,94 +350,93 @@ void SetupServerArgs()\n \n     // Set all of the args and their help\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n-    // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n-    gArgs.AddArg(\"-?\", _(\"Print this help message and exit\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-version\", _(\"Print version and exit\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-datadir=<dir>\", _(\"Specify data directory\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-?\", \"Print this help message and exit\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", \"Print version and exit\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksdir=<dir>\", \"Specify blocks directory (default: <datadir>/blocks)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(\"Whether to operate in a blocks only mode (default: %u)\", DEFAULT_BLOCKSONLY), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-datadir=<dir>\", \"Specify data directory\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(\"Set database cache size in megabytes (%d to %d, default: %d)\", nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-includeconf=<file>\", _(\"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-loadblock=<file>\", \"Imports blocks from external blk000??.dat file on startup\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), true, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n+    gArgs.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    gArgs.AddArg(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n #endif\n-    gArgs.AddArg(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n+    gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n-            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"), false, OptionsCategory::OPTIONS);\n-    gArgs.AddArg(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"), false, OptionsCategory::OPTIONS);\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks\", false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    gArgs.AddArg(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-sysperms\", \"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\", false, OptionsCategory::OPTIONS);\n #endif\n-    gArgs.AddArg(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n-\n-    gArgs.AddArg(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-enablebip61\", strprintf(_(\"Send reject messages per BIP61 (default: %u)\"), DEFAULT_ENABLE_BIP61), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-externalip=<ip>\", _(\"Specify your own public address\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-torpassword=<pass>\", _(\"Tor control port password (default: empty)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+\n+    gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bind=<addr>\", \"Bind to given address and always listen on it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", \"Connect only to the specified node(s); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-enablebip61\", strprintf(\"Send reject messages per BIP61 (default: %u)\", DEFAULT_ENABLE_BIP61), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor hidden service (default: %d)\", DEFAULT_LISTEN_ONION), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u)\", DEFAULT_MAX_PEER_CONNECTIONS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXRECEIVEBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\", DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onlynet=<net>\", \"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u or testnet: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", false, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n-    gArgs.AddArg(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-upnp\", \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\", false, OptionsCategory::CONNECTION);\n #else\n-    gArgs.AddArg(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-upnp\", strprintf(\"Use UPnP to map the listening port (default: %u)\", 0), false, OptionsCategory::CONNECTION);\n #endif\n #endif\n-    gArgs.AddArg(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n-        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitebind=<addr>\", \"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitelist=<IP address or network>\", \"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\"\n+        \" Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\", false, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions();\n \n #if ENABLE_ZMQ\n-    gArgs.AddArg(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"), false, OptionsCategory::ZMQ);\n-    gArgs.AddArg(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", false, OptionsCategory::ZMQ);\n #endif\n \n-    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(\"How many blocks to check at startup (default: %u, 0 = all)\", DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checklevel=<n>\", strprintf(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\", DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n@@ -451,55 +450,55 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n-        _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debug=<category>\", strprintf(\"Output debugging information (default: %u, supplying <category> is optional)\", 0) + \". \" +\n+        \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-help-debug\", \"Show all debugging options (usage: --help -help-debug)\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n+    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"), false, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console instead of debug.log file\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", false, OptionsCategory::DEBUG_TEST);\n \n     SetupChainParamsBaseOptions();\n \n     gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), true, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), true, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), true, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n+    gArgs.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-mempoolreplacement\", strprintf(\"Enable transaction replacement in the memory pool (default: %u)\", DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\", DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n \n \n-    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT), false, OptionsCategory::BLOCK_CREATION);\n-    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), false, OptionsCategory::BLOCK_CREATION);\n     gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", true, OptionsCategory::BLOCK_CREATION);\n \n-    gArgs.AddArg(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", \"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", false, OptionsCategory::RPC);\n     gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n-    gArgs.AddArg(\"-server\", _(\"Accept command line and JSON-RPC commands\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", false, OptionsCategory::RPC);\n }\n \n std::string LicenseInfo()"
      },
      {
        "sha": "87dfdb73d3dbd63689bffe352c3aaeb26179ce91",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -546,12 +546,12 @@ static void SetupUIArgs()\n #ifdef ENABLE_WALLET\n     gArgs.AddArg(\"-allowselfsignedrootcertificates\", strprintf(\"Allow self signed root certificates (default: %u)\", DEFAULT_SELFSIGNED_ROOTCERTS), true, OptionsCategory::GUI);\n #endif\n-    gArgs.AddArg(\"-choosedatadir\", strprintf(QObject::tr(\"Choose data directory on startup (default: %u)\").toStdString(), DEFAULT_CHOOSE_DATADIR), false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-lang=<lang>\", QObject::tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\").toStdString(), false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-min\", QObject::tr(\"Start minimized\").toStdString(), false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-resetguisettings\", QObject::tr(\"Reset all settings changed in the GUI\").toStdString(), false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-rootcertificates=<file>\", QObject::tr(\"Set SSL root certificates for payment request (default: -system-)\").toStdString(), false, OptionsCategory::GUI);\n-    gArgs.AddArg(\"-splash\", strprintf(QObject::tr(\"Show splash screen on startup (default: %u)\").toStdString(), DEFAULT_SPLASHSCREEN), false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-choosedatadir\", strprintf(\"Choose data directory on startup (default: %u)\", DEFAULT_CHOOSE_DATADIR), false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-lang=<lang>\", \"Set language, for example \\\"de_DE\\\" (default: system locale)\", false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-min\", \"Start minimized\", false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-resetguisettings\", \"Reset all settings changed in the GUI\", false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-rootcertificates=<file>\", \"Set SSL root certificates for payment request (default: -system-)\", false, OptionsCategory::GUI);\n+    gArgs.AddArg(\"-splash\", strprintf(\"Show splash screen on startup (default: %u)\", DEFAULT_SPLASHSCREEN), false, OptionsCategory::GUI);\n     gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), true, OptionsCategory::GUI);\n }\n "
      },
      {
        "sha": "1da25b076188b34a2fc3ef09d45f399d8adba22a",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -70,8 +70,8 @@ HelpMessageDialog::HelpMessageDialog(interfaces::Node& node, QWidget *parent, bo\n         ui->helpMessage->setVisible(false);\n     } else {\n         setWindowTitle(tr(\"Command-line options\"));\n-        QString header = tr(\"Usage:\") + \"\\n\" +\n-            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]                     \" + \"\\n\";\n+        QString header = \"Usage:\\n\"\n+            \"  bitcoin-qt [command-line options]                     \\n\";\n         QTextCursor cursor(ui->helpMessage->document());\n         cursor.insertText(version);\n         cursor.insertBlock();"
      },
      {
        "sha": "963a7f531f13fda0a8a09a640347d70267e3514b",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -558,36 +558,36 @@ std::string ArgsManager::GetHelpMessage()\n {\n     const bool show_debug = gArgs.GetBoolArg(\"-help-debug\", false);\n \n-    std::string usage = HelpMessageGroup(_(\"Options:\"));\n+    std::string usage = HelpMessageGroup(\"Options:\");\n \n     OptionsCategory last_cat = OptionsCategory::OPTIONS;\n     for (auto& arg : m_available_args) {\n         if (arg.first.first != last_cat) {\n             last_cat = arg.first.first;\n             if (last_cat == OptionsCategory::CONNECTION)\n-                usage += HelpMessageGroup(_(\"Connection options:\"));\n+                usage += HelpMessageGroup(\"Connection options:\");\n             else if (last_cat == OptionsCategory::ZMQ)\n-                usage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n+                usage += HelpMessageGroup(\"ZeroMQ notification options:\");\n             else if (last_cat == OptionsCategory::DEBUG_TEST)\n-                usage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n+                usage += HelpMessageGroup(\"Debugging/Testing options:\");\n             else if (last_cat == OptionsCategory::NODE_RELAY)\n-                usage += HelpMessageGroup(_(\"Node relay options:\"));\n+                usage += HelpMessageGroup(\"Node relay options:\");\n             else if (last_cat == OptionsCategory::BLOCK_CREATION)\n-                usage += HelpMessageGroup(_(\"Block creation options:\"));\n+                usage += HelpMessageGroup(\"Block creation options:\");\n             else if (last_cat == OptionsCategory::RPC)\n-                usage += HelpMessageGroup(_(\"RPC server options:\"));\n+                usage += HelpMessageGroup(\"RPC server options:\");\n             else if (last_cat == OptionsCategory::WALLET)\n-                usage += HelpMessageGroup(_(\"Wallet options:\"));\n+                usage += HelpMessageGroup(\"Wallet options:\");\n             else if (last_cat == OptionsCategory::WALLET_DEBUG_TEST && show_debug)\n-                usage += HelpMessageGroup(_(\"Wallet debugging/testing options:\"));\n+                usage += HelpMessageGroup(\"Wallet debugging/testing options:\");\n             else if (last_cat == OptionsCategory::CHAINPARAMS)\n-                usage += HelpMessageGroup(_(\"Chain selection options:\"));\n+                usage += HelpMessageGroup(\"Chain selection options:\");\n             else if (last_cat == OptionsCategory::GUI)\n-                usage += HelpMessageGroup(_(\"UI Options:\"));\n+                usage += HelpMessageGroup(\"UI Options:\");\n             else if (last_cat == OptionsCategory::COMMANDS)\n-                usage += HelpMessageGroup(_(\"Commands:\"));\n+                usage += HelpMessageGroup(\"Commands:\");\n             else if (last_cat == OptionsCategory::REGISTER_COMMANDS)\n-                usage += HelpMessageGroup(_(\"Register Commands:\"));\n+                usage += HelpMessageGroup(\"Register Commands:\");\n         }\n         if (show_debug || !arg.second.second) {\n             usage += HelpMessageOpt(arg.first.second, arg.second.first);"
      },
      {
        "sha": "daeff1d0e8d442ad249b75cade054f82cc19869e",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d4fa83587759095b7f0ccfe4075808098d4ae7f/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=3d4fa83587759095b7f0ccfe4075808098d4ae7f",
        "patch": "@@ -54,34 +54,34 @@ void WalletInit::AddWalletOptions() const\n {\n     gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n-                                                                \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\"),\n+    gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n+                                                                \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\",\n                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n+    gArgs.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\",\n                                                                CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n+    gArgs.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u)\", DEFAULT_KEYPOOL_SIZE), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n+    gArgs.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-wallet=<path>\", _(\"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\"), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\"), DEFAULT_WALLET_RBF), false, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n-                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-upgradewallet\", \"Upgrade wallet to latest format on startup\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\", false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-zapwallettxes=<mode>\", \"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\"\n+                               \" (1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\", false, OptionsCategory::WALLET);\n \n     gArgs.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), true, OptionsCategory::WALLET_DEBUG_TEST);\n     gArgs.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), true, OptionsCategory::WALLET_DEBUG_TEST);\n     gArgs.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), true, OptionsCategory::WALLET_DEBUG_TEST);\n-    gArgs.AddArg(\"-walletrejectlongchains\", strprintf(_(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\"), DEFAULT_WALLET_REJECT_LONG_CHAINS), true, OptionsCategory::WALLET_DEBUG_TEST);\n+    gArgs.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), true, OptionsCategory::WALLET_DEBUG_TEST);\n }\n \n bool WalletInit::ParameterInteraction() const"
      }
    ]
  }
]