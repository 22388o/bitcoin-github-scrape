theuni,2017-02-08T07:03:18Z,"I see that @TheBlueMatt and I managed to make almost the exact same change:\n2a278cdaf6ea46dc85a61a37a12a8acd7acd5670 vs a5032b5b0c55c90a8e4df658d85d99824cf4699d. I'm happy to rebase and drop mine if his goes in first.\n\nEdit: I should also mention that this and #9715 are complementary.",https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278245944,278245944,
rebroad,2017-02-08T10:39:21Z,What is the risk by not merging this?,https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278292537,278292537,
TheBlueMatt,2017-02-08T14:02:11Z,"Concept ACK, will give this a more full review after breakfast.\n\nOn February 8, 2017 1:46:00 AM EST, Cory Fields <notifications@github.com> wrote:\n>This is the last of my net issues for 0.14. As discussed with\n>@TheBlueMatt and @gmaxwell.\n>\n>Fixes for a few problems discovered while running a network\n>stress/fuzzer:\n>- Remote nodes weren't always banned when they hadn't yet sent a\n>verack",https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278336444,278336444,
theuni,2017-02-08T16:32:49Z,"I got a few questions about these changes, so I've updated the commit messages to provide (I hope) better back-story/context.",https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278380156,278380156,
TheBlueMatt,2017-02-10T16:29:58Z,"utACK df1a32392933a4f716c53d62703a56e8d8bda9da, did not review tests.",https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-278991391,278991391,
theuni,2017-02-11T02:54:53Z,"@jnewbery Thanks for the great test review. I'm not sure I'll have time to get to this before Sunday, so let's not let it hold back merge if a few more ACKs come in. I'll for sure fix up the tests post-merge if that's the case.",https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-279115917,279115917,
theuni,2017-02-14T00:40:09Z,"Fixed up the tests and squashed. Only the tests changed, the bitcoin code is exactly the same as before squash. I've archived the old branch here: https://github.com/theuni/bitcoin/commits/fix-ban2 in case anyone wants to compare.\n\nI replaced my mininode changes with @TheBlueMatt's commits from #9715, so that these won't conflict with eachother.",https://github.com/bitcoin/bitcoin/pull/9720#issuecomment-279570639,279570639,
instagibbs,2017-02-08T15:40:50Z,mind putting braces around this?,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100094218,100094218,src/net_processing.cpp
instagibbs,2017-02-08T15:52:03Z,nit: The name makes me think `true` means `fShouldBan` was set to true. Invert the boolean?,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100097401,100097401,src/net_processing.cpp
theuni,2017-02-08T16:37:52Z,"Heh, i waffled back and forth on this. Sure.",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100110045,100110045,src/net_processing.cpp
theuni,2017-02-08T16:38:03Z,Will do.,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100110096,100110096,src/net_processing.cpp
TheBlueMatt,2017-02-08T16:42:54Z,The usual fix for waffling is comment and clarify name :p,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100111274,100111274,src/net_processing.cpp
kallewoof,2017-02-09T08:51:19Z,"Nit: avoid `BOOST_FOREACH` if possible (though this was moved code, so perhaps not applicable, but..).\n```C++\nfor (const CBlockReject& reject : state.rejects) [...]\n```",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100255289,100255289,src/net_processing.cpp
laanwj,2017-02-09T10:17:43Z,"No, for moved code this is not applicable. To avoid confusion, let's keep code style changes, moves and bugfixes separate where possible.",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100273335,100273335,src/net_processing.cpp
TheBlueMatt,2017-02-09T16:49:18Z,"There are a few cases it looks like we return true after setting misbehaving, so this probably needs to be checked either way (or those cases need updating - but that might result in double-logging).",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100352357,100352357,src/net_processing.cpp
theuni,2017-02-09T17:30:01Z,"I was trying to avoid the cs_main lock for each message received, but you're right that it means that we rely on a return value that's not very well-defined.\n\nI'll just make it unconditional. Until we have parallel processing, there's not much harm in that.\n\n",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100362538,100362538,src/net_processing.cpp
TheBlueMatt,2017-02-09T17:34:00Z,Sounds good.,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100363468,100363468,src/net_processing.cpp
jnewbery,2017-02-11T00:27:56Z,You can remove this. logging isn't being used.,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650705,100650705,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:28:13Z,Please add a docstring describing what this test case is doing.,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650721,100650721,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:28:59Z,"I'm not entirely sure what this is achieving. I think you can remove `check()` and `self.done` entirely.\n\nYou can check directly that no unexpected messages have been received at the end of the test (see my comment below).",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650771,100650771,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:29:45Z,Is `unexpected_message` a better name than `unrequested_message`?,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650829,100650829,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:30:42Z,I don't think you should be raising an exception in the network thread. Just set `unexpected_message` to True (and optionally print some debug info),https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100650892,100650892,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:34:29Z,"Sigh. This is verbose and will be incomplete every time new p2p message types are added.\n\nI was tempted to say just override the `deliver()` message from `NodeConnCB` but that just feels ugly (`deliver()` should really be a private method and the testcases just override use the on_ callbacks).\n\nI can't think of anything better here.",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651222,100651222,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:34:58Z,s/replay/reply,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651262,100651262,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:35:30Z,I don't think this parser.add_option line is required.,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651298,100651298,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:35:54Z,Since banscore isn't changing I'd prefer to make it a global constant.,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651327,100651327,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:38:10Z,"There's only one node here. You can replace the above three lines with:\n\n```python\nself.nodes = [start_node(0, self.options.tmpdir, ['-debug', '-banscore='+str(self.banscore)])]\n```\n",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651535,100651535,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:38:26Z,not needed?,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651563,100651563,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:39:51Z,"Might as well just check the variable directly:\n\n```python\n        assert(not no_version_bannode.unexpected_message)\n        assert(not no_version_idlenode.unexpected_message)\n        assert(not no_verack_idlenode.unexpected_message)\n```",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651676,100651676,qa/rpc-tests/p2p-leaktests.py
jnewbery,2017-02-11T00:40:38Z,"I recommend you disconnect all the connections to the node at the end of the test:\n\n```python\n        # Disconnect all peers\n        [conn.disconnect_node() for conn in connections]\n```",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100651750,100651750,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:39:45Z,ok,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100657808,100657808,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:39:50Z,ok,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100657810,100657810,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:40:36Z,"seems about the same to me, but sure",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100657827,100657827,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:40:50Z,ok,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100657832,100657832,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:49:33Z,"yes, i hate this too.\n\nToo much to do here but for the future: how about a base class for messages. Then there's an overridable dispatcher that forwards to the individual callbacks. So here, I would just override the dispatcher and check the message type.\n\nBasically just another thin layer under deliver()",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658037,100658037,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:49:38Z,ok,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658042,100658042,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:50:06Z,ok. Definitely the c/p from the wrong test isn't needed :),https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658052,100658052,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:50:49Z,I think i'd rather keep this local so that we can use different scores for different tests.,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658067,100658067,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:50:55Z,ok,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658069,100658069,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:51:36Z,"Very needed, but needs a comment. We generate a block, and wait a few secs to make sure that it's not relayed to the nodes who haven't versioned/veracked yet.",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658088,100658088,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:52:04Z,ok,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658096,100658096,qa/rpc-tests/p2p-leaktests.py
theuni,2017-02-11T02:52:20Z,ok,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100658103,100658103,qa/rpc-tests/p2p-leaktests.py
MarcoFalke,2017-02-13T14:31:58Z,Please leave it as is for now. My goal was to generalize this logic and get rid of most `setup_network` methods in test as the only thing they commonly do is fire up the requested number of nodes and nothing else. So there would be no need to overwrite this function if you want a simple network set up.,https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100804852,100804852,qa/rpc-tests/p2p-leaktests.py
MarcoFalke,2017-02-13T14:34:29Z,"Also, it would be easier to adapt if the number of nodes changes.",https://github.com/bitcoin/bitcoin/pull/9720#discussion_r100805420,100805420,qa/rpc-tests/p2p-leaktests.py
