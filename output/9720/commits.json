[
  {
    "sha": "c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDViOWZiNTRjNWNhMDY4YTVlMjc2YzNiZDZlYmY0YWU3MjBmNmY3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-07T17:02:02Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:34Z"
      },
      "message": "net: correctly ban before the handshake is complete\n\n7a8c251901 made a change to avoid getting into SendMessages() until the\nversion handshake (VERSION + VERACK) is complete. That was done to avoid\nleaking out messages to nodes who could connect, but never bothered sending\nus their version/verack.\n\nUnfortunately, the ban tally and possible disconnect are done as part of\nSendMessages(). So after 7a8c251901, if a peer managed to do something\nbannable before completing the handshake (say send 100 non-version messages\nbefore their version), they wouldn't actually end up getting\ndisconnected/banned. That's fixed here by checking the banscore as part of\nProcessMessages() in addition to SendMessages().",
      "tree": {
        "sha": "0bdc565d53b939f0f227b108406c82f034cb5e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bdc565d53b939f0f227b108406c82f034cb5e61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d304fef3746039183f51b3ac8f4774dcf3a64f59"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 37,
      "deletions": 23
    },
    "files": [
      {
        "sha": "587e857970c482d91b89c5749bcc61f4816ed695",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 23,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
        "patch": "@@ -2596,6 +2596,36 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n+{\n+    AssertLockHeld(cs_main);\n+    CNodeState &state = *State(pnode->GetId());\n+\n+    BOOST_FOREACH(const CBlockReject& reject, state.rejects) {\n+        connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+    }\n+    state.rejects.clear();\n+\n+    if (state.fShouldBan) {\n+        state.fShouldBan = false;\n+        if (pnode->fWhitelisted)\n+            LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n+        else if (pnode->fAddnode)\n+            LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n+        else {\n+            pnode->fDisconnect = true;\n+            if (pnode->addr.IsLocal())\n+                LogPrintf(\"Warning: not banning local peer %s!\\n\", pnode->addr.ToString());\n+            else\n+            {\n+                connman.Ban(pnode->addr, BanReasonNodeMisbehaving);\n+            }\n+        }\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n@@ -2706,8 +2736,12 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n             PrintExceptionContinue(NULL, \"ProcessMessages()\");\n         }\n \n-        if (!fRet)\n+        if (!fRet) {\n             LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n+        }\n+\n+        LOCK(cs_main);\n+        SendRejectsAndCheckIfBanned(pfrom, connman);\n \n     return fMoreWork;\n }\n@@ -2773,30 +2807,10 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         if (!lockMain)\n             return true;\n \n+        if (SendRejectsAndCheckIfBanned(pto, connman))\n+            return true;\n         CNodeState &state = *State(pto->GetId());\n \n-        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n-        state.rejects.clear();\n-\n-        if (state.fShouldBan) {\n-            state.fShouldBan = false;\n-            if (pto->fWhitelisted)\n-                LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pto->addr.ToString());\n-            else if (pto->fAddnode)\n-                LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pto->addr.ToString());\n-            else {\n-                pto->fDisconnect = true;\n-                if (pto->addr.IsLocal())\n-                    LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n-                else\n-                {\n-                    connman.Ban(pto->addr, BanReasonNodeMisbehaving);\n-                }\n-                return true;\n-            }\n-        }\n-\n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n         if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {"
      }
    ]
  },
  {
    "sha": "8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTAyZTdhY2JlMGY0MmZkNmU2OTc5NjgxYmM5YzQ2MTBjNGZiOGNi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:02:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:35Z"
      },
      "message": "net: parse reject earlier\n\nPrior to this change, all messages were ignored until a VERSION message was\nreceived, as well as possibly incurring a ban score.\n\nSince REJECT messages can be sent at any time (including as a response to a bad\nVERSION message), make sure to always parse them.\n\nMoving this parsing up keeps it from being caught in the\nif (pfrom->nVersion == 0) check below.",
      "tree": {
        "sha": "97a314e94a2d0fc3915fb0f62003c2b1cc67f122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97a314e94a2d0fc3915fb0f62003c2b1cc67f122"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 24,
      "deletions": 26
    },
    "files": [
      {
        "sha": "b304da76c254a16f560ad4d2259ded7b978363e8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 26,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
        "patch": "@@ -1190,8 +1190,31 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n     }\n \n+    if (strCommand == NetMsgType::REJECT)\n+    {\n+        if (fDebug) {\n+            try {\n+                std::string strMsg; unsigned char ccode; std::string strReason;\n+                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n+\n+                std::ostringstream ss;\n+                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n \n-    if (strCommand == NetMsgType::VERSION)\n+                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n+                {\n+                    uint256 hash;\n+                    vRecv >> hash;\n+                    ss << \": hash \" << hash.ToString();\n+                }\n+                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n+            } catch (const std::ios_base::failure&) {\n+                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n+                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n+            }\n+        }\n+    }\n+\n+    else if (strCommand == NetMsgType::VERSION)\n     {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n@@ -2544,31 +2567,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fRelayTxes = true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::REJECT)\n-    {\n-        if (fDebug) {\n-            try {\n-                std::string strMsg; unsigned char ccode; std::string strReason;\n-                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n-\n-                std::ostringstream ss;\n-                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n-\n-                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n-                {\n-                    uint256 hash;\n-                    vRecv >> hash;\n-                    ss << \": hash \" << hash.ToString();\n-                }\n-                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n-            } catch (const std::ios_base::failure&) {\n-                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n-                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n-            }\n-        }\n-    }\n-\n     else if (strCommand == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;"
      }
    ]
  },
  {
    "sha": "cbfc5a6728d389fbb15e0555cdf50f1b04595106",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmZjNWE2NzI4ZDM4OWZiYjE1ZTA1NTVjZGY1MGYxYjA0NTk1MTA2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:04:53Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:35Z"
      },
      "message": "net: require a verack before responding to anything else\n\n7a8c251901 made this logic hard to follow. After that change, messages would\nnot be sent to a peer via SendMessages() before the handshake was complete, but\nmessages could still be sent as a response to an incoming message.\n\nFor example, if a peer had not yet sent a verack, we wouldn't notify it about\nnew blocks, but we would respond to a PING with a PONG.\n\nThis change makes the behavior straightforward: until we've received a verack,\nnever send any message other than version/verack/reject.\n\nThe behavior until a VERACK is received has always been undefined, this change\njust tightens our policy.\n\nThis also makes testing much easier, because we can now connect but not send\nversion/verack, and anything sent to us is an error.",
      "tree": {
        "sha": "81dc1e8af09985a0bb8ec094af118261cd84c595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81dc1e8af09985a0bb8ec094af118261cd84c595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f458a352560cc4eb9fc34e77dd631c0e9b93b0fb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbfc5a6728d389fbb15e0555cdf50f1b04595106/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbfc5a6728d389fbb15e0555cdf50f1b04595106/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cbfc5a6728d389fbb15e0555cdf50f1b04595106",
        "patch": "@@ -1420,6 +1420,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fSuccessfullyConnected = true;\n     }\n \n+    else if (!pfrom->fSuccessfullyConnected)\n+    {\n+        // Must have a verack message before anything else\n+        LOCK(cs_main);\n+        Misbehaving(pfrom->GetId(), 1);\n+        return false;\n+    }\n \n     else if (strCommand == NetMsgType::ADDR)\n     {"
      }
    ]
  },
  {
    "sha": "5b5e4f8330634dc33446854677badc52aef43b82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjVlNGY4MzMwNjM0ZGMzMzQ0Njg1NDY3N2JhZGM1MmFlZjQzYjgy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:35:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "message": "qa: mininode learns when a socket connects, not its first action",
      "tree": {
        "sha": "90490eb07008b587e6b648e1888d252276d9d17e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90490eb07008b587e6b648e1888d252276d9d17e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b5e4f8330634dc33446854677badc52aef43b82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5e4f8330634dc33446854677badc52aef43b82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5e4f8330634dc33446854677badc52aef43b82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5e4f8330634dc33446854677badc52aef43b82/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbfc5a6728d389fbb15e0555cdf50f1b04595106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbfc5a6728d389fbb15e0555cdf50f1b04595106"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 24,
      "deletions": 12
    },
    "files": [
      {
        "sha": "696a065282c624125718ba54bb58674723115bdf",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5e4f8330634dc33446854677badc52aef43b82/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5e4f8330634dc33446854677badc52aef43b82/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=5b5e4f8330634dc33446854677badc52aef43b82",
        "patch": "@@ -1614,7 +1614,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1631,14 +1631,16 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n         self.disconnect = False\n         self.nServices = 0\n \n-        # stuff version msg into sendbuf\n-        vt = msg_version()\n-        vt.nServices = services\n-        vt.addrTo.ip = self.dstaddr\n-        vt.addrTo.port = self.dstport\n-        vt.addrFrom.ip = \"0.0.0.0\"\n-        vt.addrFrom.port = 0\n-        self.send_message(vt, True)\n+        if send_version:\n+            # stuff version msg into sendbuf\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            self.send_message(vt, True)\n+\n         print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n             + str(dstport))\n \n@@ -1652,8 +1654,9 @@ def show_debug_msg(self, msg):\n         self.log.debug(msg)\n \n     def handle_connect(self):\n-        self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n-        self.state = \"connected\"\n+        if self.state != \"connected\":\n+            self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n+            self.state = \"connected\"\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n@@ -1681,11 +1684,20 @@ def readable(self):\n \n     def writable(self):\n         with mininode_lock:\n+            pre_connection = self.state == \"connecting\"\n             length = len(self.sendbuf)\n-        return (length > 0)\n+        return (length > 0 or pre_connection)\n \n     def handle_write(self):\n         with mininode_lock:\n+            # asyncore does not expose socket connection, only the first read/write\n+            # event, thus we must check connection manually here to know when we\n+            # actually connect\n+            if self.state == \"connecting\":\n+                self.handle_connect()\n+            if not self.writable():\n+                return\n+\n             try:\n                 sent = self.send(self.sendbuf)\n             except:"
      }
    ]
  },
  {
    "sha": "8650bbb660eaf8c81d714f1518ecc8c35ae17463",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjUwYmJiNjYwZWFmOGM4MWQ3MTRmMTUxOGVjYzhjMzVhZTE3NDYz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:40:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "message": "qa: Expose on-connection to mininode listeners",
      "tree": {
        "sha": "c5b6a654665ccf928fe12400cea292dfd84e1bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5b6a654665ccf928fe12400cea292dfd84e1bf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b5e4f8330634dc33446854677badc52aef43b82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5e4f8330634dc33446854677badc52aef43b82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5e4f8330634dc33446854677badc52aef43b82"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b563c58ae1e1a17e50caa42f165a28fd3d739d7",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8650bbb660eaf8c81d714f1518ecc8c35ae17463/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8650bbb660eaf8c81d714f1518ecc8c35ae17463/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=8650bbb660eaf8c81d714f1518ecc8c35ae17463",
        "patch": "@@ -1540,6 +1540,7 @@ def on_ping(self, conn, message):\n         if conn.ver_send > BIP0031_VERSION:\n             conn.send_message(msg_pong(message.nonce))\n     def on_reject(self, conn, message): pass\n+    def on_open(self, conn): pass\n     def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n@@ -1657,6 +1658,7 @@ def handle_connect(self):\n         if self.state != \"connected\":\n             self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n             self.state = \"connected\"\n+            self.cb.on_open(self)\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \""
      }
    ]
  },
  {
    "sha": "d9434918d277bba534933ebc8c63ba81e613f603",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTQzNDkxOGQyNzdiYmE1MzQ5MzNlYmM4YzYzYmE4MWU2MTNmNjAz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:17:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "message": "qa: add a test to detect leaky p2p messages\n\nThis is certainly not exhaustive, but it's better than nothing. Adds checks\nfor:\n\n- Any message received before sending a version\n- Any message received other than version/reject before sending a verack\n\nIt also tries to goad the remote into sending a pong, address, or block\nannouncement.",
      "tree": {
        "sha": "4bf71e301e86cdab80fe9648b01fa904d66b8d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bf71e301e86cdab80fe9648b01fa904d66b8d31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9434918d277bba534933ebc8c63ba81e613f603",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9434918d277bba534933ebc8c63ba81e613f603",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9434918d277bba534933ebc8c63ba81e613f603",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9434918d277bba534933ebc8c63ba81e613f603/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8650bbb660eaf8c81d714f1518ecc8c35ae17463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8650bbb660eaf8c81d714f1518ecc8c35ae17463"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 146,
      "deletions": 0
    },
    "files": [
      {
        "sha": "31018125416a25bae5cb886641b6c355d47a4bae",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9434918d277bba534933ebc8c63ba81e613f603/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9434918d277bba534933ebc8c63ba81e613f603/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=d9434918d277bba534933ebc8c63ba81e613f603",
        "patch": "@@ -154,6 +154,7 @@\n     'bumpfee.py',\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n+    'p2p-leaktests.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "41ca84d779890cded199129d7739fbbd348a894c",
        "filename": "qa/rpc-tests/p2p-leaktests.py",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9434918d277bba534933ebc8c63ba81e613f603/qa/rpc-tests/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9434918d277bba534933ebc8c63ba81e613f603/qa/rpc-tests/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-leaktests.py?ref=d9434918d277bba534933ebc8c63ba81e613f603",
        "patch": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+'''\n+Test for message sending before handshake completion\n+\n+A node should never send anything other than VERSION/VERACK/REJECT until it's\n+received a VERACK.\n+\n+This test connects to a node and sends it a few messages, trying to intice it\n+into sending us something it shouldn't.\n+'''\n+\n+banscore = 10\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        self.connection = None\n+        self.unexpected_msg = False\n+        self.connected = False\n+        super().__init__()\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unexpected_msg = True\n+        print(\"should not have received message: %s\" % message.command)\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+    # send a bunch of veracks without sending a message. This should get us disconnected.\n+    # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n+    def on_open(self, conn):\n+        super().on_open(conn)\n+        for i in range(banscore):\n+            self.send_message(msg_verack())\n+\n+    def on_reject(self, conn, message): pass\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        self.version_received = False\n+        super().__init__()\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+    # When version is received, don't reply with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.version_received = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        assert(wait_until(lambda: no_version_bannode.connected and no_version_idlenode.connected and no_verack_idlenode.version_received, timeout=10))\n+\n+        # Mine a block and make sure that it's not sent to the connected nodes\n+        self.nodes[0].generate(1)\n+\n+        #Give the node enough time to possibly leak out a message\n+        time.sleep(5)\n+\n+        #This node should have been banned\n+        assert(no_version_bannode.connection.state == \"closed\")\n+\n+        [conn.disconnect_node() for conn in connections]\n+\n+        # Make sure no unexpected messages came in\n+        assert(no_version_bannode.unexpected_msg == False)\n+        assert(no_version_idlenode.unexpected_msg == False)\n+        assert(no_verack_idlenode.unexpected_msg == False)\n+\n+if __name__ == '__main__':\n+    P2PLeakTest().main()"
      }
    ]
  }
]