Sjors,2018-02-10T14:39:02Z,"@fanquake probably also needs ""Block storage"" label.",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-364659456,364659456,
esotericnonsense,2018-02-19T03:30:50Z,"Untested ACK, would kill off #11658 and #11359.\n\nI personally don't think the detail of how much we over-or-under-prune here are that important given that the long term solution is to fix the cache such that it doesn't require a complete flush. Basically any change here will speed up pruning IBD by a large amount.",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-366581069,366581069,
morcos,2018-03-05T15:05:14Z,ACK 86bef23,https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-370447840,370447840,
eklitzke,2018-03-11T07:54:19Z,utACK 86bef23e6550cdcf989ae6ac22dbbc45bbf613e4 ,https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-372096476,372096476,
Sjors,2018-03-12T21:03:19Z,Rebased due to release notes change.,https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-372461667,372461667,
Sjors,2018-03-26T16:29:23Z,Rebased due to release notes change.,https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-376227776,376227776,
Sjors,2018-03-26T18:17:53Z,`p2p_leak.py` failure on Travis seems a bit random (and passes on my local machine)...,https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-376262277,376262277,
eklitzke,2018-03-27T04:00:48Z,utACK 82efbf1e8ac67ad9d04cba9b64cb79ece86209f8,https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-376389718,376389718,
luke-jr,2018-03-31T20:26:51Z,"Before merging, please remove the name and PR reference from the commit message, so it doesn't ping us every time someone adds it to their random fork.",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-377721048,377721048,
Sjors,2018-04-03T09:43:01Z,"@luke-jr will do. Should I also remove it from the PR description, since that also ends up in the merge commit message? Or do those merge commits rarely make it into upstream work because commits are cherry-picked?",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-378191842,378191842,
Sjors,2018-04-03T09:49:53Z,Done. Also: rebased for release notes.,https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-378193733,378193733,
Sjors,2018-05-15T11:24:34Z,Rebased so I can do some benchmarking.,https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-389132783,389132783,
Sjors,2018-05-20T08:54:09Z,"I've been racing AWS instances for the past few days, using `master`, #11658 (rebased on master) and this PR. I use a `t2.micro` with 1 vCPU, 1 GiB RAM and 20 GB storage. I set `prune` to 10 GB, `dbcache=300` and `maxmempool=5`.\n\nAfter 72 hours master is currently at block 341909, @luke-jr's branch is at 364905 and mine is at 360719. \n\nI enabled T2 Unlimited to prevent CPU throttling, alth",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-390467042,390467042,
Sjors,2018-05-20T10:30:47Z,"To clarify, is `IsInitialBlockDownload()` something that only happens once in the life time of a node, or is this also `true` if it needs to do a large catch up? If the latter, there is a case to be made for conservative pruning (or putting aggressive pruning behind a config flag).\n\nWhen you run something like c-lightning against a pruned bitcoind node, it's constantly processing blocks as the",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-390471566,390471566,
Sjors,2018-05-21T07:49:03Z,"After a little under 24 hours the `t2.medium` instances:\n\n* master: 458269\n* 10% pruning: 471894\n* this PR: 396051\n\nNotice how this PR so far seems to perform _worse_ than master (on this instance and with these settings, still better than master on the `t2.micro` instance). I'll keep an eye on it. Maybe it has something to do with the large `dbcache`? Because of the more frequent prun",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-390579889,390579889,
Sjors,2018-05-21T08:57:58Z,"```sh\necho ""height, cache"" > cache.csv\ncat ~/.bitcoin/debug.log | grep UpdateTip | awk -F'[ =M]'  '{print $7"", "" $19 }' >> cache.csv\n```\n\n<img width=""1240"" alt=""2018-05-21 10 59 05"" src=""https://user-images.githubusercontent.com/10217/40299263-0142b50c-5ce6-11e8-9299-604f7a22f3b6.png"">\n\nI'll update the plots later.\n\n\nSource data and Thunderplot file: [plot.zip](https://github.c",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-390595338,390595338,
Sjors,2018-05-25T15:44:48Z,"This extracts block height, cache size and a unix timestamp from the log: \n```sh\ncat prune300_master.log | grep UpdateTip | gawk -F'[ =M]'  '{print $7"", "" $19"", "" gsub(/[-T:Z]/,"" "") "", "" mktime($1 "" "" $2 "" "" $3 "" "" $4 "" "" $5 "" "" $6)  }' >> prune300_master.csv\n```\n\nIBD duration with dbcache=300MB: \n\n<img width=""806"" alt=""2018-05-25 17 39 59"" src=""https://user-images.githubusercontent.",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-392099372,392099372,
n1bor,2018-05-31T09:15:55Z,"FYI on AWS been running a node with 4gig RAM and sc1 disks (very cheap - 0.025/GigMonth) for a node with txindex on and keeps up fine (i.e. does not use burst allowance). Is used by a lightning node so get reasonable number of rpc requests. Is useless for IBD, but can set to SSD initially then once IBD done switch to sc1 with the click of a button!",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-393468440,393468440,
Sjors,2018-05-31T10:00:52Z,"@n1bor for [my own project on AWS](https://medium.com/provoost-on-crypto/bitcoin-core-lightning-rails-on-aws-ad3bd45b11e0), I also use the strategy of doing IBD on a fast machine (`i3.2xlarge`). Anything with > 10 GB RAM to prevent the cache from flushing and a disk big enough to avoid pruning (doesn't have to be SSD). The bigger disk is ephemeral and goes away after you downgrade to a regular ins",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-393480892,393480892,
Sjors,2018-06-09T21:02:28Z,"Zooming in a little bit, this branch started dramatically slowing down compared to master around block 375000, which is around the September 2015 UTXO set explosion:\n\n<img width=""138"" alt=""utxo 2015"" src=""https://user-images.githubusercontent.com/10217/41196016-39958e14-6c38-11e8-97f5-6402a15b47ad.png"">\n\nPerhaps the performance of read or write operations involving `CCoinsCacheEntry` with ",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-395998702,395998702,
Sjors,2018-06-10T09:03:36Z,"Related IRC discussion: https://botbot.me/freenode/bitcoin-core-dev/2018-06-09/?msg=100959313&page=2\n\n<img width=""1253"" alt=""schermafbeelding 2018-06-10 om 11 02 34"" src=""https://user-images.githubusercontent.com/10217/41200055-d536e286-6c9d-11e8-8b4b-239144dbb6f8.png"">",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-396033212,396033212,
n1bor,2018-06-10T19:57:54Z,"@Sjors not sure if you ever saw this: https://gist.github.com/n1bor/d5b0330a9addb0bf5e0f869518883522\nFeels to me that time spent on IBD for pruned nodes would be better spent on chainstate only download type solution. Factor of 50x speed up. But needs a softfork - so maybe not!",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-396077403,396077403,
sipa,2018-06-10T20:02:02Z,"@n1bor That seems orthogonal. Synchronizing from chainstate is a very interesting idea, but it's also a completely different security model (trusting that the historical chain has correct commitments rather than computing things yourself). ",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-396077808,396077808,
n1bor,2018-06-10T20:31:12Z,"My take is we have on order of ""goodness"":\n1) Full Node\n2) Pruned Full Node\n3) Chain-State Downloaded Full Node with soft-fork to commit chainstate to headers. (what my post was about)\n4) SPV\n5) Web-Wallets\nCurrently core on offers 1 & 2.\n\nJust think if core offered 3 would reduce number of users using web-wallets/SPV. Which has only got to be a good thing.",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-396079703,396079703,
sipa,2018-06-10T20:33:45Z,"I agree that would be a good thing, but it in no way changes the fact that we should have a performant implementation for those who do not want to rely on trusting such hypothetical commitments (which this issue is about).\n\nAlso, this is not the place to discuss changes to the Bitcoin protocol.",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-396079849,396079849,
Sjors,2018-06-11T19:21:17Z,"I launched two new t2.medium nodes on AWS, running Ubuntu 16.04, 2 CPU (uncapped), 4 GB RAM no swap. I set `prune=10000`, `dbcache=3000` and `maxmempool=5` on both like I did earlier. The blue lines are the current master master, the orange line is this PR rebased on master.\n\nAgain, this branch slows down dramatically quite early on, this time I captured some metrics:\n\n<img width=""880"" alt",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-396356384,396356384,
Sjors,2018-06-11T20:29:22Z,"I don't see `LogPrint(BCLog::PRUNE, ""Prune: target=%dMiB actual=%dMiB diff=%dMiB max_prune_height=%d removed %d blk/rev pairs\n""` appear in the logs, not even for master. That category isn't disabled by default, is it?\n\nTrying to figure out what could explain the extra disk read activity. Does anything related to pruning happen in a separate thread that we don't wait for (before the next Updat",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-396376242,396376242,
Sjors,2018-06-12T09:17:40Z,"Running this branch with `dbcache=1000` doesn't cause the same high read disk activity:\n<img width=""891"" alt=""db cache 1000"" src=""https://user-images.githubusercontent.com/10217/41281426-a4498fd0-6e31-11e8-995f-945e9027b227.png"">\n\nIt's still running so I don't know if it's faster than master or the 10% prune strategy, but at least it doesn't suffer a similar slow down as `dbcache=3000`.",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-396523395,396523395,
Sjors,2018-06-14T15:12:30Z,"The thick line shows this PR with dbcache set to 1000. It no longer shows the performance hit you see with dbcache=3000 and it's faster than master, but not necessarily faster than the 10% pruning strategy.\n\n<img width=""1119"" alt=""2018-06-14 17 10 14"" src=""https://user-images.githubusercontent.com/10217/41420915-d57b0aaa-6ff5-11e8-900b-44b28cfd3587.png"">\n\nClosing this in favor of #11658, s",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-397331373,397331373,
ajtowns,2018-07-12T07:58:21Z,"FWIW, one effect I'm seeing that might cause the difference between dbcache 3000 vs 1000 is that when the cache is flushed, it takes a little while (and presumably 3x as long with 3x as large a dbcache), during which the block download queues pretty much empty, and then after the cache is flushed, the queues take a while to even out and get back up to the same download speed.",https://github.com/bitcoin/bitcoin/pull/12404#issuecomment-404424061,404424061,
luke-jr,2018-02-27T15:21:55Z,Seems like this ought to be using best case...?,https://github.com/bitcoin/bitcoin/pull/12404#discussion_r170957735,170957735,src/validation.cpp
Sjors,2018-02-27T16:06:40Z,Best case would be empty blocks. That would lead to a lot of flushes.,https://github.com/bitcoin/bitcoin/pull/12404#discussion_r170974354,170974354,src/validation.cpp
