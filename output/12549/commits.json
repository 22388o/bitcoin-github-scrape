[
  {
    "sha": "f0e7aa702095b22ba57a763c5c093e15d41586d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGU3YWE3MDIwOTViMjJiYTU3YTc2M2M1YzA5M2UxNWQ0MTU4NmQx",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T02:45:57Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T19:42:06Z"
      },
      "message": "Add new prevector benchmarks.\n\nThis prepares for a series of two additional commits which optimize\nprevector performance.",
      "tree": {
        "sha": "e9acd6a0af2ab274264d5b2191984a9992c5b712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9acd6a0af2ab274264d5b2191984a9992c5b712"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0e7aa702095b22ba57a763c5c093e15d41586d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0e7aa702095b22ba57a763c5c093e15d41586d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0e7aa702095b22ba57a763c5c093e15d41586d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0e7aa702095b22ba57a763c5c093e15d41586d1/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228b086b9a3de02b534474027353a80dead2c292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228b086b9a3de02b534474027353a80dead2c292"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 88,
      "deletions": 37
    },
    "files": [
      {
        "sha": "748c5b7887db6e903da020047c2db6e6a0256c9e",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "patch": "@@ -27,7 +27,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/lockedpool.cpp \\\n   bench/perf.cpp \\\n   bench/perf.h \\\n-  bench/prevector_destructor.cpp\n+  bench/prevector.cpp\n \n nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n "
      },
      {
        "sha": "d0f28d1a3e4fb96361e5f50db6315c05fafacf5e",
        "filename": "src/bench/prevector.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2015-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat.h>\n+#include <prevector.h>\n+\n+#include <bench/bench.h>\n+\n+struct nontrivial_t {\n+    int x;\n+    nontrivial_t() :x(-1) {}\n+};\n+static_assert(!IS_TRIVIALLY_CONSTRUCTIBLE<nontrivial_t>::value,\n+              \"expected nontrivial_t to not be trivially constructible\");\n+\n+typedef unsigned char trivial_t;\n+static_assert(IS_TRIVIALLY_CONSTRUCTIBLE<trivial_t>::value,\n+              \"expected trivial_t to be trivially constructible\");\n+\n+template <typename T>\n+static void PrevectorDestructor(benchmark::State& state)\n+{\n+    while (state.KeepRunning()) {\n+        for (auto x = 0; x < 1000; ++x) {\n+            prevector<28, T> t0;\n+            prevector<28, T> t1;\n+            t0.resize(28);\n+            t1.resize(29);\n+        }\n+    }\n+}\n+\n+template <typename T>\n+static void PrevectorClear(benchmark::State& state)\n+{\n+\n+    while (state.KeepRunning()) {\n+        for (auto x = 0; x < 1000; ++x) {\n+            prevector<28, T> t0;\n+            prevector<28, T> t1;\n+            t0.resize(28);\n+            t0.clear();\n+            t1.resize(29);\n+            t0.clear();\n+        }\n+    }\n+}\n+\n+template <typename T>\n+void PrevectorResize(benchmark::State& state)\n+{\n+    while (state.KeepRunning()) {\n+        prevector<28, T> t0;\n+        prevector<28, T> t1;\n+        for (auto x = 0; x < 1000; ++x) {\n+            t0.resize(28);\n+            t0.resize(0);\n+            t1.resize(29);\n+            t1.resize(0);\n+        }\n+    }\n+}\n+\n+#define PREVECTOR_TEST(name, nontrivops, trivops)                       \\\n+    static void Prevector ## name ## Nontrivial(benchmark::State& state) { \\\n+        PrevectorResize<nontrivial_t>(state);                           \\\n+    }                                                                   \\\n+    BENCHMARK(Prevector ## name ## Nontrivial, nontrivops);             \\\n+    static void Prevector ## name ## Trivial(benchmark::State& state) { \\\n+        PrevectorResize<trivial_t>(state);                              \\\n+    }                                                                   \\\n+    BENCHMARK(Prevector ## name ## Trivial, trivops);\n+\n+PREVECTOR_TEST(Clear, 28300, 88600)\n+PREVECTOR_TEST(Destructor, 28800, 88900)\n+PREVECTOR_TEST(Resize, 28900, 90300)"
      },
      {
        "sha": "39d0ee5eb194a214aeda584bd4a150156a78bce6",
        "filename": "src/bench/prevector_destructor.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/228b086b9a3de02b534474027353a80dead2c292/src/bench/prevector_destructor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/228b086b9a3de02b534474027353a80dead2c292/src/bench/prevector_destructor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector_destructor.cpp?ref=228b086b9a3de02b534474027353a80dead2c292",
        "patch": "@@ -1,36 +0,0 @@\n-// Copyright (c) 2015-2017 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <bench/bench.h>\n-#include <prevector.h>\n-\n-static void PrevectorDestructor(benchmark::State& state)\n-{\n-    while (state.KeepRunning()) {\n-        for (auto x = 0; x < 1000; ++x) {\n-            prevector<28, unsigned char> t0;\n-            prevector<28, unsigned char> t1;\n-            t0.resize(28);\n-            t1.resize(29);\n-        }\n-    }\n-}\n-\n-static void PrevectorClear(benchmark::State& state)\n-{\n-\n-    while (state.KeepRunning()) {\n-        for (auto x = 0; x < 1000; ++x) {\n-            prevector<28, unsigned char> t0;\n-            prevector<28, unsigned char> t1;\n-            t0.resize(28);\n-            t0.clear();\n-            t1.resize(29);\n-            t0.clear();\n-        }\n-    }\n-}\n-\n-BENCHMARK(PrevectorDestructor, 5700);\n-BENCHMARK(PrevectorClear, 5600);"
      },
      {
        "sha": "8a0f901304e528aeb957574961a7ef0dde7a86f5",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "patch": "@@ -10,6 +10,16 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <type_traits>\n+\n+// GCC 4.8 is missing some C++11 type_traits,\n+// https://www.gnu.org/software/gcc/gcc-5/changes.html\n+#if defined(__GNUC__) && __GNUC__ < 5\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivial\n+#else\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivially_constructible\n+#endif\n+\n #ifdef WIN32\n #ifdef _WIN32_WINNT\n #undef _WIN32_WINNT"
      }
    ]
  },
  {
    "sha": "e46be25f0e19d574157752a5c0b674907a1578e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDZiZTI1ZjBlMTlkNTc0MTU3NzUyYTVjMGI2NzQ5MDdhMTU3OGU2",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2017-12-22T10:04:30Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T19:42:33Z"
      },
      "message": "Reduce redundant code of prevector and speed it up\n\nIn prevector.h, the code which like item_ptr(size()) apears in the loop.\nBoth item_ptr() and size() judge whether values are held directly or\nindirectly, but in most cases it is sufficient to make that judgement\nonce outside the loop.\n\nThis PR adds 2 private function fill() which has the loop to initialize\nby specified value (or iterator of the other prevector's element),\nbut don't call item_ptr() in their loop.\nOther functions(assign(), constructor, operator=(), insert())\nthat has similar loop, call fill() instead of original loop.\n\nAlso, resize() was changed like fill(), but it calls the default\nconstructor for that element each time.",
      "tree": {
        "sha": "66d7155ce0b5ffa5e34fdd281dc9314667050307",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66d7155ce0b5ffa5e34fdd281dc9314667050307"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e46be25f0e19d574157752a5c0b674907a1578e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46be25f0e19d574157752a5c0b674907a1578e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e46be25f0e19d574157752a5c0b674907a1578e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46be25f0e19d574157752a5c0b674907a1578e6/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0e7aa702095b22ba57a763c5c093e15d41586d1"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 42,
      "deletions": 49
    },
    "files": [
      {
        "sha": "75d6abfb0eedee6a7c1b087e3f70f26e0e728b51",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 42,
        "deletions": 49,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e46be25f0e19d574157752a5c0b674907a1578e6/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e46be25f0e19d574157752a5c0b674907a1578e6/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=e46be25f0e19d574157752a5c0b674907a1578e6",
        "patch": "@@ -194,16 +194,29 @@ class prevector {\n     T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n     const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n \n+    void fill(T* dst, size_type count, const T& value) {\n+        for (size_type i = 0; i < count; ++i) {\n+            new(static_cast<void*>(dst + i)) T(value);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    void fill(T* dst, InputIterator first, InputIterator last) {\n+        while (first != last) {\n+            new(static_cast<void*>(dst)) T(*first);\n+            ++dst;\n+            ++first;\n+        }\n+    }\n+\n public:\n     void assign(size_type n, const T& val) {\n         clear();\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        while (size() < n) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n-        }\n+        _size += n;\n+        fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n@@ -213,11 +226,8 @@ class prevector {\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        while (first != last) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n-            ++first;\n-        }\n+        _size += n;\n+        fill(item_ptr(0), first, last);\n     }\n \n     prevector() : _size(0), _union{{}} {}\n@@ -228,31 +238,23 @@ class prevector {\n \n     explicit prevector(size_type n, const T& val = T()) : _size(0) {\n         change_capacity(n);\n-        while (size() < n) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n-        }\n+        _size += n;\n+        fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n     prevector(InputIterator first, InputIterator last) : _size(0) {\n         size_type n = last - first;\n         change_capacity(n);\n-        while (first != last) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n-            ++first;\n-        }\n+        _size += n;\n+        fill(item_ptr(0), first, last);\n     }\n \n     prevector(const prevector<N, T, Size, Diff>& other) : _size(0) {\n-        change_capacity(other.size());\n-        const_iterator it = other.begin();\n-        while (it != other.end()) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n-            ++it;\n-        }\n+        size_type n = other.size();\n+        change_capacity(n);\n+        _size += n;\n+        fill(item_ptr(0), other.begin(),  other.end());\n     }\n \n     prevector(prevector<N, T, Size, Diff>&& other) : _size(0) {\n@@ -263,14 +265,7 @@ class prevector {\n         if (&other == this) {\n             return *this;\n         }\n-        resize(0);\n-        change_capacity(other.size());\n-        const_iterator it = other.begin();\n-        while (it != other.end()) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n-            ++it;\n-        }\n+        assign(other.begin(), other.end());\n         return *this;\n     }\n \n@@ -314,15 +309,16 @@ class prevector {\n     }\n \n     void resize(size_type new_size) {\n-        if (size() > new_size) {\n+        size_type cur_size = size();\n+        if (cur_size > new_size) {\n             erase(item_ptr(new_size), end());\n         }\n         if (new_size > capacity()) {\n             change_capacity(new_size);\n         }\n-        while (size() < new_size) {\n+        for (T* p = item_ptr(0); cur_size < new_size; cur_size++) {\n             _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T();\n+            new(static_cast<void*>(p + cur_size)) T();\n         }\n     }\n \n@@ -346,10 +342,11 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + 1), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + 1, ptr, (size() - p) * sizeof(T));\n         _size++;\n-        new(static_cast<void*>(item_ptr(p))) T(value);\n-        return iterator(item_ptr(p));\n+        new(static_cast<void*>(ptr)) T(value);\n+        return iterator(ptr);\n     }\n \n     void insert(iterator pos, size_type count, const T& value) {\n@@ -358,11 +355,10 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n         _size += count;\n-        for (size_type i = 0; i < count; i++) {\n-            new(static_cast<void*>(item_ptr(p + i))) T(value);\n-        }\n+        fill(item_ptr(p), count, value);\n     }\n \n     template<typename InputIterator>\n@@ -373,13 +369,10 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n         _size += count;\n-        while (first != last) {\n-            new(static_cast<void*>(item_ptr(p))) T(*first);\n-            ++p;\n-            ++first;\n-        }\n+        fill(ptr, first, last);\n     }\n \n     iterator erase(iterator pos) {"
      }
    ]
  },
  {
    "sha": "5aad635b78c8359adae9b2af015b67b7325c0e0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWFkNjM1Yjc4YzgzNTlhZGFlOWIyYWYwMTViNjdiNzMyNWMwZTBi",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T05:39:22Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T21:27:51Z"
      },
      "message": "Use memset() to optimize prevector::resize()\n\nFurther optimize prevector::resize() (which is called by a number of\nother prevector methods) to use memset to initialize memory when the\nprevector contains trivial types.",
      "tree": {
        "sha": "c556e3e9a5600432b4234d8db3f2a7efcefd32dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c556e3e9a5600432b4234d8db3f2a7efcefd32dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aad635b78c8359adae9b2af015b67b7325c0e0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aad635b78c8359adae9b2af015b67b7325c0e0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aad635b78c8359adae9b2af015b67b7325c0e0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aad635b78c8359adae9b2af015b67b7325c0e0b/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e46be25f0e19d574157752a5c0b674907a1578e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46be25f0e19d574157752a5c0b674907a1578e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e46be25f0e19d574157752a5c0b674907a1578e6"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 25,
      "deletions": 6
    },
    "files": [
      {
        "sha": "103ead82ccb34fbe24622c05e67ab6d399710567",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aad635b78c8359adae9b2af015b67b7325c0e0b/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aad635b78c8359adae9b2af015b67b7325c0e0b/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=5aad635b78c8359adae9b2af015b67b7325c0e0b",
        "patch": "@@ -10,9 +10,12 @@\n #include <stdint.h>\n #include <string.h>\n \n+#include <cstddef>\n #include <iterator>\n #include <type_traits>\n \n+#include <compat.h>\n+\n #pragma pack(push, 1)\n /** Implements a drop-in replacement for std::vector<T> which stores up to N\n  *  elements directly (without heap allocation). The types Size and Diff are\n@@ -194,8 +197,21 @@ class prevector {\n     T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n     const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n \n-    void fill(T* dst, size_type count, const T& value) {\n-        for (size_type i = 0; i < count; ++i) {\n+    void fill(T* dst, ptrdiff_t count) {\n+        if (IS_TRIVIALLY_CONSTRUCTIBLE<T>::value) {\n+            // The most common use of prevector is where T=unsigned char. For\n+            // trivially constructible types, we can use memset() to avoid\n+            // looping.\n+            ::memset(dst, 0, count * sizeof(T));\n+        } else {\n+            for (auto i = 0; i < count; ++i) {\n+                new(static_cast<void*>(dst + i)) T();\n+            }\n+        }\n+    }\n+\n+    void fill(T* dst, ptrdiff_t count, const T& value) {\n+        for (auto i = 0; i < count; ++i) {\n             new(static_cast<void*>(dst + i)) T(value);\n         }\n     }\n@@ -310,16 +326,19 @@ class prevector {\n \n     void resize(size_type new_size) {\n         size_type cur_size = size();\n+        if (cur_size == new_size) {\n+            return;\n+        }\n         if (cur_size > new_size) {\n             erase(item_ptr(new_size), end());\n+            return;\n         }\n         if (new_size > capacity()) {\n             change_capacity(new_size);\n         }\n-        for (T* p = item_ptr(0); cur_size < new_size; cur_size++) {\n-            _size++;\n-            new(static_cast<void*>(p + cur_size)) T();\n-        }\n+        ptrdiff_t increase = new_size - cur_size;\n+        fill(item_ptr(cur_size), increase);\n+        _size += increase;\n     }\n \n     void reserve(size_type new_capacity) {"
      }
    ]
  }
]