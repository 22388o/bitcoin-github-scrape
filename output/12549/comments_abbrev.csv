meshcollider,2018-02-27T04:25:41Z,Nice speedup! Concept ACK,https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368743276,368743276,
kallewoof,2018-02-27T04:37:45Z,This exists in #11988 no?,https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368744946,368744946,
eklitzke,2018-02-27T04:40:57Z,"It looks like this branch is failing because `std::is_trivially_constructible` wasn't added until GCC 5 (according to https://www.gnu.org/software/gcc/gcc-5/changes.html ), even though it is part of C++11. I can find a workaround for GCC 4.8.\n\nThis isn't quite the same as #11988 because that still uses placement new.",https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368745395,368745395,
kallewoof,2018-02-27T04:48:31Z,If it's not hugely different consider reviewing #11988 and suggesting changes to make it better instead.,https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368746452,368746452,
eklitzke,2018-02-27T04:52:45Z,"That's a good idea, I'll see if I can cherry-pick @AkioNak's commit into my branch while I'm testing the GCC 4.8 compatibility issues.",https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368747020,368747020,
eklitzke,2018-02-27T06:46:46Z,"This new branch cherry-picks @AkioNak 's commit from #11988 and then adds my memset optimization. I constructed this PR such that it has three commits:\n * First commit just adds new benchmarks\n * Second commit is from #11988 (unmodified, preserves authorship)\n * Third commit implements my `memset()` optimization\n\nI have a script that benchmarks the performance for each of the three commi",https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368764912,368764912,
laanwj,2018-02-27T14:57:43Z,Ping @sipa who wrote this code.,https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368905441,368905441,
eklitzke,2018-02-27T17:30:00Z,"I've addressed the feedback I've gotten so far, and expanded the other benchmarks to test both trivial and non-trivial types.\n\nOne thing that I also found interesting while doing this change was the way the current code is written to not use SFINAE. On GCC 7.3 (what I have locally) the compiler is smart enough to do the type checks at compile time and not generate runtime checks, meaning it ge",https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368959289,368959289,
sipa,2018-02-27T18:55:18Z,"I believe your first commit won't compile on GCC 4.8. Also, if you're going to use IS_TRIVIALLY_CONSTRUCTIBLE outside of prevector.h, perhaps it's better to move it elsewhere (like util.h or compat.h)?",https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368986496,368986496,
eklitzke,2018-02-27T19:03:55Z,"Good catch, I only tested the last commit. I'll rebase this branch so all of the commits build cleanly, and move the macro definition.",https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-368989316,368989316,
eklitzke,2018-02-27T20:49:09Z,"Here are the latest results, tested under both GCC 7.3 and GCC 4.8. For both compilers I ran the full test suite and benchmarks for each of the three commits in this PR.\n\n### GCC 4.8\n\n```\nCommit     Test                                     Median (s)   Speedup\n------------------------------------------------------------------------\nf0e7aa     PrevectorClearNontrivial                 ",https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-369020851,369020851,
JeremyRubin,2018-02-27T20:54:23Z,"utACK\n\nThis is a good optimization @AkioNak / @eklitzke! I didn't have a hack for getting cross platform support for trivial constructors when I wrote https://github.com/bitcoin/bitcoin/pull/9505, so glad to see trivial types handled more optimally now (noting this to clarify that there was no other reason _not_ to do this that I came across in #9505)\n\nI would only nit that you should amen",https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-369022397,369022397,
sipa,2018-02-27T21:44:49Z,utACK 5aad635b78c8359adae9b2af015b67b7325c0e0b. Those benchmark numbers look very nice; thanks @AkioNak as well (sorry I never got around to reviewing your previous PR).,https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-369037126,369037126,
eklitzke,2018-02-27T23:18:35Z,Updated profile for `ReadBlockFromDisk()` with these changes: https://monad.io/readblockfromdisk2.svg . The time spent waiting on `prevector::resize()` has dropped from about 32% of the total time to 4% of the total time.,https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-369062502,369062502,
AkioNak,2018-02-27T23:55:54Z,@sipa please never mind.,https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-369070334,369070334,
laanwj,2018-03-01T11:08:52Z,utACK 5aad635b78c8359adae9b2af015b67b7325c0e0b,https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-369558674,369558674,
eklitzke,2018-03-01T20:50:45Z,"I just discovered this causes a warning in GCC 8, which added a new `-Wclass-memaccess` warning. The warning is spurious/incorrect, and GCC 8 is still not released as stable so I'm effectively testing a pre-release compiler. I filed a bug upstream: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=84656\n\nIf GCC 8 is released without fixing this we can add an explicit `void*` cast in the `memset()` ",https://github.com/bitcoin/bitcoin/pull/12549#issuecomment-369726467,369726467,
Empact,2018-02-27T07:35:13Z,"Maybe use `ptrdiff_t` here and in `fill`? Would allow you to assert against the negative case rather than have a very large value.\n\nNot that the negative case is possible with the current code, but it could be protective going forward.",https://github.com/bitcoin/bitcoin/pull/12549#discussion_r170835611,170835611,src/prevector.h
AkioNak,2018-02-27T14:27:21Z,I think diganostic message can not be omitted on c++11.,https://github.com/bitcoin/bitcoin/pull/12549#discussion_r170938344,170938344,src/bench/prevector.cpp
AkioNak,2018-02-27T14:28:06Z,I think diganostic message can not be omitted on c++11.,https://github.com/bitcoin/bitcoin/pull/12549#discussion_r170938591,170938591,src/bench/prevector.cpp
Empact,2018-02-27T21:00:55Z,Is this redundant with the same in `prevector.h`?,https://github.com/bitcoin/bitcoin/pull/12549#discussion_r171064514,171064514,src/compat.h
eklitzke,2018-02-27T21:28:12Z,"Good catch, pushing a rebase that fixes this.",https://github.com/bitcoin/bitcoin/pull/12549#discussion_r171071990,171071990,src/compat.h
