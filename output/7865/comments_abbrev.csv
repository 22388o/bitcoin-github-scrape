jonasschnelli,2016-04-12T20:11:22Z,Force push fixed @instagibbs nits.\n,https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-209084037,209084037,
instagibbs,2016-04-13T20:34:51Z,"utACK post-nits\n\nAlthough it might make sense to split this into ~3 PRs to get through a couple faster, and each of which would still be useful on their own:\n1) bitcoin-tx stuff\n2) createrawtransaction stuff\n3) rest of stuff\n",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-209636988,209636988,
paveljanik,2016-04-26T07:06:35Z,"@jonasschnelli Can you please separate ""Bitcoin-Tx / CreateRawTransaction"" changes into new PR, so this can get merged?\n",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-214640789,214640789,
NicolasDorier,2016-04-26T08:45:52Z,"@jonasschnelli maybe unrelated to this PR, or I should bring that up in a meeting (sadly it is 4am in japan when there is core meeting), but I think a better (or alternative) bumpfee would be one which take the number of block to confirm. As a developer using the RPC API, I'd like my backend to bump fees periodically to reach confirmation target in case of fee increase. So that bumpfee <txid> 3 wo",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-214670775,214670775,
jonasschnelli,2016-04-27T13:54:03Z,"@NicolasDorier: I agree that a confirm target for the `bumpfee` command would make sense.\nThe variable confirm target for `CreateTransaction` would require some refactoring.\n\nThis PR is already relatively large, we should probably add this feature in another PR.\n",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-215090659,215090659,
NicolasDorier,2016-04-27T14:04:45Z,"right, utACK\n",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-215093983,215093983,
jonasschnelli,2016-04-27T14:13:58Z,Rebased (non trivial after #7518).\n,https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-215097059,215097059,
jonasschnelli,2016-04-28T08:41:49Z,Removed `createrawtransaction` and bitcoin-tx commits because they are now in #7957.\n,https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-215354020,215354020,
jonasschnelli,2016-05-06T09:21:15Z,Needed rebase.\n,https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-217394873,217394873,
jonasschnelli,2016-05-06T10:14:20Z,"Migrated test to python3, fixed @MarcoFalke nits.\n",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-217404106,217404106,
jonasschnelli,2016-05-31T08:51:44Z,Rebased. Fixed nit reported by @MarcoFalke.\n,https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-222629354,222629354,
jonasschnelli,2016-06-08T19:58:49Z,"Rebased and improved.\nMade usage of the new `feeRate` option in `fundrawtransaction`.\n\nNow the bumpfee command takes an existing `wtx` (identified by `txid`), increases the fee by using at the estimating mempool feeRate for the default confirmation target. If the new estimate feeRate is < old feeRate , it will use oldFeeRate+minRelayTxFee instead.\n",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-224709267,224709267,
MarcoFalke,2016-06-09T12:18:17Z,Mind to squash the history to aid review?\n,https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-224877726,224877726,
rubensayshi,2016-06-14T11:43:12Z,"hmm, ""Currently, bumpfee will increase the fees by using the `<old transaction fee> + <new transaction fee estimate>`.""\n\nnot sure if I'm missing something but when `newFeeRate.GetFeePerK() >= oldFeeRate.GetFeePerK()+::minRelayTxFee.GetFeePerK()` it just uses `newFeeRate` no?\n\nI think I read the code right and you just need to update your initial description of the PR, in which case; **utACK** ",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-225856488,225856488,
gmaxwell,2016-06-15T10:08:31Z,"Concept ACK (for future reference, I think this would have potentially been better as two PRs, with the bumpfee separate-- built on top of the first), will review.\n",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-226144617,226144617,
fanquake,2016-06-22T03:21:29Z,Is this still going into 0.13.0 ?\n,https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-227632856,227632856,
laanwj,2016-06-22T06:54:43Z,"@fanquake No, not as-is. Unfortunately this missed the feature freeze. At last Thursday's meeting @jonasschnelli mentioned working on much simplified minimum RPC functionality for 0.13 to serve as a stop-gap.\n",https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-227658980,227658980,
jonasschnelli,2016-08-05T10:55:53Z,superseded by #8456. Closing. \n,https://github.com/bitcoin/bitcoin/pull/7865#issuecomment-237822248,237822248,
instagibbs,2016-04-12T15:03:37Z,"It seems to me default is simply ""not bip125"". Not sure the name ""default"" really fits, especially longer-term. \n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59392178,59392178,src/wallet/wallet.h
instagibbs,2016-04-12T15:07:44Z,update the comment?\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59392983,59392983,src/wallet/wallet.cpp
jonasschnelli,2016-04-12T15:08:58Z,Good catch! Will update.\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59393236,59393236,src/wallet/wallet.cpp
instagibbs,2016-04-12T15:47:14Z,I think this deletes outputs going to watch-only wallet addresses. Perhaps check for isminetype we care about.\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59400373,59400373,src/wallet/rpcwallet.cpp
jonasschnelli,2016-04-12T20:01:30Z,"I think the `CREATE_TX_DEFAULT` is okay. Passing just a `0`(int) would require casting. ""not bip125"" is also not true because in future you could combine flags (Don't SIGN & RBF)? \n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59443131,59443131,src/wallet/wallet.h
NicolasDorier,2016-04-14T07:41:13Z,"Why not ensuring `(nFee - nOldFee) > minTxRelayFee`, and if not, exit early with a descriptive JSONRpcError which say the fees are high enough and can't be bumped ?\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59674077,59674077,src/wallet/rpcwallet.cpp
NicolasDorier,2016-04-14T07:42:45Z,Transaction can be rejected even if the fee are not already bumped if the estimated fee rate decreased compared to the previous version of the transaction.\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59674231,59674231,src/wallet/rpcwallet.cpp
jonasschnelli,2016-04-14T09:31:02Z,"Yes. I have though about that. But you also would like to have a check that makes sure, it would be accepted as replacement.\nThis would require to factor out the RBF check from `main.cpp` to `rbf.cpp` (which probably would sense in a follow up PR).\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59687615,59687615,src/wallet/rpcwallet.cpp
jonasschnelli,2016-04-14T09:32:30Z,Yes. True. This is why the second sentence is a question. :)\nI guess it will be a common mistake to bump the same txid again.\nBut I'm open for suggestions.\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59687827,59687827,src/wallet/rpcwallet.cpp
NicolasDorier,2016-04-14T09:58:11Z,"Yes, but CommitTransaction later is already doing that under the hood if I understand.\nThe most likely problem is that the fees can't be bumped, for the 0.0001% chance that it still get rejected for whatever other issue during the CommitTransaction, a generic error message would be enough.\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59690897,59690897,src/wallet/rpcwallet.cpp
NicolasDorier,2016-04-14T09:59:46Z,"If you detect `(nFee - nOldFee) > minTxRelayFee` condition above, then it is not a question anymore. The early exit message would be ""Fee are already bumped to the actual fee rate"".\n\nThe error on CommitTransaction can be ""Something went wrong when commiting the transaction in the wallet"". Generic and not descriptive, but it should not happen very often, and if it happens, you are sure it is not ",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59691087,59691087,src/wallet/rpcwallet.cpp
jonasschnelli,2016-04-14T10:05:55Z,IMO if you do `(nFee - nOldFee) > minTxRelayFee` you can't be sure if you are using enough fees. The new transaction also needs to pay the bandwith-costs of the all replaced transaction descendants. Not?\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59691813,59691813,src/wallet/rpcwallet.cpp
sipa,2016-04-14T10:07:54Z,"nOldFee already is enough for all previously replaced ones, so you only need to add minTxRelayFee to account for everything. That's the logic used by the replacement code as well.\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59692031,59692031,src/wallet/rpcwallet.cpp
NicolasDorier,2016-04-14T11:25:07Z,"@jonasschnelli I dont think so given [the condition](https://github.com/bitcoin/bitcoin/pull/6871/files#diff-7ec3c68a81efff79b6ca22ac1f1eabbaR1129), just doing the same check should be enough.\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59700857,59700857,src/wallet/rpcwallet.cpp
jonasschnelli,2016-04-14T12:26:48Z,"@NicolasDorier: the problem is, it could be the case that you don't have a change output, or, that increasing the fee requires another `<n>` input(s). In theory – it could be that you need to add 10 new inputs (you don't know the fee situation before/during bump and the value of your unspent outputs).\n\nSo, this results in the knapsack problem. You don't know how big your transaction – and theref",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59707643,59707643,src/wallet/rpcwallet.cpp
NicolasDorier,2016-04-14T13:37:27Z,@jonasschnelli I don't mean to remove the call to `CreateTransaction`. I mean just adding the fee check after the signature success check. (using the size of the fully signed new transaction replacement)\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r59717635,59717635,src/wallet/rpcwallet.cpp
jonasschnelli,2016-04-27T14:10:11Z,"Nicolas and I have sorted out that problem.\nThe current bumpfee command takes the old fee as base fee, runs the coin selection (<n> new inputs might be required to bump the fee) which results in:\n`newFee = oldFee + feeOfNewStandaloneTransaction`\n\nAt the moment, this results in ~doubling the fee.\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r61263413,61263413,src/wallet/rpcwallet.cpp
MarcoFalke,2016-05-06T09:32:42Z,Mind to change this to py3?\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r62307586,62307586,qa/rpc-tests/bumpfee.py
MarcoFalke,2016-05-06T09:33:59Z,Can you move the assert into the try block? (Keeps the scope clear)\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r62307719,62307719,qa/rpc-tests/bumpfee.py
MarcoFalke,2016-05-06T09:35:39Z,I don't like this syntax: #7801\n\nMind to move the assert into the except block?\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r62307872,62307872,qa/rpc-tests/bumpfee.py
MarcoFalke,2016-05-06T10:23:33Z,"You don't need the errorString, just `assert(len(e.error['message']) > 0)` or `assert_raises(JSONRPCException, ...`\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r62312522,62312522,qa/rpc-tests/bumpfee.py
MarcoFalke,2016-05-06T10:23:39Z,"Is this doing anything different that `assert_raises(JSONRPCException, ...`?\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r62312529,62312529,qa/rpc-tests/bumpfee.py
jonasschnelli,2016-05-06T10:34:57Z,Right. Fixed.\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r62313502,62313502,qa/rpc-tests/bumpfee.py
sipa,2016-06-01T17:05:47Z,Unresolved conflict\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r65402054,65402054,src/wallet/wallet.h
jonasschnelli,2016-06-01T18:07:19Z,~~Oh. Messed up the rebase. Will fix.~~\nWait: you commented and old commit.\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r65412719,65412719,src/wallet/wallet.h
MarcoFalke,2016-06-01T18:11:27Z,"Nit: I think you only need 3 nodes?\n\nAlso, you can use `__init__` now. (Instead of overwriting `setup_chain`):\n\n``` py\n    def __init__(self):\n        super().__init__()\n        self.num_nodes = 3\n        self.setup_clean_chain = True # not needed (default should already be true)\n```\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r65413464,65413464,qa/rpc-tests/bumpfee.py
jonasschnelli,2016-06-01T18:54:52Z,Thanks @MarcoFalke. Test fixed.\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r65421160,65421160,qa/rpc-tests/bumpfee.py
MarcoFalke,2016-06-09T12:17:48Z,"Replace by\n\n``` py\nassert_raises(JSONRPCException, self.nodes[0].bumpfee, nonrbftx)\n```\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r66429141,66429141,qa/rpc-tests/bumpfee.py
sipa,2016-06-14T14:17:39Z,"I think this increment needs to happen always, even if the condition above is true.\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r66978523,66978523,src/wallet/rpcwallet.cpp
jonasschnelli,2016-06-14T14:19:56Z,doesn't `tx.vout.erase(it);` result in pointing to the next element in the iteration?\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r66979064,66979064,src/wallet/rpcwallet.cpp
laanwj,2016-06-14T14:24:32Z,"erase returns the new position of the next element after the one that is erased, so `it = tx.vout.erase(it)` does the right thing\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r66980242,66980242,src/wallet/rpcwallet.cpp
MarcoFalke,2016-06-20T13:07:03Z,@jonasschnelli This commit is still in the history.\n\nYou didn't solve the conflict in this commit but in a later one. Looks weird if someone digs through it.\n,https://github.com/bitcoin/bitcoin/pull/7865#discussion_r67685536,67685536,src/wallet/wallet.h
sipa,2016-06-20T13:14:36Z,"It also breaks bisections.\n\nIn general, the state of the tree should be valid after every commit\n(compile and test fine).\n",https://github.com/bitcoin/bitcoin/pull/7865#discussion_r67686650,67686650,src/wallet/wallet.h
