[
  {
    "sha": "2980a7a5ffef6f382e10343251d6d08239dced4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTgwYTdhNWZmZWY2ZjM4MmUxMDM0MzI1MWQ2ZDA4MjM5ZGNlZDRm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-03T08:27:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T12:57:54Z"
      },
      "message": "[Refactor] CreateTransaction(): use bit flags\nThis will allow to add flags for RBF and other features",
      "tree": {
        "sha": "1330d728b228606cb0dfcba0021feaf31b4ee8c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1330d728b228606cb0dfcba0021feaf31b4ee8c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2980a7a5ffef6f382e10343251d6d08239dced4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWBZSAAoJECnUvLZBb1PsVg8P/RruTGZxK9gcNOR1zEnoFv9I\nyiZ0CaYs9Dq4ROFj5CfVJi+48Jl0/PQxs8O9n8B9ev0zXZkf+/6ed7+843DCewap\ndwT/befDBWWie0p9Iq5pSwJyp6iCGP76BB0aK3Scwk8ZaY1YRVg32qhQ2NRkixzf\nDKrqwffmdrX6JUAeR2+HlkjEmv6TC2dqzFr7fgqGOLy3EjOmzQUvnxQSkwAd1oL2\nTjgyHAz3jHrGUspoBB8qat8n1RR8fjinTKx3sChfSkrGDRMaTpPo18hH9jom49gN\nI3+RkrkG5JGbBOKYXsr5+bHWydg+OlGl5tKNQbSsCDJbMudHmvPlY87AKGIFj6sE\nAmFXYDn/c56K/AVOVLUh3XROP0tzPyF9vcf/ew8LGmegWHSjpvlWpdHmNNhQeRVY\n2ijE7qlp27XPUQHNlG0AO3GbgDk70180MwmC0mN/oJrAM5ne1PjL6pcUjZPqNE5r\ncUxM7gIgKNBrdLcyTQ5DVzTEdA2vuGsrskErBZ5Q5pNvOMRGwSYe1u2To7z3SlEC\nAyKAzdHAkw9yI0pAsEvRRncp5hkekbCXypy/4ITheBhcJT4u7ua+Bobxpuv+ZUsb\n7M/cJcAGsBrItp4xEor+GT1wbbt95rqrT/I5gSNpr/6w9VAplR4ymk5joEhLt6Lz\nBKnGUuP52MfvnTWYmbOB\n=uKT2\n-----END PGP SIGNATURE-----",
        "payload": "tree 1330d728b228606cb0dfcba0021feaf31b4ee8c9\nparent 79004d4ae67164d980fdaab4de9d9d467cdb9b88\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1449131253 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1465390674 +0200\n\n[Refactor] CreateTransaction(): use bit flags\nThis will allow to add flags for RBF and other features\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2980a7a5ffef6f382e10343251d6d08239dced4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2980a7a5ffef6f382e10343251d6d08239dced4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2980a7a5ffef6f382e10343251d6d08239dced4f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79004d4ae67164d980fdaab4de9d9d467cdb9b88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79004d4ae67164d980fdaab4de9d9d467cdb9b88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79004d4ae67164d980fdaab4de9d9d467cdb9b88"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b72008ae6666cf6144d148816f1550125adcfc2a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2980a7a5ffef6f382e10343251d6d08239dced4f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2980a7a5ffef6f382e10343251d6d08239dced4f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2980a7a5ffef6f382e10343251d6d08239dced4f",
        "patch": "@@ -2004,7 +2004,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, false))\n+    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, CREATE_TX_DONT_SIGN))\n         return false;\n \n     if (nChangePosInOut != -1)\n@@ -2029,7 +2029,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n }\n \n bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n-                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n+                                int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, unsigned int flags)\n {\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;\n@@ -2261,7 +2261,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     bool signSuccess;\n                     const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey;\n                     CScript& scriptSigRes = txNew.vin[nIn].scriptSig;\n-                    if (sign)\n+                    if (!(flags & CREATE_TX_DONT_SIGN))\n                         signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n                     else\n                         signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, scriptSigRes);\n@@ -2277,7 +2277,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 unsigned int nBytes = ::GetSerializeSize(txNew, SER_NETWORK, PROTOCOL_VERSION);\n \n                 // Remove scriptSigs if we used dummy signatures for fee calculation\n-                if (!sign) {\n+                if (flags & CREATE_TX_DONT_SIGN) {\n                     BOOST_FOREACH (CTxIn& vin, txNew.vin)\n                         vin.scriptSig = CScript();\n                 }"
      },
      {
        "sha": "2ea5ed9346f4a1a24b94e11fab9c4a680d4da83b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2980a7a5ffef6f382e10343251d6d08239dced4f/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2980a7a5ffef6f382e10343251d6d08239dced4f/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2980a7a5ffef6f382e10343251d6d08239dced4f",
        "patch": "@@ -532,6 +532,10 @@ class CAccountingEntry\n     std::vector<char> _ssExtra;\n };\n \n+enum CreateTransactionFlags {\n+    CREATE_TX_DEFAULT     = 0,\n+    CREATE_TX_DONT_SIGN   = (1U << 0)\n+};\n \n /** \n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n@@ -747,8 +751,13 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * selected by SelectCoins(); Also create the change output, when needed\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n+<<<<<<< 08b37c5e06bf1698c1d0e5905806382cbfa8cefd\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n+=======\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n+                           std::string& strFailReason, const CCoinControl *coinControl = NULL, unsigned int flags = CREATE_TX_DEFAULT);\n+>>>>>>> [Refactor] CreateTransaction(): use bit flags\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB & pwalletdb);"
      }
    ]
  },
  {
    "sha": "89a671aa93e898ccd828051ecf03bfae2d564588",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWE2NzFhYTkzZTg5OGNjZDgyODA1MWVjZjAzYmZhZTJkNTY0NTg4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-12-03T08:53:23Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T12:57:54Z"
      },
      "message": "[Wallet] Allow to opt-into RBF when creating a transaction",
      "tree": {
        "sha": "6a1d09b824ee8dae46133ad87e7623d3ee981a27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a1d09b824ee8dae46133ad87e7623d3ee981a27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89a671aa93e898ccd828051ecf03bfae2d564588",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWBZSAAoJECnUvLZBb1PslOEQAJb4Nbv44qUlxljJt2X/WWzT\nabAWOKOrAB48gGbaqvcpAw90K4z6QH7NuUBQsQHw3J4Dcpu4fe3vH4QMUwGswlyO\nL/WQShjEAzx9RbWHNZUpaD7HdYfOLar2zIh1Dvkf6DActTEIiLbXvYLkse30jdjw\ngWtV0yt/y2WrT4p+sB3WmX0L3KzlJzg37058U1Dd8hW2CoVbLlnd5GNMAna69rLp\nBil630W17EjHd/5k2czZZehY7WCI0Zzksyb6DIVDGOON++d6qv/UziEMHmtXaZdp\nEy3FtZzMyE4jVXpbLXO/bMA0iOPW8Zvz4tYSLxDdEwcCyGLrvvhFilfvahes/RLR\n1FBZLl6gKnzPu8MZQZPUo15ttEz1EqK+dCDpBm67TMHrR//Hd0IndtfewFSTKaJO\nyqjCRbCZHFU73wBKo56G3FTXuk9yr7LJQi1dcaDJ89eaEISo5WGn19wODnPJGykj\nhz61EY1p38PeI4sjk+36ApcOB07oXOSeC2op5tO1eUpEyVGT40vzL/YSDusptPzO\ngIBRPGhFijvsI3BomOzfhHLwFGErRgwOuLXfYEujuxoAgSTj1Z4RcRNBWJrHnsZv\n8vK/TZJMCDPL8UFPlAd3vnT/zZd4fKYI+yqcqU4ECp6lrGKZu1ygvvu/A20evUbF\nnqYlqae40hQGp+1FgYzi\n=3sBv\n-----END PGP SIGNATURE-----",
        "payload": "tree 6a1d09b824ee8dae46133ad87e7623d3ee981a27\nparent 2980a7a5ffef6f382e10343251d6d08239dced4f\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1449132803 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1465390674 +0200\n\n[Wallet] Allow to opt-into RBF when creating a transaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a671aa93e898ccd828051ecf03bfae2d564588",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89a671aa93e898ccd828051ecf03bfae2d564588",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a671aa93e898ccd828051ecf03bfae2d564588/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2980a7a5ffef6f382e10343251d6d08239dced4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2980a7a5ffef6f382e10343251d6d08239dced4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2980a7a5ffef6f382e10343251d6d08239dced4f"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7d336bc248f793eb45db1cebe10d79fcb59a41d3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89a671aa93e898ccd828051ecf03bfae2d564588/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89a671aa93e898ccd828051ecf03bfae2d564588/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=89a671aa93e898ccd828051ecf03bfae2d564588",
        "patch": "@@ -2251,7 +2251,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // nLockTime set above actually works.\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n                     txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),\n-                                              std::numeric_limits<unsigned int>::max()-1));\n+                                              std::numeric_limits<unsigned int>::max() - ((flags & CREATE_TX_RBF_OPT_IN) ? 2 : 1) ));\n \n                 // Sign\n                 int nIn = 0;"
      },
      {
        "sha": "d283fb19df49d4fc7533186b585fbb8b77ba9ad1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89a671aa93e898ccd828051ecf03bfae2d564588/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89a671aa93e898ccd828051ecf03bfae2d564588/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=89a671aa93e898ccd828051ecf03bfae2d564588",
        "patch": "@@ -534,7 +534,8 @@ class CAccountingEntry\n \n enum CreateTransactionFlags {\n     CREATE_TX_DEFAULT     = 0,\n-    CREATE_TX_DONT_SIGN   = (1U << 0)\n+    CREATE_TX_DONT_SIGN   = (1U << 0),\n+    CREATE_TX_RBF_OPT_IN  = (1U << 1)\n };\n \n /** "
      }
    ]
  },
  {
    "sha": "291e7823bd912a5e83316d9194f98e76f78690d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTFlNzgyM2JkOTEyYTVlODMzMTZkOTE5NGY5OGU3NmY3ODY5MGQx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-04-08T09:05:21Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T12:59:36Z"
      },
      "message": "[Wallet] allow to set an initial fee amount to be added to the fee calculation",
      "tree": {
        "sha": "6aa217a77121c06d987afcc2d7d8e76a7ce9f5bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6aa217a77121c06d987afcc2d7d8e76a7ce9f5bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/291e7823bd912a5e83316d9194f98e76f78690d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWBa4AAoJECnUvLZBb1PsFvUQAK7U8S/WmWNAePlq+tIKwvoY\nbCQfHE+EvwbdvV6mVfek1870mktIaId1Zv8PMUtm8ds31fpwcmLcelX92ocRuz3H\ngJrc6ztAapg9KxeQa5yDGdBr7poImN8lIswaLWYfeiiFPbzZU1Tvdo/2TLFxzsA+\n1/4oWh9EFgVsJTABVpBJFwrjcDaxCfbwHb6v4hptzTNR+Xehsvj8fXwat4p0mweQ\nbFyO8mXb3WSKVBWtlggd/iAR2IBTaHr3KkejUagxk0abebohC7lAO6I/ghIeHe4r\nhNewszfB8+28iaKqUqRP9vrLbcaoSeN5FIz2HKfbOmn3Uhu3TKehPXwbVHexGUHv\n4A0SpmOSxiVD5c9L+CEpYvBaLohbimFLYhnbitq+1fGVQAe4BMYsEO3CcPAlmR2P\nlMVo0zZ/cvxKRPmTedMgs2sLQBC0cs6tcaqM+djKFt/ZK8vTjjK7M8s/utXzBi3y\n1nzar/uupodBmhCT8tGKc490iquTuXMf1N7BFLpZmQl2LDM4RmVHvPOpUt0AY1/j\naYgCBL4RWsxTtrccEq/vt+V3D7bRnYFcuzxVXAAMF0QW9KXzAmEFFc0UzEiiMfpu\nHk+DaYekkwJbG4X1HvAfPqNJfPvQf6GrD9QxHCRQQLKkW9hOlcP2V8mZm9q4HGL2\nvqiLABR29w8qVK4PNjsw\n=aI0S\n-----END PGP SIGNATURE-----",
        "payload": "tree 6aa217a77121c06d987afcc2d7d8e76a7ce9f5bc\nparent 89a671aa93e898ccd828051ecf03bfae2d564588\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1460106321 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1465390776 +0200\n\n[Wallet] allow to set an initial fee amount to be added to the fee calculation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291e7823bd912a5e83316d9194f98e76f78690d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/291e7823bd912a5e83316d9194f98e76f78690d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291e7823bd912a5e83316d9194f98e76f78690d1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89a671aa93e898ccd828051ecf03bfae2d564588",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a671aa93e898ccd828051ecf03bfae2d564588",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89a671aa93e898ccd828051ecf03bfae2d564588"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 15,
      "deletions": 21
    },
    "files": [
      {
        "sha": "7bc5c0a08257b0e42550fd257ca81456c65905da",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291e7823bd912a5e83316d9194f98e76f78690d1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291e7823bd912a5e83316d9194f98e76f78690d1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=291e7823bd912a5e83316d9194f98e76f78690d1",
        "patch": "@@ -1981,7 +1981,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeInOut, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n {\n     vector<CRecipient> vecSend;\n \n@@ -2004,7 +2004,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n \n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, CREATE_TX_DONT_SIGN))\n+    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeInOut, nChangePosInOut, strFailReason, &coinControl, CREATE_TX_DONT_SIGN))\n         return false;\n \n     if (nChangePosInOut != -1)\n@@ -2028,11 +2028,13 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n     return true;\n }\n \n-bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeInOut,\n                                 int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, unsigned int flags)\n {\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;\n+    // store the fee input value for adding it to the calculated fee later\n+    CAmount addToFee = nFeeInOut;\n     unsigned int nSubtractFeeFromAmount = 0;\n     BOOST_FOREACH (const CRecipient& recipient, vecSend)\n     {\n@@ -2094,8 +2096,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(vAvailableCoins, true, coinControl);\n \n-            nFeeRet = 0;\n-            // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n                 nChangePosInOut = nChangePosRequest;\n@@ -2106,7 +2106,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 CAmount nValueToSelect = nValue;\n                 if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet;\n+                    nValueToSelect += nFeeInOut; //add the required fee to the amount-to-select\n                 double dPriority = 0;\n                 // vouts to the payees\n                 BOOST_FOREACH (const CRecipient& recipient, vecSend)\n@@ -2115,18 +2115,18 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                     if (recipient.fSubtractFeeFromAmount)\n                     {\n-                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+                        txout.nValue -= nFeeInOut / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n \n                         if (fFirst) // first receiver pays the remainder not divisible by output count\n                         {\n                             fFirst = false;\n-                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n+                            txout.nValue -= nFeeInOut % nSubtractFeeFromAmount;\n                         }\n                     }\n \n                     if (txout.IsDust(::minRelayTxFee))\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n+                        if (recipient.fSubtractFeeFromAmount && nFeeInOut > 0)\n                         {\n                             if (txout.nValue < 0)\n                                 strFailReason = _(\"The transaction amount is too small to pay the fee\");\n@@ -2222,7 +2222,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     if (newTxOut.IsDust(::minRelayTxFee))\n                     {\n                         nChangePosInOut = -1;\n-                        nFeeRet += nChange;\n+                        nFeeInOut += nChange;\n                         reservekey.ReturnKey();\n                     }\n                     else\n@@ -2304,7 +2304,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                         break;\n                 }\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool)+addToFee;\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n                 }\n@@ -2319,11 +2319,11 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     return false;\n                 }\n \n-                if (nFeeRet >= nFeeNeeded)\n+                if (nFeeInOut >= nFeeNeeded)\n                     break; // Done, enough fee included.\n \n                 // Include more fee and try again.\n-                nFeeRet = nFeeNeeded;\n+                nFeeInOut = nFeeNeeded;\n                 continue;\n             }\n         }"
      },
      {
        "sha": "4e63e29303aa0b1133422b82410ecaa099532644",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291e7823bd912a5e83316d9194f98e76f78690d1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291e7823bd912a5e83316d9194f98e76f78690d1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=291e7823bd912a5e83316d9194f98e76f78690d1",
        "patch": "@@ -745,20 +745,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeInOut, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n      * selected by SelectCoins(); Also create the change output, when needed\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-<<<<<<< 08b37c5e06bf1698c1d0e5905806382cbfa8cefd\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n-                           std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n-=======\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n-                           std::string& strFailReason, const CCoinControl *coinControl = NULL, unsigned int flags = CREATE_TX_DEFAULT);\n->>>>>>> [Refactor] CreateTransaction(): use bit flags\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeInOut, int& nChangePosInOut, std::string& strFailReason, const CCoinControl *coinControl = NULL, unsigned int flags = CREATE_TX_DEFAULT);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB & pwalletdb);"
      }
    ]
  },
  {
    "sha": "a5018782fb0bab1ef506f5d0e89c4490d8606369",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTAxODc4MmZiMGJhYjFlZjUwNmY1ZDBlODljNDQ5MGQ4NjA2MzY5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-04-12T08:11:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T13:00:23Z"
      },
      "message": "[Wallet] FundTransaction: return reserveKey to allow keeping the change key",
      "tree": {
        "sha": "c3629ff3e903a8ac7de96e20542ba82a98b4724a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3629ff3e903a8ac7de96e20542ba82a98b4724a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5018782fb0bab1ef506f5d0e89c4490d8606369",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWBbnAAoJECnUvLZBb1PsVHgP/j9ow+w8jAcqNVmNHueSDpoE\nDTJ/xvHNuiVBajGPaKaA655Ho3IV9OTLJicDJ4nds+ZWT18lfmyCRwPYNuHlbbaB\n0lZosIdzSWX7ZL/F5SQZ1Hhof/TqZ1WSLMQ+nnT67Opj/CZiZgFQQrOBhNXE4BGZ\nO60PJ67CsBCX1OZCC+3iUrmEiPbyL+Kao2e44kyy/SyHx4Em9M1YqhQDmgyhCvNi\nJztzHmyCMZPna2Jdf0FrXc+4Em5KodSsL1eIfFdcno+ur9tRazVO1lY6Y65q7qV+\ns1/SGGMLVOsMUoWOYebmO3DuKq5fRPX4Bw1KzOO8TzppJd4sze6+qfuu6L75J1Wj\nEOm4yHnZuqtp5eC9n6WrFfDvysA2ymOSAjtribH4l+Ua+T9mTHzitC02lrjVEjT6\n9p86IJu3vewkKBIh/NsLadeWv9kdY7GNsN8TYSxfnWlQVjZmixaxvamInhJj7q4h\nMzJg0jH3wdQoWIxNYqlUYwj9Efz9rgz36T9iBjiHZbqFE2mxc4B/meU5nudTZZbk\ng/FkRTTVchj1a6cIB5+AmgfkDACl7cMO6uVrEDaDK5Qbk/SEOAT4U1YVffHi242e\n9PZmDCIYg4jI8u86r7E0xSnyYNjhRvTxZIgZ1Rk9hrLc6TyYK9rHF2oK4oNpK2/W\n8mhtmFD8MxJRRV39h7qF\n=8JgV\n-----END PGP SIGNATURE-----",
        "payload": "tree c3629ff3e903a8ac7de96e20542ba82a98b4724a\nparent 291e7823bd912a5e83316d9194f98e76f78690d1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1460448710 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1465390823 +0200\n\n[Wallet] FundTransaction: return reserveKey to allow keeping the change key\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5018782fb0bab1ef506f5d0e89c4490d8606369",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5018782fb0bab1ef506f5d0e89c4490d8606369",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5018782fb0bab1ef506f5d0e89c4490d8606369/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "291e7823bd912a5e83316d9194f98e76f78690d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291e7823bd912a5e83316d9194f98e76f78690d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/291e7823bd912a5e83316d9194f98e76f78690d1"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "733c1a26ffc2cd91a92c550a2596b6b8fb2e4b3c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5018782fb0bab1ef506f5d0e89c4490d8606369/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5018782fb0bab1ef506f5d0e89c4490d8606369/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a5018782fb0bab1ef506f5d0e89c4490d8606369",
        "patch": "@@ -1981,7 +1981,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeInOut, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CReserveKey& reservekeyOut, CAmount& nFeeInOut, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n {\n     vector<CRecipient> vecSend;\n \n@@ -2002,9 +2002,8 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeInOut, bool\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         coinControl.Select(txin.prevout);\n \n-    CReserveKey reservekey(this);\n     CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeInOut, nChangePosInOut, strFailReason, &coinControl, CREATE_TX_DONT_SIGN))\n+    if (!CreateTransaction(vecSend, wtx, reservekeyOut, nFeeInOut, nChangePosInOut, strFailReason, &coinControl, CREATE_TX_DONT_SIGN))\n         return false;\n \n     if (nChangePosInOut != -1)"
      },
      {
        "sha": "68a239bbfa4e9d7ce33c05b942dd44c4ab152713",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5018782fb0bab1ef506f5d0e89c4490d8606369/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5018782fb0bab1ef506f5d0e89c4490d8606369/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a5018782fb0bab1ef506f5d0e89c4490d8606369",
        "patch": "@@ -745,7 +745,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeInOut, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CReserveKey& reservekeyOut, CAmount& nFeeInOut, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins"
      }
    ]
  },
  {
    "sha": "3f2d37410e72d236fdc0a08c9602b05456268328",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjJkMzc0MTBlNzJkMjM2ZmRjMGEwOGM5NjAyYjA1NDU2MjY4MzI4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-04-12T11:24:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T13:34:20Z"
      },
      "message": "[Wallet] add bumpfee RPC command",
      "tree": {
        "sha": "41a90e28ca7f5d6a458da9dc4fe594b7726fd498",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41a90e28ca7f5d6a458da9dc4fe594b7726fd498"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f2d37410e72d236fdc0a08c9602b05456268328",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWB7dAAoJECnUvLZBb1Psz64P/jAKR+xEAK+gFsceCIRWMtfQ\n69614w/sVH3dMVBRyGIao2YZNtPJFABRIB4rZR36UcNM3QrvGahpRI+qiSkUNHer\ncPWtN1k7Xq3AuhxBJ/BFmB5SFK5B4PzBd7uAncI4ua8qjXv8d5ZpfIYD2Q6F/QxF\nPesZzU5d+IHNN5VPA6aPUDXtqkr0OcQOAybZGqLJCCtUP/3r89iCrKPKTUIS2wpC\nKzPwVkB/8kD3RIRmd6pPduYO+9CgIlP+0OfvJ4JZpOGr7xISjbsO69WccxxPnJiC\nISdMm8qVNAY73rBbTjGbpXldkdLY19Qf/w9S6XXXWyp2CYBAHgwDv6xovezWtiIa\nzRl5J8/uo1Hy78AYIi5uJ7fCiSQeL7i0rpJt8NTVtM3bWKRxDCbE8c1GHo7r79Eg\nMdmZEfE7M6j1FruqIuRDS47NRDcMaezEq8HWmjTiypor1dK5O98wkE8yJqShogot\nHZeEejHvKudKJk/DPiQCQp8Vz/7cSD0KZrw6uUF8by/567KnQBYiCWhwVxw2CPj/\nEsRRDi0XrIJKoVTC0QiMr9+eWn6aAaou8gE5LsleOXsQag8VP357DGMHRpQoM5Qb\nBIzTG69hAmW/eEQoOIPU1HXjWIzKkNmIYcLTPsumjRiuRjLvpWJAJczzEiYa3Q5G\n37IimPKve0NWg4+AotJL\n=C6P6\n-----END PGP SIGNATURE-----",
        "payload": "tree 41a90e28ca7f5d6a458da9dc4fe594b7726fd498\nparent a5018782fb0bab1ef506f5d0e89c4490d8606369\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1460460291 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1465392860 +0200\n\n[Wallet] add bumpfee RPC command\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f2d37410e72d236fdc0a08c9602b05456268328",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f2d37410e72d236fdc0a08c9602b05456268328",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f2d37410e72d236fdc0a08c9602b05456268328/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5018782fb0bab1ef506f5d0e89c4490d8606369",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5018782fb0bab1ef506f5d0e89c4490d8606369",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5018782fb0bab1ef506f5d0e89c4490d8606369"
      }
    ],
    "stats": {
      "total": 217,
      "additions": 206,
      "deletions": 11
    },
    "files": [
      {
        "sha": "919e9d4314c558bdc25571d0b087c7ddb209a2e9",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f2d37410e72d236fdc0a08c9602b05456268328/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f2d37410e72d236fdc0a08c9602b05456268328/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=3f2d37410e72d236fdc0a08c9602b05456268328",
        "patch": "@@ -136,6 +136,7 @@\n     'p2p-versionbits-warning.py',\n     'importprunedfunds.py',\n     'signmessages.py',\n+    'bumpfee.py'\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "93c6f1226f28394b5e41555ee39213c3ccbaa1a2",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f2d37410e72d236fdc0a08c9602b05456268328/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f2d37410e72d236fdc0a08c9602b05456268328/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=3f2d37410e72d236fdc0a08c9602b05456268328",
        "patch": "@@ -0,0 +1,80 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class BumpFeeTest (BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print(\"Mining blocks...\")\n+\n+        self.nodes[0].generate(1)\n+\n+        walletinfo = self.nodes[0].getwalletinfo()\n+        assert_equal(walletinfo['immature_balance'], 50)\n+        assert_equal(walletinfo['balance'], 0)\n+\n+        self.sync_all()\n+        self.nodes[1].generate(101)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[0].getbalance(), 50)\n+        assert_equal(self.nodes[1].getbalance(), 50)\n+        assert_equal(self.nodes[2].getbalance(), 0)\n+\n+        # create a opt-in RBF transaction\n+        rbftx = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5, \"\", \"\", True, True)\n+        rbftxraw = self.nodes[0].gettransaction(rbftx)\n+        bumpedrawtx = self.nodes[0].bumpfee(rbftx)\n+        assert(bumpedrawtx['fee'] - rbftxraw['fee'] > 0) #make sure the fee is at least higher\n+\n+        rbftxrawsignedN2= self.nodes[0].getrawtransaction(bumpedrawtx['txid'])\n+        sync_mempools(self.nodes)\n+        rbftxrawsignedN0= self.nodes[1].getrawtransaction(bumpedrawtx['txid'])\n+        assert_equal(rbftxrawsignedN2, rbftxrawsignedN0) #node0 should have the transacion\n+        self.sync_all()\n+\n+        # try to get the replaced transaction, should be evicted from the mempool\n+        assert_raises(JSONRPCException, self.nodes[1].getrawtransaction, rbftx)\n+\n+        oldwtx = self.nodes[0].gettransaction(rbftx)\n+        assert(len(oldwtx['walletconflicts']) > 0)\n+        assert(rbftx not in self.nodes[0].getrawmempool())\n+\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+\n+        rbftx = self.nodes[2].sendmany('', {self.nodes[1].getnewaddress() : 1, self.nodes[1].getnewaddress() : 2}, 0, \"\", [], True)\n+        bumpedrawtx = self.nodes[2].bumpfee(rbftx)\n+        self.sync_all()\n+\n+        assert(rbftx not in self.nodes[0].getrawmempool())\n+        assert(bumpedrawtx['txid'] in self.nodes[0].getrawmempool())\n+\n+        # try to replace a non RBF transaction\n+        nonrbftx = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1, \"\", \"\", True, False)\n+\n+        try:\n+            bumpedrawtx = self.nodes[0].bumpfee(nonrbftx)\n+            assert(False)\n+        except JSONRPCException as e:\n+            assert(len(e.error['message']) > 0)\n+\n+if __name__ == '__main__':\n+    BumpFeeTest ().main ()"
      },
      {
        "sha": "50b636361812fc6dca300d7dc63709ab2e5361bf",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f2d37410e72d236fdc0a08c9602b05456268328/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f2d37410e72d236fdc0a08c9602b05456268328/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=3f2d37410e72d236fdc0a08c9602b05456268328",
        "patch": "@@ -35,6 +35,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getnetworkhashps\", 1 },\n     { \"sendtoaddress\", 1 },\n     { \"sendtoaddress\", 4 },\n+    { \"sendtoaddress\", 5 },\n     { \"settxfee\", 0 },\n     { \"getreceivedbyaddress\", 1 },\n     { \"getreceivedbyaccount\", 1 },\n@@ -63,6 +64,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendmany\", 1 },\n     { \"sendmany\", 2 },\n     { \"sendmany\", 4 },\n+    { \"sendmany\", 5 },\n     { \"addmultisigaddress\", 0 },\n     { \"addmultisigaddress\", 1 },\n     { \"createmultisig\", 0 },"
      },
      {
        "sha": "2e9fe0460048622119b66692ceebd61015b13c02",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 11,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f2d37410e72d236fdc0a08c9602b05456268328/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f2d37410e72d236fdc0a08c9602b05456268328/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3f2d37410e72d236fdc0a08c9602b05456268328",
        "patch": "@@ -13,6 +13,7 @@\n #include \"netbase.h\"\n #include \"policy/rbf.h\"\n #include \"rpc/server.h\"\n+#include \"script/sign.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n@@ -336,7 +337,7 @@ UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, bool fOptInRBF, CWalletTx& wtxNew)\n {\n     CAmount curBalance = pwalletMain->GetBalance();\n \n@@ -352,13 +353,13 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n \n     // Create and send the transaction\n     CReserveKey reservekey(pwalletMain);\n-    CAmount nFeeRequired;\n+    CAmount nFeeRequired = 0;\n     std::string strError;\n     vector<CRecipient> vecSend;\n     int nChangePosRet = -1;\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n-    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError, NULL, (fOptInRBF ? CREATE_TX_RBF_OPT_IN : CREATE_TX_DEFAULT) )) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n@@ -372,7 +373,7 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 5)\n+    if (fHelp || params.size() < 2 || params.size() > 6)\n         throw runtime_error(\n             \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n@@ -387,6 +388,7 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n             \"                             transaction, just kept in your wallet.\\n\"\n             \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n+            \"6. opt-in-RBF (BIP125)    (boolean, optional, default=false) Allows the _unconfirmed_ transaction to be replaced with a transaction paying higher fees.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transactionid\\\"  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n@@ -418,9 +420,13 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n     if (params.size() > 4)\n         fSubtractFeeFromAmount = params[4].get_bool();\n \n+    bool fOptInRBF = false;\n+    if (params.size() > 5)\n+        fOptInRBF = params[5].get_bool();\n+\n     EnsureWalletIsUnlocked();\n \n-    SendMoney(address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n+    SendMoney(address.Get(), nAmount, fSubtractFeeFromAmount, fOptInRBF, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -843,7 +849,7 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n-    SendMoney(address.Get(), nAmount, false, wtx);\n+    SendMoney(address.Get(), nAmount, false, false, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n@@ -854,7 +860,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n     if (!EnsureWalletIsAvailable(fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 5)\n+    if (fHelp || params.size() < 2 || params.size() > 6)\n         throw runtime_error(\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n@@ -872,6 +878,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n             \"                           The fee will be equally deducted from the amount of each selected address.\\n\"\n             \"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n             \"                           If no addresses are specified here, the sender pays the fee.\\n\"\n+            \"6. opt-in-RBF (BIP125)     (boolean, optional, default=false) Allows the _unconfirmed_ transaction to be replaced with a transaction paying higher fees.\\n\"\n             \"    [\\n\"\n             \"      \\\"address\\\"            (string) Subtract fee from this address\\n\"\n             \"      ,...\\n\"\n@@ -907,6 +914,9 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n     if (params.size() > 4)\n         subtractFeeFromAmount = params[4].get_array();\n \n+    // set optInRBF create transaction flag\n+    CreateTransactionFlags createTxFlags = (params.size() > 5 && params[5].isBool() && params[5].isTrue()) ? CREATE_TX_RBF_OPT_IN : CREATE_TX_DEFAULT;\n+\n     set<CBitcoinAddress> setAddress;\n     vector<CRecipient> vecSend;\n \n@@ -951,7 +961,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     string strFailReason;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason, NULL, createTxFlags);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     if (!pwalletMain->CommitTransaction(wtx, keyChange))\n@@ -2449,10 +2459,10 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"changePosition out of bounds\");\n \n     CMutableTransaction tx(origTx);\n-    CAmount nFeeOut;\n+    CAmount nFeeOut = 0;\n+    CReserveKey reservekey(pwalletMain);\n     string strFailReason;\n-\n-    if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, changeAddress))\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, changeAddress))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);\n@@ -2463,6 +2473,107 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"  (string, required) The transaction id\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee the resulting transaction pays\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+\n+    // get the transaction\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // ownly bump the fee if the transation signals opt-in-RBF after BIP125\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction can't be replaced\");\n+\n+    // get the old fee to allow oldfee+newfee\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nFee = nOldFee; //set the old fee as the base fee\n+\n+    CMutableTransaction tx(wtx);\n+    // remove scriptSigs, the signatures are invalid after mutating the transaction\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        (*it).scriptSig = CScript();\n+    }\n+\n+    // remove \"old\" change outputs\n+    for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n+    {\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+            it = tx.vout.erase(it);\n+        else\n+            ++it;\n+    }\n+\n+    string strFailReason;\n+    int nChangePos = -1;\n+\n+    // re-fund the transaction, a new change output will be added\n+    CReserveKey reservekey(pwalletMain);\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, false, CFeeRate(0), nChangePos, strFailReason, false, false))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+\n+    // sign the new transaction\n+    int nIn = 0;\n+    CTransaction txNewConst(tx);\n+    bool txSignSuccess = false;\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n+    {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size()))\n+        {\n+            // get the scriptPubKey of the prevout\n+            const CScript& scriptPubKey = (*mi).second.vout[(*it).prevout.n].scriptPubKey;\n+\n+            CScript& scriptSigRes = tx.vin[nIn].scriptSig; //reference to the CMutableTx scriptSig\n+            txSignSuccess = ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes);\n+\n+            if (!txSignSuccess)\n+                break;\n+        }\n+        nIn++;\n+    }\n+\n+    if (!txSignSuccess)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+\n+    // commit/broadcast the transaction\n+    CWalletTx wtxBumped(pwalletMain,tx);\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! Did you already bump the fee for this transaction?\");\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n+    result.push_back(Pair(\"oldfee\", ValueFromAmount(nOldFee)));\n+    result.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+\n+    return result;\n+}\n+\n extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n extern UniValue importprivkey(const UniValue& params, bool fHelp);\n extern UniValue importaddress(const UniValue& params, bool fHelp);\n@@ -2480,6 +2591,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"abandontransaction\",       &abandontransaction,       false },\n     { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true  },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             true  },\n+    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  true  },\n     { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true  },\n     { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true  },\n     { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true  },"
      }
    ]
  },
  {
    "sha": "72812f709cf567ce78a65ce1e10378e973610dbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjgxMmY3MDljZjU2N2NlNzhhNjVjZTFlMTAzNzhlOTczNjEwZGJk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T13:34:25Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T13:52:59Z"
      },
      "message": "[RPC] Fix createrawtx sequence number unsigned int parsing",
      "tree": {
        "sha": "108bbaadcb7746fd4bb294f8031b3aa0738c8948",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/108bbaadcb7746fd4bb294f8031b3aa0738c8948"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72812f709cf567ce78a65ce1e10378e973610dbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWCM7AAoJECnUvLZBb1PsCY8QAK7AfLprf/uPt6YRpZeZsv/7\nP+3C2pAZtYWepRr6IVdSEEC4q9TUukoqBHnQ68+NLuH/CK0Lqr/1refEf+U0MDzf\nv9roE6MOIhbTV712/81YRxjp//VkNlpkd8330oMfAvysmtvm1J45R1gyVWXlp+KE\nxIVnjXCFftOfa2d/nW8imtJ4sOoZDAeRv5KxG3m0Ae3f2CwJgQSnOPl1/Xm75QPT\nNTBLDlqzfcHJsKWOuxQdymEBMsDJ+sHTYq526ToF2soDTvGRguyfyFRNXU4lOeFn\njsUZjTegVYlBFqMDXIeMIwyZ5ZOrEI4hbo0U5faybcAHYGnwGPU8+GT9g1ta+sdF\nCAIa1w6iWEGhuf9FP9C1hP4+hLX+KxTa01w1lgE82NXjh74i4SPDUTUmRbOcf/qv\ndPjTkBY+BxGsosjaghMp8ALLgF2GR4VQBT0QocXTtzg1zBsWqhia6TAX4aiooI1B\n0lKS+NCZx+GP74//mmx78PU1ZkTw87CxsXHaWqyiF/qPsUd3yh5484iUEQ7glr/p\nmH4dttb92uuncW4R8mgfSS4qm9ZBBu4edvJwVNXuyu+J3ToKfhefA+pKNYvo2bky\nDI7m5kKAjzsmrfOAJCCJisARtN8tz0aems0Olz8nqPChJXe6rkYFmFWtK+gNvEtm\nXS9f3A1shxIoIbApIfnt\n=CyBk\n-----END PGP SIGNATURE-----",
        "payload": "tree 108bbaadcb7746fd4bb294f8031b3aa0738c8948\nparent 3f2d37410e72d236fdc0a08c9602b05456268328\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1465392865 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1465393979 +0200\n\n[RPC] Fix createrawtx sequence number unsigned int parsing\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72812f709cf567ce78a65ce1e10378e973610dbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72812f709cf567ce78a65ce1e10378e973610dbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72812f709cf567ce78a65ce1e10378e973610dbd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f2d37410e72d236fdc0a08c9602b05456268328",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f2d37410e72d236fdc0a08c9602b05456268328",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f2d37410e72d236fdc0a08c9602b05456268328"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ab6d2e8def14891f25d607f8214540cd5263d47c",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72812f709cf567ce78a65ce1e10378e973610dbd/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72812f709cf567ce78a65ce1e10378e973610dbd/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=72812f709cf567ce78a65ce1e10378e973610dbd",
        "patch": "@@ -143,6 +143,20 @@ def run_test(self):\n         rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n         decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n         assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n+        \n+        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n+        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        \n+        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n+        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        assert_raises(JSONRPCException, self.nodes[0].createrawtransaction, inputs, outputs)\n+        \n+        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n+        outputs = { self.nodes[0].getnewaddress() : 1 }\n+        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n+        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n+        assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      },
      {
        "sha": "2c51accd1e70bdb141a6214962708b21e0ccaa81",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72812f709cf567ce78a65ce1e10378e973610dbd/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72812f709cf567ce78a65ce1e10378e973610dbd/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=72812f709cf567ce78a65ce1e10378e973610dbd",
        "patch": "@@ -388,8 +388,13 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n \n         // set the sequence number if passed in the parameters object\n         const UniValue& sequenceObj = find_value(o, \"sequence\");\n-        if (sequenceObj.isNum())\n-            nSequence = sequenceObj.get_int();\n+        if (sequenceObj.isNum()) {\n+            int64_t seqNr64 = sequenceObj.get_int64();\n+            if (seqNr64 < 0 || seqNr64 > std::numeric_limits<uint32_t>::max())\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, sequence number is out of range\");\n+            else\n+                nSequence = (uint32_t)seqNr64;\n+        }\n \n         CTxIn in(COutPoint(txid, nOutput), CScript(), nSequence);\n "
      }
    ]
  },
  {
    "sha": "4bbf2cf0b39d7d1a380403dfe298c4a7e9559614",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmJmMmNmMGIzOWQ3ZDFhMzgwNDAzZGZlMjk4YzRhN2U5NTU5NjE0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T16:15:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T16:15:50Z"
      },
      "message": "[RPC] use fundrawtransactions feerate option for the bumpfee command",
      "tree": {
        "sha": "ca901519a8954784d29a3624c9bff2e47bf0a332",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca901519a8954784d29a3624c9bff2e47bf0a332"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bbf2cf0b39d7d1a380403dfe298c4a7e9559614",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWETIAAoJECnUvLZBb1PsH5kQALEYWsmriLO1akAOueYJE8u3\nVhIDiY9JGXelHZjfiGBQzJ9LICUMFeNOC9zOYJSS9I/T2V39pzt7An3XGDbeRXwq\nCEfRheaESDs9O2CkXWbVgygLoCuXIFJyLVHMrpIJhC5AwXBU3bRR2xnMTOAs9f+m\nNwMpPJbnMDO/ADS/eO+t+KlmHHGx9AIEbrZ/r49BUFIARnzkFIc+VrTr5e7Fu7xK\nKcslNNrAZdFpFhnsqdnl9cc2QQpxpH07BIXmfeb1AxDSXQsuxo9jY4EsTcRExq+D\nRkq4ZoSpG7mKZ18+MTmzes9Y9rCpy0MSmhNHAv0/PSA5pAF1sMCQmBoWWvQpylDI\noD330emZdvXXoVbbkRBj6CP3gMALdM97tcQFDtBPHS/56T4iaMAdNkitoMKRA4ak\n7aZEIpqRxaTuj5d+aTg6JbzWqYrX+/AwQ1p/P5Yv4bpOA4vthVEQLklZpGWW6AhE\na8ZbnQhDpyotOagUCCnRm5DuN7s/OfDeQDoG17aWlBeloEKOpZCPSEv0ZdHt636I\n+B7O3JSZxaxfcuVen7e0h5M8H8VOQWfCgdVmX3Tvi8NZHuI5lYdNU0O18zwcSKQx\nPt6f4UVMaGjCz3wH68a1xpyLxNo3YX2vRsW2t4mg0xQk5ljj66xkyQuYr+La5tdY\n9LSNW+oO0beTlGWrA/8n\n=of2I\n-----END PGP SIGNATURE-----",
        "payload": "tree ca901519a8954784d29a3624c9bff2e47bf0a332\nparent 72812f709cf567ce78a65ce1e10378e973610dbd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1465402550 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1465402550 +0200\n\n[RPC] use fundrawtransactions feerate option for the bumpfee command\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bbf2cf0b39d7d1a380403dfe298c4a7e9559614",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bbf2cf0b39d7d1a380403dfe298c4a7e9559614",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bbf2cf0b39d7d1a380403dfe298c4a7e9559614/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72812f709cf567ce78a65ce1e10378e973610dbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72812f709cf567ce78a65ce1e10378e973610dbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72812f709cf567ce78a65ce1e10378e973610dbd"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f5375d0784be6d5332f7e166aca44e6e56f79aca",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bbf2cf0b39d7d1a380403dfe298c4a7e9559614/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bbf2cf0b39d7d1a380403dfe298c4a7e9559614/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4bbf2cf0b39d7d1a380403dfe298c4a7e9559614",
        "patch": "@@ -2511,7 +2511,8 @@ UniValue bumpfee(const UniValue& params, bool fHelp)\n     // get the old fee to allow oldfee+newfee\n     CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n     CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n-    CAmount nFee = nOldFee; //set the old fee as the base fee\n+    CFeeRate oldFeeRate(nOldFee, (int)::GetSerializeSize(wtx, SER_NETWORK, PROTOCOL_VERSION));\n+    CAmount nFee = 0;\n \n     CMutableTransaction tx(wtx);\n     // remove scriptSigs, the signatures are invalid after mutating the transaction\n@@ -2532,9 +2533,12 @@ UniValue bumpfee(const UniValue& params, bool fHelp)\n     string strFailReason;\n     int nChangePos = -1;\n \n+    // increase fee rate\n+    CFeeRate newFeeRate = CFeeRate(oldFeeRate.GetFeePerK()*1.5);\n+\n     // re-fund the transaction, a new change output will be added\n     CReserveKey reservekey(pwalletMain);\n-    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, false, CFeeRate(0), nChangePos, strFailReason, false, false))\n+    if(!pwalletMain->FundTransaction(tx, reservekey, nFee, true, newFeeRate, nChangePos, strFailReason, false, false))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     // sign the new transaction"
      }
    ]
  },
  {
    "sha": "ce3978628ee2458f3e65a80457cd44d50d4d461a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTM5Nzg2MjhlZTI0NThmM2U2NWE4MDQ1N2NkNDRkNTBkNGQ0NjFh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T16:26:15Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T16:26:15Z"
      },
      "message": "[SquashMe] remove initial fee for createrawtransaction 291e7823bd912a5e83316d9194f98e76f78690d1",
      "tree": {
        "sha": "e8ca53548abaa3a1daae00da01e0a56f0d8627ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8ca53548abaa3a1daae00da01e0a56f0d8627ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce3978628ee2458f3e65a80457cd44d50d4d461a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWEc7AAoJECnUvLZBb1PsCmkP/0VGO1lWacSxtL21l0jRt9KD\n9sbo3UuxHNX1B9UVXFJTCfIZzkI6rt6J+pfu9Ve61cHPb0uy2KIzfA/K7kQLIwWO\nAexWV/e+XPH3cdEyPeM7mPyNIevX3Z+S2z+OMEfgmrVbLh+byObxJa7GSS6J2Luh\nYV5+ZsjuEnAlHuM9GtotHzJCE1AOAEbgOEfksCJouyL/tpxYdzP8VthjtFreePXP\n8QyPUF5MmSW/zpkzUUsPziCVqGDPzFsAjKAEq7zAx+qGPIF2j/nhjVTDcyiy9jba\nrnCIO0irMArxAQAG9VoNC3vUi31Kj+AzzN+B4ewsKuvlzxjWcGOa0rLr1V4aqpFP\n2uY5XkmLz3IOAwKcpp/0HwSq64KaBIS0gML+ntXUBmoSSprasmAH9fWjFGZlIJ+I\nDt7hOcOx4hz6AuaVNssHQ++LP5YZBjFtOTxtX9srrG4kdjSgXDe9caezohCba7e4\nYCQjU34Bo7cnoxBkSUAKgTTXlP2j2HcMZYnx0MxDPRaOUwLGmSXnf9Nt5gdiv57L\nawdA+IAAtDiEdeqWPCybP1cN8ZRcmI7+7J8VGSqwgR+NiARm0Oe/Fc9OROVQvDHO\njczPNeDQV+OgqxHkFeVemmPf/GmdGcOwKYfHtDTCC9t2ui3my9M25qAaBpamebhJ\nBlYTDp9842bq9kDImniP\n=cK5u\n-----END PGP SIGNATURE-----",
        "payload": "tree e8ca53548abaa3a1daae00da01e0a56f0d8627ba\nparent 4bbf2cf0b39d7d1a380403dfe298c4a7e9559614\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1465403175 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1465403175 +0200\n\n[SquashMe] remove initial fee for createrawtransaction 291e7823bd912a5e83316d9194f98e76f78690d1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce3978628ee2458f3e65a80457cd44d50d4d461a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce3978628ee2458f3e65a80457cd44d50d4d461a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce3978628ee2458f3e65a80457cd44d50d4d461a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4bbf2cf0b39d7d1a380403dfe298c4a7e9559614",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bbf2cf0b39d7d1a380403dfe298c4a7e9559614",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bbf2cf0b39d7d1a380403dfe298c4a7e9559614"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 16,
      "deletions": 15
    },
    "files": [
      {
        "sha": "bb92840e2a5911792267b2fffdf4a8e60f44d060",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce3978628ee2458f3e65a80457cd44d50d4d461a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce3978628ee2458f3e65a80457cd44d50d4d461a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ce3978628ee2458f3e65a80457cd44d50d4d461a",
        "patch": "@@ -1981,7 +1981,7 @@ bool CWallet::SelectCoins(const vector<COutput>& vAvailableCoins, const CAmount&\n     return res;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CReserveKey& reservekeyOut, CAmount& nFeeInOut, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CReserveKey& reservekeyOut, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange)\n {\n     vector<CRecipient> vecSend;\n \n@@ -2003,7 +2003,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CReserveKey& reservekeyOu\n         coinControl.Select(txin.prevout);\n \n     CWalletTx wtx;\n-    if (!CreateTransaction(vecSend, wtx, reservekeyOut, nFeeInOut, nChangePosInOut, strFailReason, &coinControl, CREATE_TX_DONT_SIGN))\n+    if (!CreateTransaction(vecSend, wtx, reservekeyOut, nFeeRet, nChangePosInOut, strFailReason, &coinControl, CREATE_TX_DONT_SIGN))\n         return false;\n \n     if (nChangePosInOut != -1)\n@@ -2027,13 +2027,11 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CReserveKey& reservekeyOu\n     return true;\n }\n \n-bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeInOut,\n+bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n                                 int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, unsigned int flags)\n {\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;\n-    // store the fee input value for adding it to the calculated fee later\n-    CAmount addToFee = nFeeInOut;\n     unsigned int nSubtractFeeFromAmount = 0;\n     BOOST_FOREACH (const CRecipient& recipient, vecSend)\n     {\n@@ -2095,6 +2093,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(vAvailableCoins, true, coinControl);\n \n+            nFeeRet = 0;\n+            // Start with no fee and loop until there is enough fee\n+\n             while (true)\n             {\n                 nChangePosInOut = nChangePosRequest;\n@@ -2105,7 +2106,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 CAmount nValueToSelect = nValue;\n                 if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeInOut; //add the required fee to the amount-to-select\n+                    nValueToSelect += nFeeRet; //add the required fee to the amount-to-select\n                 double dPriority = 0;\n                 // vouts to the payees\n                 BOOST_FOREACH (const CRecipient& recipient, vecSend)\n@@ -2114,18 +2115,18 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                     if (recipient.fSubtractFeeFromAmount)\n                     {\n-                        txout.nValue -= nFeeInOut / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n+                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient\n \n                         if (fFirst) // first receiver pays the remainder not divisible by output count\n                         {\n                             fFirst = false;\n-                            txout.nValue -= nFeeInOut % nSubtractFeeFromAmount;\n+                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n                         }\n                     }\n \n                     if (txout.IsDust(::minRelayTxFee))\n                     {\n-                        if (recipient.fSubtractFeeFromAmount && nFeeInOut > 0)\n+                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n                             if (txout.nValue < 0)\n                                 strFailReason = _(\"The transaction amount is too small to pay the fee\");\n@@ -2221,7 +2222,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     if (newTxOut.IsDust(::minRelayTxFee))\n                     {\n                         nChangePosInOut = -1;\n-                        nFeeInOut += nChange;\n+                        nFeeRet += nChange;\n                         reservekey.ReturnKey();\n                     }\n                     else\n@@ -2303,7 +2304,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                         break;\n                 }\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool)+addToFee;\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n                 }\n@@ -2318,11 +2319,11 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     return false;\n                 }\n \n-                if (nFeeInOut >= nFeeNeeded)\n+                if (nFeeRet >= nFeeNeeded)\n                     break; // Done, enough fee included.\n \n                 // Include more fee and try again.\n-                nFeeInOut = nFeeNeeded;\n+                nFeeRet = nFeeNeeded;\n                 continue;\n             }\n         }"
      },
      {
        "sha": "d2a77963a277819b37758b31a85bbef256989cd1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce3978628ee2458f3e65a80457cd44d50d4d461a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce3978628ee2458f3e65a80457cd44d50d4d461a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ce3978628ee2458f3e65a80457cd44d50d4d461a",
        "patch": "@@ -745,14 +745,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CReserveKey& reservekeyOut, CAmount& nFeeInOut, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CReserveKey& reservekeyOut, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const CTxDestination& destChange = CNoDestination());\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n      * selected by SelectCoins(); Also create the change output, when needed\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeInOut, int& nChangePosInOut, std::string& strFailReason, const CCoinControl *coinControl = NULL, unsigned int flags = CREATE_TX_DEFAULT);\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, const CCoinControl *coinControl = NULL, unsigned int flags = CREATE_TX_DEFAULT);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n \n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB & pwalletdb);"
      }
    ]
  },
  {
    "sha": "1a2339c2e500687163ccf0db81a28263b073cbec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTIzMzljMmU1MDA2ODcxNjNjY2YwZGI4MWEyODI2M2IwNzNjYmVj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T19:54:10Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-06-08T19:54:10Z"
      },
      "message": "[SquashMe] overhaul bumpfee",
      "tree": {
        "sha": "2df2150d591fdb82f391006960eb9de89c1ab169",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2df2150d591fdb82f391006960eb9de89c1ab169"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a2339c2e500687163ccf0db81a28263b073cbec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWHfuAAoJECnUvLZBb1PslvkP/RlL55t4wzTksxcxhFPTYaI3\nB8+SV6vM/UQVyxs1j+C7JaFhO6KC93snMZRC+nYjCfXYuWzKNp8UMsY1Tr0Qe+KD\nAE3YB5nUfP1Bd6svEcWJlP9a0Qrz/YFODyCZuHhZcAeUpIBApjOXmfq9jZYXHLZa\noQS5oHU4oXKsJyLlokE6VLjRlsOwSWjeJLD2iT6n2td/Lt9p+/8IuB8EqwfB8EFG\ncpjsX70r0SMAwU/4DcHtpLJcNv0mw0rVl+m947HvFm6m4lJsmmEIL4ILA8RLEPJ4\nSRFREClk7KtECyrtKJ0nUpt3/SppyuuMiaaEdh4XDjqnBRK9AnbNIjQfxEZwLqjY\nFymEh3qlrJUMWWrVEKzmwxWJpeuWpaAPvbZwwXdwJlMGwUW53vWrtdMgD6OLcCWX\ntPwmk72ldsa9auJlhB7tlM2u97LsXcUySaEH9N6YDws77MFxs7lvDM81f+StRIIl\nPeJWTLnn1c3BzOAtGg8bCLkDC6AvdWW/Iuusifge9nEJ2C+PlhjBJ/NxFNfGy30C\nCoaKixdakXscu7ZZDbM14xzHHB0LF6wzbzCGHWfOR62eX9137GPn3eo9UIo+lWwl\n1vVGhzGw5JWYXay/85VxdI+/HY0rYl/02d4ckqUxym2Ho9TCddjt9aCl64ksQJ2A\nyjfbsPLyGcZUbn9nPfob\n=Xfgx\n-----END PGP SIGNATURE-----",
        "payload": "tree 2df2150d591fdb82f391006960eb9de89c1ab169\nparent ce3978628ee2458f3e65a80457cd44d50d4d461a\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1465415650 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1465415650 +0200\n\n[SquashMe] overhaul bumpfee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a2339c2e500687163ccf0db81a28263b073cbec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a2339c2e500687163ccf0db81a28263b073cbec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a2339c2e500687163ccf0db81a28263b073cbec/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce3978628ee2458f3e65a80457cd44d50d4d461a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce3978628ee2458f3e65a80457cd44d50d4d461a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce3978628ee2458f3e65a80457cd44d50d4d461a"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 20,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8db6c0eb7bd0ba4efd7e71bbe2e475c3ca75877f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a2339c2e500687163ccf0db81a28263b073cbec/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a2339c2e500687163ccf0db81a28263b073cbec/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1a2339c2e500687163ccf0db81a28263b073cbec",
        "patch": "@@ -2511,30 +2511,42 @@ UniValue bumpfee(const UniValue& params, bool fHelp)\n     // get the old fee to allow oldfee+newfee\n     CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n     CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n-    CFeeRate oldFeeRate(nOldFee, (int)::GetSerializeSize(wtx, SER_NETWORK, PROTOCOL_VERSION));\n+    CFeeRate oldFeeRate(nOldFee, (int)::GetSerializeSize((CTransaction)wtx, SER_NETWORK, PROTOCOL_VERSION));\n     CAmount nFee = 0;\n \n     CMutableTransaction tx(wtx);\n     // remove scriptSigs, the signatures are invalid after mutating the transaction\n-    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it)\n-    {\n+    for (std::vector<CTxIn>::iterator it(tx.vin.begin()); it != tx.vin.end(); ++it) {\n         (*it).scriptSig = CScript();\n     }\n \n     // remove \"old\" change outputs\n     for (std::vector<CTxOut>::iterator it(tx.vout.begin()); it != tx.vout.end();)\n     {\n-        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE)\n+        // only remove IsMine outputs that are not in the address book (only change)\n+        CTxDestination address;\n+        if (pwalletMain->IsMine(*it) == ISMINE_SPENDABLE && (!ExtractDestination((*it).scriptPubKey, address) || !pwalletMain->mapAddressBook.count(address))) {\n             it = tx.vout.erase(it);\n-        else\n+        }\n+        else {\n             ++it;\n+        }\n     }\n \n     string strFailReason;\n     int nChangePos = -1;\n \n-    // increase fee rate\n-    CFeeRate newFeeRate = CFeeRate(oldFeeRate.GetFeePerK()*1.5);\n+    // double fee rate\n+    int estimateFoundTarget = nTxConfirmTarget;\n+    CFeeRate newFeeRate = mempool.estimateSmartFee(nTxConfirmTarget, &estimateFoundTarget);\n+    // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee\n+    if (newFeeRate.GetFeePerK() == 0)\n+        newFeeRate = CWallet::fallbackFee;\n+\n+    if (newFeeRate.GetFeePerK() < oldFeeRate.GetFeePerK()+::minRelayTxFee.GetFeePerK())\n+        newFeeRate = CFeeRate(oldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    //CFeeRate newFeeRate = CFeeRate(oldFeeRate.GetFeePerK()*2);\n \n     // re-fund the transaction, a new change output will be added\n     CReserveKey reservekey(pwalletMain);"
      },
      {
        "sha": "1f6fb2125a6a0f6d6d500ddff68b581fd5416178",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a2339c2e500687163ccf0db81a28263b073cbec/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a2339c2e500687163ccf0db81a28263b073cbec/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1a2339c2e500687163ccf0db81a28263b073cbec",
        "patch": "@@ -2095,7 +2095,6 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n             nFeeRet = 0;\n             // Start with no fee and loop until there is enough fee\n-\n             while (true)\n             {\n                 nChangePosInOut = nChangePosRequest;\n@@ -2106,7 +2105,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 CAmount nValueToSelect = nValue;\n                 if (nSubtractFeeFromAmount == 0)\n-                    nValueToSelect += nFeeRet; //add the required fee to the amount-to-select\n+                    nValueToSelect += nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n                 BOOST_FOREACH (const CRecipient& recipient, vecSend)"
      }
    ]
  }
]