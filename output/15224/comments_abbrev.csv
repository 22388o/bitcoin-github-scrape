hebasto,2019-01-21T21:53:59Z,"Is there a rationale for values ""10ms"" and ""1000 iterations""?",https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-456208491,456208491,
sipa,2019-01-21T22:02:17Z,"@hebasto Sort of. \n\n10ms as it's a amount that shouldn't cause any measurable latency in the background thread (where generally things run that aren't very time critical anyway).\n\n1000 seems a nice trade-off between time spent on getting the time, and getting entropy out. If we'd get the clock every iteration, we'd be spending more time in reading the clock than actually strenghtening anyt",https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-456209996,456209996,
hebasto,2019-01-21T22:10:01Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-456211432,456211432,
practicalswift,2019-01-22T09:53:02Z,@sipa What would be the appropriate way to test/measure the improvement this change brings?,https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-456337701,456337701,
gmaxwell,2019-01-24T19:08:33Z,"I'd still prefer to see this using 4x SHA256^2-64b since that function has a much better ratio of current performance to attacker performance, but I grok the startup time interactions with function auto-detection make that messy.  I'm okay with using sha512 for now in light of that!",https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-457318515,457318515,
gmaxwell,2019-01-25T00:25:52Z,"We should contemplate increasing the strenghtening time on the first run. Rationale: usually long term private keys will get generated within one minute of first startup when only the startup strengthening will have applied. Adding an extra 90ms on startup won't be significantly noticeable on top of the existing startup time, and would increase resistance to search by 10x.  Alternative: Once we've",https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-457409575,457409575,
sipa,2019-05-03T23:02:19Z,"Adressed @Empact's nits, and made the first strengthening run 100ms long. Also fixed a bug where it would run every 60 ms instead of every minute...",https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-489265685,489265685,
gmaxwell,2019-05-06T00:39:34Z,utACK,https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-489477569,489477569,
pstratem,2019-05-18T00:50:12Z,utACK 3cb9ce85d0c6d01217babf0df7efc2eabde1b12f,https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-493635338,493635338,
MarcoFalke,2019-05-20T15:50:32Z,"Just wanted to note that the unit tests run 10% slower due to this:\n\nhttps://codespeed.bitcoinperf.com/timeline/?exe=3%2C4%2C2%2C1&base=1%2B23&ben=makecheck.clang.3&env=1&revs=10&equid=off&quarts=on&extr=on",https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-494044928,494044928,
sipa,2019-05-20T23:33:14Z,"@MarcoFalke Interesting. Is that considered too much? We could disable the strengthening time, or make it configurable... though at the cost of some complexity (the RNG may be used before command line options are parsed...)",https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-494186004,494186004,
MarcoFalke,2019-05-21T11:13:28Z,Not really. Just mentioned because it might be interesting to some.,https://github.com/bitcoin/bitcoin/pull/15224#issuecomment-494347773,494347773,
laanwj,2019-01-22T11:21:00Z,"Moving `shutdown.cpp` to util might not be a good choice, architecturally: it's shared between *all* executables, by far most of which don't use bitcond's init/shutdown mechanism. It's meant for general-purpose utilities.\n\n`server` would be the right place, it's really part of the server functionality (shared between `bitcoind` and `bitcoin-qt` and unit testsâ€¦).",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r249739237,249739237,src/Makefile.am
Sjors,2019-01-23T12:30:26Z,Initialize?,https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250174983,250174983,src/random.cpp
Sjors,2019-01-23T12:44:27Z,"Nit: might be slightly more readable to rename `buf` to `strengthener_seed`, or expand the comment with "", to seed the strengthener.""",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250178909,250178909,src/random.cpp
sipa,2019-01-23T18:53:52Z,"@laanwj Unfortunately, I can't move random to server, because rpc/protocol is in util and depends on random.\n\nI think I'll just leave the 10ms strengthening uninterruptible instead?",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250326564,250326564,src/Makefile.am
sipa,2019-01-23T19:21:30Z,"Static variables are always auto-initialized to zero, but for clarity, I've added an explicit zero.",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250337305,250337305,src/random.cpp
sipa,2019-01-23T19:21:38Z,Done.,https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250337346,250337346,src/random.cpp
Sjors,2019-01-23T21:55:12Z,I can wait 10ms,https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250387609,250387609,src/Makefile.am
gmaxwell,2019-01-24T19:06:20Z,"Unless I'm misunderstanding it, the data collected by SeedStartup doesn't get strengthened in the first run of the strenghtener. This seems pretty suboptimal since SeedStartup is the obvious place to go get most of the weak pseudo-entropy (like filesystem data, network interface data, etc.) which is the stuff that most benefits from strengthening.",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250738238,250738238,src/random.cpp
sipa,2019-01-24T19:55:52Z,"Good point, fixed.\n\nIt now extracts using the hasher state combined with the RNG.\n\nSo overall what happens in SeedStartup is:\n* Gather entropy using SeedSlow/RandAddSeedPerfmon, in a hasher `E`. `E = SeedStuff()`\n* Mix E together with the (in this case empty RNG state `R0`), and split the result in a seed and the new RNG state, so `[S,R1] = SHA512(E || R0)`\n* `S` gets strengthened, `",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250755345,250755345,src/random.cpp
Empact,2019-01-25T01:15:53Z,nit: `sizeof(strengthen_seed)` would avoid the duplication here.,https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250837320,250837320,src/random.cpp
Empact,2019-01-25T01:17:49Z,"nit: passing in seed32's length could be less error prone, in that the function would make fewer assumptions about the arguments / have fewer preconditions for them. Could be good to document the size precondition in the comment as an alternative.",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r250837656,250837656,src/random.cpp
sipa,2019-05-03T22:55:29Z,"Fixed by using the C++11 ""pass a reference to array of fixed size"" construction (which will cause a compilation failure of the array has the wrong length).",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r280951123,280951123,src/random.cpp
sipa,2019-05-03T23:01:43Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/15224#discussion_r280951955,280951955,src/random.cpp
promag,2019-05-06T17:41:19Z,nit `const int64_t stop = GetTimeMicros() + microseconds;`,https://github.com/bitcoin/bitcoin/pull/15224#discussion_r281285008,281285008,src/random.cpp
promag,2019-05-06T17:44:24Z,"Can you explain why ""try""?",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r281286094,281286094,src/random.cpp
sipa,2019-05-06T22:13:09Z,"The C++ language has no way of guaranteeing memory gets cleaned up (it may have copied it elsewhere in memory, for starters, or detect that the clearing has no observable effect and optimize it away).",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r281383333,281383333,src/random.cpp
sipa,2019-05-06T22:22:23Z,"Nice, done.",https://github.com/bitcoin/bitcoin/pull/15224#discussion_r281385641,281385641,src/random.cpp
