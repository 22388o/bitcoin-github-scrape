MarcoFalke,2018-03-29T15:47:44Z,"TODO:\n\n* [x] Should be run on `make check`",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-377279610,377279610,
practicalswift,2018-03-29T17:11:19Z,"Concept ACK\n\nVery nice!",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-377305854,377305854,
practicalswift,2018-03-29T17:13:03Z,Perhaps a stupid question but why the need of a static `test_list.txt`? What would be the disadvantages of generating the test list at run-time?,https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-377306416,377306416,
MarcoFalke,2018-03-29T17:28:05Z,"`--list_content` is only documented in 1.60.0, so I assume it wouldn't work in previous versions. Currently we support 1.47.0+\n\nhttp://www.boost.org/doc/libs/1_60_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/list_content.html\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md#dependencies",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-377311124,377311124,
practicalswift,2018-03-29T20:30:31Z,"@MarcoFalke The output from `git grep -E '(BOOST_FIXTURE_TEST_SUITE|BOOST_AUTO_TEST_CASE)' -- ""src/**.cpp""` could perhaps be used to quickly (~14 ms on my machine) generate the list of available tests?",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-377362816,377362816,
practicalswift,2018-03-29T20:39:18Z,"If we go with the static text file `test_list.txt` I suggest adding a script `contrib/devtools/lint-test_list.sh` which checks that the list of tests in `test_list.txt` is in sync with the list of tests given by `src/test/test_bitcoin --list_content`.\n\nThat way Travis would automatically catch the case where someone adds a test and forgets to manually run `src/test/parallel.py --write_list` (w",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-377365128,377365128,
conscott,2018-03-30T06:21:41Z,Concept ACK - Tested it out and left some initial feedback. Realize it's WIP so just left broad comments. ,https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-377455800,377455800,
MarcoFalke,2018-04-01T22:21:44Z,"Thanks for looking at this! I kept the patches to the gtest-parallel script minimal. Feedback not about my patches should be submitted upstream: https://github.com/google/gtest-parallel\n\nAlso, if someone knows more about autotools, help is very much appreciated to make it run on `make check`.",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-377821283,377821283,
MarcoFalke,2018-04-05T15:26:48Z,@theuni Mind to give a Concept ACK/NACK or some general comments?,https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-378975587,378975587,
sipa,2018-04-05T15:44:23Z,"I have an idea for a simpler approach, where you could tell the test binary there are N processes, and which one out of those it is. It would then partition the tests randomly into N groups, and only run one of them.\n\nIf there's interest, I'll try to implement that soon.",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-378981463,378981463,
MarcoFalke,2018-04-05T15:56:35Z,@sipa That wouldn't help running the most time-expensive test first or avoiding that two expensive tests end up in the same group?,https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-378985616,378985616,
sipa,2018-04-05T16:15:16Z,"@MarcoFalke No, but I think that's an independent problem. If some tests take exorbitantly more time than others, perhaps those tests need to be split up.",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-378991820,378991820,
MarcoFalke,2018-04-05T16:52:25Z,"See #10026 for an (outdated) list of slow unit tests. I haven't checked how practical it is to split them up, but there will always be tests that run slower compared to others.",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-379003069,379003069,
MarcoFalke,2018-04-05T17:20:28Z,"The currently longest running test on my machine seems to be ""test_big_witness_transaction"":\n\n```\n$ python3 ./src/test/parallel.py | tail -3\n[285/287] streams_tests/streams_serializedata_xor (47 ms)\n[286/287] coinselector_tests/knapsack_solver_test (12060 ms)\n[287/287] transaction_tests/test_big_witness_transaction (17931 ms)",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-379011508,379011508,
MarcoFalke,2018-04-05T19:58:42Z,"* Got rid of test_list.txt\n* Run test suites in parallel instead of test cases",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-379058185,379058185,
practicalswift,2018-04-05T20:07:23Z,"Repeating concept ACK\n\nAutomatic linting comment: `transform_boost_output_to_test_list` is unused now? :-)",https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-379060530,379060530,
practicalswift,2018-04-09T21:53:09Z,NACK. Prefering #12926 :-),https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-379905694,379905694,
MarcoFalke,2018-04-10T16:08:40Z,Rebased,https://github.com/bitcoin/bitcoin/pull/12831#issuecomment-380157612,380157612,
conscott,2018-03-30T05:08:48Z,Should be `python3`ï¿¼?,https://github.com/bitcoin/bitcoin/pull/12831#discussion_r178233629,178233629,src/test/parallel.py
conscott,2018-03-30T05:24:29Z,"This seems to be fine in python 2.7 but is a problem in 3.x\n```\nValueError: can't have unbuffered text I/O\n```\nThe 0 buffer is only valid for byte streams in python 3, from docs the default buffer policy for interactive text files is line buffering, which is probably fine. ",https://github.com/bitcoin/bitcoin/pull/12831#discussion_r178234706,178234706,src/test/parallel.py
conscott,2018-03-30T05:41:18Z,"not sure why abc/ is appended to path. Getting error:\n```\nTest setup error: no test cases matching filter\n```\nRemoving abc/ lets tests run and pass. ",https://github.com/bitcoin/bitcoin/pull/12831#discussion_r178235787,178235787,src/test/test_list.txt
conscott,2018-03-30T05:47:40Z,"This also poses an interesting problem. If the test case isn't found, its listed as `FAILED TESTS`, which is somewhat confusing, because `bech32_tests/bip173_testvectors_valid` would pass, it's just the path listed is wrong. \n\nMaybe the initial reader of `FILE_TEST_LIST` can verify the path exists before handing it off to workers. ",https://github.com/bitcoin/bitcoin/pull/12831#discussion_r178236227,178236227,src/test/test_list.txt
conscott,2018-03-30T05:52:47Z,"Nit: if you are going to verify the input is valid, you can check some other fields as well\n\nRight now you could input a negative for `workers`, `repeat`, `timeout`, etc. without complaint",https://github.com/bitcoin/bitcoin/pull/12831#discussion_r178236641,178236641,src/test/parallel.py
conscott,2018-03-30T06:01:30Z,"Not sure it makes sense to give `shard_index` a default. I think you want to ensure that `shard_count` and `shard_index` are used in combination, so if `shard_count` is used and `options.shard_index` is `None`,  you print proper usage. Right now `options.shard_index` will just default to 0, so you can't tell if it's being used properly with `shard_count`. ",https://github.com/bitcoin/bitcoin/pull/12831#discussion_r178237305,178237305,src/test/parallel.py
conscott,2018-03-30T06:15:14Z,"Should this be `split('/')[0]` ?\n\nRight now `task.test_name` is a line from `src/test/test_list.txt` like \n```\nbloom_tests/rolling_bloom\n```\nSo the split will always return that full path, since there is no `.` - making `option.serialize_test_cases` just run everything in parallel anyway. ",https://github.com/bitcoin/bitcoin/pull/12831#discussion_r178238524,178238524,src/test/parallel.py
conscott,2018-03-30T06:19:11Z,"I think this option is currently incompatible with sharding, since it shards tests in a round-robin type fashion, thus splitting up test_groups between shards. This is probably desired, but just need to document it, or try to prevent the two options being used in combination.",https://github.com/bitcoin/bitcoin/pull/12831#discussion_r178238820,178238820,src/test/parallel.py
