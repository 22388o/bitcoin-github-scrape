emilengler,2019-09-18 18:41:07,"Concep ACK,\nchrono is definitely better for time managment",https://github.com/bitcoin/bitcoin/pull/16908#issuecomment-532814046,532814046,
DrahtBot,2019-09-18 20:11:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16851](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16851.html) (Continue relaying transactions after they e",https://github.com/bitcoin/bitcoin/pull/16908#issuecomment-532846766,532846766,
ajtowns,2019-09-19 10:43:51,"ConceptACK\n\nI think `LimitMemPoolSize()` should have `std::chrono::seconds age` instead of `unsigned long age`, which means you can just pass in `std::chrono::hours{gArgs.GetArg(...)}`; makes it a bit tidier.\n\nHaving `int64_t as_seconds(std::chrono::seconds t) { return t.count(); }` seems like it would be better than using `int64_t{xxx.count()}` fwiw; that way if we change xxx's type eithe",https://github.com/bitcoin/bitcoin/pull/16908#issuecomment-533073954,533073954,
MarcoFalke,2019-09-19 15:53:41,Thx for the review. Took all suggestions by you.,https://github.com/bitcoin/bitcoin/pull/16908#issuecomment-533195304,533195304,
ajtowns,2019-09-23 12:32:21,utACK faec689bed7a5b66e2a7675853d10205b933cec8,https://github.com/bitcoin/bitcoin/pull/16908#issuecomment-534078345,534078345,
laanwj,2019-10-02 14:55:21,ACK faec689bed7a5b66e2a7675853d10205b933cec8,https://github.com/bitcoin/bitcoin/pull/16908#issuecomment-537532124,537532124,
ajtowns,2019-09-23 11:55:27,No need for the `int64_t{}` here?,https://github.com/bitcoin/bitcoin/pull/16908#discussion_r327073299,327073299,src/rpc/blockchain.cpp
MarcoFalke,2019-09-23 12:18:12,Done,https://github.com/bitcoin/bitcoin/pull/16908#discussion_r327081749,327081749,src/rpc/blockchain.cpp
laanwj,2019-09-30 11:40:23,"why not use `count_seconds` here, if it is preferred to inline `.count()` (according to the comment)? ",https://github.com/bitcoin/bitcoin/pull/16908#discussion_r329532465,329532465,src/net_processing.cpp
MarcoFalke,2019-09-30 11:58:43,"The member uses a magic value of 0 to indicate that the mempool was never requested. So this check isn't about time (in a specific type like seconds), but more about checking that any value exists.",https://github.com/bitcoin/bitcoin/pull/16908#discussion_r329538566,329538566,src/net_processing.cpp
laanwj,2019-10-02 14:54:25,"Hmm, okay, I guess we'd really want a `optional` here some day instead of a magic value, but no need to do that here.",https://github.com/bitcoin/bitcoin/pull/16908#discussion_r330597971,330597971,src/net_processing.cpp
sdaftuar,2019-10-23 17:39:09,Sorry to chime in late -- would it make sense to use the `std::chrono::duration::zero` value here?  I found `count()` to be unintuitive when I was looking at related code just now (but this `std::chrono` stuff is new to me so I'm still figuring out how to use it).,https://github.com/bitcoin/bitcoin/pull/16908#discussion_r338185199,338185199,src/net_processing.cpp
MarcoFalke,2019-10-23 17:48:09,"Comparing it to zero would also work, but still be odd, as the code is written as if the member were an `optional`.\n\nI think we can just stop treating it as `optional` (always assume the last mempool request time for peers was in year 1970). But that can be done in a follow up pull request.",https://github.com/bitcoin/bitcoin/pull/16908#discussion_r338189783,338189783,src/net_processing.cpp
