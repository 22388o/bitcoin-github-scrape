[
  {
    "sha": "1111170f2f0141084b5b4ed565b2f07eba48599a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTExMTcwZjJmMDE0MTA4NGI1YjRlZDU2NWIyZjA3ZWJhNDg1OTlh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-18T17:36:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-19T15:30:28Z"
      },
      "message": "test: mempool entry time is persisted\n\nAlso, remove the now unused \"Mine a single block to get out of IBD\".\nThis was fixed in commit 1111aecbb5.",
      "tree": {
        "sha": "2d1d518d4d939400011a1d42092a873b6c29c0ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d1d518d4d939400011a1d42092a873b6c29c0ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1111170f2f0141084b5b4ed565b2f07eba48599a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiIWAv/bQiqXu9hU4zORaq0jv+DJvR4kOmvOlNW8HvbHsMembesd176GhFspQg3\n85U81Q2F/Th7lUAmcNtzU8I7STsXXFRubyrIDilEXFZXtZlkOpjC5w/cSHyLwe1z\nKCbJpCZaJ9woua+ELnVDJIqno/hnIZHcztUcD2SVsTa/+QSa5k68lQ1NzdCFGS4U\nh18taeUOkMkE2rAVJi51gtyF7xY2R2KWEoZuhS8Nuua1UXfW7/UF8jtZkVXZyaIr\n8SKw1mnvIt9h1V2EYzKLxZh2SpD/v/dxbUbJ6PpY1gUWqV1IV9A82fDfehEnkSyL\ne5xmVUcJAv0z5jtrLyF/cv1/g4w8vyKAVNM6LPoP8BJNrZwHK/umq7scCb31X4Qw\n4+UeqnIAAZHOslGvKQGmlzcmr4oX6ROYvx3rGRT95IvGJ1Pxh9tiwiXfy5sqAr5R\nyBv0m2T96VkaJXE38ugaKnCj7/wNWHsWRGNXBC0IWBLC1gwN+OOADsFbXOTFAesn\nmmeSs0Ys\n=NO3u\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d1d518d4d939400011a1d42092a873b6c29c0ee\nparent 7d4bc60f1fee785d355fe4d376c0a369fc64dd68\nauthor MarcoFalke <falke.marco@gmail.com> 1568828189 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1568907028 -0400\n\ntest: mempool entry time is persisted\n\nAlso, remove the now unused \"Mine a single block to get out of IBD\".\nThis was fixed in commit 1111aecbb5.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111170f2f0141084b5b4ed565b2f07eba48599a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1111170f2f0141084b5b4ed565b2f07eba48599a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111170f2f0141084b5b4ed565b2f07eba48599a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d4bc60f1fee785d355fe4d376c0a369fc64dd68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d4bc60f1fee785d355fe4d376c0a369fc64dd68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d4bc60f1fee785d355fe4d376c0a369fc64dd68"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 16,
      "deletions": 8
    },
    "files": [
      {
        "sha": "398fdeb326c66eeb2407ea5467563c0fa8be556e",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1111170f2f0141084b5b4ed565b2f07eba48599a/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1111170f2f0141084b5b4ed565b2f07eba48599a/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=1111170f2f0141084b5b4ed565b2f07eba48599a",
        "patch": "@@ -37,9 +37,15 @@\n \"\"\"\n from decimal import Decimal\n import os\n+import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, wait_until\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+    wait_until,\n+)\n \n \n class MempoolPersistTest(BitcoinTestFramework):\n@@ -51,18 +57,13 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        chain_height = self.nodes[0].getblockcount()\n-        assert_equal(chain_height, 200)\n-\n-        self.log.debug(\"Mine a single block to get out of IBD\")\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n         self.log.debug(\"Send 5 transactions from node2 (to its own address)\")\n+        tx_creation_time_lower = int(time.time())\n         for i in range(5):\n             last_txid = self.nodes[2].sendtoaddress(self.nodes[2].getnewaddress(), Decimal(\"10\"))\n         node2_balance = self.nodes[2].getbalance()\n         self.sync_all()\n+        tx_creation_time_higher = int(time.time())\n \n         self.log.debug(\"Verify that node0 and node1 have 5 transactions in their mempools\")\n         assert_equal(len(self.nodes[0].getrawmempool()), 5)\n@@ -75,6 +76,10 @@ def run_test(self):\n         fees = self.nodes[0].getmempoolentry(txid=last_txid)['fees']\n         assert_equal(fees['base'] + Decimal('0.00001000'), fees['modified'])\n \n+        tx_creation_time = self.nodes[0].getmempoolentry(txid=last_txid)['time']\n+        assert_greater_than_or_equal(tx_creation_time, tx_creation_time_lower)\n+        assert_greater_than_or_equal(tx_creation_time_higher, tx_creation_time)\n+\n         self.log.debug(\"Stop-start the nodes. Verify that node0 has the transactions in its mempool and node1 does not. Verify that node2 calculates its balance correctly after loading wallet transactions.\")\n         self.stop_nodes()\n         # Give this node a head-start, so we can be \"extra-sure\" that it didn't load anything later\n@@ -93,6 +98,9 @@ def run_test(self):\n         fees = self.nodes[0].getmempoolentry(txid=last_txid)['fees']\n         assert_equal(fees['base'] + Decimal('0.00001000'), fees['modified'])\n \n+        self.log.debug('Verify time is loaded correctly')\n+        assert_equal(tx_creation_time, self.nodes[0].getmempoolentry(txid=last_txid)['time'])\n+\n         # Verify accounting of mempool transactions after restart is correct\n         self.nodes[2].syncwithvalidationinterfacequeue()  # Flush mempool to wallet\n         assert_equal(node2_balance, self.nodes[2].getbalance())"
      }
    ]
  },
  {
    "sha": "faaa1f01daba94b021ca77515266a16d27f0364e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWFhMWYwMWRhYmE5NGIwMjFjYTc3NTE1MjY2YTE2ZDI3ZjAzNjRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-19T14:57:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-19T15:30:29Z"
      },
      "message": "util: Add count_seconds time helper",
      "tree": {
        "sha": "8eaee16e15cec7d58c2b1eab4d24db78d847ba78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8eaee16e15cec7d58c2b1eab4d24db78d847ba78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faaa1f01daba94b021ca77515266a16d27f0364e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh3zwwAqVO/11/ZNooKxKwfIdzK708BkGHc0cIRqp+bsPEQJbI9yaNpNM1B/rQS\nTA7nwCfkZJG9a6WxDCPwlCdJqxz2SlpT8AqvH7rpORaNUAiarO3wcW19y/zH3l+s\nxu+DTzDkKvJlvc/XcUufbcOZP9qMQIfg6xMeFg7/fnwb8Y99Rau9G5s2ZjIZjfFe\nkK9bY13J24/GMJ4GCsqcFAfO+Ev3IZgCwRnBANveDDDNvOLn+fAXH9iAJNtwwyuv\npavXC4QhUrSmgETALfCw1Wb1dK3qWyPkKZPJL7UnXnvLgJVKwKgqC31s/h5zbzwK\nBDY91TfOjTEsp0gRg7HxJwklxpJYgYoDnLHcn9g3etRtc0uGH2PmDGuiuVn+dLn2\nRFNwCSA44XkbIun+T/9o6YTkIUd2/MIc3tJ9eqx87BvuwIgxRX1EWrzzMeKlco9h\n7bK7Kj8BDdE4wwCPwcLxg6ckFLFXLQg9x67qKrHMtxKsIBzjPeDGgi/OQ2tVMWT8\nz5ktw4+y\n=Hdje\n-----END PGP SIGNATURE-----",
        "payload": "tree 8eaee16e15cec7d58c2b1eab4d24db78d847ba78\nparent 1111170f2f0141084b5b4ed565b2f07eba48599a\nauthor MarcoFalke <falke.marco@gmail.com> 1568905047 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1568907029 -0400\n\nutil: Add count_seconds time helper\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa1f01daba94b021ca77515266a16d27f0364e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faaa1f01daba94b021ca77515266a16d27f0364e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa1f01daba94b021ca77515266a16d27f0364e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1111170f2f0141084b5b4ed565b2f07eba48599a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111170f2f0141084b5b4ed565b2f07eba48599a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1111170f2f0141084b5b4ed565b2f07eba48599a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c0470a2136cbcf5bcb9a126a8c8ef65bad80456c",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faaa1f01daba94b021ca77515266a16d27f0364e/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faaa1f01daba94b021ca77515266a16d27f0364e/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=faaa1f01daba94b021ca77515266a16d27f0364e",
        "patch": "@@ -10,6 +10,14 @@\n #include <string>\n #include <chrono>\n \n+/**\n+ * Helper to count the seconds of a duration.\n+ *\n+ * All durations should be using std::chrono and calling this should generally be avoided in code. Though, it is still\n+ * preferred to an inline t.count() to protect against a reliance on the exact type of t.\n+ */\n+inline int64_t count_seconds(std::chrono::seconds t) { return t.count(); }\n+\n /**\n  * DEPRECATED\n  * Use either GetSystemTimeInSeconds (not mockable) or GetTime<T> (mockable)"
      }
    ]
  },
  {
    "sha": "faec689bed7a5b66e2a7675853d10205b933cec8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWVjNjg5YmVkN2E1YjY2ZTJhNzY3NTg1M2QxMDIwNWI5MzNjZWM4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-18T17:31:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-23T12:00:14Z"
      },
      "message": "txmempool: Make entry time type-safe (std::chrono)",
      "tree": {
        "sha": "b21dc3595c97b2c8018a801667701ce16ab63780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b21dc3595c97b2c8018a801667701ce16ab63780"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faec689bed7a5b66e2a7675853d10205b933cec8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjUkwwAxf4j/7GFMpvS4sv571W1Dps0nqmoRPrXtv9I7Ks9v4GwjSUquxcBfVIE\nCjm6xnSg8LDL8HAyuJ1JTSvktpGmHNUz/+8lh53InZYaC6ktntCB6X14ivbPYEt0\nq9EJaTBGSOnRcKQF4Rflb2pQzbCs1PapBTxwbL+62mdSzbGe2U9OK7VdWEd8pXyh\nI+kRIHWDI2dyxEg7f77OJO5qq4lJux2pLYgXz2V5PgA0T1Bx2iF/AwHuBqzS0RC7\naLs3ds4N2OePt53jWJTNJZWr4sklvjkyCSaSPXUIjp0cSAIqxqql0rCDeZ4o3/mD\nF2lRfGuSrppWhhgy9r7W9KSwbvRe7oJZHRIlmDIeGPj//qFfVOUSXKNcfOzlszxJ\nGUEZ/O44sD+gpo+Jw7WXGdNWB7UxUS526D5h8uaNuaTxQDJW2U/D5121UoEXf+jx\n0C/4BjBujlk+mWxTVY5FNPDnG9tY//uUmJH5BgXZBRKlsMY2IF4ee4vhsCFyBIhC\nnfq7kPva\n=3shE\n-----END PGP SIGNATURE-----",
        "payload": "tree b21dc3595c97b2c8018a801667701ce16ab63780\nparent faaa1f01daba94b021ca77515266a16d27f0364e\nauthor MarcoFalke <falke.marco@gmail.com> 1568827919 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1569240014 -0400\n\ntxmempool: Make entry time type-safe (std::chrono)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faec689bed7a5b66e2a7675853d10205b933cec8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faec689bed7a5b66e2a7675853d10205b933cec8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faec689bed7a5b66e2a7675853d10205b933cec8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faaa1f01daba94b021ca77515266a16d27f0364e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faaa1f01daba94b021ca77515266a16d27f0364e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faaa1f01daba94b021ca77515266a16d27f0364e"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 16,
      "deletions": 15
    },
    "files": [
      {
        "sha": "44655abf80d33d7ed02bf52aa118730c2d574a8e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faec689bed7a5b66e2a7675853d10205b933cec8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faec689bed7a5b66e2a7675853d10205b933cec8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=faec689bed7a5b66e2a7675853d10205b933cec8",
        "patch": "@@ -761,7 +761,7 @@ class CNode\n         // Used for BIP35 mempool sending\n         bool fSendMempool GUARDED_BY(cs_tx_inventory){false};\n         // Last time a \"MEMPOOL\" request was serviced.\n-        std::atomic<int64_t> timeLastMempoolReq{0};\n+        std::atomic<std::chrono::seconds> m_last_mempool_req{std::chrono::seconds{0}};\n         int64_t nNextInvSend{0};\n \n         CCriticalSection cs_feeFilter;"
      },
      {
        "sha": "e345af604cfb745a10c5a0ca26922547ea5e5221",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faec689bed7a5b66e2a7675853d10205b933cec8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faec689bed7a5b66e2a7675853d10205b933cec8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=faec689bed7a5b66e2a7675853d10205b933cec8",
        "patch": "@@ -1541,11 +1541,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n-            } else if (pfrom->m_tx_relay->timeLastMempoolReq) {\n+            } else if (pfrom->m_tx_relay->m_last_mempool_req.load().count()) {\n                 auto txinfo = mempool.info(inv.hash);\n                 // To protect privacy, do not answer getdata using the mempool when\n                 // that TX couldn't have been INVed in reply to a MEMPOOL request.\n-                if (txinfo.tx && txinfo.nTime <= pfrom->m_tx_relay->timeLastMempoolReq) {\n+                if (txinfo.tx && txinfo.m_time <= pfrom->m_tx_relay->m_last_mempool_req.load()) {\n                     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *txinfo.tx));\n                     push = true;\n                 }\n@@ -3873,7 +3873,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                             vInv.clear();\n                         }\n                     }\n-                    pto->m_tx_relay->timeLastMempoolReq = GetTime();\n+                    pto->m_tx_relay->m_last_mempool_req = GetTime<std::chrono::seconds>();\n                 }\n \n                 // Determine transactions to relay"
      },
      {
        "sha": "19826af308f47c7b7c74e2347edbbaf4a2c6f9e1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faec689bed7a5b66e2a7675853d10205b933cec8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faec689bed7a5b66e2a7675853d10205b933cec8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=faec689bed7a5b66e2a7675853d10205b933cec8",
        "patch": "@@ -418,7 +418,7 @@ static void entryToJSON(const CTxMemPool& pool, UniValue& info, const CTxMemPool\n     info.pushKV(\"weight\", (int)e.GetTxWeight());\n     info.pushKV(\"fee\", ValueFromAmount(e.GetFee()));\n     info.pushKV(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee()));\n-    info.pushKV(\"time\", e.GetTime());\n+    info.pushKV(\"time\", count_seconds(e.GetTime()));\n     info.pushKV(\"height\", (int)e.GetHeight());\n     info.pushKV(\"descendantcount\", e.GetCountWithDescendants());\n     info.pushKV(\"descendantsize\", e.GetSizeWithDescendants());"
      },
      {
        "sha": "835b8d63bde2b41cb546241fa780911b0328b439",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faec689bed7a5b66e2a7675853d10205b933cec8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faec689bed7a5b66e2a7675853d10205b933cec8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=faec689bed7a5b66e2a7675853d10205b933cec8",
        "patch": "@@ -917,7 +917,8 @@ void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPool\n     }\n }\n \n-int CTxMemPool::Expire(int64_t time) {\n+int CTxMemPool::Expire(std::chrono::seconds time)\n+{\n     AssertLockHeld(cs);\n     indexed_transaction_set::index<entry_time>::type::iterator it = mapTx.get<entry_time>().begin();\n     setEntries toremove;"
      },
      {
        "sha": "f2fc1c83109ba30226463a293741ce80b404eebb",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faec689bed7a5b66e2a7675853d10205b933cec8/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faec689bed7a5b66e2a7675853d10205b933cec8/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=faec689bed7a5b66e2a7675853d10205b933cec8",
        "patch": "@@ -102,7 +102,7 @@ class CTxMemPoolEntry\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const;\n     size_t GetTxWeight() const { return nTxWeight; }\n-    int64_t GetTime() const { return nTime; }\n+    std::chrono::seconds GetTime() const { return std::chrono::seconds{nTime}; }\n     unsigned int GetHeight() const { return entryHeight; }\n     int64_t GetSigOpCost() const { return sigOpCost; }\n     int64_t GetModifiedFee() const { return nFee + feeDelta; }\n@@ -332,7 +332,7 @@ struct TxMempoolInfo\n     CTransactionRef tx;\n \n     /** Time the transaction entered the mempool. */\n-    int64_t nTime;\n+    std::chrono::seconds m_time;\n \n     /** Feerate of the transaction. */\n     CFeeRate feeRate;\n@@ -657,7 +657,7 @@ class CTxMemPool\n     void TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpendsRemaining = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n-    int Expire(int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    int Expire(std::chrono::seconds time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /**\n      * Calculate the ancestor and descendant count for the given transaction."
      },
      {
        "sha": "e57bcfc834309a27b19726d232e2b9ef353f2dcb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faec689bed7a5b66e2a7675853d10205b933cec8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faec689bed7a5b66e2a7675853d10205b933cec8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=faec689bed7a5b66e2a7675853d10205b933cec8",
        "patch": "@@ -314,10 +314,10 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age)\n+static void LimitMempoolSize(CTxMemPool& pool, size_t limit, std::chrono::seconds age)\n     EXCLUSIVE_LOCKS_REQUIRED(pool.cs, ::cs_main)\n {\n-    int expired = pool.Expire(GetTime() - age);\n+    int expired = pool.Expire(GetTime<std::chrono::seconds>() - age);\n     if (expired != 0) {\n         LogPrint(BCLog::MEMPOOL, \"Expired %i transactions from the memory pool\\n\", expired);\n     }\n@@ -389,7 +389,7 @@ static void UpdateMempoolForReorg(DisconnectedBlockTransactions& disconnectpool,\n     // We also need to remove any now-immature transactions\n     mempool.removeForReorg(&::ChainstateActive().CoinsTip(), ::ChainActive().Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+    LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n@@ -1011,7 +1011,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+        LimitMempoolSize(m_pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n     }\n@@ -4992,8 +4992,8 @@ bool DumpMempool(const CTxMemPool& pool)\n         file << (uint64_t)vinfo.size();\n         for (const auto& i : vinfo) {\n             file << *(i.tx);\n-            file << (int64_t)i.nTime;\n-            file << (int64_t)i.nFeeDelta;\n+            file << int64_t{count_seconds(i.m_time)};\n+            file << int64_t{i.nFeeDelta};\n             mapDeltas.erase(i.tx->GetHash());\n         }\n "
      }
    ]
  }
]