sipa,2017-05-24T01:07:53Z,Updated.,https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-303586472,303586472,
gmaxwell,2017-06-06T10:04:20Z,You might want to make some log entry note if fRDRand is set.,https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-306440434,306440434,
laanwj,2017-06-06T10:04:58Z,"I have no hardware that supports this instruction, but the code changes look good to me. \nThe rdrand output is only ever added to the state, through a cryptographic hash function, so there is no (realistic) scope for bad rdrand implementations to interfere with strong random number generation.\n\nTested (that it doesn't crash on CPUs without the instruction) ACK 7864abb",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-306440582,306440582,
laanwj,2017-06-06T10:10:43Z,"> You might want to make some log entry note if fRDRand is set.\n\nYes good idea - though this message should only be emitted once, and this cannot be done at the time fRDRand is initialized as this is before the initialization sequence.",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-306441926,306441926,
sipa,2017-06-06T19:38:45Z,"Done, it will now print line like\n```\n2017-06-06 19:31:12 Using RdRand as entropy source\n```\n\nIt's a bit ugly as it gets printed before the version line.",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-306594692,306594692,
jonasschnelli,2017-06-06T19:47:40Z,"Just my five cents:\nDuring discussions if RdRand should be added as entropy source for /dev/random on linux possible backdoor-entropy-control attacked where demonstrated. Not sure if this apply here:\nhttps://pastebin.com/A07q3nL3",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-306596945,306596945,
sipa,2017-06-06T19:52:01Z,"@jonasschnelli That attack doesn't apply here, we don't XOR the RdRand output into the buffer; we combine it with the former state using SHA512.",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-306598010,306598010,
jonasschnelli,2017-06-07T14:11:05Z,"Tested a bit. The log order seems a bit strange:\n**EDIT: ** saw that @sipa mentioned that already.\n\n```\n2017-06-07 14:08:35 Shutdown: done\n2017-06-07 14:08:54 Using RdRand as entropy source\n2017-06-07 14:08:54 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2017-06-07 14:08:54 Bitcoin version v0.14.99.0-7dd5ec4\n2017-06-07 14:08:54 InitParameterInteraction: parameter inter",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-306806909,306806909,
TheBlueMatt,2017-06-07T16:04:37Z,"Yea, can we move the CPUID check to a static check in GetHWRand (or via init)? Then we wouldnt LogPrintf pre-main().\n\nAlso, would be nice to support i686 as well, since I believe we still ship binaries for that.",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-306842613,306842613,
jonasschnelli,2017-06-08T06:15:52Z,Testet ACK on `Xeon E3-1275` (Skylake) fb854860ccbed5d8513a6251e6caeda250fde10a.,https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-307009258,307009258,
sipa,2017-06-08T07:30:28Z,@jonasschnelli We're not going to log a line every time a random number is generated.,https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-307023115,307023115,
jonasschnelli,2017-06-08T07:38:07Z,"> @jonasschnelli We're not going to log a line every time a random number is generated.\nOh. Indeed. I stupidly had the assumption that this was only called once.",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-307024569,307024569,
sipa,2017-06-09T21:17:39Z,"Rewritten using an initialization function, and added support for 32-bit x86 (which works on my i7 CPU).",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-307502136,307502136,
theuni,2017-06-13T19:27:57Z,"@sipa Would you be opposed to adding a \n```static bool g_random_init_done = false;```, set by RDRandInit(), and assert it in GetHWRand()?\n\nI'm nervous that some future tool will forget to call RDRandInit() at startup.\n\nIt would also obviate any startup order issues, in case we're somehow using strong random numbers during init without realizing.",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-308222766,308222766,
sipa,2017-06-13T19:29:13Z,"@theuni That would need to be atomic, as `GetHWRand()` may be called concurrently :(",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-308223117,308223117,
theuni,2017-06-13T19:49:22Z,I'm not sure how its access would be different from rdrand_supported?,https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-308228156,308228156,
sipa,2017-06-13T19:51:50Z,"@theuni rdrand_supported is only ever written before any read access to the variable (under the assumption that `RDRandInit()` is called before any `GetHWRand()`).\n\nReading `g_random_init_done` while perhaps `GetHWRand()` is being called concurrently (a case it is trying to detect) would be undefined behaviour.",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-308228765,308228765,
sipa,2017-06-14T00:02:48Z,@theuni I've added your suggestion as a relaxed atomic read.,https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-308281981,308281981,
laanwj,2017-06-14T13:15:12Z,re-utACK cb24c85,https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-308427325,308427325,
theuni,2017-06-14T18:38:24Z,"post-merge utACK (excluding the asm bits that I'm not qualified to review).\n\n@sipa thanks. If the cost of that check is problematic, we could reduce it to an atomic_flag instead, and assert that it's already set in GetHWRand. I assume it's not worth bothering, though.",https://github.com/bitcoin/bitcoin/pull/10377#issuecomment-308521241,308521241,
theuni,2017-05-09T22:32:46Z,"I think it would be useful to have a generic cpuid util function for this, for easier support for (among other things) sha extensions in the future.\n\nWe can always break it out later, though.",https://github.com/bitcoin/bitcoin/pull/10377#discussion_r115618102,115618102,src/random.cpp
theuni,2017-05-09T22:41:06Z,Any reason not to stick this inside GetHWRand()?,https://github.com/bitcoin/bitcoin/pull/10377#discussion_r115619346,115619346,src/random.cpp
sipa,2017-05-09T22:52:37Z,"I believe that C++11 specifies something about the order of initialization of statics defined inside functions, which results in automatically emitted synchronization calls. Perhaps that's not the case for const variables, though.",https://github.com/bitcoin/bitcoin/pull/10377#discussion_r115621018,115621018,src/random.cpp
ryanofsky,2017-05-10T19:24:03Z,Maybe note the name of the flag (rdrnd) in a comment.,https://github.com/bitcoin/bitcoin/pull/10377#discussion_r115830017,115830017,src/random.cpp
jonasschnelli,2017-06-08T06:13:50Z,I guess logging (`Using RdRand as entropy source`) at this point would make more sense.,https://github.com/bitcoin/bitcoin/pull/10377#discussion_r120806713,120806713,src/random.cpp
laanwj,2017-06-14T12:51:49Z,"the logging is now in `void RDRandInit()`, which is a better place, so I suppose this comment is outdated",https://github.com/bitcoin/bitcoin/pull/10377#discussion_r121936692,121936692,src/random.cpp
