[
  {
    "sha": "cb24c8539d1098d1a61605b452ecfa11a693320d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjI0Yzg1MzlkMTA5OGQxYTYxNjA1YjQ1MmVjZmExMWE2OTMzMjBk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-09T22:13:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-14T00:02:05Z"
      },
      "message": "Use rdrand as entropy source on supported platforms",
      "tree": {
        "sha": "afe76352b93e35cf15684243b386cc3a318b22da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afe76352b93e35cf15684243b386cc3a318b22da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb24c8539d1098d1a61605b452ecfa11a693320d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb24c8539d1098d1a61605b452ecfa11a693320d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb24c8539d1098d1a61605b452ecfa11a693320d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb24c8539d1098d1a61605b452ecfa11a693320d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cb8757aae1ae31e5519d81e854f44ed062d9836",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cb8757aae1ae31e5519d81e854f44ed062d9836",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cb8757aae1ae31e5519d81e854f44ed062d9836"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 73,
      "deletions": 0
    },
    "files": [
      {
        "sha": "298cc715c2a9c1497e296b2553b635bb1050ca8d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb24c8539d1098d1a61605b452ecfa11a693320d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb24c8539d1098d1a61605b452ecfa11a693320d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cb24c8539d1098d1a61605b452ecfa11a693320d",
        "patch": "@@ -1168,6 +1168,7 @@ bool AppInitSanityChecks()\n     // ********************************************************* Step 4: sanity checks\n \n     // Initialize elliptic curve code\n+    RandomInit();\n     ECC_Start();\n     globalVerifyHandle.reset(new ECCVerifyHandle());\n "
      },
      {
        "sha": "fb7160c8ccb045aab8ce1e5134adf5480859437c",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb24c8539d1098d1a61605b452ecfa11a693320d/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb24c8539d1098d1a61605b452ecfa11a693320d/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=cb24c8539d1098d1a61605b452ecfa11a693320d",
        "patch": "@@ -65,6 +65,64 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n+\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+static std::atomic<bool> hwrand_initialized{false};\n+static bool rdrand_supported = false;\n+static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n+static void RDRandInit()\n+{\n+    //! When calling cpuid function #1, ecx register will have this set if RDRAND is available.\n+    // Avoid clobbering ebx, as that is used for PIC on x86.\n+    uint32_t eax, tmp, ecx, edx;\n+    __asm__ (\"mov %%ebx, %1; cpuid; mov %1, %%ebx\": \"=a\"(eax), \"=g\"(tmp), \"=c\"(ecx), \"=d\"(edx) : \"a\"(1));\n+    if (ecx & CPUID_F1_ECX_RDRAND) {\n+        LogPrintf(\"Using RdRand as entropy source\\n\");\n+        rdrand_supported = true;\n+    }\n+    hwrand_initialized.store(true);\n+}\n+#else\n+static void RDRandInit() {}\n+#endif\n+\n+static bool GetHWRand(unsigned char* ent32) {\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));\n+    if (rdrand_supported) {\n+        uint8_t ok;\n+        // Not all assemblers support the rdrand instruction, write it in hex.\n+#ifdef __i386__\n+        for (int iter = 0; iter < 4; ++iter) {\n+            uint32_t r1, r2;\n+            __asm__ volatile (\".byte 0x0f, 0xc7, 0xf0;\" // rdrand %eax\n+                              \".byte 0x0f, 0xc7, 0xf2;\" // rdrand %edx\n+                              \"setc %2\" :\n+                              \"=a\"(r1), \"=d\"(r2), \"=q\"(ok) :: \"cc\");\n+            if (!ok) return false;\n+            WriteLE32(ent32 + 8 * iter, r1);\n+            WriteLE32(ent32 + 8 * iter + 4, r2);\n+        }\n+#else\n+        uint64_t r1, r2, r3, r4;\n+        __asm__ volatile (\".byte 0x48, 0x0f, 0xc7, 0xf0, \" // rdrand %rax\n+                                \"0x48, 0x0f, 0xc7, 0xf3, \" // rdrand %rbx\n+                                \"0x48, 0x0f, 0xc7, 0xf1, \" // rdrand %rcx\n+                                \"0x48, 0x0f, 0xc7, 0xf2; \" // rdrand %rdx\n+                          \"setc %4\" :\n+                          \"=a\"(r1), \"=b\"(r2), \"=c\"(r3), \"=d\"(r4), \"=q\"(ok) :: \"cc\");\n+        if (!ok) return false;\n+        WriteLE64(ent32, r1);\n+        WriteLE64(ent32 + 8, r2);\n+        WriteLE64(ent32 + 16, r3);\n+        WriteLE64(ent32 + 24, r4);\n+#endif\n+        return true;\n+    }\n+#endif\n+    return false;\n+}\n+\n void RandAddSeed()\n {\n     // Seed with CPU performance counter\n@@ -255,6 +313,11 @@ void GetStrongRandBytes(unsigned char* out, int num)\n     GetOSRand(buf);\n     hasher.Write(buf, 32);\n \n+    // Third source: HW RNG, if available.\n+    if (GetHWRand(buf)) {\n+        hasher.Write(buf, 32);\n+    }\n+\n     // Combine with and update state\n     {\n         std::unique_lock<std::mutex> lock(cs_rng_state);\n@@ -361,3 +424,8 @@ FastRandomContext::FastRandomContext(bool fDeterministic) : requires_seed(!fDete\n     uint256 seed;\n     rng.SetKey(seed.begin(), 32);\n }\n+\n+void RandomInit()\n+{\n+    RDRandInit();\n+}"
      },
      {
        "sha": "0c98041c4bf3ebe8bba59eef88f442817c85bc4b",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb24c8539d1098d1a61605b452ecfa11a693320d/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb24c8539d1098d1a61605b452ecfa11a693320d/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=cb24c8539d1098d1a61605b452ecfa11a693320d",
        "patch": "@@ -134,4 +134,7 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n+/** Initialize the RNG. */\n+void RandomInit();\n+\n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "3691f8bf5f7a9cc163e332d2953b41dcea4adee6",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb24c8539d1098d1a61605b452ecfa11a693320d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb24c8539d1098d1a61605b452ecfa11a693320d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=cb24c8539d1098d1a61605b452ecfa11a693320d",
        "patch": "@@ -35,6 +35,7 @@ extern void noui_connect();\n \n BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n {\n+        RandomInit();\n         ECC_Start();\n         SetupEnvironment();\n         SetupNetworking();"
      }
    ]
  }
]