gmaxwell,2018-11-18T18:45:54Z,I would be pretty surprised if this difference isn't optimized out.,https://github.com/bitcoin/bitcoin/pull/14753#issuecomment-439715632,439715632,
meshcollider,2018-11-19T01:22:47Z,@gmaxwell surprisingly this SO answer suggests that's not true https://stackoverflow.com/a/38948073/8253658,https://github.com/bitcoin/bitcoin/pull/14753#issuecomment-439745190,439745190,
gmaxwell,2018-11-19T06:10:38Z,"```\n#include <stdio.h>\n#include <stdint.h>\n#include <vector>\n\nextern std::vector<int64_t> tv;\nint main(void){\n  for (std::vector<int64_t>::const_iterator it = tv.begin(); it != tv.end(); it++) {\n    printf(""bloop.\n"");\n  }\n}\n```\n\nGives the same object code for me when compiled with g++ 7.3.1  with either it++ or ++it.  Anyone care to improve my test?",https://github.com/bitcoin/bitcoin/pull/14753#issuecomment-439782062,439782062,
ken2812221,2018-11-19T07:18:12Z,"It might be better to use range-based for loop that doesn't have to call `end()` every time. (Maybe it's already optimized by the compiler in -O2) Anyhow, it would not be a really long code anymore.",https://github.com/bitcoin/bitcoin/pull/14753#issuecomment-439793961,439793961,
sipa,2018-11-19T07:47:24Z,"None of these things matter at all.\n\nThe suggestion for using preincrement over postincrement is because in some cases, one can avoid creating a copy. In practice, for all simple types this does not matter, including most standard library iterators (which just encapsulate a single pointer).\n\nIt's a good guideline, but there is no need to go over the code and change things everywhere (the devel",https://github.com/bitcoin/bitcoin/pull/14753#issuecomment-439799908,439799908,
vim88,2018-11-20T20:05:26Z,"These small changes can indeed be considered not that important. To go and apply them everywhere now, might not make much sense, indeed.\n\nThank you all for your input!",https://github.com/bitcoin/bitcoin/pull/14753#issuecomment-440411856,440411856,
