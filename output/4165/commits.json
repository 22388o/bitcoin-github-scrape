[
  {
    "sha": "f6b7c644c998799c10704be4a5b42d9cacc8a746",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmI3YzY0NGM5OTg3OTljMTA3MDRiZTRhNWI0MmQ5Y2FjYzhhNzQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T21:42:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-09T22:42:31Z"
      },
      "message": "Move base58.h implementation code to base58.cpp",
      "tree": {
        "sha": "cc21a2d9cfe36f125013e6aed548a452715598d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc21a2d9cfe36f125013e6aed548a452715598d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6b7c644c998799c10704be4a5b42d9cacc8a746",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b7c644c998799c10704be4a5b42d9cacc8a746",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6b7c644c998799c10704be4a5b42d9cacc8a746",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b7c644c998799c10704be4a5b42d9cacc8a746/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "605d5b55582f00ea8a089fe632cd8a52e951126b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605d5b55582f00ea8a089fe632cd8a52e951126b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/605d5b55582f00ea8a089fe632cd8a52e951126b"
      }
    ],
    "stats": {
      "total": 446,
      "additions": 219,
      "deletions": 227
    },
    "files": [
      {
        "sha": "59757038873430212d2a13a97c6e76c4fe2f1719",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 183,
        "deletions": 0,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b7c644c998799c10704be4a5b42d9cacc8a746/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b7c644c998799c10704be4a5b42d9cacc8a746/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=f6b7c644c998799c10704be4a5b42d9cacc8a746",
        "patch": "@@ -2,11 +2,18 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"base58.h\"\n+\n+#include \"hash.h\"\n+#include \"uint256.h\"\n+\n #include <assert.h>\n #include <stdint.h>\n #include <string.h>\n #include <vector>\n #include <string>\n+#include <boost/variant/apply_visitor.hpp>\n+#include <boost/variant/static_visitor.hpp>\n \n /* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n@@ -89,3 +96,179 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n         str += pszBase58[*(it++)];\n     return str;\n }\n+\n+std::string EncodeBase58(const std::vector<unsigned char>& vch) {\n+    return EncodeBase58(&vch[0], &vch[0] + vch.size());\n+}\n+\n+bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet) {\n+    return DecodeBase58(str.c_str(), vchRet);\n+}\n+\n+std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn) {\n+    // add 4-byte hash check to the end\n+    std::vector<unsigned char> vch(vchIn);\n+    uint256 hash = Hash(vch.begin(), vch.end());\n+    vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n+    return EncodeBase58(vch);\n+}\n+\n+bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet) {\n+    if (!DecodeBase58(psz, vchRet))\n+        return false;\n+    if (vchRet.size() < 4)\n+    {\n+        vchRet.clear();\n+        return false;\n+    }\n+    // re-calculate the checksum, insure it matches the included 4-byte checksum\n+    uint256 hash = Hash(vchRet.begin(), vchRet.end()-4);\n+    if (memcmp(&hash, &vchRet.end()[-4], 4) != 0)\n+    {\n+        vchRet.clear();\n+        return false;\n+    }\n+    vchRet.resize(vchRet.size()-4);\n+    return true;\n+}\n+\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet) {\n+    return DecodeBase58Check(str.c_str(), vchRet);\n+}\n+\n+CBase58Data::CBase58Data() {\n+    vchVersion.clear();\n+    vchData.clear();\n+}\n+\n+void CBase58Data::SetData(const std::vector<unsigned char> &vchVersionIn, const void* pdata, size_t nSize) {\n+    vchVersion = vchVersionIn;\n+    vchData.resize(nSize);\n+    if (!vchData.empty())\n+        memcpy(&vchData[0], pdata, nSize);\n+}\n+\n+void CBase58Data::SetData(const std::vector<unsigned char> &vchVersionIn, const unsigned char *pbegin, const unsigned char *pend) {\n+    SetData(vchVersionIn, (void*)pbegin, pend - pbegin);\n+}\n+\n+bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes) {\n+    std::vector<unsigned char> vchTemp;\n+    DecodeBase58Check(psz, vchTemp);\n+    if (vchTemp.size() < nVersionBytes) {\n+        vchData.clear();\n+        vchVersion.clear();\n+        return false;\n+    }\n+    vchVersion.assign(vchTemp.begin(), vchTemp.begin() + nVersionBytes);\n+    vchData.resize(vchTemp.size() - nVersionBytes);\n+    if (!vchData.empty())\n+        memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n+    OPENSSL_cleanse(&vchTemp[0], vchData.size());\n+    return true;\n+}\n+\n+bool CBase58Data::SetString(const std::string& str) {\n+    return SetString(str.c_str());\n+}\n+\n+std::string CBase58Data::ToString() const {\n+    std::vector<unsigned char> vch = vchVersion;\n+    vch.insert(vch.end(), vchData.begin(), vchData.end());\n+    return EncodeBase58Check(vch);\n+}\n+\n+int CBase58Data::CompareTo(const CBase58Data& b58) const {\n+    if (vchVersion < b58.vchVersion) return -1;\n+    if (vchVersion > b58.vchVersion) return  1;\n+    if (vchData < b58.vchData)   return -1;\n+    if (vchData > b58.vchData)   return  1;\n+    return 0;\n+}\n+\n+namespace {\n+    class CBitcoinAddressVisitor : public boost::static_visitor<bool> {\n+    private:\n+        CBitcoinAddress *addr;\n+    public:\n+        CBitcoinAddressVisitor(CBitcoinAddress *addrIn) : addr(addrIn) { }\n+\n+        bool operator()(const CKeyID &id) const { return addr->Set(id); }\n+        bool operator()(const CScriptID &id) const { return addr->Set(id); }\n+        bool operator()(const CNoDestination &no) const { return false; }\n+    };\n+};\n+\n+bool CBitcoinAddress::Set(const CKeyID &id) {\n+    SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n+    return true;\n+}\n+\n+bool CBitcoinAddress::Set(const CScriptID &id) {\n+    SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n+    return true;\n+}\n+\n+bool CBitcoinAddress::Set(const CTxDestination &dest) {\n+    return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n+}\n+\n+bool CBitcoinAddress::IsValid() const {\n+    bool fCorrectSize = vchData.size() == 20;\n+    bool fKnownVersion = vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n+                         vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+    return fCorrectSize && fKnownVersion;\n+}\n+\n+CTxDestination CBitcoinAddress::Get() const {\n+    if (!IsValid())\n+        return CNoDestination();\n+    uint160 id;\n+    memcpy(&id, &vchData[0], 20);\n+    if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n+        return CKeyID(id);\n+    else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n+        return CScriptID(id);\n+    else\n+        return CNoDestination();\n+}\n+\n+bool CBitcoinAddress::GetKeyID(CKeyID &keyID) const {\n+    if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n+        return false;\n+    uint160 id;\n+    memcpy(&id, &vchData[0], 20);\n+    keyID = CKeyID(id);\n+    return true;\n+}\n+\n+bool CBitcoinAddress::IsScript() const {\n+    return IsValid() && vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+}\n+\n+void CBitcoinSecret::SetKey(const CKey& vchSecret) {\n+    assert(vchSecret.IsValid());\n+    SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n+    if (vchSecret.IsCompressed())\n+        vchData.push_back(1);\n+}\n+\n+CKey CBitcoinSecret::GetKey() {\n+    CKey ret;\n+    ret.Set(&vchData[0], &vchData[32], vchData.size() > 32 && vchData[32] == 1);\n+    return ret;\n+}\n+\n+bool CBitcoinSecret::IsValid() const {\n+    bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n+    bool fCorrectVersion = vchVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n+    return fExpectedFormat && fCorrectVersion;\n+}\n+\n+bool CBitcoinSecret::SetString(const char* pszSecret) {\n+    return CBase58Data::SetString(pszSecret) && IsValid();\n+}\n+\n+bool CBitcoinSecret::SetString(const std::string& strSecret) {\n+    return SetString(strSecret.c_str());\n+}"
      },
      {
        "sha": "70681f589a6ab973e8999e48bd094b07e9cdc2c6",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 34,
        "deletions": 225,
        "changes": 259,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b7c644c998799c10704be4a5b42d9cacc8a746/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b7c644c998799c10704be4a5b42d9cacc8a746/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=f6b7c644c998799c10704be4a5b42d9cacc8a746",
        "patch": "@@ -15,17 +15,12 @@\n #define BITCOIN_BASE58_H\n \n #include \"chainparams.h\"\n-#include \"hash.h\"\n #include \"key.h\"\n #include \"script.h\"\n-#include \"uint256.h\"\n \n #include <string>\n #include <vector>\n \n-#include <boost/variant/apply_visitor.hpp>\n-#include <boost/variant/static_visitor.hpp>\n-\n /**\n  * Encode a byte sequence as a base58-encoded string.\n  * pbegin and pend cannot be NULL, unless both are.\n@@ -35,10 +30,7 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n /**\n  * Encode a byte vector as a base58-encoded string\n  */\n-inline std::string EncodeBase58(const std::vector<unsigned char>& vch)\n-{\n-    return EncodeBase58(&vch[0], &vch[0] + vch.size());\n-}\n+std::string EncodeBase58(const std::vector<unsigned char>& vch);\n \n /**\n  * Decode a base58-encoded string (psz) into a byte vector (vchRet).\n@@ -51,55 +43,24 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet);\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-inline bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n-{\n-    return DecodeBase58(str.c_str(), vchRet);\n-}\n+bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet);\n \n /**\n  * Encode a byte vector into a base58-encoded string, including checksum\n  */\n-inline std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n-{\n-    // add 4-byte hash check to the end\n-    std::vector<unsigned char> vch(vchIn);\n-    uint256 hash = Hash(vch.begin(), vch.end());\n-    vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n-    return EncodeBase58(vch);\n-}\n+std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n \n /**\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n-{\n-    if (!DecodeBase58(psz, vchRet))\n-        return false;\n-    if (vchRet.size() < 4)\n-    {\n-        vchRet.clear();\n-        return false;\n-    }\n-    // re-calculate the checksum, insure it matches the included 4-byte checksum\n-    uint256 hash = Hash(vchRet.begin(), vchRet.end()-4);\n-    if (memcmp(&hash, &vchRet.end()[-4], 4) != 0)\n-    {\n-        vchRet.clear();\n-        return false;\n-    }\n-    vchRet.resize(vchRet.size()-4);\n-    return true;\n-}\n+inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)\n-{\n-    return DecodeBase58Check(str.c_str(), vchRet);\n-}\n+inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n /**\n  * Base class for all base58-encoded data\n@@ -114,64 +75,15 @@ class CBase58Data\n     typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;\n     vector_uchar vchData;\n \n-    CBase58Data()\n-    {\n-        vchVersion.clear();\n-        vchData.clear();\n-    }\n-\n-    void SetData(const std::vector<unsigned char> &vchVersionIn, const void* pdata, size_t nSize)\n-    {\n-        vchVersion = vchVersionIn;\n-        vchData.resize(nSize);\n-        if (!vchData.empty())\n-            memcpy(&vchData[0], pdata, nSize);\n-    }\n-\n-    void SetData(const std::vector<unsigned char> &vchVersionIn, const unsigned char *pbegin, const unsigned char *pend)\n-    {\n-        SetData(vchVersionIn, (void*)pbegin, pend - pbegin);\n-    }\n+    CBase58Data();\n+    void SetData(const std::vector<unsigned char> &vchVersionIn, const void* pdata, size_t nSize);\n+    void SetData(const std::vector<unsigned char> &vchVersionIn, const unsigned char *pbegin, const unsigned char *pend);\n \n public:\n-    bool SetString(const char* psz, unsigned int nVersionBytes = 1)\n-    {\n-        std::vector<unsigned char> vchTemp;\n-        DecodeBase58Check(psz, vchTemp);\n-        if (vchTemp.size() < nVersionBytes)\n-        {\n-            vchData.clear();\n-            vchVersion.clear();\n-            return false;\n-        }\n-        vchVersion.assign(vchTemp.begin(), vchTemp.begin() + nVersionBytes);\n-        vchData.resize(vchTemp.size() - nVersionBytes);\n-        if (!vchData.empty())\n-            memcpy(&vchData[0], &vchTemp[nVersionBytes], vchData.size());\n-        OPENSSL_cleanse(&vchTemp[0], vchData.size());\n-        return true;\n-    }\n-\n-    bool SetString(const std::string& str)\n-    {\n-        return SetString(str.c_str());\n-    }\n-\n-    std::string ToString() const\n-    {\n-        std::vector<unsigned char> vch = vchVersion;\n-        vch.insert(vch.end(), vchData.begin(), vchData.end());\n-        return EncodeBase58Check(vch);\n-    }\n-\n-    int CompareTo(const CBase58Data& b58) const\n-    {\n-        if (vchVersion < b58.vchVersion) return -1;\n-        if (vchVersion > b58.vchVersion) return  1;\n-        if (vchData < b58.vchData)   return -1;\n-        if (vchData > b58.vchData)   return  1;\n-        return 0;\n-    }\n+    bool SetString(const char* psz, unsigned int nVersionBytes = 1);\n+    bool SetString(const std::string& str);\n+    std::string ToString() const;\n+    int CompareTo(const CBase58Data& b58) const;\n \n     bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }\n     bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }\n@@ -186,140 +98,37 @@ class CBase58Data\n  * Script-hash-addresses have version 5 (or 196 testnet).\n  * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n  */\n-class CBitcoinAddress;\n-class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    CBitcoinAddress *addr;\n+class CBitcoinAddress : public CBase58Data {\n public:\n-    CBitcoinAddressVisitor(CBitcoinAddress *addrIn) : addr(addrIn) { }\n-    bool operator()(const CKeyID &id) const;\n-    bool operator()(const CScriptID &id) const;\n-    bool operator()(const CNoDestination &no) const;\n+    bool Set(const CKeyID &id);\n+    bool Set(const CScriptID &id);\n+    bool Set(const CTxDestination &dest);\n+    bool IsValid() const;\n+\n+    CBitcoinAddress() {}\n+    CBitcoinAddress(const CTxDestination &dest) { Set(dest); }\n+    CBitcoinAddress(const std::string& strAddress) { SetString(strAddress); }\n+    CBitcoinAddress(const char* pszAddress) { SetString(pszAddress); }\n+\n+    CTxDestination Get() const;\n+    bool GetKeyID(CKeyID &keyID) const;\n+    bool IsScript() const;\n };\n \n-class CBitcoinAddress : public CBase58Data\n-{\n-public:\n-    bool Set(const CKeyID &id) {\n-        SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n-        return true;\n-    }\n-\n-    bool Set(const CScriptID &id) {\n-        SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n-        return true;\n-    }\n-\n-    bool Set(const CTxDestination &dest)\n-    {\n-        return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n-    }\n-\n-    bool IsValid() const\n-    {\n-        bool fCorrectSize = vchData.size() == 20;\n-        bool fKnownVersion = vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n-                             vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        return fCorrectSize && fKnownVersion;\n-    }\n-\n-    CBitcoinAddress()\n-    {\n-    }\n-\n-    CBitcoinAddress(const CTxDestination &dest)\n-    {\n-        Set(dest);\n-    }\n-\n-    CBitcoinAddress(const std::string& strAddress)\n-    {\n-        SetString(strAddress);\n-    }\n-\n-    CBitcoinAddress(const char* pszAddress)\n-    {\n-        SetString(pszAddress);\n-    }\n-\n-    CTxDestination Get() const {\n-        if (!IsValid())\n-            return CNoDestination();\n-        uint160 id;\n-        memcpy(&id, &vchData[0], 20);\n-        if (vchVersion == Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-            return CKeyID(id);\n-        else if (vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS))\n-            return CScriptID(id);\n-        else\n-            return CNoDestination();\n-    }\n-\n-    bool GetKeyID(CKeyID &keyID) const {\n-        if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n-            return false;\n-        uint160 id;\n-        memcpy(&id, &vchData[0], 20);\n-        keyID = CKeyID(id);\n-        return true;\n-    }\n-\n-    bool IsScript() const {\n-        return IsValid() && vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-    }\n-};\n-\n-bool inline CBitcoinAddressVisitor::operator()(const CKeyID &id) const         { return addr->Set(id); }\n-bool inline CBitcoinAddressVisitor::operator()(const CScriptID &id) const      { return addr->Set(id); }\n-bool inline CBitcoinAddressVisitor::operator()(const CNoDestination &id) const { return false; }\n-\n /**\n  * A base58-encoded secret key\n  */\n class CBitcoinSecret : public CBase58Data\n {\n public:\n-    void SetKey(const CKey& vchSecret)\n-    {\n-        assert(vchSecret.IsValid());\n-        SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n-        if (vchSecret.IsCompressed())\n-            vchData.push_back(1);\n-    }\n-\n-    CKey GetKey()\n-    {\n-        CKey ret;\n-        ret.Set(&vchData[0], &vchData[32], vchData.size() > 32 && vchData[32] == 1);\n-        return ret;\n-    }\n-\n-    bool IsValid() const\n-    {\n-        bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n-        bool fCorrectVersion = vchVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n-        return fExpectedFormat && fCorrectVersion;\n-    }\n-\n-    bool SetString(const char* pszSecret)\n-    {\n-        return CBase58Data::SetString(pszSecret) && IsValid();\n-    }\n-\n-    bool SetString(const std::string& strSecret)\n-    {\n-        return SetString(strSecret.c_str());\n-    }\n-\n-    CBitcoinSecret(const CKey& vchSecret)\n-    {\n-        SetKey(vchSecret);\n-    }\n-\n-    CBitcoinSecret()\n-    {\n-    }\n+    void SetKey(const CKey& vchSecret);\n+    CKey GetKey();\n+    bool IsValid() const;\n+    bool SetString(const char* pszSecret);\n+    bool SetString(const std::string& strSecret);\n+\n+    CBitcoinSecret(const CKey& vchSecret) { SetKey(vchSecret); }\n+    CBitcoinSecret() {}\n };\n \n template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data"
      },
      {
        "sha": "b81a19cfd8ba02906f8314c2a8746d21b6011c3f",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b7c644c998799c10704be4a5b42d9cacc8a746/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b7c644c998799c10704be4a5b42d9cacc8a746/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=f6b7c644c998799c10704be4a5b42d9cacc8a746",
        "patch": "@@ -233,15 +233,15 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n                 continue;\n             }\n             CBitcoinAddress addrOut;\n-            BOOST_CHECK_MESSAGE(boost::apply_visitor(CBitcoinAddressVisitor(&addrOut), dest), \"encode dest: \" + strTest);\n+            BOOST_CHECK_MESSAGE(addrOut.Set(dest), \"encode dest: \" + strTest);\n             BOOST_CHECK_MESSAGE(addrOut.ToString() == exp_base58string, \"mismatch: \" + strTest);\n         }\n     }\n \n     // Visiting a CNoDestination must fail\n     CBitcoinAddress dummyAddr;\n     CTxDestination nodest = CNoDestination();\n-    BOOST_CHECK(!boost::apply_visitor(CBitcoinAddressVisitor(&dummyAddr), nodest));\n+    BOOST_CHECK(!dummyAddr.Set(nodest));\n \n     SelectParams(CChainParams::MAIN);\n }"
      }
    ]
  }
]