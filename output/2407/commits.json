[
  {
    "sha": "d726e56aa0f31b16d202c3654342ea72e6831e4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzI2ZTU2YWEwZjMxYjE2ZDIwMmMzNjU0MzQyZWE3MmU2ODMxZTRk",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-06-30T16:08:39Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-07-07T12:57:35Z"
      },
      "message": "Added CWalletManager class to support loading of multiple wallets.",
      "tree": {
        "sha": "e8f36b2ca806e97177dc67b5a35f9349e4c49755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8f36b2ca806e97177dc67b5a35f9349e4c49755"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d726e56aa0f31b16d202c3654342ea72e6831e4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d726e56aa0f31b16d202c3654342ea72e6831e4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d726e56aa0f31b16d202c3654342ea72e6831e4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d726e56aa0f31b16d202c3654342ea72e6831e4d/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e802ac85d2732ab3dd83e299422d544476de6a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e802ac85d2732ab3dd83e299422d544476de6a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e802ac85d2732ab3dd83e299422d544476de6a1"
      }
    ],
    "stats": {
      "total": 468,
      "additions": 384,
      "deletions": 84
    },
    "files": [
      {
        "sha": "1e67c6afd5d1c51f7e1ce56f38f0047ea14cce43",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d726e56aa0f31b16d202c3654342ea72e6831e4d/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d726e56aa0f31b16d202c3654342ea72e6831e4d/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "patch": "@@ -245,6 +245,7 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/addrman.cpp \\\n     src/db.cpp \\\n     src/walletdb.cpp \\\n+    src/walletmanager.cpp \\\n     src/qt/clientmodel.cpp \\\n     src/qt/guiutil.cpp \\\n     src/qt/transactionrecord.cpp \\\n@@ -416,7 +417,7 @@ LIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB\n LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX\n # -lgdi32 has to happen after -lcrypto (see  #681)\n win32:LIBS += -lws2_32 -lshlwapi -lmswsock -lole32 -loleaut32 -luuid -lgdi32\n-LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX\n+LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX -lboost_regex$$BOOST_LIB_SUFFIX\n win32:LIBS += -lboost_chrono$$BOOST_LIB_SUFFIX\n macx:LIBS += -lboost_chrono$$BOOST_LIB_SUFFIX\n "
      },
      {
        "sha": "1d06ccf41bfafbd7c90fe741117281a293f5be99",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 83,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "patch": "@@ -9,6 +9,7 @@\n #include \"chainparams.h\"\n #include \"txdb.h\"\n #include \"walletdb.h\"\n+#include \"walletmanager.h\"\n #include \"bitcoinrpc.h\"\n #include \"net.h\"\n #include \"util.h\"\n@@ -29,6 +30,9 @@\n using namespace std;\n using namespace boost;\n \n+CWalletManager g_walletManager;\n+\n+// TODO: eliminate pwalletMain and request wallet objects from g_walletManager throughout instead.\n CWallet* pwalletMain;\n CClientUIInterface uiInterface;\n \n@@ -119,8 +123,6 @@ void Shutdown()\n     }\n     bitdb.Flush(true);\n     boost::filesystem::remove(GetPidFile());\n-    UnregisterAllWallets();\n-    delete pwalletMain;\n }\n \n //\n@@ -832,93 +834,24 @@ bool AppInit2(boost::thread_group& threadGroup)\n         return false;\n     }\n \n-    // ********************************************************* Step 8: load wallet\n+    // ********************************************************* Step 8: load default wallet\n \n-    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+    uiInterface.InitMessage(_(\"Loading default wallet...\"));\n \n-    nStart = GetTimeMillis();\n-    bool fFirstRun = true;\n-    pwalletMain = new CWallet(\"wallet.dat\");\n-    DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-    if (nLoadWalletRet != DB_LOAD_OK)\n+    try\n     {\n-        if (nLoadWalletRet == DB_CORRUPT)\n-            strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-        {\n-            string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n-                         \" or address book entries might be missing or incorrect.\"));\n-            InitWarning(msg);\n-        }\n-        else if (nLoadWalletRet == DB_TOO_NEW)\n-            strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin\") << \"\\n\";\n-        else if (nLoadWalletRet == DB_NEED_REWRITE)\n-        {\n-            strErrors << _(\"Wallet needed to be rewritten: restart Bitcoin to complete\") << \"\\n\";\n-            printf(\"%s\", strErrors.str().c_str());\n-            return InitError(strErrors.str());\n-        }\n-        else\n-            strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-    }\n+        g_walletManager.LoadDefaultWallet();\n \n-    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-    {\n-        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-        if (nMaxVersion == 0) // the -upgradewallet without argument case\n-        {\n-            printf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-            nMaxVersion = CLIENT_VERSION;\n-            pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-        }\n-        else\n-            printf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-        if (nMaxVersion < pwalletMain->GetVersion())\n-            strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-        pwalletMain->SetMaxVersion(nMaxVersion);\n+        // pwalletMain needs to be eliminated throughout the application.\n+        // Wallet objects should always be requested from g_walletManager instead.\n+        pwalletMain = g_walletManager.GetDefaultWallet().get();\n     }\n-\n-    if (fFirstRun)\n+    catch (const std::exception& e)\n     {\n-        // Create new keyUser and set as default key\n-        RandAddSeedPerfmon();\n-\n-        CPubKey newDefaultKey;\n-        if (pwalletMain->GetKeyFromPool(newDefaultKey, false)) {\n-            pwalletMain->SetDefaultKey(newDefaultKey);\n-            if (!pwalletMain->SetAddressBookName(pwalletMain->vchDefaultKey.GetID(), \"\"))\n-                strErrors << _(\"Cannot write default address\") << \"\\n\";\n-        }\n-\n-        pwalletMain->SetBestChain(CBlockLocator(pindexBest));\n-    }\n-\n-    printf(\"%s\", strErrors.str().c_str());\n-    printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-\n-    RegisterWallet(pwalletMain);\n-\n-    CBlockIndex *pindexRescan = pindexBest;\n-    if (GetBoolArg(\"-rescan\", false))\n-        pindexRescan = pindexGenesisBlock;\n-    else\n-    {\n-        CWalletDB walletdb(\"wallet.dat\");\n-        CBlockLocator locator;\n-        if (walletdb.ReadBestBlock(locator))\n-            pindexRescan = locator.GetBlockIndex();\n-        else\n-            pindexRescan = pindexGenesisBlock;\n-    }\n-    if (pindexBest && pindexBest != pindexRescan)\n-    {\n-        uiInterface.InitMessage(_(\"Rescanning...\"));\n-        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n-        nStart = GetTimeMillis();\n-        pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n-        pwalletMain->SetBestChain(CBlockLocator(pindexBest));\n-        nWalletDBUpdated++;\n+        ostringstream err;\n+        err << _(\"Failed to load default wallet. Error: \") << e.what() << _(\" Exiting...\");\n+        printf(\"%s\\n\", err.str().c_str());\n+        return false;\n     }\n \n     // ********************************************************* Step 9: import blocks"
      },
      {
        "sha": "fdc9a7ddb92c5be93ce2e0376597d295bdc6690a",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "patch": "@@ -29,6 +29,7 @@ LIBS= \\\n  -l boost_filesystem-mt-s \\\n  -l boost_program_options-mt-s \\\n  -l boost_thread_win32-mt-s \\\n+ -l boost_regex-mt-s \\\n  -l boost_chrono-mt-s \\\n  -l db_cxx \\\n  -l ssl \\\n@@ -89,6 +90,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/walletmanager.o \\\n     obj/noui.o \\\n     obj/hash.o \\\n     obj/bloom.o \\"
      },
      {
        "sha": "4976a461c92fe741c4021e43abe03de0e146a959",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "patch": "@@ -38,6 +38,7 @@ LIBS= \\\n  -l boost_filesystem$(BOOST_SUFFIX) \\\n  -l boost_program_options$(BOOST_SUFFIX) \\\n  -l boost_thread$(BOOST_SUFFIX) \\\n+ -l boost_regex$(BOOST_SUFFIX) \\\n  -l boost_chrono$(BOOST_SUFFIX) \\\n  -l db_cxx \\\n  -l ssl \\\n@@ -97,6 +98,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/walletmanager.o \\\n     obj/hash.o \\\n     obj/bloom.o \\\n     obj/noui.o \\"
      },
      {
        "sha": "f6922ea9d6b60d25b3c04e069ec09c1f3123fd5b",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "patch": "@@ -36,6 +36,7 @@ LIBS += \\\n  $(DEPSDIR)/lib/libboost_filesystem-mt.a \\\n  $(DEPSDIR)/lib/libboost_program_options-mt.a \\\n  $(DEPSDIR)/lib/libboost_thread-mt.a \\\n+ $(DEPSDIR)/lib/libboost_regex-mt.a \\\n  $(DEPSDIR)/lib/libboost_chrono-mt.a \\\n  $(DEPSDIR)/lib/libssl.a \\\n  $(DEPSDIR)/lib/libcrypto.a \\\n@@ -49,6 +50,7 @@ LIBS += \\\n  -lboost_filesystem-mt \\\n  -lboost_program_options-mt \\\n  -lboost_thread-mt \\\n+ -lboost_regex-mt \\\n  -lboost_chrono-mt \\\n  -lssl \\\n  -lcrypto \\\n@@ -100,6 +102,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/walletmanager.o \\\n     obj/hash.o \\\n     obj/bloom.o \\\n     obj/noui.o \\"
      },
      {
        "sha": "d9f6f54f5eea67e99c8f2d7a0326586a0fd800b1",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "patch": "@@ -38,6 +38,7 @@ LIBS += \\\n    -l boost_filesystem$(BOOST_LIB_SUFFIX) \\\n    -l boost_program_options$(BOOST_LIB_SUFFIX) \\\n    -l boost_thread$(BOOST_LIB_SUFFIX) \\\n+   -l boost_regex$(BOOST_LIB_SUFFIX) \\\n    -l db_cxx$(BDB_LIB_SUFFIX) \\\n    -l ssl \\\n    -l crypto\n@@ -139,6 +140,7 @@ OBJS= \\\n     obj/util.o \\\n     obj/wallet.o \\\n     obj/walletdb.o \\\n+    obj/walletmanager.o \\\n     obj/hash.o \\\n     obj/bloom.o \\\n     obj/noui.o \\"
      },
      {
        "sha": "3d86a6d61f03f4bbdef8c44adcbb17cb4167b526",
        "filename": "src/walletmanager.cpp",
        "status": "added",
        "additions": 308,
        "deletions": 0,
        "changes": 308,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/walletmanager.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/walletmanager.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletmanager.cpp?ref=d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "patch": "@@ -0,0 +1,308 @@\n+// Copyright (c) 2012-2013 Eric Lombrozo, The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"walletmanager.h\"\n+#include \"walletdb.h\"\n+\n+using namespace std;\n+\n+////////////////////////////////////////////////////////////\n+//\n+// TODO: Move GetFilesAtPath to utils.h/utils.cpp\n+//\n+namespace file_option_flags\n+{\n+    const unsigned int REGULAR_FILES = 0x01;\n+    const unsigned int DIRECTORIES = 0x02;\n+};\n+\n+vector<string> GetFilesAtPath(const boost::filesystem::path& _path, unsigned int flags)\n+{\n+    vector<string> vstrFiles;\n+    if (!boost::filesystem::exists(_path))\n+        throw runtime_error(\"Path does not exist.\");\n+    \n+    if ((flags & file_option_flags::REGULAR_FILES) && boost::filesystem::is_regular_file(_path))\n+    {\n+#if defined (BOOST_FILESYSTEM_VERSION) && BOOST_FILESYSTEM_VERSION == 3\n+        vstrFiles.push_back(_path.filename().string());\n+#else\n+        vstrFiles.push_back(_path.filename());\n+#endif\n+        return vstrFiles;\n+    }\n+    if (boost::filesystem::is_directory(_path))\n+    {\n+        vector<boost::filesystem::path> vPaths;\n+        copy(boost::filesystem::directory_iterator(_path), boost::filesystem::directory_iterator(), back_inserter(vPaths));\n+        BOOST_FOREACH(const boost::filesystem::path& pFile, vPaths)\n+        {\n+            if (((flags & file_option_flags::REGULAR_FILES) && boost::filesystem::is_regular_file(pFile)) ||\n+                ((flags & file_option_flags::DIRECTORIES) && boost::filesystem::is_directory(pFile)))\n+#if defined (BOOST_FILESYSTEM_VERSION) && BOOST_FILESYSTEM_VERSION == 3\n+                vstrFiles.push_back(pFile.filename().string());\n+#else\n+            vstrFiles.push_back(pFile.filename());\n+#endif\n+        }\n+        return vstrFiles;\n+    }\n+    throw runtime_error(\"Path exists but is neither a regular file nor a directory.\");\n+}\n+//\n+////////////////////////////////////////////////////////////\n+\n+\n+// TODO: Remove these functions\n+bool static InitError(const std::string &str)\n+{\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);\n+    return false;\n+}\n+\n+bool static InitWarning(const std::string &str)\n+{\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n+    return true;\n+}\n+\n+// TODO: Remove dependencies for I/O on printf to debug.log, InitError, and InitWarning\n+// TODO: Improve error messages and error handling.\n+void CWalletManager::LoadWallet(const string& strName)\n+{\n+    ostringstream err;\n+    string strFile = \"wallet\";\n+    CWallet* pWallet = NULL;\n+    int64 nStart = GetTimeMillis();\n+\n+    // Check that the wallet name is valid. A wallet name can only contain alphanumerics and underscores.\n+    if (!CWalletManager::IsValidName(strName))\n+    {\n+        err << _(\"Invalid wallet name \\\"\") << strName << _(\"\\\".\"); \n+        throw runtime_error(err.str());\n+    }\n+\n+    {\n+        LOCK(cs_WalletManager);    \n+        \n+        // Check that wallet is not already loaded\n+        if (wallets.count(strName) > 0)\n+        {\n+            err << _(\"A wallet with the name \") << strName << _(\" is already loaded.\");\n+            throw runtime_error(err.str());\n+        }\n+        \n+        // Wallet file name for wallet foo will be wallet-foo.dat\n+        // The empty string is reserved for the default wallet whose file is wallet.dat\n+        if (strName.size() > 0)\n+        {\n+            strFile += \"-\" + strName;\n+        }\n+        strFile += \".dat\";\n+        \n+        printf(\"Loading wallet %s from %s...\\n\", strName.c_str(), strFile.c_str());\n+        bool fFirstRun = true;\n+        DBErrors nLoadWalletRet;\n+        \n+        try\n+        {\n+            pWallet = new CWallet(strFile);\n+            nLoadWalletRet = pWallet->LoadWallet(fFirstRun);\n+        }\n+        catch (const exception& e)\n+        {\n+            err << _(\"Critical error loading wallet \") << strName << _(\" from \") << strFile << \": \" << e.what();\n+            throw runtime_error(err.str());\n+        }\n+        catch (...)\n+        {\n+            err << _(\"Critical error loading wallet \") << strName <<_(\" from \") << strFile;\n+            throw runtime_error(err.str());\n+        }\n+        \n+        if (nLoadWalletRet != DB_LOAD_OK)\n+        {\n+            if (nLoadWalletRet == DB_CORRUPT)\n+            {\n+                delete pWallet;\n+                err << _(\"Error loading \") << strFile << _(\": Wallet corrupted.\");\n+                throw runtime_error(err.str());\n+            }\n+            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+            {\n+                err << _(\"Warning: error reading \") << strFile\n+                    << _(\": All keys read correctly, but transaction data or address book entries might be missing or incorrect.\");\n+                printf(\"%s\\n\", err.str().c_str());\n+                InitWarning(err.str());\n+                err.str(\"\");\n+            }\n+            else if (nLoadWalletRet == DB_TOO_NEW)\n+            {\n+                err << _(\"Error loading \") << strFile << _(\": Wallet requires newer version of Bitcoin.\");\n+                throw runtime_error(err.str());\n+            }\n+            else if (nLoadWalletRet == DB_NEED_REWRITE)\n+            {\n+                err << _(\"Wallet needed to be rewritten: restart Bitcoin to complete.\");\n+                InitError(err.str());\n+                throw runtime_error(err.str());\n+            }\n+            else\n+            {\n+                err << _(\"Error loading \") << strFile << _(\": Unknown database error.\");\n+                throw runtime_error(err.str());\n+            }\n+        }\n+        \n+        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n+        {\n+            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+            if (nMaxVersion == 0) // the -upgradewallet without argument case\n+            {\n+                printf(\"Performing wallet upgrade to %i for wallet %s.\\n\", FEATURE_LATEST, strName.c_str());\n+                nMaxVersion = CLIENT_VERSION;\n+                pWallet->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+            }\n+            else\n+            {\n+                printf(\"Allowing wallet upgrade up to %i for wallet %s.\\n\", nMaxVersion, strName.c_str());\n+            }\n+            if (nMaxVersion < pWallet->GetVersion())\n+            {\n+                err << _(\"Cannot downgrade wallet \") << strName << _(\".\");\n+                printf(\"%s\\n\", err.str().c_str());\n+                err.str(\"\");\n+            }\n+            pWallet->SetMaxVersion(nMaxVersion);\n+        }\n+        \n+        if (fFirstRun)\n+        {\n+            // Create new keyUser and set as default key\n+            RandAddSeedPerfmon();\n+            \n+            CPubKey newDefaultKey;\n+            if (!pWallet->GetKeyFromPool(newDefaultKey, false))\n+            {\n+                err << _(\"Cannot initialize keypool for wallet \") << strName << _(\".\");\n+                printf(\"%s\\n\", err.str().c_str());\n+                err.str(\"\");\n+            }\n+            pWallet->SetDefaultKey(newDefaultKey);\n+            if (!pWallet->SetAddressBookName(pWallet->vchDefaultKey.GetID(), \"\"))\n+            {\n+                err << _(\"Cannot write default address.\");\n+                printf(\"%s\\n\", err.str().c_str());\n+                err.str(\"\");\n+            }\n+        }\n+        \n+        printf(\"    wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+        \n+        boost::shared_ptr<CWallet> spWallet(pWallet);\n+        this->wallets[strName] = spWallet;\n+        RegisterWallet(pWallet);\n+    }\n+    \n+    CBlockIndex *pindexRescan = pindexBest;\n+    if (GetBoolArg(\"-rescan\", false))\n+    {\n+        pindexRescan = pindexGenesisBlock;\n+    }\n+    else\n+    {\n+        CWalletDB walletdb(strFile);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator))\n+        {\n+            pindexRescan = locator.GetBlockIndex();\n+        }\n+        else\n+        {\n+            pindexRescan = pindexGenesisBlock;\n+        }\n+    }\n+    if (pindexBest && pindexBest != pindexRescan)\n+    {\n+        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n+        nStart = GetTimeMillis();\n+        pWallet->ScanForWalletTransactions(pindexRescan, true);\n+        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+        pWallet->SetBestChain(CBlockLocator(pindexBest));\n+        nWalletDBUpdated++;\n+    }\n+}\n+\n+bool CWalletManager::UnloadWallet(const std::string& strName)\n+{\n+    {\n+        LOCK(cs_WalletManager);\n+        if (!wallets.count(strName)) return false;\n+        boost::shared_ptr<CWallet> spWallet(wallets[strName]);\n+        printf(\"Unloading wallet %s\\n\", strName.c_str());\n+        {\n+            LOCK(spWallet->cs_wallet);\n+            UnregisterWallet(spWallet.get());\n+            wallets.erase(strName);\n+        }\n+    }\n+    return true;\n+}\n+\n+void CWalletManager::UnloadAllWallets()\n+{\n+    {\n+        LOCK(cs_WalletManager);\n+        vector<string> vstrNames;\n+        vector<boost::shared_ptr<CWallet> > vpWallets;\n+        BOOST_FOREACH(const wallet_map::value_type& item, wallets)\n+        {\n+            vstrNames.push_back(item.first);\n+            vpWallets.push_back(item.second);\n+        }\n+        \n+        for (unsigned int i = 0; i < vstrNames.size(); i++)\n+        {\n+            printf(\"Unloading wallet %s\\n\", vstrNames[i].c_str());\n+            {\n+                LOCK(vpWallets[i]->cs_wallet);\n+                UnregisterWallet(vpWallets[i].get());\n+                wallets.erase(vstrNames[i]);\n+            }\n+        }\n+    }\n+}\n+\n+boost::shared_ptr<CWallet> CWalletManager::GetWallet(const string& strName)\n+{\n+    {\n+        LOCK(cs_WalletManager);\n+        if (!wallets.count(strName)) {\n+            throw runtime_error(\"CWalletManager::GetWallet() - Wallet not loaded.\");\n+        }\n+        return wallets[strName];\n+    }\n+}\n+\n+const boost::regex CWalletManager::WALLET_NAME_REGEX(\"[a-zA-Z0-9_]*\");\n+const boost::regex CWalletManager::WALLET_FILE_REGEX(\"wallet-([a-zA-Z0-9_]+)\\\\.dat\");\n+\n+bool CWalletManager::IsValidName(const string& strName)\n+{\n+    return boost::regex_match(strName, CWalletManager::WALLET_NAME_REGEX);\n+}\n+\n+vector<string> CWalletManager::GetWalletsAtPath(const boost::filesystem::path& pathWallets)\n+{\n+    vector<string> vstrFiles = GetFilesAtPath(pathWallets, file_option_flags::REGULAR_FILES);\n+    vector<string> vstrNames;\n+    boost::cmatch match;\n+    BOOST_FOREACH(const string& strFile, vstrFiles)\n+    {\n+        if (boost::regex_match(strFile.c_str(), match, CWalletManager::WALLET_FILE_REGEX))\n+            vstrNames.push_back(string(match[1].first, match[1].second));\n+    }\n+    return vstrNames;\n+}"
      },
      {
        "sha": "5db6d075019ffe0155a82c308439038629792552",
        "filename": "src/walletmanager.h",
        "status": "added",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/walletmanager.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d726e56aa0f31b16d202c3654342ea72e6831e4d/src/walletmanager.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletmanager.h?ref=d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "patch": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2012-2013 Eric Lombrozo, The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_WALLETMANAGER_H\n+#define BITCOIN_WALLETMANAGER_H\n+\n+#include \"wallet.h\"\n+\n+#include <stdexcept>\n+\n+#include <boost/shared_ptr.hpp>\n+#include <boost/regex.hpp>\n+#include <boost/thread.hpp>\n+\n+/** A CWalletManager handles loading, unloading, allocation, deallocation, and synchronization of wallet objects.\n+ */\n+typedef std::map<std::string, boost::shared_ptr<CWallet> > wallet_map;\n+class CWalletManager\n+{\n+protected:\n+    static const boost::regex WALLET_NAME_REGEX;\n+    static const boost::regex WALLET_FILE_REGEX;\n+    \n+    mutable CCriticalSection cs_WalletManager;\n+    wallet_map wallets;\n+    \n+public:\n+    ~CWalletManager() { UnloadAllWallets(); }\n+\n+    // Default wallet has empty string for name. \n+    void LoadWallet(const std::string& strName);\n+    void LoadDefaultWallet() { LoadWallet(\"\"); }\n+\n+    bool UnloadWallet(const std::string& strName);\n+    void UnloadAllWallets();\n+    \n+    // GetWallet and GetDefaultWallet throw exception if the wallet is not found.\n+    boost::shared_ptr<CWallet> GetWallet(const std::string& strName);\n+    boost::shared_ptr<CWallet> GetDefaultWallet() { return GetWallet(\"\"); }\n+    \n+    int GetWalletCount() { return wallets.size(); }\n+    wallet_map GetWalletMap() { return wallets; }\n+    bool HaveWallet(const std::string& strName) { return (wallets.count(strName) > 0); }\n+    \n+    static bool IsValidName(const std::string& strName);\n+    static std::vector<std::string> GetWalletsAtPath(const boost::filesystem::path& pathWallets);\n+};\n+\n+#endif // BITCOIN_WALLETMANAGER_H"
      }
    ]
  },
  {
    "sha": "19f569cdd364592d91453fd246b11e44cef3940e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWY1NjljZGQzNjQ1OTJkOTE0NTNmZDI0NmIxMWU0NGNlZjM5NDBl",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-07-09T10:58:22Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-07-09T10:58:22Z"
      },
      "message": "Added gitian descriptor.",
      "tree": {
        "sha": "6770e75d84b7fe72e8fecc9fbb14cb0b6c1e4c00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6770e75d84b7fe72e8fecc9fbb14cb0b6c1e4c00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19f569cdd364592d91453fd246b11e44cef3940e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19f569cdd364592d91453fd246b11e44cef3940e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19f569cdd364592d91453fd246b11e44cef3940e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19f569cdd364592d91453fd246b11e44cef3940e/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d726e56aa0f31b16d202c3654342ea72e6831e4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d726e56aa0f31b16d202c3654342ea72e6831e4d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "272aa3d36d1ed3fe39532c7ed03fa6fc1965938f",
        "filename": "contrib/gitian-descriptors/gitian.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19f569cdd364592d91453fd246b11e44cef3940e/contrib/gitian-descriptors/gitian.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19f569cdd364592d91453fd246b11e44cef3940e/contrib/gitian-descriptors/gitian.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian.yml?ref=19f569cdd364592d91453fd246b11e44cef3940e",
        "patch": "@@ -13,6 +13,7 @@ packages:\n - \"libboost-filesystem-dev\"\n - \"libboost-program-options-dev\"\n - \"libboost-thread-dev\"\n+- \"libboost-regex-dev\"\n - \"libssl-dev\"\n - \"git-core\"\n - \"unzip\""
      }
    ]
  }
]