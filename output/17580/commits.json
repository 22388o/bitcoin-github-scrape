[
  {
    "sha": "c53e8f089472722746aa96b835bf80c5c4782676",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTNlOGYwODk0NzI3MjI3NDZhYTk2YjgzNWJmODBjNWM0NzgyNjc2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-21T18:06:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-21T18:06:49Z"
      },
      "message": "refactor: Add explicit DISALLOW_NEGATION ArgsManager flag to clarify flag usage\n\nCurrently, ALLOW_{INT|BOOL|STRING} flags don't do any real validation,\nso current uses of these flags are misleading and will also break\nbackwards compatibility whenever these flags are implemented in a future\nPR (draft PR is #16545).\n\nAn additional complication is that while these flags don't do any real\nsettings validation, they do affect whether setting negation syntax is\nallowed.\n\nFix this mess by disabling ALLOW_{INT|BOOL|STRING} flags until they are\nimplemented, and adding an unambiguous DISALLOW_NEGATION flag. This is\ndone in two commits, with this commit adding the DISALLOW_NEGATION flag,\nand the next commit disabling the ALLOW_{INT|BOOL|STRING} flags.",
      "tree": {
        "sha": "b85bab02d23ccbd91b0c09b9c8329ad46f853340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b85bab02d23ccbd91b0c09b9c8329ad46f853340"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c53e8f089472722746aa96b835bf80c5c4782676",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53e8f089472722746aa96b835bf80c5c4782676",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c53e8f089472722746aa96b835bf80c5c4782676",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53e8f089472722746aa96b835bf80c5c4782676/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5a406f003a060325128db47552089b3254044e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a406f003a060325128db47552089b3254044e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a406f003a060325128db47552089b3254044e3"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 50,
      "deletions": 44
    },
    "files": [
      {
        "sha": "26bd04a326b5843f045fa032796bbed8578e0782",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 39,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c53e8f089472722746aa96b835bf80c5c4782676/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c53e8f089472722746aa96b835bf80c5c4782676/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=c53e8f089472722746aa96b835bf80c5c4782676",
        "patch": "@@ -71,6 +71,7 @@\n #endif\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <optional>\n #include <thread>\n #include <typeinfo>\n #include <univalue.h>\n@@ -185,26 +186,17 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n- *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n+ * Interpret key portion of a \"key=value\" config string. Strip \"section.\" and\n+ * \"no\" prefixes from the key if they are present, updating the section output\n+ * argument if a section was found, and returning false if the key was negated,\n+ * true otherwise.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+static bool InterpretKey(std::string& section, std::string& key)\n {\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n@@ -214,30 +206,37 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string& value,\n+    bool negated,\n+    unsigned int flags,\n+    std::string& error)\n+{\n+    // Return negated settings as false values.\n+    if (negated) {\n+        if (flags & ArgsManager::DISALLOW_NEGATION) {\n+            error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+            return std::nullopt;\n+        }\n+        // Double negatives like -nofoo=0 are supported (but discouraged)\n+        if (!InterpretBool(value)) {\n+            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n+            return true;\n+        }\n         return false;\n     }\n-    return true;\n+    return value;\n }\n \n namespace {\n@@ -354,20 +353,21 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         // Transform -foo to foo\n         key.erase(0, 1);\n         std::string section;\n-        util::SettingsValue value = InterpretOption(section, key, val);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n \n         // Unknown command line options and command line options with dot\n-        // characters (which are returned from InterpretOption with nonempty\n+        // characters (which are returned from InterpretKey with nonempty\n         // section strings) are not valid.\n         if (!flags || !section.empty()) {\n             error = strprintf(\"Invalid parameter %s\", argv[i]);\n             return false;\n         }\n \n-        if (!CheckValid(key, value, *flags, error)) return false;\n+        std::optional<util::SettingsValue> value = InterpretValue(key, val, negated, *flags, error);\n+        if (!value) return false;\n \n-        m_settings.command_line_options[key].push_back(value);\n+        m_settings.command_line_options[key].push_back(*value);\n     }\n \n     // we do not allow -includeconf from command line, only -noincludeconf\n@@ -552,7 +552,7 @@ bool ArgsManager::ReadSettingsFile(std::vector<std::string>* errors)\n     for (const auto& setting : m_settings.rw_settings) {\n         std::string section;\n         std::string key = setting.first;\n-        (void)InterpretOption(section, key, /* value */ {}); // Split setting key into section and argname\n+        (void)InterpretKey(section, key); // Split setting key into section and argname\n         if (!GetArgFlags('-' + key)) {\n             LogPrintf(\"Ignoring unknown rw_settings value %s\\n\", setting.first);\n         }\n@@ -650,6 +650,7 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n \n     LOCK(cs_args);\n     std::map<std::string, Arg>& arg_map = m_available_args[cat];\n+    if ((flags & (ALLOW_ANY | ALLOW_BOOL)) == 0) flags |= DISALLOW_NEGATION; // Temporary, removed in next scripted-diff\n     auto ret = arg_map.emplace(arg_name, Arg{name.substr(eq_index, name.size() - eq_index), help, flags});\n     assert(ret.second); // Make sure an insertion actually happened\n \n@@ -874,13 +875,12 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n     for (const std::pair<std::string, std::string>& option : options) {\n         std::string section;\n         std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n-                return false;\n-            }\n-            m_settings.ro_config[section][key].push_back(value);\n+            std::optional<util::SettingsValue> value = InterpretValue(key, option.second, negated, *flags, error);\n+            if (!value) return false;\n+            m_settings.ro_config[section][key].push_back(*value);\n         } else {\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);"
      },
      {
        "sha": "aa6528340cbd70ad8221fd9aad588ea93d65da24",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c53e8f089472722746aa96b835bf80c5c4782676/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c53e8f089472722746aa96b835bf80c5c4782676/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=c53e8f089472722746aa96b835bf80c5c4782676",
        "patch": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation\n+        ALLOW_BOOL = 0x02,   //!< unimplemented, draft implementation in #16545\n+        ALLOW_INT = 0x04,    //!< unimplemented, draft implementation in #16545\n+        ALLOW_STRING = 0x08, //!< unimplemented, draft implementation in #16545\n+        ALLOW_LIST = 0x10,   //!< unimplemented, draft implementation in #16545\n+        DISALLOW_NEGATION = 0x20, //! disallow -nofoo syntax\n+\n         DEBUG_ONLY = 0x100,\n         /* Some options would cause cross-contamination if values for\n          * mainnet were used while running on regtest/testnet (or vice-versa)."
      }
    ]
  },
  {
    "sha": "cad1730ef451207b9c1ff28ffe863e993f2268b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWQxNzMwZWY0NTEyMDdiOWMxZmYyOGZmZTg2M2U5OTNmMjI2OGI3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-19T01:08:08Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-21T18:06:49Z"
      },
      "message": "scripted-diff: disable unimplemented ArgsManager BOOL/INT/STRING flags\n\nThis commit does not change behavior in any way. See previous commit for\ncomplete rationale, but these flags are being disabled because they\naren't implemented and will otherwise break backwards compatibility when\nthey are implemented.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's:ALLOW_.*unimplemented:// &:' src/util/system.h\nsed -i '/DISALLOW_NEGATION.*scripted-diff/d' src/util/system.cpp\ngit grep -l 'ArgsManager::ALLOW_\\(INT\\|STRING\\)' -- ':!src/util/system.h' ':!src/test' | xargs sed -i 's/ArgsManager::ALLOW_\\(INT\\|STRING\\)/ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION/g'\ngit grep -l 'ALLOW_BOOL' -- ':!src/util' ':!src/util/system.h' | xargs sed -i 's/ALLOW_BOOL/ALLOW_ANY/g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "7d545ee65fd48f323abacd0a0700928e8ecd55fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d545ee65fd48f323abacd0a0700928e8ecd55fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cad1730ef451207b9c1ff28ffe863e993f2268b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad1730ef451207b9c1ff28ffe863e993f2268b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cad1730ef451207b9c1ff28ffe863e993f2268b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad1730ef451207b9c1ff28ffe863e993f2268b7/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c53e8f089472722746aa96b835bf80c5c4782676",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53e8f089472722746aa96b835bf80c5c4782676",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c53e8f089472722746aa96b835bf80c5c4782676"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 23,
      "deletions": 24
    },
    "files": [
      {
        "sha": "e600c4983118050f210bb4acd1e560827c3ea45f",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "patch": "@@ -74,7 +74,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional integer argument from 0 to 4 can be passed for different peers listings (default: 0). Pass \\\"help\\\" for detailed help documentation.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n     SetupChainParamsBaseOptions(argsman);\n-    argsman.AddArg(\"-color=<when>\", strprintf(\"Color setting for CLI output (default: %s). Valid values: always, auto (add color codes when standard output is connected to a terminal and OS is not WIN32), never.\", DEFAULT_COLOR_SETTING), ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-color=<when>\", strprintf(\"Color setting for CLI output (default: %s). Valid values: always, auto (add color codes when standard output is connected to a terminal and OS is not WIN32), never.\", DEFAULT_COLOR_SETTING), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -83,7 +83,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password. When combined with -stdinwalletpassphrase, -stdinrpcpass consumes the first line, and -stdinwalletpassphrase consumes the second.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "13925c2e2d1097da0e4c9f8a8af9becac6ba7261",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "patch": "@@ -27,9 +27,9 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n "
      },
      {
        "sha": "5d159671d069518e372a5c092d16de8852bf9ec6",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "patch": "@@ -24,8 +24,8 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "9ca1ebb0cc35a7c5a83ed6658e8f568bc20302f7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "patch": "@@ -423,10 +423,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor onion service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u). This limit does not apply to connections manually added via -addnode or the addnode RPC, which have a separate limit of %u.\", DEFAULT_MAX_PEER_CONNECTIONS, MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -436,7 +436,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -445,7 +445,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify a p2p connection timeout delay in seconds. After connecting to a peer, wait this amount of time before considering disconnection based on inactivity (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -460,7 +460,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n #ifdef USE_NATPMP\n-    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n     hidden_args.emplace_back(\"-natpmp\");\n #endif // USE_NATPMP\n@@ -512,7 +512,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -549,13 +549,13 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n \n #if HAVE_DECL_FORK\n-    argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-daemonwait\", strprintf(\"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\", DEFAULT_DAEMONWAIT), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemonwait\", strprintf(\"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\", DEFAULT_DAEMONWAIT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-daemon\");\n     hidden_args.emplace_back(\"-daemonwait\");"
      },
      {
        "sha": "7266fec4076c8c568c94448f174acf83654f0d52",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "patch": "@@ -194,8 +194,8 @@ BOOST_AUTO_TEST_CASE(boolargno)\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n-    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_BOOL);\n-    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_BOOL);\n+    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n+    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n     SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});"
      },
      {
        "sha": "fd7efc6974d05b46448a46c8ffd6693a53cc6d00",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "patch": "@@ -650,7 +650,6 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n \n     LOCK(cs_args);\n     std::map<std::string, Arg>& arg_map = m_available_args[cat];\n-    if ((flags & (ALLOW_ANY | ALLOW_BOOL)) == 0) flags |= DISALLOW_NEGATION; // Temporary, removed in next scripted-diff\n     auto ret = arg_map.emplace(arg_name, Arg{name.substr(eq_index, name.size() - eq_index), help, flags});\n     assert(ret.second); // Make sure an insertion actually happened\n "
      },
      {
        "sha": "9597499103e18c1b66c346a350808ec2c12170cf",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "patch": "@@ -164,10 +164,10 @@ class ArgsManager\n      */\n     enum Flags : uint32_t {\n         ALLOW_ANY = 0x01,    //!< disable validation\n-        ALLOW_BOOL = 0x02,   //!< unimplemented, draft implementation in #16545\n-        ALLOW_INT = 0x04,    //!< unimplemented, draft implementation in #16545\n-        ALLOW_STRING = 0x08, //!< unimplemented, draft implementation in #16545\n-        ALLOW_LIST = 0x10,   //!< unimplemented, draft implementation in #16545\n+        // ALLOW_BOOL = 0x02,   //!< unimplemented, draft implementation in #16545\n+        // ALLOW_INT = 0x04,    //!< unimplemented, draft implementation in #16545\n+        // ALLOW_STRING = 0x08, //!< unimplemented, draft implementation in #16545\n+        // ALLOW_LIST = 0x10,   //!< unimplemented, draft implementation in #16545\n         DISALLOW_NEGATION = 0x20, //! disallow -nofoo syntax\n \n         DEBUG_ONLY = 0x100,"
      },
      {
        "sha": "ce7abffabed663cbeb59f5bbcab9b591a1a755e0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cad1730ef451207b9c1ff28ffe863e993f2268b7/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "patch": "@@ -83,7 +83,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n \n #ifdef USE_SQLITE\n-    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n #else\n     argsman.AddHiddenArgs({\"-unsafesqlitesync\"});\n #endif"
      }
    ]
  },
  {
    "sha": "75e3ddb981f856612e1ef3ac765e2903d32781f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWUzZGRiOTgxZjg1NjYxMmUxZWYzYWM3NjVlMjkwM2QzMjc4MWY0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-08-23T01:40:41Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-21T18:06:49Z"
      },
      "message": "scripted-diff: Rename overloaded int GetArg to GetIntArg\n\nImprove readability of code, simplify future scripted diff cleanup PRs, and be\nmore consistent with naming for GetBoolArg.\n\nThis will also be useful for replacing runtime settings type checking\nwith compile time checking.\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l GetArg | xargs sed -i 's/GetArg(\\([^)]*\\( [0-9]\\+\\|-1\\|port\\|BaseParams().RPCPort()\\|Params().GetDefaultPort()\\|_TIMEOUT\\|Height\\|_WORKQUEUE\\|_THREADS\\|_MEMPOOL\\|_CONNECTIONS\\|LIMIT\\|SigOp\\|Bytes\\|_SIZE\\|_VERSION\\|_AGE\\|_CHECKS\\|Checks() ? 1 : 0\\|_BANTIME\\|Cache\\|BLOCKS\\|LEVEL\\|Weight\\|Version\\|BUFFER\\|TARGET\\|WEIGHT\\|TXN\\|TRANSACTIONS\\|ADJUSTMENT\\|i64\\|Size\\|nDefault\\|_EXPIRY\\|HEIGHT\\|SIZE\\|SNDHWM\\)\\))/GetIntArg(\\1)/g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "a46514247123b51fe2f9e310538a723223ddfbea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a46514247123b51fe2f9e310538a723223ddfbea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75e3ddb981f856612e1ef3ac765e2903d32781f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e3ddb981f856612e1ef3ac765e2903d32781f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75e3ddb981f856612e1ef3ac765e2903d32781f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e3ddb981f856612e1ef3ac765e2903d32781f4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad1730ef451207b9c1ff28ffe863e993f2268b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cad1730ef451207b9c1ff28ffe863e993f2268b7"
      }
    ],
    "stats": {
      "total": 190,
      "additions": 95,
      "deletions": 95
    },
    "files": [
      {
        "sha": "ff3fdd948a8d0daf960702c1572a291f8cbb4b93",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -687,7 +687,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n     //     3. default port for chain\n     uint16_t port{BaseParams().RPCPort()};\n     SplitHostPort(gArgs.GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n-    port = static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", port));\n+    port = static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", port));\n \n     // Obtain event base\n     raii_event_base base = obtain_event_base();\n@@ -697,7 +697,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n \n     // Set connection timeout\n     {\n-        const int timeout = gArgs.GetArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n+        const int timeout = gArgs.GetIntArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n         if (timeout > 0) {\n             evhttp_connection_set_timeout(evcon.get(), timeout);\n         } else {\n@@ -807,7 +807,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-    const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n+    const int timeout = gArgs.GetIntArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n     const auto deadline{GetTime<std::chrono::microseconds>() + 1s * timeout};\n \n     do {"
      },
      {
        "sha": "e6d44cd69e7b84685e0100546475ba9578597140",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -490,7 +490,7 @@ class CRegTestParams : public CChainParams {\n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n     if (args.IsArgSet(\"-segwitheight\")) {\n-        int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n+        int64_t height = args.GetIntArg(\"-segwitheight\", consensus.SegwitHeight);\n         if (height < 0 || height >= std::numeric_limits<int>::max()) {\n             throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range.\", height));\n         }"
      },
      {
        "sha": "c12749f06cd98dbd8c46244fc66fdeb695babaac",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -289,7 +289,7 @@ static bool ThreadHTTP(struct event_base* base)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    uint16_t http_port{static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort()))};\n+    uint16_t http_port{static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", BaseParams().RPCPort()))};\n     std::vector<std::pair<std::string, uint16_t>> endpoints;\n \n     // Determine what addresses to bind to\n@@ -378,7 +378,7 @@ bool InitHTTPServer()\n         return false;\n     }\n \n-    evhttp_set_timeout(http, gArgs.GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, nullptr);\n@@ -389,7 +389,7 @@ bool InitHTTPServer()\n     }\n \n     LogPrint(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n     g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n@@ -419,7 +419,7 @@ static std::vector<std::thread> g_thread_http_workers;\n void StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n-    int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n     g_thread_http = std::thread(ThreadHTTP, eventBase);\n "
      },
      {
        "sha": "72149cc0c25a5766f2b3894b13dc6a30bbcefff0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -217,7 +217,7 @@ void Shutdown(NodeContext& node)\n     node.banman.reset();\n     node.addrman.reset();\n \n-    if (node.mempool && node.mempool->IsLoaded() && node.args->GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (node.mempool && node.mempool->IsLoaded() && node.args->GetIntArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool(*node.mempool);\n     }\n \n@@ -842,7 +842,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // if using block pruning, then disallow txindex and coinstatsindex\n-    if (args.GetArg(\"-prune\", 0)) {\n+    if (args.GetIntArg(\"-prune\", 0)) {\n         if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n         if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n@@ -862,7 +862,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(nUserBind, size_t(1));\n-    nUserMaxConnections = args.GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n+    nUserMaxConnections = args.GetIntArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     // Trim requested connection counts, to fit into system limitations\n@@ -909,8 +909,8 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = args.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMin = args.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n@@ -923,7 +923,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n-    int64_t nPruneArg = args.GetArg(\"-prune\", 0);\n+    int64_t nPruneArg = args.GetIntArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n         return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n@@ -940,12 +940,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         fPruneMode = true;\n     }\n \n-    nConnectTimeout = args.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n+    nConnectTimeout = args.GetIntArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n     if (nConnectTimeout <= 0) {\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n     }\n \n-    peer_connect_timeout = args.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n+    peer_connect_timeout = args.GetIntArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n         return InitError(Untranslated(\"peertimeout cannot be configured with a negative value.\"));\n     }\n@@ -984,27 +984,27 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     if (!chainparams.IsTestChain() && !fRequireStandard) {\n         return InitError(strprintf(Untranslated(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n     }\n-    nBytesPerSigOp = args.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n+    nBytesPerSigOp = args.GetIntArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n \n     fIsBareMultisigStd = args.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n     fAcceptDatacarrier = args.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n-    nMaxDatacarrierBytes = args.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n+    nMaxDatacarrierBytes = args.GetIntArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     // Option to startup with mocktime set (used for regression testing):\n-    SetMockTime(args.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+    SetMockTime(args.GetIntArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n     if (args.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n         return InitError(Untranslated(\"rpcserialversion must be non-negative.\"));\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n         return InitError(Untranslated(\"Unknown rpcserialversion requested.\"));\n \n-    nMaxTipAge = args.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n+    nMaxTipAge = args.GetIntArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n     if (args.IsArgSet(\"-proxy\") && args.GetArg(\"-proxy\", \"\").empty()) {\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n@@ -1093,7 +1093,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n-    int script_threads = args.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n+    int script_threads = args.GetIntArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (script_threads <= 0) {\n         // -par=0 means autodetect (number of cores - 1 script threads)\n         // -par=-n means \"leave n cores free\" (number of cores - n - 1 script threads)\n@@ -1165,7 +1165,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     const bool ignores_incoming_txs{args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)};\n \n     assert(!node.addrman);\n-    auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n+    auto check_addrman = std::clamp<int32_t>(args.GetIntArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n     node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n     {\n         // Load addresses from peers.dat\n@@ -1182,7 +1182,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n     }\n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetIntArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n \n@@ -1192,7 +1192,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     if (!ignores_incoming_txs) node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n \n     assert(!node.mempool);\n-    int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    int check_ratio = std::min<int>(std::max<int>(args.GetIntArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);\n@@ -1324,7 +1324,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n     int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n@@ -1342,7 +1342,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n@@ -1498,7 +1498,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 for (CChainState* chainstate : chainman.GetAll()) {\n                     if (!is_coinsview_empty(chainstate)) {\n                         uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n-                        if (fHavePruned && args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                             LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                                 MIN_BLOCKS_TO_KEEP);\n                         }\n@@ -1515,8 +1515,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                         if (!CVerifyDB().VerifyDB(\n                                 *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                             strLoadError = _(\"Corrupted block database detected\");\n                             failed_verification = true;\n                             break;\n@@ -1704,11 +1704,11 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n     connOptions.m_msgproc = node.peerman.get();\n-    connOptions.nSendBufferMaxSize = 1000 * args.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n-    connOptions.nReceiveFloodSize = 1000 * args.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+    connOptions.nSendBufferMaxSize = 1000 * args.GetIntArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n+    connOptions.nReceiveFloodSize = 1000 * args.GetIntArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = args.GetArgs(\"-addnode\");\n \n-    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n+    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetIntArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n     for (const std::string& bind_arg : args.GetArgs(\"-bind\")) {"
      },
      {
        "sha": "64ee69f9f011a716a47ee90281d162f4a6e8529c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -72,7 +72,7 @@ static BlockAssembler::Options DefaultOptions()\n     // Block resource limits\n     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT\n     BlockAssembler::Options options;\n-    options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n+    options.nBlockMaxWeight = gArgs.GetIntArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n     CAmount n = 0;\n     if (gArgs.IsArgSet(\"-blockmintxfee\") && ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n)) {\n         options.blockMinFeeRate = CFeeRate(n);\n@@ -125,7 +125,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = gArgs.GetArg(\"-blockversion\", pblock->nVersion);\n+        pblock->nVersion = gArgs.GetIntArg(\"-blockversion\", pblock->nVersion);\n \n     pblock->nTime = GetAdjustedTime();\n     const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();"
      },
      {
        "sha": "2569b4ecda96356533790a7c4671b17f28687483",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -121,7 +121,7 @@ void CConnman::AddAddrFetch(const std::string& strDest)\n \n uint16_t GetListenPort()\n {\n-    return static_cast<uint16_t>(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n+    return static_cast<uint16_t>(gArgs.GetIntArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer"
      },
      {
        "sha": "43324382d7b13e51197d39b248c36cd678fa4bb7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -1300,7 +1300,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n-    size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n+    size_t max_extra_txn = gArgs.GetIntArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)\n         return;\n     if (!vExtraTxnForCompact.size())\n@@ -3310,7 +3310,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n \n                 // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n-                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetIntArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = m_orphanage.LimitOrphans(nMaxOrphanTx);\n                 if (nEvicted > 0) {\n                     LogPrint(BCLog::MEMPOOL, \"orphanage overflow, removed %u tx\\n\", nEvicted);\n@@ -4411,7 +4411,7 @@ void PeerManagerImpl::MaybeSendFeefilter(CNode& pto, std::chrono::microseconds c\n     // peers with the forcerelay permission should not filter txs to us\n     if (pto.HasPermission(NetPermissionFlags::ForceRelay)) return;\n \n-    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};\n \n     if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {"
      },
      {
        "sha": "528b98aa61fa2ce6874c6a048b9e4bcb3a4e5c8e",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -583,19 +583,19 @@ class ChainImpl : public Chain\n     }\n     void getPackageLimits(unsigned int& limit_ancestor_count, unsigned int& limit_descendant_count) override\n     {\n-        limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n     }\n     bool checkChainLimits(const CTransactionRef& tx) override\n     {\n         if (!m_node.mempool) return true;\n         LockPoints lp;\n         CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries ancestors;\n-        auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n-        auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        auto limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        auto limit_ancestor_size = gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        auto limit_descendant_size = gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n         std::string unused_error_string;\n         LOCK(m_node.mempool->cs);\n         return m_node.mempool->CalculateMemPoolAncestors(\n@@ -615,7 +615,7 @@ class ChainImpl : public Chain\n     CFeeRate mempoolMinFee() override\n     {\n         if (!m_node.mempool) return {};\n-        return m_node.mempool->GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        return m_node.mempool->GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     CFeeRate relayMinFee() override { return ::minRelayTxFee; }\n     CFeeRate relayIncrementalFee() override { return ::incrementalRelayFee; }"
      },
      {
        "sha": "4c78fba7526f51397735597b8199354100e65cb7",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -113,7 +113,7 @@ namespace {\n //! Return pruning size that will be used if automatic pruning is enabled.\n int GetPruneTargetGB()\n {\n-    int64_t prune_target_mib = gArgs.GetArg(\"-prune\", 0);\n+    int64_t prune_target_mib = gArgs.GetIntArg(\"-prune\", 0);\n     // >1 means automatic pruning is enabled by config, 1 means manual pruning, 0 means no pruning.\n     return prune_target_mib > 1 ? PruneMiBtoGB(prune_target_mib) : DEFAULT_PRUNE_TARGET_GB;\n }\n@@ -142,7 +142,7 @@ Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_si\n \n     const int min_prune_target_GB = std::ceil(MIN_DISK_SPACE_FOR_BLOCK_FILES / 1e9);\n     ui->pruneGB->setRange(min_prune_target_GB, std::numeric_limits<int>::max());\n-    if (gArgs.GetArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n+    if (gArgs.GetIntArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n         ui->prune->setChecked(true);\n         ui->prune->setEnabled(false);\n     }"
      },
      {
        "sha": "2899772d3c840537bf46ea54d64578329892a492",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -1503,7 +1503,7 @@ RPCHelpMan getblockchaininfo()\n         obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n-        bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n+        bool automatic_pruning = (gArgs.GetIntArg(\"-prune\", 0) != 1);\n         obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n             obj.pushKV(\"prune_target_size\",  nPruneTarget);\n@@ -1650,7 +1650,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));"
      },
      {
        "sha": "0d02ec5c47d8784e7eb0833db25542f9a5d79c0a",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -540,7 +540,7 @@ void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nS\n int RPCSerializationFlags()\n {\n     int flag = 0;\n-    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n+    if (gArgs.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n         flag |= SERIALIZE_TRANSACTION_NO_WITNESS;\n     return flag;\n }"
      },
      {
        "sha": "6f911f4fe7489ab6c82cbdff20d38c2733aaf24b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -96,7 +96,7 @@ void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);"
      },
      {
        "sha": "00403c1a3233ab6f40231156b9bfe3bd231b4209",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -97,7 +97,7 @@ FUZZ_TARGET(system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetArg(s1, i64);\n+    (void)args_manager.GetIntArg(s1, i64);\n     (void)args_manager.GetArg(s1, s2);\n     (void)args_manager.GetArgFlags(s1);\n     (void)args_manager.GetArgs(s1);"
      },
      {
        "sha": "b0c8068ab93d729c75828252299c4eb708b7f87a",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -137,20 +137,20 @@ BOOST_AUTO_TEST_CASE(intarg)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n \n     ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 12);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n \n     ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(doubledash)\n \n     ResetArgs(\"--foo=verbose --bar=1\");\n     BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 0), 1);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)"
      },
      {
        "sha": "74e70da9b688bd61652f1bfa0be07554e5dab593",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -284,9 +284,9 @@ class CheckValueTest : public TestChain100Setup\n         }\n \n         if (expect.default_int) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), *expect.int_value);\n         } else {\n             BOOST_CHECK(!success);\n         }\n@@ -416,8 +416,8 @@ static void TestParse(const std::string& str, bool expected_bool, int64_t expect\n     BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99998), expected_int);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99998), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), expected_int);\n }\n \n // Test bool and int parsing.\n@@ -768,9 +768,9 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n \n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest1\", -1), 12345);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest2\", -1), 81985529216486895LL);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest2\", -1), 81985529216486895LL);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest3\", -1), -1);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest1\", false), true);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);"
      },
      {
        "sha": "049b4015e196dbf2c56a38c948b1a67b11da91cb",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -74,7 +74,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         int64_t nMedian = vTimeOffsets.median();\n         std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n         // Only let other nodes change our time by so much\n-        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n+        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetIntArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n         if (nMedian >= -max_adjustment && nMedian <= max_adjustment) {\n             nTimeOffset = nMedian;\n         } else {"
      },
      {
        "sha": "cd3137cc6c29896f58ce37f6cc6eb8d78c1b70da",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -84,8 +84,8 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(*m_db);\n     size_t count = 0;\n     size_t changed = 0;\n-    size_t batch_size = (size_t)gArgs.GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n-    int crash_simulate = gArgs.GetArg(\"-dbcrashratio\", 0);\n+    size_t batch_size = (size_t)gArgs.GetIntArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n+    int crash_simulate = gArgs.GetIntArg(\"-dbcrashratio\", 0);\n     assert(!hashBlock.IsNull());\n \n     uint256 old_tip = GetBestBlock();"
      },
      {
        "sha": "175c7398af2cb13d6085a2bc582dd749f185ac2e",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -591,7 +591,7 @@ std::string ArgsManager::GetArg(const std::string& strArg, const std::string& st\n     return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n-int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n+int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n     return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());"
      },
      {
        "sha": "9d0193a56eafe2c8228b1f59bc388deab9d49529",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -333,7 +333,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+    int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;\n \n     /**\n      * Return boolean argument or default value"
      },
      {
        "sha": "36eca9c10f21ea267c8aaef73ee73b12907495ee",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -371,8 +371,8 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     LimitMempoolSize(\n         *m_mempool,\n         this->CoinsTip(),\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n-        std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+        std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -423,10 +423,10 @@ class MemPoolAccept\n {\n public:\n     explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&active_chainstate.CoinsTip(), m_pool), m_active_chainstate(active_chainstate),\n-        m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n-        m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n-        m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n-        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n+        m_limit_ancestors(gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n+        m_limit_ancestor_size(gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n+        m_limit_descendants(gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n+        m_limit_descendant_size(gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n     }\n \n     // We put the arguments we're handed into a struct, so we can pass them\n@@ -506,7 +506,7 @@ class MemPoolAccept\n     // Compare a package's feerate against minimum allowed.\n     bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs)\n     {\n-        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n+        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n         if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool min fee not met\", strprintf(\"%d < %d\", package_fee, mempoolRejectFee));\n         }\n@@ -1009,7 +1009,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n@@ -1366,7 +1366,7 @@ void InitScriptExecutionCache() {\n     g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = g_scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n@@ -1995,7 +1995,7 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n {\n     return this->GetCoinsCacheSizeState(\n         m_coinstip_cache_size_bytes,\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n@@ -2620,7 +2620,7 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n-    int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n+    int nStopAtHeight = gArgs.GetIntArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         // Block until the validation queue drains. This should largely\n         // never happen in normal operation, however may happen during\n@@ -3809,7 +3809,7 @@ bool BlockManager::LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkCompar\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (!m_mempool) return;\n-    if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (args.GetIntArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         ::LoadMempool(*m_mempool, *this);\n     }\n     m_mempool->SetIsLoaded(!ShutdownRequested());\n@@ -4489,7 +4489,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mockable_fopen_function)\n {\n     const CChainParams& chainparams = Params();\n-    int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n+    int64_t nExpiryTimeout = gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / \"mempool.dat\", \"rb\")};\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {"
      },
      {
        "sha": "2eb4d3106c2604f39a5479a0378ac532f73329c3",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -375,7 +375,7 @@ void BerkeleyBatch::Flush()\n         nMinutes = 1;\n \n     if (env) { // env is nullptr for dummy databases (i.e. in tests). Don't actually flush if env is nullptr so we don't segfault\n-        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetIntArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n     }\n }\n "
      },
      {
        "sha": "382e8b6116a368d64014f45d3e207917ab2f0ca2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -1488,7 +1488,7 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             } else {\n                 warnings.push_back(\"Range not given, using default keypool range\");\n                 range_start = 0;\n-                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+                range_end = gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n             }\n             next_index = range_start;\n "
      },
      {
        "sha": "fdfb36bb0ac640d8b6ec7f595299352e19ba682f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -331,7 +331,7 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\n     CHDChain& chain = it->second;\n \n     // Top up key pool\n-    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    int64_t target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n \n     // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n     // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n@@ -1259,7 +1259,7 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+            nTargetSize = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         // count amount of available keys (internal, external)\n         // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n@@ -1764,7 +1764,7 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n     if (size > 0) {\n         target_size = size;\n     } else {\n-        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+        target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n     }\n \n     // Calculate the new range_end"
      },
      {
        "sha": "0225b893a231b47c92b57f34918dfa03053caed2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -2704,7 +2704,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n                            _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n     }\n \n-    walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    walletInstance->m_confirm_target = gArgs.GetIntArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     walletInstance->m_signal_rbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n "
      },
      {
        "sha": "a53de34db486f32e1e415798c8c73ca107c6a36d",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e3ddb981f856612e1ef3ac765e2903d32781f4/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "patch": "@@ -47,7 +47,7 @@ CZMQNotificationInterface* CZMQNotificationInterface::Create()\n             std::unique_ptr<CZMQAbstractNotifier> notifier = factory();\n             notifier->SetType(entry.first);\n             notifier->SetAddress(address);\n-            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n+            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetIntArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n             notifiers.push_back(std::move(notifier));\n         }\n     }"
      }
    ]
  },
  {
    "sha": "2111cefe9e7f38f6a0482dffb77b7d83add932e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTExY2VmZTllN2YzOGY2YTA0ODJkZmZiNzdiN2Q4M2FkZDkzMmUz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-23T17:27:27Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-23T17:27:27Z"
      },
      "message": "Merge remote-tracking branch 'origin/pull/22766/head'",
      "tree": {
        "sha": "c2c1919f1708b211cd5db6f9ee6a0369275d7870",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2c1919f1708b211cd5db6f9ee6a0369275d7870"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2111cefe9e7f38f6a0482dffb77b7d83add932e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2111cefe9e7f38f6a0482dffb77b7d83add932e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2111cefe9e7f38f6a0482dffb77b7d83add932e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2111cefe9e7f38f6a0482dffb77b7d83add932e3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1c4a4ed395e825d93e2897088766d842cdb1207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c4a4ed395e825d93e2897088766d842cdb1207",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1c4a4ed395e825d93e2897088766d842cdb1207"
      },
      {
        "sha": "75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e3ddb981f856612e1ef3ac765e2903d32781f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75e3ddb981f856612e1ef3ac765e2903d32781f4"
      }
    ],
    "stats": {
      "total": 321,
      "additions": 163,
      "deletions": 158
    },
    "files": [
      {
        "sha": "ff3fdd948a8d0daf960702c1572a291f8cbb4b93",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -74,7 +74,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional integer argument from 0 to 4 can be passed for different peers listings (default: 0). Pass \\\"help\\\" for detailed help documentation.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n     SetupChainParamsBaseOptions(argsman);\n-    argsman.AddArg(\"-color=<when>\", strprintf(\"Color setting for CLI output (default: %s). Valid values: always, auto (add color codes when standard output is connected to a terminal and OS is not WIN32), never.\", DEFAULT_COLOR_SETTING), ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-color=<when>\", strprintf(\"Color setting for CLI output (default: %s). Valid values: always, auto (add color codes when standard output is connected to a terminal and OS is not WIN32), never.\", DEFAULT_COLOR_SETTING), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -83,7 +83,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password. When combined with -stdinwalletpassphrase, -stdinrpcpass consumes the first line, and -stdinwalletpassphrase consumes the second.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -687,7 +687,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n     //     3. default port for chain\n     uint16_t port{BaseParams().RPCPort()};\n     SplitHostPort(gArgs.GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n-    port = static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", port));\n+    port = static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", port));\n \n     // Obtain event base\n     raii_event_base base = obtain_event_base();\n@@ -697,7 +697,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n \n     // Set connection timeout\n     {\n-        const int timeout = gArgs.GetArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n+        const int timeout = gArgs.GetIntArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n         if (timeout > 0) {\n             evhttp_connection_set_timeout(evcon.get(), timeout);\n         } else {\n@@ -807,7 +807,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-    const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n+    const int timeout = gArgs.GetIntArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n     const auto deadline{GetTime<std::chrono::microseconds>() + 1s * timeout};\n \n     do {"
      },
      {
        "sha": "13925c2e2d1097da0e4c9f8a8af9becac6ba7261",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -27,9 +27,9 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n "
      },
      {
        "sha": "e6d44cd69e7b84685e0100546475ba9578597140",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -490,7 +490,7 @@ class CRegTestParams : public CChainParams {\n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n     if (args.IsArgSet(\"-segwitheight\")) {\n-        int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n+        int64_t height = args.GetIntArg(\"-segwitheight\", consensus.SegwitHeight);\n         if (height < 0 || height >= std::numeric_limits<int>::max()) {\n             throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range.\", height));\n         }"
      },
      {
        "sha": "5d159671d069518e372a5c092d16de8852bf9ec6",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -24,8 +24,8 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "c12749f06cd98dbd8c46244fc66fdeb695babaac",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -289,7 +289,7 @@ static bool ThreadHTTP(struct event_base* base)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    uint16_t http_port{static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort()))};\n+    uint16_t http_port{static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", BaseParams().RPCPort()))};\n     std::vector<std::pair<std::string, uint16_t>> endpoints;\n \n     // Determine what addresses to bind to\n@@ -378,7 +378,7 @@ bool InitHTTPServer()\n         return false;\n     }\n \n-    evhttp_set_timeout(http, gArgs.GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, nullptr);\n@@ -389,7 +389,7 @@ bool InitHTTPServer()\n     }\n \n     LogPrint(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n     g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n@@ -419,7 +419,7 @@ static std::vector<std::thread> g_thread_http_workers;\n void StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n-    int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n     g_thread_http = std::thread(ThreadHTTP, eventBase);\n "
      },
      {
        "sha": "7ae3f3d5f6b9891f77f543aa2ad78aa4ac25240b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -217,7 +217,7 @@ void Shutdown(NodeContext& node)\n     node.banman.reset();\n     node.addrman.reset();\n \n-    if (node.mempool && node.mempool->IsLoaded() && node.args->GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (node.mempool && node.mempool->IsLoaded() && node.args->GetIntArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool(*node.mempool);\n     }\n \n@@ -423,10 +423,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor onion service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u). This limit does not apply to connections manually added via -addnode or the addnode RPC, which have a separate limit of %u.\", DEFAULT_MAX_PEER_CONNECTIONS, MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -436,7 +436,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -445,7 +445,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify a p2p connection timeout delay in seconds. After connecting to a peer, wait this amount of time before considering disconnection based on inactivity (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -460,7 +460,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n #ifdef USE_NATPMP\n-    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n     hidden_args.emplace_back(\"-natpmp\");\n #endif // USE_NATPMP\n@@ -512,7 +512,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -549,13 +549,13 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n \n #if HAVE_DECL_FORK\n-    argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-daemonwait\", strprintf(\"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\", DEFAULT_DAEMONWAIT), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemonwait\", strprintf(\"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\", DEFAULT_DAEMONWAIT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-daemon\");\n     hidden_args.emplace_back(\"-daemonwait\");\n@@ -842,7 +842,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // if using block pruning, then disallow txindex and coinstatsindex\n-    if (args.GetArg(\"-prune\", 0)) {\n+    if (args.GetIntArg(\"-prune\", 0)) {\n         if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n         if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n@@ -867,7 +867,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(nUserBind, size_t(1));\n-    nUserMaxConnections = args.GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n+    nUserMaxConnections = args.GetIntArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     // Trim requested connection counts, to fit into system limitations\n@@ -914,8 +914,8 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = args.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMin = args.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n@@ -928,7 +928,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n-    int64_t nPruneArg = args.GetArg(\"-prune\", 0);\n+    int64_t nPruneArg = args.GetIntArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n         return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n@@ -945,12 +945,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         fPruneMode = true;\n     }\n \n-    nConnectTimeout = args.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n+    nConnectTimeout = args.GetIntArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n     if (nConnectTimeout <= 0) {\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n     }\n \n-    peer_connect_timeout = args.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n+    peer_connect_timeout = args.GetIntArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n         return InitError(Untranslated(\"peertimeout cannot be configured with a negative value.\"));\n     }\n@@ -989,27 +989,27 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     if (!chainparams.IsTestChain() && !fRequireStandard) {\n         return InitError(strprintf(Untranslated(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n     }\n-    nBytesPerSigOp = args.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n+    nBytesPerSigOp = args.GetIntArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n \n     fIsBareMultisigStd = args.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n     fAcceptDatacarrier = args.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n-    nMaxDatacarrierBytes = args.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n+    nMaxDatacarrierBytes = args.GetIntArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     // Option to startup with mocktime set (used for regression testing):\n-    SetMockTime(args.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+    SetMockTime(args.GetIntArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n     if (args.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n         return InitError(Untranslated(\"rpcserialversion must be non-negative.\"));\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n         return InitError(Untranslated(\"Unknown rpcserialversion requested.\"));\n \n-    nMaxTipAge = args.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n+    nMaxTipAge = args.GetIntArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n     if (args.IsArgSet(\"-proxy\") && args.GetArg(\"-proxy\", \"\").empty()) {\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n@@ -1098,7 +1098,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n-    int script_threads = args.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n+    int script_threads = args.GetIntArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (script_threads <= 0) {\n         // -par=0 means autodetect (number of cores - 1 script threads)\n         // -par=-n means \"leave n cores free\" (number of cores - n - 1 script threads)\n@@ -1170,7 +1170,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     const bool ignores_incoming_txs{args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)};\n \n     assert(!node.addrman);\n-    auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n+    auto check_addrman = std::clamp<int32_t>(args.GetIntArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n     node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n     {\n         // Load addresses from peers.dat\n@@ -1187,7 +1187,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n     }\n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetIntArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n \n@@ -1197,7 +1197,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     if (!ignores_incoming_txs) node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n \n     assert(!node.mempool);\n-    int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    int check_ratio = std::min<int>(std::max<int>(args.GetIntArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);\n@@ -1329,7 +1329,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n     int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n@@ -1347,7 +1347,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n@@ -1503,7 +1503,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 for (CChainState* chainstate : chainman.GetAll()) {\n                     if (!is_coinsview_empty(chainstate)) {\n                         uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n-                        if (fHavePruned && args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                             LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                                 MIN_BLOCKS_TO_KEEP);\n                         }\n@@ -1520,8 +1520,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                         if (!CVerifyDB().VerifyDB(\n                                 *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                             strLoadError = _(\"Corrupted block database detected\");\n                             failed_verification = true;\n                             break;\n@@ -1709,11 +1709,11 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n     connOptions.m_msgproc = node.peerman.get();\n-    connOptions.nSendBufferMaxSize = 1000 * args.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n-    connOptions.nReceiveFloodSize = 1000 * args.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+    connOptions.nSendBufferMaxSize = 1000 * args.GetIntArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n+    connOptions.nReceiveFloodSize = 1000 * args.GetIntArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = args.GetArgs(\"-addnode\");\n \n-    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n+    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetIntArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n     for (const std::string& bind_arg : args.GetArgs(\"-bind\")) {"
      },
      {
        "sha": "64ee69f9f011a716a47ee90281d162f4a6e8529c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -72,7 +72,7 @@ static BlockAssembler::Options DefaultOptions()\n     // Block resource limits\n     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT\n     BlockAssembler::Options options;\n-    options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n+    options.nBlockMaxWeight = gArgs.GetIntArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n     CAmount n = 0;\n     if (gArgs.IsArgSet(\"-blockmintxfee\") && ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n)) {\n         options.blockMinFeeRate = CFeeRate(n);\n@@ -125,7 +125,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = gArgs.GetArg(\"-blockversion\", pblock->nVersion);\n+        pblock->nVersion = gArgs.GetIntArg(\"-blockversion\", pblock->nVersion);\n \n     pblock->nTime = GetAdjustedTime();\n     const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();"
      },
      {
        "sha": "2569b4ecda96356533790a7c4671b17f28687483",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -121,7 +121,7 @@ void CConnman::AddAddrFetch(const std::string& strDest)\n \n uint16_t GetListenPort()\n {\n-    return static_cast<uint16_t>(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n+    return static_cast<uint16_t>(gArgs.GetIntArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer"
      },
      {
        "sha": "0fc663a8cb2320391890a1cf9e4e03f1b96d1de1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -1300,7 +1300,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n-    size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n+    size_t max_extra_txn = gArgs.GetIntArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)\n         return;\n     if (!vExtraTxnForCompact.size())\n@@ -3315,7 +3315,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n \n                 // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n-                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetIntArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = m_orphanage.LimitOrphans(nMaxOrphanTx);\n                 if (nEvicted > 0) {\n                     LogPrint(BCLog::MEMPOOL, \"orphanage overflow, removed %u tx\\n\", nEvicted);\n@@ -4416,7 +4416,7 @@ void PeerManagerImpl::MaybeSendFeefilter(CNode& pto, std::chrono::microseconds c\n     // peers with the forcerelay permission should not filter txs to us\n     if (pto.HasPermission(NetPermissionFlags::ForceRelay)) return;\n \n-    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};\n \n     if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {"
      },
      {
        "sha": "13f2630312c590667d08350e10ea177c8046844a",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -583,19 +583,19 @@ class ChainImpl : public Chain\n     }\n     void getPackageLimits(unsigned int& limit_ancestor_count, unsigned int& limit_descendant_count) override\n     {\n-        limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n     }\n     bool checkChainLimits(const CTransactionRef& tx) override\n     {\n         if (!m_node.mempool) return true;\n         LockPoints lp;\n         CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries ancestors;\n-        auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n-        auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        auto limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        auto limit_ancestor_size = gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        auto limit_descendant_size = gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n         std::string unused_error_string;\n         LOCK(m_node.mempool->cs);\n         return m_node.mempool->CalculateMemPoolAncestors(\n@@ -615,7 +615,7 @@ class ChainImpl : public Chain\n     CFeeRate mempoolMinFee() override\n     {\n         if (!m_node.mempool) return {};\n-        return m_node.mempool->GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        return m_node.mempool->GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     CFeeRate relayMinFee() override { return ::minRelayTxFee; }\n     CFeeRate relayIncrementalFee() override { return ::incrementalRelayFee; }"
      },
      {
        "sha": "4c78fba7526f51397735597b8199354100e65cb7",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -113,7 +113,7 @@ namespace {\n //! Return pruning size that will be used if automatic pruning is enabled.\n int GetPruneTargetGB()\n {\n-    int64_t prune_target_mib = gArgs.GetArg(\"-prune\", 0);\n+    int64_t prune_target_mib = gArgs.GetIntArg(\"-prune\", 0);\n     // >1 means automatic pruning is enabled by config, 1 means manual pruning, 0 means no pruning.\n     return prune_target_mib > 1 ? PruneMiBtoGB(prune_target_mib) : DEFAULT_PRUNE_TARGET_GB;\n }\n@@ -142,7 +142,7 @@ Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_si\n \n     const int min_prune_target_GB = std::ceil(MIN_DISK_SPACE_FOR_BLOCK_FILES / 1e9);\n     ui->pruneGB->setRange(min_prune_target_GB, std::numeric_limits<int>::max());\n-    if (gArgs.GetArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n+    if (gArgs.GetIntArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n         ui->prune->setChecked(true);\n         ui->prune->setEnabled(false);\n     }"
      },
      {
        "sha": "2899772d3c840537bf46ea54d64578329892a492",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -1503,7 +1503,7 @@ RPCHelpMan getblockchaininfo()\n         obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n-        bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n+        bool automatic_pruning = (gArgs.GetIntArg(\"-prune\", 0) != 1);\n         obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n             obj.pushKV(\"prune_target_size\",  nPruneTarget);\n@@ -1650,7 +1650,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));"
      },
      {
        "sha": "0d02ec5c47d8784e7eb0833db25542f9a5d79c0a",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -540,7 +540,7 @@ void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nS\n int RPCSerializationFlags()\n {\n     int flag = 0;\n-    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n+    if (gArgs.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n         flag |= SERIALIZE_TRANSACTION_NO_WITNESS;\n     return flag;\n }"
      },
      {
        "sha": "6f911f4fe7489ab6c82cbdff20d38c2733aaf24b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -96,7 +96,7 @@ void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);"
      },
      {
        "sha": "00403c1a3233ab6f40231156b9bfe3bd231b4209",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -97,7 +97,7 @@ FUZZ_TARGET(system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetArg(s1, i64);\n+    (void)args_manager.GetIntArg(s1, i64);\n     (void)args_manager.GetArg(s1, s2);\n     (void)args_manager.GetArgFlags(s1);\n     (void)args_manager.GetArgs(s1);"
      },
      {
        "sha": "b0c8068ab93d729c75828252299c4eb708b7f87a",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -137,20 +137,20 @@ BOOST_AUTO_TEST_CASE(intarg)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n \n     ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 12);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n \n     ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(doubledash)\n \n     ResetArgs(\"--foo=verbose --bar=1\");\n     BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 0), 1);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n@@ -194,8 +194,8 @@ BOOST_AUTO_TEST_CASE(boolargno)\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n-    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_BOOL);\n-    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_BOOL);\n+    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n+    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n     SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});"
      },
      {
        "sha": "74e70da9b688bd61652f1bfa0be07554e5dab593",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -284,9 +284,9 @@ class CheckValueTest : public TestChain100Setup\n         }\n \n         if (expect.default_int) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), *expect.int_value);\n         } else {\n             BOOST_CHECK(!success);\n         }\n@@ -416,8 +416,8 @@ static void TestParse(const std::string& str, bool expected_bool, int64_t expect\n     BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99998), expected_int);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99998), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), expected_int);\n }\n \n // Test bool and int parsing.\n@@ -768,9 +768,9 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n \n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest1\", -1), 12345);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest2\", -1), 81985529216486895LL);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest2\", -1), 81985529216486895LL);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest3\", -1), -1);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest1\", false), true);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);"
      },
      {
        "sha": "049b4015e196dbf2c56a38c948b1a67b11da91cb",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -74,7 +74,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         int64_t nMedian = vTimeOffsets.median();\n         std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n         // Only let other nodes change our time by so much\n-        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n+        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetIntArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n         if (nMedian >= -max_adjustment && nMedian <= max_adjustment) {\n             nTimeOffset = nMedian;\n         } else {"
      },
      {
        "sha": "cd3137cc6c29896f58ce37f6cc6eb8d78c1b70da",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -84,8 +84,8 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(*m_db);\n     size_t count = 0;\n     size_t changed = 0;\n-    size_t batch_size = (size_t)gArgs.GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n-    int crash_simulate = gArgs.GetArg(\"-dbcrashratio\", 0);\n+    size_t batch_size = (size_t)gArgs.GetIntArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n+    int crash_simulate = gArgs.GetIntArg(\"-dbcrashratio\", 0);\n     assert(!hashBlock.IsNull());\n \n     uint256 old_tip = GetBestBlock();"
      },
      {
        "sha": "acd322ae1b89840a9121f5d7c6e10d7e33e00240",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 40,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -71,6 +71,7 @@\n #endif\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <optional>\n #include <thread>\n #include <typeinfo>\n #include <univalue.h>\n@@ -185,26 +186,17 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n- *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n+ * Interpret key portion of a \"key=value\" config string. Strip \"section.\" and\n+ * \"no\" prefixes from the key if they are present, updating the section output\n+ * argument if a section was found, and returning false if the key was negated,\n+ * true otherwise.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+static bool InterpretKey(std::string& section, std::string& key)\n {\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n@@ -214,30 +206,37 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string& value,\n+    bool negated,\n+    unsigned int flags,\n+    std::string& error)\n+{\n+    // Return negated settings as false values.\n+    if (negated) {\n+        if (flags & ArgsManager::DISALLOW_NEGATION) {\n+            error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+            return std::nullopt;\n+        }\n+        // Double negatives like -nofoo=0 are supported (but discouraged)\n+        if (!InterpretBool(value)) {\n+            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n+            return true;\n+        }\n         return false;\n     }\n-    return true;\n+    return value;\n }\n \n namespace {\n@@ -354,20 +353,21 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         // Transform -foo to foo\n         key.erase(0, 1);\n         std::string section;\n-        util::SettingsValue value = InterpretOption(section, key, val);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n \n         // Unknown command line options and command line options with dot\n-        // characters (which are returned from InterpretOption with nonempty\n+        // characters (which are returned from InterpretKey with nonempty\n         // section strings) are not valid.\n         if (!flags || !section.empty()) {\n             error = strprintf(\"Invalid parameter %s\", argv[i]);\n             return false;\n         }\n \n-        if (!CheckValid(key, value, *flags, error)) return false;\n+        std::optional<util::SettingsValue> value = InterpretValue(key, val, negated, *flags, error);\n+        if (!value) return false;\n \n-        m_settings.command_line_options[key].push_back(value);\n+        m_settings.command_line_options[key].push_back(*value);\n     }\n \n     // we do not allow -includeconf from command line, only -noincludeconf\n@@ -552,7 +552,7 @@ bool ArgsManager::ReadSettingsFile(std::vector<std::string>* errors)\n     for (const auto& setting : m_settings.rw_settings) {\n         std::string section;\n         std::string key = setting.first;\n-        (void)InterpretOption(section, key, /* value */ {}); // Split setting key into section and argname\n+        (void)InterpretKey(section, key); // Split setting key into section and argname\n         if (!GetArgFlags('-' + key)) {\n             LogPrintf(\"Ignoring unknown rw_settings value %s\\n\", setting.first);\n         }\n@@ -591,7 +591,7 @@ std::string ArgsManager::GetArg(const std::string& strArg, const std::string& st\n     return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n-int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n+int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n     return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n@@ -874,13 +874,12 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n     for (const std::pair<std::string, std::string>& option : options) {\n         std::string section;\n         std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n-                return false;\n-            }\n-            m_settings.ro_config[section][key].push_back(value);\n+            std::optional<util::SettingsValue> value = InterpretValue(key, option.second, negated, *flags, error);\n+            if (!value) return false;\n+            m_settings.ro_config[section][key].push_back(*value);\n         } else {\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);"
      },
      {
        "sha": "b91f480be316b549a1b42752cb2302404d778540",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation\n+        // ALLOW_BOOL = 0x02,   //!< unimplemented, draft implementation in #16545\n+        // ALLOW_INT = 0x04,    //!< unimplemented, draft implementation in #16545\n+        // ALLOW_STRING = 0x08, //!< unimplemented, draft implementation in #16545\n+        // ALLOW_LIST = 0x10,   //!< unimplemented, draft implementation in #16545\n+        DISALLOW_NEGATION = 0x20, //! disallow -nofoo syntax\n+\n         DEBUG_ONLY = 0x100,\n         /* Some options would cause cross-contamination if values for\n          * mainnet were used while running on regtest/testnet (or vice-versa).\n@@ -327,7 +333,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+    int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;\n \n     /**\n      * Return boolean argument or default value"
      },
      {
        "sha": "36eca9c10f21ea267c8aaef73ee73b12907495ee",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -371,8 +371,8 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     LimitMempoolSize(\n         *m_mempool,\n         this->CoinsTip(),\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n-        std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+        std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -423,10 +423,10 @@ class MemPoolAccept\n {\n public:\n     explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&active_chainstate.CoinsTip(), m_pool), m_active_chainstate(active_chainstate),\n-        m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n-        m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n-        m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n-        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n+        m_limit_ancestors(gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n+        m_limit_ancestor_size(gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n+        m_limit_descendants(gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n+        m_limit_descendant_size(gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n     }\n \n     // We put the arguments we're handed into a struct, so we can pass them\n@@ -506,7 +506,7 @@ class MemPoolAccept\n     // Compare a package's feerate against minimum allowed.\n     bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs)\n     {\n-        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n+        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n         if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool min fee not met\", strprintf(\"%d < %d\", package_fee, mempoolRejectFee));\n         }\n@@ -1009,7 +1009,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n@@ -1366,7 +1366,7 @@ void InitScriptExecutionCache() {\n     g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = g_scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n@@ -1995,7 +1995,7 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n {\n     return this->GetCoinsCacheSizeState(\n         m_coinstip_cache_size_bytes,\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n@@ -2620,7 +2620,7 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n-    int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n+    int nStopAtHeight = gArgs.GetIntArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         // Block until the validation queue drains. This should largely\n         // never happen in normal operation, however may happen during\n@@ -3809,7 +3809,7 @@ bool BlockManager::LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkCompar\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (!m_mempool) return;\n-    if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (args.GetIntArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         ::LoadMempool(*m_mempool, *this);\n     }\n     m_mempool->SetIsLoaded(!ShutdownRequested());\n@@ -4489,7 +4489,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mockable_fopen_function)\n {\n     const CChainParams& chainparams = Params();\n-    int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n+    int64_t nExpiryTimeout = gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / \"mempool.dat\", \"rb\")};\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {"
      },
      {
        "sha": "2eb4d3106c2604f39a5479a0378ac532f73329c3",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -375,7 +375,7 @@ void BerkeleyBatch::Flush()\n         nMinutes = 1;\n \n     if (env) { // env is nullptr for dummy databases (i.e. in tests). Don't actually flush if env is nullptr so we don't segfault\n-        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetIntArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n     }\n }\n "
      },
      {
        "sha": "ce7abffabed663cbeb59f5bbcab9b591a1a755e0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -83,7 +83,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n \n #ifdef USE_SQLITE\n-    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n #else\n     argsman.AddHiddenArgs({\"-unsafesqlitesync\"});\n #endif"
      },
      {
        "sha": "382e8b6116a368d64014f45d3e207917ab2f0ca2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -1488,7 +1488,7 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             } else {\n                 warnings.push_back(\"Range not given, using default keypool range\");\n                 range_start = 0;\n-                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+                range_end = gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n             }\n             next_index = range_start;\n "
      },
      {
        "sha": "fdfb36bb0ac640d8b6ec7f595299352e19ba682f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -331,7 +331,7 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\n     CHDChain& chain = it->second;\n \n     // Top up key pool\n-    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    int64_t target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n \n     // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n     // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n@@ -1259,7 +1259,7 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+            nTargetSize = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         // count amount of available keys (internal, external)\n         // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n@@ -1764,7 +1764,7 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n     if (size > 0) {\n         target_size = size;\n     } else {\n-        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+        target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n     }\n \n     // Calculate the new range_end"
      },
      {
        "sha": "0225b893a231b47c92b57f34918dfa03053caed2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -2704,7 +2704,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n                            _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n     }\n \n-    walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    walletInstance->m_confirm_target = gArgs.GetIntArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     walletInstance->m_signal_rbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n "
      },
      {
        "sha": "a53de34db486f32e1e415798c8c73ca107c6a36d",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2111cefe9e7f38f6a0482dffb77b7d83add932e3/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "patch": "@@ -47,7 +47,7 @@ CZMQNotificationInterface* CZMQNotificationInterface::Create()\n             std::unique_ptr<CZMQAbstractNotifier> notifier = factory();\n             notifier->SetType(entry.first);\n             notifier->SetAddress(address);\n-            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n+            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetIntArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n             notifiers.push_back(std::move(notifier));\n         }\n     }"
      }
    ]
  },
  {
    "sha": "9349a02cc41ea537873dd20636aff51e23870cbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzQ5YTAyY2M0MWVhNTM3ODczZGQyMDYzNmFmZjUxZTIzODcwY2Jl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-08-04T13:36:04Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-23T17:27:27Z"
      },
      "message": "refactor: Implement missing error checking for ArgsManager flags\n\nTrigger startup errors if bitcoin is configured with bad setting values\naccording to flags. Also raise internal errors if settings are registered and\nretrieved with inconsistent flags.\n\nThis change has no effect on behavior because ArgsManager flags were recently\nadded in #16097 and aren't used anywhere yet.",
      "tree": {
        "sha": "0798a7dedec7ed098d532b88440a9cdb227f7a19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0798a7dedec7ed098d532b88440a9cdb227f7a19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9349a02cc41ea537873dd20636aff51e23870cbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9349a02cc41ea537873dd20636aff51e23870cbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9349a02cc41ea537873dd20636aff51e23870cbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9349a02cc41ea537873dd20636aff51e23870cbe/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2111cefe9e7f38f6a0482dffb77b7d83add932e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2111cefe9e7f38f6a0482dffb77b7d83add932e3"
      }
    ],
    "stats": {
      "total": 354,
      "additions": 310,
      "deletions": 44
    },
    "files": [
      {
        "sha": "6fbbdcdb8621e0e750465e5c37ce27b8c59347ad",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 7,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9349a02cc41ea537873dd20636aff51e23870cbe/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9349a02cc41ea537873dd20636aff51e23870cbe/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=9349a02cc41ea537873dd20636aff51e23870cbe",
        "patch": "@@ -39,13 +39,21 @@ FUZZ_TARGET(system)\n                 args_manager.SelectConfigNetwork(fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 args_manager.ForceSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                // Avoid Can't call SoftSetBoolArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\n@@ -55,7 +63,16 @@ FUZZ_TARGET(system)\n                 if (args_manager.GetArgFlags(argument_name) != std::nullopt) {\n                     return;\n                 }\n-                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND, options_category);\n+                unsigned int flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+                // Avoid hitting \"ALLOW_{BOOL|INT|STRING} flags would have no effect with ALLOW_ANY present (ALLOW_ANY disables validation)\"\n+                if (flags & ArgsManager::ALLOW_ANY) {\n+                    flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);\n+                }\n+                // Avoid hitting \"ALLOW_INT would have no effect with ALLOW_STRING present (any valid integer is also a valid string)\"\n+                if (flags & ArgsManager::ALLOW_STRING) {\n+                    flags &= ~ArgsManager::ALLOW_INT;\n+                }\n+                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), flags & ~ArgsManager::COMMAND, options_category);\n             },\n             [&] {\n                 // Avoid hitting:\n@@ -97,11 +114,23 @@ FUZZ_TARGET(system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetIntArg(s1, i64);\n-    (void)args_manager.GetArg(s1, s2);\n+    try {\n+        (void)args_manager.GetIntArg(s1, i64);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetArg(s1, s2);\n+    } catch (const std::logic_error&) {\n+    }\n     (void)args_manager.GetArgFlags(s1);\n-    (void)args_manager.GetArgs(s1);\n-    (void)args_manager.GetBoolArg(s1, b);\n+    try {\n+        (void)args_manager.GetArgs(s1);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetBoolArg(s1, b);\n+    } catch (const std::logic_error&) {\n+    }\n     try {\n         (void)args_manager.GetChainName();\n     } catch (const std::runtime_error&) {"
      },
      {
        "sha": "e66e16f3f518546ca2291d18f736a87df7a39694",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 140,
        "deletions": 9,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9349a02cc41ea537873dd20636aff51e23870cbe/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9349a02cc41ea537873dd20636aff51e23870cbe/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=9349a02cc41ea537873dd20636aff51e23870cbe",
        "patch": "@@ -269,7 +269,7 @@ class CheckValueTest : public TestChain100Setup\n \n         if (expect.error) {\n             BOOST_CHECK(!success);\n-            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);\n+            BOOST_CHECK_EQUAL(error, expect.error);\n         } else {\n             BOOST_CHECK(success);\n             BOOST_CHECK_EQUAL(error, \"\");\n@@ -279,16 +279,16 @@ class CheckValueTest : public TestChain100Setup\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n         } else if (expect.string_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", \"zzzzz\"), std::logic_error);\n         }\n \n         if (expect.default_int) {\n             BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n             BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), *expect.int_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetIntArg(\"-value\", 99999), std::logic_error);\n         }\n \n         if (expect.default_bool) {\n@@ -297,15 +297,16 @@ class CheckValueTest : public TestChain100Setup\n         } else if (expect.bool_value) {\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), *expect.bool_value);\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), *expect.bool_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", false), std::logic_error);\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", true), std::logic_error);\n         }\n \n         if (expect.list_value) {\n             auto l = test.GetArgs(\"-value\");\n             BOOST_CHECK_EQUAL_COLLECTIONS(l.begin(), l.end(), expect.list_value->begin(), expect.list_value->end());\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArgs(\"-value\"), std::logic_error);\n         }\n     }\n };\n@@ -327,6 +328,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assigning explicit int or string\n+    // values. This is useful for arguments like \"-upgradewallet\" or \"-listen\"\n+    // that primarily toggle features on and off, but also accept optional int\n+    // or string values to influence behavior.)\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=true\", Expect{\"true\"}.String(\"true\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=false\", Expect{\"false\"}.String(\"false\").DefaultBool());\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckSingleValue)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-single\", ArgsManager::ALLOW_INT}});\n+    std::istringstream stream(\"single=1\\nsingle=2\\n\");\n+    std::string error;\n+    BOOST_CHECK(!test.ReadConfigStream(stream, \"file.conf\", error));\n+    BOOST_CHECK_EQUAL(error, \"Multiple values specified for -single in same section of config file.\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckBadFlagCombinations)\n+{\n+    TestArgsManager test;\n+    using M = ArgsManager;\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg1\", \"name\", M::ALLOW_INT | M::ALLOW_ANY, OptionsCategory::OPTIONS), std::logic_error);\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg2\", \"name\", M::ALLOW_INT | M::ALLOW_STRING, OptionsCategory::OPTIONS), std::logic_error);\n }\n \n struct NoIncludeConfTest {"
      },
      {
        "sha": "3ab8a3fff700f23b8fd26ff36a36351b4ed3f531",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 124,
        "deletions": 21,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9349a02cc41ea537873dd20636aff51e23870cbe/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9349a02cc41ea537873dd20636aff51e23870cbe/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=9349a02cc41ea537873dd20636aff51e23870cbe",
        "patch": "@@ -218,7 +218,7 @@ static bool InterpretKey(std::string& section, std::string& key)\n  * isn't allowed by the flags, otherwise return the parsed value.\n  */\n static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n-    const std::string& value,\n+    const std::string* value,\n     bool negated,\n     unsigned int flags,\n     std::string& error)\n@@ -229,14 +229,77 @@ static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n             error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n             return std::nullopt;\n         }\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n+        if (flags & ArgsManager::ALLOW_ANY) {\n+            // Double negatives like -nokey=0 are supported (but discouraged)\n+            if (value && !InterpretBool(*value)) {\n+                LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, *value);\n+                return true;\n+            }\n+        } else if (value && *value != \"1\") {\n+            error = strprintf(\"Can not negate -%s at the same time as setting value '%s'.\", key, *value);\n+            return std::nullopt;\n         }\n         return false;\n     }\n-    return value;\n+\n+    // If validation was disabled with ALLOW_ANY, handle negation above, but\n+    // otherwise always return the value as a string.\n+    if (flags & ArgsManager::ALLOW_ANY) {\n+        return value ? *value : \"\";\n+    }\n+\n+    // Allow -key=\"\" settings. These are useful on the command line to reset\n+    // settings specified in the config file back to default values.\n+    if (value && value->empty()) return util::SettingsValue{\"\"};\n+\n+    // Return parsed bool, int, and string values if allowed by flags.\n+    int64_t parsed_int;\n+    if ((flags & ArgsManager::ALLOW_STRING) && value) return util::SettingsValue{*value};\n+    if ((flags & ArgsManager::ALLOW_INT) && value && ParseInt64(*value, &parsed_int)) return util::SettingsValue{parsed_int};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && value && *value == \"0\") return util::SettingsValue{false};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && (!value || *value == \"1\")) return util::SettingsValue{true};\n+\n+    // If didn't return above, settings value is not valid for this key.\n+    if (value) {\n+        error = strprintf(\"Can not set -%s value to '%s'\", key, *value);\n+    } else {\n+        error = strprintf(\"Can not set -%s with no value\", key);\n+    }\n+    error = strprintf(\"%s. %s\", error,\n+                      (flags & ArgsManager::ALLOW_STRING) ? \"It must be set to a string.\" :\n+                      (flags & ArgsManager::ALLOW_INT) ? \"It must be set to an integer.\" :\n+                      (flags & ArgsManager::ALLOW_BOOL) ? \"It must be set to 0 or 1.\" :\n+                      \"It must be left unset.\");\n+    return std::nullopt;\n+}\n+\n+//! Return bool if setting is a bool or number, otherwise return default_value.\n+//! Optionally coerce strings settings as well.\n+static inline bool ValueToBool(const util::SettingsValue& value, bool default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return InterpretBool(value.get_str());\n+    return value.isBool() ? value.get_bool() : value.isNum() ? value.get_int64() != 0 : default_value;\n+}\n+\n+//! Return int64 if setting is a number or bool, otherwise return default_value.\n+//! Optionally coerce string settings as well.\n+static inline int64_t ValueToInt64(const util::SettingsValue& value, int64_t default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return atoi64(value.get_str());\n+    return value.isNum() ? value.get_int64() : value.isFalse() ? 0 : value.isTrue() ? 1 : default_value;\n+}\n+\n+//! Return string if setting is a nonempty string (-setting=abc), \"\" if setting\n+//! is false (-nosetting), otherwise return default_value. Optionally coerce\n+//! bool and number settings to strings as well.\n+static inline std::string ValueToString(const util::SettingsValue& value,\n+    const std::string& default_value,\n+    bool coerce)\n+{\n+    if (coerce && value.isBool()) return value.get_bool() ? \"1\" : \"0\";\n+    if (coerce && value.isNum()) return value.getValStr();\n+    if (coerce && value.isStr()) return value.get_str();\n+    return value.isStr() && !value.get_str().empty() ? value.get_str() : value.isFalse() ? \"\" : default_value;\n }\n \n namespace {\n@@ -317,7 +380,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n #endif\n \n         if (key == \"-\") break; //bitcoin-tx using stdin\n-        std::string val;\n+        std::optional<std::string> val;\n         size_t is_index = key.find('=');\n         if (is_index != std::string::npos) {\n             val = key.substr(is_index + 1);\n@@ -364,7 +427,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             return false;\n         }\n \n-        std::optional<util::SettingsValue> value = InterpretValue(key, val, negated, *flags, error);\n+        std::optional<util::SettingsValue> value = InterpretValue(key, val ? &*val : nullptr, negated, *flags, error);\n         if (!value) return false;\n \n         m_settings.command_line_options[key].push_back(*value);\n@@ -394,6 +457,29 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n     return std::nullopt;\n }\n \n+/**\n+ * Check that arg has the right flags for use in a given context. Raises\n+ * logic_error if this isn't the case, indicating the argument was registered\n+ * with bad AddArg flags.\n+ *\n+ * Returns true if the arg is registered and has checking enabled. Returns false\n+ * if the arg was never registered or checking was disabled with ALLOW_ANY.\n+ */\n+bool ArgsManager::CheckArgFlags(const std::string& name,\n+    unsigned int require,\n+    unsigned int forbid,\n+    const char* context) const\n+{\n+    std::optional<unsigned int> flags = GetArgFlags(name);\n+    if (!flags || *flags & ArgsManager::ALLOW_ANY) return false;\n+    if ((*flags & require) != require || (*flags & forbid) != 0) {\n+        throw std::logic_error(\n+            strprintf(\"Bug: Can't call %s on arg %s registered with flags 0x%08x (requires 0x%x, disallows 0x%x)\",\n+                context, name, *flags, require, forbid));\n+    }\n+    return true;\n+}\n+\n const fs::path& ArgsManager::GetBlocksDirPath() const\n {\n     LOCK(cs_args);\n@@ -482,9 +568,10 @@ std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING | ALLOW_LIST, /* forbid= */ 0, __func__);\n     std::vector<std::string> result;\n     for (const util::SettingsValue& value : GetSettingsList(strArg)) {\n-        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+        result.push_back(ValueToString(value, \"\", coerce));\n     }\n     return result;\n }\n@@ -587,20 +674,20 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToString(GetSetting(strArg), strDefault, coerce);\n }\n \n int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_INT, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToInt64(GetSetting(strArg), nDefault, coerce);\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ 0, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToBool(GetSetting(strArg), fDefault, coerce);\n }\n \n bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n@@ -613,15 +700,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ ALLOW_LIST, __func__);\n+    if (IsArgSet(strArg)) return false;\n+    m_settings.forced_settings[SettingName(strArg)] = fValue;\n+    return true;\n }\n \n void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ 0, __func__);\n     m_settings.forced_settings[SettingName(strArg)] = strValue;\n }\n \n@@ -656,6 +745,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_{BOOL|INT|STRING} flags would have no effect with \"\n+                                         \"ALLOW_ANY present (ALLOW_ANY disables validation)\", arg_name));\n+    }\n+\n+    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT would have no effect with ALLOW_STRING present \"\n+                                         \"(any valid integer is also a valid string)\", arg_name));\n+    }\n }\n \n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n@@ -877,7 +976,11 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n         bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            std::optional<util::SettingsValue> value = InterpretValue(key, option.second, negated, *flags, error);\n+            if (!(*flags & (ALLOW_ANY | ALLOW_LIST)) && m_settings.ro_config[section].count(key)) {\n+                error = strprintf(\"Multiple values specified for -%s in same section of config file.\", key);\n+                return false;\n+            }\n+            std::optional<util::SettingsValue> value = InterpretValue(key, &option.second, negated, *flags, error);\n             if (!value) return false;\n             m_settings.ro_config[section][key].push_back(*value);\n         } else {\n@@ -991,7 +1094,7 @@ std::string ArgsManager::GetChainName() const\n         util::SettingsValue value = util::GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n             /* ignore_default_section_config= */ false,\n             /* get_chain_name= */ true);\n-        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+        return ValueToBool(value, /* default= */ false, /* coerce= */ true);\n     };\n \n     const bool fRegTest = get_net(\"-regtest\");"
      },
      {
        "sha": "09fbfc4b52b65d152aea4a10ef82230eb634a9aa",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9349a02cc41ea537873dd20636aff51e23870cbe/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9349a02cc41ea537873dd20636aff51e23870cbe/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=9349a02cc41ea537873dd20636aff51e23870cbe",
        "patch": "@@ -164,10 +164,10 @@ class ArgsManager\n      */\n     enum Flags : uint32_t {\n         ALLOW_ANY = 0x01,    //!< disable validation\n-        // ALLOW_BOOL = 0x02,   //!< unimplemented, draft implementation in #16545\n-        // ALLOW_INT = 0x04,    //!< unimplemented, draft implementation in #16545\n-        // ALLOW_STRING = 0x08, //!< unimplemented, draft implementation in #16545\n-        // ALLOW_LIST = 0x10,   //!< unimplemented, draft implementation in #16545\n+        ALLOW_BOOL = 0x02,   //!< allow -foo=1, -foo=0, -foo, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_INT = 0x04,    //!< allow -foo=123, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_STRING = 0x08, //!< allow -foo=abc, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_LIST = 0x10,   //!< allow multiple -foo=bar -foo=baz values\n         DISALLOW_NEGATION = 0x20, //! disallow -nofoo syntax\n \n         DEBUG_ONLY = 0x100,\n@@ -202,6 +202,8 @@ class ArgsManager\n     mutable fs::path m_cached_datadir_path GUARDED_BY(cs_args);\n     mutable fs::path m_cached_network_datadir_path GUARDED_BY(cs_args);\n \n+    bool CheckArgFlags(const std::string& name, unsigned int require, unsigned int forbid, const char* context) const;\n+\n     [[nodiscard]] bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n     /**\n@@ -215,9 +217,10 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unset, true if \"-setting\" argument was\n+     * passed, false if \"-nosetting\" argument was passed, and a string, integer,\n+     * or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a\n+     * \"-setting=value\" argument was passed.\n      */\n     util::SettingsValue GetSetting(const std::string& arg) const;\n "
      }
    ]
  },
  {
    "sha": "3b12e540426da25f666bc4722e00432f4d65ee86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjEyZTU0MDQyNmRhMjVmNjY2YmM0NzIyZTAwNDMyZjRkNjVlZTg2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-23T17:27:27Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-23T17:27:27Z"
      },
      "message": "Merge remote-tracking branch 'origin/pull/16545/head'",
      "tree": {
        "sha": "0798a7dedec7ed098d532b88440a9cdb227f7a19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0798a7dedec7ed098d532b88440a9cdb227f7a19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b12e540426da25f666bc4722e00432f4d65ee86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b12e540426da25f666bc4722e00432f4d65ee86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b12e540426da25f666bc4722e00432f4d65ee86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b12e540426da25f666bc4722e00432f4d65ee86/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1c4a4ed395e825d93e2897088766d842cdb1207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c4a4ed395e825d93e2897088766d842cdb1207",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1c4a4ed395e825d93e2897088766d842cdb1207"
      },
      {
        "sha": "9349a02cc41ea537873dd20636aff51e23870cbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9349a02cc41ea537873dd20636aff51e23870cbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9349a02cc41ea537873dd20636aff51e23870cbe"
      }
    ],
    "stats": {
      "total": 645,
      "additions": 458,
      "deletions": 187
    },
    "files": [
      {
        "sha": "ff3fdd948a8d0daf960702c1572a291f8cbb4b93",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -74,7 +74,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional integer argument from 0 to 4 can be passed for different peers listings (default: 0). Pass \\\"help\\\" for detailed help documentation.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n     SetupChainParamsBaseOptions(argsman);\n-    argsman.AddArg(\"-color=<when>\", strprintf(\"Color setting for CLI output (default: %s). Valid values: always, auto (add color codes when standard output is connected to a terminal and OS is not WIN32), never.\", DEFAULT_COLOR_SETTING), ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-color=<when>\", strprintf(\"Color setting for CLI output (default: %s). Valid values: always, auto (add color codes when standard output is connected to a terminal and OS is not WIN32), never.\", DEFAULT_COLOR_SETTING), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcclienttimeout=<n>\", strprintf(\"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)\", DEFAULT_HTTP_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -83,7 +83,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_INT, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcwaittimeout=<n>\", strprintf(\"Timeout in seconds to wait for the RPC server to start, or 0 for no timeout. (default: %d)\", DEFAULT_WAIT_CLIENT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdin\", \"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-stdinrpcpass\", \"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password. When combined with -stdinwalletpassphrase, -stdinrpcpass consumes the first line, and -stdinwalletpassphrase consumes the second.\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -687,7 +687,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n     //     3. default port for chain\n     uint16_t port{BaseParams().RPCPort()};\n     SplitHostPort(gArgs.GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n-    port = static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", port));\n+    port = static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", port));\n \n     // Obtain event base\n     raii_event_base base = obtain_event_base();\n@@ -697,7 +697,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n \n     // Set connection timeout\n     {\n-        const int timeout = gArgs.GetArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n+        const int timeout = gArgs.GetIntArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n         if (timeout > 0) {\n             evhttp_connection_set_timeout(evcon.get(), timeout);\n         } else {\n@@ -807,7 +807,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-    const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n+    const int timeout = gArgs.GetIntArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n     const auto deadline{GetTime<std::chrono::microseconds>() + 1s * timeout};\n \n     do {"
      },
      {
        "sha": "13925c2e2d1097da0e4c9f8a8af9becac6ba7261",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -27,9 +27,9 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_STRING, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n "
      },
      {
        "sha": "e6d44cd69e7b84685e0100546475ba9578597140",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -490,7 +490,7 @@ class CRegTestParams : public CChainParams {\n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n     if (args.IsArgSet(\"-segwitheight\")) {\n-        int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n+        int64_t height = args.GetIntArg(\"-segwitheight\", consensus.SegwitHeight);\n         if (height < 0 || height >= std::numeric_limits<int>::max()) {\n             throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range.\", height));\n         }"
      },
      {
        "sha": "5d159671d069518e372a5c092d16de8852bf9ec6",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -24,8 +24,8 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "c12749f06cd98dbd8c46244fc66fdeb695babaac",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -289,7 +289,7 @@ static bool ThreadHTTP(struct event_base* base)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    uint16_t http_port{static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort()))};\n+    uint16_t http_port{static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", BaseParams().RPCPort()))};\n     std::vector<std::pair<std::string, uint16_t>> endpoints;\n \n     // Determine what addresses to bind to\n@@ -378,7 +378,7 @@ bool InitHTTPServer()\n         return false;\n     }\n \n-    evhttp_set_timeout(http, gArgs.GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, nullptr);\n@@ -389,7 +389,7 @@ bool InitHTTPServer()\n     }\n \n     LogPrint(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n     g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n@@ -419,7 +419,7 @@ static std::vector<std::thread> g_thread_http_workers;\n void StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n-    int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n     g_thread_http = std::thread(ThreadHTTP, eventBase);\n "
      },
      {
        "sha": "7ae3f3d5f6b9891f77f543aa2ad78aa4ac25240b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -217,7 +217,7 @@ void Shutdown(NodeContext& node)\n     node.banman.reset();\n     node.addrman.reset();\n \n-    if (node.mempool && node.mempool->IsLoaded() && node.args->GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (node.mempool && node.mempool->IsLoaded() && node.args->GetIntArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool(*node.mempool);\n     }\n \n@@ -423,10 +423,10 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listenonion\", strprintf(\"Automatically create Tor onion service (default: %d)\", DEFAULT_LISTEN_ONION), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-maxconnections=<n>\", strprintf(\"Maintain at most <n> connections to peers (default: %u). This limit does not apply to connections manually added via -addnode or the addnode RPC, which have a separate limit of %u.\", DEFAULT_MAX_PEER_CONNECTIONS, MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -436,7 +436,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h). Limit does not apply to peers with 'download' permission. 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -445,7 +445,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify a p2p connection timeout delay in seconds. After connecting to a peer, wait this amount of time before considering disconnection based on inactivity (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -460,7 +460,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     hidden_args.emplace_back(\"-upnp\");\n #endif\n #ifdef USE_NATPMP\n-    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-natpmp\", strprintf(\"Use NAT-PMP to map the listening port (default: %s)\", DEFAULT_NATPMP ? \"1 when listening and no -proxy\" : \"0\"), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n #else\n     hidden_args.emplace_back(\"-natpmp\");\n #endif // USE_NATPMP\n@@ -512,7 +512,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-capturemessages\", \"Capture all P2P messages to disk\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -549,13 +549,13 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_BOOL, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n \n #if HAVE_DECL_FORK\n-    argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-daemonwait\", strprintf(\"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\", DEFAULT_DAEMONWAIT), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemon\", strprintf(\"Run in the background as a daemon and accept commands (default: %d)\", DEFAULT_DAEMON), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-daemonwait\", strprintf(\"Wait for initialization to be finished before exiting. This implies -daemon (default: %d)\", DEFAULT_DAEMONWAIT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #else\n     hidden_args.emplace_back(\"-daemon\");\n     hidden_args.emplace_back(\"-daemonwait\");\n@@ -842,7 +842,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // if using block pruning, then disallow txindex and coinstatsindex\n-    if (args.GetArg(\"-prune\", 0)) {\n+    if (args.GetIntArg(\"-prune\", 0)) {\n         if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n         if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n@@ -867,7 +867,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(nUserBind, size_t(1));\n-    nUserMaxConnections = args.GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n+    nUserMaxConnections = args.GetIntArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     // Trim requested connection counts, to fit into system limitations\n@@ -914,8 +914,8 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = args.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMin = args.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n@@ -928,7 +928,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n-    int64_t nPruneArg = args.GetArg(\"-prune\", 0);\n+    int64_t nPruneArg = args.GetIntArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n         return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n@@ -945,12 +945,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         fPruneMode = true;\n     }\n \n-    nConnectTimeout = args.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n+    nConnectTimeout = args.GetIntArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n     if (nConnectTimeout <= 0) {\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n     }\n \n-    peer_connect_timeout = args.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n+    peer_connect_timeout = args.GetIntArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n         return InitError(Untranslated(\"peertimeout cannot be configured with a negative value.\"));\n     }\n@@ -989,27 +989,27 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     if (!chainparams.IsTestChain() && !fRequireStandard) {\n         return InitError(strprintf(Untranslated(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n     }\n-    nBytesPerSigOp = args.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n+    nBytesPerSigOp = args.GetIntArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n \n     fIsBareMultisigStd = args.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n     fAcceptDatacarrier = args.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n-    nMaxDatacarrierBytes = args.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n+    nMaxDatacarrierBytes = args.GetIntArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     // Option to startup with mocktime set (used for regression testing):\n-    SetMockTime(args.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+    SetMockTime(args.GetIntArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n     if (args.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n         return InitError(Untranslated(\"rpcserialversion must be non-negative.\"));\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n         return InitError(Untranslated(\"Unknown rpcserialversion requested.\"));\n \n-    nMaxTipAge = args.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n+    nMaxTipAge = args.GetIntArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n     if (args.IsArgSet(\"-proxy\") && args.GetArg(\"-proxy\", \"\").empty()) {\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n@@ -1098,7 +1098,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n-    int script_threads = args.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n+    int script_threads = args.GetIntArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (script_threads <= 0) {\n         // -par=0 means autodetect (number of cores - 1 script threads)\n         // -par=-n means \"leave n cores free\" (number of cores - n - 1 script threads)\n@@ -1170,7 +1170,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     const bool ignores_incoming_txs{args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)};\n \n     assert(!node.addrman);\n-    auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n+    auto check_addrman = std::clamp<int32_t>(args.GetIntArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n     node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n     {\n         // Load addresses from peers.dat\n@@ -1187,7 +1187,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n     }\n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetIntArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n \n@@ -1197,7 +1197,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     if (!ignores_incoming_txs) node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n \n     assert(!node.mempool);\n-    int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    int check_ratio = std::min<int>(std::max<int>(args.GetIntArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);\n@@ -1329,7 +1329,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n     int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n@@ -1347,7 +1347,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n@@ -1503,7 +1503,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 for (CChainState* chainstate : chainman.GetAll()) {\n                     if (!is_coinsview_empty(chainstate)) {\n                         uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n-                        if (fHavePruned && args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                             LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                                 MIN_BLOCKS_TO_KEEP);\n                         }\n@@ -1520,8 +1520,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                         if (!CVerifyDB().VerifyDB(\n                                 *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                             strLoadError = _(\"Corrupted block database detected\");\n                             failed_verification = true;\n                             break;\n@@ -1709,11 +1709,11 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n     connOptions.m_msgproc = node.peerman.get();\n-    connOptions.nSendBufferMaxSize = 1000 * args.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n-    connOptions.nReceiveFloodSize = 1000 * args.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+    connOptions.nSendBufferMaxSize = 1000 * args.GetIntArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n+    connOptions.nReceiveFloodSize = 1000 * args.GetIntArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = args.GetArgs(\"-addnode\");\n \n-    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n+    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetIntArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n     for (const std::string& bind_arg : args.GetArgs(\"-bind\")) {"
      },
      {
        "sha": "64ee69f9f011a716a47ee90281d162f4a6e8529c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -72,7 +72,7 @@ static BlockAssembler::Options DefaultOptions()\n     // Block resource limits\n     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT\n     BlockAssembler::Options options;\n-    options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n+    options.nBlockMaxWeight = gArgs.GetIntArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n     CAmount n = 0;\n     if (gArgs.IsArgSet(\"-blockmintxfee\") && ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n)) {\n         options.blockMinFeeRate = CFeeRate(n);\n@@ -125,7 +125,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = gArgs.GetArg(\"-blockversion\", pblock->nVersion);\n+        pblock->nVersion = gArgs.GetIntArg(\"-blockversion\", pblock->nVersion);\n \n     pblock->nTime = GetAdjustedTime();\n     const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();"
      },
      {
        "sha": "2569b4ecda96356533790a7c4671b17f28687483",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -121,7 +121,7 @@ void CConnman::AddAddrFetch(const std::string& strDest)\n \n uint16_t GetListenPort()\n {\n-    return static_cast<uint16_t>(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n+    return static_cast<uint16_t>(gArgs.GetIntArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer"
      },
      {
        "sha": "0fc663a8cb2320391890a1cf9e4e03f1b96d1de1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -1300,7 +1300,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n-    size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n+    size_t max_extra_txn = gArgs.GetIntArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)\n         return;\n     if (!vExtraTxnForCompact.size())\n@@ -3315,7 +3315,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n \n                 // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n-                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetIntArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = m_orphanage.LimitOrphans(nMaxOrphanTx);\n                 if (nEvicted > 0) {\n                     LogPrint(BCLog::MEMPOOL, \"orphanage overflow, removed %u tx\\n\", nEvicted);\n@@ -4416,7 +4416,7 @@ void PeerManagerImpl::MaybeSendFeefilter(CNode& pto, std::chrono::microseconds c\n     // peers with the forcerelay permission should not filter txs to us\n     if (pto.HasPermission(NetPermissionFlags::ForceRelay)) return;\n \n-    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};\n \n     if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {"
      },
      {
        "sha": "13f2630312c590667d08350e10ea177c8046844a",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -583,19 +583,19 @@ class ChainImpl : public Chain\n     }\n     void getPackageLimits(unsigned int& limit_ancestor_count, unsigned int& limit_descendant_count) override\n     {\n-        limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n     }\n     bool checkChainLimits(const CTransactionRef& tx) override\n     {\n         if (!m_node.mempool) return true;\n         LockPoints lp;\n         CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries ancestors;\n-        auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n-        auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        auto limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        auto limit_ancestor_size = gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        auto limit_descendant_size = gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n         std::string unused_error_string;\n         LOCK(m_node.mempool->cs);\n         return m_node.mempool->CalculateMemPoolAncestors(\n@@ -615,7 +615,7 @@ class ChainImpl : public Chain\n     CFeeRate mempoolMinFee() override\n     {\n         if (!m_node.mempool) return {};\n-        return m_node.mempool->GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        return m_node.mempool->GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     CFeeRate relayMinFee() override { return ::minRelayTxFee; }\n     CFeeRate relayIncrementalFee() override { return ::incrementalRelayFee; }"
      },
      {
        "sha": "4c78fba7526f51397735597b8199354100e65cb7",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -113,7 +113,7 @@ namespace {\n //! Return pruning size that will be used if automatic pruning is enabled.\n int GetPruneTargetGB()\n {\n-    int64_t prune_target_mib = gArgs.GetArg(\"-prune\", 0);\n+    int64_t prune_target_mib = gArgs.GetIntArg(\"-prune\", 0);\n     // >1 means automatic pruning is enabled by config, 1 means manual pruning, 0 means no pruning.\n     return prune_target_mib > 1 ? PruneMiBtoGB(prune_target_mib) : DEFAULT_PRUNE_TARGET_GB;\n }\n@@ -142,7 +142,7 @@ Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_si\n \n     const int min_prune_target_GB = std::ceil(MIN_DISK_SPACE_FOR_BLOCK_FILES / 1e9);\n     ui->pruneGB->setRange(min_prune_target_GB, std::numeric_limits<int>::max());\n-    if (gArgs.GetArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n+    if (gArgs.GetIntArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n         ui->prune->setChecked(true);\n         ui->prune->setEnabled(false);\n     }"
      },
      {
        "sha": "2899772d3c840537bf46ea54d64578329892a492",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -1503,7 +1503,7 @@ RPCHelpMan getblockchaininfo()\n         obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n-        bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n+        bool automatic_pruning = (gArgs.GetIntArg(\"-prune\", 0) != 1);\n         obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n             obj.pushKV(\"prune_target_size\",  nPruneTarget);\n@@ -1650,7 +1650,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));"
      },
      {
        "sha": "0d02ec5c47d8784e7eb0833db25542f9a5d79c0a",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -540,7 +540,7 @@ void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nS\n int RPCSerializationFlags()\n {\n     int flag = 0;\n-    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n+    if (gArgs.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n         flag |= SERIALIZE_TRANSACTION_NO_WITNESS;\n     return flag;\n }"
      },
      {
        "sha": "6f911f4fe7489ab6c82cbdff20d38c2733aaf24b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -96,7 +96,7 @@ void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);"
      },
      {
        "sha": "6fbbdcdb8621e0e750465e5c37ce27b8c59347ad",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 7,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -39,13 +39,21 @@ FUZZ_TARGET(system)\n                 args_manager.SelectConfigNetwork(fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                // Avoid Can't call SoftSetArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 args_manager.ForceSetArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeRandomLengthString(16));\n             },\n             [&] {\n-                args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                // Avoid Can't call SoftSetBoolArg on arg registered with flags 0x8d8d8d00 (requires 0x2, disallows 0x10)\n+                try {\n+                    args_manager.SoftSetBoolArg(fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeBool());\n+                } catch (const std::logic_error&) {\n+                }\n             },\n             [&] {\n                 const OptionsCategory options_category = fuzzed_data_provider.PickValueInArray<OptionsCategory>({OptionsCategory::OPTIONS, OptionsCategory::CONNECTION, OptionsCategory::WALLET, OptionsCategory::WALLET_DEBUG_TEST, OptionsCategory::ZMQ, OptionsCategory::DEBUG_TEST, OptionsCategory::CHAINPARAMS, OptionsCategory::NODE_RELAY, OptionsCategory::BLOCK_CREATION, OptionsCategory::RPC, OptionsCategory::GUI, OptionsCategory::COMMANDS, OptionsCategory::REGISTER_COMMANDS, OptionsCategory::HIDDEN});\n@@ -55,7 +63,16 @@ FUZZ_TARGET(system)\n                 if (args_manager.GetArgFlags(argument_name) != std::nullopt) {\n                     return;\n                 }\n-                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), fuzzed_data_provider.ConsumeIntegral<unsigned int>() & ~ArgsManager::COMMAND, options_category);\n+                unsigned int flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+                // Avoid hitting \"ALLOW_{BOOL|INT|STRING} flags would have no effect with ALLOW_ANY present (ALLOW_ANY disables validation)\"\n+                if (flags & ArgsManager::ALLOW_ANY) {\n+                    flags &= ~(ArgsManager::ALLOW_BOOL | ArgsManager::ALLOW_INT | ArgsManager::ALLOW_STRING);\n+                }\n+                // Avoid hitting \"ALLOW_INT would have no effect with ALLOW_STRING present (any valid integer is also a valid string)\"\n+                if (flags & ArgsManager::ALLOW_STRING) {\n+                    flags &= ~ArgsManager::ALLOW_INT;\n+                }\n+                args_manager.AddArg(argument_name, fuzzed_data_provider.ConsumeRandomLengthString(16), flags & ~ArgsManager::COMMAND, options_category);\n             },\n             [&] {\n                 // Avoid hitting:\n@@ -97,11 +114,23 @@ FUZZ_TARGET(system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetArg(s1, i64);\n-    (void)args_manager.GetArg(s1, s2);\n+    try {\n+        (void)args_manager.GetIntArg(s1, i64);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetArg(s1, s2);\n+    } catch (const std::logic_error&) {\n+    }\n     (void)args_manager.GetArgFlags(s1);\n-    (void)args_manager.GetArgs(s1);\n-    (void)args_manager.GetBoolArg(s1, b);\n+    try {\n+        (void)args_manager.GetArgs(s1);\n+    } catch (const std::logic_error&) {\n+    }\n+    try {\n+        (void)args_manager.GetBoolArg(s1, b);\n+    } catch (const std::logic_error&) {\n+    }\n     try {\n         (void)args_manager.GetChainName();\n     } catch (const std::runtime_error&) {"
      },
      {
        "sha": "b0c8068ab93d729c75828252299c4eb708b7f87a",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -137,20 +137,20 @@ BOOST_AUTO_TEST_CASE(intarg)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n \n     ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 12);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n \n     ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(doubledash)\n \n     ResetArgs(\"--foo=verbose --bar=1\");\n     BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 0), 1);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n@@ -194,8 +194,8 @@ BOOST_AUTO_TEST_CASE(boolargno)\n \n BOOST_AUTO_TEST_CASE(logargs)\n {\n-    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_BOOL);\n-    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_BOOL);\n+    const auto okaylog_bool = std::make_pair(\"-okaylog-bool\", ArgsManager::ALLOW_ANY);\n+    const auto okaylog_negbool = std::make_pair(\"-okaylog-negbool\", ArgsManager::ALLOW_ANY);\n     const auto okaylog = std::make_pair(\"-okaylog\", ArgsManager::ALLOW_ANY);\n     const auto dontlog = std::make_pair(\"-dontlog\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE);\n     SetupArgs({okaylog_bool, okaylog_negbool, okaylog, dontlog});"
      },
      {
        "sha": "e66e16f3f518546ca2291d18f736a87df7a39694",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 147,
        "deletions": 16,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -269,7 +269,7 @@ class CheckValueTest : public TestChain100Setup\n \n         if (expect.error) {\n             BOOST_CHECK(!success);\n-            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);\n+            BOOST_CHECK_EQUAL(error, expect.error);\n         } else {\n             BOOST_CHECK(success);\n             BOOST_CHECK_EQUAL(error, \"\");\n@@ -279,16 +279,16 @@ class CheckValueTest : public TestChain100Setup\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n         } else if (expect.string_value) {\n             BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArg(\"-value\", \"zzzzz\"), std::logic_error);\n         }\n \n         if (expect.default_int) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), *expect.int_value);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetIntArg(\"-value\", 99999), std::logic_error);\n         }\n \n         if (expect.default_bool) {\n@@ -297,15 +297,16 @@ class CheckValueTest : public TestChain100Setup\n         } else if (expect.bool_value) {\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), *expect.bool_value);\n             BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), *expect.bool_value);\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", false), std::logic_error);\n+            BOOST_CHECK_THROW(test.GetBoolArg(\"-value\", true), std::logic_error);\n         }\n \n         if (expect.list_value) {\n             auto l = test.GetArgs(\"-value\");\n             BOOST_CHECK_EQUAL_COLLECTIONS(l.begin(), l.end(), expect.list_value->begin(), expect.list_value->end());\n-        } else {\n-            BOOST_CHECK(!success);\n+        } else if (success) {\n+            BOOST_CHECK_THROW(test.GetArgs(\"-value\"), std::logic_error);\n         }\n     }\n };\n@@ -327,6 +328,136 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n     CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n     CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+\n+    CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultBool());\n+    CheckValue(M::ALLOW_BOOL, \"-value=0\", Expect{false}.Bool(false));\n+    CheckValue(M::ALLOW_BOOL, \"-value=1\", Expect{true}.Bool(true));\n+    CheckValue(M::ALLOW_BOOL, \"-value=2\", Expect{{}}.Error(\"Can not set -value value to '2'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to 0 or 1.\"));\n+\n+    CheckValue(M::ALLOW_INT, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value\", Expect{true}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=0\", Expect{0}.Int(0).Bool(false));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=1\", Expect{1}.Int(1).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=2\", Expect{2}.Int(2).Bool(true));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=abc\", Expect{{}}.Error(\"Can not set -value value to 'abc'. It must be set to an integer.\"));\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=1\", Expect{false}.String(\"\").Bool(false));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value\", Expect{true}.DefaultString().Bool(true));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=\", Expect{\"\"}.DefaultString().DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=0\", Expect{\"0\"}.String(\"0\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=1\", Expect{\"1\"}.String(\"1\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=2\", Expect{\"2\"}.String(\"2\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").DefaultBool());\n+\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value ''.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=0\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '0'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=2\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value '2'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-novalue=abc\", Expect{{}}.Error(\"Can not negate -value at the same time as setting value 'abc'.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value\", Expect{{}}.Error(\"Can not set -value with no value. It must be set to a string.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckBoolStringsNotSpecial, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    // Check that \"true\" and \"false\" strings are rejected for ALLOW_BOOL\n+    // arguments. We might want to change this behavior in the future and\n+    // interpret strings like \"true\" as true, and strings like \"false\" as false.\n+    // But because it would be confusing to interpret \"true\" as true for\n+    // ALLOW_BOOL arguments but false for ALLOW_ANY arguments (because\n+    // atoi(\"true\")==0), for now it is safer to just disallow strings like\n+    // \"true\" and \"false\" for ALLOW_BOOL arguments as long as there are still\n+    // other boolean arguments interpreted with ALLOW_ANY.\n+    CheckValue(M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to 0 or 1.\"));\n+    CheckValue(M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to 0 or 1.\"));\n+\n+    // Similarly, check \"true\" and \"false\" are not treated specially when\n+    // ALLOW_BOOL is combined with ALLOW_INT and ALLOW_STRING. (The only\n+    // difference ALLOW_BOOL makes for int and string arguments is that it\n+    // enables \"-foo\" syntax with no equal sign assigning explicit int or string\n+    // values. This is useful for arguments like \"-upgradewallet\" or \"-listen\"\n+    // that primarily toggle features on and off, but also accept optional int\n+    // or string values to influence behavior.)\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=true\", Expect{{}}.Error(\"Can not set -value value to 'true'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_INT | M::ALLOW_BOOL, \"-value=false\", Expect{{}}.Error(\"Can not set -value value to 'false'. It must be set to an integer.\"));\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=true\", Expect{\"true\"}.String(\"true\").DefaultBool());\n+    CheckValue(M::ALLOW_STRING | M::ALLOW_BOOL, \"-value=false\", Expect{\"false\"}.String(\"false\").DefaultBool());\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckSingleValue)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-single\", ArgsManager::ALLOW_INT}});\n+    std::istringstream stream(\"single=1\\nsingle=2\\n\");\n+    std::string error;\n+    BOOST_CHECK(!test.ReadConfigStream(stream, \"file.conf\", error));\n+    BOOST_CHECK_EQUAL(error, \"Multiple values specified for -single in same section of config file.\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_CheckBadFlagCombinations)\n+{\n+    TestArgsManager test;\n+    using M = ArgsManager;\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg1\", \"name\", M::ALLOW_INT | M::ALLOW_ANY, OptionsCategory::OPTIONS), std::logic_error);\n+    BOOST_CHECK_THROW(test.AddArg(\"-arg2\", \"name\", M::ALLOW_INT | M::ALLOW_STRING, OptionsCategory::OPTIONS), std::logic_error);\n }\n \n struct NoIncludeConfTest {\n@@ -416,8 +547,8 @@ static void TestParse(const std::string& str, bool expected_bool, int64_t expect\n     BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99998), expected_int);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99998), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), expected_int);\n }\n \n // Test bool and int parsing.\n@@ -768,9 +899,9 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n \n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest1\", -1), 12345);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest2\", -1), 81985529216486895LL);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest2\", -1), 81985529216486895LL);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest3\", -1), -1);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest1\", false), true);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);"
      },
      {
        "sha": "049b4015e196dbf2c56a38c948b1a67b11da91cb",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -74,7 +74,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         int64_t nMedian = vTimeOffsets.median();\n         std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n         // Only let other nodes change our time by so much\n-        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n+        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetIntArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n         if (nMedian >= -max_adjustment && nMedian <= max_adjustment) {\n             nTimeOffset = nMedian;\n         } else {"
      },
      {
        "sha": "cd3137cc6c29896f58ce37f6cc6eb8d78c1b70da",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -84,8 +84,8 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(*m_db);\n     size_t count = 0;\n     size_t changed = 0;\n-    size_t batch_size = (size_t)gArgs.GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n-    int crash_simulate = gArgs.GetArg(\"-dbcrashratio\", 0);\n+    size_t batch_size = (size_t)gArgs.GetIntArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n+    int crash_simulate = gArgs.GetIntArg(\"-dbcrashratio\", 0);\n     assert(!hashBlock.IsNull());\n \n     uint256 old_tip = GetBestBlock();"
      },
      {
        "sha": "3ab8a3fff700f23b8fd26ff36a36351b4ed3f531",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 153,
        "deletions": 51,
        "changes": 204,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -71,6 +71,7 @@\n #endif\n \n #include <boost/algorithm/string/replace.hpp>\n+#include <optional>\n #include <thread>\n #include <typeinfo>\n #include <univalue.h>\n@@ -185,26 +186,17 @@ static std::string SettingName(const std::string& arg)\n }\n \n /**\n- * Interpret -nofoo as if the user supplied -foo=0.\n- *\n- * This method also tracks when the -no form was supplied, and if so,\n- * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n- *\n- * If there was not a double negative, it removes the \"no\" from the key\n- * and returns false.\n- *\n- * If there was a double negative, it removes \"no\" from the key, and\n- * returns true.\n- *\n- * If there was no \"no\", it returns the string value untouched.\n+ * Interpret key portion of a \"key=value\" config string. Strip \"section.\" and\n+ * \"no\" prefixes from the key if they are present, updating the section output\n+ * argument if a section was found, and returning false if the key was negated,\n+ * true otherwise.\n  *\n  * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-\n-static util::SettingsValue InterpretOption(std::string& section, std::string& key, const std::string& value)\n+static bool InterpretKey(std::string& section, std::string& key)\n {\n     // Split section name from key name for keys like \"testnet.foo\" or \"regtest.bar\"\n     size_t option_index = key.find('.');\n@@ -214,30 +206,100 @@ static util::SettingsValue InterpretOption(std::string& section, std::string& ke\n     }\n     if (key.substr(0, 2) == \"no\") {\n         key.erase(0, 2);\n-        // Double negatives like -nofoo=0 are supported (but discouraged)\n-        if (!InterpretBool(value)) {\n-            LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, value);\n-            return true;\n-        }\n         return false;\n     }\n-    return value;\n+    return true;\n }\n \n /**\n- * Check settings value validity according to flags.\n+ * Interpret settings value and apply ALLOW checking flags.\n  *\n- * TODO: Add more meaningful error checks here in the future\n- * See \"here's how the flags are meant to behave\" in\n- * https://github.com/bitcoin/bitcoin/pull/16097#issuecomment-514627823\n+ * Return an error string and nullopt if an invalid value was provided that\n+ * isn't allowed by the flags, otherwise return the parsed value.\n  */\n-static bool CheckValid(const std::string& key, const util::SettingsValue& val, unsigned int flags, std::string& error)\n-{\n-    if (val.isBool() && !(flags & ArgsManager::ALLOW_BOOL)) {\n-        error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+static std::optional<util::SettingsValue> InterpretValue(const std::string& key,\n+    const std::string* value,\n+    bool negated,\n+    unsigned int flags,\n+    std::string& error)\n+{\n+    // Return negated settings as false values.\n+    if (negated) {\n+        if (flags & ArgsManager::DISALLOW_NEGATION) {\n+            error = strprintf(\"Negating of -%s is meaningless and therefore forbidden\", key);\n+            return std::nullopt;\n+        }\n+        if (flags & ArgsManager::ALLOW_ANY) {\n+            // Double negatives like -nokey=0 are supported (but discouraged)\n+            if (value && !InterpretBool(*value)) {\n+                LogPrintf(\"Warning: parsed potentially confusing double-negative -%s=%s\\n\", key, *value);\n+                return true;\n+            }\n+        } else if (value && *value != \"1\") {\n+            error = strprintf(\"Can not negate -%s at the same time as setting value '%s'.\", key, *value);\n+            return std::nullopt;\n+        }\n         return false;\n     }\n-    return true;\n+\n+    // If validation was disabled with ALLOW_ANY, handle negation above, but\n+    // otherwise always return the value as a string.\n+    if (flags & ArgsManager::ALLOW_ANY) {\n+        return value ? *value : \"\";\n+    }\n+\n+    // Allow -key=\"\" settings. These are useful on the command line to reset\n+    // settings specified in the config file back to default values.\n+    if (value && value->empty()) return util::SettingsValue{\"\"};\n+\n+    // Return parsed bool, int, and string values if allowed by flags.\n+    int64_t parsed_int;\n+    if ((flags & ArgsManager::ALLOW_STRING) && value) return util::SettingsValue{*value};\n+    if ((flags & ArgsManager::ALLOW_INT) && value && ParseInt64(*value, &parsed_int)) return util::SettingsValue{parsed_int};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && value && *value == \"0\") return util::SettingsValue{false};\n+    if ((flags & ArgsManager::ALLOW_BOOL) && (!value || *value == \"1\")) return util::SettingsValue{true};\n+\n+    // If didn't return above, settings value is not valid for this key.\n+    if (value) {\n+        error = strprintf(\"Can not set -%s value to '%s'\", key, *value);\n+    } else {\n+        error = strprintf(\"Can not set -%s with no value\", key);\n+    }\n+    error = strprintf(\"%s. %s\", error,\n+                      (flags & ArgsManager::ALLOW_STRING) ? \"It must be set to a string.\" :\n+                      (flags & ArgsManager::ALLOW_INT) ? \"It must be set to an integer.\" :\n+                      (flags & ArgsManager::ALLOW_BOOL) ? \"It must be set to 0 or 1.\" :\n+                      \"It must be left unset.\");\n+    return std::nullopt;\n+}\n+\n+//! Return bool if setting is a bool or number, otherwise return default_value.\n+//! Optionally coerce strings settings as well.\n+static inline bool ValueToBool(const util::SettingsValue& value, bool default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return InterpretBool(value.get_str());\n+    return value.isBool() ? value.get_bool() : value.isNum() ? value.get_int64() != 0 : default_value;\n+}\n+\n+//! Return int64 if setting is a number or bool, otherwise return default_value.\n+//! Optionally coerce string settings as well.\n+static inline int64_t ValueToInt64(const util::SettingsValue& value, int64_t default_value, bool coerce)\n+{\n+    if (coerce && value.isStr()) return atoi64(value.get_str());\n+    return value.isNum() ? value.get_int64() : value.isFalse() ? 0 : value.isTrue() ? 1 : default_value;\n+}\n+\n+//! Return string if setting is a nonempty string (-setting=abc), \"\" if setting\n+//! is false (-nosetting), otherwise return default_value. Optionally coerce\n+//! bool and number settings to strings as well.\n+static inline std::string ValueToString(const util::SettingsValue& value,\n+    const std::string& default_value,\n+    bool coerce)\n+{\n+    if (coerce && value.isBool()) return value.get_bool() ? \"1\" : \"0\";\n+    if (coerce && value.isNum()) return value.getValStr();\n+    if (coerce && value.isStr()) return value.get_str();\n+    return value.isStr() && !value.get_str().empty() ? value.get_str() : value.isFalse() ? \"\" : default_value;\n }\n \n namespace {\n@@ -318,7 +380,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n #endif\n \n         if (key == \"-\") break; //bitcoin-tx using stdin\n-        std::string val;\n+        std::optional<std::string> val;\n         size_t is_index = key.find('=');\n         if (is_index != std::string::npos) {\n             val = key.substr(is_index + 1);\n@@ -354,20 +416,21 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         // Transform -foo to foo\n         key.erase(0, 1);\n         std::string section;\n-        util::SettingsValue value = InterpretOption(section, key, val);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n \n         // Unknown command line options and command line options with dot\n-        // characters (which are returned from InterpretOption with nonempty\n+        // characters (which are returned from InterpretKey with nonempty\n         // section strings) are not valid.\n         if (!flags || !section.empty()) {\n             error = strprintf(\"Invalid parameter %s\", argv[i]);\n             return false;\n         }\n \n-        if (!CheckValid(key, value, *flags, error)) return false;\n+        std::optional<util::SettingsValue> value = InterpretValue(key, val ? &*val : nullptr, negated, *flags, error);\n+        if (!value) return false;\n \n-        m_settings.command_line_options[key].push_back(value);\n+        m_settings.command_line_options[key].push_back(*value);\n     }\n \n     // we do not allow -includeconf from command line, only -noincludeconf\n@@ -394,6 +457,29 @@ std::optional<unsigned int> ArgsManager::GetArgFlags(const std::string& name) co\n     return std::nullopt;\n }\n \n+/**\n+ * Check that arg has the right flags for use in a given context. Raises\n+ * logic_error if this isn't the case, indicating the argument was registered\n+ * with bad AddArg flags.\n+ *\n+ * Returns true if the arg is registered and has checking enabled. Returns false\n+ * if the arg was never registered or checking was disabled with ALLOW_ANY.\n+ */\n+bool ArgsManager::CheckArgFlags(const std::string& name,\n+    unsigned int require,\n+    unsigned int forbid,\n+    const char* context) const\n+{\n+    std::optional<unsigned int> flags = GetArgFlags(name);\n+    if (!flags || *flags & ArgsManager::ALLOW_ANY) return false;\n+    if ((*flags & require) != require || (*flags & forbid) != 0) {\n+        throw std::logic_error(\n+            strprintf(\"Bug: Can't call %s on arg %s registered with flags 0x%08x (requires 0x%x, disallows 0x%x)\",\n+                context, name, *flags, require, forbid));\n+    }\n+    return true;\n+}\n+\n const fs::path& ArgsManager::GetBlocksDirPath() const\n {\n     LOCK(cs_args);\n@@ -482,9 +568,10 @@ std::optional<const ArgsManager::Command> ArgsManager::GetCommand() const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING | ALLOW_LIST, /* forbid= */ 0, __func__);\n     std::vector<std::string> result;\n     for (const util::SettingsValue& value : GetSettingsList(strArg)) {\n-        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+        result.push_back(ValueToString(value, \"\", coerce));\n     }\n     return result;\n }\n@@ -552,7 +639,7 @@ bool ArgsManager::ReadSettingsFile(std::vector<std::string>* errors)\n     for (const auto& setting : m_settings.rw_settings) {\n         std::string section;\n         std::string key = setting.first;\n-        (void)InterpretOption(section, key, /* value */ {}); // Split setting key into section and argname\n+        (void)InterpretKey(section, key); // Split setting key into section and argname\n         if (!GetArgFlags('-' + key)) {\n             LogPrintf(\"Ignoring unknown rw_settings value %s\\n\", setting.first);\n         }\n@@ -587,20 +674,20 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToString(GetSetting(strArg), strDefault, coerce);\n }\n \n-int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n+int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ ALLOW_INT, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToInt64(GetSetting(strArg), nDefault, coerce);\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    const util::SettingsValue value = GetSetting(strArg);\n-    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+    bool coerce = !CheckArgFlags(strArg, /* require= */ 0, /* forbid= */ ALLOW_LIST, __func__);\n+    return ValueToBool(GetSetting(strArg), fDefault, coerce);\n }\n \n bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strValue)\n@@ -613,15 +700,17 @@ bool ArgsManager::SoftSetArg(const std::string& strArg, const std::string& strVa\n \n bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n {\n-    if (fValue)\n-        return SoftSetArg(strArg, std::string(\"1\"));\n-    else\n-        return SoftSetArg(strArg, std::string(\"0\"));\n+    LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_BOOL, /* forbid= */ ALLOW_LIST, __func__);\n+    if (IsArgSet(strArg)) return false;\n+    m_settings.forced_settings[SettingName(strArg)] = fValue;\n+    return true;\n }\n \n void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n+    CheckArgFlags(strArg, /* require= */ ALLOW_STRING, /* forbid= */ 0, __func__);\n     m_settings.forced_settings[SettingName(strArg)] = strValue;\n }\n \n@@ -656,6 +745,16 @@ void ArgsManager::AddArg(const std::string& name, const std::string& help, unsig\n     if (flags & ArgsManager::NETWORK_ONLY) {\n         m_network_only_args.emplace(arg_name);\n     }\n+\n+    if ((flags & (ALLOW_BOOL | ALLOW_INT | ALLOW_STRING)) && (flags & ALLOW_ANY)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_{BOOL|INT|STRING} flags would have no effect with \"\n+                                         \"ALLOW_ANY present (ALLOW_ANY disables validation)\", arg_name));\n+    }\n+\n+    if ((flags & ALLOW_INT) && (flags & ALLOW_STRING)) {\n+        throw std::logic_error(strprintf(\"Bug: bad %s flags. ALLOW_INT would have no effect with ALLOW_STRING present \"\n+                                         \"(any valid integer is also a valid string)\", arg_name));\n+    }\n }\n \n void ArgsManager::AddHiddenArgs(const std::vector<std::string>& names)\n@@ -874,13 +973,16 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n     for (const std::pair<std::string, std::string>& option : options) {\n         std::string section;\n         std::string key = option.first;\n-        util::SettingsValue value = InterpretOption(section, key, option.second);\n+        bool negated = !InterpretKey(section, key);\n         std::optional<unsigned int> flags = GetArgFlags('-' + key);\n         if (flags) {\n-            if (!CheckValid(key, value, *flags, error)) {\n+            if (!(*flags & (ALLOW_ANY | ALLOW_LIST)) && m_settings.ro_config[section].count(key)) {\n+                error = strprintf(\"Multiple values specified for -%s in same section of config file.\", key);\n                 return false;\n             }\n-            m_settings.ro_config[section][key].push_back(value);\n+            std::optional<util::SettingsValue> value = InterpretValue(key, &option.second, negated, *flags, error);\n+            if (!value) return false;\n+            m_settings.ro_config[section][key].push_back(*value);\n         } else {\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\n@@ -992,7 +1094,7 @@ std::string ArgsManager::GetChainName() const\n         util::SettingsValue value = util::GetSetting(m_settings, /* section= */ \"\", SettingName(arg),\n             /* ignore_default_section_config= */ false,\n             /* get_chain_name= */ true);\n-        return value.isNull() ? false : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n+        return ValueToBool(value, /* default= */ false, /* coerce= */ true);\n     };\n \n     const bool fRegTest = get_net(\"-regtest\");"
      },
      {
        "sha": "09fbfc4b52b65d152aea4a10ef82230eb634a9aa",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -158,12 +158,18 @@ struct SectionInfo\n class ArgsManager\n {\n public:\n+    /**\n+     * Flags controlling how config and command line arguments are validated and\n+     * interpreted.\n+     */\n     enum Flags : uint32_t {\n-        // Boolean options can accept negation syntax -noOPTION or -noOPTION=1\n-        ALLOW_BOOL = 0x01,\n-        ALLOW_INT = 0x02,\n-        ALLOW_STRING = 0x04,\n-        ALLOW_ANY = ALLOW_BOOL | ALLOW_INT | ALLOW_STRING,\n+        ALLOW_ANY = 0x01,    //!< disable validation\n+        ALLOW_BOOL = 0x02,   //!< allow -foo=1, -foo=0, -foo, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_INT = 0x04,    //!< allow -foo=123, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_STRING = 0x08, //!< allow -foo=abc, -nofoo, -nofoo=1, and -foo=\n+        ALLOW_LIST = 0x10,   //!< allow multiple -foo=bar -foo=baz values\n+        DISALLOW_NEGATION = 0x20, //! disallow -nofoo syntax\n+\n         DEBUG_ONLY = 0x100,\n         /* Some options would cause cross-contamination if values for\n          * mainnet were used while running on regtest/testnet (or vice-versa).\n@@ -196,6 +202,8 @@ class ArgsManager\n     mutable fs::path m_cached_datadir_path GUARDED_BY(cs_args);\n     mutable fs::path m_cached_network_datadir_path GUARDED_BY(cs_args);\n \n+    bool CheckArgFlags(const std::string& name, unsigned int require, unsigned int forbid, const char* context) const;\n+\n     [[nodiscard]] bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n     /**\n@@ -209,9 +217,10 @@ class ArgsManager\n     /**\n      * Get setting value.\n      *\n-     * Result will be null if setting was unset, true if \"-setting\" argument was passed\n-     * false if \"-nosetting\" argument was passed, and a string if a \"-setting=value\"\n-     * argument was passed.\n+     * Result will be null if setting was unset, true if \"-setting\" argument was\n+     * passed, false if \"-nosetting\" argument was passed, and a string, integer,\n+     * or boolean depending on ALLOW_{BOOL|INT|STRING} flags if a\n+     * \"-setting=value\" argument was passed.\n      */\n     util::SettingsValue GetSetting(const std::string& arg) const;\n \n@@ -327,7 +336,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+    int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;\n \n     /**\n      * Return boolean argument or default value"
      },
      {
        "sha": "36eca9c10f21ea267c8aaef73ee73b12907495ee",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -371,8 +371,8 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     LimitMempoolSize(\n         *m_mempool,\n         this->CoinsTip(),\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n-        std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+        std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -423,10 +423,10 @@ class MemPoolAccept\n {\n public:\n     explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&active_chainstate.CoinsTip(), m_pool), m_active_chainstate(active_chainstate),\n-        m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n-        m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n-        m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n-        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n+        m_limit_ancestors(gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n+        m_limit_ancestor_size(gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n+        m_limit_descendants(gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n+        m_limit_descendant_size(gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n     }\n \n     // We put the arguments we're handed into a struct, so we can pass them\n@@ -506,7 +506,7 @@ class MemPoolAccept\n     // Compare a package's feerate against minimum allowed.\n     bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs)\n     {\n-        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n+        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n         if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool min fee not met\", strprintf(\"%d < %d\", package_fee, mempoolRejectFee));\n         }\n@@ -1009,7 +1009,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n@@ -1366,7 +1366,7 @@ void InitScriptExecutionCache() {\n     g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = g_scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n@@ -1995,7 +1995,7 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n {\n     return this->GetCoinsCacheSizeState(\n         m_coinstip_cache_size_bytes,\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n@@ -2620,7 +2620,7 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n-    int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n+    int nStopAtHeight = gArgs.GetIntArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         // Block until the validation queue drains. This should largely\n         // never happen in normal operation, however may happen during\n@@ -3809,7 +3809,7 @@ bool BlockManager::LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkCompar\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (!m_mempool) return;\n-    if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n+    if (args.GetIntArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         ::LoadMempool(*m_mempool, *this);\n     }\n     m_mempool->SetIsLoaded(!ShutdownRequested());\n@@ -4489,7 +4489,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mockable_fopen_function)\n {\n     const CChainParams& chainparams = Params();\n-    int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n+    int64_t nExpiryTimeout = gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / \"mempool.dat\", \"rb\")};\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {"
      },
      {
        "sha": "2eb4d3106c2604f39a5479a0378ac532f73329c3",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -375,7 +375,7 @@ void BerkeleyBatch::Flush()\n         nMinutes = 1;\n \n     if (env) { // env is nullptr for dummy databases (i.e. in tests). Don't actually flush if env is nullptr so we don't segfault\n-        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetIntArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n     }\n }\n "
      },
      {
        "sha": "ce7abffabed663cbeb59f5bbcab9b591a1a755e0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -83,7 +83,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n \n #ifdef USE_SQLITE\n-    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+    argsman.AddArg(\"-unsafesqlitesync\", \"Set SQLite synchronous=OFF to disable waiting for the database to sync to disk. This is unsafe and can cause data loss and corruption. This option is only used by tests to improve their performance (default: false)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n #else\n     argsman.AddHiddenArgs({\"-unsafesqlitesync\"});\n #endif"
      },
      {
        "sha": "382e8b6116a368d64014f45d3e207917ab2f0ca2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -1488,7 +1488,7 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             } else {\n                 warnings.push_back(\"Range not given, using default keypool range\");\n                 range_start = 0;\n-                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+                range_end = gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n             }\n             next_index = range_start;\n "
      },
      {
        "sha": "fdfb36bb0ac640d8b6ec7f595299352e19ba682f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -331,7 +331,7 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\n     CHDChain& chain = it->second;\n \n     // Top up key pool\n-    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    int64_t target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n \n     // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n     // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n@@ -1259,7 +1259,7 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+            nTargetSize = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         // count amount of available keys (internal, external)\n         // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n@@ -1764,7 +1764,7 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n     if (size > 0) {\n         target_size = size;\n     } else {\n-        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+        target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n     }\n \n     // Calculate the new range_end"
      },
      {
        "sha": "0225b893a231b47c92b57f34918dfa03053caed2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -2704,7 +2704,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n                            _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n     }\n \n-    walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    walletInstance->m_confirm_target = gArgs.GetIntArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     walletInstance->m_signal_rbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n "
      },
      {
        "sha": "a53de34db486f32e1e415798c8c73ca107c6a36d",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b12e540426da25f666bc4722e00432f4d65ee86/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b12e540426da25f666bc4722e00432f4d65ee86/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=3b12e540426da25f666bc4722e00432f4d65ee86",
        "patch": "@@ -47,7 +47,7 @@ CZMQNotificationInterface* CZMQNotificationInterface::Create()\n             std::unique_ptr<CZMQAbstractNotifier> notifier = factory();\n             notifier->SetType(entry.first);\n             notifier->SetAddress(address);\n-            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n+            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetIntArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n             notifiers.push_back(std::move(notifier));\n         }\n     }"
      }
    ]
  },
  {
    "sha": "639d7c92a07e54dd618301462d1872817397ccf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzlkN2M5MmEwN2U1NGRkNjE4MzAxNDYyZDE4NzI4MTczOTdjY2Y1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-15T16:12:18Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-23T17:27:27Z"
      },
      "message": "scripted-diff: Add ALLOW_LIST flag to arguments retrieved with GetArgs\n\nThis change has no effect on behavior, and is basically just a\ndocumentation-only change. ALLOW_LIST currently is not checked for or enforced\nat all when ALLOW_ANY is specified.\n\n-BEGIN VERIFY SCRIPT-\nfor f in `git grep -n 'GetArgs(' | grep -v _tests | sed -n 's/.*GetArgs(\"\\([^\"]\\+\\)\".*/\\1/p' | sort -u`; do\n   git grep -l -- \"$f\" | xargs sed -i \"/AddArg(\\\"$f[=\\\"]/ s/ArgsManager::ALLOW_ANY/& | ArgsManager::ALLOW_LIST/g\"\ndone\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "103c88aa1c5995e4dbacd10f8108808865a829ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/103c88aa1c5995e4dbacd10f8108808865a829ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/639d7c92a07e54dd618301462d1872817397ccf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/639d7c92a07e54dd618301462d1872817397ccf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/639d7c92a07e54dd618301462d1872817397ccf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/639d7c92a07e54dd618301462d1872817397ccf5/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b12e540426da25f666bc4722e00432f4d65ee86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b12e540426da25f666bc4722e00432f4d65ee86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b12e540426da25f666bc4722e00432f4d65ee86"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "e5ea82fc25cc19a71ed7e817860d757fbd96600c",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/639d7c92a07e54dd618301462d1872817397ccf5/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/639d7c92a07e54dd618301462d1872817397ccf5/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=639d7c92a07e54dd618301462d1872817397ccf5",
        "patch": "@@ -26,9 +26,9 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n \n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "25c96afc5485443977a3f88376673718ff94c017",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/639d7c92a07e54dd618301462d1872817397ccf5/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/639d7c92a07e54dd618301462d1872817397ccf5/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=639d7c92a07e54dd618301462d1872817397ccf5",
        "patch": "@@ -22,10 +22,10 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:start:end[:min_activation_height]\", \"Use given start/end times and min_activation_height for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::DISALLOW_NEGATION, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      },
      {
        "sha": "7449869e7d3430ea723c870a24a0469f60c573fb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/639d7c92a07e54dd618301462d1872817397ccf5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/639d7c92a07e54dd618301462d1872817397ccf5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=639d7c92a07e54dd618301462d1872817397ccf5",
        "patch": "@@ -387,7 +387,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -416,15 +416,15 @@ void SetupServerArgs(ArgsManager& argsman)\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n \n-    argsman.AddArg(\"-addnode=<ip>\", strprintf(\"Add a node to connect to and attempt to keep the connection open (see the addnode RPC help for more info). This option can be specified multiple times to add multiple nodes; connections are limited to %u at a time and are counted separately from the -maxconnections limit.\", MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-addnode=<ip>\", strprintf(\"Add a node to connect to and attempt to keep the connection open (see the addnode RPC help for more info). This option can be specified multiple times to add multiple nodes; connections are limited to %u at a time and are counted separately from the -maxconnections limit.\", MAX_ADDNODE_CONNECTIONS), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-asmap=<file>\", strprintf(\"Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.\", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-bantime=<n>\", strprintf(\"Default duration (in seconds) of manually configured bans (default: %u)\", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-bind=<addr>[:<port>][=onion]\", strprintf(\"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\", defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-bind=<addr>[:<port>][=onion]\", strprintf(\"Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)\", defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-connect=<ip>\", \"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-dnsseed\", strprintf(\"Query for peer addresses via DNS lookup, if low on addresses (default: %u unless -connect used)\", DEFAULT_DNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-fixedseeds\", strprintf(\"Allow fixed seeds if DNS seeds don't provide peers (default: %u)\", DEFAULT_FIXEDSEEDS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -437,14 +437,14 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor onion services, set -noonion to disable (default: -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2psam=<ip:port>\", \"I2P SAM proxy to reach I2P peers and accept I2P connections (default: none)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-i2pacceptincoming\", \"If set and -i2psam is also set then incoming I2P connections are accepted via the SAM proxy. If this is not set but -i2psam is set then only outgoing connections will be made to the I2P network. Ignored if -i2psam is not set. Listening for incoming I2P connections is done through the SAM proxy, not by binding to a local address and port (default: 1)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (\" + Join(GetNetworkNames(), \", \") + \"). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks. Warning: if it is used with non-onion networks and the -onion or -proxy option is set, then outbound onion connections will still be made; use -noonion or -onion=0 to disable outbound onion connections in this case.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections. Not relevant for I2P (see doc/i2p.md).\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify a p2p connection timeout delay in seconds. After connecting to a peer, wait this amount of time before considering disconnection based on inactivity (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n@@ -504,7 +504,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-checkaddrman=<n>\", strprintf(\"Run addrman consistency checks every <n> operations. Use 0 to disable. (default: %u)\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-checkmempool=<n>\", strprintf(\"Run mempool consistency checks every <n> transactions. Use 0 to disable. (default: %u, regtest: %u)\", defaultChainParams->DefaultConsistencyChecks(), regtestChainParams->DefaultConsistencyChecks()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-checkpoints\", strprintf(\"Enable rejection of any forks from the known historical chain until block %s (default: %u)\", defaultChainParams->Checkpoints().GetHeight(), DEFAULT_CHECKPOINTS_ENABLED), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n@@ -517,7 +517,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printpriority\", strprintf(\"Log transaction fee rate in \" + CURRENCY_UNIT + \"/kvB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n \n     SetupChainParamsBaseOptions(argsman);\n \n@@ -538,17 +538,17 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::BLOCK_CREATION);\n \n     argsman.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcallowip=<ip>\", \"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcauth=<userpw>\", \"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcwhitelist=<whitelist>\", \"Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected. See -rpcwhitelistdefault documentation for information on default whitelist behavior.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcwhitelistdefault\", \"Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-server\", \"Accept command line and JSON-RPC commands\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);"
      },
      {
        "sha": "7b934023246b538374cafc7ed95f4c9fee4d7fe0",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/639d7c92a07e54dd618301462d1872817397ccf5/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/639d7c92a07e54dd618301462d1872817397ccf5/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=639d7c92a07e54dd618301462d1872817397ccf5",
        "patch": "@@ -64,7 +64,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to output multiple categories.\",\n         ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\"), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\"), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n #ifdef HAVE_THREAD_LOCAL"
      },
      {
        "sha": "77801612957b2958ae29f65dbf6687f7af8c1a49",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/639d7c92a07e54dd618301462d1872817397ccf5/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/639d7c92a07e54dd618301462d1872817397ccf5/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=639d7c92a07e54dd618301462d1872817397ccf5",
        "patch": "@@ -66,7 +66,7 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n #endif\n     argsman.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-wallet=<path>\", \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n+    argsman.AddArg(\"-wallet=<path>\", \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-walletbroadcast\",  strprintf(\"Make the wallet broadcast transactions (default: %u)\", DEFAULT_WALLETBROADCAST), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-walletdir=<dir>\", \"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n #if HAVE_SYSTEM"
      }
    ]
  },
  {
    "sha": "ad40ed917cf2af245efeaebf13754018b2c05b2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDQwZWQ5MTdjZjJhZjI0NWVmZWFlYmYxMzc1NDAxOGIyYzA1YjJm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-15T21:26:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-23T17:27:27Z"
      },
      "message": "refactor: Fix more ALLOW_LIST arguments\n\n- Remove ALLOW_LIST flag from bitcoin-wallet -wallet and -debug arguments. They\n  are list arguments for bitcoind, but single arguments for bitcoin-wallet.\n\n- Add ALLOW_LIST flag to -includeconf arg (missed by scripted diff since it's\n  not accessed through GetArgs)\n\n- Add ALLOW_LIST flag to -debug, -signetchallenge, -whitebind, and -whitelist\n  args (missed by scripted diff due to line breaks in AddArgs calls)\n\n- Add ALLOW_LIST flag to -zmq args (missed by scripted diff due to programmatic\n  GetArgs calls)\n\nThese changes have no effect on behavior. ALLOW_LIST flag isn't currently\nenforced or checked when ALLOW_ANY is also specified.",
      "tree": {
        "sha": "181dfbc477f03121c14c48d89803fc252923382a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/181dfbc477f03121c14c48d89803fc252923382a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad40ed917cf2af245efeaebf13754018b2c05b2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad40ed917cf2af245efeaebf13754018b2c05b2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad40ed917cf2af245efeaebf13754018b2c05b2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad40ed917cf2af245efeaebf13754018b2c05b2f/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "639d7c92a07e54dd618301462d1872817397ccf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/639d7c92a07e54dd618301462d1872817397ccf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/639d7c92a07e54dd618301462d1872817397ccf5"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "13925c2e2d1097da0e4c9f8a8af9becac6ba7261",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad40ed917cf2af245efeaebf13754018b2c05b2f/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad40ed917cf2af245efeaebf13754018b2c05b2f/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=ad40ed917cf2af245efeaebf13754018b2c05b2f",
        "patch": "@@ -26,9 +26,9 @@ static void SetupWalletToolArgs(ArgsManager& argsman)\n \n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-wallet=<wallet-name>\", \"Specify wallet name\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dumpfile=<file name>\", \"When used with 'dump', writes out the records to this file. When used with 'createfromdump', loads the records into a new wallet.\", ArgsManager::ALLOW_ANY | ArgsManager::DISALLOW_NEGATION, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: 0).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-descriptors\", \"Create descriptors wallet. Only for 'create'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-format=<format>\", \"The format of the wallet file to create. Either \\\"bdb\\\" or \\\"sqlite\\\". Only used with 'createfromdump'\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -debug is true, 0 otherwise).\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "2121d61f6abe167de4790bfab66246a8558fdb4c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad40ed917cf2af245efeaebf13754018b2c05b2f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad40ed917cf2af245efeaebf13754018b2c05b2f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ad40ed917cf2af245efeaebf13754018b2c05b2f",
        "patch": "@@ -386,7 +386,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbcache=<n>\", strprintf(\"Maximum database cache size <n> MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool).\", nMinDbCache, nMaxDbCache, nDefaultDbCache), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-includeconf=<file>\", \"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-loadblock=<file>\", \"Imports blocks from external file on startup\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -466,20 +466,20 @@ void SetupServerArgs(ArgsManager& argsman)\n #endif // USE_NATPMP\n     argsman.AddArg(\"-whitebind=<[permissions@]addr>\", \"Bind to the given address and add permission flags to the peers connecting to it. \"\n         \"Use [host]:port notation for IPv6. Allowed permissions: \" + Join(NET_PERMISSIONS_DOC, \", \") + \". \"\n-        \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+        \"Specify multiple permissions separated by commas (default: download,noban,mempool,relay). Can be specified multiple times.\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n \n     argsman.AddArg(\"-whitelist=<[permissions@]IP address or network>\", \"Add permission flags to the peers connecting from the given IP address (e.g. 1.2.3.4) or \"\n         \"CIDR-notated network (e.g. 1.2.3.0/24). Uses the same permissions as \"\n-        \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+        \"-whitebind. Can be specified multiple times.\" , ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::CONNECTION);\n \n     g_wallet_init_interface.AddWalletOptions(argsman);\n \n #if ENABLE_ZMQ\n-    argsman.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n-    argsman.AddArg(\"-zmqpubsequence=<address>\", \"Enable publish hash block and tx sequence in <address>\", ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashblock=<address>\", \"Enable publish hash block in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubhashtx=<address>\", \"Enable publish hash transaction in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawblock=<address>\", \"Enable publish raw block in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubrawtx=<address>\", \"Enable publish raw transaction in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n+    argsman.AddArg(\"-zmqpubsequence=<address>\", \"Enable publish hash block and tx sequence in <address>\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::ZMQ);\n     argsman.AddArg(\"-zmqpubhashblockhwm=<n>\", strprintf(\"Set publish hash block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n     argsman.AddArg(\"-zmqpubhashtxhwm=<n>\", strprintf(\"Set publish hash transaction outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);\n     argsman.AddArg(\"-zmqpubrawblockhwm=<n>\", strprintf(\"Set publish raw block outbound message high water mark (default: %d)\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM), ArgsManager::ALLOW_ANY, OptionsCategory::ZMQ);"
      },
      {
        "sha": "764d8379e6acc17569f7c25dc97a9cd26781c01a",
        "filename": "src/init/common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad40ed917cf2af245efeaebf13754018b2c05b2f/src/init/common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad40ed917cf2af245efeaebf13754018b2c05b2f/src/init/common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/common.cpp?ref=ad40ed917cf2af245efeaebf13754018b2c05b2f",
        "patch": "@@ -63,7 +63,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-debuglogfile=<file>\", strprintf(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)\", DEFAULT_DEBUGLOGFILE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-debug=<category>\", \"Output debugging information (default: -nodebug, supplying <category> is optional). \"\n         \"If <category> is not supplied or if <category> = 1, output all debugging information. <category> can be: \" + LogInstance().LogCategoriesString() + \". This option can be specified multiple times to output multiple categories.\",\n-        ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+        ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-debugexclude=<category>\", strprintf(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except the specified category. This option can be specified multiple times to exclude multiple categories.\"), ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logips\", strprintf(\"Include IP addresses in debug output (default: %u)\", DEFAULT_LOGIPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);"
      }
    ]
  },
  {
    "sha": "75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWIyZTc2ODBlMTg4M2RjYzNlYTFkOTk0NWM2ZGRiZTRiMzljZDBj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-15T21:26:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-23T17:27:27Z"
      },
      "message": "Always reject empty -rpcauth=\"\" arguments\n\nPrevious behavior was nonsensical:\n\n- If an empty -rpcauth=\"\" argument was specified as the last command\n  line argument, it would cause all other -rpcauth arguments to be\n  ignored.\n- If an empty -rpcauth=\"\" argument was specified on the command line\n  followed by any nonempty -rpcauth argument, it would cause an error.\n- If an empty \"rpcauth=\" line was specified after non-empty rpcauth line\n  it would cause an error.\n- If an empty \"rpcauth=\" line in a config file was the entry in the\n  config file it would cause all rpcauth entries to be ignored, unless\n  the last command line argument was a nonempty -rpcauth argument, in\n  which case it would be ignored.\n\nNew behavior is simple:\n\n- If an empty \"rpcauth=\" config line or -rpcauth=\"\" command line\n  argument is used it will cause an error",
      "tree": {
        "sha": "328db2e23f90b14d8975bb6b488a8bfc01e1c0d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/328db2e23f90b14d8975bb6b488a8bfc01e1c0d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad40ed917cf2af245efeaebf13754018b2c05b2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad40ed917cf2af245efeaebf13754018b2c05b2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad40ed917cf2af245efeaebf13754018b2c05b2f"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a0f1d40918b110c2fb233555f22b4319b316fb1d",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c",
        "patch": "@@ -251,7 +251,7 @@ static bool InitRPCAuthentication()\n         LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcauth for rpcauth auth generation.\\n\");\n         strRPCUserColonPass = gArgs.GetArg(\"-rpcuser\", \"\") + \":\" + gArgs.GetArg(\"-rpcpassword\", \"\");\n     }\n-    if (gArgs.GetArg(\"-rpcauth\",\"\") != \"\")\n+    if (!gArgs.GetArgs(\"-rpcauth\").empty())\n     {\n         LogPrintf(\"Using rpcauth authentication.\\n\");\n         for (const std::string& rpcauth : gArgs.GetArgs(\"-rpcauth\")) {"
      },
      {
        "sha": "031a86377e3b313be0d61d0492e00faa6765a76a",
        "filename": "test/functional/rpc_users.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c/test/functional/rpc_users.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c/test/functional/rpc_users.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_users.py?ref=75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c",
        "patch": "@@ -102,9 +102,8 @@ def run_test(self):\n         init_error = 'Error: Unable to start HTTP server. See debug log for details.'\n \n         self.log.info('Check -rpcauth are validated')\n-        # Empty -rpcauth= are ignored\n-        self.restart_node(0, extra_args=['-rpcauth='])\n         self.stop_node(0)\n+        self.nodes[0].assert_start_raises_init_error(expected_msg=init_error, extra_args=['-rpcauth='])\n         self.nodes[0].assert_start_raises_init_error(expected_msg=init_error, extra_args=['-rpcauth=foo'])\n         self.nodes[0].assert_start_raises_init_error(expected_msg=init_error, extra_args=['-rpcauth=foo:bar'])\n "
      }
    ]
  },
  {
    "sha": "601fe2d6f751356836c7bd98441d569c592ea4fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDFmZTJkNmY3NTEzNTY4MzZjN2JkOTg0NDFkNTY5YzU5MmVhNGZl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-11-21T18:47:48Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-23T17:27:27Z"
      },
      "message": "refactor: Always enforce ALLOW_LIST in CheckArgFlags\n\nPrevent GetArg() from being called on ALLOW_LIST arguments, and GetArgs() from\nbeing called on non-list arguments.\n\nThis checking was previously skipped if ALLOW_ANY flag was present, but now\nit's always done.\n\nThis change has no effect on external behavior. It is just supposed to enforce\ninternal consistency and prevent bugs caused by using the wrong GetArg method\nto retrieve settings.",
      "tree": {
        "sha": "ea396633c363fead27ac168423fdc17c8bbf2170",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea396633c363fead27ac168423fdc17c8bbf2170"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/601fe2d6f751356836c7bd98441d569c592ea4fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/601fe2d6f751356836c7bd98441d569c592ea4fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/601fe2d6f751356836c7bd98441d569c592ea4fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/601fe2d6f751356836c7bd98441d569c592ea4fe/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75b2e7680e1883dcc3ea1d9945c6ddbe4b39cd0c"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 117,
      "deletions": 56
    },
    "files": [
      {
        "sha": "b72e2aaf4a091e09797fc16e5b98b593bf756f72",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 111,
        "deletions": 54,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/601fe2d6f751356836c7bd98441d569c592ea4fe/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/601fe2d6f751356836c7bd98441d569c592ea4fe/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=601fe2d6f751356836c7bd98441d569c592ea4fe",
        "patch": "@@ -216,6 +216,49 @@ struct TestArgsManager : public ArgsManager\n             AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n         }\n     }\n+    //! Return registered argument information.\n+    Arg* FindArg(const std::string& name)\n+    {\n+        LOCK(cs_args);\n+        for (auto& category : m_available_args) {\n+            if (Arg* arg = util::FindKey(category.second, name)) {\n+                return arg;\n+            }\n+        }\n+        return nullptr;\n+    }\n+    //! Look up current registered argument flags so they can be modified, and\n+    //! restore them on destruction.\n+    struct TestFlags {\n+        TestFlags(TestArgsManager& test, const std::string& name) : arg(test.FindArg(name)) {}\n+        ~TestFlags() { if (arg) arg->m_flags = prev_flags; }\n+        Arg* arg;\n+        unsigned int prev_flags = arg ? arg->m_flags : 0;\n+    };\n+    //! Call GetArgs(), temporarily enabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    std::vector<std::string> TestArgList(const std::string& name)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags |= ALLOW_LIST;\n+        return GetArgs(name);\n+    }\n+    //! Call GetArg(), temporarily disabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    std::string TestArgString(const std::string& name, const std::string& default_value)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags &= ~ALLOW_LIST;\n+        return GetArg(name, default_value);\n+    }\n+    //! Call GetBoolArg(), temporarily disabling ALLOW_LIST so call can succeed.\n+    //! This is called by old tests written before ALLOW_LIST was enforced.\n+    bool TestArgBool(const std::string& name, bool default_value)\n+    {\n+        TestFlags test(*this, name);\n+        if (test.arg) test.arg->m_flags &= ~ALLOW_LIST;\n+        return GetBoolArg(name, default_value);\n+    }\n     using ArgsManager::GetSetting;\n     using ArgsManager::GetSettingsList;\n     using ArgsManager::ReadConfigStream;\n@@ -315,19 +358,33 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n {\n     using M = ArgsManager;\n \n-    CheckValue(M::ALLOW_ANY, nullptr, Expect{{}}.DefaultString().DefaultInt().DefaultBool().List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=0\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=1\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=2\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n-    CheckValue(M::ALLOW_ANY, \"-novalue=abc\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=0\", Expect{\"0\"}.String(\"0\").Int(0).Bool(false).List({\"0\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n-    CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));\n+    CheckValue(M::ALLOW_ANY, nullptr, Expect{{}}.DefaultString().DefaultInt().DefaultBool());\n+    CheckValue(M::ALLOW_ANY, \"-novalue\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=0\", Expect{true}.String(\"1\").Int(1).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=1\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=2\", Expect{false}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=abc\", Expect{true}.String(\"1\").Int(1).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value\", Expect{\"\"}.String(\"\").Int(0).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=\", Expect{\"\"}.String(\"\").Int(0).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=0\", Expect{\"0\"}.String(\"0\").Int(0).Bool(false));\n+    CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true));\n+    CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false));\n+\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, nullptr, Expect{{}}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=0\", Expect{true}.List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=1\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=2\", Expect{false}.List({}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-novalue=abc\", Expect{true}.List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=\", Expect{\"\"}.List({\"\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=0\", Expect{\"0\"}.List({\"0\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=1\", Expect{\"1\"}.List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=2\", Expect{\"2\"}.List({\"2\"}));\n+    CheckValue(M::ALLOW_ANY | M::ALLOW_LIST, \"-value=abc\", Expect{\"abc\"}.List({\"abc\"}));\n \n     CheckValue(M::ALLOW_BOOL, nullptr, Expect{{}}.DefaultBool());\n     CheckValue(M::ALLOW_BOOL, \"-novalue\", Expect{false}.Bool(false));\n@@ -484,7 +541,7 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     TestArgsManager testArgs;\n     const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_ANY);\n     const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_ANY);\n-    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY);\n+    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_ANY);\n \n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n@@ -638,7 +695,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     TestArgsManager testArgs;\n \n     // Params test\n-    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n+    const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.SetupArgs({foo, bar});\n@@ -647,7 +704,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.TestArgString(\"-foo\", \"xxx\") == \"\");\n \n     // A double negative is a positive, and not marked as negated.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n@@ -661,7 +718,7 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     // This was passed twice, second one overrides the negative setting,\n     // and the value.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"1\");\n+    BOOST_CHECK(testArgs.TestArgString(\"-foo\", \"xxx\") == \"1\");\n \n     // A double negative is a positive, and does not count as negated.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n@@ -675,14 +732,14 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n \n     // Command line overrides, but doesn't erase old setting\n     BOOST_CHECK(testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.TestArgString(\"-foo\", \"xxx\") == \"0\");\n     BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 0);\n \n     // Command line overrides, but doesn't erase old setting\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n     BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n-    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 1\n-                && testArgs.GetArgs(\"-bar\").front() == \"\");\n+    BOOST_CHECK(testArgs.TestArgList(\"-bar\").size() == 1\n+                && testArgs.TestArgList(\"-bar\").front() == \"\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n@@ -713,13 +770,13 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     LOCK(test_args.cs_args);\n     const auto a = std::make_pair(\"-a\", ArgsManager::ALLOW_ANY);\n     const auto b = std::make_pair(\"-b\", ArgsManager::ALLOW_ANY);\n-    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY);\n+    const auto ccc = std::make_pair(\"-ccc\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto d = std::make_pair(\"-d\", ArgsManager::ALLOW_ANY);\n     const auto e = std::make_pair(\"-e\", ArgsManager::ALLOW_ANY);\n     const auto fff = std::make_pair(\"-fff\", ArgsManager::ALLOW_ANY);\n     const auto ggg = std::make_pair(\"-ggg\", ArgsManager::ALLOW_ANY);\n-    const auto h = std::make_pair(\"-h\", ArgsManager::ALLOW_ANY);\n-    const auto i = std::make_pair(\"-i\", ArgsManager::ALLOW_ANY);\n+    const auto h = std::make_pair(\"-h\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n+    const auto i = std::make_pair(\"-i\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST);\n     const auto iii = std::make_pair(\"-iii\", ArgsManager::ALLOW_ANY);\n     test_args.SetupArgs({a, b, ccc, d, e, fff, ggg, h, i, iii});\n \n@@ -759,46 +816,46 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n \n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-a\", \"xxx\"), \"\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-b\", \"xxx\"), \"1\");\n-    BOOST_CHECK_EQUAL(test_args.GetArg(\"-ccc\", \"xxx\"), \"argument\");\n+    BOOST_CHECK_EQUAL(test_args.TestArgString(\"-ccc\", \"xxx\"), \"argument\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-d\", \"xxx\"), \"e\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-fff\", \"xxx\"), \"0\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-ggg\", \"xxx\"), \"1\");\n-    BOOST_CHECK_EQUAL(test_args.GetArg(\"-h\", \"xxx\"), \"0\");\n-    BOOST_CHECK_EQUAL(test_args.GetArg(\"-i\", \"xxx\"), \"1\");\n+    BOOST_CHECK_EQUAL(test_args.TestArgString(\"-h\", \"xxx\"), \"0\");\n+    BOOST_CHECK_EQUAL(test_args.TestArgString(\"-i\", \"xxx\"), \"1\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-zzz\", \"xxx\"), \"xxx\");\n     BOOST_CHECK_EQUAL(test_args.GetArg(\"-iii\", \"xxx\"), \"xxx\");\n \n     for (const bool def : {false, true}) {\n         BOOST_CHECK(test_args.GetBoolArg(\"-a\", def));\n         BOOST_CHECK(test_args.GetBoolArg(\"-b\", def));\n-        BOOST_CHECK(!test_args.GetBoolArg(\"-ccc\", def));\n+        BOOST_CHECK(!test_args.TestArgBool(\"-ccc\", def));\n         BOOST_CHECK(!test_args.GetBoolArg(\"-d\", def));\n         BOOST_CHECK(!test_args.GetBoolArg(\"-fff\", def));\n         BOOST_CHECK(test_args.GetBoolArg(\"-ggg\", def));\n-        BOOST_CHECK(!test_args.GetBoolArg(\"-h\", def));\n-        BOOST_CHECK(test_args.GetBoolArg(\"-i\", def));\n+        BOOST_CHECK(!test_args.TestArgBool(\"-h\", def));\n+        BOOST_CHECK(test_args.TestArgBool(\"-i\", def));\n         BOOST_CHECK(test_args.GetBoolArg(\"-zzz\", def) == def);\n         BOOST_CHECK(test_args.GetBoolArg(\"-iii\", def) == def);\n     }\n \n-    BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n-                && test_args.GetArgs(\"-a\").front() == \"\");\n-    BOOST_CHECK(test_args.GetArgs(\"-b\").size() == 1\n-                && test_args.GetArgs(\"-b\").front() == \"1\");\n+    BOOST_CHECK(test_args.TestArgList(\"-a\").size() == 1\n+                && test_args.TestArgList(\"-a\").front() == \"\");\n+    BOOST_CHECK(test_args.TestArgList(\"-b\").size() == 1\n+                && test_args.TestArgList(\"-b\").front() == \"1\");\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n                 && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n                 && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n-    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-ggg\").size() == 1\n-                && test_args.GetArgs(\"-ggg\").front() == \"1\");\n-    BOOST_CHECK(test_args.GetArgs(\"-noggg\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-fff\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-nofff\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-ggg\").size() == 1\n+                && test_args.TestArgList(\"-ggg\").front() == \"1\");\n+    BOOST_CHECK(test_args.TestArgList(\"-noggg\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-noh\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-i\").size() == 1\n                 && test_args.GetArgs(\"-i\").front() == \"1\");\n     BOOST_CHECK(test_args.GetArgs(\"-noi\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-zzz\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-zzz\").size() == 0);\n \n     BOOST_CHECK(!test_args.IsArgNegated(\"-a\"));\n     BOOST_CHECK(!test_args.IsArgNegated(\"-b\"));\n@@ -823,9 +880,9 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     // d is overridden\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n     // section-specific setting\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"1\");\n     // section takes priority for multiple values\n-    BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend1\");\n+    BOOST_CHECK(test_args.TestArgString(\"-ccc\", \"xxx\") == \"extend1\");\n     // check multiple values works\n     const std::vector<std::string> sec1_ccc_expected = {\"extend1\",\"extend2\",\"argument\",\"multiple\"};\n     const auto& sec1_ccc_res = test_args.GetArgs(\"-ccc\");\n@@ -840,11 +897,11 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     BOOST_CHECK(test_args.GetArg(\"-fff\", \"xxx\") == \"0\");\n     BOOST_CHECK(test_args.GetArg(\"-ggg\", \"xxx\") == \"1\");\n     BOOST_CHECK(test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\");\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"0\");\n     // section-specific setting\n     BOOST_CHECK(test_args.GetArg(\"-iii\", \"xxx\") == \"2\");\n     // section takes priority for multiple values\n-    BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend3\");\n+    BOOST_CHECK(test_args.TestArgString(\"-ccc\", \"xxx\") == \"extend3\");\n     // check multiple values works\n     const std::vector<std::string> sec2_ccc_expected = {\"extend3\",\"argument\",\"multiple\"};\n     const auto& sec2_ccc_res = test_args.GetArgs(\"-ccc\");\n@@ -859,19 +916,19 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     test_args.SelectConfigNetwork(CBaseChainParams::MAIN);\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"e\");\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"0\");\n \n     test_args.SelectConfigNetwork(\"sec1\");\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n-    BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 1);\n+    BOOST_CHECK(test_args.TestArgList(\"-d\").size() == 1);\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"1\");\n \n     test_args.SelectConfigNetwork(\"sec2\");\n     BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"xxx\");\n-    BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 0);\n+    BOOST_CHECK(test_args.TestArgList(\"-d\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 1);\n-    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+    BOOST_CHECK(test_args.TestArgString(\"-h\", \"xxx\") == \"0\");\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)\n@@ -1093,7 +1150,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n \n         const std::string& name = net_specific ? \"wallet\" : \"server\";\n         const std::string key = \"-\" + name;\n-        parser.AddArg(key, name, ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+        parser.AddArg(key, name, ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n         if (net_specific) parser.SetNetworkOnlyArg(key);\n \n         auto args = GetValues(arg_actions, section, name, \"a\");\n@@ -1136,14 +1193,14 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n         if (!parser.IsArgSet(key)) {\n             desc += \"unset\";\n             BOOST_CHECK(!parser.IsArgNegated(key));\n-            BOOST_CHECK_EQUAL(parser.GetArg(key, \"default\"), \"default\");\n+            BOOST_CHECK_EQUAL(parser.TestArgString(key, \"default\"), \"default\");\n             BOOST_CHECK(parser.GetArgs(key).empty());\n         } else if (parser.IsArgNegated(key)) {\n             desc += \"negated\";\n-            BOOST_CHECK_EQUAL(parser.GetArg(key, \"default\"), \"0\");\n+            BOOST_CHECK_EQUAL(parser.TestArgString(key, \"default\"), \"0\");\n             BOOST_CHECK(parser.GetArgs(key).empty());\n         } else {\n-            desc += parser.GetArg(key, \"default\");\n+            desc += parser.TestArgString(key, \"default\");\n             desc += \" |\";\n             for (const auto& arg : parser.GetArgs(key)) {\n                 desc += \" \";\n@@ -1220,8 +1277,8 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n     ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions) {\n         TestArgsManager parser;\n         LOCK(parser.cs_args);\n-        parser.AddArg(\"-regtest\", \"regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-        parser.AddArg(\"-testnet\", \"testnet\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-regtest\", \"regtest\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-testnet\", \"testnet\", ArgsManager::ALLOW_ANY | ArgsManager::ALLOW_LIST, OptionsCategory::OPTIONS);\n \n         auto arg = [](Action action) { return action == ENABLE_TEST  ? \"-testnet=1\"   :\n                                               action == DISABLE_TEST ? \"-testnet=0\"   :"
      },
      {
        "sha": "5731f5f8f14e138035378cdc8895524744cf2ca3",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/601fe2d6f751356836c7bd98441d569c592ea4fe/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/601fe2d6f751356836c7bd98441d569c592ea4fe/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=601fe2d6f751356836c7bd98441d569c592ea4fe",
        "patch": "@@ -471,13 +471,17 @@ bool ArgsManager::CheckArgFlags(const std::string& name,\n     const char* context) const\n {\n     std::optional<unsigned int> flags = GetArgFlags(name);\n-    if (!flags || *flags & ArgsManager::ALLOW_ANY) return false;\n+    if (!flags) return false;\n+\n+    if (*flags & ALLOW_ANY) require &= ~(ALLOW_BOOL | ALLOW_INT | ALLOW_STRING);\n+\n     if ((*flags & require) != require || (*flags & forbid) != 0) {\n         throw std::logic_error(\n             strprintf(\"Bug: Can't call %s on arg %s registered with flags 0x%08x (requires 0x%x, disallows 0x%x)\",\n                 context, name, *flags, require, forbid));\n     }\n-    return true;\n+\n+    return !(*flags & ALLOW_ANY);\n }\n \n const fs::path& ArgsManager::GetBlocksDirPath() const"
      }
    ]
  }
]