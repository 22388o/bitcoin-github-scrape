[
  {
    "sha": "fa262712ca0981cb0ee68cd3dd99a214a20dcbf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI2MjcxMmNhMDk4MWNiMGVlNjhjZDNkZDk5YTIxNGEyMGRjYmYx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-22T20:57:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-22T20:56:56Z"
      },
      "message": "test: Check submitblock return values",
      "tree": {
        "sha": "d5650c300dfac9cb1a27624a51d16f7a5ba3bd3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5650c300dfac9cb1a27624a51d16f7a5ba3bd3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiLjAv+M76IFBZAlOmlZcY/UnW8B6A3f7uebQbyGtiI4VzBeFhA13t7G9anXpjg\nJ0Uj3U5W0JoNK7qbzUdJ28NFqyWdpdMnw/N+DJt22fFwEs126EhPSFAZOcQ5HmIt\nH05kTiLgEnXOt6phozg18eh90HuiaZDREoTR/38EMexplmia9FwwKEpmy1ng/JQu\naB6AJhbpupwAx3H54+SNQKK6y+/9/e1Pa8jTbOOUl+iRIWD5CwXrlp8nTmjmgP2O\n0ZWzFBCU1OzRCU/d35HSD01Vq7zQuMloWz02IhoLl9TBAvSN6MFcZ84XlHWhlmF1\nAik0pdclO3zJydOyl1GMovXuA9bys59VziSB63w5uHvyzc+IWUNXttgRBefgXmrn\n4bbM3qCq+NJaI1VQ+pmkws3rV0s8ZAktcEo22uIIRRYYxjjjMYt+jpJWMsoPrNmh\nOZunEmpc/M2bYI5oQT6ZS1qnsdi1uHp0KoICKosRK6x5a+B9lvJ3aqSPes7Q8Itx\n4FO9CcAX\n=D0vh\n-----END PGP SIGNATURE-----",
        "payload": "tree d5650c300dfac9cb1a27624a51d16f7a5ba3bd3a\nparent a7a6f1ff417abc2452a2a2b9edcd2f12d6c14441\nauthor MarcoFalke <falke.marco@gmail.com> 1587589039 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1587589016 -0400\n\ntest: Check submitblock return values\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7a6f1ff417abc2452a2a2b9edcd2f12d6c14441",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7a6f1ff417abc2452a2a2b9edcd2f12d6c14441",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7a6f1ff417abc2452a2a2b9edcd2f12d6c14441"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "549e8b2029a9bb93b6c6b4caa86f705093a66056",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fa262712ca0981cb0ee68cd3dd99a214a20dcbf1",
        "patch": "@@ -324,7 +324,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n             block.solve()\n             tip = block.sha256\n             height += 1\n-            self.nodes[0].submitblock(ToHex(block))\n+            assert_equal(None if i == 1 else 'inconclusive', self.nodes[0].submitblock(ToHex(block)))\n             cur_time += 1\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -381,7 +381,7 @@ def test_bip68_not_consensus(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        self.nodes[0].submitblock(block.serialize().hex())\n+        assert_equal(None, self.nodes[0].submitblock(block.serialize().hex()))\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n     def activateCSV(self):"
      },
      {
        "sha": "ff55cb76d950b7f11c8a93aa32cf355aeb9ee157",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=fa262712ca0981cb0ee68cd3dd99a214a20dcbf1",
        "patch": "@@ -111,7 +111,7 @@ def block_submit(self, node, txs, witness=False, accept=False):\n         witness and add_witness_commitment(block)\n         block.rehash()\n         block.solve()\n-        node.submitblock(block.serialize().hex())\n+        assert_equal(None if accept else 'block-validation-failed', node.submitblock(block.serialize().hex()))\n         if (accept):\n             assert_equal(node.getbestblockhash(), block.hash)\n             self.tip = block.sha256"
      },
      {
        "sha": "25e2f39c6a63bacae6a64e3333252dacd860bd24",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa262712ca0981cb0ee68cd3dd99a214a20dcbf1/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa262712ca0981cb0ee68cd3dd99a214a20dcbf1",
        "patch": "@@ -862,13 +862,13 @@ def test_block_malleability(self):\n \n         # We can't send over the p2p network, because this is too big to relay\n         # TODO: repeat this test with a block that can be relayed\n-        self.nodes[0].submitblock(block.serialize().hex())\n+        assert_equal('bad-witness-nonce-size', self.nodes[0].submitblock(block.serialize().hex()))\n \n         assert self.nodes[0].getbestblockhash() != block.hash\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n         assert get_virtual_size(block) < MAX_BLOCK_BASE_SIZE\n-        self.nodes[0].submitblock(block.serialize().hex())\n+        assert_equal(None, self.nodes[0].submitblock(block.serialize().hex()))\n \n         assert self.nodes[0].getbestblockhash() == block.hash\n \n@@ -975,14 +975,14 @@ def test_submit_block(self):\n         add_witness_commitment(block, nonce=1)\n         block.vtx[0].wit = CTxWitness()  # drop the nonce\n         block.solve()\n-        self.nodes[0].submitblock(block.serialize().hex())\n+        assert_equal('bad-witness-merkle-match', self.nodes[0].submitblock(block.serialize().hex()))\n         assert self.nodes[0].getbestblockhash() != block.hash\n \n         # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n         add_witness_commitment(block, nonce=0)\n         block.vtx[0].wit = CTxWitness()\n         block.solve()\n-        self.nodes[0].submitblock(block.serialize().hex())\n+        assert_equal(None, self.nodes[0].submitblock(block.serialize().hex()))\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n         # This time, add a tx with non-empty witness, but don't supply\n@@ -997,7 +997,7 @@ def test_submit_block(self):\n         block_2.vtx[0].vout.pop()\n         block_2.vtx[0].wit = CTxWitness()\n \n-        self.nodes[0].submitblock(block_2.serialize().hex())\n+        assert_equal('bad-txnmrklroot', self.nodes[0].submitblock(block_2.serialize().hex()))\n         # Tip should not advance!\n         assert self.nodes[0].getbestblockhash() != block_2.hash\n "
      }
    ]
  }
]