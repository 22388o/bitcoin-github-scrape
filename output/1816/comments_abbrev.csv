BitcoinPullTester,2012-09-10T12:18:49Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/c077555c77dd1a58bedd6466a086c4f116fd0e57 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-8421578,8421578,
gavinandresen,2012-09-10T14:08:39Z,"Nested-three-deep reject(DoS(error(...))) with two different error strings seems kinda crazy. If I wasn't familiar with the history of how that came to be I'd be befuddled.\n\nCould it be simplified to just:\nreturn reject(errorMessage, int nDoS=0) ?\n\n... where reject prints errorMessage to debug.log and saves it in the block, and then does the DoS thing if nDoS > 0. Then returns false.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-8424448,8424448,
luke-jr,2012-09-11T01:40:14Z,"I'll flatten this later and collapse the 3 levels of function wrappers, just needed to get something working for Eligius...\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-8444452,8444452,
BitcoinPullTester,2012-09-12T00:10:44Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/8f976aaa862c933c41c153007d0ffe3093ff475b for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-8477180,8477180,
luke-jr,2012-11-15T00:24:19Z,Rebased and implemented @sipa 's CValidationResult solution.\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-10392472,10392472,
BitcoinPullTester,2012-11-24T22:57:38Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/212089d306d351e63111e91a969e9da1b1920cbc for test log.\n\nThis pull does not merge cleanly onto current master\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-10684867,10684867,
BitcoinPullTester,2012-11-27T18:43:57Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/46888e6abca27dd6d2132aab7cd63f25363057c6 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-10770788,10770788,
jgarzik,2013-05-30T17:08:59Z,No objections to the code.  Driving use case?\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-18694614,18694614,
luke-jr,2013-05-30T17:17:01Z,Ability to test block templates before putting the effort into mining them.\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-18695132,18695132,
jgarzik,2013-05-30T17:26:59Z,That's a use case.  What size user constituency is _driving_ this?  Do multiple pools want this?\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-18695846,18695846,
luke-jr,2013-05-30T18:06:26Z,"As far as I know, only Eligius and EclipseMC are actively using this today. Any pool using Eloipool for their poolserver would be able to immediately take advantage of it in the simplest case. It is also necessary for both a multiple-validating-node-implementation economy, and miner-chooses-his-own-transactions GBT-based pool mining.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-18697341,18697341,
sipa,2013-05-30T18:10:32Z,"@jgarzik I don't think that's a requirement (though certainly something to take into consideration).\n\nI like the idea of such functionality, as it allows miners to validate their work against multiple implementations. Especially with alternative full node implementations becoming available, having something like this may be inevitable. Plus it's a good debugging tool for checking whether new (un",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-18697600,18697600,
petertodd,2013-05-31T21:04:24Z,@sipa A good example where the validation is extremely useful is a safety net for bitcoin changes that could potentially create invalid blocks. For instance in discussions with pools and miners something that comes up with implementing replace-by-fee and the child-pays-for-parent code I'm working on is the danger that there will be some kind of bug that leads to an invalid block. (let alone a deli,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-18771491,18771491,
sipa,2013-06-01T08:29:29Z,"@petertodd Sure, I agree it's a very good way to debug and test potentially forking changes. I just don't like what it may lead to.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-18785624,18785624,
rebroad,2013-06-02T03:43:46Z,@sipa I agree it is good to be wary of where this may lead to. Are you meaning to imply that leaving things as they are may be a better alternative to the proposed solution made by Luke?\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-18801469,18801469,
DrHaribo,2013-06-04T21:56:00Z,I would like to have block proposal functionality for BitMinter as well.\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-18942190,18942190,
ghost,2013-07-10T12:35:32Z,"I'd very much like this for my new pool (currently in private testing), if another ""driver"" is needed :)\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-20738783,20738783,
gavinandresen,2013-10-21T01:08:53Z,Rebase needed.\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-26687926,26687926,
luke-jr,2013-10-25T00:29:45Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-27046226,27046226,
laanwj,2013-11-11T14:40:07Z,Should this be closed now that #3185 is in?\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-28204541,28204541,
luke-jr,2013-11-11T19:39:26Z,"No, #3185 is entirely unrelated.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-28231466,28231466,
luke-jr,2013-12-03T15:35:52Z,Rebased on top of #3185.\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-29719634,29719634,
jgarzik,2014-06-06T18:55:32Z,"Seems nominally OK, but I'm not convinced the CValidationState stuff is correct for all cases.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-45372132,45372132,
luke-jr,2014-06-26T12:50:10Z,"Notes to self: We shouldn't store proposed orphan blocks (Edit: Confirmed, this doesn't). Ensure nBits is itself checked (Edit: via AcceptBlock).\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-47221140,47221140,
BitcoinPullTester,2014-06-26T18:01:52Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/p1816_f21746c89f7b38440c471ad95bbd0158460ad677/ for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.lo",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-47258303,47258303,
gmaxwell,2014-07-14T21:04:59Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-48959531,48959531,
jgarzik,2014-08-04T15:48:26Z,"Sounds like the consensus on this is to merge, once rebased and [self-]notes addressed.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-51077896,51077896,
jgarzik,2014-10-13T15:18:45Z,"ACK collection... @gmaxwell @sipa @laanwj @gavinandresen ?\n\nSeems like the consensus is to merge, and the author rebased as requested.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-58907295,58907295,
luke-jr,2014-10-13T21:41:57Z,"@sipa pointed out that ProcessBlock no longer performs the full validation of the new block, which breaks detecting such failures for this.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-58959157,58959157,
luke-jr,2014-10-13T21:49:57Z,"For that issue, see also https://github.com/bitcoin/bitcoin/pull/3727#issuecomment-50601253 and #5083 \n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-58960126,58960126,
luke-jr,2014-10-30T02:58:54Z,"Rebased on top of #5106, #3727, and #5103\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-61039399,61039399,
laanwj,2014-11-17T13:21:49Z,utACK apart from above nits - commithash b61b59f9ce680f6d514e377b5fe591f5a3f7c6e4 https://dev.visucore.com/bitcoin/acks/1816\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-63303416,63303416,
luke-jr,2014-11-17T19:20:56Z,Comments addressed and QA RPC tests added.\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-63359249,63359249,
sipa,2014-11-18T16:30:40Z,@luke-jr I'm hacking a bit on this myself now (just so we don't do double work).\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-63499105,63499105,
sipa,2014-11-18T16:56:30Z,"@luke-jr See #5302. Feel free to disagree, cherry-pick, or edit into your commits.\n",https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-63503776,63503776,
laanwj,2014-11-19T09:38:45Z,Seems ready to merge now? Ready to ACK this now @gmaxwell @sipa @gavinandresen ?\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-63613784,63613784,
sipa,2014-11-19T23:41:11Z,Untested ACK.\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-63736216,63736216,
luke-jr,2014-11-20T00:18:11Z,(Made the change @sipa suggested.)\n,https://github.com/bitcoin/bitcoin/pull/1816#issuecomment-63740164,63740164,
sipa,2012-09-21T12:55:09Z,"I really don't like CBlocks storing their own reject string, seems like a layer violation. Maybe not directly related to this change, as nDoS does the same.\n\nI'd rather see a CValidationResult which stores such information, which is returned or pass-by-ref inside the block- and transaction validation functions. That's maybe out of scope for this change, though.\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r1660813,1660813,src/main.h
luke-jr,2013-01-31T16:57:44Z,This seems to have a race condition - or maybe just a bug when proposing based on a not-the-most-recent prevblock.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r2846549,2846549,src/main.cpp
Diapolo,2013-02-01T20:45:02Z,"I thought about adding these, too :), nice you catched that.\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r2864980,2864980,src/main.cpp
Diapolo,2013-02-01T20:56:46Z,"Why do you assign fCheckPOW here? I know that works, but I would set it to false and use fCheckPOW in the following if-clause.\nSo we have fCheckPOW for calling CheckProofOfWork(), which writes it's result to fHasPOW.\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r2865117,2865117,src/main.cpp
luke-jr,2013-02-01T21:29:58Z,CheckBlock calls CheckProofOfWork if fCheckPOW is true.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r2865589,2865589,src/main.cpp
luke-jr,2013-02-01T21:38:43Z,Fixed in current code (stale-prevblk check above)\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r2865704,2865704,src/main.cpp
Diapolo,2013-02-01T22:00:07Z,"I just wanted you to differentiate between fCheckPOW and fHasPOW, which you don't do with the current initialisation, that's all :).\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r2866017,2866017,src/main.cpp
luke-jr,2013-02-01T22:37:52Z,"fCheckPOW is ""should the function check the proof-of-work?""\nfHasPOW is ""does the block in fact satisfy the proof-of-work?""\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r2866499,2866499,src/main.cpp
Diapolo,2013-02-01T22:46:51Z,"I know, you just dont seem to understand, what I am trying to tell you ;-).\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r2866582,2866582,src/main.cpp
laanwj,2014-06-25T09:04:34Z,"Instead of adding a fWriteToDisk boolean argument, wouldn't it be more clear to split up the function in a checking and disk-writing part?\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r14175122,14175122,src/main.cpp
laanwj,2014-06-25T09:05:45Z,Same here. I'm not a fan of boolean arguments that change the functionality of a function to something completely different. Would prefer just having two functions and moving the common stuff to a third.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r14175156,14175156,src/main.cpp
luke-jr,2014-06-26T13:09:00Z,"Splitting up these means the new split functions would need to assume the mutex is held already (thus not get it themselves) to ensure the mutex isn't released between checks & writing - forcing the callers to hold the mutex instead. In which case IMO those new methods would best be private, and the current AcceptBlock interface (with fWriteToDisk added) exposed as a wrapper. Is that a change that",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r14238790,14238790,src/main.cpp
laanwj,2014-08-04T15:59:47Z,"Sounds fair to me. Except for adding a fWriteToDisk boolean argument, which was my problem with this in the first place. The idea would be to have two functions, one that only checks and one that checks and writes to disk.\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r15763154,15763154,src/main.cpp
laanwj,2014-11-17T12:46:35Z,"Please check ppindex itself for NULL as well before this assignment, as was the case in the old code\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20432912,20432912,src/main.cpp
laanwj,2014-11-17T12:49:32Z,Making this Array static looks like premature optimization to me. I'd worry about multiple threads using it at the same time (resulting in race conditions). I'd prefer to just build it when needed.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20433050,20433050,src/rpcmining.cpp
laanwj,2014-11-17T12:55:10Z,What is the reason to pass a `CBlockIndex* const &` instead of just a `const CBlockIndex *` for `pindexPrev`? (same for `TestBlockValidity` below)\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20433265,20433265,src/main.h
laanwj,2014-11-17T13:01:12Z,"`pindex->nStatus |= BLOCK_FAILED_VALID;` was removed here - verified that it still happens:\n- This call to `state.DoS` (and the one below) sets `state.mode = MODE_INVALID` and `state.corruptionPossible = false`\n- After return in `AcceptBlock`, where this code comes from, the check `state.IsInvalid() && !state.CorruptionPossible()` is made, in which case `pindex->nStatus |= BLOCK_FAILED_VALID`\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20433561,20433561,src/main.cpp
laanwj,2014-11-17T13:02:01Z,"Nit: please use %s w/ `__func__` here for the error, so that it shows the right function name instead of `AcceptBlock()` (same on line 2419)\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20433597,20433597,src/main.cpp
sipa,2014-11-17T13:11:07Z,"This shouldn't be necessary (but won't hurt): if any CValidationState-updating function sets a non-valid state, it should return false already, so this could be replaced by an assert(state.IsValid());\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20433964,20433964,src/main.cpp
sipa,2014-11-17T13:12:48Z,I expect it's to minimize the differences in the code that's moving from the Accept\* functions to the ContextualCheck\* functions. But I agree it would be cleaner to just pass in a CBlockIndex*.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20434035,20434035,src/main.h
sipa,2014-11-17T13:15:11Z,Can this go in core_read/core_io?\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20434125,20434125,src/rpcmining.cpp
sipa,2014-11-17T13:30:54Z,Pass by reference?\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20434724,20434724,src/rpcmining.cpp
sipa,2014-11-17T13:41:43Z,"Indeed, I like moving those manual nStatus updates out.\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20435120,20435120,src/main.cpp
sipa,2014-11-17T13:44:51Z,"Does it? It seems AcceptBlockHeader does...\n\nEDIT: Ignore, I misread.\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20435368,20435368,src/main.cpp
sipa,2014-11-17T13:46:21Z,Agree.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20435441,20435441,src/rpcmining.cpp
luke-jr,2014-11-17T16:48:41Z,Does it matter for const?\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20447432,20447432,src/rpcmining.cpp
luke-jr,2014-11-17T16:49:11Z,"Any way we can just make this a static const Array somehow? That seems cleanest, but not sure if it's possible to do in C++ :/\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20447464,20447464,src/rpcmining.cpp
sipa,2014-11-17T16:49:50Z,Avoiding a copy.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20447506,20447506,src/rpcmining.cpp
sipa,2014-11-17T16:51:15Z,"static const Array aCaps = boost::assign::list_of(""proposal"");\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20447617,20447617,src/rpcmining.cpp
TheBlueMatt,2014-11-18T02:36:31Z,"Does this mean its a blocker, or just future feature?\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20482212,20482212,qa/rpc-tests/getblocktemplate_proposals.py
luke-jr,2014-11-18T02:43:29Z,It means regtest mode is failing to enforce height-in-coinbase rules. No reason to think it affects real-world use.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20482474,20482474,qa/rpc-tests/getblocktemplate_proposals.py
sipa,2014-11-18T09:53:30Z,"Can you move the duplicate/prevfinding code to AcceptBlockHeader, and have this function just take a CBlockIndex\* pointer (which cannot be NULL)? I would prefer it if this function didn't need cs_main.\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20495242,20495242,src/main.cpp
sipa,2014-11-18T18:55:19Z,mapBlockIndex.count(hash) != 0 ?\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20528180,20528180,src/rpcmining.cpp
sipa,2014-11-18T18:57:22Z,"Actually, just having the header does not mean we already have the block.\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20528333,20528333,src/rpcmining.cpp
sipa,2014-11-19T23:16:28Z,nit: pindex->IsValid(BLOCK_VALID_SCRIPTS)\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20616068,20616068,src/rpcmining.cpp
Diapolo,2014-11-20T16:12:49Z,"Just for completeness, every other function here has a variable (name) specified, while CBlock has not. In the definition you use `block`.\n",https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20656485,20656485,src/core_io.h
luke-jr,2014-11-20T16:15:01Z,Better not to add redundant content.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20656649,20656649,src/core_io.h
Diapolo,2014-11-20T16:16:48Z,You are such a contra guy sometimes ^^.\n,https://github.com/bitcoin/bitcoin/pull/1816#discussion_r20656783,20656783,src/core_io.h
