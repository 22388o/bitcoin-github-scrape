[
  {
    "sha": "aa62b68745ef43ca135fdffbd886818221e85731",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTYyYjY4NzQ1ZWY0M2NhMTM1ZmRmZmJkODg2ODE4MjIxZTg1NzMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-24T15:12:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:56:32Z"
      },
      "message": "Benchmark rolling bloom filter",
      "tree": {
        "sha": "ce837dfbe07758ee59db6d8c804ce510ece33760",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce837dfbe07758ee59db6d8c804ce510ece33760"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa62b68745ef43ca135fdffbd886818221e85731",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa62b68745ef43ca135fdffbd886818221e85731",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa62b68745ef43ca135fdffbd886818221e85731",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa62b68745ef43ca135fdffbd886818221e85731/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5725807402ec9c056e43bebe25a2543cbd94ddc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5725807402ec9c056e43bebe25a2543cbd94ddc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5725807402ec9c056e43bebe25a2543cbd94ddc6"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 45,
      "deletions": 1
    },
    "files": [
      {
        "sha": "24e2b3e0c85e17b90f605d276f20d5641f198549",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa62b68745ef43ca135fdffbd886818221e85731/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa62b68745ef43ca135fdffbd886818221e85731/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=aa62b68745ef43ca135fdffbd886818221e85731",
        "patch": "@@ -7,7 +7,8 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n-  bench/Examples.cpp\n+  bench/Examples.cpp \\\n+  bench/rollingbloom.cpp\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "73c02cf7189eb1b0514b1bcf8e4cdd61a09e3bd5",
        "filename": "src/bench/rollingbloom.cpp",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa62b68745ef43ca135fdffbd886818221e85731/src/bench/rollingbloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa62b68745ef43ca135fdffbd886818221e85731/src/bench/rollingbloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/rollingbloom.cpp?ref=aa62b68745ef43ca135fdffbd886818221e85731",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include \"bench.h\"\n+#include \"bloom.h\"\n+#include \"utiltime.h\"\n+\n+static void RollingBloom(benchmark::State& state)\n+{\n+    CRollingBloomFilter filter(120000, 0.000001);\n+    std::vector<unsigned char> data(32);\n+    uint32_t count = 0;\n+    uint32_t nEntriesPerGeneration = (120000 + 1) / 2;\n+    uint32_t countnow = 0;\n+    uint64_t match = 0;\n+    while (state.KeepRunning()) {\n+        count++;\n+        data[0] = count;\n+        data[1] = count >> 8;\n+        data[2] = count >> 16;\n+        data[3] = count >> 24;\n+        if (countnow == nEntriesPerGeneration) {\n+            int64_t b = GetTimeMicros();\n+            filter.insert(data);\n+            int64_t e = GetTimeMicros();\n+            std::cout << \"RollingBloom-refresh,1,\" << (e-b)*0.000001 << \",\" << (e-b)*0.000001 << \",\" << (e-b)*0.000001 << \"\\n\";\n+            countnow = 0;\n+        } else {\n+            filter.insert(data);\n+        }\n+        countnow++;\n+        data[0] = count >> 24;\n+        data[1] = count >> 16;\n+        data[2] = count >> 8;\n+        data[3] = count;\n+        match += filter.contains(data);\n+    }\n+}\n+\n+BENCHMARK(RollingBloom);"
      }
    ]
  },
  {
    "sha": "1953c40aa9589a03035fd294f3ba3549374a4826",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTUzYzQwYWE5NTg5YTAzMDM1ZmQyOTRmM2JhMzU0OTM3NGE0ODI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-24T16:37:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-28T12:56:32Z"
      },
      "message": "More efficient bitsliced rolling Bloom filter\n\nThis patch changes the implementation from one that stores 16 2-bit integers\nin one uint32_t's, to one that stores the first bit of 64 2-bit integers in\none uint64_t and the second bit in another. This allows for 450x faster\nrefreshing and 2.2x faster average speed.",
      "tree": {
        "sha": "5b8d6f7d7dbdb8852642339d54050693626d277b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b8d6f7d7dbdb8852642339d54050693626d277b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1953c40aa9589a03035fd294f3ba3549374a4826",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1953c40aa9589a03035fd294f3ba3549374a4826",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1953c40aa9589a03035fd294f3ba3549374a4826",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1953c40aa9589a03035fd294f3ba3549374a4826/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa62b68745ef43ca135fdffbd886818221e85731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa62b68745ef43ca135fdffbd886818221e85731",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa62b68745ef43ca135fdffbd886818221e85731"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 32,
      "deletions": 26
    },
    "files": [
      {
        "sha": "fd328e8e96e5376ce4f0bec0664bca0ecebbb95f",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 13,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1953c40aa9589a03035fd294f3ba3549374a4826/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1953c40aa9589a03035fd294f3ba3549374a4826/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=1953c40aa9589a03035fd294f3ba3549374a4826",
        "patch": "@@ -234,14 +234,18 @@ CRollingBloomFilter::CRollingBloomFilter(unsigned int nElements, double fpRate)\n      */\n     uint32_t nFilterBits = (uint32_t)ceil(-1.0 * nHashFuncs * nMaxElements / log(1.0 - exp(logFpRate / nHashFuncs)));\n     data.clear();\n-    /* We store up to 16 'bits' per data element. */\n-    data.resize((nFilterBits + 15) / 16);\n+    /* For each data element we need to store 2 bits. If both bits are 0, the\n+     * bit is treated as unset. If the bits are (01), (10), or (11), the bit is\n+     * treated as set in generation 1, 2, or 3 respectively.\n+     * These bits are stored in separate integers: position P corresponds to bit\n+     * (P & 63) of the integers data[(P >> 6) * 2] and data[(P >> 6) * 2 + 1]. */\n+    data.resize(((nFilterBits + 63) / 64) << 1);\n     reset();\n }\n \n /* Similar to CBloomFilter::Hash */\n-inline unsigned int CRollingBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const {\n-    return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (data.size() * 16);\n+static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+    return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n \n void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n@@ -252,18 +256,25 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n         if (nGeneration == 4) {\n             nGeneration = 1;\n         }\n+        uint64_t nGenerationMask1 = -(uint64_t)(nGeneration & 1);\n+        uint64_t nGenerationMask2 = -(uint64_t)(nGeneration >> 1);\n         /* Wipe old entries that used this generation number. */\n-        for (uint32_t p = 0; p < data.size() * 16; p++) {\n-            if (get(p) == nGeneration) {\n-                put(p, 0);\n-            }\n+        for (uint32_t p = 0; p < data.size(); p += 2) {\n+            uint64_t p1 = data[p], p2 = data[p + 1];\n+            uint64_t mask = (p1 ^ nGenerationMask1) | (p2 ^ nGenerationMask2);\n+            data[p] = p1 & mask;\n+            data[p + 1] = p2 & mask;\n         }\n     }\n     nEntriesThisGeneration++;\n \n     for (int n = 0; n < nHashFuncs; n++) {\n-        uint32_t h = Hash(n, vKey);\n-        put(h, nGeneration);\n+        uint32_t h = RollingBloomHash(n, nTweak, vKey);\n+        int bit = h & 0x3F;\n+        uint32_t pos = (h >> 6) % data.size();\n+        /* The lowest bit of pos is ignored, and set to zero for the first bit, and to one for the second. */\n+        data[pos & ~1] = (data[pos & ~1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration & 1)) << bit;\n+        data[pos | 1] = (data[pos | 1] & ~(((uint64_t)1) << bit)) | ((uint64_t)(nGeneration >> 1)) << bit;\n     }\n }\n \n@@ -276,8 +287,11 @@ void CRollingBloomFilter::insert(const uint256& hash)\n bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     for (int n = 0; n < nHashFuncs; n++) {\n-        uint32_t h = Hash(n, vKey);\n-        if (get(h) == 0) {\n+        uint32_t h = RollingBloomHash(n, nTweak, vKey);\n+        int bit = h & 0x3F;\n+        uint32_t pos = (h >> 6) % data.size();\n+        /* If the relevant bit is not set in either data[pos & ~1] or data[pos | 1], the filter does not contain vKey */\n+        if (!(((data[pos & ~1] | data[pos | 1]) >> bit) & 1)) {\n             return false;\n         }\n     }\n@@ -295,7 +309,7 @@ void CRollingBloomFilter::reset()\n     nTweak = GetRand(std::numeric_limits<unsigned int>::max());\n     nEntriesThisGeneration = 0;\n     nGeneration = 1;\n-    for (std::vector<uint32_t>::iterator it = data.begin(); it != data.end(); it++) {\n+    for (std::vector<uint64_t>::iterator it = data.begin(); it != data.end(); it++) {\n         *it = 0;\n     }\n }"
      },
      {
        "sha": "ad6de625d8f8aa0653dc1cceb27d327ab20d8900",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1953c40aa9589a03035fd294f3ba3549374a4826/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1953c40aa9589a03035fd294f3ba3549374a4826/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=1953c40aa9589a03035fd294f3ba3549374a4826",
        "patch": "@@ -135,20 +135,9 @@ class CRollingBloomFilter\n     int nEntriesPerGeneration;\n     int nEntriesThisGeneration;\n     int nGeneration;\n-    std::vector<uint32_t> data;\n+    std::vector<uint64_t> data;\n     unsigned int nTweak;\n     int nHashFuncs;\n-\n-    unsigned int Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const;\n-\n-    inline int get(uint32_t position) const {\n-        return (data[(position >> 4) % data.size()] >> (2 * (position & 0xF))) & 0x3;\n-    }\n-\n-    inline void put(uint32_t position, uint32_t val) {\n-        uint32_t& cell = data[(position >> 4) % data.size()];\n-        cell = (cell & ~(((uint32_t)3) << (2 * (position & 0xF)))) | (val << (2 * (position & 0xF)));\n-    }\n };\n \n #endif // BITCOIN_BLOOM_H"
      },
      {
        "sha": "042fad42dae89ade776da026423af63667554986",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1953c40aa9589a03035fd294f3ba3549374a4826/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1953c40aa9589a03035fd294f3ba3549374a4826/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=1953c40aa9589a03035fd294f3ba3549374a4826",
        "patch": "@@ -514,11 +514,14 @@ BOOST_AUTO_TEST_CASE(rolling_bloom)\n         if (i >= 100)\n             BOOST_CHECK(rb1.contains(data[i-100]));\n         rb1.insert(data[i]);\n+        BOOST_CHECK(rb1.contains(data[i]));\n     }\n \n     // Insert 999 more random entries:\n     for (int i = 0; i < 999; i++) {\n-        rb1.insert(RandomData());\n+        std::vector<unsigned char> d = RandomData();\n+        rb1.insert(d);\n+        BOOST_CHECK(rb1.contains(d));\n     }\n     // Sanity check to make sure the filter isn't just filling up:\n     nHits = 0;"
      }
    ]
  }
]