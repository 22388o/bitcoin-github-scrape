TheBlueMatt,2012-06-02T02:43:03Z,"Updated with all the feedback so far.  Any further work (aside from bug-fixes) will be done on other branches, so this branch is ready for review.  Take special note of the last commit (and its very long commit message).\n",https://github.com/bitcoin/bitcoin/pull/1408#issuecomment-6074405,6074405,
TheBlueMatt,2012-07-05T20:15:26Z,"This needs rebasing, and Im not going to keep rebasing this stuff without any interest in eventually merging.  If it ever gets interest, I may reopen.\n",https://github.com/bitcoin/bitcoin/pull/1408#issuecomment-6789402,6789402,
gavinandresen,2012-06-01T12:27:15Z,"What is the big-picture purpose of CBlockStore ?\nIs it for storing blocks in the database?\nBeing told about new blocks and keeping track of the best chain?\nBoth? Something else?\n\nAnd what's up with ProcessCallbacks-- I'm not seeing why that's necessary, or why BlockStore would expose threads, but maybe that's because I don't understand the big-picture purpose/design.\n",https://github.com/bitcoin/bitcoin/pull/1408#discussion_r914353,914353,src/blockstore.h
TheBlueMatt,2012-06-01T12:33:26Z,"The purpose of CBlockStore is to act as a hub (oops, Im gonna rename it to CHub) between p2p, wallet and the block storage.  The block storage (including being told about new blocks, holding the chain (or not, if SPV)) will be hidden behind CHub, as seen by p2p and wallet.  A CHub can then callback to a CBlockStore/CSPVBlockStore/etc.  Eventually, you could even run p2p and wallet clients in separ",https://github.com/bitcoin/bitcoin/pull/1408#discussion_r914376,914376,src/blockstore.h
sipa,2012-06-08T14:47:54Z,"I suppose CHubListener could be derived protected. No class except CWallet should be able to call RegisterWithHub and related functions. The callback functions in CHubListener can be made protected directly I suppose - they are only intended to be overridden, not to be called by anyone except via CHub's signals.\n",https://github.com/bitcoin/bitcoin/pull/1408#discussion_r951182,951182,src/wallet.h
sipa,2012-06-08T14:51:12Z,"Perhaps we could have a class CHubClient, which has a pointer to a CHub in a protected field, and public methods EmitSome, which forward to the connected CHub (or maybe the EmitSome method's implementations could even be moved to CHubCLient). class CHubListener could then extend CHubClient and reuse the phub pointer in it.\n\nAdvantage: inside CWallet, you can simply call Emit\* directory without ",https://github.com/bitcoin/bitcoin/pull/1408#discussion_r951216,951216,src/hub.h
TheBlueMatt,2012-06-10T20:34:01Z,"Currently pwalletMain->RegisterWithHub(phub) is called from init.cpp, and I kinda like that design.  That said, I did go ahead and make the callback virtual functions protected.\n",https://github.com/bitcoin/bitcoin/pull/1408#discussion_r957355,957355,src/wallet.h
TheBlueMatt,2012-06-10T20:38:22Z,"I had originally made CHubListener do that as well, but, as it turns out, we only ever call EmitTransaction from CWalletTx::AcceptWalletTransaction (which calls EmitTransaction on each supporting transaction first), and making the hub pointer public so that CWalletTx can call pwallet->phub->EmitTransaction seems kinda ugly to me.  Thus a CHubClient would be unused (currently), but ACK on the idea ",https://github.com/bitcoin/bitcoin/pull/1408#discussion_r957359,957359,src/hub.h
