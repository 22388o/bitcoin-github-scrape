[
  {
    "sha": "bc4c4c66863fce718402a3f9b2da4e92c1898745",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzRjNGM2Njg2M2ZjZTcxODQwMmEzZjliMmRhNGU5MmMxODk4NzQ1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T20:25:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T00:51:45Z"
      },
      "message": "Make SyncTransaction provide an blocks instead of one transaction\n\nThis simplifies fixing #9148 as we can now hold cs_wallet across\nan entire block instead of only per-tx.\n\nThis change also removes the NOT_IN_BLOCK constant in favor of only\npassing the CBlockIndex* parameter to SyncTransactions when a new\nblock is being connected, instead of also when a block is being\ndisconnected.",
      "tree": {
        "sha": "9c2777100fced9c0920cb3bf420fbbb5443f4b6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c2777100fced9c0920cb3bf420fbbb5443f4b6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc4c4c66863fce718402a3f9b2da4e92c1898745",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4c4c66863fce718402a3f9b2da4e92c1898745",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc4c4c66863fce718402a3f9b2da4e92c1898745",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4c4c66863fce718402a3f9b2da4e92c1898745/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6696b4635ceb9b47aaa63244bff9032fa7b08354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6696b4635ceb9b47aaa63244bff9032fa7b08354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6696b4635ceb9b47aaa63244bff9032fa7b08354"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 57,
      "deletions": 48
    },
    "files": [
      {
        "sha": "dc796821b1c228c442187efc69ef51413f44a6cb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "patch": "@@ -729,21 +729,26 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanI\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n }\n \n-void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock) {\n-    if (nPosInBlock == CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK)\n+void PeerLogicValidation::SyncTransactions(const std::vector<CTransactionRef>& vtx, const CBlockIndex* pindex) {\n+    if (pindex == NULL)\n         return;\n \n     LOCK(cs_main);\n \n     std::vector<uint256> vOrphanErase;\n-    // Which orphan pool entries must we evict?\n-    for (size_t j = 0; j < tx.vin.size(); j++) {\n-        auto itByPrev = mapOrphanTransactionsByPrev.find(tx.vin[j].prevout);\n-        if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n-        for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n-            const CTransaction& orphanTx = *(*mi)->second.tx;\n-            const uint256& orphanHash = orphanTx.GetHash();\n-            vOrphanErase.push_back(orphanHash);\n+\n+    for (const CTransactionRef& ptx : vtx) {\n+        const CTransaction& tx = *ptx;\n+\n+        // Which orphan pool entries must we evict?\n+        for (size_t j = 0; j < tx.vin.size(); j++) {\n+            auto itByPrev = mapOrphanTransactionsByPrev.find(tx.vin[j].prevout);\n+            if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n+            for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n+                const CTransaction& orphanTx = *(*mi)->second.tx;\n+                const uint256& orphanHash = orphanTx.GetHash();\n+                vOrphanErase.push_back(orphanHash);\n+            }\n         }\n     }\n "
      },
      {
        "sha": "f678d90390bd54f50f3482d418af543f270af877",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "patch": "@@ -21,7 +21,7 @@ class PeerLogicValidation : public CValidationInterface {\n public:\n     PeerLogicValidation(CConnman* connmanIn);\n \n-    virtual void SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int nPosInBlock);\n+    virtual void SyncTransactions(const std::vector<CTransactionRef>& vtx, const CBlockIndex* pindex);\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n     virtual void BlockChecked(const CBlock& block, const CValidationState& state);\n     virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock);"
      },
      {
        "sha": "877359d0358bb4662612e01fd17277d773bbeb1f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "patch": "@@ -971,7 +971,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n     }\n \n-    GetMainSignals().SyncTransaction(tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+    GetMainSignals().SyncTransactions(std::vector<CTransactionRef>({ptx}), NULL);\n \n     return true;\n }\n@@ -2178,9 +2178,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     UpdateTip(pindexDelete->pprev, chainparams);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n-    for (const auto& tx : block.vtx) {\n-        GetMainSignals().SyncTransaction(*tx, pindexDelete->pprev, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n-    }\n+    GetMainSignals().SyncTransactions(block.vtx, NULL);\n     return true;\n }\n \n@@ -2479,8 +2477,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         for (const auto& pair : connectTrace.blocksConnected) {\n             assert(pair.second);\n             const CBlock& block = *(pair.second);\n-            for (unsigned int i = 0; i < block.vtx.size(); i++)\n-                GetMainSignals().SyncTransaction(*block.vtx[i], pair.first, i);\n+            GetMainSignals().SyncTransactions(block.vtx, pair.first);\n         }\n \n         // Notify external listeners about the new tip."
      },
      {
        "sha": "c8a11c6056270190ccf89a80004f7160096eb06e",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "patch": "@@ -14,7 +14,7 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n-    g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransactions.connect(boost::bind(&CValidationInterface::SyncTransactions, pwalletIn, _1, _2));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -33,7 +33,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransactions.disconnect(boost::bind(&CValidationInterface::SyncTransactions, pwalletIn, _1, _2));\n     g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n }\n@@ -46,7 +46,7 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.Inventory.disconnect_all_slots();\n     g_signals.SetBestChain.disconnect_all_slots();\n     g_signals.UpdatedTransaction.disconnect_all_slots();\n-    g_signals.SyncTransaction.disconnect_all_slots();\n+    g_signals.SyncTransactions.disconnect_all_slots();\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n     g_signals.NewPoWValidBlock.disconnect_all_slots();\n }"
      },
      {
        "sha": "44bde3d39b3849d527a36338445434d8874d7b6e",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "patch": "@@ -10,13 +10,14 @@\n #include <boost/shared_ptr.hpp>\n #include <memory>\n \n+#include \"primitives/transaction.h\" // CTransaction(Ref)\n+\n class CBlock;\n class CBlockIndex;\n struct CBlockLocator;\n class CBlockIndex;\n class CConnman;\n class CReserveScript;\n-class CTransaction;\n class CValidationInterface;\n class CValidationState;\n class uint256;\n@@ -33,7 +34,7 @@ void UnregisterAllValidationInterfaces();\n class CValidationInterface {\n protected:\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {}\n+    virtual void SyncTransactions(const std::vector<CTransactionRef> &ptxn, const CBlockIndex *pindex) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -50,10 +51,8 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction which indicates the transaction was conflicted, disconnected, or not in a block */\n-    static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n-    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n+    boost::signals2::signal<void (const std::vector<CTransactionRef> &, const CBlockIndex *pindex)> SyncTransactions;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "248f366be6d35bc58df242594b0f295dfbc1a642",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "patch": "@@ -1121,20 +1121,24 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock)\n+void CWallet::SyncTransactions(const std::vector<CTransactionRef>& vtx, const CBlockIndex *pindex)\n {\n     LOCK2(cs_main, cs_wallet);\n \n-    if (!AddToWalletIfInvolvingMe(tx, pindex, posInBlock, true))\n-        return; // Not one of ours\n+    for (size_t i = 0; i < vtx.size(); i++) {\n+        const CTransaction& tx = *vtx[i];\n \n-    // If a transaction changes 'conflicted' state, that changes the balance\n-    // available of the outputs it spends. So force those to be\n-    // recomputed, also:\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-    {\n-        if (mapWallet.count(txin.prevout.hash))\n-            mapWallet[txin.prevout.hash].MarkDirty();\n+        if (!AddToWalletIfInvolvingMe(tx, pindex, pindex ? i : -1, true))\n+            continue; // Not one of ours\n+\n+        // If a transaction changes 'conflicted' state, that changes the balance\n+        // available of the outputs it spends. So force those to be\n+        // recomputed, also:\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        {\n+            if (mapWallet.count(txin.prevout.hash))\n+                mapWallet[txin.prevout.hash].MarkDirty();\n+        }\n     }\n }\n "
      },
      {
        "sha": "94ed318324802ea0bb7b11f5915fc3684ca3b482",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "patch": "@@ -763,7 +763,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    void SyncTransactions(const std::vector<CTransactionRef>& vtx, const CBlockIndex *pindex);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();"
      },
      {
        "sha": "3f914751c46c3b09f9d935e36f88011043cc3494",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "patch": "@@ -144,19 +144,23 @@ void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, co\n     }\n }\n \n-void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int posInBlock)\n+void CZMQNotificationInterface::SyncTransactions(const std::vector<CTransactionRef>& vtx, const CBlockIndex* pindex)\n {\n-    for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n-    {\n-        CZMQAbstractNotifier *notifier = *i;\n-        if (notifier->NotifyTransaction(tx))\n-        {\n-            i++;\n-        }\n-        else\n+    for (const CTransactionRef& ptx : vtx) {\n+        const CTransaction& tx = *ptx;\n+\n+        for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n         {\n-            notifier->Shutdown();\n-            i = notifiers.erase(i);\n+            CZMQAbstractNotifier *notifier = *i;\n+            if (notifier->NotifyTransaction(tx))\n+            {\n+                i++;\n+            }\n+            else\n+            {\n+                notifier->Shutdown();\n+                i = notifiers.erase(i);\n+            }\n         }\n     }\n }"
      },
      {
        "sha": "8b060eadf8546858628d3da6841dd3b16c4394f4",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4c4c66863fce718402a3f9b2da4e92c1898745/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "patch": "@@ -24,7 +24,7 @@ class CZMQNotificationInterface : public CValidationInterface\n     void Shutdown();\n \n     // CValidationInterface\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    void SyncTransactions(const std::vector<CTransactionRef>& txs, const CBlockIndex *pindex);\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n \n private:"
      }
    ]
  },
  {
    "sha": "4c70ae2606af6f5f0a81f36948a464c00f71044c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzcwYWUyNjA2YWY2ZjVmMGE4MWYzNjk0OGE0NjRjMDBmNzEwNDRj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T21:01:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T00:51:45Z"
      },
      "message": "Make DisconnectBlock and ConnectBlock static in validation.cpp",
      "tree": {
        "sha": "5b83ef4d8bf7e76ee7c5d5113248fdcdd728033a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b83ef4d8bf7e76ee7c5d5113248fdcdd728033a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c70ae2606af6f5f0a81f36948a464c00f71044c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c70ae2606af6f5f0a81f36948a464c00f71044c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c70ae2606af6f5f0a81f36948a464c00f71044c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c70ae2606af6f5f0a81f36948a464c00f71044c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4c4c66863fce718402a3f9b2da4e92c1898745",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc4c4c66863fce718402a3f9b2da4e92c1898745"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 10,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a0a6b139e4d38a8caa37d965f2adc9c0834e2c19",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c70ae2606af6f5f0a81f36948a464c00f71044c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c70ae2606af6f5f0a81f36948a464c00f71044c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4c70ae2606af6f5f0a81f36948a464c00f71044c",
        "patch": "@@ -1544,7 +1544,11 @@ bool ApplyTxInUndo(const CTxInUndo& undo, CCoinsViewCache& view, const COutPoint\n     return fClean;\n }\n \n-bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n+/** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n+ *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n+ *  will be true if no problems were found. Otherwise, the return value will be false in case\n+ *  of problems. Note that in any case, coins may be modified. */\n+static bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean = NULL)\n {\n     assert(pindex->GetBlockHash() == view.GetBestBlock());\n \n@@ -1697,8 +1701,11 @@ static int64_t nTimeIndex = 0;\n static int64_t nTimeCallbacks = 0;\n static int64_t nTimeTotal = 0;\n \n-bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n+/** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n+ *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n+ *  can fail if those validity checks fail (among other reasons). */\n+static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false)\n {\n     AssertLockHeld(cs_main);\n "
      },
      {
        "sha": "fd671f963b65a9705f92e61da81ce657099196ed",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c70ae2606af6f5f0a81f36948a464c00f71044c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c70ae2606af6f5f0a81f36948a464c00f71044c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4c70ae2606af6f5f0a81f36948a464c00f71044c",
        "patch": "@@ -483,18 +483,6 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime);\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n-/** Apply the effects of this block (with given index) on the UTXO set represented by coins.\n- *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n- *  can fail if those validity checks fail (among other reasons). */\n-bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& coins,\n-                  const CChainParams& chainparams, bool fJustCheck = false);\n-\n-/** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n- *  In case pfClean is provided, operation will try to be tolerant about errors, and *pfClean\n- *  will be true if no problems were found. Otherwise, the return value will be false in case\n- *  of problems. Note that in any case, coins may be modified. */\n-bool DisconnectBlock(const CBlock& block, CValidationState& state, const CBlockIndex* pindex, CCoinsViewCache& coins, bool* pfClean = NULL);\n-\n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n "
      }
    ]
  },
  {
    "sha": "997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTdiNTc4YzQ2NzkyYjdiN2I1ZjdkOWNlMDRiYTBkMjJiM2RkZjk1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T21:44:25Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T01:41:11Z"
      },
      "message": "Remove CValidationInterface::UpdatedTransaction\n\nThis removes another callback from block connection logic, one more\nstep towards fixing #9148.\n\nNote that this does a full mapWallet loop after the first block\nwhich is connected after restart. This is due to a previous bug\nwhere a coinbase transaction from the current best tip which\nexisted in wallet immediately prior to restart would not be shown\nin the GUI except because on-load -checkblocks would call\nDisconnectBlock and ConnectBlock on the current tip. To avoid\nmaking it worse (ie that such transactions would never be displayed\nuntil restart), a scan to find such transactions was added.",
      "tree": {
        "sha": "7d5af088fc4df077c0f47b76d83a648222c9e855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d5af088fc4df077c0f47b76d83a648222c9e855"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c70ae2606af6f5f0a81f36948a464c00f71044c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c70ae2606af6f5f0a81f36948a464c00f71044c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c70ae2606af6f5f0a81f36948a464c00f71044c"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 29,
      "deletions": 23
    },
    "files": [
      {
        "sha": "81ec317202297ff3e3bb70de39bc72191f5342aa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
        "patch": "@@ -1941,12 +1941,6 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n     int64_t nTime5 = GetTimeMicros(); nTimeIndex += nTime5 - nTime4;\n     LogPrint(\"bench\", \"    - Index writing: %.2fms [%.2fs]\\n\", 0.001 * (nTime5 - nTime4), nTimeIndex * 0.000001);\n \n-    // Watch for changes to the previous coinbase transaction.\n-    static uint256 hashPrevBestCoinBase;\n-    GetMainSignals().UpdatedTransaction(hashPrevBestCoinBase);\n-    hashPrevBestCoinBase = block.vtx[0]->GetHash();\n-\n-\n     int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n     LogPrint(\"bench\", \"    - Callbacks: %.2fms [%.2fs]\\n\", 0.001 * (nTime6 - nTime5), nTimeCallbacks * 0.000001);\n "
      },
      {
        "sha": "62ce369df9f1f1a0e2c9381469a1f2b282757905",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
        "patch": "@@ -15,7 +15,6 @@ CMainSignals& GetMainSignals()\n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.SyncTransactions.connect(boost::bind(&CValidationInterface::SyncTransactions, pwalletIn, _1, _2));\n-    g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n@@ -32,7 +31,6 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n-    g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SyncTransactions.disconnect(boost::bind(&CValidationInterface::SyncTransactions, pwalletIn, _1, _2));\n     g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.NewPoWValidBlock.disconnect(boost::bind(&CValidationInterface::NewPoWValidBlock, pwalletIn, _1, _2));\n@@ -45,7 +43,6 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.Broadcast.disconnect_all_slots();\n     g_signals.Inventory.disconnect_all_slots();\n     g_signals.SetBestChain.disconnect_all_slots();\n-    g_signals.UpdatedTransaction.disconnect_all_slots();\n     g_signals.SyncTransactions.disconnect_all_slots();\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n     g_signals.NewPoWValidBlock.disconnect_all_slots();"
      },
      {
        "sha": "0f268eca61fa26e56c7aaf460a929b84c886ee47",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
        "patch": "@@ -36,7 +36,6 @@ class CValidationInterface {\n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     virtual void SyncTransactions(const std::vector<CTransactionRef> &ptxn, const CBlockIndex *pindex) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n-    virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n     virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n@@ -53,8 +52,6 @@ struct CMainSignals {\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n     boost::signals2::signal<void (const std::vector<CTransactionRef> &, const CBlockIndex *pindex)> SyncTransactions;\n-    /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n-    boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */\n     boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n     /** Notifies listeners about an inventory item being seen on the network. */"
      },
      {
        "sha": "baf44ec3fff607b6e9ea4dbc08f34e8a2066a5b4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 11,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
        "patch": "@@ -1140,6 +1140,35 @@ void CWallet::SyncTransactions(const std::vector<CTransactionRef>& vtx, const CB\n                 mapWallet[txin.prevout.hash].MarkDirty();\n         }\n     }\n+\n+\n+    if (pindex) {\n+        // Watch for changes to the previous coinbase transaction.\n+        static uint256 hashPrevBestCoinBase;\n+\n+        // Only notify UI if this transaction is in this wallet\n+        {\n+            if (hashPrevBestCoinBase.IsNull()) {\n+                // For correctness we scan over the entire wallet, looking for\n+                // the previous block's coinbase, just in case it is ours, so\n+                // that we can notify the UI that it should now be displayed.\n+                if (pindex->pprev) {\n+                    for (const std::pair<uint256, CWalletTx>& p : mapWallet) {\n+                        if (p.second.IsCoinBase() && p.second.hashBlock == pindex->pprev->GetBlockHash()) {\n+                            NotifyTransactionChanged(this, p.first, CT_UPDATED);\n+                            break;\n+                        }\n+                    }\n+                }\n+            } else {\n+                map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hashPrevBestCoinBase);\n+                if (mi != mapWallet.end())\n+                    NotifyTransactionChanged(this, hashPrevBestCoinBase, CT_UPDATED);\n+            }\n+        }\n+\n+        hashPrevBestCoinBase = vtx[0]->GetHash();\n+    }\n }\n \n \n@@ -3233,17 +3262,6 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     }\n }\n \n-void CWallet::UpdatedTransaction(const uint256 &hashTx)\n-{\n-    {\n-        LOCK(cs_wallet);\n-        // Only notify UI if this transaction is in this wallet\n-        map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hashTx);\n-        if (mi != mapWallet.end())\n-            NotifyTransactionChanged(this, hashTx, CT_UPDATED);\n-    }\n-}\n-\n void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)\n {\n     boost::shared_ptr<CReserveKey> rKey(new CReserveKey(this));"
      }
    ]
  },
  {
    "sha": "05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWJkOWQ1Y2UzZDFhZDVjMjg0MjJhMGE5ZjY4ZjdiY2IzNTc4Y2Q4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T22:42:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T01:41:11Z"
      },
      "message": "Add ability to assert a lock is not held in DEBUG_LOCKORDER",
      "tree": {
        "sha": "2f7ba3fc64a2fd34e5c451e0d1545c28feea8085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f7ba3fc64a2fd34e5c451e0d1545c28feea8085"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/997b578c46792b7b7b5f7d9ce04ba0d22b3ddf95"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f9857e5f780709070d265e31ee03637e3d8ad4ed",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8",
        "patch": "@@ -184,6 +184,15 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\n     abort();\n }\n \n+void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n+{\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+        if (i.first == cs) {\n+            fprintf(stderr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n+            abort();\n+        }\n+}\n+\n void DeleteLock(void* cs)\n {\n     if (!lockdata.available) {"
      },
      {
        "sha": "eac47f2d153393a855f58037b25f01dcf61ec142",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8",
        "patch": "@@ -76,14 +76,17 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\n void LeaveCritical();\n std::string LocksHeld();\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n+void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n void DeleteLock(void* cs);\n #else\n void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n void static inline LeaveCritical() {}\n void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n+void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n void static inline DeleteLock(void* cs) {}\n #endif\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+#define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n /**\n  * Wrapped boost mutex: supports recursive locking, but no waiting"
      }
    ]
  },
  {
    "sha": "eda6afbac6f30d8bd08229ca4947f811bf451930",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGE2YWZiYWM2ZjMwZDhiZDA4MjI5Y2E0OTQ3ZjgxMWJmNDUxOTMw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T23:06:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T01:56:44Z"
      },
      "message": "Add CWallet::BlockUntilSyncedToCurrentChain()\n\nThis blocks until the wallet has synced up to the current height.",
      "tree": {
        "sha": "e83c52744236b4ef992ff43bd66ef06c2c9fef34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e83c52744236b4ef992ff43bd66ef06c2c9fef34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eda6afbac6f30d8bd08229ca4947f811bf451930",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda6afbac6f30d8bd08229ca4947f811bf451930",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eda6afbac6f30d8bd08229ca4947f811bf451930",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda6afbac6f30d8bd08229ca4947f811bf451930/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05bd9d5ce3d1ad5c28422a0a9f68f7bcb3578cd8"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 68,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4e418b64b8151709378cfda3299abc646dbec6fc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 2,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda6afbac6f30d8bd08229ca4947f811bf451930/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda6afbac6f30d8bd08229ca4947f811bf451930/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=eda6afbac6f30d8bd08229ca4947f811bf451930",
        "patch": "@@ -1168,10 +1168,49 @@ void CWallet::SyncTransactions(const std::vector<CTransactionRef>& vtx, const CB\n         }\n \n         hashPrevBestCoinBase = vtx[0]->GetHash();\n+\n+        {\n+            std::unique_lock<std::mutex> lock(lastBlockProcessedMutex);\n+            lastBlockProcessed = pindex;\n+        }\n+        cv_blockProcessed.notify_all();\n     }\n }\n \n \n+void CWallet::BlockUntilSyncedToCurrentChain() {\n+    const CBlockIndex* initialChainTip;\n+    {\n+        LOCK(cs_main);\n+        initialChainTip = chainActive.Tip();\n+    }\n+    AssertLockNotHeld(cs_main);\n+    AssertLockNotHeld(cs_wallet);\n+    std::unique_lock<std::mutex> lock(lastBlockProcessedMutex);\n+\n+    assert(lastBlockProcessed);\n+\n+    cv_blockProcessed.wait(lock, [this, initialChainTip] {\n+            if (this->lastBlockProcessed == initialChainTip) {\n+                return true;\n+            }\n+            // Catch the race condition where the wallet may have caught up and\n+            // moved past initialChainTip before we could get\n+            // lastBlockProcessedMutex.\n+            TRY_LOCK(cs_main, mainLocked);\n+            if (mainLocked) {\n+                if (this->lastBlockProcessed == chainActive.Tip()) {\n+                    return true;\n+                }\n+                // If the user called invalidatechain some things might block\n+                // forever, so we check if we're ahead of a the tip (a state\n+                // which should never be exposed to the outside world)\n+                return this->lastBlockProcessed->nChainWork > chainActive.Tip()->nChainWork;\n+            }\n+        });\n+};\n+\n+\n isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n     {\n@@ -1534,6 +1573,12 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             }\n         }\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n+\n+        {\n+            std::unique_lock<std::mutex> lock(lastBlockProcessedMutex);\n+            lastBlockProcessed = chainActive.Tip();\n+        }\n+        cv_blockProcessed.notify_all();\n     }\n     return ret;\n }\n@@ -3581,8 +3626,6 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n \n-    RegisterValidationInterface(walletInstance);\n-\n     CBlockIndex *pindexRescan = chainActive.Tip();\n     if (GetBoolArg(\"-rescan\", false))\n         pindexRescan = chainActive.Genesis();\n@@ -3595,6 +3638,12 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         else\n             pindexRescan = chainActive.Genesis();\n     }\n+\n+    //We must set lastBlockProcessed prior to registering the wallet as a validation interface\n+    walletInstance->lastBlockProcessed = pindexRescan;\n+\n+    RegisterValidationInterface(walletInstance);\n+\n     if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error"
      },
      {
        "sha": "fab60e45ae200078b0ad7d43be1f0b7972f6778f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda6afbac6f30d8bd08229ca4947f811bf451930/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda6afbac6f30d8bd08229ca4947f811bf451930/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=eda6afbac6f30d8bd08229ca4947f811bf451930",
        "patch": "@@ -19,6 +19,7 @@\n \n #include <algorithm>\n #include <atomic>\n+#include <condition_variable>\n #include <map>\n #include <set>\n #include <stdexcept>\n@@ -603,6 +604,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n     std::set<int64_t> setKeyPool;\n+\n+    /**\n+     * The following are used to keep track of how far behind the wallet is\n+     * from the chain sync, and to allow clients to block on us being caught up\n+     */\n+    const CBlockIndex* lastBlockProcessed;\n+    std::mutex lastBlockProcessedMutex;\n+    std::condition_variable cv_blockProcessed;\n public:\n     /*\n      * Main wallet lock.\n@@ -951,6 +960,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     \n     /* Set the current HD master key (will reset the chain child index counters) */\n     bool SetHDMasterKey(const CPubKey& key);\n+\n+    /**\n+     * Blocks until the wallet state is up-to-date to /at least/ the current\n+     * chain at the time this function is entered\n+     * Obviously holding cs_main/cs_wallet when going into this call may cause\n+\t * deadlock\n+     */\n+    void BlockUntilSyncedToCurrentChain();\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "d632a99951db0386553c7a89ebcdf2ced2d1ea8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjMyYTk5OTUxZGIwMzg2NTUzYzdhODllYmNkZjJjZWQyZDFlYThh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-17T23:48:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T01:56:44Z"
      },
      "message": "Add calls to CWallet::BlockUntilSyncedToCurrentChain() in RPCs\n\nThis resolves #9148",
      "tree": {
        "sha": "cd95a9adc901cc0da974dfce422d467b81203ff2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd95a9adc901cc0da974dfce422d467b81203ff2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d632a99951db0386553c7a89ebcdf2ced2d1ea8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d632a99951db0386553c7a89ebcdf2ced2d1ea8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d632a99951db0386553c7a89ebcdf2ced2d1ea8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d632a99951db0386553c7a89ebcdf2ced2d1ea8a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eda6afbac6f30d8bd08229ca4947f811bf451930",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda6afbac6f30d8bd08229ca4947f811bf451930",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eda6afbac6f30d8bd08229ca4947f811bf451930"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 71,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bad95544cbf9c39dfed4b06c8e58ddc8e53a6a16",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d632a99951db0386553c7a89ebcdf2ced2d1ea8a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d632a99951db0386553c7a89ebcdf2ced2d1ea8a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d632a99951db0386553c7a89ebcdf2ced2d1ea8a",
        "patch": "@@ -70,6 +70,9 @@ UniValue getinfo(const JSONRPCRequest& request)\n         );\n \n #ifdef ENABLE_WALLET\n+    if (pwalletMain) {\n+        pwalletMain->BlockUntilSyncedToCurrentChain();\n+    }\n     LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n #else\n     LOCK(cs_main);"
      },
      {
        "sha": "7ca2cecaa93d6acc2ee41301ba70a93e2b8de4d9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d632a99951db0386553c7a89ebcdf2ced2d1ea8a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d632a99951db0386553c7a89ebcdf2ced2d1ea8a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d632a99951db0386553c7a89ebcdf2ced2d1ea8a",
        "patch": "@@ -402,6 +402,10 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CBitcoinAddress address(request.params[0].get_str());\n@@ -459,6 +463,10 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     UniValue jsonGroupings(UniValue::VARR);\n@@ -563,6 +571,10 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n        );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Bitcoin address\n@@ -621,6 +633,10 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getreceivedbyaccount\", \"\\\"tabby\\\", 6\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Minimum confirmations\n@@ -680,6 +696,10 @@ UniValue getbalance(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     if (request.params.size() == 0)\n@@ -738,6 +758,10 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     return ValueFromAmount(pwalletMain->GetUnconfirmedBalance());\n@@ -822,6 +846,10 @@ UniValue sendfrom(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"sendfrom\", \"\\\"tabby\\\", \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.01, 6, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount = AccountFromValue(request.params[0]);\n@@ -896,6 +924,10 @@ UniValue sendmany(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n@@ -1283,6 +1315,10 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     return ListReceived(request.params, false);\n@@ -1320,6 +1356,10 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true, true\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     return ListReceived(request.params, true);\n@@ -1489,6 +1529,10 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount = \"*\";\n@@ -1580,6 +1624,10 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listaccounts\", \"6\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     int nMinDepth = 1;\n@@ -1677,6 +1725,10 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CBlockIndex *pindex = NULL;\n@@ -1777,6 +1829,10 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n@@ -2312,6 +2368,10 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n         );\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     UniValue obj(UniValue::VOBJ);\n@@ -2425,6 +2485,10 @@ UniValue listunspent(const JSONRPCRequest& request)\n         }\n     }\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     UniValue results(UniValue::VARR);\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n@@ -2524,6 +2588,10 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwalletMain->BlockUntilSyncedToCurrentChain();\n+\n     CTxDestination changeAddress = CNoDestination();\n     int changePosition = -1;\n     bool includeWatching = false;"
      }
    ]
  },
  {
    "sha": "d26a43ce5210a2067d06db6858f1ef1b69e97bed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjZhNDNjZTUyMTBhMjA2N2QwNmRiNjg1OGYxZWYxYjY5ZTk3YmVk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T20:25:54Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T20:25:54Z"
      },
      "message": "f \"Add CWallet::BlockUntilSyncedToCurrentChain()\" add recheck timeout",
      "tree": {
        "sha": "36104192a39b709483776efddcaa6a162af6ce45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36104192a39b709483776efddcaa6a162af6ce45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d26a43ce5210a2067d06db6858f1ef1b69e97bed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26a43ce5210a2067d06db6858f1ef1b69e97bed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d26a43ce5210a2067d06db6858f1ef1b69e97bed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26a43ce5210a2067d06db6858f1ef1b69e97bed/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d632a99951db0386553c7a89ebcdf2ced2d1ea8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d632a99951db0386553c7a89ebcdf2ced2d1ea8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d632a99951db0386553c7a89ebcdf2ced2d1ea8a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f3adae67af63d82eef0b81b5518ca61cf97b4dc6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d26a43ce5210a2067d06db6858f1ef1b69e97bed/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d26a43ce5210a2067d06db6858f1ef1b69e97bed/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d26a43ce5210a2067d06db6858f1ef1b69e97bed",
        "patch": "@@ -1190,13 +1190,16 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n \n     assert(lastBlockProcessed);\n \n-    cv_blockProcessed.wait(lock, [this, initialChainTip] {\n+    auto pred = [this, initialChainTip] {\n             if (this->lastBlockProcessed == initialChainTip) {\n                 return true;\n             }\n             // Catch the race condition where the wallet may have caught up and\n             // moved past initialChainTip before we could get\n             // lastBlockProcessedMutex.\n+            // This should be exceedingly rare in regular usage, so potentially\n+            // eating 100ms to retry this lock should be fine (not TRY_LOCKing\n+            // here would be a lock inversion against lastBlockProcessedMutex)\n             TRY_LOCK(cs_main, mainLocked);\n             if (mainLocked) {\n                 if (this->lastBlockProcessed == chainActive.Tip()) {\n@@ -1207,7 +1210,12 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n                 // which should never be exposed to the outside world)\n                 return this->lastBlockProcessed->nChainWork > chainActive.Tip()->nChainWork;\n             }\n-        });\n+            return false;\n+        };\n+\n+    while (!pred()) {\n+        cv_blockProcessed.wait_for(lock, std::chrono::milliseconds(100));\n+    }\n };\n \n "
      }
    ]
  },
  {
    "sha": "6ddb874fbbf81ce8874377952b7feb8603c964e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGRiODc0ZmJiZjgxY2U4ODc0Mzc3OTUyYjdmZWI4NjAzYzk2NGUw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T20:37:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T20:37:44Z"
      },
      "message": "f \"Add CWallet::BlockUntilSyncedToCurrentChain()\" Handle the case that we've moved passed the initial block without cs_main",
      "tree": {
        "sha": "bf3931939ef786554416493abef93669ec7cb42c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf3931939ef786554416493abef93669ec7cb42c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ddb874fbbf81ce8874377952b7feb8603c964e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ddb874fbbf81ce8874377952b7feb8603c964e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ddb874fbbf81ce8874377952b7feb8603c964e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ddb874fbbf81ce8874377952b7feb8603c964e0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d26a43ce5210a2067d06db6858f1ef1b69e97bed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26a43ce5210a2067d06db6858f1ef1b69e97bed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d26a43ce5210a2067d06db6858f1ef1b69e97bed"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "764e911991e905fdc9a57de17cebde3674b52a54",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ddb874fbbf81ce8874377952b7feb8603c964e0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ddb874fbbf81ce8874377952b7feb8603c964e0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6ddb874fbbf81ce8874377952b7feb8603c964e0",
        "patch": "@@ -1194,6 +1194,9 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n             if (this->lastBlockProcessed == initialChainTip) {\n                 return true;\n             }\n+            if (this->lastBlockProcessed->GetAncestor(initialChainTip->nHeight) == initialChainTip) {\n+                return true;\n+            }\n             // Catch the race condition where the wallet may have caught up and\n             // moved past initialChainTip before we could get\n             // lastBlockProcessedMutex."
      }
    ]
  },
  {
    "sha": "ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjlkOTYwM2MwY2JjMWZlZDBjY2FhMjdhNjdkNjRlYTVlYmYyZjQ0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T20:41:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T20:41:49Z"
      },
      "message": "f \"Remove CValidationInterface::UpdatedTransaction\" fix for multiwallet",
      "tree": {
        "sha": "28b204dfd1df6a5b487db3ceceeb9e682767efe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28b204dfd1df6a5b487db3ceceeb9e682767efe2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ddb874fbbf81ce8874377952b7feb8603c964e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ddb874fbbf81ce8874377952b7feb8603c964e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ddb874fbbf81ce8874377952b7feb8603c964e0"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7b868fb1ae99d1a638d79abf99d41497057ec8d9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44",
        "patch": "@@ -1143,12 +1143,9 @@ void CWallet::SyncTransactions(const std::vector<CTransactionRef>& vtx, const CB\n \n \n     if (pindex) {\n-        // Watch for changes to the previous coinbase transaction.\n-        static uint256 hashPrevBestCoinBase;\n-\n         // Only notify UI if this transaction is in this wallet\n         {\n-            if (hashPrevBestCoinBase.IsNull()) {\n+            if (hashPrevBestCoinbase.IsNull()) {\n                 // For correctness we scan over the entire wallet, looking for\n                 // the previous block's coinbase, just in case it is ours, so\n                 // that we can notify the UI that it should now be displayed.\n@@ -1161,13 +1158,13 @@ void CWallet::SyncTransactions(const std::vector<CTransactionRef>& vtx, const CB\n                     }\n                 }\n             } else {\n-                map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hashPrevBestCoinBase);\n+                map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hashPrevBestCoinbase);\n                 if (mi != mapWallet.end())\n-                    NotifyTransactionChanged(this, hashPrevBestCoinBase, CT_UPDATED);\n+                    NotifyTransactionChanged(this, hashPrevBestCoinbase, CT_UPDATED);\n             }\n         }\n \n-        hashPrevBestCoinBase = vtx[0]->GetHash();\n+        hashPrevBestCoinbase = vtx[0]->GetHash();\n \n         {\n             std::unique_lock<std::mutex> lock(lastBlockProcessedMutex);"
      },
      {
        "sha": "7071311058439d9494b793fd3a9249282e9cefce",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44",
        "patch": "@@ -605,6 +605,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<int64_t> setKeyPool;\n \n+    // Used to NotifyTransactionChanged of the previous block's coinbase when\n+    // the next block comes in\n+    uint256 hashPrevBestCoinbase;\n+\n     /**\n      * The following are used to keep track of how far behind the wallet is\n      * from the chain sync, and to allow clients to block on us being caught up"
      }
    ]
  },
  {
    "sha": "da2861338f3aed7c5dec434b87d6dda93b489a69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTI4NjEzMzhmM2FlZDdjNWRlYzQzNGI4N2Q2ZGRhOTNiNDg5YTY5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T21:09:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-18T21:16:21Z"
      },
      "message": "f \"Add CWallet::BlockUntilSyncedToCurrentChain()\" fix comment text",
      "tree": {
        "sha": "02331d81ceae7436c49abcd84b13781af8355731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02331d81ceae7436c49abcd84b13781af8355731"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da2861338f3aed7c5dec434b87d6dda93b489a69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da2861338f3aed7c5dec434b87d6dda93b489a69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da2861338f3aed7c5dec434b87d6dda93b489a69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da2861338f3aed7c5dec434b87d6dda93b489a69/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff9d9603c0cbc1fed0ccaa27a67d64ea5ebf2f44"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5d27205ff3ad3aefbd5f0c74301755f030b92c78",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da2861338f3aed7c5dec434b87d6dda93b489a69/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da2861338f3aed7c5dec434b87d6dda93b489a69/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=da2861338f3aed7c5dec434b87d6dda93b489a69",
        "patch": "@@ -1195,7 +1195,7 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n                 return true;\n             }\n             // Catch the race condition where the wallet may have caught up and\n-            // moved past initialChainTip before we could get\n+            // moved past initialChainTip through a reorg before we could get\n             // lastBlockProcessedMutex.\n             // This should be exceedingly rare in regular usage, so potentially\n             // eating 100ms to retry this lock should be fine (not TRY_LOCKing"
      }
    ]
  }
]