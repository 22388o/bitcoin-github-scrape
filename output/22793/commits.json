[
  {
    "sha": "37c9409cb8fe4589668afd309b7ff7e236ffa941",
    "node_id": "C_kwDOABII59oAKDM3Yzk0MDljYjhmZTQ1ODk2NjhhZmQzMDliN2ZmN2UyMzZmZmE5NDE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-24T18:09:14Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-18T17:25:43Z"
      },
      "message": "Make BaseSignatureChecker abstract\n\nInstead of having BaseSignatureChecker implement default behavior for\nits member functions, make those functions completely virtual and force\nsubclasses to implement all functions. The users of BaseSignatureChecker\nare changed to use DummySignatureChecker which have similar\nimplementations of those functions.",
      "tree": {
        "sha": "fc75ecfae8eee11c408aea1f12b17f5fbb2c092f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc75ecfae8eee11c408aea1f12b17f5fbb2c092f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37c9409cb8fe4589668afd309b7ff7e236ffa941",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37c9409cb8fe4589668afd309b7ff7e236ffa941",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37c9409cb8fe4589668afd309b7ff7e236ffa941",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37c9409cb8fe4589668afd309b7ff7e236ffa941/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe03f7a37fd0ef05149161f6b95a25493e1fe38f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe03f7a37fd0ef05149161f6b95a25493e1fe38f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe03f7a37fd0ef05149161f6b95a25493e1fe38f"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 32,
      "deletions": 48
    },
    "files": [
      {
        "sha": "0f3420d1ffd51aba6f1d43581fccdd9bc2895b3e",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=37c9409cb8fe4589668afd309b7ff7e236ffa941",
        "patch": "@@ -91,7 +91,7 @@ static void VerifyNestedIfScript(benchmark::Bench& bench)\n     bench.run([&] {\n         auto stack_copy = stack;\n         ScriptError error;\n-        bool ret = EvalScript(stack_copy, script, 0, BaseSignatureChecker(), SigVersion::BASE, &error);\n+        bool ret = EvalScript(stack_copy, script, 0, DUMMY_CHECKER, SigVersion::BASE, &error);\n         assert(ret);\n     });\n }"
      },
      {
        "sha": "ca86c66ed980e5de3f4867315401b37252b3f4cb",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=37c9409cb8fe4589668afd309b7ff7e236ffa941",
        "patch": "@@ -181,7 +181,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs,\n         } else if (whichType == TxoutType::SCRIPTHASH) {\n             std::vector<std::vector<unsigned char> > stack;\n             // convert the scriptSig into a stack, so we can inspect the redeemScript\n-            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SigVersion::BASE))\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, DUMMY_CHECKER, SigVersion::BASE))\n                 return false;\n             if (stack.empty())\n                 return false;\n@@ -221,7 +221,7 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             // If the scriptPubKey is P2SH, we try to extract the redeemScript casually by converting the scriptSig\n             // into a stack. We do not check IsPushOnly nor compare the hash as these will be done later anyway.\n             // If the check fails at this stage, we know that this txid must be a bad one.\n-            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SigVersion::BASE))\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, DUMMY_CHECKER, SigVersion::BASE))\n                 return false;\n             if (stack.empty())\n                 return false;"
      },
      {
        "sha": "56b47b66f1972b316eb2fc4eb93dc44fcaae3f0e",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 16,
        "deletions": 19,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=37c9409cb8fe4589668afd309b7ff7e236ffa941",
        "patch": "@@ -239,25 +239,10 @@ uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn\n class BaseSignatureChecker\n {\n public:\n-    virtual bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n-    {\n-        return false;\n-    }\n-\n-    virtual bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror = nullptr) const\n-    {\n-        return false;\n-    }\n-\n-    virtual bool CheckLockTime(const CScriptNum& nLockTime) const\n-    {\n-         return false;\n-    }\n-\n-    virtual bool CheckSequence(const CScriptNum& nSequence) const\n-    {\n-         return false;\n-    }\n+    virtual bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const = 0;\n+    virtual bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror = nullptr) const = 0;\n+    virtual bool CheckLockTime(const CScriptNum& nLockTime) const = 0;\n+    virtual bool CheckSequence(const CScriptNum& nSequence) const = 0;\n \n     virtual ~BaseSignatureChecker() {}\n };\n@@ -328,6 +313,18 @@ class DeferringSignatureChecker : public BaseSignatureChecker\n     }\n };\n \n+/** Dummy signature checker which accepts all signatures. */\n+class DummySignatureChecker final : public BaseSignatureChecker\n+{\n+public:\n+    DummySignatureChecker() {}\n+    bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override { return true; }\n+    bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror) const override { return true; }\n+    bool CheckLockTime(const CScriptNum& nLockTime) const override { return false; }\n+    bool CheckSequence(const CScriptNum& nSequence) const override { return false; }\n+};\n+const DummySignatureChecker DUMMY_CHECKER;\n+\n /** Compute the BIP341 tapleaf hash from leaf version & script. */\n uint256 ComputeTapleafHash(uint8_t leaf_version, const CScript& script);\n /** Compute the BIP341 taproot script tree Merkle root from control block and leaf hash."
      },
      {
        "sha": "e6b84a2719991c899724df7b58e7e1080d8d4411",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 14,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=37c9409cb8fe4589668afd309b7ff7e236ffa941",
        "patch": "@@ -419,7 +419,7 @@ struct Stacks\n     Stacks() = delete;\n     Stacks(const Stacks&) = delete;\n     explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {\n-        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SigVersion::BASE);\n+        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, DUMMY_CHECKER, SigVersion::BASE);\n     }\n };\n }\n@@ -534,17 +534,6 @@ bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom,\n     return SignSignature(provider, txout.scriptPubKey, txTo, nIn, txout.nValue, nHashType);\n }\n \n-namespace {\n-/** Dummy signature checker which accepts all signatures. */\n-class DummySignatureChecker final : public BaseSignatureChecker\n-{\n-public:\n-    DummySignatureChecker() {}\n-    bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override { return true; }\n-    bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror) const override { return true; }\n-};\n-const DummySignatureChecker DUMMY_CHECKER;\n-\n class DummySignatureCreator final : public BaseSignatureCreator {\n private:\n     char m_r_len = 32;\n@@ -574,8 +563,6 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n     }\n };\n \n-}\n-\n const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator(32, 32);\n const BaseSignatureCreator& DUMMY_MAXIMUM_SIGNATURE_CREATOR = DummySignatureCreator(33, 32);\n "
      },
      {
        "sha": "ed67c59427cf0ad3ac6f7ace7571072828760f49",
        "filename": "src/test/fuzz/eval_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/test/fuzz/eval_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/test/fuzz/eval_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/eval_script.cpp?ref=37c9409cb8fe4589668afd309b7ff7e236ffa941",
        "patch": "@@ -31,6 +31,6 @@ FUZZ_TARGET_INIT(eval_script, initialize_eval_script)\n     const CScript script(script_bytes.begin(), script_bytes.end());\n     for (const auto sig_version : {SigVersion::BASE, SigVersion::WITNESS_V0}) {\n         std::vector<std::vector<unsigned char>> stack;\n-        (void)EvalScript(stack, script, flags, BaseSignatureChecker(), sig_version, nullptr);\n+        (void)EvalScript(stack, script, flags, DUMMY_CHECKER, sig_version, nullptr);\n     }\n }"
      },
      {
        "sha": "c2a49760a6e0d6eeb98ed25b4af77edd653f7349",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=37c9409cb8fe4589668afd309b7ff7e236ffa941",
        "patch": "@@ -983,21 +983,21 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n \n     ScriptError err;\n     std::vector<std::vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(direct, direct + sizeof(direct)), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SigVersion::BASE, &err));\n+    BOOST_CHECK(EvalScript(directStack, CScript(direct, direct + sizeof(direct)), SCRIPT_VERIFY_P2SH, DUMMY_CHECKER, SigVersion::BASE, &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     std::vector<std::vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(pushdata1, pushdata1 + sizeof(pushdata1)), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SigVersion::BASE, &err));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(pushdata1, pushdata1 + sizeof(pushdata1)), SCRIPT_VERIFY_P2SH, DUMMY_CHECKER, SigVersion::BASE, &err));\n     BOOST_CHECK(pushdata1Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     std::vector<std::vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(pushdata2, pushdata2 + sizeof(pushdata2)), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SigVersion::BASE, &err));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(pushdata2, pushdata2 + sizeof(pushdata2)), SCRIPT_VERIFY_P2SH, DUMMY_CHECKER, SigVersion::BASE, &err));\n     BOOST_CHECK(pushdata2Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     std::vector<std::vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(pushdata4, pushdata4 + sizeof(pushdata4)), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SigVersion::BASE, &err));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(pushdata4, pushdata4 + sizeof(pushdata4)), SCRIPT_VERIFY_P2SH, DUMMY_CHECKER, SigVersion::BASE, &err));\n     BOOST_CHECK(pushdata4Stack == directStack);\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n@@ -1006,11 +1006,11 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     const std::vector<unsigned char> pushdata4_trunc{OP_PUSHDATA4, 1, 0, 0, 0};\n \n     std::vector<std::vector<unsigned char>> stack_ignore;\n-    BOOST_CHECK(!EvalScript(stack_ignore, CScript(pushdata1_trunc.begin(), pushdata1_trunc.end()), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SigVersion::BASE, &err));\n+    BOOST_CHECK(!EvalScript(stack_ignore, CScript(pushdata1_trunc.begin(), pushdata1_trunc.end()), SCRIPT_VERIFY_P2SH, DUMMY_CHECKER, SigVersion::BASE, &err));\n     BOOST_CHECK_EQUAL(err, SCRIPT_ERR_BAD_OPCODE);\n-    BOOST_CHECK(!EvalScript(stack_ignore, CScript(pushdata2_trunc.begin(), pushdata2_trunc.end()), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SigVersion::BASE, &err));\n+    BOOST_CHECK(!EvalScript(stack_ignore, CScript(pushdata2_trunc.begin(), pushdata2_trunc.end()), SCRIPT_VERIFY_P2SH, DUMMY_CHECKER, SigVersion::BASE, &err));\n     BOOST_CHECK_EQUAL(err, SCRIPT_ERR_BAD_OPCODE);\n-    BOOST_CHECK(!EvalScript(stack_ignore, CScript(pushdata4_trunc.begin(), pushdata4_trunc.end()), SCRIPT_VERIFY_P2SH, BaseSignatureChecker(), SigVersion::BASE, &err));\n+    BOOST_CHECK(!EvalScript(stack_ignore, CScript(pushdata4_trunc.begin(), pushdata4_trunc.end()), SCRIPT_VERIFY_P2SH, DUMMY_CHECKER, SigVersion::BASE, &err));\n     BOOST_CHECK_EQUAL(err, SCRIPT_ERR_BAD_OPCODE);\n }\n \n@@ -1020,7 +1020,7 @@ BOOST_AUTO_TEST_CASE(script_cltv_truncated)\n \n     std::vector<std::vector<unsigned char>> stack_ignore;\n     ScriptError err;\n-    BOOST_CHECK(!EvalScript(stack_ignore, script_cltv_trunc, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, BaseSignatureChecker(), SigVersion::BASE, &err));\n+    BOOST_CHECK(!EvalScript(stack_ignore, script_cltv_trunc, SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, DUMMY_CHECKER, SigVersion::BASE, &err));\n     BOOST_CHECK_EQUAL(err, SCRIPT_ERR_INVALID_STACK_OPERATION);\n }\n \n@@ -1286,7 +1286,7 @@ BOOST_AUTO_TEST_CASE(script_standard_push)\n         CScript script;\n         script << i;\n         BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Number \" << i << \" is not pure push.\");\n-        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, nullptr, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Number \" << i << \" push is not minimal data.\");\n+        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, nullptr, SCRIPT_VERIFY_MINIMALDATA, DUMMY_CHECKER, &err), \"Number \" << i << \" push is not minimal data.\");\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     }\n \n@@ -1295,7 +1295,7 @@ BOOST_AUTO_TEST_CASE(script_standard_push)\n         CScript script;\n         script << data;\n         BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Length \" << i << \" is not pure push.\");\n-        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, nullptr, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker(), &err), \"Length \" << i << \" push is not minimal data.\");\n+        BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, nullptr, SCRIPT_VERIFY_MINIMALDATA, DUMMY_CHECKER, &err), \"Length \" << i << \" push is not minimal data.\");\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     }\n }"
      },
      {
        "sha": "d419804fe6bb5460fdd8d107f5563a50b70b5c70",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37c9409cb8fe4589668afd309b7ff7e236ffa941/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=37c9409cb8fe4589668afd309b7ff7e236ffa941",
        "patch": "@@ -475,7 +475,7 @@ static CScript PushAll(const std::vector<valtype>& values)\n static void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n {\n     std::vector<valtype> stack;\n-    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SigVersion::BASE);\n+    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, DUMMY_CHECKER, SigVersion::BASE);\n     assert(stack.size() > 0);\n     stack.back() = std::vector<unsigned char>(redeemScript.begin(), redeemScript.end());\n     script = PushAll(stack);"
      }
    ]
  },
  {
    "sha": "33da3c57296d21af6057104dd51cdcd3517fa9e7",
    "node_id": "C_kwDOABII59oAKDMzZGEzYzU3Mjk2ZDIxYWY2MDU3MTA0ZGQ1MWNkY2QzNTE3ZmE5ZTc",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-24T00:37:11Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-18T17:25:43Z"
      },
      "message": "Pass PrecomputedTransactionData to DataFromTransaction\n\nWithout a PrecomputedTransactionData, DataFromTransaction will be\nmissing data and unable to verify some kinds of transactions, thereby\nmaking it unable to extract data from the transaction.",
      "tree": {
        "sha": "fe6f423c457a18115a7c950cc8fe904dee55a0f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe6f423c457a18115a7c950cc8fe904dee55a0f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33da3c57296d21af6057104dd51cdcd3517fa9e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33da3c57296d21af6057104dd51cdcd3517fa9e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33da3c57296d21af6057104dd51cdcd3517fa9e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33da3c57296d21af6057104dd51cdcd3517fa9e7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37c9409cb8fe4589668afd309b7ff7e236ffa941",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37c9409cb8fe4589668afd309b7ff7e236ffa941",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37c9409cb8fe4589668afd309b7ff7e236ffa941"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 51,
      "deletions": 17
    },
    "files": [
      {
        "sha": "6f973c96e1d13cdf84f2c7347722ee813324cc23",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=33da3c57296d21af6057104dd51cdcd3517fa9e7",
        "patch": "@@ -654,6 +654,22 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n \n+    PrecomputedTransactionData txdata;\n+    std::vector<CTxOut> spent_outputs;\n+    for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n+        CTxIn& txin = mergedTx.vin[i];\n+        const Coin& coin = view.AccessCoin(txin.prevout);\n+        if (coin.IsSpent()) {\n+            txdata.Init(CTransaction(mergedTx), {}, true);\n+            continue;\n+        } else {\n+            spent_outputs.emplace_back(coin.out.nValue, coin.out.scriptPubKey);\n+        }\n+    }\n+    if (spent_outputs.size() == mergedTx.vin.size()) {\n+        txdata.Init(CTransaction(mergedTx), std::move(spent_outputs), true);\n+    }\n+\n     // Sign what we can:\n     for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n         CTxIn& txin = mergedTx.vin[i];\n@@ -664,10 +680,10 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         const CScript& prevPubKey = coin.out.scriptPubKey;\n         const CAmount& amount = coin.out.nValue;\n \n-        SignatureData sigdata = DataFromTransaction(mergedTx, i, coin.out);\n+        SignatureData sigdata = DataFromTransaction(mergedTx, i, coin.out, txdata);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            ProduceSignature(keystore, MutableTransactionSignatureCreator(&mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(keystore, MutableTransactionSignatureCreator(&mergedTx, i, amount, &txdata, nHashType), prevPubKey, sigdata);\n \n         UpdateInput(txin, sigdata);\n     }"
      },
      {
        "sha": "06431e90893ef835689fc2c3277f5c8c5b40205f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=33da3c57296d21af6057104dd51cdcd3517fa9e7",
        "patch": "@@ -680,21 +680,30 @@ static RPCHelpMan combinerawtransaction()\n     // transaction to avoid rehashing.\n     const CTransaction txConst(mergedTx);\n     // Sign what we can:\n+    PrecomputedTransactionData txdata;\n+    std::vector<CTxOut> spent_outputs;\n     for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n-        CTxIn& txin = mergedTx.vin[i];\n+        const CTxIn& txin = mergedTx.vin[i];\n         const Coin& coin = view.AccessCoin(txin.prevout);\n         if (coin.IsSpent()) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, \"Input not found or already spent\");\n         }\n+        spent_outputs.emplace_back(coin.out.nValue, coin.out.scriptPubKey);\n+    }\n+    txdata.Init(txConst, std::vector<CTxOut>(spent_outputs), true);\n+\n+    for (unsigned int i = 0; i < mergedTx.vin.size(); i++) {\n+        CTxIn& txin = mergedTx.vin[i];\n+        const CTxOut& txout = spent_outputs[i];\n         SignatureData sigdata;\n \n         // ... and merge in other signatures:\n         for (const CMutableTransaction& txv : txVariants) {\n             if (txv.vin.size() > i) {\n-                sigdata.MergeSignatureData(DataFromTransaction(txv, i, coin.out));\n+                sigdata.MergeSignatureData(DataFromTransaction(txv, i, txout, txdata));\n             }\n         }\n-        ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&mergedTx, i, coin.out.nValue, 1), coin.out.scriptPubKey, sigdata);\n+        ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&mergedTx, i, txout.nValue, &txdata, 1), txout.scriptPubKey, sigdata);\n \n         UpdateInput(txin, sigdata);\n     }"
      },
      {
        "sha": "bc3a66fccb5af0709037a8a3321e054eeda5d1da",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=33da3c57296d21af6057104dd51cdcd3517fa9e7",
        "patch": "@@ -425,7 +425,7 @@ struct Stacks\n }\n \n // Extracts signatures and scripts from incomplete scriptSigs. Please do not extend this, use PSBT instead\n-SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout)\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout, const PrecomputedTransactionData& txdata)\n {\n     SignatureData data;\n     assert(tx.vin.size() > nIn);\n@@ -434,7 +434,7 @@ SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nI\n     Stacks stack(data);\n \n     // Get signatures\n-    MutableTransactionSignatureChecker tx_checker(&tx, nIn, txout.nValue, MissingDataBehavior::FAIL);\n+    MutableTransactionSignatureChecker tx_checker(&tx, nIn, txout.nValue, txdata, MissingDataBehavior::FAIL);\n     SignatureExtractorChecker extractor_checker(data, tx_checker);\n     if (VerifyScript(data.scriptSig, txout.scriptPubKey, &data.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, extractor_checker)) {\n         data.complete = true;\n@@ -639,7 +639,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         const CScript& prevPubKey = coin->second.out.scriptPubKey;\n         const CAmount& amount = coin->second.out.nValue;\n \n-        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out, txdata);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n             ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, &txdata, nHashType), prevPubKey, sigdata);"
      },
      {
        "sha": "b5747376a53e4230962cb8b07ee96e8a6fd22078",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=33da3c57296d21af6057104dd51cdcd3517fa9e7",
        "patch": "@@ -166,7 +166,7 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n /** Extract signature data from a transaction input, and insert it. */\n-SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout);\n+SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout, const PrecomputedTransactionData& txdata);\n void UpdateInput(CTxIn& input, const SignatureData& data);\n \n /* Check whether we know how to sign for an output like this, assuming we"
      },
      {
        "sha": "8c2f21f404851b207d67f050f4fc0bb823378754",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=33da3c57296d21af6057104dd51cdcd3517fa9e7",
        "patch": "@@ -91,7 +91,9 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n         const std::optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n         const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n         if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n-            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            PrecomputedTransactionData txdata;\n+            txdata.Init(CTransaction(mutable_transaction.value()), {}, true);\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out, txdata);\n             CTxIn input;\n             UpdateInput(input, signature_data_1);\n             const CScript script = ConsumeScript(fuzzed_data_provider);"
      },
      {
        "sha": "38552366794d342857a094a37456ac244fbef9f9",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=33da3c57296d21af6057104dd51cdcd3517fa9e7",
        "patch": "@@ -1189,17 +1189,20 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     SignatureData combined = CombineSignatures(txFrom.vout[0], txTo, empty, empty);\n     BOOST_CHECK(combined.scriptSig.empty());\n \n+    PrecomputedTransactionData txdata;\n+    txdata.Init(CTransaction(txTo), {txFrom.vout[0]}, true);\n+\n     // Single signature case:\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL)); // changes scriptSig\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     SignatureData scriptSigCopy = scriptSig;\n     // Signing again will give a different, valid signature:\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSigCopy.scriptSig || combined.scriptSig == scriptSig.scriptSig);\n \n@@ -1208,22 +1211,22 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(keystore.AddCScript(pkSingle));\n     scriptPubKey = GetScriptForDestination(ScriptHash(pkSingle));\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     scriptSigCopy = scriptSig;\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSigCopy, scriptSig);\n     BOOST_CHECK(combined.scriptSig == scriptSigCopy.scriptSig || combined.scriptSig == scriptSig.scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n     scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     BOOST_CHECK(keystore.AddCScript(scriptPubKey));\n     BOOST_CHECK(SignSignature(keystore, CTransaction(txFrom), txTo, 0, SIGHASH_ALL));\n-    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0]);\n+    scriptSig = DataFromTransaction(txTo, 0, txFrom.vout[0], txdata);\n     combined = CombineSignatures(txFrom.vout[0], txTo, scriptSig, empty);\n     BOOST_CHECK(combined.scriptSig == scriptSig.scriptSig);\n     combined = CombineSignatures(txFrom.vout[0], txTo, empty, scriptSig);"
      },
      {
        "sha": "cf9bc5ac567c83b7798726a9c0aea30eb6120d46",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33da3c57296d21af6057104dd51cdcd3517fa9e7/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=33da3c57296d21af6057104dd51cdcd3517fa9e7",
        "patch": "@@ -560,8 +560,12 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutableTransaction& input2, const CTransactionRef tx)\n {\n     SignatureData sigdata;\n-    sigdata = DataFromTransaction(input1, 0, tx->vout[0]);\n-    sigdata.MergeSignatureData(DataFromTransaction(input2, 0, tx->vout[0]));\n+    PrecomputedTransactionData txdata1;\n+    txdata1.Init(CTransaction(input1), {}, true);\n+    sigdata = DataFromTransaction(input1, 0, tx->vout[0], txdata1);\n+    PrecomputedTransactionData txdata2;\n+    txdata2.Init(CTransaction(input2), {}, true);\n+    sigdata.MergeSignatureData(DataFromTransaction(input2, 0, tx->vout[0], txdata2));\n     ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&input1, 0, tx->vout[0].nValue, SIGHASH_ALL), tx->vout[0].scriptPubKey, sigdata);\n     return sigdata;\n }"
      }
    ]
  },
  {
    "sha": "3b1d73ab230610780e6b832377bd2418846e4270",
    "node_id": "C_kwDOABII59oAKDNiMWQ3M2FiMjMwNjEwNzgwZTZiODMyMzc3YmQyNDE4ODQ2ZTQyNzA",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-24T19:02:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-18T18:05:42Z"
      },
      "message": "Require PrecomputedTransactionData in SignatureCreator\n\nMutableTransactionSignatureCreator now requires a\nPrecomputedTransactionData.",
      "tree": {
        "sha": "80bf6103ae53add82304f58ad98c9802b05163d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80bf6103ae53add82304f58ad98c9802b05163d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b1d73ab230610780e6b832377bd2418846e4270",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1d73ab230610780e6b832377bd2418846e4270",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1d73ab230610780e6b832377bd2418846e4270",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1d73ab230610780e6b832377bd2418846e4270/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33da3c57296d21af6057104dd51cdcd3517fa9e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33da3c57296d21af6057104dd51cdcd3517fa9e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33da3c57296d21af6057104dd51cdcd3517fa9e7"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 32,
      "deletions": 28
    },
    "files": [
      {
        "sha": "0c500e9ee2400504e73bb16bbe84c065f9d1d0df",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1d73ab230610780e6b832377bd2418846e4270/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1d73ab230610780e6b832377bd2418846e4270/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3b1d73ab230610780e6b832377bd2418846e4270",
        "patch": "@@ -683,7 +683,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         SignatureData sigdata = DataFromTransaction(mergedTx, i, coin.out, txdata);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            ProduceSignature(keystore, MutableTransactionSignatureCreator(&mergedTx, i, amount, &txdata, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(keystore, MutableTransactionSignatureCreator(&mergedTx, i, amount, txdata, nHashType), prevPubKey, sigdata);\n \n         UpdateInput(txin, sigdata);\n     }"
      },
      {
        "sha": "350dfd7c1993b307a5d2e70db25036d00045a558",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1d73ab230610780e6b832377bd2418846e4270/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1d73ab230610780e6b832377bd2418846e4270/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=3b1d73ab230610780e6b832377bd2418846e4270",
        "patch": "@@ -223,7 +223,8 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n     // Construct a would-be spend of this output, to update sigdata with.\n     // Note that ProduceSignature is used to fill in metadata (not actual signatures),\n     // so provider does not need to provide any private keys (it can be a HidingSigningProvider).\n-    MutableTransactionSignatureCreator creator(&tx, /*input_idx=*/0, out.nValue, SIGHASH_ALL);\n+    PrecomputedTransactionData txdata = PrecomputePSBTData(psbt);\n+    MutableTransactionSignatureCreator creator(&tx, /*input_idx=*/0, out.nValue, txdata, SIGHASH_ALL);\n     ProduceSignature(provider, creator, out.scriptPubKey, sigdata);\n \n     // Put redeem_script, witness_script, key paths, into PSBTOutput.\n@@ -290,7 +291,7 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     if (txdata == nullptr) {\n         sig_complete = ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, utxo.scriptPubKey, sigdata);\n     } else {\n-        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, txdata, sighash);\n+        MutableTransactionSignatureCreator creator(&tx, index, utxo.nValue, *txdata, sighash);\n         sig_complete = ProduceSignature(provider, creator, utxo.scriptPubKey, sigdata);\n     }\n     // Verify that a witness signature was produced in case one was required."
      },
      {
        "sha": "897273c6af2a1cd8bb0287830b1da2f818fc5b86",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1d73ab230610780e6b832377bd2418846e4270/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1d73ab230610780e6b832377bd2418846e4270/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3b1d73ab230610780e6b832377bd2418846e4270",
        "patch": "@@ -703,7 +703,7 @@ static RPCHelpMan combinerawtransaction()\n                 sigdata.MergeSignatureData(DataFromTransaction(txv, i, txout, txdata));\n             }\n         }\n-        ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&mergedTx, i, txout.nValue, &txdata, 1), txout.scriptPubKey, sigdata);\n+        ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&mergedTx, i, txout.nValue, txdata, 1), txout.scriptPubKey, sigdata);\n \n         UpdateInput(txin, sigdata);\n     }"
      },
      {
        "sha": "d9308235af1f299f688ae57bd652724d1249f0e3",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1d73ab230610780e6b832377bd2418846e4270/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1d73ab230610780e6b832377bd2418846e4270/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=3b1d73ab230610780e6b832377bd2418846e4270",
        "patch": "@@ -17,16 +17,9 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, int hash_type)\n-    : txTo{tx}, nIn{input_idx}, nHashType{hash_type}, amount{amount}, checker{txTo, nIn, amount, MissingDataBehavior::FAIL},\n-      m_txdata(nullptr)\n-{\n-}\n-\n-MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, const PrecomputedTransactionData* txdata, int hash_type)\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, const PrecomputedTransactionData& txdata, int hash_type)\n     : txTo{tx}, nIn{input_idx}, nHashType{hash_type}, amount{amount},\n-      checker{txdata ? MutableTransactionSignatureChecker{txTo, nIn, amount, *txdata, MissingDataBehavior::FAIL} :\n-                       MutableTransactionSignatureChecker{txTo, nIn, amount, MissingDataBehavior::FAIL}},\n+      checker{MutableTransactionSignatureChecker{txTo, nIn, amount, txdata, MissingDataBehavior::FAIL}},\n       m_txdata(txdata)\n {\n }\n@@ -49,7 +42,7 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     // BASE/WITNESS_V0 signatures don't support explicit SIGHASH_DEFAULT, use SIGHASH_ALL instead.\n     const int hashtype = nHashType == SIGHASH_DEFAULT ? SIGHASH_ALL : nHashType;\n \n-    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, hashtype, amount, sigversion, m_txdata);\n+    uint256 hash = SignatureHash(scriptCode, *txTo, nIn, hashtype, amount, sigversion, &m_txdata);\n     if (!key.Sign(hash, vchSig))\n         return false;\n     vchSig.push_back((unsigned char)hashtype);\n@@ -66,7 +59,7 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\n     // BIP341/BIP342 signing needs lots of precomputed transaction data. While some\n     // (non-SIGHASH_DEFAULT) sighash modes exist that can work with just some subset\n     // of data present, for now, only support signing when everything is provided.\n-    if (!m_txdata || !m_txdata->m_bip341_taproot_ready || !m_txdata->m_spent_outputs_ready) return false;\n+    if (!m_txdata.m_bip341_taproot_ready || !m_txdata.m_spent_outputs_ready) return false;\n \n     ScriptExecutionData execdata;\n     execdata.m_annex_init = true;\n@@ -79,7 +72,7 @@ bool MutableTransactionSignatureCreator::CreateSchnorrSig(const SigningProvider&\n         execdata.m_tapleaf_hash = *leaf_hash;\n     }\n     uint256 hash;\n-    if (!SignatureHashSchnorr(hash, execdata, *txTo, nIn, nHashType, sigversion, *m_txdata, MissingDataBehavior::FAIL)) return false;\n+    if (!SignatureHashSchnorr(hash, execdata, *txTo, nIn, nHashType, sigversion, m_txdata, MissingDataBehavior::FAIL)) return false;\n     sig.resize(64);\n     // Use uint256{} as aux_rnd for now.\n     if (!key.SignSchnorr(hash, sig, merkle_root, {})) return false;\n@@ -516,7 +509,9 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n {\n     assert(nIn < txTo.vin.size());\n \n-    MutableTransactionSignatureCreator creator(&txTo, nIn, amount, nHashType);\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(CTransaction(txTo), {}, true);\n+    MutableTransactionSignatureCreator creator(&txTo, nIn, amount, txdata, nHashType);\n \n     SignatureData sigdata;\n     bool ret = ProduceSignature(provider, creator, fromPubKey, sigdata);\n@@ -642,7 +637,7 @@ bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n         SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out, txdata);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, &txdata, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, txdata, nHashType), prevPubKey, sigdata);\n         }\n \n         UpdateInput(txin, sigdata);"
      },
      {
        "sha": "92972731e4539b3f784f51e14697ff108e7e61f8",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1d73ab230610780e6b832377bd2418846e4270/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1d73ab230610780e6b832377bd2418846e4270/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=3b1d73ab230610780e6b832377bd2418846e4270",
        "patch": "@@ -42,11 +42,10 @@ class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n     int nHashType;\n     CAmount amount;\n     const MutableTransactionSignatureChecker checker;\n-    const PrecomputedTransactionData* m_txdata;\n+    const PrecomputedTransactionData& m_txdata;\n \n public:\n-    MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, int hash_type);\n-    MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, const PrecomputedTransactionData* txdata, int hash_type);\n+    MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, const PrecomputedTransactionData& txdata, int hash_type);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n     bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const override;"
      },
      {
        "sha": "06be38e8e2169a814995c640223dba79ed777003",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1d73ab230610780e6b832377bd2418846e4270/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1d73ab230610780e6b832377bd2418846e4270/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=3b1d73ab230610780e6b832377bd2418846e4270",
        "patch": "@@ -113,8 +113,10 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n                 (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n             }\n             if (n_in < script_tx_to.vin.size()) {\n+                PrecomputedTransactionData txdata;\n+                txdata.Init(CTransaction(tx_to), {}, true);\n                 (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n-                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), txdata, fuzzed_data_provider.ConsumeIntegral<int>()};\n                 std::vector<unsigned char> vch_sig;\n                 CKeyID address;\n                 if (fuzzed_data_provider.ConsumeBool()) {"
      },
      {
        "sha": "818168519d9dba9939d49e67d5c87e319f5f2d2b",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1d73ab230610780e6b832377bd2418846e4270/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1d73ab230610780e6b832377bd2418846e4270/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=3b1d73ab230610780e6b832377bd2418846e4270",
        "patch": "@@ -1161,7 +1161,9 @@ SignatureData CombineSignatures(const CTxOut& txout, const CMutableTransaction&\n     SignatureData data;\n     data.MergeSignatureData(scriptSig1);\n     data.MergeSignatureData(scriptSig2);\n-    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&tx, 0, txout.nValue, SIGHASH_DEFAULT), txout.scriptPubKey, data);\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(CTransaction(tx), {}, true);\n+    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&tx, 0, txout.nValue, txdata, SIGHASH_DEFAULT), txout.scriptPubKey, data);\n     return data;\n }\n \n@@ -1798,7 +1800,7 @@ BOOST_AUTO_TEST_CASE(bip341_keypath_test_vectors)\n             // Sign and verify signature.\n             FlatSigningProvider provider;\n             provider.keys[key.GetPubKey().GetID()] = key;\n-            MutableTransactionSignatureCreator creator(&tx, txinpos, utxos[txinpos].nValue, &txdata, hashtype);\n+            MutableTransactionSignatureCreator creator(&tx, txinpos, utxos[txinpos].nValue, txdata, hashtype);\n             std::vector<unsigned char> signature;\n             BOOST_CHECK(creator.CreateSchnorrSig(provider, signature, pubkey, nullptr, &merkle_root, SigVersion::TAPROOT));\n             BOOST_CHECK_EQUAL(HexStr(signature), input[\"expected\"][\"witness\"][0].get_str());"
      },
      {
        "sha": "a564d9e1f88e818c3a5e71bc66f8622cd00cc6c0",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1d73ab230610780e6b832377bd2418846e4270/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1d73ab230610780e6b832377bd2418846e4270/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=3b1d73ab230610780e6b832377bd2418846e4270",
        "patch": "@@ -566,7 +566,7 @@ SignatureData CombineSignatures(const CMutableTransaction& input1, const CMutabl\n     PrecomputedTransactionData txdata2;\n     txdata2.Init(CTransaction(input2), {}, true);\n     sigdata.MergeSignatureData(DataFromTransaction(input2, 0, tx->vout[0], txdata2));\n-    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&input1, 0, tx->vout[0].nValue, SIGHASH_ALL), tx->vout[0].scriptPubKey, sigdata);\n+    ProduceSignature(DUMMY_SIGNING_PROVIDER, MutableTransactionSignatureCreator(&input1, 0, tx->vout[0].nValue, txdata1, SIGHASH_ALL), tx->vout[0].scriptPubKey, sigdata);\n     return sigdata;\n }\n "
      },
      {
        "sha": "85e49f321f90d1e1912c49d6694c8776fef327bd",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1d73ab230610780e6b832377bd2418846e4270/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1d73ab230610780e6b832377bd2418846e4270/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=3b1d73ab230610780e6b832377bd2418846e4270",
        "patch": "@@ -327,9 +327,12 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, Dersig100Setup)\n         valid_with_witness_tx.vout[0].nValue = 11*CENT;\n         valid_with_witness_tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n \n+        PrecomputedTransactionData txdata;\n+        txdata.Init(CTransaction(valid_with_witness_tx), {spend_tx.vout[1]}, true);\n+\n         // Sign\n         SignatureData sigdata;\n-        BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata));\n+        BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&valid_with_witness_tx, 0, 11*CENT, txdata, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata));\n         UpdateInput(valid_with_witness_tx.vin[0], sigdata);\n \n         // This should be valid under all script flags.\n@@ -354,10 +357,13 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, Dersig100Setup)\n         tx.vout[0].nValue = 22*CENT;\n         tx.vout[0].scriptPubKey = p2pk_scriptPubKey;\n \n+        PrecomputedTransactionData txdata;\n+        txdata.Init(CTransaction(tx), {spend_tx.vout[0], spend_tx.vout[1]}, true);\n+\n         // Sign\n         for (int i=0; i<2; ++i) {\n             SignatureData sigdata;\n-            BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata));\n+            BOOST_CHECK(ProduceSignature(keystore, MutableTransactionSignatureCreator(&tx, i, 11*CENT, txdata, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata));\n             UpdateInput(tx.vin[i], sigdata);\n         }\n \n@@ -370,7 +376,6 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, Dersig100Setup)\n         tx.vin[1].scriptWitness.SetNull();\n \n         TxValidationState state;\n-        PrecomputedTransactionData txdata;\n         // This transaction is now invalid under segwit, because of the second input.\n         BOOST_CHECK(!CheckInputScripts(CTransaction(tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n "
      }
    ]
  },
  {
    "sha": "2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
    "node_id": "C_kwDOABII59oAKDJhZWZlOTFjNTRhMjk2Y2FiNTY0MmQxZDdmZjFhZWY4YWY2MDNjZjM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-24T19:03:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-18T18:11:20Z"
      },
      "message": "Require PrecomputedTransactionData in TransactionSignatureChecker\n\nGenericTransactionSignatureChecker now requires a\nPrecomputedTransactionData.",
      "tree": {
        "sha": "c0bc0122fc5ee59dc1d3dbace4a4a863ae2e399d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0bc0122fc5ee59dc1d3dbace4a4a863ae2e399d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b1d73ab230610780e6b832377bd2418846e4270",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1d73ab230610780e6b832377bd2418846e4270",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1d73ab230610780e6b832377bd2418846e4270"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 47,
      "deletions": 33
    },
    "files": [
      {
        "sha": "a35ac58815546d924bd377396d8e679e81a4f82d",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
        "patch": "@@ -47,6 +47,8 @@ static void VerifyScriptBench(benchmark::Bench& bench)\n     key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SigVersion::WITNESS_V0), witness.stack.back());\n     witness.stack.back().push_back(static_cast<unsigned char>(SIGHASH_ALL));\n     witness.stack.push_back(ToByteVector(pubkey));\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(CTransaction(txSpend), {txCredit.vout[0]}, true);\n \n     // Benchmark.\n     bench.run([&] {\n@@ -56,7 +58,7 @@ static void VerifyScriptBench(benchmark::Bench& bench)\n             txCredit.vout[0].scriptPubKey,\n             &txSpend.vin[0].scriptWitness,\n             flags,\n-            MutableTransactionSignatureChecker(&txSpend, 0, txCredit.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL),\n+            MutableTransactionSignatureChecker(&txSpend, 0, txCredit.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL),\n             &err);\n         assert(err == SCRIPT_ERR_OK);\n         assert(success);"
      },
      {
        "sha": "3b632f9fbcafdcf6d9265facbea1921ad133b331",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
        "patch": "@@ -1683,7 +1683,7 @@ bool GenericTransactionSignatureChecker<T>::CheckECDSASignature(const std::vecto\n     // Witness sighashes need the amount.\n     if (sigversion == SigVersion::WITNESS_V0 && amount < 0) return HandleMissingData(m_mdb);\n \n-    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion, this->txdata);\n+    uint256 sighash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion, &this->txdata);\n \n     if (!VerifyECDSASignature(vchSig, pubkey, sighash))\n         return false;\n@@ -1711,8 +1711,7 @@ bool GenericTransactionSignatureChecker<T>::CheckSchnorrSignature(Span<const uns\n         if (hashtype == SIGHASH_DEFAULT) return set_error(serror, SCRIPT_ERR_SCHNORR_SIG_HASHTYPE);\n     }\n     uint256 sighash;\n-    if (!this->txdata) return HandleMissingData(m_mdb);\n-    if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, *this->txdata, m_mdb)) {\n+    if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, this->txdata, m_mdb)) {\n         return set_error(serror, SCRIPT_ERR_SCHNORR_SIG_HASHTYPE);\n     }\n     if (!VerifySchnorrSignature(sig, pubkey, sighash)) return set_error(serror, SCRIPT_ERR_SCHNORR_SIG);"
      },
      {
        "sha": "3c130df72ceccaa39b13ddf7dab9eb29bc627ba6",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
        "patch": "@@ -267,15 +267,14 @@ class GenericTransactionSignatureChecker : public BaseSignatureChecker\n     const MissingDataBehavior m_mdb;\n     unsigned int nIn;\n     const CAmount amount;\n-    const PrecomputedTransactionData* txdata;\n+    const PrecomputedTransactionData& txdata;\n \n protected:\n     virtual bool VerifyECDSASignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n     virtual bool VerifySchnorrSignature(Span<const unsigned char> sig, const XOnlyPubKey& pubkey, const uint256& sighash) const;\n \n public:\n-    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, MissingDataBehavior mdb) : txTo(txToIn), m_mdb(mdb), nIn(nInIn), amount(amountIn), txdata(nullptr) {}\n-    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn, MissingDataBehavior mdb) : txTo(txToIn), m_mdb(mdb), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n+    GenericTransactionSignatureChecker(const T* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn, MissingDataBehavior mdb) : txTo(txToIn), m_mdb(mdb), nIn(nInIn), amount(amountIn), txdata(txdataIn) {}\n     bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n     bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror = nullptr) const override;\n     bool CheckLockTime(const CScriptNum& nLockTime) const override;"
      },
      {
        "sha": "e77de55763282246520e820cf8c4db53c5f505e3",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
        "patch": "@@ -61,13 +61,15 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     txFrom.vout[2].scriptPubKey = escrow;\n \n     CMutableTransaction txTo[3]; // Spending transaction\n+    PrecomputedTransactionData txdata[3];\n     for (int i = 0; i < 3; i++)\n     {\n         txTo[i].vin.resize(1);\n         txTo[i].vout.resize(1);\n         txTo[i].vin[0].prevout.n = i;\n         txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n         txTo[i].vout[0].nValue = 1;\n+        txdata[i].Init(CTransaction(txTo[i]), {txFrom.vout[i]}, true);\n     }\n \n     std::vector<CKey> keys;\n@@ -77,20 +79,20 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.assign(1,key[0]);\n     keys.push_back(key[1]);\n     s = sign_multisig(a_and_b, keys, CTransaction(txTo[0]), 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount, txdata[0], MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.assign(1,key[i]);\n         s = sign_multisig(a_and_b, keys, CTransaction(txTo[0]), 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount, txdata[0], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a&b 1: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n \n         keys.assign(1,key[1]);\n         keys.push_back(key[i]);\n         s = sign_multisig(a_and_b, keys, CTransaction(txTo[0]), 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[0], 0, amount, txdata[0], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a&b 2: %d\", i));\n         BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n     }\n \n@@ -101,18 +103,18 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         s = sign_multisig(a_or_b, keys, CTransaction(txTo[1]), 0);\n         if (i == 0 || i == 1)\n         {\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount, txdata[1], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n         }\n         else\n         {\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount, txdata[1], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"a|b: %d\", i));\n             BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n         }\n     }\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, nullptr, flags, MutableTransactionSignatureChecker(&txTo[1], 0, amount, txdata[1], MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_SIG_DER, ScriptErrorString(err));\n \n \n@@ -124,12 +126,12 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             s = sign_multisig(escrow, keys, CTransaction(txTo[2]), 0);\n             if (i < j && i < 3 && j < 3)\n             {\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, nullptr, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, nullptr, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount, txdata[2], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"escrow 1: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n             }\n             else\n             {\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, nullptr, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount, MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, nullptr, flags, MutableTransactionSignatureChecker(&txTo[2], 0, amount, txdata[2], MissingDataBehavior::ASSERT_FAIL), &err), strprintf(\"escrow 2: %d %d\", i, j));\n                 BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n             }\n         }"
      },
      {
        "sha": "880ac228e5d4edbe71835bcad16a10e996c2c3fd",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
        "patch": "@@ -40,8 +40,10 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict, Scri\n     txTo.vin[0].prevout.hash = txFrom.GetHash();\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(CTransaction(txTo), {txFrom.vout[0]}, true);\n \n-    return VerifyScript(scriptSig, scriptPubKey, nullptr, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0, txFrom.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err);\n+    return VerifyScript(scriptSig, scriptPubKey, nullptr, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, MutableTransactionSignatureChecker(&txTo, 0, txFrom.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err);\n }\n \n "
      },
      {
        "sha": "7a07cd2f94723342469175cf958efd96be497afc",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 15,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
        "patch": "@@ -135,7 +135,9 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n     const CTransaction txCredit{BuildCreditingTransaction(scriptPubKey, nValue)};\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, scriptWitness, txCredit);\n     CMutableTransaction tx2 = tx;\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err) == expect, message);\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(CTransaction(tx), {txCredit.vout[0]}, true);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err) == expect, message);\n     BOOST_CHECK_MESSAGE(err == scriptError, FormatScriptError(err) + \" where \" + FormatScriptError((ScriptError_t)scriptError) + \" expected: \" + message);\n \n     // Verify that removing flags from a passing test or adding flags to a failing test does not change the result.\n@@ -145,7 +147,7 @@ void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, const CScript\n         // Weed out some invalid flag combinations.\n         if (combined_flags & SCRIPT_VERIFY_CLEANSTACK && ~combined_flags & (SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS)) continue;\n         if (combined_flags & SCRIPT_VERIFY_WITNESS && ~combined_flags & SCRIPT_VERIFY_P2SH) continue;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, combined_flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err) == expect, message + strprintf(\" (with flags %x)\", combined_flags));\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, &scriptWitness, combined_flags, MutableTransactionSignatureChecker(&tx, 0, txCredit.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err) == expect, message + strprintf(\" (with flags %x)\", combined_flags));\n     }\n \n #if defined(HAVE_CONSENSUS_LIB)\n@@ -1069,20 +1071,22 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n \n     const CTransaction txFrom12{BuildCreditingTransaction(scriptPubKey12)};\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom12);\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(CTransaction(txTo12), {txFrom12.vout[0]}, true);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, CTransaction(txTo12));\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, CTransaction(txTo12));\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, CTransaction(txTo12));\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo12, 0, txFrom12.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n }\n \n@@ -1100,58 +1104,60 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n \n     const CTransaction txFrom23{BuildCreditingTransaction(scriptPubKey23)};\n     CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), CScriptWitness(), txFrom23);\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(CTransaction(txTo23), {txFrom23.vout[0]}, true);\n \n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_EVAL_FALSE, ScriptErrorString(err));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, CTransaction(txTo23));\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &err));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, nullptr, gFlags, MutableTransactionSignatureChecker(&txTo23, 0, txFrom23.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &err));\n     BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_INVALID_STACK_OPERATION, ScriptErrorString(err));\n }\n "
      },
      {
        "sha": "1cd9b87ba9bf7f226ea9daa9a135d123434bf0db",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
        "patch": "@@ -71,7 +71,9 @@ static ScriptError VerifyWithFlag(const CTransaction& output, const CMutableTran\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &error);\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(inputi, {output.vout[0]}, true);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output.vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output.vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &error);\n     BOOST_CHECK((ret == true) == (error == SCRIPT_ERR_OK));\n \n     return error;"
      },
      {
        "sha": "2270c8c7368a37e6af0dad7c7ed5d23883e9a764",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aefe91c54a296cab5642d1d7ff1aef8af603cf3/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2aefe91c54a296cab5642d1d7ff1aef8af603cf3",
        "patch": "@@ -451,7 +451,9 @@ static void CheckWithFlag(const CTransactionRef& output, const CMutableTransacti\n {\n     ScriptError error;\n     CTransaction inputi(input);\n-    bool ret = VerifyScript(inputi.vin[0].scriptSig, output->vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output->vout[0].nValue, MissingDataBehavior::ASSERT_FAIL), &error);\n+    PrecomputedTransactionData txdata;\n+    txdata.Init(inputi, {output->vout[0]}, true);\n+    bool ret = VerifyScript(inputi.vin[0].scriptSig, output->vout[0].scriptPubKey, &inputi.vin[0].scriptWitness, flags, TransactionSignatureChecker(&inputi, 0, output->vout[0].nValue, txdata, MissingDataBehavior::ASSERT_FAIL), &error);\n     assert(ret == success);\n }\n "
      }
    ]
  }
]