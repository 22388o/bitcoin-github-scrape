[
  {
    "sha": "05bfee3451d3b3f9aaeda63de75f9d48eecea237",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWJmZWUzNDUxZDNiM2Y5YWFlZGE2M2RlNzVmOWQ0OGVlY2VhMjM3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-04-24T09:57:34Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-05-07T15:51:30Z"
      },
      "message": "util_SettingsMerge test cleanup\n\nFollowup to #15869. Treat \"-wallet\" as the network-specific argument in test\ninstead of \"-server\", to make test output clearer and be more consistent with\nbitcoind. Update embedded hash to match changed output from this.",
      "tree": {
        "sha": "1c5449d9000b5628fc1601cc78a5781b726cbbe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c5449d9000b5628fc1601cc78a5781b726cbbe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05bfee3451d3b3f9aaeda63de75f9d48eecea237",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05bfee3451d3b3f9aaeda63de75f9d48eecea237",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05bfee3451d3b3f9aaeda63de75f9d48eecea237",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05bfee3451d3b3f9aaeda63de75f9d48eecea237/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2a6b0216192b6e8428f1a80b47f5178fccb961a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2a6b0216192b6e8428f1a80b47f5178fccb961a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2a6b0216192b6e8428f1a80b47f5178fccb961a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "566fbae9064883bc59760f02d5ac28f28d8f169f",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05bfee3451d3b3f9aaeda63de75f9d48eecea237/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05bfee3451d3b3f9aaeda63de75f9d48eecea237/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=05bfee3451d3b3f9aaeda63de75f9d48eecea237",
        "patch": "@@ -580,7 +580,7 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n \n // Test different ways settings can be merged, and verify results. This test can\n // be used to confirm that updates to settings code don't change behavior\n-// unintentially.\n+// unintentionally.\n //\n // The test covers:\n //\n@@ -687,7 +687,7 @@ struct SettingsMergeTestingSetup : public BasicTestingSetup {\n // Regression test covering different ways config settings can be merged. The\n // test parses and merges settings, representing the results as strings that get\n // compared against an expected hash. To debug, the result strings can be dumped\n-// to a file (see below).\n+// to a file (see comments below).\n BOOST_FIXTURE_TEST_CASE(util_SettingsMerge, SettingsMergeTestingSetup)\n {\n     CHash256 out_sha;\n@@ -706,7 +706,7 @@ BOOST_FIXTURE_TEST_CASE(util_SettingsMerge, SettingsMergeTestingSetup)\n         desc += network;\n         parser.m_network = network;\n \n-        const std::string& name = net_specific ? \"server\" : \"wallet\";\n+        const std::string& name = net_specific ? \"wallet\" : \"server\";\n         const std::string key = \"-\" + name;\n         parser.AddArg(key, name, false, OptionsCategory::OPTIONS);\n         if (net_specific) parser.SetNetworkOnlyArg(key);\n@@ -801,7 +801,7 @@ BOOST_FIXTURE_TEST_CASE(util_SettingsMerge, SettingsMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <IsArgSet/IsArgNegated/GetArg output> | <GetArgs output> | <GetUnsuitable output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"80964e17fbd3c5569d3c824d032e28e2d319ef57494735b0e76eb7aad9957f2c\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"f4281d9bff4c0b398ff118386e3a40caa6bac7645e17b296d6a10b95bff632ae\");\n }\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)"
      }
    ]
  },
  {
    "sha": "4b331159dfa599eced9f9d4e5780173367b43c74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjMzMTE1OWRmYTU5OWVjZWQ5ZjlkNGU1NzgwMTczMzY3YjQzYzc0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-05-06T15:52:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-05-07T15:51:30Z"
      },
      "message": "Add unit test NextString, ForEachNoDup functions\n\nRemove testcase generating code from util_SettingsMerge so it can be reused in\nnew tests.\n\nThe hash value expected in util_SettingsMerge changes as a result of this, but\nonly because the testcases are generated in a different order, not because any\ncases are added or removed. It is possible to verify this with:\n\n    SETTINGS_MERGE_TEST_OUT=new.txt test/test_bitcoin --run_test=util_tests/util_SettingsMerge\n    git checkout HEAD~1\n    make test/test_bitcoin\n    SETTINGS_MERGE_TEST_OUT=old.txt test/test_bitcoin --run_test=util_tests/util_SettingsMerge\n    diff -u <(sort old.txt) <(sort new.txt)\n\nThe new output is a little more readable, with simpler testcases sorted first.",
      "tree": {
        "sha": "fbe103e1f07f4a3687bb09406c0aa13e48946011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbe103e1f07f4a3687bb09406c0aa13e48946011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b331159dfa599eced9f9d4e5780173367b43c74",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b331159dfa599eced9f9d4e5780173367b43c74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b331159dfa599eced9f9d4e5780173367b43c74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b331159dfa599eced9f9d4e5780173367b43c74/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05bfee3451d3b3f9aaeda63de75f9d48eecea237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05bfee3451d3b3f9aaeda63de75f9d48eecea237",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05bfee3451d3b3f9aaeda63de75f9d48eecea237"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 40,
      "deletions": 35
    },
    "files": [
      {
        "sha": "f90cb0d623dbd51c26510ac5aa03d8f01ff1cda5",
        "filename": "src/test/util.h",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b331159dfa599eced9f9d4e5780173367b43c74/src/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b331159dfa599eced9f9d4e5780173367b43c74/src/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.h?ref=4b331159dfa599eced9f9d4e5780173367b43c74",
        "patch": "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}\n \n #endif // BITCOIN_TEST_UTIL_H"
      },
      {
        "sha": "42b781db95e11bae18650e53ee22018ea26d1085",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 35,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b331159dfa599eced9f9d4e5780173367b43c74/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b331159dfa599eced9f9d4e5780173367b43c74/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4b331159dfa599eced9f9d4e5780173367b43c74",
        "patch": "@@ -7,6 +7,7 @@\n #include <clientversion.h>\n #include <primitives/transaction.h>\n #include <sync.h>\n+#include <test/util.h>\n #include <util/strencodings.h>\n #include <util/moneystr.h>\n #include <test/setup_common.h>\n@@ -605,15 +606,17 @@ struct SettingsMergeTestingSetup : public BasicTestingSetup {\n     //! debugging to make test results easier to understand.\n     static constexpr int MAX_ACTIONS = 3;\n \n-    enum Action { SET = 0, NEGATE, SECTION_SET, SECTION_NEGATE, END };\n+    enum Action { NONE, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n     using ActionList = Action[MAX_ACTIONS];\n \n     //! Enumerate all possible test configurations.\n     template <typename Fn>\n     void ForEachMergeSetup(Fn&& fn)\n     {\n-        ForEachActionList([&](const ActionList& arg_actions) {\n-            ForEachActionList([&](const ActionList& conf_actions) {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, SECTION_NEGATE, [&] {\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&] {\n                 for (bool soft_set : {false, true}) {\n                     for (bool force_set : {false, true}) {\n                         for (const std::string& section : {CBaseChainParams::MAIN, CBaseChainParams::TESTNET}) {\n@@ -629,36 +632,6 @@ struct SettingsMergeTestingSetup : public BasicTestingSetup {\n         });\n     }\n \n-    //! Enumerate interesting combinations of actions.\n-    template <typename Fn>\n-    void ForEachActionList(Fn&& fn)\n-    {\n-        ActionList actions = {SET};\n-        for (bool done = false; !done;) {\n-            int prev_action = -1;\n-            bool skip_actions = false;\n-            for (Action action : actions) {\n-                if ((prev_action == END && action != END) || (prev_action != END && action == prev_action)) {\n-                    // To cut down list of enumerated settings, skip enumerating\n-                    // settings with ignored actions after an END, and settings that\n-                    // repeat the same action twice in a row.\n-                    skip_actions = true;\n-                    break;\n-                }\n-                prev_action = action;\n-            }\n-            if (!skip_actions) fn(actions);\n-            done = true;\n-            for (Action& action : actions) {\n-                action = Action(action < END ? action + 1 : 0);\n-                if (action) {\n-                    done = false;\n-                    break;\n-                }\n-            }\n-        }\n-    }\n-\n     //! Translate actions into a list of <key>=<value> setting strings.\n     std::vector<std::string> GetValues(const ActionList& actions,\n         const std::string& section,\n@@ -668,7 +641,7 @@ struct SettingsMergeTestingSetup : public BasicTestingSetup {\n         std::vector<std::string> values;\n         int suffix = 0;\n         for (Action action : actions) {\n-            if (action == END) break;\n+            if (action == NONE) break;\n             std::string prefix;\n             if (action == SECTION_SET || action == SECTION_NEGATE) prefix = section + \".\";\n             if (action == SET || action == SECTION_SET) {\n@@ -801,7 +774,7 @@ BOOST_FIXTURE_TEST_CASE(util_SettingsMerge, SettingsMergeTestingSetup)\n     // Results file is formatted like:\n     //\n     //   <input> || <IsArgSet/IsArgNegated/GetArg output> | <GetArgs output> | <GetUnsuitable output>\n-    BOOST_CHECK_EQUAL(out_sha_hex, \"f4281d9bff4c0b398ff118386e3a40caa6bac7645e17b296d6a10b95bff632ae\");\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"b835eef5977d69114eb039a976201f8c7121f34fe2b7ea2b73cafb516e5c9dc8\");\n }\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)"
      }
    ]
  },
  {
    "sha": "f6bb11fd37f8a2c985786b688ea07699ba75780e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmJiMTFmZDM3ZjhhMmM5ODU3ODZiNjg4ZWEwNzY5OWJhNzU3ODBl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-05-06T21:12:42Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-05-07T15:51:30Z"
      },
      "message": "Add test for ArgsManager::GetChainName\n\nThere was some test coverage previously, but it was limited and didn't test\nconflicting and negated arguments.",
      "tree": {
        "sha": "b724effe13eefbed6f91e775cda330565e48a9d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b724effe13eefbed6f91e775cda330565e48a9d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6bb11fd37f8a2c985786b688ea07699ba75780e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6bb11fd37f8a2c985786b688ea07699ba75780e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6bb11fd37f8a2c985786b688ea07699ba75780e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6bb11fd37f8a2c985786b688ea07699ba75780e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b331159dfa599eced9f9d4e5780173367b43c74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b331159dfa599eced9f9d4e5780173367b43c74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b331159dfa599eced9f9d4e5780173367b43c74"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 106,
      "deletions": 4
    },
    "files": [
      {
        "sha": "51dd25ed1cbeaf04249bd7a9b4d93b755050f68f",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 106,
        "deletions": 4,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6bb11fd37f8a2c985786b688ea07699ba75780e/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6bb11fd37f8a2c985786b688ea07699ba75780e/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f6bb11fd37f8a2c985786b688ea07699ba75780e",
        "patch": "@@ -601,7 +601,7 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n //   outside a network section, and non-network specific settings like \"-server\"\n //   that aren't sensitive to the network.\n //\n-struct SettingsMergeTestingSetup : public BasicTestingSetup {\n+struct ArgsMergeTestingSetup : public BasicTestingSetup {\n     //! Max number of actions to sequence together. Can decrease this when\n     //! debugging to make test results easier to understand.\n     static constexpr int MAX_ACTIONS = 3;\n@@ -661,11 +661,11 @@ struct SettingsMergeTestingSetup : public BasicTestingSetup {\n // test parses and merges settings, representing the results as strings that get\n // compared against an expected hash. To debug, the result strings can be dumped\n // to a file (see comments below).\n-BOOST_FIXTURE_TEST_CASE(util_SettingsMerge, SettingsMergeTestingSetup)\n+BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n {\n     CHash256 out_sha;\n     FILE* out_file = nullptr;\n-    if (const char* out_path = getenv(\"SETTINGS_MERGE_TEST_OUT\")) {\n+    if (const char* out_path = getenv(\"ARGS_MERGE_TEST_OUT\")) {\n         out_file = fsbridge::fopen(out_path, \"w\");\n         if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n     }\n@@ -767,7 +767,7 @@ BOOST_FIXTURE_TEST_CASE(util_SettingsMerge, SettingsMergeTestingSetup)\n \n     // If check below fails, should manually dump the results with:\n     //\n-    //   SETTINGS_MERGE_TEST_OUT=results.txt ./test_bitcoin --run_test=util_tests/util_SettingsMerge\n+    //   ARGS_MERGE_TEST_OUT=results.txt ./test_bitcoin --run_test=util_tests/util_ArgsMerge\n     //\n     // And verify diff against previous results to make sure the changes are expected.\n     //\n@@ -777,6 +777,108 @@ BOOST_FIXTURE_TEST_CASE(util_SettingsMerge, SettingsMergeTestingSetup)\n     BOOST_CHECK_EQUAL(out_sha_hex, \"b835eef5977d69114eb039a976201f8c7121f34fe2b7ea2b73cafb516e5c9dc8\");\n }\n \n+// Similar test as above, but for ArgsManager::GetChainName function.\n+struct ChainMergeTestingSetup : public BasicTestingSetup {\n+    static constexpr int MAX_ACTIONS = 2;\n+\n+    enum Action { NONE, ENABLE_TEST, DISABLE_TEST, NEGATE_TEST, ENABLE_REG, DISABLE_REG, NEGATE_REG };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, ENABLE_TEST, NEGATE_REG, [&] {\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, ENABLE_TEST, NEGATE_REG, [&] { fn(arg_actions, conf_actions); });\n+        });\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n+{\n+    CHash256 out_sha;\n+    FILE* out_file = nullptr;\n+    if (const char* out_path = getenv(\"CHAIN_MERGE_TEST_OUT\")) {\n+        out_file = fsbridge::fopen(out_path, \"w\");\n+        if (!out_file) throw std::system_error(errno, std::generic_category(), \"fopen failed\");\n+    }\n+\n+    ForEachMergeSetup([&](const ActionList& arg_actions, const ActionList& conf_actions) {\n+        TestArgsManager parser;\n+        LOCK(parser.cs_args);\n+        parser.AddArg(\"-regtest\", \"regtest\", false, OptionsCategory::OPTIONS);\n+        parser.AddArg(\"-testnet\", \"testnet\", false, OptionsCategory::OPTIONS);\n+\n+        auto arg = [](Action action) { return action == ENABLE_TEST  ? \"-testnet=1\"   :\n+                                              action == DISABLE_TEST ? \"-testnet=0\"   :\n+                                              action == NEGATE_TEST  ? \"-notestnet=1\" :\n+                                              action == ENABLE_REG   ? \"-regtest=1\"   :\n+                                              action == DISABLE_REG  ? \"-regtest=0\"   :\n+                                              action == NEGATE_REG   ? \"-noregtest=1\" : nullptr; };\n+\n+        std::string desc;\n+        std::vector<const char*> argv = {\"ignored\"};\n+        for (Action action : arg_actions) {\n+            const char* argstr = arg(action);\n+            if (!argstr) break;\n+            argv.push_back(argstr);\n+            desc += \" \";\n+            desc += argv.back();\n+        }\n+        std::string error;\n+        BOOST_CHECK(parser.ParseParameters(argv.size(), argv.data(), error));\n+        BOOST_CHECK_EQUAL(error, \"\");\n+\n+        std::string conf;\n+        for (Action action : conf_actions) {\n+            const char* argstr = arg(action);\n+            if (!argstr) break;\n+            desc += \" \";\n+            desc += argstr + 1;\n+            conf += argstr + 1;\n+        }\n+        std::istringstream conf_stream(conf);\n+        BOOST_CHECK(parser.ReadConfigStream(conf_stream, \"filepath\", error));\n+        BOOST_CHECK_EQUAL(error, \"\");\n+\n+        desc += \" || \";\n+        try {\n+            desc += parser.GetChainName();\n+        } catch (const std::runtime_error& e) {\n+            desc += \"error: \";\n+            desc += e.what();\n+        }\n+        desc += \"\\n\";\n+\n+        out_sha.Write((const unsigned char*)desc.data(), desc.size());\n+        if (out_file) {\n+            BOOST_REQUIRE(fwrite(desc.data(), 1, desc.size(), out_file) == desc.size());\n+        }\n+    });\n+\n+    if (out_file) {\n+        if (fclose(out_file)) throw std::system_error(errno, std::generic_category(), \"fclose failed\");\n+        out_file = nullptr;\n+    }\n+\n+    unsigned char out_sha_bytes[CSHA256::OUTPUT_SIZE];\n+    out_sha.Finalize(out_sha_bytes);\n+    std::string out_sha_hex = HexStr(std::begin(out_sha_bytes), std::end(out_sha_bytes));\n+\n+    // If check below fails, should manually dump the results with:\n+    //\n+    //   CHAIN_MERGE_TEST_OUT=results.txt ./test_bitcoin --run_test=util_tests/util_ChainMerge\n+    //\n+    // And verify diff against previous results to make sure the changes are expected.\n+    //\n+    // Results file is formatted like:\n+    //\n+    //   <input> || <output>\n+    BOOST_CHECK_EQUAL(out_sha_hex, \"b284f4b4a15dd6bf8c06213a69a004b1960388e1d9917173927db52ac220927f\");\n+}\n+\n BOOST_AUTO_TEST_CASE(util_FormatMoney)\n {\n     BOOST_CHECK_EQUAL(FormatMoney(0), \"0.00\");"
      }
    ]
  }
]