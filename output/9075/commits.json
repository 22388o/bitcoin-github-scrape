[
  {
    "sha": "e2e069dabcd7e61e14bb7bceda6c19ec3afa358a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmUwNjlkYWJjZDdlNjFlMTRiYjdiY2VkYTZjMTllYzNhZmEzNThh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-09T01:39:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-09T01:39:44Z"
      },
      "message": "Revert \"RPC: Give more details when \"generate\" fails\"\n\nThis only returned information in the case of CheckBlock failure,\nbut breaks future changes.",
      "tree": {
        "sha": "6bc4af7b5961076e0e00c783dd1cf81ffee1fa98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bc4af7b5961076e0e00c783dd1cf81ffee1fa98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2e069dabcd7e61e14bb7bceda6c19ec3afa358a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e069dabcd7e61e14bb7bceda6c19ec3afa358a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e069dabcd7e61e14bb7bceda6c19ec3afa358a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e069dabcd7e61e14bb7bceda6c19ec3afa358a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "924de0bd75a7f75df65d7d15f9d1587a2e794abf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/924de0bd75a7f75df65d7d15f9d1587a2e794abf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/924de0bd75a7f75df65d7d15f9d1587a2e794abf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3e91a79a649a1417f6f6657120b8296df1906517",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e069dabcd7e61e14bb7bceda6c19ec3afa358a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e069dabcd7e61e14bb7bceda6c19ec3afa358a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e2e069dabcd7e61e14bb7bceda6c19ec3afa358a",
        "patch": "@@ -133,7 +133,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n         }\n         CValidationState state;\n         if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL, false))\n-            throw JSONRPCError(RPC_INTERNAL_ERROR, strprintf(\"ProcessNewBlock: block not accepted: %s\", FormatStateMessage(state)));\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n "
      }
    ]
  },
  {
    "sha": "7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Yzk4Y2U1ODRlYzIzYmNkZGNiYThjZGIzM2VmYTY1NDcyMTJmNmVm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-02T15:04:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-09T19:21:45Z"
      },
      "message": "Remove pfrom parameter from ProcessNewBlock\n\nThis further decouples ProcessNewBlock from networking/peer logic.",
      "tree": {
        "sha": "4967bdd0c6147d73bc1512cbf79b8f24c07180e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4967bdd0c6147d73bc1512cbf79b8f24c07180e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2e069dabcd7e61e14bb7bceda6c19ec3afa358a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e069dabcd7e61e14bb7bceda6c19ec3afa358a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e069dabcd7e61e14bb7bceda6c19ec3afa358a"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 29,
      "deletions": 18
    },
    "files": [
      {
        "sha": "7b203cf62bcf59e0d006dc3a126c824f72bdb7c5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 12,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
        "patch": "@@ -3787,19 +3787,15 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool fMayBanPeerIfInvalid)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool *fNewBlock)\n {\n     {\n         LOCK(cs_main);\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n-        bool fNewBlock = false;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, dbp, &fNewBlock);\n-        if (pindex && pfrom) {\n-            mapBlockSource[pindex->GetBlockHash()] = std::make_pair(pfrom->GetId(), fMayBanPeerIfInvalid);\n-            if (fNewBlock) pfrom->nLastBlockTime = GetTime();\n-        }\n+        if (fNewBlock) *fNewBlock = false;\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, dbp, fNewBlock);\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret)\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n@@ -5914,22 +5910,29 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // updated, reject messages go out, etc.\n                 MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer\n                 fBlockRead = true;\n+                // mapBlockSource is only used for sending reject messages and DoS scores,\n+                // so the race between here and cs_main in ProcessNewBlock is fine.\n+                mapBlockSource.emplace(resp.blockhash, std::make_pair(pfrom->GetId(), false));\n             }\n         } // Don't hold cs_main when we call into ProcessNewBlock\n         if (fBlockRead) {\n             CValidationState state;\n+            bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n             // BIP 152 permits peers to relay compact blocks after validating\n             // the header only; we should not punish peers if the block turns\n             // out to be invalid.\n-            ProcessNewBlock(state, chainparams, pfrom, &block, true, NULL, false);\n+            ProcessNewBlock(state, chainparams, &block, true, NULL, &fNewBlock);\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n                 connman.PushMessage(pfrom, NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), block.GetHash());\n-            }\n+                LOCK(cs_main);\n+                mapBlockSource.erase(resp.blockhash);\n+            } else if (fNewBlock)\n+                pfrom->nLastBlockTime = GetTime();\n         }\n     }\n \n@@ -6093,13 +6096,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        const uint256 hash(block.GetHash());\n         {\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(block.GetHash());\n+            forceProcessing |= MarkBlockAsReceived(hash);\n+            // mapBlockSource is only used for sending reject messages and DoS scores,\n+            // so the race between here and cs_main in ProcessNewBlock is fine.\n+            mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n-        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL, true);\n+        bool fNewBlock = false;\n+        ProcessNewBlock(state, chainparams, &block, forceProcessing, NULL, &fNewBlock);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n@@ -6109,7 +6117,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n-        }\n+            LOCK(cs_main);\n+            mapBlockSource.erase(hash);\n+        } else if (fNewBlock)\n+            pfrom->nLastBlockTime = GetTime();\n \n     }\n "
      },
      {
        "sha": "5e5d083efa7f723c0085b36f00435eac92ec7876",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
        "patch": "@@ -217,13 +217,13 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * specific block passed to it has been checked for validity!\n  * \n  * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganization; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface (see validationinterface.h) - this will have its BlockChecked method called whenever *any* block completes validation.\n- * @param[in]   pfrom   The node which we are receiving the block from; it is added to mapBlockSource and may be penalised if the block is invalid.\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n+ * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool fMayBanPeerIfInvalid);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool* fNewBlock);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */"
      },
      {
        "sha": "d9fe9530a10c0c4020551ecebbd027e463daa0c3",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
        "patch": "@@ -132,7 +132,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             continue;\n         }\n         CValidationState state;\n-        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL, false))\n+        if (!ProcessNewBlock(state, Params(), pblock, true, NULL, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -757,7 +757,7 @@ UniValue submitblock(const JSONRPCRequest& request)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL, false);\n+    bool fAccepted = ProcessNewBlock(state, Params(), &block, true, NULL, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "e71a4b1ebc64344e0ac705fac0d7e69686824df0",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
        "patch": "@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL, false));\n+        BOOST_CHECK(ProcessNewBlock(state, chainparams, pblock, true, NULL, NULL));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }"
      },
      {
        "sha": "4440585c01cd311c0ce2ca4ea4fe6f07f8e7fd39",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c98ce584ec23bcddcba8cdb33efa6547212f6ef/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
        "patch": "@@ -127,7 +127,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     CValidationState state;\n-    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL, false);\n+    ProcessNewBlock(state, chainparams, &block, true, NULL, NULL);\n \n     CBlock result = block;\n     return result;"
      }
    ]
  },
  {
    "sha": "ae223576077448bd4ec250c73f5d8fe5e9a9ac7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTIyMzU3NjA3NzQ0OGJkNGVjMjUwYzczZjVkOGZlNWU5YTlhYzdk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-27T20:30:17Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-09T19:21:55Z"
      },
      "message": "Replace CValidationState param in ProcessNewBlock with BlockChecked",
      "tree": {
        "sha": "8b894f61a09b10dc25d987e695bd9ee85523312b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b894f61a09b10dc25d987e695bd9ee85523312b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c98ce584ec23bcddcba8cdb33efa6547212f6ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c98ce584ec23bcddcba8cdb33efa6547212f6ef"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 28,
      "deletions": 48
    },
    "files": [
      {
        "sha": "14923163fbf66b3bf64da1ca52fad3cab137909c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 30,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ae223576077448bd4ec250c73f5d8fe5e9a9ac7d",
        "patch": "@@ -3787,22 +3787,26 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool *fNewBlock)\n {\n     {\n         LOCK(cs_main);\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n+        CValidationState state;\n         bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, dbp, fNewBlock);\n         CheckBlockIndex(chainparams.GetConsensus());\n-        if (!ret)\n+        if (!ret) {\n+            GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED\", __func__);\n+        }\n     }\n \n     NotifyHeaderTip();\n \n+    CValidationState state; // Only used to report errors, not invalidity - ignore it\n     if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n@@ -5912,26 +5916,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 fBlockRead = true;\n                 // mapBlockSource is only used for sending reject messages and DoS scores,\n                 // so the race between here and cs_main in ProcessNewBlock is fine.\n+                // BIP 152 permits peers to relay compact blocks after validating\n+                // the header only; we should not punish peers if the block turns\n+                // out to be invalid.\n                 mapBlockSource.emplace(resp.blockhash, std::make_pair(pfrom->GetId(), false));\n             }\n         } // Don't hold cs_main when we call into ProcessNewBlock\n         if (fBlockRead) {\n-            CValidationState state;\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            // BIP 152 permits peers to relay compact blocks after validating\n-            // the header only; we should not punish peers if the block turns\n-            // out to be invalid.\n-            ProcessNewBlock(state, chainparams, &block, true, NULL, &fNewBlock);\n-            int nDoS;\n-            if (state.IsInvalid(nDoS)) {\n-                assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n-                connman.PushMessage(pfrom, NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n-                                   state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), block.GetHash());\n-                LOCK(cs_main);\n-                mapBlockSource.erase(resp.blockhash);\n-            } else if (fNewBlock)\n+            ProcessNewBlock(chainparams, &block, true, NULL, &fNewBlock);\n+            if (fNewBlock)\n                 pfrom->nLastBlockTime = GetTime();\n         }\n     }\n@@ -6090,7 +6086,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         LogPrint(\"net\", \"received block %s peer=%d\\n\", block.GetHash().ToString(), pfrom->id);\n \n-        CValidationState state;\n         // Process all blocks from whitelisted peers, even if not requested,\n         // unless we're still syncing with the network.\n         // Such an unrequested block may still be processed, subject to the\n@@ -6107,21 +6102,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(state, chainparams, &block, forceProcessing, NULL, &fNewBlock);\n-        int nDoS;\n-        if (state.IsInvalid(nDoS)) {\n-            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n-            connman.PushMessage(pfrom, NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n-                               state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), block.GetHash());\n-            if (nDoS > 0) {\n-                LOCK(cs_main);\n-                Misbehaving(pfrom->GetId(), nDoS);\n-            }\n-            LOCK(cs_main);\n-            mapBlockSource.erase(hash);\n-        } else if (fNewBlock)\n+        ProcessNewBlock(chainparams, &block, forceProcessing, NULL, &fNewBlock);\n+        if (fNewBlock)\n             pfrom->nLastBlockTime = GetTime();\n-\n     }\n \n "
      },
      {
        "sha": "4a589a163daad1e35d522215c916c721b373706d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ae223576077448bd4ec250c73f5d8fe5e9a9ac7d",
        "patch": "@@ -215,15 +215,21 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n+ *\n+ * If you want to *possibly* get feedback on whether pblock is valid, you must\n+ * install a CValidationInterface (see validationinterface.h) - this will have\n+ * its BlockChecked method called whenever *any* block completes validation.\n+ *\n+ * Note that we guarantee that either the proof-of-work is valid on pblock, or\n+ * (and possibly also) BlockChecked will have been called.\n  * \n- * @param[out]  state   This may be set to an Error state if any error occurred processing it, including during validation/connection/etc of otherwise unrelated blocks during reorganization; or it may be set to an Invalid state if pblock is itself invalid (but this is not guaranteed even when the block is checked). If you want to *possibly* get feedback on whether pblock is valid, you must also install a CValidationInterface (see validationinterface.h) - this will have its BlockChecked method called whenever *any* block completes validation.\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, bool* fNewBlock);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */"
      },
      {
        "sha": "ad545bdf0d102d664b84979d3a5520673b37cc90",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ae223576077448bd4ec250c73f5d8fe5e9a9ac7d",
        "patch": "@@ -131,8 +131,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n         if (pblock->nNonce == nInnerLoopCount) {\n             continue;\n         }\n-        CValidationState state;\n-        if (!ProcessNewBlock(state, Params(), pblock, true, NULL, NULL))\n+        if (!ProcessNewBlock(Params(), pblock, true, NULL, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -754,24 +753,19 @@ UniValue submitblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, Params(), &block, true, NULL, NULL);\n+    bool fAccepted = ProcessNewBlock(Params(), &block, true, NULL, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {\n         if (fAccepted && !sc.found)\n             return \"duplicate-inconclusive\";\n         return \"duplicate\";\n     }\n-    if (fAccepted)\n-    {\n-        if (!sc.found)\n-            return \"inconclusive\";\n-        state = sc.state;\n-    }\n-    return BIP22ValidationResult(state);\n+    if (!sc.found)\n+        return \"inconclusive\";\n+    return BIP22ValidationResult(sc.state);\n }\n \n UniValue estimatefee(const JSONRPCRequest& request)"
      },
      {
        "sha": "1ef70c343c3ecb4cff863db0f09e0ccc7e30a83d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=ae223576077448bd4ec250c73f5d8fe5e9a9ac7d",
        "patch": "@@ -222,9 +222,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n-        CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, chainparams, pblock, true, NULL, NULL));\n-        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK(ProcessNewBlock(chainparams, pblock, true, NULL, NULL));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "3f7416f23f99dbf1df63e7720e72030bc5987282",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae223576077448bd4ec250c73f5d8fe5e9a9ac7d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ae223576077448bd4ec250c73f5d8fe5e9a9ac7d",
        "patch": "@@ -126,8 +126,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n-    CValidationState state;\n-    ProcessNewBlock(state, chainparams, &block, true, NULL, NULL);\n+    ProcessNewBlock(chainparams, &block, true, NULL, NULL);\n \n     CBlock result = block;\n     return result;"
      }
    ]
  }
]