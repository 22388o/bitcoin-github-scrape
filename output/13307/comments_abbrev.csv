achow101,2018-05-23T03:24:21Z,cc @Xekyo @instagibbs ,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-391208431,391208431,
instagibbs,2018-06-04T23:02:29Z,Some thoughts.,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-394527392,394527392,
achow101,2018-06-05T05:33:02Z,">""Calculate the transaction fees"" <--- this commit probably needs more description, not sure what it's doing.\n\nReworded, hopefully it's better.",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-394586870,394586870,
Empact,2018-06-08T06:19:11Z,"nit: Somewhat better to revert the merge commit 9552dfb rather than the 2 pr commits, to be explicit that the whole PR was reverted (and which one).",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-395659569,395659569,
achow101,2018-06-08T23:18:03Z,"> nit: Somewhat better to revert the merge commit 9552dfb rather than the 2 pr commits, to be explicit that the whole PR was reverted (and which one).\n\nDone",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-395917292,395917292,
achow101,2018-06-10T02:04:41Z,I'm not quite sure what is causing the travis failure.,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-396013717,396013717,
achow101,2018-06-11T19:02:13Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-396350782,396350782,
achow101,2018-06-12T19:01:09Z,I fixed the test failure.,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-396698373,396698373,
Xekyo,2018-06-18T01:04:42Z,"There are a few commits in your PR that obsolete previous changes, I only realized that after going through them commit by commit. You may want to rebase differently to tidy that up.",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-397919390,397919390,
achow101,2018-06-18T19:49:05Z,"I squashed down a few commits, hopefully that will make the code easier to review.",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-398173549,398173549,
achow101,2018-06-20T18:18:39Z,I have done some simulations of this strategy along with a few other strategies of different effective value filtering. Results here: https://gist.github.com/achow101/242470486265d3f21adab08f65b9102c,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-398847615,398847615,
instagibbs,2018-06-20T18:25:15Z,"Takeaway from the simulations is that filtering out negative effective\nvalues seemingly does near-best in utxo size and the best in fees overall.\nLatter point is unexpected.\n\nOn Wed, Jun 20, 2018 at 2:20 PM Andrew Chow <notifications@github.com>\nwrote:\n\n> I have done some simulations of this strategy along with a few other\n> strategies of different effective value filtering. Results here:\",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-398849688,398849688,
achow101,2018-06-20T18:29:21Z,"The main issue here is the minimum change. SRD currently does not target a minimum change which can result in very small, near dust, change outputs. So the question is really what we should target as min change.",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-398850906,398850906,
achow101,2018-07-03T19:44:43Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-402271812,402271812,
sipa,2018-07-03T23:03:32Z,"As suggested on https://iohk.io/blog/self-organisation-in-coin-selection/ it may be worth it to aim for change up to twice the amount we're trying to send, to avoid grinding down change too much.\n\nOf course, that doesn't work whenever the total (effective) amount in the wallet is less than twice the amount we're trying to send. A reasonably simple function to reconcile the two is C = P*(1 - P/",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-402315996,402315996,
achow101,2018-07-06T02:32:01Z,"Using @sipa's function, I have found though simulations that the smallest change created is much larger than what simple SRD produces. However the problem with a higher mean number of UTXOs persists and is slightly worse with this modification. But fees are still the same, and we are unlikely to be grinding things into dust. The question then is are we okay with having more UTXOs or should we atte",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-402907532,402907532,
achow101,2018-07-07T00:38:38Z,Fixed the test failure.,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-403176499,403176499,
achow101,2018-08-17T21:15:09Z,Rebased,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-413990271,413990271,
DrahtBot,2018-09-07T18:53:31Z,<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #14156 ([WIP] refactor: Make explicit CMutableTransaction -> CTransaction conversion. by lucash-dev)\n* #13558 (Drop unused GetType() from CSizeComputer by Empact)\n* #13546 (wallet: Avoid potential use of uninitialized value bnb_used in CWallet::CreateTransaction(...) by practicalsw,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-419533040,419533040,
DrahtBot,2018-09-11T08:38:52Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-420194533,420194533,
DrahtBot,2018-12-12T19:23:21Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/13307#issuecomment-446711699,446711699,
Empact,2018-05-23T10:30:52Z,"Could return true here, return false if the loop exhausts, to avoid duplicating the condition.",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r190198065,190198065,src/wallet/coinselection.cpp
Empact,2018-05-23T10:36:35Z,Could collapse this to boolean fallback at this point.,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r190199488,190199488,src/wallet/wallet.cpp
Empact,2018-05-23T10:56:19Z,`eligibilty_filter` typo,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r190204215,190204215,src/wallet/wallet.h
achow101,2018-05-23T16:56:59Z,Done,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r190324598,190324598,src/wallet/coinselection.cpp
achow101,2018-05-23T16:57:03Z,Done,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r190324614,190324614,src/wallet/wallet.cpp
achow101,2018-05-23T16:57:07Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r190324646,190324646,src/wallet/wallet.h
instagibbs,2018-06-04T22:20:24Z,"`non_input_fees`? It's not ""not fees"", rather ""non-input"". Easier for me to read.",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r192897455,192897455,src/wallet/coinselection.cpp
instagibbs,2018-06-04T22:29:43Z,"I think this new logic means that non-BnB will be tried more often? Instead of trying all variants of BnB(6 confirms, 1 confirm, small chain, etc), we seem to be trying 6 confirms for BnB, then 6 confirms for non-BnB",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r192899180,192899180,src/wallet/wallet.cpp
instagibbs,2018-06-04T22:46:05Z,maybe rename to `first_output`,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r192901837,192901837,src/wallet/wallet.cpp
instagibbs,2018-06-04T22:58:58Z,parenthesis please,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r192904043,192904043,src/wallet/wallet.cpp
achow101,2018-06-05T05:31:48Z,Done,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r192949852,192949852,src/wallet/coinselection.cpp
achow101,2018-06-05T05:32:38Z,"Hmm, yes, that appears to be what is happening. I guess this depends on whether we want to select an exact match for coins with less confirmatoins, or whether we want confirmations over exact match.",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r192949968,192949968,src/wallet/wallet.cpp
achow101,2018-06-05T05:32:45Z,Done,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r192949973,192949973,src/wallet/wallet.cpp
achow101,2018-06-05T05:32:49Z,Done,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r192949987,192949987,src/wallet/wallet.cpp
Empact,2018-06-08T06:19:39Z,"nit: Better to document in the header, and use doxygen comment `/**`",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r193961645,193961645,src/wallet/coinselection.cpp
Empact,2018-06-08T06:20:52Z,`_bnb` probably no longer relevant,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r193961795,193961795,src/wallet/test/coinselector_tests.cpp
Empact,2018-06-08T06:21:30Z,Same,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r193961871,193961871,src/wallet/test/coinselector_tests.cpp
Empact,2018-06-08T06:29:59Z,nit: explicit precedence would be nice here: `(out.nInputBytes < 0 || !use_effective)`,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r193963110,193963110,src/wallet/wallet.cpp
Empact,2018-06-08T06:30:20Z,nit: whitespace,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r193963181,193963181,src/wallet/wallet.cpp
Empact,2018-06-08T06:55:08Z,nit: Better to squash this change into the commit that calls for it,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r193967475,193967475,src/wallet/coinselection.h
achow101,2018-06-08T23:17:16Z,Done,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194201315,194201315,src/wallet/coinselection.cpp
achow101,2018-06-08T23:17:24Z,Removed here and elsewhere,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194201332,194201332,src/wallet/test/coinselector_tests.cpp
achow101,2018-06-08T23:17:38Z,I thought I did this earlier. Must have gotten lost in a rebase. Fixed.,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194201361,194201361,src/wallet/wallet.cpp
achow101,2018-06-08T23:17:43Z,Done,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194201367,194201367,src/wallet/wallet.cpp
achow101,2018-06-08T23:17:48Z,Done,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194201374,194201374,src/wallet/coinselection.h
sipa,2018-06-09T17:49:44Z,"Two comments:\n* Requesting new entropy for each element being sorted may be slow (each call to `GetRandInt` invokes OpenSSL for randomness) (this also applies to the code you copied, but you're going to remove that anyway).\n* It's overkill to permute all elements, as you're likely only going to use a few.\n\nFor the first, create a `FastRandomContext` and use that in `std::shuffle` (rather t",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194234815,194234815,src/wallet/coinselection.cpp
sipa,2018-06-09T18:03:18Z,"This is a good point. Perhaps a solution is to add a `use_bnb` argument to `SelectCoinsMinConf` (but not as part `CoinSelectionParams`), and then have a sequence of attempts with and without use_bnb in `SelectCoins`?",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194235133,194235133,src/wallet/wallet.cpp
sipa,2018-06-09T18:07:17Z,Typo: decrase,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194235208,194235208,src/wallet/wallet.cpp
achow101,2018-06-09T22:01:03Z,Done,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194239951,194239951,src/wallet/coinselection.cpp
achow101,2018-06-09T22:01:12Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194239955,194239955,src/wallet/wallet.cpp
sipa,2018-06-09T23:57:31Z,Travis fails because of `size` (instead of `size()`).,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194241690,194241690,src/wallet/coinselection.cpp
achow101,2018-06-10T00:16:41Z,Oops.,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194241896,194241896,src/wallet/coinselection.cpp
Xekyo,2018-06-12T15:33:59Z,"What you're calling `target_value` here is not actually the value you're targeting. How about `recipient_amount` or `payload`? Or add the `payload`, `output_fees` and `tx_overhead_fees` into a `selection_target` per selection style to differentiate between change/no-change?",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r194786515,194786515,src/wallet/coinselection.cpp
instagibbs,2018-06-14T19:32:08Z,I prefer the behavior in master due to privacy reasons of change-less transactions.,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r195544821,195544821,src/wallet/wallet.cpp
Empact,2018-06-14T21:58:50Z,Doesn't look changed fyi.,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r195584208,195584208,src/wallet/wallet.cpp
achow101,2018-06-14T22:22:38Z,How about now?,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r195589247,195589247,src/wallet/wallet.cpp
achow101,2018-06-16T01:52:06Z,I have implemented this change.,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r195890618,195890618,src/wallet/wallet.cpp
Xekyo,2018-06-18T01:07:04Z,"Theoretically, SRD could also produce a result without a change. You could fold the `non_input_fees` into the `target_value`, and if you don't find a perfect match, select more until you have minChange + fee for one output more than target.",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r195948537,195948537,src/wallet/coinselection.cpp
Xekyo,2018-06-18T01:09:14Z,use_effecitve has a typo.,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r195948634,195948634,src/wallet/wallet.h
Xekyo,2018-06-18T01:10:57Z,"Shouldn't this be segwit sensitive? Hex length is only a valid indicator of weight for non-segwit transactions. I guess this test only has legacy transactions?\n\nSince you use the same calculation multiple times, you might want to make a helper function that only takes fundedTx and mempool_tx as params and returns the feeDelta.",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r195948711,195948711,test/functional/rpc_fundrawtransaction.py
achow101,2018-06-18T19:29:28Z,"I don't think that this distinction matters. If SRD produces a result without change, the rest of the code will treat it as if BnB had been used, there is no difference for change or no change. I don't think it is necessary to target a min change or include the change output's fees in the target.",https://github.com/bitcoin/bitcoin/pull/13307#discussion_r196197285,196197285,src/wallet/coinselection.cpp
achow101,2018-06-18T19:36:35Z,The test only uses legacy addresses. I don't think it is necessary to make a helper function for this.,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r196199120,196199120,test/functional/rpc_fundrawtransaction.py
achow101,2018-06-18T19:48:22Z,Fixed,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r196202264,196202264,src/wallet/wallet.h
achow101,2018-06-18T19:48:47Z,I renamed it to `recipient_amount`. I don't think there needs to be any differentiation between change and no change.,https://github.com/bitcoin/bitcoin/pull/13307#discussion_r196202409,196202409,src/wallet/coinselection.cpp
