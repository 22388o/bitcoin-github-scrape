[
  {
    "sha": "afd2f777bdb1ff795396c33382fe5b93ce179594",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmQyZjc3N2JkYjFmZjc5NTM5NmMzMzM4MmZlNWI5M2NlMTc5NTk0",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-16T21:58:00Z"
      },
      "committer": {
        "name": "whythat",
        "email": "whythat@protonmail.com",
        "date": "2018-10-16T22:18:34Z"
      },
      "message": "rpcwallet: implement 'listsentbyaddress' RPC",
      "tree": {
        "sha": "2c1a5e9baf1d7a784e73f19ee17aa0714c773c96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c1a5e9baf1d7a784e73f19ee17aa0714c773c96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd2f777bdb1ff795396c33382fe5b93ce179594",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd2f777bdb1ff795396c33382fe5b93ce179594",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afd2f777bdb1ff795396c33382fe5b93ce179594",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd2f777bdb1ff795396c33382fe5b93ce179594/comments",
    "author": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rodentrabies",
      "id": 7646953,
      "node_id": "MDQ6VXNlcjc2NDY5NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7646953?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rodentrabies",
      "html_url": "https://github.com/rodentrabies",
      "followers_url": "https://api.github.com/users/rodentrabies/followers",
      "following_url": "https://api.github.com/users/rodentrabies/following{/other_user}",
      "gists_url": "https://api.github.com/users/rodentrabies/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rodentrabies/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rodentrabies/subscriptions",
      "organizations_url": "https://api.github.com/users/rodentrabies/orgs",
      "repos_url": "https://api.github.com/users/rodentrabies/repos",
      "events_url": "https://api.github.com/users/rodentrabies/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rodentrabies/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23419e4c4939fe557e37ec9d17c15c6eb73febc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23419e4c4939fe557e37ec9d17c15c6eb73febc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23419e4c4939fe557e37ec9d17c15c6eb73febc6"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 99,
      "deletions": 18
    },
    "files": [
      {
        "sha": "2899fa049da222d3bf3ad865495d9a3402cea683",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 99,
        "deletions": 18,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd2f777bdb1ff795396c33382fe5b93ce179594/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd2f777bdb1ff795396c33382fe5b93ce179594/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=afd2f777bdb1ff795396c33382fe5b93ce179594",
        "patch": "@@ -1121,7 +1121,8 @@ struct tallyitem\n     }\n };\n \n-static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+\n+static UniValue ListByAddress(CWallet * const pwallet, const UniValue& params, bool by_label, bool received) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -1160,26 +1161,55 @@ static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bo\n         if (nDepth < nMinDepth)\n             continue;\n \n-        for (const CTxOut& txout : wtx.tx->vout)\n+        if (received)\n         {\n-            CTxDestination address;\n-            if (!ExtractDestination(txout.scriptPubKey, address))\n-                continue;\n+            for (const CTxOut& txout : wtx.tx->vout)\n+            {\n+                CTxDestination address;\n+                if (!ExtractDestination(txout.scriptPubKey, address))\n+                    continue;\n+\n+                if (has_filtered_address && !(filtered_address == address)) {\n+                    continue;\n+                }\n+\n+                isminefilter mine = IsMine(*pwallet, address);\n+                if(!(mine & filter))\n+                    continue;\n \n-            if (has_filtered_address && !(filtered_address == address)) {\n-                continue;\n+                tallyitem& item = mapTally[address];\n+                item.nAmount += txout.nValue;\n+                item.nConf = std::min(item.nConf, nDepth);\n+                item.txids.push_back(wtx.GetHash());\n+                if (mine & ISMINE_WATCH_ONLY)\n+                    item.fIsWatchonly = true;\n             }\n+        }\n+        else\n+        {\n+            for (const CTxIn& txin : wtx.tx->vin)\n+            {\n+                const COutPoint& prevout = txin.prevout;\n+                const CTxOut& txout = pwallet->GetWalletTx(prevout.hash)->tx->vout[prevout.n];\n+                CTxDestination address;\n+                if (!ExtractDestination(txout.scriptPubKey, address))\n+                    continue;\n+\n+                if (has_filtered_address && !(filtered_address == address)) {\n+                    continue;\n+                }\n \n-            isminefilter mine = IsMine(*pwallet, address);\n-            if(!(mine & filter))\n-                continue;\n+                isminefilter mine = IsMine(*pwallet, address);\n+                if(!(mine & filter))\n+                    continue;\n \n-            tallyitem& item = mapTally[address];\n-            item.nAmount += txout.nValue;\n-            item.nConf = std::min(item.nConf, nDepth);\n-            item.txids.push_back(wtx.GetHash());\n-            if (mine & ISMINE_WATCH_ONLY)\n-                item.fIsWatchonly = true;\n+                tallyitem& item = mapTally[address];\n+                item.nAmount += txout.nValue;\n+                item.nConf = std::min(item.nConf, nDepth);\n+                item.txids.push_back(wtx.GetHash());\n+                if (mine & ISMINE_WATCH_ONLY)\n+                    item.fIsWatchonly = true;\n+            }\n         }\n     }\n \n@@ -1265,6 +1295,56 @@ static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bo\n     return ret;\n }\n \n+static UniValue listsentbyaddress(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"listsentbyaddress ( minconf include_empty include_watchonly address_filter )\\n\"\n+            \"\\nList balances by receiving address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n+            \"2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't sent any payments.\\n\"\n+            \"3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\\n\"\n+            \"4. address_filter    (string, optional) If present, only return information on this address.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returned if imported addresses were involved in transaction\\n\"\n+            \"    \\\"address\\\" : \\\"sendingaddress\\\",    (string) The sending address\\n\"\n+            \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in \" + CURRENCY_UNIT + \" sent by the address\\n\"\n+            \"    \\\"confirmations\\\" : n,               (numeric) The number of confirmations of the most recent transaction included\\n\"\n+            \"    \\\"label\\\" : \\\"label\\\",               (string) The label of the sending address. The default label is \\\"\\\".\\n\"\n+            \"    \\\"txids\\\": [\\n\"\n+            \"       \\\"txid\\\",                         (string) The ids of transactions sent by the address \\n\"\n+            \"       ...\\n\"\n+            \"    ]\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n+            \"]\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"listsentbyaddress\", \"\")\n+            + HelpExampleCli(\"listsentbyaddress\", \"6 true\")\n+            + HelpExampleRpc(\"listsentbyaddress\", \"6, true, true\")\n+            + HelpExampleRpc(\"listsentbyaddress\", \"6, true, true, \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\"\")\n+        );\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    pwallet->BlockUntilSyncedToCurrentChain();\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    return ListByAddress(pwallet, request.params, false, false);\n+}\n+\n static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -1312,7 +1392,7 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    return ListReceived(pwallet, request.params, false);\n+    return ListByAddress(pwallet, request.params, false, true);\n }\n \n static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n@@ -1356,7 +1436,7 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    return ListReceived(pwallet, request.params, true);\n+    return ListByAddress(pwallet, request.params, true, true);\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -4091,6 +4171,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n     { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n+    { \"wallet\",             \"listsentbyaddress\",                &listsentbyaddress,             {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },"
      }
    ]
  }
]