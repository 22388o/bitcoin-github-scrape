[
  {
    "sha": "5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjU5YzcyYTc2OWViYTMyYWFiYjRlNjFkNzdlOWY2ZWY0Y2U5YTBk",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-20T16:46:52Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-20T17:52:14Z"
      },
      "message": "Try to use posix_fadvise with CBufferedFile\n\nThis primarily affects blocks when bitcoin is launched with -reindex, as\nthat causes the block files to be loaded as CBufferedFile objects one at\na time as the reindex progresses.",
      "tree": {
        "sha": "6351ff235d361966726421b9137cfc41c59e3ad3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6351ff235d361966726421b9137cfc41c59e3ad3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 59,
      "deletions": 17
    },
    "files": [
      {
        "sha": "e10fb8d14617c376dccd43dcc99c969ef3bee130",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <support/allocators/zeroafterfree.h>\n #include <serialize.h>\n+#include <util.h>\n \n #include <algorithm>\n #include <assert.h>\n@@ -593,10 +594,8 @@ class CBufferedFile\n \n public:\n     CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n-        nType(nTypeIn), nVersion(nVersionIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n-    {\n-        src = fileIn;\n-    }\n+        nType(nTypeIn), nVersion(nVersionIn), src(AdviseSequential(fileIn)), nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n+    {}\n \n     ~CBufferedFile()\n     {\n@@ -613,7 +612,7 @@ class CBufferedFile\n     void fclose()\n     {\n         if (src) {\n-            ::fclose(src);\n+            CloseAndDiscard(src);\n             src = nullptr;\n         }\n     }"
      },
      {
        "sha": "15d47039dd2e0ad866e0c2523845e4eabb51651e",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 12,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d",
        "patch": "@@ -19,16 +19,6 @@\n #endif\n \n #ifndef WIN32\n-// for posix_fallocate\n-#ifdef __linux__\n-\n-#ifdef _POSIX_C_SOURCE\n-#undef _POSIX_C_SOURCE\n-#endif\n-\n-#define _POSIX_C_SOURCE 200112L\n-\n-#endif // __linux__\n \n #include <algorithm>\n #include <fcntl.h>\n@@ -798,8 +788,9 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n         fcntl(fileno(file), F_PREALLOCATE, &fst);\n     }\n     ftruncate(fileno(file), fst.fst_length);\n-#elif defined(__linux__)\n-    // Version using posix_fallocate\n+#elif _POSIX_C_SOURCE >= 200112L\n+    // Use posix_fallocate to advise the kernel how much data we have to write,\n+    // if this system supports it.\n     off_t nEndPos = (off_t)offset + length;\n     posix_fallocate(fileno(file), 0, nEndPos);\n #else\n@@ -817,6 +808,49 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n #endif\n }\n \n+FILE* AdviseSequential(FILE *file) {\n+#if _POSIX_C_SOURCE >= 200112L\n+    // Since this whole thing is advisory anyway, we can ignore any errors\n+    // encountered up to and including the posix_fadvise call. However, we must\n+    // rewind the file to the appropriate position if we've changed the seek\n+    // offset.\n+    if (file == nullptr)\n+        return nullptr;\n+    int fd = fileno(file);\n+    if (fd == -1)\n+        return file;\n+    off_t start = lseek(fd, 0, SEEK_CUR);\n+    if (start == -1)\n+        return file;\n+    off_t end = lseek(fd, 0, SEEK_END);\n+    if (end != -1) {\n+        posix_fadvise(fd, start, end - start, POSIX_FADV_WILLNEED);\n+        posix_fadvise(fd, start, end - start, POSIX_FADV_SEQUENTIAL);\n+    }\n+    lseek(fd, start, SEEK_SET);\n+#endif\n+    return file;\n+}\n+\n+int CloseAndDiscard(FILE *file) {\n+#if _POSIX_C_SOURCE >= 200112L\n+    // Ignore any errors up to and including the posix_fadvise call since it's\n+    // advisory.\n+    if (file != nullptr) {\n+        off_t end;\n+        int fd = fileno(file);\n+        if (fd == -1)\n+            goto close;\n+        end = lseek(fd, 0, SEEK_END);\n+        if (end == -1)\n+            goto close;\n+        posix_fadvise(fd, 0, end, POSIX_FADV_DONTNEED);\n+    }\n+#endif\n+ close:\n+    return fclose(file);\n+}\n+\n void ShrinkDebugFile()\n {\n     // Amount of debug.log to save at end when shrinking (must fit in memory)"
      },
      {
        "sha": "30a5283093c516e164321c7c67b3298d77068d02",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=5259c72a769eba32aabb4e61d77e9f6ef4ce9a0d",
        "patch": "@@ -175,6 +175,15 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n \n+//! Return the original FILE* unchanged. On POSIX systems that support it,\n+//! also advise the kernel that the file will be accessed sequentially.\n+FILE* AdviseSequential(FILE *file);\n+\n+//! Close a file and return the result of fclose(). On POSIX systems that\n+//! support it, advise the kernel to remove the file contents from the page\n+//! cache (which can help on memory-constrained systems).\n+int CloseAndDiscard(FILE *file);\n+\n /** Release all directory locks. This is used for unit testing only, at runtime\n  * the global destructor will take care of the locks.\n  */"
      }
    ]
  }
]