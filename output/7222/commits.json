[
  {
    "sha": "eaa8d2754b48b62cdd07255fc3028feecad0c095",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWE4ZDI3NTRiNDhiNjJjZGQwNzI1NWZjMzAyOGZlZWNhZDBjMDk1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-12-16T19:57:54Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-01-19T13:30:04Z"
      },
      "message": "RPC: indicate which transactions are replaceable\n\nAdd \"bip125-replaceable\" output field to listtransactions and gettransaction\nwhich indicates if an unconfirmed transaction, or any unconfirmed parent, is\nsignaling opt-in RBF according to BIP 125.",
      "tree": {
        "sha": "b8d312d93e9ec123af0ba08034ab5df18ce6f2e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8d312d93e9ec123af0ba08034ab5df18ce6f2e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaa8d2754b48b62cdd07255fc3028feecad0c095",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaa8d2754b48b62cdd07255fc3028feecad0c095",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaa8d2754b48b62cdd07255fc3028feecad0c095",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaa8d2754b48b62cdd07255fc3028feecad0c095/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9fd4c2884849bc667da3da8bf5f78f33dd01f1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9fd4c2884849bc667da3da8bf5f78f33dd01f1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9fd4c2884849bc667da3da8bf5f78f33dd01f1c"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 199,
      "deletions": 0
    },
    "files": [
      {
        "sha": "45ede8f040de688ea880332ab5e155774e0b2f79",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa8d2754b48b62cdd07255fc3028feecad0c095/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa8d2754b48b62cdd07255fc3028feecad0c095/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=eaa8d2754b48b62cdd07255fc3028feecad0c095",
        "patch": "@@ -7,7 +7,15 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.mininode import CTransaction\n+import cStringIO\n+import binascii\n \n+def txFromHex(hexstring):\n+    tx = CTransaction()\n+    f = cStringIO.StringIO(binascii.unhexlify(hexstring))\n+    tx.deserialize(f)\n+    return tx\n \n def check_array_result(object_array, to_match, expected):\n     \"\"\"\n@@ -108,6 +116,107 @@ def run_test(self):\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.1\")},\n                            {\"txid\":txid, \"account\" : \"watchonly\"} )\n \n+        self.run_rbf_opt_in_test()\n+\n+    # Check that the opt-in-rbf flag works properly, for sent and received\n+    # transactions.\n+    def run_rbf_opt_in_test(self):\n+        # Check whether a transaction signals opt-in RBF itself\n+        def is_opt_in(node, txid):\n+            rawtx = node.getrawtransaction(txid, 1)\n+            for x in rawtx[\"vin\"]:\n+                if x[\"sequence\"] < 0xfffffffe:\n+                    return True\n+            return False\n+\n+        # Find an unconfirmed output matching a certain txid\n+        def get_unconfirmed_utxo_entry(node, txid_to_match):\n+            utxo = node.listunspent(0, 0)\n+            for i in utxo:\n+                if i[\"txid\"] == txid_to_match:\n+                    return i\n+            return None\n+\n+        # 1. Chain a few transactions that don't opt-in.\n+        txid_1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        assert(not is_opt_in(self.nodes[0], txid_1))\n+        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n+        sync_mempools(self.nodes)\n+        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\":\"no\"})\n+\n+        # Tx2 will build off txid_1, still not opting in to RBF.\n+        utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_1)\n+\n+        # Create tx2 using createrawtransaction\n+        inputs = [{\"txid\":utxo_to_use[\"txid\"], \"vout\":utxo_to_use[\"vout\"]}]\n+        outputs = {self.nodes[0].getnewaddress(): 0.999}\n+        tx2 = self.nodes[1].createrawtransaction(inputs, outputs)\n+        tx2_signed = self.nodes[1].signrawtransaction(tx2)[\"hex\"]\n+        txid_2 = self.nodes[1].sendrawtransaction(tx2_signed)\n+\n+        # ...and check the result\n+        assert(not is_opt_in(self.nodes[1], txid_2))\n+        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n+        sync_mempools(self.nodes)\n+        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\":\"no\"})\n+\n+        # Tx3 will opt-in to RBF\n+        utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[0], txid_2)\n+        inputs = [{\"txid\": txid_2, \"vout\":utxo_to_use[\"vout\"]}]\n+        outputs = {self.nodes[1].getnewaddress(): 0.998}\n+        tx3 = self.nodes[0].createrawtransaction(inputs, outputs)\n+        tx3_modified = txFromHex(tx3)\n+        tx3_modified.vin[0].nSequence = 0\n+        tx3 = binascii.hexlify(tx3_modified.serialize()).decode('utf-8')\n+        tx3_signed = self.nodes[0].signrawtransaction(tx3)['hex']\n+        txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n+\n+        assert(is_opt_in(self.nodes[0], txid_3))\n+        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n+        sync_mempools(self.nodes)\n+        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\":\"yes\"})\n+\n+        # Tx4 will chain off tx3.  Doesn't signal itself, but depends on one\n+        # that does.\n+        utxo_to_use = get_unconfirmed_utxo_entry(self.nodes[1], txid_3)\n+        inputs = [{\"txid\": txid_3, \"vout\":utxo_to_use[\"vout\"]}]\n+        outputs = {self.nodes[0].getnewaddress(): 0.997}\n+        tx4 = self.nodes[1].createrawtransaction(inputs, outputs)\n+        tx4_signed = self.nodes[1].signrawtransaction(tx4)[\"hex\"]\n+        txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n+\n+        assert(not is_opt_in(self.nodes[1], txid_4))\n+        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n+        sync_mempools(self.nodes)\n+        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"yes\"})\n+\n+        # Replace tx3, and check that tx4 becomes unknown\n+        tx3_b = tx3_modified\n+        tx3_b.vout[0].nValue -= 0.004*100000000 # bump the fee\n+        tx3_b = binascii.hexlify(tx3_b.serialize()).decode('utf-8')\n+        tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n+        txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n+        assert(is_opt_in(self.nodes[0], txid_3b))\n+\n+        check_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n+        sync_mempools(self.nodes)\n+        check_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\":\"unknown\"})\n+\n+        # Check gettransaction as well:\n+        for n in self.nodes[0:2]:\n+            assert_equal(n.gettransaction(txid_1)[\"bip125-replaceable\"], \"no\")\n+            assert_equal(n.gettransaction(txid_2)[\"bip125-replaceable\"], \"no\")\n+            assert_equal(n.gettransaction(txid_3)[\"bip125-replaceable\"], \"yes\")\n+            assert_equal(n.gettransaction(txid_3b)[\"bip125-replaceable\"], \"yes\")\n+            assert_equal(n.gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n+\n+        # After mining a transaction, it's no longer BIP125-replaceable\n+        self.nodes[0].generate(1)\n+        assert(txid_3b not in self.nodes[0].getrawmempool())\n+        assert_equal(self.nodes[0].gettransaction(txid_3b)[\"bip125-replaceable\"], \"no\")\n+        assert_equal(self.nodes[0].gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n+\n+\n if __name__ == '__main__':\n     ListTransactionsTest().main()\n "
      },
      {
        "sha": "5d7fbb13d2288eea8a910202ec55daf47fbf7b86",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa8d2754b48b62cdd07255fc3028feecad0c095/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa8d2754b48b62cdd07255fc3028feecad0c095/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=eaa8d2754b48b62cdd07255fc3028feecad0c095",
        "patch": "@@ -122,6 +122,7 @@ BITCOIN_CORE_H = \\\n   noui.h \\\n   policy/fees.h \\\n   policy/policy.h \\\n+  policy/rbf.h \\\n   pow.h \\\n   prevector.h \\\n   primitives/block.h \\\n@@ -239,6 +240,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/wallet.cpp \\\n   wallet/wallet_ismine.cpp \\\n   wallet/walletdb.cpp \\\n+  policy/rbf.cpp \\\n   $(BITCOIN_CORE_H)\n \n # crypto primitives library"
      },
      {
        "sha": "98b1a1ba4c735c23cf1be2a62cc4faf0b16dd932",
        "filename": "src/policy/rbf.cpp",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa8d2754b48b62cdd07255fc3028feecad0c095/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa8d2754b48b62cdd07255fc3028feecad0c095/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=eaa8d2754b48b62cdd07255fc3028feecad0c095",
        "patch": "@@ -0,0 +1,46 @@\n+// Copyright (c) 2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"policy/rbf.h\"\n+\n+bool SignalsOptInRBF(const CTransaction &tx)\n+{\n+    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        if (txin.nSequence < std::numeric_limits<unsigned int>::max()-1) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool IsRBFOptIn(const CTxMemPoolEntry &entry, CTxMemPool &pool)\n+{\n+    AssertLockHeld(pool.cs);\n+\n+    CTxMemPool::setEntries setAncestors;\n+\n+    // First check the transaction itself.\n+    if (SignalsOptInRBF(entry.GetTx())) {\n+        return true;\n+    }\n+\n+    // If this transaction is not in our mempool, then we can't be sure\n+    // we will know about all its inputs.\n+    if (!pool.exists(entry.GetTx().GetHash())) {\n+        throw std::runtime_error(\"Cannot determine RBF opt-in signal for non-mempool transaction\\n\");\n+    }\n+\n+    // If all the inputs have nSequence >= maxint-1, it still might be\n+    // signaled for RBF if any unconfirmed parents have signaled.\n+    uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n+    std::string dummy;\n+    pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n+\n+    BOOST_FOREACH(CTxMemPool::txiter it, setAncestors) {\n+        if (SignalsOptInRBF(it->GetTx())) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "925ce0d9bd14ae8234f8387273f1338ae096219a",
        "filename": "src/policy/rbf.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa8d2754b48b62cdd07255fc3028feecad0c095/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa8d2754b48b62cdd07255fc3028feecad0c095/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=eaa8d2754b48b62cdd07255fc3028feecad0c095",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_RBF_H\n+#define BITCOIN_POLICY_RBF_H\n+\n+#include \"txmempool.h\"\n+\n+// Check whether the sequence numbers on this transaction are signaling\n+// opt-in to replace-by-fee, according to BIP 125\n+bool SignalsOptInRBF(const CTransaction &tx);\n+\n+// Determine whether an in-mempool transaction is signaling opt-in to RBF\n+// according to BIP 125\n+// This involves checking sequence numbers of the transaction, as well\n+// as the sequence numbers of all in-mempool ancestors.\n+bool IsRBFOptIn(const CTxMemPoolEntry &entry, CTxMemPool &pool);\n+\n+#endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "f7a1ca0fefaea709e1316937faaae674d0416ba0",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaa8d2754b48b62cdd07255fc3028feecad0c095/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaa8d2754b48b62cdd07255fc3028feecad0c095/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=eaa8d2754b48b62cdd07255fc3028feecad0c095",
        "patch": "@@ -11,6 +11,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"policy/rbf.h\"\n #include \"rpcserver.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n@@ -76,6 +77,23 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n     entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n+\n+    // Add opt-in RBF status\n+    std::string rbfStatus = \"no\";\n+    if (confirms <= 0) {\n+        LOCK(mempool.cs);\n+        if (!mempool.exists(hash)) {\n+            if (SignalsOptInRBF(wtx)) {\n+                rbfStatus = \"yes\";\n+            } else {\n+                rbfStatus = \"unknown\";\n+            }\n+        } else if (IsRBFOptIn(*mempool.mapTx.find(hash), mempool)) {\n+            rbfStatus = \"yes\";\n+        }\n+    }\n+    entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n+\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n@@ -1439,6 +1457,8 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n             \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) For the 'move' category of transactions, the account the funds came \\n\"\n             \"                                          from (for receiving funds, positive amounts), or went to (for sending funds,\\n\"\n             \"                                          negative amounts).\\n\"\n+            \"    \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\"  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n+            \"                                                     may be unknown for unconfirmed transactions not in the mempool\\n\"\n             \"  }\\n\"\n             \"]\\n\"\n \n@@ -1707,6 +1727,8 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n             \"  \\\"txid\\\" : \\\"transactionid\\\",   (string) The transaction id.\\n\"\n             \"  \\\"time\\\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n+            \"  \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\"  (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n+            \"                                                   may be unknown for unconfirmed transactions not in the mempool\\n\"\n             \"  \\\"details\\\" : [\\n\"\n             \"    {\\n\"\n             \"      \\\"account\\\" : \\\"accountname\\\",  (string) DEPRECATED. The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\""
      }
    ]
  }
]