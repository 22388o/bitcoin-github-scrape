hebasto,2020-06-20 13:54:04,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-646998291,646998291,
hebasto,2020-06-20 14:53:23,"Travis error:\n- https://travis-ci.org/github/bitcoin/bitcoin/jobs/700351407#L4430",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-647005655,647005655,
hebasto,2020-06-20 15:33:40,"> Travis error:\n> \n>  - https://travis-ci.org/github/bitcoin/bitcoin/jobs/700351407#L4430\n\nIt is reliably reproducible locally.",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-647010420,647010420,
hebasto,2020-06-20 15:48:57,"> > Travis error:\n> > \n> > * https://travis-ci.org/github/bitcoin/bitcoin/jobs/700351407#L4430\n> \n> It is reliably reproducible locally.\n\n@vasild \n~idk exactly why but~ moving the `potential_deadlock_detected` test case to the end fixes the problem.\n\nUPDATE: at the end of the `potential_deadlock_detected` test case the lock stack is not empty.",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-647012158,647012158,
hebasto,2020-06-20 20:27:07,"> Travis error:\n> \n>     * https://travis-ci.org/github/bitcoin/bitcoin/jobs/700351407#L4430\n\nFixed in #19340.",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-647042058,647042058,
DrahtBot,2020-06-20 22:06:07,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19983 (Drop some TSan suppressions by hebasto)\n* #19982 (test: Fix inconsistent lock order in wallet_tests/CreateWalletF",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-647050462,647050462,
jnewbery,2020-06-21 18:32:49,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-647164552,647164552,
practicalswift,2020-06-22 09:00:36,"Concept ACK\n\nNice!",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-647384558,647384558,
vasild,2020-06-22 10:17:20,">     * could place boost headers into a separate group\n\nDone.\n \n>     * in commit [401d3b7](https://github.com/bitcoin/bitcoin/commit/401d3b759e14a96332a033485257d2e993c2b944) message ""... would produce an undefined behavior"" -- mind rewording ""would"" -> ""is""\n\nDone.\n \n>     * could use unnamed namespace instead of `static`\n\nThe rest of the functions in the file use `static`, s",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-647424861,647424861,
vasild,2020-06-22 11:04:25,"I converted this PR to ""draft"" so that it does not get merged accidentally. CI tests passed this time! I guess the order in which the tests are executed matters. https://github.com/bitcoin/bitcoin/pull/19340 will fix that and should be merged before this PR.",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-647446864,647446864,
hebasto,2020-08-04 15:06:35,"@vasild \n> I converted this PR to ""draft"" so that it does not get merged accidentally. CI tests passed this time! I guess the order in which the tests are executed matters. #19340 will fix that and should be merged before this PR.\n\n#19340 is merged :)\n",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-668652306,668652306,
vasild,2020-08-05 07:51:24,Reopened this PR now that #19340 is merged and rebased to resolve a conflict.,https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-669040717,669040717,
vasild,2020-08-05 13:01:36,Addressed some review suggestions.,https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-669179504,669179504,
MarcoFalke,2020-08-05 14:02:29,"<details><summary>a diff</summary>\n\n\n```diff\ndiff --git a/src/sync.cpp b/src/sync.cpp\nindex d020b4e334..55cc47191f 100644\n--- a/src/sync.cpp\n+++ b/src/sync.cpp\n@@ -220,9 +220,6 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, MutexTyp\n }\n template void EnterCritical(const char*, const char*, int, Mutex*, bool);\n template void EnterCritical(const char",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-669211924,669211924,
vasild,2020-08-06 12:21:26,"@MarcoFalke the above patch does not compile for me (neither with clang 11 nor with gcc 10) with an error like\n\n```\nld: error: undefined symbol: void EnterCritical<std::mutex>(char const*, char const*, int, std::mutex*, bool)\n```\n\nI think you should also get it for `./configure --enable-debug` when the explicit instantiation of `EnterCritical<std::mutex>()` is removed. Here is how we e",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-669893857,669893857,
vasild,2020-08-06 12:59:37,"I pushed the patch to my travis instance and it breaks the build, similarly to what I observe locally: https://travis-ci.org/github/vasild/bitcoin/jobs/715483824#L3800",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-669911268,669911268,
MarcoFalke,2020-08-07 08:29:38,"Obviously I didn't compile with `--enable-debug` (shame!). Please disregard the sync.cpp patch, but the other hunks should compile?",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-670399401,670399401,
vasild,2020-08-10 16:43:31,"@MarcoFalke, I looked carefully at the diff [above](https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-669211924) and took some of it but not all. Here are the reasons:\n\n* Indeed we never do `LOCK()` or `ENTER_CRITICAL_SECTION()` on `std::mutex` or `std::recursive_mutex` directly, so no need to test for that. Thus, I removed the tests `double_lock_std_mutex` and `double_lock_std_recurs",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-671464378,671464378,
hebasto,2020-08-15 10:30:45,@ajtowns @ryanofsky @practicalswift Mind looking into this?,https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-674380324,674380324,
laanwj,2020-11-23 22:14:12,"Given how much of the current work on mutexes is converting recursive mutexes to non-resursive ones, it would be nice to get this in.",https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-732456570,732456570,
laanwj,2020-11-25 15:44:49,code review ACK 95975dd08d8fdaaeaf28e0d06b861ce2748c17b6,https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-733785839,733785839,
MarcoFalke,2020-06-20 13:54:46,no need to add dead code or code that is only used in tests,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r443132759,443132759,src/sync.cpp
vasild,2020-06-20 14:10:45,"These instantiations are required even if tests do not exist. Without them it wouldn't link with errors like:\n```\nld: error: undefined symbol: void EnterCritical<boost::mutex>(char const*, char const*, int, boost::mutex*, bool)\n>>> referenced by checkqueue.h:184 (src/checkqueue.h:184)\n>>>               libbitcoin_server_a-validation.o:(CCheckQueueControl<CScriptCheck>::CCheckQueueControl(C",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r443133836,443133836,src/sync.cpp
hebasto,2020-06-20 14:20:32,"Yeah, this is solved in #18710 :)\n\nEDIT: I mean `boost::mutex`",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r443134518,443134518,src/sync.cpp
vasild,2020-06-22 07:07:48,"So when these two PRs meet and if that was the last usage of `boost::mutex`, then this line can be removed: `template void EnterCritical(const char*, const char*, int, boost::mutex*, bool);`.",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r443355827,443355827,src/sync.cpp
hebasto,2020-08-05 08:09:42,"```suggestion\n    LEAVE_CRITICAL_SECTION(m);\n    BOOST_CHECK(LockStackEmpty());\n```",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465550425,465550425,src/test/sync_tests.cpp
vasild,2020-08-05 08:20:48,Done!,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465556579,465556579,src/test/sync_tests.cpp
MarcoFalke,2020-08-05 08:30:37,"Couldn't this use `LOCK(m)`, since `ENTER_CRITICAL_SECTION` is mostly only used internally to the sync module and other code used `LOCK`",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465562495,465562495,src/test/sync_tests.cpp
MarcoFalke,2020-08-05 08:31:06,"```suggestion\n    {\n        LOCK(m);\n```\n\nSame here. Should be equivalent?",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465562816,465562816,src/test/sync_tests.cpp
MarcoFalke,2020-08-05 08:32:54,Could limit the `#ifdef DEBUG_LOCKORDER` to just this one line/statement? Benefit would be that `BOOST_CHECK_NO_THROW` will be run for non-debug builds as well.,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465563801,465563801,src/test/sync_tests.cpp
MarcoFalke,2020-08-05 08:39:41,Would be nice if the `potential_deadlock_detected` and `double_lock_detected` helpers used the same style to pop_back the just added lock. (Either pass in a mutable reference or create a copy),https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465567687,465567687,src/sync.cpp
MarcoFalke,2020-08-05 08:41:38,"```suggestion\n        std::abort();\n```\n\nShould be the same symbol, but slightly clearer.",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465568870,465568870,src/sync.cpp
promag,2020-08-05 09:14:43,There's more cases of s/abort()/std::abort so a follow up to to do this is also fine.,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465587721,465587721,src/sync.cpp
promag,2020-08-05 09:22:53,"Add `assert(false)` after this? Or some other ""unreachable"" assertion. Below, after `potential_deadlock_detected()` there's a comment, could also add the assertion there.",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465592482,465592482,src/sync.cpp
promag,2020-08-05 09:24:45,Could keep range loop? When `lock_stack` is changed the iteration stops.,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465593530,465593530,src/sync.cpp
vasild,2020-08-05 12:32:44,"`LOCK(m)` does not compile if `m` is `std::mutex`:\n\n```\nsrc/sync.h:132:59: error: no type named 'UniqueLock' in 'std::__1::mutex'\ntemplate <typename Mutex, typename Base = typename Mutex::UniqueLock>\n                                          ~~~~~~~~~~~~~~~~^~~~~~~~~~\n```",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465691861,465691861,src/test/sync_tests.cpp
vasild,2020-08-05 12:35:03,Same [as above](https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465691861) - it does not compile.,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465693124,465693124,src/test/sync_tests.cpp
vasild,2020-08-05 12:43:27,"Without `DEBUG_LOCKORDER` we would actually do the double lock and once executed then we are in ""undefined behavior"" state. We don't want to do that because it may randomly crash the test executable, overwrite random portions of memory for the excitement of subsequent tests, etc.\n\nhttps://github.com/bitcoin/bitcoin/blob/b1f94072a1cc3ca67ce13658bb981d03480ef38e/src/test/sync_tests.cpp#L93-L95",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465698117,465698117,src/test/sync_tests.cpp
vasild,2020-08-05 12:52:06,Done - used the same as used when calling `potential_deadlock_detected()` in `master` - a copy.,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465703371,465703371,src/sync.cpp
vasild,2020-08-05 12:53:43,"I am leaving it as is for consistency with `potential_deadlock_detected()` which uses `abort()`. As @promag says, a subsequent patch could change all occurrences.",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465704368,465704368,src/sync.cpp
vasild,2020-08-05 12:54:14,"I added a comment, like done for `potential_deadlock_detected()`.",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465704673,465704673,src/sync.cpp
vasild,2020-08-05 13:01:11,We need to iterate on all but the last element.,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465709073,465709073,src/sync.cpp
promag,2020-08-05 13:06:20,"Right, for `double_lock_detected` the last element should be skipped. But now lines L187-200 don't run for the last element.",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465712075,465712075,src/sync.cpp
MarcoFalke,2020-08-05 14:02:43,I compiled and tested locally with sanitizers and it passed. Am I missing something? https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-669211924,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465749596,465749596,src/test/sync_tests.cpp
MarcoFalke,2020-08-05 14:02:52,"Though, we never use `LOCK` or even `ENTER_CRITICAL_SECTION` on `std::mutex`, so what is the point of testing for that? https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-669211924",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465749673,465749673,src/test/sync_tests.cpp
MarcoFalke,2020-08-05 14:03:05,I tried compiling locally without it and it worked https://github.com/bitcoin/bitcoin/pull/19337#issuecomment-669211924,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r465749839,465749839,src/sync.cpp
promag,2020-08-05 21:48:34,"Nevermind, the last element was already skipped with `if (i.first == c) break;`.",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r466023613,466023613,src/sync.cpp
MarcoFalke,2020-11-26 10:00:58,"This will always blame the bug on sync.cpp itself:\n\n```\ndetected double lock at sync.cpp:153",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r530909272,530909272,src/sync.cpp
vasild,2020-11-26 13:48:34,"Right!\n\nAddressed in https://github.com/bitcoin/bitcoin/pull/20507",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r531040992,531040992,src/sync.cpp
promag,2020-12-02 09:38:33,@vasild why copy and pop here?,https://github.com/bitcoin/bitcoin/pull/19337#discussion_r534023890,534023890,src/sync.cpp
vasild,2020-12-03 05:57:23,"```cpp\n            auto lock_stack_copy = lock_stack;\n            lock_stack.pop_back();\n            double_lock_detected(c, lock_stack_copy);\n```\n\nThat's subtle:\n1. `double_lock_detected()` can `abort()` in which case it does not matter, but it can also `throw` and tests catch this exception and continue working and executing other tests. So the lock stack needs to be correct after ",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r534699937,534699937,src/sync.cpp
vasild,2021-01-26 08:51:27,"Just for reference - the two PRs met in `master` and afterwards that line was removed in https://github.com/bitcoin/bitcoin/pull/21010.\n\nThanks, @fanquake!",https://github.com/bitcoin/bitcoin/pull/19337#discussion_r564340866,564340866,src/sync.cpp
