[
  {
    "sha": "6e64d177b7fd8e7aea7edc656b61cae187337da0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTY0ZDE3N2I3ZmQ4ZTdhZWE3ZWRjNjU2YjYxY2FlMTg3MzM3ZGEw",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-01-13T09:58:00Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2019-01-15T08:12:43Z"
      },
      "message": "Use real bind address in RPC help curl example.\n\nExpose (one of) the real bind addresses for the HTTP server and use that\nin the RPC help text's curl example.  This makes sure that e.g. a\ndifferently configured RPC port (or just the RPC port for regtest/testnet)\nis reported there, so that the example can be used directly as is even\nif a non-standard configuration is applied or the daemon is not mainnet.",
      "tree": {
        "sha": "caf2aa9255b38d00ad38363f18e4e9de52e07329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/caf2aa9255b38d00ad38363f18e4e9de52e07329"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e64d177b7fd8e7aea7edc656b61cae187337da0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e64d177b7fd8e7aea7edc656b61cae187337da0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e64d177b7fd8e7aea7edc656b61cae187337da0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e64d177b7fd8e7aea7edc656b61cae187337da0/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84d0fdce11709c8e26b9c450d47727ab36641437",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d0fdce11709c8e26b9c450d47727ab36641437",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84d0fdce11709c8e26b9c450d47727ab36641437"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 41,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d3bc1ed164b0243d77dec32277c5f63e161b3cf6",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e64d177b7fd8e7aea7edc656b61cae187337da0/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e64d177b7fd8e7aea7edc656b61cae187337da0/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=6e64d177b7fd8e7aea7edc656b61cae187337da0",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Copyright (c) 2015-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,6 +15,7 @@\n #include <ui_interface.h>\n \n #include <memory>\n+#include <sstream>\n #include <stdio.h>\n #include <stdlib.h>\n #include <string.h>\n@@ -147,6 +148,8 @@ static WorkQueue<HTTPClosure>* workQueue = nullptr;\n std::vector<HTTPPathHandler> pathHandlers;\n //! Bound listening sockets\n std::vector<evhttp_bound_socket *> boundSockets;\n+//! First of the binding addresses\n+std::string firstBindAddress;\n \n /** Check if a network address is allowed to access the HTTP server */\n static bool ClientAllowed(const CNetAddr& netaddr)\n@@ -318,6 +321,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n     }\n \n     // Bind addresses\n+    firstBindAddress.clear();\n     for (std::vector<std::pair<std::string, uint16_t> >::iterator i = endpoints.begin(); i != endpoints.end(); ++i) {\n         LogPrint(BCLog::HTTP, \"Binding RPC on address %s port %i\\n\", i->first, i->second);\n         evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? nullptr : i->first.c_str(), i->second);\n@@ -327,6 +331,11 @@ static bool HTTPBindAddresses(struct evhttp* http)\n                 LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\n             }\n             boundSockets.push_back(bind_handle);\n+            if (firstBindAddress.empty()) {\n+                std::ostringstream addrStr;\n+                addrStr << \"http://\" << i->first << \":\" << i->second << \"/\";\n+                firstBindAddress = addrStr.str();\n+            }\n         } else {\n             LogPrintf(\"Binding RPC on address %s port %i failed.\\n\", i->first, i->second);\n         }\n@@ -478,6 +487,15 @@ void StopHTTPServer()\n     LogPrint(BCLog::HTTP, \"Stopped HTTP server\\n\");\n }\n \n+bool GetHTTPServerBindAddress(std::string& addr)\n+{\n+    if (boundSockets.empty() || firstBindAddress.empty()) {\n+        return false;\n+    }\n+    addr = firstBindAddress;\n+    return true;\n+}\n+\n struct event_base* EventBase()\n {\n     return eventBase;"
      },
      {
        "sha": "8b6daec252fba82aa7d57ef5afeef7baf9c3490c",
        "filename": "src/httpserver.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e64d177b7fd8e7aea7edc656b61cae187337da0/src/httpserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e64d177b7fd8e7aea7edc656b61cae187337da0/src/httpserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.h?ref=6e64d177b7fd8e7aea7edc656b61cae187337da0",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2018 The Bitcoin Core developers\n+// Copyright (c) 2015-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -32,6 +32,11 @@ void InterruptHTTPServer();\n /** Stop HTTP server */\n void StopHTTPServer();\n \n+/** Returns one of the addresses the server is binding to.\n+ * If the server has not been initialised yet, returns false.\n+ */\n+bool GetHTTPServerBindAddress(std::string& addr);\n+\n /** Change logging level for libevent. Removes BCLog::LIBEVENT from log categories if\n  * libevent doesn't support debug logging.*/\n bool UpdateHTTPServerLogging(bool enable);"
      },
      {
        "sha": "df6f072d782047b0aab28e2bcb51dfc6a1d07f9a",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e64d177b7fd8e7aea7edc656b61cae187337da0/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e64d177b7fd8e7aea7edc656b61cae187337da0/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=6e64d177b7fd8e7aea7edc656b61cae187337da0",
        "patch": "@@ -1,11 +1,12 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <rpc/server.h>\n \n #include <fs.h>\n+#include <httpserver.h>\n #include <key_io.h>\n #include <random.h>\n #include <rpc/util.h>\n@@ -514,8 +515,13 @@ std::string HelpExampleCli(const std::string& methodname, const std::string& arg\n \n std::string HelpExampleRpc(const std::string& methodname, const std::string& args)\n {\n+    std::string bindAddr;\n+    if (!GetHTTPServerBindAddress(bindAddr)) {\n+        bindAddr = \"http://127.0.0.1:8332/\";\n+    }\n     return \"> curl --user myusername --data-binary '{\\\"jsonrpc\\\": \\\"1.0\\\", \\\"id\\\":\\\"curltest\\\", \"\n-        \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\\n\";\n+        \"\\\"method\\\": \\\"\" + methodname + \"\\\", \\\"params\\\": [\" + args + \"] }' \"\n+        \"-H 'content-type: text/plain;' \" + bindAddr + \"\\n\";\n }\n \n void RPCSetTimerInterfaceIfUnset(RPCTimerInterface *iface)"
      },
      {
        "sha": "07ea1df7ce56e2c685858c5be4d50f548128aaa1",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e64d177b7fd8e7aea7edc656b61cae187337da0/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e64d177b7fd8e7aea7edc656b61cae187337da0/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=6e64d177b7fd8e7aea7edc656b61cae187337da0",
        "patch": "@@ -1,13 +1,14 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC help output.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.util import assert_equal, assert_raises_rpc_error, rpc_port\n \n import os\n+import re\n \n \n class HelpRpcTest(BitcoinTestFramework):\n@@ -16,6 +17,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.test_categories()\n+        self.test_example_url()\n         self.dump_help()\n \n     def test_categories(self):\n@@ -43,6 +45,10 @@ def test_categories(self):\n \n         assert_equal(titles, components)\n \n+    def test_example_url(self):\n+        text = self.nodes[0].help(\"getblockchaininfo\")\n+        assert re.search(\"curl .* http:\\\\/\\\\/.*:%d\\\\/\" % rpc_port(0), text) is not None\n+\n     def dump_help(self):\n         dump_dir = os.path.join(self.options.tmpdir, 'rpc_help_dump')\n         os.mkdir(dump_dir)"
      }
    ]
  }
]