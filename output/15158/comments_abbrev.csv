laanwj,2019-01-14T12:27:52Z,"Tend towards NACK, sorry, on one hand this adds a small convenience butâ€”\n\n- This adds a forbidden dependency; RPC is supposed to be independent of the backend (HTTP, GUI console, potentially in the future other things), so there is supposed to be no direct dependency of `rpcserver.cpp` on `httpserver.h`\n- 99% of users will use the default localhost bind address, and those that don't, likely ",https://github.com/bitcoin/bitcoin/pull/15158#issuecomment-453988518,453988518,
domob1812,2019-01-15T08:16:31Z,"@laanwj:  No worries, I expected this to be not a clear case.  But isn't giving an explicit `curl` example in the RPC help text a clear dependence on HTTP as backend in the first place?  If we do that (as we do now), then I think it is good to make it at least correct.\n\nHowever, a simpler version could be to just use the default (or configured) RPC port from the chain config instead of the har",https://github.com/bitcoin/bitcoin/pull/15158#issuecomment-454303272,454303272,
laanwj,2019-01-15T13:52:05Z,">  But isn't giving an explicit curl example in the RPC help text a clear dependence on HTTP as backend in the first place? If we do that (as we do now), then I think it is good to make it at least correct.\n\nRight, it is a a semantic dependency, not a code dependency.\nIf you want to go all the way to modular design, you'd have a function where the backend (such as `httprpc`) can register RPC",https://github.com/bitcoin/bitcoin/pull/15158#issuecomment-454398834,454398834,
domob1812,2019-01-15T19:01:08Z,"> If you want to go all the way to modular design, you'd have a function where the backend (such as `httprpc`) can register RPC example help generation functions, which are then called by the RPC help generator and in turn appended to the help for a call.\n\nTrue, but that seems like overengineering to me.  Do you mean to say that you'd prefer that, or is that just a hypothetical example?\n\nS",https://github.com/bitcoin/bitcoin/pull/15158#issuecomment-454510270,454510270,
laanwj,2019-01-16T13:35:38Z,">  True, but that seems like overengineering to me. Do you mean to say that you'd prefer that, or is that just a hypothetical example?\n\nNo, what I'd prefer is to not do this at all, as I said I doubt it is worth it. Sorry if I was unclear.\n\n> So what about using either just the default RPC port from chainparams instead of hardcoding 8332, or perhaps using the rpcport if configured? Neither",https://github.com/bitcoin/bitcoin/pull/15158#issuecomment-454780766,454780766,
domob1812,2019-01-16T16:06:41Z,"> > So what about using either just the default RPC port from chainparams instead of hardcoding 8332, or perhaps using the rpcport if configured? Neither of that would create a code dependency of the RPC code on the HTTP backend.\n> \n> That would be OK with me, seems straightforward and doesn't add too much code.\n\nSounds good to me.  I'll close this PR then and work on one that just uses th",https://github.com/bitcoin/bitcoin/pull/15158#issuecomment-454835534,454835534,
practicalswift,2019-01-14T13:34:50Z,Avoid shadowing `addr` in outer scope :-),https://github.com/bitcoin/bitcoin/pull/15158#discussion_r247492547,247492547,src/httpserver.cpp
domob1812,2019-01-15T08:13:21Z,"Oops, fixed.  Good catch!",https://github.com/bitcoin/bitcoin/pull/15158#discussion_r247794565,247794565,src/httpserver.cpp
