[
  {
    "sha": "fa4a52254178655f50e73b50153730a60ffafd32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRhNTIyNTQxNzg2NTVmNTBlNzNiNTAxNTM3MzBhNjBmZmFmZDMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-06T17:30:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-17T10:21:34Z"
      },
      "message": "[qa] Add tests verifychain, lockunspent, getbalance, listsinceblock",
      "tree": {
        "sha": "b455dfb2b8538640c870ee9c2d5c75be1e2cefb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b455dfb2b8538640c870ee9c2d5c75be1e2cefb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4a52254178655f50e73b50153730a60ffafd32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4a52254178655f50e73b50153730a60ffafd32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4a52254178655f50e73b50153730a60ffafd32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4a52254178655f50e73b50153730a60ffafd32/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14d6324a248df50cb79fbeb5b60a978687a3b64e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14d6324a248df50cb79fbeb5b60a978687a3b64e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14d6324a248df50cb79fbeb5b60a978687a3b64e"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 23,
      "deletions": 2
    },
    "files": [
      {
        "sha": "272a5dc15482e36cbd5b3bfcc446827d3c93dcad",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4a52254178655f50e73b50153730a60ffafd32/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4a52254178655f50e73b50153730a60ffafd32/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=fa4a52254178655f50e73b50153730a60ffafd32",
        "patch": "@@ -28,6 +28,7 @@ class BlockchainTest(BitcoinTestFramework):\n     Test blockchain-related RPC calls:\n \n         - gettxoutsetinfo\n+        - verifychain\n \n     \"\"\"\n \n@@ -44,6 +45,7 @@ def setup_network(self, split=False):\n     def run_test(self):\n         self._test_gettxoutsetinfo()\n         self._test_getblockheader()\n+        self.nodes[0].verifychain(4, 0)\n \n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "c19a63c6996d2ee827434dfd5665089afcf72563",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4a52254178655f50e73b50153730a60ffafd32/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4a52254178655f50e73b50153730a60ffafd32/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=fa4a52254178655f50e73b50153730a60ffafd32",
        "patch": "@@ -38,7 +38,6 @@ def run_test(self):\n         self.nodes[0].settxfee(0) # return to automatic fee selection\n         txFS = self.nodes[0].signrawtransaction(txF['hex'])\n         txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-        self.nodes[0].lockunspent(True, [us0])\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n         base_fee = relayfee*100"
      },
      {
        "sha": "bc3f9e051cef1200d0936c0ff15a3e22d3728548",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4a52254178655f50e73b50153730a60ffafd32/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4a52254178655f50e73b50153730a60ffafd32/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=fa4a52254178655f50e73b50153730a60ffafd32",
        "patch": "@@ -7,6 +7,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.mininode import COIN\n \n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25"
      },
      {
        "sha": "e52d4e766801d914586634d007aaf64a6dc713ec",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4a52254178655f50e73b50153730a60ffafd32/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4a52254178655f50e73b50153730a60ffafd32/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa4a52254178655f50e73b50153730a60ffafd32",
        "patch": "@@ -59,6 +59,15 @@ def run_test (self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n+        # Exercise locking of unspent outputs\n+        unspent_0 = self.nodes[2].listunspent()[0]\n+        unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n+        self.nodes[2].lockunspent(False, [unspent_0])\n+        assert_raises(JSONRPCException, self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_equal([unspent_0], self.nodes[2].listlockunspent())\n+        self.nodes[2].lockunspent(True, [unspent_0])\n+        assert_equal(len(self.nodes[2].listlockunspent()), 0)\n+\n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n         self.nodes[1].generate(100)\n         self.sync_all()\n@@ -148,6 +157,10 @@ def run_test (self):\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n \n+        # Exercise balance rpcs\n+        assert_equal(self.nodes[0].getwalletinfo()[\"unconfirmed_balance\"], 1)\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), 1)\n+\n         #check if we can list zero value tx as available coins\n         #1. create rawtx\n         #2. hex-changed one output to 0.0\n@@ -251,7 +264,7 @@ def run_test (self):\n \n         #check if wallet or blochchain maintenance changes the balance\n         self.sync_all()\n-        self.nodes[0].generate(1)\n+        blocks = self.nodes[0].generate(2)\n         self.sync_all()\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n \n@@ -269,6 +282,12 @@ def run_test (self):\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)\n             assert_equal(balance_nodes, [self.nodes[i].getbalance() for i in range(3)])\n \n+        # Exercise listsinceblock with the last two blocks\n+        coinbase_tx_1 = self.nodes[0].listsinceblock(blocks[0])\n+        assert_equal(coinbase_tx_1[\"lastblock\"], blocks[1])\n+        assert_equal(len(coinbase_tx_1[\"transactions\"]), 1)\n+        assert_equal(coinbase_tx_1[\"transactions\"][0][\"blockhash\"], blocks[1])\n+        assert_equal(len(self.nodes[0].listsinceblock(blocks[1])[\"transactions\"]), 0)\n \n if __name__ == '__main__':\n     WalletTest ().main ()"
      }
    ]
  }
]