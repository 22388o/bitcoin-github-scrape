[
  {
    "sha": "52b29dca7670c3f6d2ab918c0fff1d17c4e494ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmIyOWRjYTc2NzBjM2Y2ZDJhYjkxOGMwZmZmMWQxN2M0ZTQ5NGFk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-21T12:15:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-01-21T12:52:32Z"
      },
      "message": "Get rid of inaccurate ScriptSigArgsExpected",
      "tree": {
        "sha": "81a173031fa09d54d36a07af87d68c32edb224cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a173031fa09d54d36a07af87d68c32edb224cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da83ecd45478367e5388c58fe29a4a8d72f7f1cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da83ecd45478367e5388c58fe29a4a8d72f7f1cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da83ecd45478367e5388c58fe29a4a8d72f7f1cd"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 6,
      "deletions": 70
    },
    "files": [
      {
        "sha": "c92a249c17b091c927176221708407a48e17eea5",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 31,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=52b29dca7670c3f6d2ab918c0fff1d17c4e494ad",
        "patch": "@@ -135,45 +135,20 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         const CScript& prevScript = prev.scriptPubKey;\n         if (!Solver(prevScript, whichType, vSolutions))\n             return false;\n-        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n-        if (nArgsExpected < 0)\n-            return false;\n-\n-        // Transactions with extra stuff in their scriptSigs are\n-        // non-standard. Note that this EvalScript() call will\n-        // be quick, because if there are any operations\n-        // beside \"push data\" in the scriptSig\n-        // IsStandardTx() will have already returned false\n-        // and this method isn't called.\n-        std::vector<std::vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))\n-            return false;\n \n         if (whichType == TX_SCRIPTHASH)\n         {\n+            std::vector<std::vector<unsigned char> > stack;\n+            // convert the scriptSig into a stack, so we can inspect the redeemScript\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), 0))\n+                return false;\n             if (stack.empty())\n                 return false;\n             CScript subscript(stack.back().begin(), stack.back().end());\n-            std::vector<std::vector<unsigned char> > vSolutions2;\n-            txnouttype whichType2;\n-            if (Solver(subscript, whichType2, vSolutions2))\n-            {\n-                int tmpExpected = ScriptSigArgsExpected(whichType2, vSolutions2);\n-                if (tmpExpected < 0)\n-                    return false;\n-                nArgsExpected += tmpExpected;\n-            }\n-            else\n-            {\n-                // Any other Script with less than 15 sigops OK:\n-                unsigned int sigops = subscript.GetSigOpCount(true);\n-                // ... extra data left on the stack after execution is OK, too:\n-                return (sigops <= MAX_P2SH_SIGOPS);\n+            if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n+                return false;\n             }\n         }\n-\n-        if (stack.size() != (unsigned int)nArgsExpected)\n-            return false;\n     }\n \n     return true;"
      },
      {
        "sha": "67b6af327ae378fa63acf5143c5a8d25c26c92a4",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=52b29dca7670c3f6d2ab918c0fff1d17c4e494ad",
        "patch": "@@ -161,27 +161,6 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n     return false;\n }\n \n-int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)\n-{\n-    switch (t)\n-    {\n-    case TX_NONSTANDARD:\n-    case TX_NULL_DATA:\n-        return -1;\n-    case TX_PUBKEY:\n-        return 1;\n-    case TX_PUBKEYHASH:\n-        return 2;\n-    case TX_MULTISIG:\n-        if (vSolutions.size() < 1 || vSolutions[0].size() < 1)\n-            return -1;\n-        return vSolutions[0][0] + 1;\n-    case TX_SCRIPTHASH:\n-        return 1; // doesn't include args needed by the script\n-    }\n-    return -1;\n-}\n-\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     vector<valtype> vSolutions;"
      },
      {
        "sha": "64bf010ec199ef4431322bea2f344e66dbc6c679",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=52b29dca7670c3f6d2ab918c0fff1d17c4e494ad",
        "patch": "@@ -71,7 +71,6 @@ typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n-int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n "
      },
      {
        "sha": "28b85e8d290a7c921e15fdbf3e17765d8597d9b7",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=52b29dca7670c3f6d2ab918c0fff1d17c4e494ad",
        "patch": "@@ -346,15 +346,6 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     // 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]\n     BOOST_CHECK_EQUAL(GetP2SHSigOpCount(txTo, coins), 22U);\n \n-    // Make sure adding crap to the scriptSigs makes them non-standard:\n-    for (int i = 0; i < 3; i++)\n-    {\n-        CScript t = txTo.vin[i].scriptSig;\n-        txTo.vin[i].scriptSig = (CScript() << 11) + t;\n-        BOOST_CHECK(!::AreInputsStandard(txTo, coins));\n-        txTo.vin[i].scriptSig = t;\n-    }\n-\n     CMutableTransaction txToNonStd1;\n     txToNonStd1.vout.resize(1);\n     txToNonStd1.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());"
      },
      {
        "sha": "c27f194b551bbb738495bbbdce899db2259c5cf9",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52b29dca7670c3f6d2ab918c0fff1d17c4e494ad/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=52b29dca7670c3f6d2ab918c0fff1d17c4e494ad",
        "patch": "@@ -310,14 +310,6 @@ BOOST_AUTO_TEST_CASE(test_Get)\n \n     BOOST_CHECK(AreInputsStandard(t1, coins));\n     BOOST_CHECK_EQUAL(coins.GetValueIn(t1), (50+21+22)*CENT);\n-\n-    // Adding extra junk to the scriptSig should make it non-standard:\n-    t1.vin[0].scriptSig << OP_11;\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n-\n-    // ... as should not having enough:\n-    t1.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!AreInputsStandard(t1, coins));\n }\n \n BOOST_AUTO_TEST_CASE(test_IsStandard)"
      }
    ]
  }
]