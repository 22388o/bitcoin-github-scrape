laanwj,2019-10-21 11:49:36,code review ACK 9ddc07f68208fcf0217df11d72a7a61fd369c297,https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-544478687,544478687,
Empact,2019-10-21 13:33:29,How about a test?,https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-544516604,544516604,
laanwj,2019-10-22 11:12:46,"> How about a test?\n\nThe test is updated. If you want a new, separate test for this, I think that doesn't need to be in this PR.",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-544912349,544912349,
Empact,2019-10-22 11:55:18,"It‚Äôs good practice to include a regression test with any bugfix, both to confirm the new behavior and to ensure the bug isn‚Äôt reintroduced.",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-544926311,544926311,
laanwj,2019-10-23 09:54:45,The change in `src/test/transaction_tests.cpp` is supposed to do this‚Ä¶,https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-545365647,545365647,
practicalswift,2019-10-23 14:02:53,Update OP to make it explicit what the consequences are of turning `OP_1NEGATE` in `scriptSig` into `0x0181` in signing code? :),https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-545459397,545459397,
Empact,2019-10-23 15:33:59,"> The change in `src/test/transaction_tests.cpp` is supposed to do this‚Ä¶\n\nYou can confirm that it doesn't exercise the change by compiling without the `sign.cpp` changes, running the tests and seeing they don't fail:\n\n```\n$ git co 201910_1negate_rebase\n# revert sign.cpp changes\n$ git diff\ndiff --git a/src/script/sign.cpp b/src/script/sign.cpp\nindex 7ff06e526..0ed92e8d5 100644\n-",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-545502820,545502820,
laanwj,2019-10-25 10:06:54,"> You can confirm that it doesn't exercise the change by compiling without the sign.cpp changes, running the tests and seeing they don't fail:\n\nOk, wasn't aware of that, thanks.",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-546292029,546292029,
luke-jr,2019-11-09 20:43:21,"If this is rebased on top of e4382fbef56a0e04b0ed834e8b3a3a16f81db149, it is a clean merge to 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, and master ;)",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-552135647,552135647,
luke-jr,2019-11-09 20:45:44,eg https://github.com/luke-jr/bitcoin/tree/bugfix_keepnegone-0.13,https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-552135819,552135819,
meshcollider,2019-11-20 08:47:57,"Rebased as requested, I'll try and add a test for this but this is such a small and obviously correct change that it should just be merged as-is IMO",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-555902478,555902478,
luke-jr,2019-12-24 23:25:45,"You rebased in the wrong direction...\n\n```\ngit rebase HEAD^ --onto e4382fbef56\n```\n\n(or just `git reset --hard c74d19fcae5`)",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-568810514,568810514,
meshcollider,2020-04-20 02:58:56,"Fixed Luke, sorry üëç ",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-616281955,616281955,
jonatack,2020-07-03 10:27:13,"Wrote a regression test while reviewing this PR and it looks like the issue has been resolved. Proposed the test in #19436.\n\nEDIT: perhaps not resolved, see https://github.com/bitcoin/bitcoin/pull/19436#issuecomment-657025978.",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-653475111,653475111,
fjahr,2020-07-21 11:00:13,"Code review ACK dca28634d779c775678cba402a85fe5bb9b3a5a9\n\nI spent some time trying to find out what the test was actually testing but gave up for now. It seems the raw transaction parser used to change the 0x4F in the redeem script to 0x0181 in the script and that was fixed some time ago. It's really hard to figure out because errors from script evaluation seem to have changed as well. I might",https://github.com/bitcoin/bitcoin/pull/17204#issuecomment-661787878,661787878,
