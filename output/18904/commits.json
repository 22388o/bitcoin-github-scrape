[
  {
    "sha": "06e51a8c4c4877361ba5374acff714711d40ac97",
    "node_id": "C_kwDOABII59oAKDA2ZTUxYThjNGM0ODc3MzYxYmE1Mzc0YWNmZjcxNDcxMWQ0MGFjOTc",
    "commit": {
      "author": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2020-05-07T06:47:13Z"
      },
      "committer": {
        "name": "Anthony Fieroni",
        "email": "bvbfan@abv.bg",
        "date": "2021-10-28T12:38:00Z"
      },
      "message": "Don't call lsn_reset in periodic flush\n\nSigned-off-by: Anthony Fieroni <bvbfan@abv.bg>",
      "tree": {
        "sha": "19d3a3779f55a2a3beb4a85826144911fe1ede2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19d3a3779f55a2a3beb4a85826144911fe1ede2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06e51a8c4c4877361ba5374acff714711d40ac97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06e51a8c4c4877361ba5374acff714711d40ac97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06e51a8c4c4877361ba5374acff714711d40ac97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06e51a8c4c4877361ba5374acff714711d40ac97/comments",
    "author": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "bvbfan",
      "id": 8323581,
      "node_id": "MDQ6VXNlcjgzMjM1ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8323581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvbfan",
      "html_url": "https://github.com/bvbfan",
      "followers_url": "https://api.github.com/users/bvbfan/followers",
      "following_url": "https://api.github.com/users/bvbfan/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvbfan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvbfan/subscriptions",
      "organizations_url": "https://api.github.com/users/bvbfan/orgs",
      "repos_url": "https://api.github.com/users/bvbfan/repos",
      "events_url": "https://api.github.com/users/bvbfan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvbfan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 14,
      "deletions": 31
    },
    "files": [
      {
        "sha": "454f92c656758815f735b3a06a521e471939db1d",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06e51a8c4c4877361ba5374acff714711d40ac97/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06e51a8c4c4877361ba5374acff714711d40ac97/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=06e51a8c4c4877361ba5374acff714711d40ac97",
        "patch": "@@ -587,15 +587,10 @@ bool BerkeleyDatabase::PeriodicFlush()\n     // Don't flush if there haven't been any batch writes for this database.\n     if (m_refcount < 0) return false;\n \n-    LogPrint(BCLog::WALLETDB, \"Flushing %s\\n\", strFile);\n-    int64_t nStart = GetTimeMillis();\n-\n-    // Flush wallet file so it's self contained\n-    env->CloseDb(strFile);\n-    env->CheckpointLSN(strFile);\n-    m_refcount = -1;\n-\n-    LogPrint(BCLog::WALLETDB, \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n+    // we don't need to move tdb from one environment to another\n+    // but instead to flush the underlying memory pool,\n+    // write a checkpoint record to the log and to flush it\n+    env->dbenv->txn_checkpoint(0, 0, 0);\n \n     return true;\n }"
      },
      {
        "sha": "8cfa913ae6f366b5c9c153ab9ff1be28f4fb59c5",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06e51a8c4c4877361ba5374acff714711d40ac97/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06e51a8c4c4877361ba5374acff714711d40ac97/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=06e51a8c4c4877361ba5374acff714711d40ac97",
        "patch": "@@ -104,8 +104,8 @@ class WalletDatabase\n {\n public:\n     /** Create dummy DB handle */\n-    WalletDatabase() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0) {}\n-    virtual ~WalletDatabase() {};\n+    WalletDatabase() {}\n+    virtual ~WalletDatabase() {}\n \n     /** Open the database if it is not already opened. */\n     virtual void Open() = 0;\n@@ -145,10 +145,8 @@ class WalletDatabase\n \n     virtual std::string Format() = 0;\n \n-    std::atomic<unsigned int> nUpdateCounter;\n-    unsigned int nLastSeen;\n-    unsigned int nLastFlushed;\n-    int64_t nLastWalletUpdate;\n+    std::atomic<unsigned int> nUpdateCounter{0};\n+\n \n     /** Make a DatabaseBatch connected to this database */\n     virtual std::unique_ptr<DatabaseBatch> MakeBatch(bool flush_on_close = true) = 0;"
      },
      {
        "sha": "e23a1048d5b8e0a60ba733378b6537e5b6d64e01",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06e51a8c4c4877361ba5374acff714711d40ac97/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06e51a8c4c4877361ba5374acff714711d40ac97/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=06e51a8c4c4877361ba5374acff714711d40ac97",
        "patch": "@@ -139,7 +139,7 @@ void StartWallets(WalletContext& context, CScheduler& scheduler)\n \n     // Schedule periodic wallet flushes and tx rebroadcasts\n     if (context.args->GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET)) {\n-        scheduler.scheduleEvery([&context] { MaybeCompactWalletDB(context); }, std::chrono::milliseconds{500});\n+        scheduler.scheduleEvery([&context] { MaybeCompactWalletDB(context); }, std::chrono::milliseconds{2000});\n     }\n     scheduler.scheduleEvery([&context] { MaybeResendWalletTxs(context); }, std::chrono::milliseconds{1000});\n }"
      },
      {
        "sha": "a4bea4e75e34e3216e7963923ec688939332d0fb",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06e51a8c4c4877361ba5374acff714711d40ac97/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06e51a8c4c4877361ba5374acff714711d40ac97/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=06e51a8c4c4877361ba5374acff714711d40ac97",
        "patch": "@@ -1044,22 +1044,12 @@ void MaybeCompactWalletDB(WalletContext& context)\n         return;\n     }\n \n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets(context)) {\n-        WalletDatabase& dbh = pwallet->GetDatabase();\n+    auto nStart = GetTimeMillis();\n \n-        unsigned int nUpdateCounter = dbh.nUpdateCounter;\n+    for (const std::shared_ptr<CWallet>& pwallet : GetWallets(context))\n+        pwallet->GetDatabase().PeriodicFlush();\n \n-        if (dbh.nLastSeen != nUpdateCounter) {\n-            dbh.nLastSeen = nUpdateCounter;\n-            dbh.nLastWalletUpdate = GetTime();\n-        }\n-\n-        if (dbh.nLastFlushed != nUpdateCounter && GetTime() - dbh.nLastWalletUpdate >= 2) {\n-            if (dbh.PeriodicFlush()) {\n-                dbh.nLastFlushed = nUpdateCounter;\n-            }\n-        }\n-    }\n+    LogPrint(BCLog::WALLETDB, \"Flushed db(s) in %dms\\n\", GetTimeMillis() - nStart);\n \n     fOneThread = false;\n }"
      },
      {
        "sha": "c15abe4c8f3f3a0f11366161ad79341e03053e8e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06e51a8c4c4877361ba5374acff714711d40ac97/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06e51a8c4c4877361ba5374acff714711d40ac97/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=06e51a8c4c4877361ba5374acff714711d40ac97",
        "patch": "@@ -206,7 +206,7 @@ def run_test(self):\n         assert result['ismine']\n \n         self.log.info('Check that wallet is flushed')\n-        with self.nodes[0].assert_debug_log(['Flushing wallet.dat'], timeout=20):\n+        with self.nodes[0].assert_debug_log(['Flushed db(s)'], timeout=20):\n             self.nodes[0].getnewaddress()\n \n         # Make sure that dumpwallet doesn't have a lock order issue when there is an unconfirmed tx and it is reloaded"
      }
    ]
  }
]