[
  {
    "sha": "e0070c947dbffc6aff923c310be0a74bf154e244",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDA3MGM5NDdkYmZmYzZhZmY5MjNjMzEwYmUwYTc0YmYxNTRlMjQ0",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-01T23:10:49Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-01T23:10:49Z"
      },
      "message": "Initial commit of CMake based build system.\n\nDeveloped and tested on Lucid 64 with source based installs as\nrequired.  In particular the find of BerkeleyDB is very fragile and I\ndon't expect it to work on other systems w/o a little testing.\n\nTo use cmake after installing the prerequisites:\nmkdir build\ncd build\ncmake ..\nmake",
      "tree": {
        "sha": "30220a2458d239a87e088a30da33fdf5b1543ea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30220a2458d239a87e088a30da33fdf5b1543ea3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0070c947dbffc6aff923c310be0a74bf154e244",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0070c947dbffc6aff923c310be0a74bf154e244",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0070c947dbffc6aff923c310be0a74bf154e244",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0070c947dbffc6aff923c310be0a74bf154e244/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d96276e243c93add0b0d292ae9f05a54508b6e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d96276e243c93add0b0d292ae9f05a54508b6e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d96276e243c93add0b0d292ae9f05a54508b6e7"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 103,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ab47c34b1ed8069ad0313a18ebe75097486f8d06",
        "filename": "CMakeLists.txt",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0070c947dbffc6aff923c310be0a74bf154e244/CMakeLists.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0070c947dbffc6aff923c310be0a74bf154e244/CMakeLists.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CMakeLists.txt?ref=e0070c947dbffc6aff923c310be0a74bf154e244",
        "patch": "@@ -0,0 +1,36 @@\n+# Copyright (c) 2009-2010 Satoshi Nakamoto\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+cmake_minimum_required (VERSION 2.6)\n+project (bitcoin)\n+set(CMAKE_BUILD_TYPE Release)\n+set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/Modules)\n+\n+find_package(Boost COMPONENTS system filesystem program_options thread REQUIRED)\n+find_package(wxWidgets 2.9 COMPONENTS base core REQUIRED)\n+find_package(BerkeleyDB 4.7 REQUIRED)\n+\n+set(COMMON_LIBS crypto ssl ${BerkeleyDB_LIBRARIES}\n+  ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_THREAD_LIBRARY})\n+\n+include_directories(${wxWidgets_INCLUDE_DIRS} ${BerkeleyDB_INCLUDE_DIR})\n+\n+add_definitions(-D__WXGTK__ -DNOPCH -DFOURWAYSSE2 -DUSE_SSL -Wno-invalid-offsetof)\n+\n+\n+add_library(btc db.cpp irc.cpp net.cpp rpc.cpp script.cpp sha256.cpp util.cpp)\n+\n+#add_library(sha256 sha256.cpp) -msse2 -march=amdfam10 from original makefile\n+add_subdirectory(cryptopp)\n+\n+add_library(btc_ui ui.cpp uibase.cpp init.cpp )\n+set_target_properties(btc_ui PROPERTIES COMPILE_FLAGS -DGUI)\n+\n+add_executable(bitcoind main.cpp init.cpp)\n+target_link_libraries(bitcoind btc cryptopp ${COMMON_LIBS})\n+\n+add_executable(bitcoin main.cpp init.cpp)\n+set_target_properties(bitcoin PROPERTIES COMPILE_FLAGS -DGUI)\n+target_link_libraries(bitcoin btc btc_ui cryptopp \n+  ${wxWidgets_LIBRARIES} ${COMMON_LIBS})"
      },
      {
        "sha": "b7b98b0fb876f02ddd08228ce0b5e0e6fefd7c47",
        "filename": "Modules/FindBerkeleyDB.cmake",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0070c947dbffc6aff923c310be0a74bf154e244/Modules/FindBerkeleyDB.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0070c947dbffc6aff923c310be0a74bf154e244/Modules/FindBerkeleyDB.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindBerkeleyDB.cmake?ref=e0070c947dbffc6aff923c310be0a74bf154e244",
        "patch": "@@ -0,0 +1,60 @@\n+# -*- cmake -*-\n+\n+# - Find BerkeleyDB\n+# Find the BerkeleyDB includes and library\n+# This module defines\n+#  DB_INCLUDE_DIR, where to find db.h, etc.\n+#  DB_LIBRARIES, the libraries needed to use BerkeleyDB.\n+#  DB_FOUND, If false, do not try to use BerkeleyDB.\n+# also defined, but not for general use are\n+#  DB_LIBRARY, where to find the BerkeleyDB library.\n+\n+\n+FIND_PATH(BerkeleyDB_INCLUDE_DIR db_cxx.h\n+/usr/local/include/db4\n+/usr/local/include\n+/usr/include/db4\n+/usr/include\n+/usr/local/BerkeleyDB.4.7/include\n+)\n+\n+SET(BerkeleyDB_NAMES ${BerkeleyDB_NAMES} db db_cxx)\n+\n+\n+if (BerkeleyDB_FIND_VERSION_MAJOR AND BerkeleyDB_FIND_VERSION_MINOR)\n+  set(NAME_EXTENSION -${BerkeleyDB_FIND_VERSION_MAJOR}.${BerkeleyDB_FIND_VERSION_MINOR})\n+elseif (BerkeleyDB_FIND_VERSION_MAJOR)\n+  set(NAME_EXTENSION -${BerkeleyDB_FIND_VERSION_MAJOR})\n+endif(BerkeleyDB_FIND_VERSION_MAJOR AND BerkeleyDB_FIND_VERSION_MINOR)\n+\n+if (NAME_EXTENSION)\n+  foreach (NAME ${BerkeleyDB_NAMES})\n+    set(NEW_NAMES ${NEW_NAMES} \"${NAME}${NAME_EXTENSION}\")\n+  endforeach (NAME)\n+  set (BerkeleyDB_NAMES ${NEW_NAMES})\n+endif (NAME_EXTENSION)\n+\n+\n+foreach(NAME ${BerkeleyDB_NAMES})\n+  FIND_LIBRARY(BerkeleyDB_LIBRARY${NAME}\n+    NAMES ${NAME}\n+    PATHS /usr/lib /usr/local/lib /usr/local/BerkeleyDB.4.7/lib\n+    )\n+  \n+  SET(BerkeleyDB_LIBRARIES ${BerkeleyDB_LIBRARIES} ${BerkeleyDB_LIBRARY${NAME}})\n+endforeach(NAME)\n+\n+# handle the QUIETLY and REQUIRED arguments and set JPEG_FOUND to TRUE if \n+# all listed variables are TRUE\n+INCLUDE(FindPackageHandleStandardArgs)\n+FIND_PACKAGE_HANDLE_STANDARD_ARGS(BerkeleyDB DEFAULT_MSG BerkeleyDB_LIBRARIES BerkeleyDB_INCLUDE_DIR)\n+\n+\n+# Deprecated declarations.\n+SET (NATIVE_BerkeleyDB_INCLUDE_PATH ${BerkeleyDB_INCLUDE_DIR} )\n+#GET_FILENAME_COMPONENT (NATIVE_BerkeleyDB_LIB_PATH ${BerkeleyDB_LIBRARY} PATH)\n+\n+MARK_AS_ADVANCED(\n+  BerkeleyDB_LIBRARIES\n+  BerkeleyDB_INCLUDE_DIR\n+  )"
      },
      {
        "sha": "ebe39854e013ab0f4d59b0efe22935179718e003",
        "filename": "cryptopp/CMakeLists.txt",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0070c947dbffc6aff923c310be0a74bf154e244/cryptopp/CMakeLists.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0070c947dbffc6aff923c310be0a74bf154e244/cryptopp/CMakeLists.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/cryptopp/CMakeLists.txt?ref=e0070c947dbffc6aff923c310be0a74bf154e244",
        "patch": "@@ -0,0 +1,7 @@\n+# Copyright (c) 2009-2010 Satoshi Nakamoto\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+\n+cmake_minimum_required (VERSION 2.6)\n+add_definitions(-msse2 -march=amdfam10)\n+add_library(cryptopp cpu.cpp sha.cpp)\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZThlOTdlZGI1YTYyNDRjMmExNDEwODQ5NmZlNzU2NzlkNGFjNmNk",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-09T22:33:01Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-09T22:33:01Z"
      },
      "message": "adding other CMake Modules from Mining builds. not used in the core build",
      "tree": {
        "sha": "47a6971d66cacb3b27be02893f4d53897fdd3e41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47a6971d66cacb3b27be02893f4d53897fdd3e41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0070c947dbffc6aff923c310be0a74bf154e244",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0070c947dbffc6aff923c310be0a74bf154e244",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0070c947dbffc6aff923c310be0a74bf154e244"
      }
    ],
    "stats": {
      "total": 1818,
      "additions": 1818,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a4e7dff638991cbd8b8623258f744e7e9386f562",
        "filename": "Modules/FindCUDA.cmake",
        "status": "added",
        "additions": 1288,
        "deletions": 0,
        "changes": 1288,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindCUDA.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindCUDA.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindCUDA.cmake?ref=1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
        "patch": "@@ -0,0 +1,1288 @@\n+# - Tools for building CUDA C files: libraries and build dependencies.\r\n+# This script locates the NVIDIA CUDA C tools. It should work on linux, windows,\r\n+# and mac and should be reasonably up to date with CUDA C releases.\r\n+#\r\n+# This script makes use of the standard find_package arguments of <VERSION>,\r\n+# REQUIRED and QUIET.  CUDA_FOUND will report if an acceptable version of CUDA\r\n+# was found.\r\n+#\r\n+# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the prefix\r\n+# cannot be determined by the location of nvcc in the system path and REQUIRED\r\n+# is specified to find_package(). To use a different installed version of the\r\n+# toolkit set the environment variable CUDA_BIN_PATH before running cmake\r\n+# (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default /usr/local/cuda)\r\n+# or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If you change the value of\r\n+# CUDA_TOOLKIT_ROOT_DIR, various components that depend on the path will be\r\n+# relocated.\r\n+#\r\n+# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\r\n+# platforms, or to use a cuda runtime not installed in the default location. In\r\n+# newer versions of the toolkit the cuda library is included with the graphics\r\n+# driver- be sure that the driver version matches what is needed by the cuda\r\n+# runtime version.\r\n+#\r\n+# The following variables affect the behavior of the macros in the script (in\r\n+# alphebetical order).  Note that any of these flags can be changed multiple\r\n+# times in the same directory before calling CUDA_ADD_EXECUTABLE,\r\n+# CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX or CUDA_WRAP_SRCS.\r\n+#\r\n+#  CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\r\n+#  -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\r\n+#     Note that making this different from the host code when generating object\r\n+#     or C files from CUDA code just won't work, because size_t gets defined by\r\n+#     nvcc in the generated source.  If you compile to PTX and then load the\r\n+#     file yourself, you can mix bit sizes between device and host.\r\n+#\r\n+#  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\r\n+#  -- Set to ON if you want the custom build rule to be attached to the source\r\n+#     file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\r\n+#     targets.\r\n+#\r\n+#     This allows the user to build the target from the CUDA file; however, bad\r\n+#     things can happen if the CUDA source file is added to multiple targets.\r\n+#     When performing parallel builds it is possible for the custom build\r\n+#     command to be run more than once and in parallel causing cryptic build\r\n+#     errors.  VS runs the rules for every source file in the target, and a\r\n+#     source can have only one rule no matter how many projects it is added to.\r\n+#     When the rule is run from multiple targets race conditions can occur on\r\n+#     the generated file.  Eventually everything will get built, but if the user\r\n+#     is unaware of this behavior, there may be confusion.  It would be nice if\r\n+#     this script could detect the reuse of source files across multiple targets\r\n+#     and turn the option off for the user, but no good solution could be found.\r\n+#\r\n+#  CUDA_BUILD_CUBIN (Default OFF)\r\n+#  -- Set to ON to enable and extra compilation pass with the -cubin option in\r\n+#     Device mode. The output is parsed and register, shared memory usage is\r\n+#     printed during build.\r\n+#\r\n+#  CUDA_BUILD_EMULATION (Default OFF for device mode)\r\n+#  -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\r\n+#     when CUDA_BUILD_EMULATION is TRUE.\r\n+#\r\n+#  CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\r\n+#  -- Set to the path you wish to have the generated files placed.  If it is\r\n+#     blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\r\n+#     Intermediate files will always be placed in\r\n+#     CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\r\n+#\r\n+#  CUDA_HOST_COMPILATION_CPP (Default ON)\r\n+#  -- Set to OFF for C compilation of host code.\r\n+#\r\n+#  CUDA_NVCC_FLAGS\r\n+#  CUDA_NVCC_FLAGS_<CONFIG>\r\n+#  -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\r\n+#     semi-colon delimited (e.g. --compiler-options;-Wall)\r\n+#\r\n+#  CUDA_PROPAGATE_HOST_FLAGS (Default ON)\r\n+#  -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\r\n+#     dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\r\n+#     host compiler through nvcc's -Xcompiler flag.  This helps make the\r\n+#     generated host code match the rest of the system better.  Sometimes\r\n+#     certain flags give nvcc problems, and this will help you turn the flag\r\n+#     propagation off.  This does not affect the flags supplied directly to nvcc\r\n+#     via CUDA_NVCC_FLAGS or through the OPTION flags specified through\r\n+#     CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\r\n+#     shared library compilation are not affected by this flag.\r\n+#\r\n+#  CUDA_VERBOSE_BUILD (Default OFF)\r\n+#  -- Set to ON to see all the commands used when building the CUDA file.  When\r\n+#     using a Makefile generator the value defaults to VERBOSE (run make\r\n+#     VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\r\n+#     always print the output.\r\n+#\r\n+# The script creates the following macros (in alphebetical order):\r\n+#\r\n+#  CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\r\n+#  -- Adds the cufft library to the target (can be any target).  Handles whether\r\n+#     you are in emulation mode or not.\r\n+#\r\n+#  CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\r\n+#  -- Adds the cublas library to the target (can be any target).  Handles\r\n+#     whether you are in emulation mode or not.\r\n+#\r\n+#  CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\r\n+#                       [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\r\n+#  -- Creates an executable \"cuda_target\" which is made up of the files\r\n+#     specified.  All of the non CUDA C files are compiled using the standard\r\n+#     build rules specified by CMAKE and the cuda files are compiled to object\r\n+#     files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\r\n+#     added automatically to include_directories().  Some standard CMake target\r\n+#     calls can be used on the target after calling this macro\r\n+#     (e.g. set_target_properties and target_link_libraries), but setting\r\n+#     properties that adjust compilation flags will not affect code compiled by\r\n+#     nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\r\n+#     CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\r\n+#\r\n+#  CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\r\n+#                    [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\r\n+#  -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\r\n+#\r\n+#  CUDA_BUILD_CLEAN_TARGET()\r\n+#  -- Creates a convience target that deletes all the dependency files\r\n+#     generated.  You should make clean after running this target to ensure the\r\n+#     dependency files get regenerated.\r\n+#\r\n+#  CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\r\n+#                [OPTIONS ...] )\r\n+#  -- Returns a list of generated files from the input source files to be used\r\n+#     with ADD_LIBRARY or ADD_EXECUTABLE.\r\n+#\r\n+#  CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\r\n+#  -- Returns a list of PTX files generated from the input source files.\r\n+#\r\n+#  CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\r\n+#  -- Sets the directories that should be passed to nvcc\r\n+#     (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\r\n+#     files.\r\n+#\r\n+#  CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\r\n+#                   [STATIC | SHARED | MODULE] [OPTIONS ...] )\r\n+#  -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\r\n+#     CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\r\n+#     function under the hood.\r\n+#\r\n+#     Given the list of files (file0 file1 ... fileN) this macro generates\r\n+#     custom commands that generate either PTX or linkable objects (use \"PTX\" or\r\n+#     \"OBJ\" for the format argument to switch).  Files that don't end with .cu\r\n+#     or have the HEADER_FILE_ONLY property are ignored.\r\n+#\r\n+#     The arguments passed in after OPTIONS are extra command line options to\r\n+#     give to nvcc.  You can also specify per configuration options by\r\n+#     specifying the name of the configuration followed by the options.  General\r\n+#     options must preceed configuration specific options.  Not all\r\n+#     configurations need to be specified, only the ones provided will be used.\r\n+#\r\n+#        OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\r\n+#        DEBUG -g\r\n+#        RELEASE --use_fast_math\r\n+#        RELWITHDEBINFO --use_fast_math;-g\r\n+#        MINSIZEREL --use_fast_math\r\n+#\r\n+#     For certain configurations (namely VS generating object files with\r\n+#     CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\r\n+#     be produced for the given cuda file.  This is because when you add the\r\n+#     cuda file to Visual Studio it knows that this file produces an object file\r\n+#     and will link in the resulting object file automatically.\r\n+#\r\n+#     This script will also generate a separate cmake script that is used at\r\n+#     build time to invoke nvcc.  This is for serveral reasons.\r\n+#\r\n+#       1. nvcc can return negative numbers as return values which confuses\r\n+#       Visual Studio into thinking that the command succeeded.  The script now\r\n+#       checks the error codes and produces errors when there was a problem.\r\n+#\r\n+#       2. nvcc has been known to not delete incomplete results when it\r\n+#       encounters problems.  This confuses build systems into thinking the\r\n+#       target was generated when in fact an unusable file exists.  The script\r\n+#       now deletes the output files if there was an error.\r\n+#\r\n+#       3. By putting all the options that affect the build into a file and then\r\n+#       make the build rule dependent on the file, the output files will be\r\n+#       regenerated when the options change.\r\n+#\r\n+#     This script also looks at optional arguments STATIC, SHARED, or MODULE to\r\n+#     determine when to target the object compilation for a shared library.\r\n+#     BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\r\n+#     CUDA_ADD_LIBRARY.  On some systems special flags are added for building\r\n+#     objects intended for shared libraries.  A preprocessor macro,\r\n+#     <target_name>_EXPORTS is defined when a shared library compilation is\r\n+#     detected.\r\n+#\r\n+#     Flags passed into add_definitions with -D or /D are passed along to nvcc.\r\n+#\r\n+# The script defines the following variables:\r\n+#\r\n+#  CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\r\n+#  CUDA_VERSION_MINOR    -- The minor version.\r\n+#  CUDA_VERSION\r\n+#  CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\r\n+#\r\n+#  CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\r\n+#  CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\r\n+#                           SDK.  This script will not directly support finding\r\n+#                           specific libraries or headers, as that isn't\r\n+#                           supported by NVIDIA.  If you want to change\r\n+#                           libraries when the path changes see the\r\n+#                           FindCUDA.cmake script for an example of how to clear\r\n+#                           these variables.  There are also examples of how to\r\n+#                           use the CUDA_SDK_ROOT_DIR to locate headers or\r\n+#                           libraries, if you so choose (at your own risk).\r\n+#  CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\r\n+#                           for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\r\n+#  CUDA_LIBRARIES        -- Cuda RT library.\r\n+#  CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\r\n+#                           implementation (alternative to:\r\n+#                           CUDA_ADD_CUFFT_TO_TARGET macro)\r\n+#  CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\r\n+#                           implementation (alterative to:\r\n+#                           CUDA_ADD_CUBLAS_TO_TARGET macro).\r\n+#\r\n+#\r\n+#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n+#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n+#\r\n+#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n+#\r\n+#  Copyright (c) 2007-2009\r\n+#  Scientific Computing and Imaging Institute, University of Utah\r\n+#\r\n+#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n+#  for the text of the license.\r\n+\r\n+# The MIT License\r\n+#\r\n+# License for the specific language governing rights and limitations under\r\n+# Permission is hereby granted, free of charge, to any person obtaining a\r\n+# copy of this software and associated documentation files (the \"Software\"),\r\n+# to deal in the Software without restriction, including without limitation\r\n+# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n+# and/or sell copies of the Software, and to permit persons to whom the\r\n+# Software is furnished to do so, subject to the following conditions:\r\n+#\r\n+# The above copyright notice and this permission notice shall be included\r\n+# in all copies or substantial portions of the Software.\r\n+#\r\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n+# DEALINGS IN THE SOFTWARE.\r\n+#\r\n+###############################################################################\r\n+\r\n+# FindCUDA.cmake\r\n+\r\n+# We need to have at least this version to support the VERSION_LESS argument to 'if' (2.6.2) and unset (2.6.3)\r\n+cmake_policy(PUSH)\r\n+cmake_minimum_required(VERSION 2.6.3)\r\n+cmake_policy(POP)\r\n+\r\n+# This macro helps us find the location of helper files we will need the full path to\r\n+macro(CUDA_FIND_HELPER_FILE _name _extension)\r\n+  set(_full_name \"${_name}.${_extension}\")\r\n+  # CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\r\n+  # processed.  Using this variable, we can pull out the current path, and\r\n+  # provide a way to get access to the other files we need local to here.\r\n+  get_filename_component(CMAKE_CURRENT_LIST_DIR \"${CMAKE_CURRENT_LIST_FILE}\" PATH)\r\n+  find_file(CUDA_${_name} ${_full_name} PATHS ${CMAKE_CURRENT_LIST_DIR}/FindCUDA NO_DEFAULT_PATH)\r\n+  if(NOT CUDA_${_name})\r\n+    set(error_message \"${_full_name} not found in CMAKE_MODULE_PATH\")\r\n+    if(CUDA_FIND_REQUIRED)\r\n+      message(FATAL_ERROR \"${error_message}\")\r\n+    else(CUDA_FIND_REQUIRED)\r\n+      if(NOT CUDA_FIND_QUIETLY)\r\n+        message(STATUS \"${error_message}\")\r\n+      endif(NOT CUDA_FIND_QUIETLY)\r\n+    endif(CUDA_FIND_REQUIRED)\r\n+  endif(NOT CUDA_${_name})\r\n+  # Set this variable as internal, so the user isn't bugged with it.\r\n+  set(CUDA_${_name} ${CUDA_${_name}} CACHE INTERNAL \"Location of ${_full_name}\" FORCE)\r\n+endmacro(CUDA_FIND_HELPER_FILE)\r\n+\r\n+#####################################################################\r\n+## CUDA_INCLUDE_NVCC_DEPENDENCIES\r\n+##\r\n+\r\n+# So we want to try and include the dependency file if it exists.  If\r\n+# it doesn't exist then we need to create an empty one, so we can\r\n+# include it.\r\n+\r\n+# If it does exist, then we need to check to see if all the files it\r\n+# depends on exist.  If they don't then we should clear the dependency\r\n+# file and regenerate it later.  This covers the case where a header\r\n+# file has disappeared or moved.\r\n+\r\n+macro(CUDA_INCLUDE_NVCC_DEPENDENCIES dependency_file)\r\n+  set(CUDA_NVCC_DEPEND)\r\n+  set(CUDA_NVCC_DEPEND_REGENERATE FALSE)\r\n+\r\n+\r\n+  # Include the dependency file.  Create it first if it doesn't exist .  The\r\n+  # INCLUDE puts a dependency that will force CMake to rerun and bring in the\r\n+  # new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\r\n+  # hours figuring out why it didn't work.\r\n+  if(NOT EXISTS ${dependency_file})\r\n+    file(WRITE ${dependency_file} \"#FindCUDA.cmake generated file.  Do not edit.\\n\")\r\n+  endif()\r\n+  # Always include this file to force CMake to run again next\r\n+  # invocation and rebuild the dependencies.\r\n+  #message(\"including dependency_file = ${dependency_file}\")\r\n+  include(${dependency_file})\r\n+\r\n+  # Now we need to verify the existence of all the included files\r\n+  # here.  If they aren't there we need to just blank this variable and\r\n+  # make the file regenerate again.\r\n+#   if(DEFINED CUDA_NVCC_DEPEND)\r\n+#     message(\"CUDA_NVCC_DEPEND set\")\r\n+#   else()\r\n+#     message(\"CUDA_NVCC_DEPEND NOT set\")\r\n+#   endif()\r\n+  if(CUDA_NVCC_DEPEND)\r\n+    #message(\"CUDA_NVCC_DEPEND true\")\r\n+    foreach(f ${CUDA_NVCC_DEPEND})\r\n+      #message(\"searching for ${f}\")\r\n+      if(NOT EXISTS ${f})\r\n+        #message(\"file ${f} not found\")\r\n+        set(CUDA_NVCC_DEPEND_REGENERATE TRUE)\r\n+      endif()\r\n+    endforeach(f)\r\n+  else(CUDA_NVCC_DEPEND)\r\n+    #message(\"CUDA_NVCC_DEPEND false\")\r\n+    # No dependencies, so regenerate the file.\r\n+    set(CUDA_NVCC_DEPEND_REGENERATE TRUE)\r\n+  endif(CUDA_NVCC_DEPEND)\r\n+\r\n+  #message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\r\n+  # No incoming dependencies, so we need to generate them.  Make the\r\n+  # output depend on the dependency file itself, which should cause the\r\n+  # rule to re-run.\r\n+  if(CUDA_NVCC_DEPEND_REGENERATE)\r\n+    file(WRITE ${dependency_file} \"#FindCUDA.cmake generated file.  Do not edit.\\n\")\r\n+  endif(CUDA_NVCC_DEPEND_REGENERATE)\r\n+\r\n+endmacro(CUDA_INCLUDE_NVCC_DEPENDENCIES)\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# Setup variables' defaults\r\n+###############################################################################\r\n+###############################################################################\r\n+\r\n+# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\r\n+if(CMAKE_SIZEOF_VOID_P EQUAL 8)\r\n+  set(CUDA_64_BIT_DEVICE_CODE_DEFAULT ON)\r\n+else()\r\n+  set(CUDA_64_BIT_DEVICE_CODE_DEFAULT OFF)\r\n+endif()\r\n+option(CUDA_64_BIT_DEVICE_CODE \"Compile device code in 64 bit mode\" ${CUDA_64_BIT_DEVICE_CODE_DEFAULT})\r\n+\r\n+# Attach the build rule to the source file in VS.  This option\r\n+option(CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE \"Attach the build rule to the CUDA source file.  Enable only when the CUDA source file is added to at most one target.\" ON)\r\n+\r\n+# Prints out extra information about the cuda file during compilation\r\n+option(CUDA_BUILD_CUBIN \"Generate and parse .cubin files in Device mode.\" OFF)\r\n+\r\n+# Set whether we are using emulation or device mode.\r\n+option(CUDA_BUILD_EMULATION \"Build in Emulation mode\" OFF)\r\n+\r\n+# Where to put the generated output.\r\n+set(CUDA_GENERATED_OUTPUT_DIR \"\" CACHE PATH \"Directory to put all the output files.  If blank it will default to the CMAKE_CURRENT_BINARY_DIR\")\r\n+\r\n+# Parse HOST_COMPILATION mode.\r\n+option(CUDA_HOST_COMPILATION_CPP \"Generated file extension\" ON)\r\n+\r\n+# Extra user settable flags\r\n+set(CUDA_NVCC_FLAGS \"\" CACHE STRING \"Semi-colon delimit multiple arguments.\")\r\n+\r\n+# Propagate the host flags to the host compiler via -Xcompiler\r\n+option(CUDA_PROPAGATE_HOST_FLAGS \"Propage C/CXX_FLAGS and friends to the host compiler via -Xcompile\" ON)\r\n+\r\n+# Specifies whether the commands used when compiling the .cu file will be printed out.\r\n+option(CUDA_VERBOSE_BUILD \"Print out the commands run while compiling the CUDA source file.  With the Makefile generator this defaults to VERBOSE variable specified on the command line, but can be forced on with this option.\" OFF)\r\n+\r\n+mark_as_advanced(\r\n+  CUDA_64_BIT_DEVICE_CODE\r\n+  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE\r\n+  CUDA_GENERATED_OUTPUT_DIR\r\n+  CUDA_HOST_COMPILATION_CPP\r\n+  CUDA_NVCC_FLAGS\r\n+  CUDA_PROPAGATE_HOST_FLAGS\r\n+  )\r\n+\r\n+# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\r\n+# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\r\n+# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\r\n+# for completeness.  We need run this loop in order to accomodate the addition\r\n+# of extra configuration types.  Duplicate entries will be removed by\r\n+# REMOVE_DUPLICATES.\r\n+set(CUDA_configuration_types ${CMAKE_CONFIGURATION_TYPES} ${CMAKE_BUILD_TYPE} Debug MinSizeRel Release RelWithDebInfo)\r\n+list(REMOVE_DUPLICATES CUDA_configuration_types)\r\n+foreach(config ${CUDA_configuration_types})\r\n+    string(TOUPPER ${config} config_upper)\r\n+    set(CUDA_NVCC_FLAGS_${config_upper} \"\" CACHE STRING \"Semi-colon delimit multiple arguments.\")\r\n+    mark_as_advanced(CUDA_NVCC_FLAGS_${config_upper})\r\n+endforeach()\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# Locate CUDA, Set Build Type, etc.\r\n+###############################################################################\r\n+###############################################################################\r\n+\r\n+# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\r\n+# if they have then clear the cache variables, so that will be detected again.\r\n+if(NOT \"${CUDA_TOOLKIT_ROOT_DIR}\" STREQUAL \"${CUDA_TOOLKIT_ROOT_DIR_INTERNAL}\")\r\n+  unset(CUDA_NVCC_EXECUTABLE CACHE)\r\n+  unset(CUDA_VERSION CACHE)\r\n+  unset(CUDA_TOOLKIT_INCLUDE CACHE)\r\n+  unset(CUDA_CUDART_LIBRARY CACHE)\r\n+  if(CUDA_VERSION VERSION_EQUAL \"3.0\")\r\n+    # This only existed in the 3.0 version of the CUDA toolkit\r\n+    unset(CUDA_CUDARTEMU_LIBRARY CACHE)\r\n+  endif()\r\n+  unset(CUDA_CUDA_LIBRARY CACHE)\r\n+  unset(CUDA_cublas_LIBRARY CACHE)\r\n+  unset(CUDA_cublasemu_LIBRARY CACHE)\r\n+  unset(CUDA_cufft_LIBRARY CACHE)\r\n+  unset(CUDA_cufftemu_LIBRARY CACHE)\r\n+endif()\r\n+\r\n+if(NOT \"${CUDA_SDK_ROOT_DIR}\" STREQUAL \"${CUDA_SDK_ROOT_DIR_INTERNAL}\")\r\n+  # No specific variables to catch.  Use this kind of code before calling\r\n+  # find_package(CUDA) to clean up any variables that may depend on this path.\r\n+\r\n+  #   unset(MY_SPECIAL_CUDA_SDK_INCLUDE_DIR CACHE)\r\n+  #   unset(MY_SPECIAL_CUDA_SDK_LIBRARY CACHE)\r\n+endif()\r\n+\r\n+# Search for the cuda distribution.\r\n+if(NOT CUDA_TOOLKIT_ROOT_DIR)\r\n+\r\n+  # Search in the CUDA_BIN_PATH first.\r\n+  find_path(CUDA_TOOLKIT_ROOT_DIR\r\n+    NAMES nvcc nvcc.exe\r\n+    PATHS ENV CUDA_BIN_PATH\r\n+    DOC \"Toolkit location.\"\r\n+    NO_DEFAULT_PATH\r\n+    )\r\n+  # Now search default paths\r\n+  find_path(CUDA_TOOLKIT_ROOT_DIR\r\n+    NAMES nvcc nvcc.exe\r\n+    PATHS /usr/local/bin\r\n+          /usr/local/cuda/bin\r\n+    DOC \"Toolkit location.\"\r\n+    )\r\n+\r\n+  if (CUDA_TOOLKIT_ROOT_DIR)\r\n+    string(REGEX REPLACE \"[/\\\\\\\\]?bin[64]*[/\\\\\\\\]?$\" \"\" CUDA_TOOLKIT_ROOT_DIR ${CUDA_TOOLKIT_ROOT_DIR})\r\n+    # We need to force this back into the cache.\r\n+    set(CUDA_TOOLKIT_ROOT_DIR ${CUDA_TOOLKIT_ROOT_DIR} CACHE PATH \"Toolkit location.\" FORCE)\r\n+  endif(CUDA_TOOLKIT_ROOT_DIR)\r\n+  if (NOT EXISTS ${CUDA_TOOLKIT_ROOT_DIR})\r\n+    if(CUDA_FIND_REQUIRED)\r\n+      message(FATAL_ERROR \"Specify CUDA_TOOLKIT_ROOT_DIR\")\r\n+    elseif(NOT CUDA_FIND_QUIETLY)\r\n+      message(\"CUDA_TOOLKIT_ROOT_DIR not found or specified\")\r\n+    endif()\r\n+  endif (NOT EXISTS ${CUDA_TOOLKIT_ROOT_DIR})\r\n+endif (NOT CUDA_TOOLKIT_ROOT_DIR)\r\n+\r\n+# CUDA_NVCC_EXECUTABLE\r\n+find_program(CUDA_NVCC_EXECUTABLE\r\n+  NAMES nvcc\r\n+  PATHS \"${CUDA_TOOLKIT_ROOT_DIR}/bin\"\r\n+        \"${CUDA_TOOLKIT_ROOT_DIR}/bin64\"\r\n+  ENV CUDA_BIN_PATH\r\n+  NO_DEFAULT_PATH\r\n+  )\r\n+# Search default search paths, after we search our own set of paths.\r\n+find_program(CUDA_NVCC_EXECUTABLE nvcc)\r\n+mark_as_advanced(CUDA_NVCC_EXECUTABLE)\r\n+\r\n+if(CUDA_NVCC_EXECUTABLE AND NOT CUDA_VERSION)\r\n+  # Compute the version.\r\n+  execute_process (COMMAND ${CUDA_NVCC_EXECUTABLE} \"--version\" OUTPUT_VARIABLE NVCC_OUT)\r\n+  string(REGEX REPLACE \".*release ([0-9]+)\\\\.([0-9]+).*\" \"\\\\1\" CUDA_VERSION_MAJOR ${NVCC_OUT})\r\n+  string(REGEX REPLACE \".*release ([0-9]+)\\\\.([0-9]+).*\" \"\\\\2\" CUDA_VERSION_MINOR ${NVCC_OUT})\r\n+  set(CUDA_VERSION \"${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}\" CACHE STRING \"Version of CUDA as computed from nvcc.\")\r\n+  mark_as_advanced(CUDA_VERSION)\r\n+else()\r\n+  # Need to set these based off of the cached value\r\n+  string(REGEX REPLACE \"([0-9]+)\\\\.([0-9]+).*\" \"\\\\1\" CUDA_VERSION_MAJOR \"${CUDA_VERSION}\")\r\n+  string(REGEX REPLACE \"([0-9]+)\\\\.([0-9]+).*\" \"\\\\2\" CUDA_VERSION_MINOR \"${CUDA_VERSION}\")\r\n+endif()\r\n+\r\n+# Always set this convenience variable\r\n+set(CUDA_VERSION_STRING \"${CUDA_VERSION}\")\r\n+\r\n+# Here we need to determine if the version we found is acceptable.  We will\r\n+# assume that is unless CUDA_FIND_VERSION_EXACT or CUDA_FIND_VERSION is\r\n+# specified.  The presence of either of these options checks the version\r\n+# string and signals if the version is acceptable or not.\r\n+set(_cuda_version_acceptable TRUE)\r\n+#\r\n+if(CUDA_FIND_VERSION_EXACT AND NOT CUDA_VERSION VERSION_EQUAL CUDA_FIND_VERSION)\r\n+  set(_cuda_version_acceptable FALSE)\r\n+endif()\r\n+#\r\n+if(CUDA_FIND_VERSION       AND     CUDA_VERSION VERSION_LESS  CUDA_FIND_VERSION)\r\n+  set(_cuda_version_acceptable FALSE)\r\n+endif()\r\n+#\r\n+if(NOT _cuda_version_acceptable)\r\n+  set(_cuda_error_message \"Requested CUDA version ${CUDA_FIND_VERSION}, but found unacceptable version ${CUDA_VERSION}\")\r\n+  if(CUDA_FIND_REQUIRED)\r\n+    message(\"${_cuda_error_message}\")\r\n+  elseif(NOT CUDA_FIND_QUIETLY)\r\n+    message(\"${_cuda_error_message}\")\r\n+  endif()\r\n+endif()\r\n+\r\n+# CUDA_TOOLKIT_INCLUDE\r\n+find_path(CUDA_TOOLKIT_INCLUDE\r\n+  device_functions.h # Header included in toolkit\r\n+  PATHS \"${CUDA_TOOLKIT_ROOT_DIR}/include\"\r\n+  ENV CUDA_INC_PATH\r\n+  NO_DEFAULT_PATH\r\n+  )\r\n+# Search default search paths, after we search our own set of paths.\r\n+find_path(CUDA_TOOLKIT_INCLUDE device_functions.h)\r\n+mark_as_advanced(CUDA_TOOLKIT_INCLUDE)\r\n+\r\n+# Set the user list of include dir to nothing to initialize it.\r\n+set (CUDA_NVCC_INCLUDE_ARGS_USER \"\")\r\n+set (CUDA_INCLUDE_DIRS ${CUDA_TOOLKIT_INCLUDE})\r\n+\r\n+macro(FIND_LIBRARY_LOCAL_FIRST _var _names _doc)\r\n+  if(CMAKE_SIZEOF_VOID_P EQUAL 8)\r\n+    set(_cuda_64bit_lib_dir \"${CUDA_TOOLKIT_ROOT_DIR}/lib64\")\r\n+  endif()\r\n+  find_library(${_var}\r\n+    NAMES ${_names}\r\n+    PATHS ${_cuda_64bit_lib_dir}\r\n+          \"${CUDA_TOOLKIT_ROOT_DIR}/lib\"\r\n+    ENV CUDA_LIB_PATH\r\n+    DOC ${_doc}\r\n+    NO_DEFAULT_PATH\r\n+    )\r\n+  # Search default search paths, after we search our own set of paths.\r\n+  find_library(${_var} NAMES ${_names} DOC ${_doc})\r\n+endmacro()\r\n+\r\n+# CUDA_LIBRARIES\r\n+find_library_local_first(CUDA_CUDART_LIBRARY cudart \"\\\"cudart\\\" library\")\r\n+if(CUDA_VERSION VERSION_EQUAL \"3.0\")\r\n+  # The cudartemu library only existed for the 3.0 version of CUDA.\r\n+  find_library_local_first(CUDA_CUDARTEMU_LIBRARY cudartemu \"\\\"cudartemu\\\" library\")\r\n+  mark_as_advanced(\r\n+    CUDA_CUDARTEMU_LIBRARY\r\n+    )\r\n+endif()\r\n+# If we are using emulation mode and we found the cudartemu library then use\r\n+# that one instead of cudart.\r\n+if(CUDA_BUILD_EMULATION AND CUDA_CUDARTEMU_LIBRARY)\r\n+  set(CUDA_LIBRARIES ${CUDA_CUDARTEMU_LIBRARY})\r\n+else()\r\n+  set(CUDA_LIBRARIES ${CUDA_CUDART_LIBRARY})\r\n+endif()\r\n+if(APPLE)\r\n+  # We need to add the path to cudart to the linker using rpath, since the\r\n+  # library name for the cuda libraries is prepended with @rpath.\r\n+  if(CUDA_BUILD_EMULATION AND CUDA_CUDARTEMU_LIBRARY)\r\n+    get_filename_component(_cuda_path_to_cudart \"${CUDA_CUDARTEMU_LIBRARY}\" PATH)\r\n+  else()\r\n+    get_filename_component(_cuda_path_to_cudart \"${CUDA_CUDART_LIBRARY}\" PATH)\r\n+  endif()\r\n+  if(_cuda_path_to_cudart)\r\n+    list(APPEND CUDA_LIBRARIES -Wl,-rpath \"-Wl,${_cuda_path_to_cudart}\")\r\n+  endif()\r\n+endif()\r\n+\r\n+# 1.1 toolkit on linux doesn't appear to have a separate library on\r\n+# some platforms.\r\n+find_library_local_first(CUDA_CUDA_LIBRARY cuda \"\\\"cuda\\\" library (older versions only).\")\r\n+\r\n+# Add cuda library to the link line only if it is found.\r\n+if (CUDA_CUDA_LIBRARY)\r\n+  set(CUDA_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_CUDA_LIBRARY})\r\n+endif(CUDA_CUDA_LIBRARY)\r\n+\r\n+mark_as_advanced(\r\n+  CUDA_CUDA_LIBRARY\r\n+  CUDA_CUDART_LIBRARY\r\n+  )\r\n+\r\n+#######################\r\n+# Look for some of the toolkit helper libraries\r\n+macro(FIND_CUDA_HELPER_LIBS _name)\r\n+  find_library_local_first(CUDA_${_name}_LIBRARY ${_name} \"\\\"${_name}\\\" library\")\r\n+  mark_as_advanced(CUDA_${_name}_LIBRARY)\r\n+endmacro(FIND_CUDA_HELPER_LIBS)\r\n+\r\n+# Search for cufft and cublas libraries.\r\n+find_cuda_helper_libs(cufftemu)\r\n+find_cuda_helper_libs(cublasemu)\r\n+find_cuda_helper_libs(cufft)\r\n+find_cuda_helper_libs(cublas)\r\n+\r\n+if (CUDA_BUILD_EMULATION)\r\n+  set(CUDA_CUFFT_LIBRARIES ${CUDA_cufftemu_LIBRARY})\r\n+  set(CUDA_CUBLAS_LIBRARIES ${CUDA_cublasemu_LIBRARY})\r\n+else()\r\n+  set(CUDA_CUFFT_LIBRARIES ${CUDA_cufft_LIBRARY})\r\n+  set(CUDA_CUBLAS_LIBRARIES ${CUDA_cublas_LIBRARY})\r\n+endif()\r\n+\r\n+########################\r\n+# Look for the SDK stuff\r\n+find_path(CUDA_SDK_ROOT_DIR common/inc/cutil.h\r\n+  \"$ENV{NVSDKCUDA_ROOT}\"\r\n+  \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\NVIDIA Corporation\\\\Installed Products\\\\NVIDIA SDK 10\\\\Compute;InstallDir]\"\r\n+  \"/Developer/GPU\\ Computing/C\"\r\n+  )\r\n+\r\n+# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\r\n+# environment variables.\r\n+set(CUDA_SDK_SEARCH_PATH\r\n+  \"${CUDA_SDK_ROOT_DIR}\"\r\n+  \"${CUDA_TOOLKIT_ROOT_DIR}/local/NVSDK0.2\"\r\n+  \"${CUDA_TOOLKIT_ROOT_DIR}/NVSDK0.2\"\r\n+  \"${CUDA_TOOLKIT_ROOT_DIR}/NV_CUDA_SDK\"\r\n+  \"$ENV{HOME}/NVIDIA_CUDA_SDK\"\r\n+  \"$ENV{HOME}/NVIDIA_CUDA_SDK_MACOSX\"\r\n+  \"/Developer/CUDA\"\r\n+  )\r\n+\r\n+# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\r\n+\r\n+# find_path(CUDA_CUT_INCLUDE_DIR\r\n+#   cutil.h\r\n+#   PATHS ${CUDA_SDK_SEARCH_PATH}\r\n+#   PATH_SUFFIXES \"common/inc\"\r\n+#   DOC \"Location of cutil.h\"\r\n+#   NO_DEFAULT_PATH\r\n+#   )\r\n+# # Now search system paths\r\n+# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\r\n+\r\n+# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\r\n+\r\n+\r\n+# Example of how to find a library in the CUDA_SDK_ROOT_DIR\r\n+\r\n+# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\r\n+# # to get these confused, so we are setting the name based on the word size of\r\n+# # the build.\r\n+\r\n+# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\r\n+#   set(cuda_cutil_name cutil64)\r\n+# else(CMAKE_SIZEOF_VOID_P EQUAL 8)\r\n+#   set(cuda_cutil_name cutil32)\r\n+# endif(CMAKE_SIZEOF_VOID_P EQUAL 8)\r\n+\r\n+# find_library(CUDA_CUT_LIBRARY\r\n+#   NAMES cutil ${cuda_cutil_name}\r\n+#   PATHS ${CUDA_SDK_SEARCH_PATH}\r\n+#   # The new version of the sdk shows up in common/lib, but the old one is in lib\r\n+#   PATH_SUFFIXES \"common/lib\" \"lib\"\r\n+#   DOC \"Location of cutil library\"\r\n+#   NO_DEFAULT_PATH\r\n+#   )\r\n+# # Now search system paths\r\n+# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\r\n+# mark_as_advanced(CUDA_CUT_LIBRARY)\r\n+# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\r\n+\r\n+\r\n+\r\n+#############################\r\n+# Check for required components\r\n+set(CUDA_FOUND TRUE)\r\n+\r\n+set(CUDA_TOOLKIT_ROOT_DIR_INTERNAL \"${CUDA_TOOLKIT_ROOT_DIR}\" CACHE INTERNAL\r\n+  \"This is the value of the last time CUDA_TOOLKIT_ROOT_DIR was set successfully.\" FORCE)\r\n+set(CUDA_SDK_ROOT_DIR_INTERNAL \"${CUDA_SDK_ROOT_DIR}\" CACHE INTERNAL\r\n+  \"This is the value of the last time CUDA_SDK_ROOT_DIR was set successfully.\" FORCE)\r\n+\r\n+include(FindPackageHandleStandardArgs)\r\n+find_package_handle_standard_args(CUDA DEFAULT_MSG\r\n+  CUDA_TOOLKIT_ROOT_DIR\r\n+  CUDA_NVCC_EXECUTABLE\r\n+  CUDA_INCLUDE_DIRS\r\n+  CUDA_CUDART_LIBRARY\r\n+  _cuda_version_acceptable\r\n+  )\r\n+\r\n+\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# Macros\r\n+###############################################################################\r\n+###############################################################################\r\n+\r\n+###############################################################################\r\n+# Add include directories to pass to the nvcc command.\r\n+macro(CUDA_INCLUDE_DIRECTORIES)\r\n+  foreach(dir ${ARGN})\r\n+    list(APPEND CUDA_NVCC_INCLUDE_ARGS_USER \"-I${dir}\")\r\n+  endforeach(dir ${ARGN})\r\n+endmacro(CUDA_INCLUDE_DIRECTORIES)\r\n+\r\n+\r\n+##############################################################################\r\n+cuda_find_helper_file(parse_cubin cmake)\r\n+cuda_find_helper_file(make2cmake cmake)\r\n+cuda_find_helper_file(run_nvcc cmake)\r\n+\r\n+##############################################################################\r\n+# Separate the OPTIONS out from the sources\r\n+#\r\n+macro(CUDA_GET_SOURCES_AND_OPTIONS _sources _cmake_options _options)\r\n+  set( ${_sources} )\r\n+  set( ${_cmake_options} )\r\n+  set( ${_options} )\r\n+  set( _found_options FALSE )\r\n+  foreach(arg ${ARGN})\r\n+    if(\"${arg}\" STREQUAL \"OPTIONS\")\r\n+      set( _found_options TRUE )\r\n+    elseif(\r\n+        \"${arg}\" STREQUAL \"WIN32\" OR\r\n+        \"${arg}\" STREQUAL \"MACOSX_BUNDLE\" OR\r\n+        \"${arg}\" STREQUAL \"EXCLUDE_FROM_ALL\" OR\r\n+        \"${arg}\" STREQUAL \"STATIC\" OR\r\n+        \"${arg}\" STREQUAL \"SHARED\" OR\r\n+        \"${arg}\" STREQUAL \"MODULE\"\r\n+        )\r\n+      list(APPEND ${_cmake_options} \"${arg}\")\r\n+    else()\r\n+      if ( _found_options )\r\n+        list(APPEND ${_options} \"${arg}\")\r\n+      else()\r\n+        # Assume this is a file\r\n+        list(APPEND ${_sources} \"${arg}\")\r\n+      endif()\r\n+    endif()\r\n+  endforeach()\r\n+endmacro()\r\n+\r\n+##############################################################################\r\n+# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\r\n+#\r\n+macro(CUDA_PARSE_NVCC_OPTIONS _option_prefix)\r\n+  set( _found_config )\r\n+  foreach(arg ${ARGN})\r\n+    # Determine if we are dealing with a perconfiguration flag\r\n+    foreach(config ${CUDA_configuration_types})\r\n+      string(TOUPPER ${config} config_upper)\r\n+      if (\"${arg}\" STREQUAL \"${config_upper}\")\r\n+        set( _found_config _${arg})\r\n+        # Set arg to nothing to keep it from being processed further\r\n+        set( arg )\r\n+      endif()\r\n+    endforeach()\r\n+\r\n+    if ( arg )\r\n+      list(APPEND ${_option_prefix}${_found_config} \"${arg}\")\r\n+    endif()\r\n+  endforeach()\r\n+endmacro()\r\n+\r\n+##############################################################################\r\n+# Helper to add the include directory for CUDA only once\r\n+function(CUDA_ADD_CUDA_INCLUDE_ONCE)\r\n+  get_directory_property(_include_directories INCLUDE_DIRECTORIES)\r\n+  set(_add TRUE)\r\n+  if(_include_directories)\r\n+    foreach(dir ${_include_directories})\r\n+      if(\"${dir}\" STREQUAL \"${CUDA_INCLUDE_DIRS}\")\r\n+        set(_add FALSE)\r\n+      endif()\r\n+    endforeach()\r\n+  endif()\r\n+  if(_add)\r\n+    include_directories(${CUDA_INCLUDE_DIRS})\r\n+  endif()\r\n+endfunction()\r\n+\r\n+function(CUDA_BUILD_SHARED_LIBRARY shared_flag)\r\n+  set(cmake_args ${ARGN})\r\n+  # If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\r\n+  # add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\r\n+  list(FIND cmake_args SHARED _cuda_found_SHARED)\r\n+  list(FIND cmake_args MODULE _cuda_found_MODULE)\r\n+  list(FIND cmake_args STATIC _cuda_found_STATIC)\r\n+  if( _cuda_found_SHARED GREATER -1 OR\r\n+      _cuda_found_MODULE GREATER -1 OR\r\n+      _cuda_found_STATIC GREATER -1)\r\n+    set(_cuda_build_shared_libs)\r\n+  else()\r\n+    if (BUILD_SHARED_LIBS)\r\n+      set(_cuda_build_shared_libs SHARED)\r\n+    else()\r\n+      set(_cuda_build_shared_libs STATIC)\r\n+    endif()\r\n+  endif()\r\n+  set(${shared_flag} ${_cuda_build_shared_libs} PARENT_SCOPE)\r\n+endfunction()\r\n+\r\n+##############################################################################\r\n+# This helper macro populates the following variables and setups up custom\r\n+# commands and targets to invoke the nvcc compiler to generate C or PTX source\r\n+# dependant upon the format parameter.  The compiler is invoked once with -M\r\n+# to generate a dependency file and a second time with -cuda or -ptx to generate\r\n+# a .cpp or .ptx file.\r\n+# INPUT:\r\n+#   cuda_target         - Target name\r\n+#   format              - PTX or OBJ\r\n+#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\r\n+#   OPTIONS             - Extra options to NVCC\r\n+# OUTPUT:\r\n+#   generated_files     - List of generated files\r\n+##############################################################################\r\n+##############################################################################\r\n+\r\n+macro(CUDA_WRAP_SRCS cuda_target format generated_files)\r\n+\r\n+  if( ${format} MATCHES \"PTX\" )\r\n+    set( compile_to_ptx ON )\r\n+  elseif( ${format} MATCHES \"OBJ\")\r\n+    set( compile_to_ptx OFF )\r\n+  else()\r\n+    message( FATAL_ERROR \"Invalid format flag passed to CUDA_WRAP_SRCS: '${format}'.  Use OBJ or PTX.\")\r\n+  endif()\r\n+\r\n+  # Set up all the command line flags here, so that they can be overriden on a per target basis.\r\n+\r\n+  set(nvcc_flags \"\")\r\n+\r\n+  # Emulation if the card isn't present.\r\n+  if (CUDA_BUILD_EMULATION)\r\n+    # Emulation.\r\n+    set(nvcc_flags ${nvcc_flags} --device-emulation -D_DEVICEEMU -g)\r\n+  else(CUDA_BUILD_EMULATION)\r\n+    # Device mode.  No flags necessary.\r\n+  endif(CUDA_BUILD_EMULATION)\r\n+\r\n+  if(CUDA_HOST_COMPILATION_CPP)\r\n+    set(CUDA_C_OR_CXX CXX)\r\n+  else(CUDA_HOST_COMPILATION_CPP)\r\n+    if(CUDA_VERSION VERSION_LESS \"3.0\")\r\n+      set(nvcc_flags ${nvcc_flags} --host-compilation C)\r\n+    else()\r\n+      message(WARNING \"--host-compilation flag is deprecated in CUDA version >= 3.0.  Removing --host-compilation C flag\" )\r\n+    endif()\r\n+    set(CUDA_C_OR_CXX C)\r\n+  endif(CUDA_HOST_COMPILATION_CPP)\r\n+\r\n+  set(generated_extension ${CMAKE_${CUDA_C_OR_CXX}_OUTPUT_EXTENSION})\r\n+\r\n+  if(CUDA_64_BIT_DEVICE_CODE)\r\n+    set(nvcc_flags ${nvcc_flags} -m64)\r\n+  else()\r\n+    set(nvcc_flags ${nvcc_flags} -m32)\r\n+  endif()\r\n+\r\n+  # This needs to be passed in at this stage, because VS needs to fill out the\r\n+  # value of VCInstallDir from within VS.\r\n+  if(CMAKE_GENERATOR MATCHES \"Visual Studio\")\r\n+    if( CMAKE_SIZEOF_VOID_P EQUAL 8 )\r\n+      # Add nvcc flag for 64b Windows\r\n+      set(ccbin_flags -D \"\\\"CCBIN:PATH=$(VCInstallDir)bin\\\"\" )\r\n+    endif()\r\n+  endif()\r\n+\r\n+  # Figure out which configure we will use and pass that in as an argument to\r\n+  # the script.  We need to defer the decision until compilation time, because\r\n+  # for VS projects we won't know if we are making a debug or release build\r\n+  # until build time.\r\n+  if(CMAKE_GENERATOR MATCHES \"Visual Studio\")\r\n+    set( CUDA_build_configuration \"$(ConfigurationName)\" )\r\n+  else()\r\n+    set( CUDA_build_configuration \"${CMAKE_BUILD_TYPE}\")\r\n+  endif()\r\n+\r\n+  # Initialize our list of includes with the user ones followed by the CUDA system ones.\r\n+  set(CUDA_NVCC_INCLUDE_ARGS ${CUDA_NVCC_INCLUDE_ARGS_USER} \"-I${CUDA_INCLUDE_DIRS}\")\r\n+  # Get the include directories for this directory and use them for our nvcc command.\r\n+  get_directory_property(CUDA_NVCC_INCLUDE_DIRECTORIES INCLUDE_DIRECTORIES)\r\n+  if(CUDA_NVCC_INCLUDE_DIRECTORIES)\r\n+    foreach(dir ${CUDA_NVCC_INCLUDE_DIRECTORIES})\r\n+      list(APPEND CUDA_NVCC_INCLUDE_ARGS \"-I${dir}\")\r\n+    endforeach()\r\n+  endif()\r\n+\r\n+  # Reset these variables\r\n+  set(CUDA_WRAP_OPTION_NVCC_FLAGS)\r\n+  foreach(config ${CUDA_configuration_types})\r\n+    string(TOUPPER ${config} config_upper)\r\n+    set(CUDA_WRAP_OPTION_NVCC_FLAGS_${config_upper})\r\n+  endforeach()\r\n+\r\n+  CUDA_GET_SOURCES_AND_OPTIONS(_cuda_wrap_sources _cuda_wrap_cmake_options _cuda_wrap_options ${ARGN})\r\n+  CUDA_PARSE_NVCC_OPTIONS(CUDA_WRAP_OPTION_NVCC_FLAGS ${_cuda_wrap_options})\r\n+\r\n+  # Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\r\n+  # respected in CUDA_ADD_LIBRARY.\r\n+  set(_cuda_build_shared_libs FALSE)\r\n+  # SHARED, MODULE\r\n+  list(FIND _cuda_wrap_cmake_options SHARED _cuda_found_SHARED)\r\n+  list(FIND _cuda_wrap_cmake_options MODULE _cuda_found_MODULE)\r\n+  if(_cuda_found_SHARED GREATER -1 OR _cuda_found_MODULE GREATER -1)\r\n+    set(_cuda_build_shared_libs TRUE)\r\n+  endif()\r\n+  # STATIC\r\n+  list(FIND _cuda_wrap_cmake_options STATIC _cuda_found_STATIC)\r\n+  if(_cuda_found_STATIC GREATER -1)\r\n+    set(_cuda_build_shared_libs FALSE)\r\n+  endif()\r\n+\r\n+  # CUDA_HOST_FLAGS\r\n+  if(_cuda_build_shared_libs)\r\n+    # If we are setting up code for a shared library, then we need to add extra flags for\r\n+    # compiling objects for shared libraries.\r\n+    set(CUDA_HOST_SHARED_FLAGS ${CMAKE_SHARED_LIBRARY_${CUDA_C_OR_CXX}_FLAGS})\r\n+  else()\r\n+    set(CUDA_HOST_SHARED_FLAGS)\r\n+  endif()\r\n+  # Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\r\n+  # always need to set the SHARED_FLAGS, though.\r\n+  if(CUDA_PROPAGATE_HOST_FLAGS)\r\n+    set(CUDA_HOST_FLAGS \"set(CMAKE_HOST_FLAGS ${CMAKE_${CUDA_C_OR_CXX}_FLAGS} ${CUDA_HOST_SHARED_FLAGS})\")\r\n+  else()\r\n+    set(CUDA_HOST_FLAGS \"set(CMAKE_HOST_FLAGS ${CUDA_HOST_SHARED_FLAGS})\")\r\n+  endif()\r\n+\r\n+  set(CUDA_NVCC_FLAGS_CONFIG \"# Build specific configuration flags\")\r\n+  # Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\r\n+  foreach(config ${CUDA_configuration_types})\r\n+    string(TOUPPER ${config} config_upper)\r\n+    # CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\r\n+    # we convert the strings to lists (like we want).\r\n+\r\n+    if(CUDA_PROPAGATE_HOST_FLAGS)\r\n+      # nvcc chokes on -g3, so replace it with -g\r\n+      if(CMAKE_COMPILER_IS_GNUCC)\r\n+        string(REPLACE \"-g3\" \"-g\" _cuda_C_FLAGS \"${CMAKE_${CUDA_C_OR_CXX}_FLAGS_${config_upper}}\")\r\n+      else()\r\n+        set(_cuda_C_FLAGS \"${CMAKE_${CUDA_C_OR_CXX}_FLAGS_${config_upper}}\")\r\n+      endif()\r\n+\r\n+      set(CUDA_HOST_FLAGS \"${CUDA_HOST_FLAGS}\\nset(CMAKE_HOST_FLAGS_${config_upper} ${_cuda_C_FLAGS})\")\r\n+    endif()\r\n+\r\n+    # Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\r\n+    # like it is currently), we can remove the quotes around the\r\n+    # ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\r\n+    set(CUDA_NVCC_FLAGS_CONFIG \"${CUDA_NVCC_FLAGS_CONFIG}\\nset(CUDA_NVCC_FLAGS_${config_upper} \\\"${CUDA_NVCC_FLAGS_${config_upper}};;${CUDA_WRAP_OPTION_NVCC_FLAGS_${config_upper}}\\\")\")\r\n+  endforeach()\r\n+\r\n+  if(compile_to_ptx)\r\n+    # Don't use any of the host compilation flags for PTX targets.\r\n+    set(CUDA_HOST_FLAGS)\r\n+    set(CUDA_NVCC_FLAGS_CONFIG)\r\n+  endif()\r\n+\r\n+  # Get the list of definitions from the directory property\r\n+  get_directory_property(CUDA_NVCC_DEFINITIONS COMPILE_DEFINITIONS)\r\n+  if(CUDA_NVCC_DEFINITIONS)\r\n+    foreach(_definition ${CUDA_NVCC_DEFINITIONS})\r\n+      list(APPEND nvcc_flags \"-D${_definition}\")\r\n+    endforeach()\r\n+  endif()\r\n+\r\n+  if(_cuda_build_shared_libs)\r\n+    list(APPEND nvcc_flags \"-D${cuda_target}_EXPORTS\")\r\n+  endif()\r\n+\r\n+  # Determine output directory\r\n+  if(CUDA_GENERATED_OUTPUT_DIR)\r\n+    set(cuda_compile_output_dir \"${CUDA_GENERATED_OUTPUT_DIR}\")\r\n+  else()\r\n+    set(cuda_compile_output_dir \"${CMAKE_CURRENT_BINARY_DIR}\")\r\n+  endif()\r\n+\r\n+  # Reset the output variable\r\n+  set(_cuda_wrap_generated_files \"\")\r\n+\r\n+  # Iterate over the macro arguments and create custom\r\n+  # commands for all the .cu files.\r\n+  foreach(file ${ARGN})\r\n+    # Ignore any file marked as a HEADER_FILE_ONLY\r\n+    get_source_file_property(_is_header ${file} HEADER_FILE_ONLY)\r\n+    if(${file} MATCHES \".*\\\\.cu$\" AND NOT _is_header)\r\n+\r\n+      # Add a custom target to generate a c or ptx file. ######################\r\n+\r\n+      get_filename_component( basename ${file} NAME )\r\n+      if( compile_to_ptx )\r\n+        set(generated_file_path \"${cuda_compile_output_dir}\")\r\n+        set(generated_file_basename \"${cuda_target}_generated_${basename}.ptx\")\r\n+        set(format_flag \"-ptx\")\r\n+        file(MAKE_DIRECTORY \"${cuda_compile_output_dir}\")\r\n+      else( compile_to_ptx )\r\n+        set(generated_file_path \"${cuda_compile_output_dir}/${CMAKE_CFG_INTDIR}\")\r\n+        set(generated_file_basename \"${cuda_target}_generated_${basename}${generated_extension}\")\r\n+        set(format_flag \"-c\")\r\n+      endif( compile_to_ptx )\r\n+\r\n+      # Set all of our file names.  Make sure that whatever filenames that have\r\n+      # generated_file_path in them get passed in through as a command line\r\n+      # argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\r\n+      # instead of configure time.\r\n+      set(generated_file \"${generated_file_path}/${generated_file_basename}\")\r\n+      set(cmake_dependency_file \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${generated_file_basename}.depend\")\r\n+      set(NVCC_generated_dependency_file \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${generated_file_basename}.NVCC-depend\")\r\n+      set(generated_cubin_file \"${generated_file_path}/${generated_file_basename}.cubin.txt\")\r\n+      set(custom_target_script \"${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${generated_file_basename}.cmake\")\r\n+\r\n+      # Setup properties for obj files:\r\n+      if( NOT compile_to_ptx )\r\n+        set_source_files_properties(\"${generated_file}\"\r\n+          PROPERTIES\r\n+          EXTERNAL_OBJECT true # This is an object file not to be compiled, but only be linked.\r\n+          )\r\n+      endif()\r\n+\r\n+      # Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\r\n+      get_filename_component(file_path \"${file}\" PATH)\r\n+      if(IS_ABSOLUTE \"${file_path}\")\r\n+        set(source_file \"${file}\")\r\n+      else()\r\n+        set(source_file \"${CMAKE_CURRENT_SOURCE_DIR}/${file}\")\r\n+      endif()\r\n+\r\n+      # Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\r\n+      cuda_include_nvcc_dependencies(${cmake_dependency_file})\r\n+\r\n+      # Convience string for output ###########################################\r\n+      if(CUDA_BUILD_EMULATION)\r\n+        set(cuda_build_type \"Emulation\")\r\n+      else(CUDA_BUILD_EMULATION)\r\n+        set(cuda_build_type \"Device\")\r\n+      endif(CUDA_BUILD_EMULATION)\r\n+\r\n+      # Build the NVCC made dependency file ###################################\r\n+      set(build_cubin OFF)\r\n+      if ( NOT CUDA_BUILD_EMULATION AND CUDA_BUILD_CUBIN )\r\n+         if ( NOT compile_to_ptx )\r\n+           set ( build_cubin ON )\r\n+         endif( NOT compile_to_ptx )\r\n+      endif( NOT CUDA_BUILD_EMULATION AND CUDA_BUILD_CUBIN )\r\n+\r\n+      # Configure the build script\r\n+      configure_file(\"${CUDA_run_nvcc}\" \"${custom_target_script}\" @ONLY)\r\n+\r\n+      # So if a user specifies the same cuda file as input more than once, you\r\n+      # can have bad things happen with dependencies.  Here we check an option\r\n+      # to see if this is the behavior they want.\r\n+      if(CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE)\r\n+        set(main_dep MAIN_DEPENDENCY ${source_file})\r\n+      else()\r\n+        set(main_dep DEPENDS ${source_file})\r\n+      endif()\r\n+\r\n+      if(CUDA_VERBOSE_BUILD)\r\n+        set(verbose_output ON)\r\n+      elseif(CMAKE_GENERATOR MATCHES \"Makefiles\")\r\n+        set(verbose_output \"$(VERBOSE)\")\r\n+      else()\r\n+        set(verbose_output OFF)\r\n+      endif()\r\n+\r\n+      # Create up the comment string\r\n+      file(RELATIVE_PATH generated_file_relative_path \"${CMAKE_BINARY_DIR}\" \"${generated_file}\")\r\n+      if(compile_to_ptx)\r\n+        set(cuda_build_comment_string \"Building NVCC ptx file ${generated_file_relative_path}\")\r\n+      else()\r\n+        set(cuda_build_comment_string \"Building NVCC (${cuda_build_type}) object ${generated_file_relative_path}\")\r\n+      endif()\r\n+\r\n+      # Build the generated file and dependency file ##########################\r\n+      add_custom_command(\r\n+        OUTPUT ${generated_file}\r\n+        # These output files depend on the source_file and the contents of cmake_dependency_file\r\n+        ${main_dep}\r\n+        DEPENDS ${CUDA_NVCC_DEPEND}\r\n+        DEPENDS ${custom_target_script}\r\n+        # Make sure the output directory exists before trying to write to it.\r\n+        COMMAND ${CMAKE_COMMAND} -E make_directory \"${generated_file_path}\"\r\n+        COMMAND ${CMAKE_COMMAND} ARGS\r\n+          -D verbose:BOOL=${verbose_output}\r\n+          ${ccbin_flags}\r\n+          -D build_configuration:STRING=${CUDA_build_configuration}\r\n+          -D \"generated_file:STRING=${generated_file}\"\r\n+          -D \"generated_cubin_file:STRING=${generated_cubin_file}\"\r\n+          -P \"${custom_target_script}\"\r\n+        COMMENT \"${cuda_build_comment_string}\"\r\n+        )\r\n+\r\n+      # Make sure the build system knows the file is generated.\r\n+      set_source_files_properties(${generated_file} PROPERTIES GENERATED TRUE)\r\n+\r\n+      # Don't add the object file to the list of generated files if we are using\r\n+      # visual studio and we are attaching the build rule to the cuda file.  VS\r\n+      # will add our object file to the linker automatically for us.\r\n+      set(cuda_add_generated_file TRUE)\r\n+\r\n+      if(NOT compile_to_ptx AND CMAKE_GENERATOR MATCHES \"Visual Studio\" AND CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE)\r\n+        # Visual Studio 8 crashes when you close the solution when you don't add the object file.\r\n+        if(NOT CMAKE_GENERATOR MATCHES \"Visual Studio 8\")\r\n+          #message(\"Not adding ${generated_file}\")\r\n+          set(cuda_add_generated_file FALSE)\r\n+        endif()\r\n+      endif()\r\n+\r\n+      if(cuda_add_generated_file)\r\n+        list(APPEND _cuda_wrap_generated_files ${generated_file})\r\n+      endif()\r\n+\r\n+      # Add the other files that we want cmake to clean on a cleanup ##########\r\n+      list(APPEND CUDA_ADDITIONAL_CLEAN_FILES \"${cmake_dependency_file}\")\r\n+      list(REMOVE_DUPLICATES CUDA_ADDITIONAL_CLEAN_FILES)\r\n+      set(CUDA_ADDITIONAL_CLEAN_FILES ${CUDA_ADDITIONAL_CLEAN_FILES} CACHE INTERNAL \"List of intermediate files that are part of the cuda dependency scanning.\")\r\n+\r\n+    endif(${file} MATCHES \".*\\\\.cu$\" AND NOT _is_header)\r\n+  endforeach(file)\r\n+\r\n+  # Set the return parameter\r\n+  set(${generated_files} ${_cuda_wrap_generated_files})\r\n+endmacro(CUDA_WRAP_SRCS)\r\n+\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# ADD LIBRARY\r\n+###############################################################################\r\n+###############################################################################\r\n+macro(CUDA_ADD_LIBRARY cuda_target)\r\n+\r\n+  CUDA_ADD_CUDA_INCLUDE_ONCE()\r\n+\r\n+  # Separate the sources from the options\r\n+  CUDA_GET_SOURCES_AND_OPTIONS(_sources _cmake_options _options ${ARGN})\r\n+  CUDA_BUILD_SHARED_LIBRARY(_cuda_shared_flag ${ARGN})\r\n+  # Create custom commands and targets for each file.\r\n+  CUDA_WRAP_SRCS( ${cuda_target} OBJ _generated_files ${_sources}\r\n+    ${_cmake_options} ${_cuda_shared_flag}\r\n+    OPTIONS ${_options} )\r\n+\r\n+  # Add the library.\r\n+  add_library(${cuda_target} ${_cmake_options}\r\n+    ${_generated_files}\r\n+    ${_sources}\r\n+    )\r\n+\r\n+  target_link_libraries(${cuda_target}\r\n+    ${CUDA_LIBRARIES}\r\n+    )\r\n+\r\n+  # We need to set the linker language based on what the expected generated file\r\n+  # would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\r\n+  set_target_properties(${cuda_target}\r\n+    PROPERTIES\r\n+    LINKER_LANGUAGE ${CUDA_C_OR_CXX}\r\n+    )\r\n+\r\n+endmacro(CUDA_ADD_LIBRARY cuda_target)\r\n+\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# ADD EXECUTABLE\r\n+###############################################################################\r\n+###############################################################################\r\n+macro(CUDA_ADD_EXECUTABLE cuda_target)\r\n+\r\n+  CUDA_ADD_CUDA_INCLUDE_ONCE()\r\n+\r\n+  # Separate the sources from the options\r\n+  CUDA_GET_SOURCES_AND_OPTIONS(_sources _cmake_options _options ${ARGN})\r\n+  # Create custom commands and targets for each file.\r\n+  CUDA_WRAP_SRCS( ${cuda_target} OBJ _generated_files ${_sources} OPTIONS ${_options} )\r\n+\r\n+  # Add the library.\r\n+  add_executable(${cuda_target} ${_cmake_options}\r\n+    ${_generated_files}\r\n+    ${_sources}\r\n+    )\r\n+\r\n+  target_link_libraries(${cuda_target}\r\n+    ${CUDA_LIBRARIES}\r\n+    )\r\n+\r\n+  # We need to set the linker language based on what the expected generated file\r\n+  # would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\r\n+  set_target_properties(${cuda_target}\r\n+    PROPERTIES\r\n+    LINKER_LANGUAGE ${CUDA_C_OR_CXX}\r\n+    )\r\n+\r\n+endmacro(CUDA_ADD_EXECUTABLE cuda_target)\r\n+\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# CUDA COMPILE\r\n+###############################################################################\r\n+###############################################################################\r\n+macro(CUDA_COMPILE generated_files)\r\n+\r\n+  # Separate the sources from the options\r\n+  CUDA_GET_SOURCES_AND_OPTIONS(_sources _cmake_options _options ${ARGN})\r\n+  # Create custom commands and targets for each file.\r\n+  CUDA_WRAP_SRCS( cuda_compile OBJ _generated_files ${_sources} ${_cmake_options}\r\n+    OPTIONS ${_options} )\r\n+\r\n+  set( ${generated_files} ${_generated_files})\r\n+\r\n+endmacro(CUDA_COMPILE)\r\n+\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# CUDA COMPILE PTX\r\n+###############################################################################\r\n+###############################################################################\r\n+macro(CUDA_COMPILE_PTX generated_files)\r\n+\r\n+  # Separate the sources from the options\r\n+  CUDA_GET_SOURCES_AND_OPTIONS(_sources _cmake_options _options ${ARGN})\r\n+  # Create custom commands and targets for each file.\r\n+  CUDA_WRAP_SRCS( cuda_compile_ptx PTX _generated_files ${_sources} ${_cmake_options}\r\n+    OPTIONS ${_options} )\r\n+\r\n+  set( ${generated_files} ${_generated_files})\r\n+\r\n+endmacro(CUDA_COMPILE_PTX)\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# CUDA ADD CUFFT TO TARGET\r\n+###############################################################################\r\n+###############################################################################\r\n+macro(CUDA_ADD_CUFFT_TO_TARGET target)\r\n+  if (CUDA_BUILD_EMULATION)\r\n+    target_link_libraries(${target} ${CUDA_cufftemu_LIBRARY})\r\n+  else()\r\n+    target_link_libraries(${target} ${CUDA_cufft_LIBRARY})\r\n+  endif()\r\n+endmacro()\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# CUDA ADD CUBLAS TO TARGET\r\n+###############################################################################\r\n+###############################################################################\r\n+macro(CUDA_ADD_CUBLAS_TO_TARGET target)\r\n+  if (CUDA_BUILD_EMULATION)\r\n+    target_link_libraries(${target} ${CUDA_cublasemu_LIBRARY})\r\n+  else()\r\n+    target_link_libraries(${target} ${CUDA_cublas_LIBRARY})\r\n+  endif()\r\n+endmacro()\r\n+\r\n+###############################################################################\r\n+###############################################################################\r\n+# CUDA BUILD CLEAN TARGET\r\n+###############################################################################\r\n+###############################################################################\r\n+macro(CUDA_BUILD_CLEAN_TARGET)\r\n+  # Call this after you add all your CUDA targets, and you will get a convience\r\n+  # target.  You should also make clean after running this target to get the\r\n+  # build system to generate all the code again.\r\n+\r\n+  set(cuda_clean_target_name clean_cuda_depends)\r\n+  if (CMAKE_GENERATOR MATCHES \"Visual Studio\")\r\n+    string(TOUPPER ${cuda_clean_target_name} cuda_clean_target_name)\r\n+  endif()\r\n+  add_custom_target(${cuda_clean_target_name}\r\n+    COMMAND ${CMAKE_COMMAND} -E remove ${CUDA_ADDITIONAL_CLEAN_FILES})\r\n+\r\n+  # Clear out the variable, so the next time we configure it will be empty.\r\n+  # This is useful so that the files won't persist in the list after targets\r\n+  # have been removed.\r\n+  set(CUDA_ADDITIONAL_CLEAN_FILES \"\" CACHE INTERNAL \"List of intermediate files that are part of the cuda dependency scanning.\")\r\n+endmacro(CUDA_BUILD_CLEAN_TARGET)\r"
      },
      {
        "sha": "18f21e3f5ec0011da0c877279d869e24d5d56e26",
        "filename": "Modules/FindCUDA/make2cmake.cmake",
        "status": "added",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindCUDA/make2cmake.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindCUDA/make2cmake.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindCUDA/make2cmake.cmake?ref=1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
        "patch": "@@ -0,0 +1,79 @@\n+#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n+#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n+#\r\n+#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n+#\r\n+#  Copyright (c) 2007-2009\r\n+#  Scientific Computing and Imaging Institute, University of Utah\r\n+#\r\n+#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n+#  for the text of the license.\r\n+\r\n+# The MIT License\r\n+#\r\n+# License for the specific language governing rights and limitations under\r\n+# Permission is hereby granted, free of charge, to any person obtaining a\r\n+# copy of this software and associated documentation files (the \"Software\"),\r\n+# to deal in the Software without restriction, including without limitation\r\n+# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n+# and/or sell copies of the Software, and to permit persons to whom the\r\n+# Software is furnished to do so, subject to the following conditions:\r\n+#\r\n+# The above copyright notice and this permission notice shall be included\r\n+# in all copies or substantial portions of the Software.\r\n+#\r\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n+# DEALINGS IN THE SOFTWARE.\r\n+#\r\n+\r\n+#######################################################################\r\n+# This converts a file written in makefile syntax into one that can be included\r\n+# by CMake.\r\n+\r\n+file(READ ${input_file} depend_text)\r\n+\r\n+if (${depend_text} MATCHES \".+\")\r\n+\r\n+  # message(\"FOUND DEPENDS\")\r\n+\r\n+  # Remember, four backslashes is escaped to one backslash in the string.\r\n+  string(REGEX REPLACE \"\\\\\\\\ \" \" \" depend_text ${depend_text})\r\n+\r\n+  # This works for the nvcc -M generated dependency files.\r\n+  string(REGEX REPLACE \"^.* : \" \"\" depend_text ${depend_text})\r\n+  string(REGEX REPLACE \"[ \\\\\\\\]*\\n\" \";\" depend_text ${depend_text})\r\n+\r\n+  set(dependency_list \"\")\r\n+\r\n+  foreach(file ${depend_text})\r\n+\r\n+    string(REGEX REPLACE \"^ +\" \"\" file ${file})\r\n+\r\n+    if(NOT IS_DIRECTORY ${file})\r\n+      # If softlinks start to matter, we should change this to REALPATH.  For now we need\r\n+      # to flatten paths, because nvcc can generate stuff like /bin/../include instead of\r\n+      # just /include.\r\n+      get_filename_component(file_absolute \"${file}\" ABSOLUTE)\r\n+      list(APPEND dependency_list \"${file_absolute}\")\r\n+    endif(NOT IS_DIRECTORY ${file})\r\n+\r\n+  endforeach(file)\r\n+\r\n+else()\r\n+  # message(\"FOUND NO DEPENDS\")\r\n+endif()\r\n+\r\n+# Remove the duplicate entries and sort them.\r\n+list(REMOVE_DUPLICATES dependency_list)\r\n+list(SORT dependency_list)\r\n+\r\n+foreach(file ${dependency_list})\r\n+  set(cuda_nvcc_depend \"${cuda_nvcc_depend} \\\"${file}\\\"\\n\")\r\n+endforeach()\r\n+\r\n+file(WRITE ${output_file} \"# Generated by: make2cmake.cmake\\nSET(CUDA_NVCC_DEPEND\\n ${cuda_nvcc_depend})\\n\\n\")\r"
      },
      {
        "sha": "048daad6650034bab56c9d4576e4f80657a9b7b9",
        "filename": "Modules/FindCUDA/parse_cubin.cmake",
        "status": "added",
        "additions": 112,
        "deletions": 0,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindCUDA/parse_cubin.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindCUDA/parse_cubin.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindCUDA/parse_cubin.cmake?ref=1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
        "patch": "@@ -0,0 +1,112 @@\n+#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n+#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n+#\r\n+#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n+#\r\n+#  Copyright (c) 2007-2009\r\n+#  Scientific Computing and Imaging Institute, University of Utah\r\n+#\r\n+#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n+#  for the text of the license.\r\n+\r\n+# The MIT License\r\n+#\r\n+# License for the specific language governing rights and limitations under\r\n+# Permission is hereby granted, free of charge, to any person obtaining a\r\n+# copy of this software and associated documentation files (the \"Software\"),\r\n+# to deal in the Software without restriction, including without limitation\r\n+# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n+# and/or sell copies of the Software, and to permit persons to whom the\r\n+# Software is furnished to do so, subject to the following conditions:\r\n+#\r\n+# The above copyright notice and this permission notice shall be included\r\n+# in all copies or substantial portions of the Software.\r\n+#\r\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n+# DEALINGS IN THE SOFTWARE.\r\n+#\r\n+\r\n+#######################################################################\r\n+# Parses a .cubin file produced by nvcc and reports statistics about the file.\r\n+\r\n+\r\n+file(READ ${input_file} file_text)\r\n+\r\n+if (${file_text} MATCHES \".+\")\r\n+\r\n+  # Remember, four backslashes is escaped to one backslash in the string.\r\n+  string(REGEX REPLACE \";\" \"\\\\\\\\;\" file_text ${file_text})\r\n+  string(REGEX REPLACE \"\\ncode\" \";code\" file_text ${file_text})\r\n+\r\n+  list(LENGTH file_text len)\r\n+\r\n+  foreach(line ${file_text})\r\n+\r\n+    # Only look at \"code { }\" blocks.\r\n+    if(line MATCHES \"^code\")\r\n+\r\n+      # Break into individual lines.\r\n+      string(REGEX REPLACE \"\\n\" \";\" line ${line})\r\n+\r\n+      foreach(entry ${line})\r\n+\r\n+        # Extract kernel names.\r\n+        if (${entry} MATCHES \"[^g]name = ([^ ]+)\")\r\n+          string(REGEX REPLACE \".* = ([^ ]+)\" \"\\\\1\" entry ${entry})\r\n+\r\n+          # Check to see if the kernel name starts with \"_\"\r\n+          set(skip FALSE)\r\n+          # if (${entry} MATCHES \"^_\")\r\n+            # Skip the rest of this block.\r\n+            # message(\"Skipping ${entry}\")\r\n+            # set(skip TRUE)\r\n+          # else (${entry} MATCHES \"^_\")\r\n+            message(\"Kernel:    ${entry}\")\r\n+          # endif (${entry} MATCHES \"^_\")\r\n+\r\n+        endif(${entry} MATCHES \"[^g]name = ([^ ]+)\")\r\n+\r\n+        # Skip the rest of the block if necessary\r\n+        if(NOT skip)\r\n+\r\n+          # Registers\r\n+          if (${entry} MATCHES \"reg([ ]+)=([ ]+)([^ ]+)\")\r\n+            string(REGEX REPLACE \".*([ ]+)=([ ]+)([^ ]+)\" \"\\\\3\" entry ${entry})\r\n+            message(\"Registers: ${entry}\")\r\n+          endif()\r\n+\r\n+          # Local memory\r\n+          if (${entry} MATCHES \"lmem([ ]+)=([ ]+)([^ ]+)\")\r\n+            string(REGEX REPLACE \".*([ ]+)=([ ]+)([^ ]+)\" \"\\\\3\" entry ${entry})\r\n+            message(\"Local:     ${entry}\")\r\n+          endif()\r\n+\r\n+          # Shared memory\r\n+          if (${entry} MATCHES \"smem([ ]+)=([ ]+)([^ ]+)\")\r\n+            string(REGEX REPLACE \".*([ ]+)=([ ]+)([^ ]+)\" \"\\\\3\" entry ${entry})\r\n+            message(\"Shared:    ${entry}\")\r\n+          endif()\r\n+\r\n+          if (${entry} MATCHES \"^}\")\r\n+            message(\"\")\r\n+          endif()\r\n+\r\n+        endif(NOT skip)\r\n+\r\n+\r\n+      endforeach(entry)\r\n+\r\n+    endif(line MATCHES \"^code\")\r\n+\r\n+  endforeach(line)\r\n+\r\n+else()\r\n+  # message(\"FOUND NO DEPENDS\")\r\n+endif()\r\n+\r\n+\r"
      },
      {
        "sha": "a3bec9d4d26cc1f9860b6013b1a94d9c3c268546",
        "filename": "Modules/FindCUDA/run_nvcc.cmake",
        "status": "added",
        "additions": 280,
        "deletions": 0,
        "changes": 280,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindCUDA/run_nvcc.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindCUDA/run_nvcc.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindCUDA/run_nvcc.cmake?ref=1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
        "patch": "@@ -0,0 +1,280 @@\n+#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\r\n+#\r\n+#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\r\n+#\r\n+#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\r\n+#  for the text of the license.\r\n+\r\n+# The MIT License\r\n+#\r\n+# License for the specific language governing rights and limitations under\r\n+# Permission is hereby granted, free of charge, to any person obtaining a\r\n+# copy of this software and associated documentation files (the \"Software\"),\r\n+# to deal in the Software without restriction, including without limitation\r\n+# the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n+# and/or sell copies of the Software, and to permit persons to whom the\r\n+# Software is furnished to do so, subject to the following conditions:\r\n+#\r\n+# The above copyright notice and this permission notice shall be included\r\n+# in all copies or substantial portions of the Software.\r\n+#\r\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n+# DEALINGS IN THE SOFTWARE.\r\n+\r\n+\r\n+##########################################################################\r\n+# This file runs the nvcc commands to produce the desired output file along with\r\n+# the dependency file needed by CMake to compute dependencies.  In addition the\r\n+# file checks the output of each command and if the command fails it deletes the\r\n+# output files.\r\n+\r\n+# Input variables\r\n+#\r\n+# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\r\n+#                          ON : Describe each step\r\n+#\r\n+# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\r\n+#                               RelWithDebInfo, but it should match one of the\r\n+#                               entries in CUDA_HOST_FLAGS. This is the build\r\n+#                               configuration used when compiling the code.  If\r\n+#                               blank or unspecified Debug is assumed as this is\r\n+#                               what CMake does.\r\n+#\r\n+# generated_file:STRING=<> File to generate.  This argument must be passed in.\r\n+#\r\n+# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\r\n+#                                                   in if build_cubin is true.\r\n+\r\n+if(NOT generated_file)\r\n+  message(FATAL_ERROR \"You must specify generated_file on the command line\")\r\n+endif()\r\n+\r\n+# Set these up as variables to make reading the generated file easier\r\n+set(CMAKE_COMMAND \"@CMAKE_COMMAND@\")\r\n+set(source_file \"@source_file@\")\r\n+set(NVCC_generated_dependency_file \"@NVCC_generated_dependency_file@\")\r\n+set(cmake_dependency_file \"@cmake_dependency_file@\")\r\n+set(CUDA_make2cmake \"@CUDA_make2cmake@\")\r\n+set(CUDA_parse_cubin \"@CUDA_parse_cubin@\")\r\n+set(build_cubin @build_cubin@)\r\n+# We won't actually use these variables for now, but we need to set this, in\r\n+# order to force this file to be run again if it changes.\r\n+set(generated_file_path \"@generated_file_path@\")\r\n+set(generated_file_internal \"@generated_file@\")\r\n+set(generated_cubin_file_internal \"@generated_cubin_file@\")\r\n+\r\n+set(CUDA_NVCC_EXECUTABLE \"@CUDA_NVCC_EXECUTABLE@\")\r\n+set(CUDA_NVCC_FLAGS \"@CUDA_NVCC_FLAGS@;;@CUDA_WRAP_OPTION_NVCC_FLAGS@\")\r\n+@CUDA_NVCC_FLAGS_CONFIG@\r\n+set(nvcc_flags \"@nvcc_flags@\")\r\n+set(CUDA_NVCC_INCLUDE_ARGS \"@CUDA_NVCC_INCLUDE_ARGS@\")\r\n+set(format_flag \"@format_flag@\")\r\n+\r\n+if(build_cubin AND NOT generated_cubin_file)\r\n+  message(FATAL_ERROR \"You must specify generated_cubin_file on the command line\")\r\n+endif()\r\n+\r\n+# This is the list of host compilation flags.  It C or CXX should already have\r\n+# been chosen by FindCUDA.cmake.\r\n+@CUDA_HOST_FLAGS@\r\n+\r\n+# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\r\n+set(nvcc_host_compiler_flags \"\")\r\n+# If we weren't given a build_configuration, use Debug.\r\n+if(NOT build_configuration)\r\n+  set(build_configuration Debug)\r\n+endif()\r\n+string(TOUPPER \"${build_configuration}\" build_configuration)\r\n+#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\r\n+foreach(flag ${CMAKE_HOST_FLAGS} ${CMAKE_HOST_FLAGS_${build_configuration}})\r\n+  # Extra quotes are added around each flag to help nvcc parse out flags with spaces.\r\n+  set(nvcc_host_compiler_flags \"${nvcc_host_compiler_flags},\\\"${flag}\\\"\")\r\n+endforeach()\r\n+if (nvcc_host_compiler_flags)\r\n+  set(nvcc_host_compiler_flags \"-Xcompiler\" ${nvcc_host_compiler_flags})\r\n+endif()\r\n+#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\r\n+# Add the build specific configuration flags\r\n+list(APPEND CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS_${build_configuration}})\r\n+\r\n+if(DEFINED CCBIN)\r\n+  set(CCBIN -ccbin \"${CCBIN}\")\r\n+endif()\r\n+\r\n+# cuda_execute_process - Executes a command with optional command echo and status message.\r\n+#\r\n+#   status  - Status message to print if verbose is true\r\n+#   command - COMMAND argument from the usual execute_process argument structure\r\n+#   ARGN    - Remaining arguments are the command with arguments\r\n+#\r\n+#   CUDA_result - return value from running the command\r\n+#\r\n+# Make this a macro instead of a function, so that things like RESULT_VARIABLE\r\n+# and other return variables are present after executing the process.\r\n+macro(cuda_execute_process status command)\r\n+  set(_command ${command})\r\n+  if(NOT _command STREQUAL \"COMMAND\")\r\n+    message(FATAL_ERROR \"Malformed call to cuda_execute_process.  Missing COMMAND as second argument. (command = ${command})\")\r\n+  endif()\r\n+  if(verbose)\r\n+    execute_process(COMMAND \"${CMAKE_COMMAND}\" -E echo -- ${status})\r\n+    # Now we need to build up our command string.  We are accounting for quotes\r\n+    # and spaces, anything else is left up to the user to fix if they want to\r\n+    # copy and paste a runnable command line.\r\n+    set(cuda_execute_process_string)\r\n+    foreach(arg ${ARGN})\r\n+      # If there are quotes, excape them, so they come through.\r\n+      string(REPLACE \"\\\"\" \"\\\\\\\"\" arg ${arg})\r\n+      # Args with spaces need quotes around them to get them to be parsed as a single argument.\r\n+      if(arg MATCHES \" \")\r\n+        list(APPEND cuda_execute_process_string \"\\\"${arg}\\\"\")\r\n+      else()\r\n+        list(APPEND cuda_execute_process_string ${arg})\r\n+      endif()\r\n+    endforeach()\r\n+    # Echo the command\r\n+    execute_process(COMMAND ${CMAKE_COMMAND} -E echo ${cuda_execute_process_string})\r\n+  endif(verbose)\r\n+  # Run the command\r\n+  execute_process(COMMAND ${ARGN} RESULT_VARIABLE CUDA_result )\r\n+endmacro()\r\n+\r\n+# Delete the target file\r\n+cuda_execute_process(\r\n+  \"Removing ${generated_file}\"\r\n+  COMMAND \"${CMAKE_COMMAND}\" -E remove \"${generated_file}\"\r\n+  )\r\n+\r\n+# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\r\n+# for dependency generation and hope for the best.\r\n+set(depends_CUDA_NVCC_FLAGS \"${CUDA_NVCC_FLAGS}\")\r\n+set(CUDA_VERSION @CUDA_VERSION@)\r\n+if(CUDA_VERSION VERSION_LESS \"3.0\")\r\n+  cmake_policy(PUSH)\r\n+  # CMake policy 0007 NEW states that empty list elements are not\r\n+  # ignored.  I'm just setting it to avoid the warning that's printed.\r\n+  cmake_policy(SET CMP0007 NEW)\r\n+  # Note that this will remove all occurances of -G.\r\n+  list(REMOVE_ITEM depends_CUDA_NVCC_FLAGS \"-G\")\r\n+  cmake_policy(POP)\r\n+endif()\r\n+\r\n+# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\r\n+# can cause incorrect dependencies when #including files based on this macro which is\r\n+# defined in the generating passes of nvcc invokation.  We will go ahead and manually\r\n+# define this for now until a future version fixes this bug.\r\n+set(CUDACC_DEFINE -D__CUDACC__)\r\n+\r\n+# Generate the dependency file\r\n+cuda_execute_process(\r\n+  \"Generating dependency file: ${NVCC_generated_dependency_file}\"\r\n+  COMMAND \"${CUDA_NVCC_EXECUTABLE}\"\r\n+  -M\r\n+  ${CUDACC_DEFINE}\r\n+  \"${source_file}\"\r\n+  -o \"${NVCC_generated_dependency_file}\"\r\n+  ${CCBIN}\r\n+  ${nvcc_flags}\r\n+  ${nvcc_host_compiler_flags}\r\n+  ${depends_CUDA_NVCC_FLAGS}\r\n+  -DNVCC\r\n+  ${CUDA_NVCC_INCLUDE_ARGS}\r\n+  )\r\n+\r\n+if(CUDA_result)\r\n+  message(FATAL_ERROR \"Error generating ${generated_file}\")\r\n+endif()\r\n+\r\n+# Generate the cmake readable dependency file to a temp file.  Don't put the\r\n+# quotes just around the filenames for the input_file and output_file variables.\r\n+# CMake will pass the quotes through and not be able to find the file.\r\n+cuda_execute_process(\r\n+  \"Generating temporary cmake readable file: ${cmake_dependency_file}.tmp\"\r\n+  COMMAND \"${CMAKE_COMMAND}\"\r\n+  -D \"input_file:FILEPATH=${NVCC_generated_dependency_file}\"\r\n+  -D \"output_file:FILEPATH=${cmake_dependency_file}.tmp\"\r\n+  -P \"${CUDA_make2cmake}\"\r\n+  )\r\n+\r\n+if(CUDA_result)\r\n+  message(FATAL_ERROR \"Error generating ${generated_file}\")\r\n+endif()\r\n+\r\n+# Copy the file if it is different\r\n+cuda_execute_process(\r\n+  \"Copy if different ${cmake_dependency_file}.tmp to ${cmake_dependency_file}\"\r\n+  COMMAND \"${CMAKE_COMMAND}\" -E copy_if_different \"${cmake_dependency_file}.tmp\" \"${cmake_dependency_file}\"\r\n+  )\r\n+\r\n+if(CUDA_result)\r\n+  message(FATAL_ERROR \"Error generating ${generated_file}\")\r\n+endif()\r\n+\r\n+# Delete the temporary file\r\n+cuda_execute_process(\r\n+  \"Removing ${cmake_dependency_file}.tmp and ${NVCC_generated_dependency_file}\"\r\n+  COMMAND \"${CMAKE_COMMAND}\" -E remove \"${cmake_dependency_file}.tmp\" \"${NVCC_generated_dependency_file}\"\r\n+  )\r\n+\r\n+if(CUDA_result)\r\n+  message(FATAL_ERROR \"Error generating ${generated_file}\")\r\n+endif()\r\n+\r\n+# Generate the code\r\n+cuda_execute_process(\r\n+  \"Generating ${generated_file}\"\r\n+  COMMAND \"${CUDA_NVCC_EXECUTABLE}\"\r\n+  \"${source_file}\"\r\n+  ${format_flag} -o \"${generated_file}\"\r\n+  ${CCBIN}\r\n+  ${nvcc_flags}\r\n+  ${nvcc_host_compiler_flags}\r\n+  ${CUDA_NVCC_FLAGS}\r\n+  -DNVCC\r\n+  ${CUDA_NVCC_INCLUDE_ARGS}\r\n+  )\r\n+\r\n+if(CUDA_result)\r\n+  # Since nvcc can sometimes leave half done files make sure that we delete the output file.\r\n+  cuda_execute_process(\r\n+    \"Removing ${generated_file}\"\r\n+    COMMAND \"${CMAKE_COMMAND}\" -E remove \"${generated_file}\"\r\n+    )\r\n+  message(FATAL_ERROR \"Error generating file ${generated_file}\")\r\n+else()\r\n+  if(verbose)\r\n+    message(\"Generated ${generated_file} successfully.\")\r\n+  endif()\r\n+endif()\r\n+\r\n+# Cubin resource report commands.\r\n+if( build_cubin )\r\n+  # Run with -cubin to produce resource usage report.\r\n+  cuda_execute_process(\r\n+    \"Generating ${generated_cubin_file}\"\r\n+    COMMAND \"${CUDA_NVCC_EXECUTABLE}\"\r\n+    \"${source_file}\"\r\n+    ${CUDA_NVCC_FLAGS}\r\n+    ${nvcc_flags}\r\n+    ${CCBIN}\r\n+    ${nvcc_host_compiler_flags}\r\n+    -DNVCC\r\n+    -cubin\r\n+    -o \"${generated_cubin_file}\"\r\n+    ${CUDA_NVCC_INCLUDE_ARGS}\r\n+    )\r\n+\r\n+  # Execute the parser script.\r\n+  cuda_execute_process(\r\n+    \"Executing the parser script\"\r\n+    COMMAND  \"${CMAKE_COMMAND}\"\r\n+    -D \"input_file:STRING=${generated_cubin_file}\"\r\n+    -P \"${CUDA_parse_cubin}\"\r\n+    )\r\n+\r\n+endif( build_cubin )\r"
      },
      {
        "sha": "894f106135f5a697e6224f2c0d4d15c1e3fee4db",
        "filename": "Modules/FindOpenCL.cmake",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindOpenCL.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e8e97edb5a6244c2a14108496fe75679d4ac6cd/Modules/FindOpenCL.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindOpenCL.cmake?ref=1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
        "patch": "@@ -0,0 +1,59 @@\n+set(ENV_ATISTREAMSDKROOT $ENV{ATISTREAMSDKROOT})\r\n+if(ENV_ATISTREAMSDKROOT)\r\n+  find_path(\r\n+    OPENCL_INCLUDE_DIR\r\n+    NAMES CL/cl.h OpenCL/cl.h\r\n+    PATHS $ENV{ATISTREAMSDKROOT}/include\r\n+    NO_DEFAULT_PATH\r\n+    )\r\n+\r\n+  if(\"${CMAKE_SYSTEM_NAME}\" MATCHES \"Linux\")\r\n+    if(CMAKE_SIZEOF_VOID_P EQUAL 4)\r\n+      set(\r\n+        OPENCL_LIB_SEARCH_PATH\r\n+        ${OPENCL_LIB_SEARCH_PATH}\r\n+        $ENV{ATISTREAMSDKROOT}/lib/x86\r\n+        )\r\n+    else(CMAKE_SIZEOF_VOID_P EQUAL 4)\r\n+      set(\r\n+        OPENCL_LIB_SEARCH_PATH\r\n+        ${OPENCL_LIB_SEARCH_PATH}\r\n+        $ENV{ATISTREAMSDKROOT}/lib/x86_64\r\n+        )\r\n+    endif(CMAKE_SIZEOF_VOID_P EQUAL 4)\r\n+  endif(\"${CMAKE_SYSTEM_NAME}\" MATCHES \"Linux\")\r\n+  find_library(\r\n+    OPENCL_LIBRARY\r\n+    NAMES OpenCL\r\n+    PATHS ${OPENCL_LIB_SEARCH_PATH}\r\n+    NO_DEFAULT_PATH\r\n+    )\r\n+else(ENV_ATISTREAMSDKROOT)\r\n+  find_path(\r\n+    OPENCL_INCLUDE_DIR\r\n+    NAMES CL/cl.h OpenCL/cl.h\r\n+    )\r\n+\r\n+  find_library(\r\n+    OPENCL_LIBRARY\r\n+    NAMES OpenCL\r\n+    )\r\n+endif(ENV_ATISTREAMSDKROOT)\r\n+\r\n+include(FindPackageHandleStandardArgs)\r\n+find_package_handle_standard_args(\r\n+  OPENCL\r\n+  DEFAULT_MSG\r\n+  OPENCL_LIBRARY OPENCL_INCLUDE_DIR\r\n+  )\r\n+\r\n+if(OPENCL_FOUND)\r\n+  set(OPENCL_LIBRARIES ${OPENCL_LIBRARY})\r\n+else(OPENCL_FOUND)\r\n+  set(OPENCL_LIBRARIES)\r\n+endif(OPENCL_FOUND)\r\n+\r\n+mark_as_advanced(\r\n+  OPENCL_INCLUDE_DIR\r\n+  OPENCL_LIBRARY\r\n+  )\r"
      }
    ]
  },
  {
    "sha": "778268a9adcb9060449a072c132793c8ec1daa08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzgyNjhhOWFkY2I5MDYwNDQ5YTA3MmMxMzI3OTNjOGVjMWRhYTA4",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-10T01:36:42Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-10T01:36:42Z"
      },
      "message": "removing specialized rules for Berkeley db",
      "tree": {
        "sha": "afa2cd0673466485a1e9d7c4ee9cfa3780b1d213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afa2cd0673466485a1e9d7c4ee9cfa3780b1d213"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/778268a9adcb9060449a072c132793c8ec1daa08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778268a9adcb9060449a072c132793c8ec1daa08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/778268a9adcb9060449a072c132793c8ec1daa08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778268a9adcb9060449a072c132793c8ec1daa08/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e8e97edb5a6244c2a14108496fe75679d4ac6cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e8e97edb5a6244c2a14108496fe75679d4ac6cd"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2776ef5abdefbe26fcfef6d44437bc56ee14ee09",
        "filename": "Modules/FindBerkeleyDB.cmake",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/778268a9adcb9060449a072c132793c8ec1daa08/Modules/FindBerkeleyDB.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/778268a9adcb9060449a072c132793c8ec1daa08/Modules/FindBerkeleyDB.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindBerkeleyDB.cmake?ref=778268a9adcb9060449a072c132793c8ec1daa08",
        "patch": "@@ -15,7 +15,6 @@ FIND_PATH(BerkeleyDB_INCLUDE_DIR db_cxx.h\n /usr/local/include\n /usr/include/db4\n /usr/include\n-/usr/local/BerkeleyDB.4.7/include\n )\n \n SET(BerkeleyDB_NAMES ${BerkeleyDB_NAMES} db db_cxx)\n@@ -38,7 +37,7 @@ endif (NAME_EXTENSION)\n foreach(NAME ${BerkeleyDB_NAMES})\n   FIND_LIBRARY(BerkeleyDB_LIBRARY${NAME}\n     NAMES ${NAME}\n-    PATHS /usr/lib /usr/local/lib /usr/local/BerkeleyDB.4.7/lib\n+    PATHS /usr/lib /usr/local/lib\n     )\n   \n   SET(BerkeleyDB_LIBRARIES ${BerkeleyDB_LIBRARIES} ${BerkeleyDB_LIBRARY${NAME}})"
      }
    ]
  },
  {
    "sha": "c116e0b5de5169e7d1eb9b963d69d65896433161",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTE2ZTBiNWRlNTE2OWU3ZDFlYjliOTYzZDY5ZDY1ODk2NDMzMTYx",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-10T01:45:45Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-10T01:45:45Z"
      },
      "message": "adding gui flag",
      "tree": {
        "sha": "5d3ee271f75eeaed80985ca04b3fb58dccacd7fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d3ee271f75eeaed80985ca04b3fb58dccacd7fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c116e0b5de5169e7d1eb9b963d69d65896433161",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c116e0b5de5169e7d1eb9b963d69d65896433161",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c116e0b5de5169e7d1eb9b963d69d65896433161",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c116e0b5de5169e7d1eb9b963d69d65896433161/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "778268a9adcb9060449a072c132793c8ec1daa08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/778268a9adcb9060449a072c132793c8ec1daa08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/778268a9adcb9060449a072c132793c8ec1daa08"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 41,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7e918e7e67bf2b80522644a13eca8c074d33a29a",
        "filename": "CMakeLists.txt",
        "status": "modified",
        "additions": 41,
        "deletions": 9,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c116e0b5de5169e7d1eb9b963d69d65896433161/CMakeLists.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c116e0b5de5169e7d1eb9b963d69d65896433161/CMakeLists.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CMakeLists.txt?ref=c116e0b5de5169e7d1eb9b963d69d65896433161",
        "patch": "@@ -4,17 +4,41 @@\n \n cmake_minimum_required (VERSION 2.6)\n project (bitcoin)\n+\n+OPTION(BITCOIN_BUILD_GUI \"Build Server GUI (bitcoin)\" ON)\n+\n set(CMAKE_BUILD_TYPE Release)\n set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/Modules)\n \n+# Find Boost components\n find_package(Boost COMPONENTS system filesystem program_options thread REQUIRED)\n-find_package(wxWidgets 2.9 COMPONENTS base core REQUIRED)\n+\n+\n+# Use wxWidgets module built into CMake\n+IF(BITCOIN_BUILD_GUI)\n+\tSET(wxWidgets_USE_DEBUG OFF)\n+\tSET(wxWidgets_USE_UNICODE ON)\n+\tSET(wxWidgets_USE_UNIVERSAL ON)\n+\tSET(wxWidgets_USE_STATIC ON)\n+\t\n+\tFIND_PACKAGE(wxWidgets 2.9 REQUIRED base core adv html)\n+\t\n+\tIF(wxWidgets_FOUND)\n+\t\tINCLUDE_DIRECTORIES(${wxWidgets_INCLUDE_DIRS})\n+\tENDIF(wxWidgets_FOUND)\n+ENDIF(BITCOIN_BUILD_GUI)\n+\n+# Use OpenSSL module built into CMake\n+FIND_PACKAGE(OpenSSL REQUIRED)\n+\n+# Custom find for BerkeleyDB\n find_package(BerkeleyDB 4.7 REQUIRED)\n \n-set(COMMON_LIBS crypto ssl ${BerkeleyDB_LIBRARIES}\n+\n+set(COMMON_LIBS crypto ${OPENSSL_LIBRARIES} ${BerkeleyDB_LIBRARIES}\n   ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_THREAD_LIBRARY})\n \n-include_directories(${wxWidgets_INCLUDE_DIRS} ${BerkeleyDB_INCLUDE_DIR})\n+include_directories(${OPENSSL_INCLUDE_DIR} ${BerkeleyDB_INCLUDE_DIR})\n \n add_definitions(-D__WXGTK__ -DNOPCH -DFOURWAYSSE2 -DUSE_SSL -Wno-invalid-offsetof)\n \n@@ -24,13 +48,21 @@ add_library(btc db.cpp irc.cpp net.cpp rpc.cpp script.cpp sha256.cpp util.cpp)\n #add_library(sha256 sha256.cpp) -msse2 -march=amdfam10 from original makefile\n add_subdirectory(cryptopp)\n \n-add_library(btc_ui ui.cpp uibase.cpp init.cpp )\n-set_target_properties(btc_ui PROPERTIES COMPILE_FLAGS -DGUI)\n \n add_executable(bitcoind main.cpp init.cpp)\n target_link_libraries(bitcoind btc cryptopp ${COMMON_LIBS})\n+IF(BITCOIN_BUILD_GUI)\n+\n+  add_library(btc_ui ui.cpp uibase.cpp init.cpp )\n+  set_target_properties(btc_ui PROPERTIES COMPILE_FLAGS -DGUI)\n+  \n+  add_executable(bitcoin main.cpp init.cpp)\n+  set_target_properties(bitcoin PROPERTIES COMPILE_FLAGS -DGUI)\n+  target_link_libraries(bitcoin btc btc_ui cryptopp \n+    ${wxWidgets_LIBRARIES} ${COMMON_LIBS})\n+  \n+ENDIF(BITCOIN_BUILD_GUI)\n \n-add_executable(bitcoin main.cpp init.cpp)\n-set_target_properties(bitcoin PROPERTIES COMPILE_FLAGS -DGUI)\n-target_link_libraries(bitcoin btc btc_ui cryptopp \n-  ${wxWidgets_LIBRARIES} ${COMMON_LIBS})\n+IF(WIN32)\n+\tTARGET_LINK_LIBRARIES(bitcoin winmm.lib shlwapi.lib)\n+ENDIF(WIN32)"
      }
    ]
  },
  {
    "sha": "ee47795a6c63e012a937b612d004cc878eb88caf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTQ3Nzk1YTZjNjNlMDEyYTkzN2I2MTJkMDA0Y2M4NzhlYjg4Y2Fm",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-10T02:48:12Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-10T02:48:12Z"
      },
      "message": "Merge branch 'master' into cmake_devel",
      "tree": {
        "sha": "63230bcccbde8317ae881f68f5a63cd1abaa4801",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63230bcccbde8317ae881f68f5a63cd1abaa4801"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee47795a6c63e012a937b612d004cc878eb88caf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee47795a6c63e012a937b612d004cc878eb88caf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee47795a6c63e012a937b612d004cc878eb88caf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee47795a6c63e012a937b612d004cc878eb88caf/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c116e0b5de5169e7d1eb9b963d69d65896433161",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c116e0b5de5169e7d1eb9b963d69d65896433161",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c116e0b5de5169e7d1eb9b963d69d65896433161"
      },
      {
        "sha": "009d5fb41f3aa39baeeb3f72454cdc14459fc67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/009d5fb41f3aa39baeeb3f72454cdc14459fc67e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/009d5fb41f3aa39baeeb3f72454cdc14459fc67e"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 88,
      "deletions": 43
    },
    "files": [
      {
        "sha": "cfb5d8e33040d53c0707b65ee656f0f2bbdc812b",
        "filename": "init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee47795a6c63e012a937b612d004cc878eb88caf/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee47795a6c63e012a937b612d004cc878eb88caf/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/init.cpp?ref=ee47795a6c63e012a937b612d004cc878eb88caf",
        "patch": "@@ -181,7 +181,8 @@ bool AppInit2(int argc, char* argv[])\n             \"  -rpcpassword=<pw>\\t  \"   + _(\"Password for JSON-RPC connections\\n\") +\n             \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port>\\n\") +\n             \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n-            \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip>\\n\");\n+            \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip>\\n\") +\n+            \"  -nolisten        \\t  \"   + _(\"Don't accept connections from outside\");\n \n #ifdef USE_SSL\n         strUsage += string() +\n@@ -211,6 +212,8 @@ bool AppInit2(int argc, char* argv[])\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n \n     fTestNet = GetBoolArg(\"-testnet\");\n+    \n+    fNoListen = GetBoolArg(\"-nolisten\");\n \n     if (fCommandLine)\n     {\n@@ -290,10 +293,13 @@ bool AppInit2(int argc, char* argv[])\n \n     // Bind to the port early so we can tell if another instance is already running.\n     string strErrors;\n-    if (!BindListenPort(strErrors))\n+    if (!fNoListen)\n     {\n-        wxMessageBox(strErrors, \"Bitcoin\");\n-        return false;\n+        if (!BindListenPort(strErrors))\n+        {\n+            wxMessageBox(strErrors, \"Bitcoin\");\n+            return false;\n+        }\n     }\n \n     //"
      },
      {
        "sha": "5adaf11658b11238c13859b3aefb0b7418223b1a",
        "filename": "irc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee47795a6c63e012a937b612d004cc878eb88caf/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee47795a6c63e012a937b612d004cc878eb88caf/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/irc.cpp?ref=ee47795a6c63e012a937b612d004cc878eb88caf",
        "patch": "@@ -257,8 +257,10 @@ void ThreadIRCSeed(void* parg)\n \n void ThreadIRCSeed2(void* parg)\n {\n-    if (mapArgs.count(\"-connect\"))\n+    /* Dont advertise on IRC if we don't allow incoming connections */\n+    if (mapArgs.count(\"-connect\") || fNoListen)\n         return;\n+\n     if (GetBoolArg(\"-noirc\"))\n         return;\n     printf(\"ThreadIRCSeed started\\n\");"
      },
      {
        "sha": "b7dfd9fabebb2b892d12cf24b412a4ca92335ad6",
        "filename": "main.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 18,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee47795a6c63e012a937b612d004cc878eb88caf/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee47795a6c63e012a937b612d004cc878eb88caf/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.cpp?ref=ee47795a6c63e012a937b612d004cc878eb88caf",
        "patch": "@@ -395,9 +395,12 @@ int CWalletTx::GetRequestCount() const\n }\n \n void CWalletTx::GetAmounts(int64& nGenerated, list<pair<string, int64> >& listReceived,\n-                           int64& nSent, int64& nFee, string& strSentAccount) const\n+                           list<pair<string, int64> >& listSent, int64& nFee, string& strSentAccount) const\n {\n-    nGenerated = nSent = nFee = 0;\n+    nGenerated = nFee = 0;\n+    listReceived.clear();\n+    listSent.clear();\n+    strSentAccount = strFromAccount;\n \n     if (IsCoinBase())\n     {\n@@ -406,42 +409,58 @@ void CWalletTx::GetAmounts(int64& nGenerated, list<pair<string, int64> >& listRe\n         return;\n     }\n \n-    // Received.  Standard client will never generate a send-to-multiple-recipients,\n+    // Compute fee:\n+    int64 nDebit = GetDebit();\n+    if (nDebit > 0) // debit>0 means we signed/sent this transaction\n+    {\n+        int64 nValueOut = GetValueOut();\n+        nFee = nDebit - nValueOut;\n+    }\n+\n+    // Sent/received.  Standard client will never generate a send-to-multiple-recipients,\n     // but non-standard clients might (so return a list of address/amount pairs)\n     foreach(const CTxOut& txout, vout)\n     {\n+        string address;\n+        uint160 hash160;\n         vector<unsigned char> vchPubKey;\n-        if (ExtractPubKey(txout.scriptPubKey, true, vchPubKey))\n-            listReceived.push_back(make_pair(PubKeyToAddress(vchPubKey), txout.nValue));\n-    }\n+        if (ExtractHash160(txout.scriptPubKey, hash160))\n+            address = Hash160ToAddress(hash160);\n+        else if (ExtractPubKey(txout.scriptPubKey, false, vchPubKey))\n+            address = PubKeyToAddress(vchPubKey);\n+        else\n+            address = \" unknown \"; // some type of weird non-standard transaction?\n \n-    // Sent\n-    int64 nDebit = GetDebit();\n-    if (nDebit > 0)\n-    {\n-        int64 nValueOut = GetValueOut();\n-        nFee = nDebit - nValueOut;\n-        nSent = nValueOut - GetChange();\n-        strSentAccount = strFromAccount;\n+        if (nDebit > 0 && txout.IsChange())\n+            continue;\n+\n+        if (nDebit > 0)\n+            listSent.push_back(make_pair(address, txout.nValue));\n+\n+        if (txout.IsMine())\n+            listReceived.push_back(make_pair(address, txout.nValue));\n     }\n+\n }\n \n void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived, \n                                   int64& nSent, int64& nFee) const\n {\n     nGenerated = nReceived = nSent = nFee = 0;\n \n-    int64 allGenerated, allSent, allFee;\n-    allGenerated = allSent = allFee = 0;\n+    int64 allGenerated, allFee;\n+    allGenerated = allFee = 0;\n     string strSentAccount;\n     list<pair<string, int64> > listReceived;\n-    GetAmounts(allGenerated, listReceived, allSent, allFee, strSentAccount);\n+    list<pair<string, int64> > listSent;\n+    GetAmounts(allGenerated, listReceived, listSent, allFee, strSentAccount);\n \n     if (strAccount == \"\")\n         nGenerated = allGenerated;\n     if (strAccount == strSentAccount)\n     {\n-        nSent = allSent;\n+        foreach(const PAIRTYPE(string,int64)& s, listSent)\n+            nSent += s.second;\n         nFee = allFee;\n     }\n     CRITICAL_BLOCK(cs_mapAddressBook)"
      },
      {
        "sha": "3c7bcb22f0f0ae4f5f1cd1553dc21005a24e3e36",
        "filename": "main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee47795a6c63e012a937b612d004cc878eb88caf/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee47795a6c63e012a937b612d004cc878eb88caf/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.h?ref=ee47795a6c63e012a937b612d004cc878eb88caf",
        "patch": "@@ -874,7 +874,7 @@ class CWalletTx : public CMerkleTx\n     }\n \n     void GetAmounts(int64& nGenerated, list<pair<string /* address */, int64> >& listReceived,\n-                    int64& nSent, int64& nFee, string& strSentAccount) const;\n+                    list<pair<string /* address */, int64> >& listSent, int64& nFee, string& strSentAccount) const;\n \n     void GetAccountAmounts(const string& strAccount, int64& nGenerated, int64& nReceived, \n                            int64& nSent, int64& nFee) const;"
      },
      {
        "sha": "a626acd3760c2267493f7b69367726e706e10d3b",
        "filename": "net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee47795a6c63e012a937b612d004cc878eb88caf/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee47795a6c63e012a937b612d004cc878eb88caf/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/net.cpp?ref=ee47795a6c63e012a937b612d004cc878eb88caf",
        "patch": "@@ -643,7 +643,9 @@ void ThreadSocketHandler2(void* parg)\n         FD_ZERO(&fdsetSend);\n         FD_ZERO(&fdsetError);\n         SOCKET hSocketMax = 0;\n-        FD_SET(hListenSocket, &fdsetRecv);\n+\n+        if(hListenSocket != INVALID_SOCKET)\n+            FD_SET(hListenSocket, &fdsetRecv);\n         hSocketMax = max(hSocketMax, hListenSocket);\n         CRITICAL_BLOCK(cs_vNodes)\n         {\n@@ -680,7 +682,7 @@ void ThreadSocketHandler2(void* parg)\n         //\n         // Accept new connections\n         //\n-        if (FD_ISSET(hListenSocket, &fdsetRecv))\n+        if (hListenSocket != INVALID_SOCKET && FD_ISSET(hListenSocket, &fdsetRecv))\n         {\n             struct sockaddr_in sockaddr;\n             socklen_t len = sizeof(sockaddr);\n@@ -1344,7 +1346,7 @@ void StartNode(void* parg)\n #endif\n     printf(\"addrLocalHost = %s\\n\", addrLocalHost.ToString().c_str());\n \n-    if (fUseProxy || mapArgs.count(\"-connect\"))\n+    if (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n     {\n         // Proxies can't take incoming connections\n         addrLocalHost.ip = CAddress(\"0.0.0.0\").ip;"
      },
      {
        "sha": "520921972ff649f75f461bb3ecc86979a01aa1dd",
        "filename": "rpc.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 15,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee47795a6c63e012a937b612d004cc878eb88caf/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee47795a6c63e012a937b612d004cc878eb88caf/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/rpc.cpp?ref=ee47795a6c63e012a937b612d004cc878eb88caf",
        "patch": "@@ -859,10 +859,11 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, Array& ret)\n {\n-    int64 nGenerated, nSent, nFee;\n+    int64 nGenerated, nFee;\n     string strSentAccount;\n     list<pair<string, int64> > listReceived;\n-    wtx.GetAmounts(nGenerated, listReceived, nSent, nFee, strSentAccount);\n+    list<pair<string, int64> > listSent;\n+    wtx.GetAmounts(nGenerated, listReceived, listSent, nFee, strSentAccount);\n \n     bool fAllAccounts = (strAccount == string(\"*\"));\n \n@@ -878,31 +879,41 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     }\n \n     // Sent\n-    if ((nSent != 0 || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n+    if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        Object entry;\n-        entry.push_back(Pair(\"account\", strSentAccount));\n-        entry.push_back(Pair(\"category\", \"send\"));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(-nSent)));\n-        entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n-        WalletTxToJSON(wtx, entry);\n-        ret.push_back(entry);\n+        foreach(const PAIRTYPE(string, int64)& s, listSent)\n+        {\n+            Object entry;\n+            entry.push_back(Pair(\"account\", strSentAccount));\n+            entry.push_back(Pair(\"address\", s.first));\n+            entry.push_back(Pair(\"category\", \"send\"));\n+            entry.push_back(Pair(\"amount\", ValueFromAmount(-s.second)));\n+            entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n+            WalletTxToJSON(wtx, entry);\n+            ret.push_back(entry);\n+        }\n     }\n \n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n         CRITICAL_BLOCK(cs_mapAddressBook)\n         {\n             foreach(const PAIRTYPE(string, int64)& r, listReceived)\n-                if (mapAddressBook.count(r.first) && (fAllAccounts || mapAddressBook[r.first] == strAccount))\n+            {\n+                string account;\n+                if (mapAddressBook.count(r.first))\n+                    account = mapAddressBook[r.first];\n+                if (fAllAccounts || (account == strAccount))\n                 {\n                     Object entry;\n-                    entry.push_back(Pair(\"account\", mapAddressBook[r.first]));\n+                    entry.push_back(Pair(\"account\", account));\n+                    entry.push_back(Pair(\"address\", r.first));\n                     entry.push_back(Pair(\"category\", \"receive\"));\n                     entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));\n                     WalletTxToJSON(wtx, entry);\n                     ret.push_back(entry);\n                 }\n+            }\n         }\n \n }\n@@ -916,6 +927,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n         Object entry;\n         entry.push_back(Pair(\"account\", acentry.strAccount));\n         entry.push_back(Pair(\"category\", \"move\"));\n+        entry.push_back(Pair(\"time\", (boost::int64_t)acentry.nTime));\n         entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));\n         entry.push_back(Pair(\"otheraccount\", acentry.strOtherAccount));\n         entry.push_back(Pair(\"comment\", acentry.strComment));\n@@ -1007,11 +1019,14 @@ Value listaccounts(const Array& params, bool fHelp)\n         for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            int64 nGenerated, nSent, nFee;\n+            int64 nGenerated, nFee;\n             string strSentAccount;\n             list<pair<string, int64> > listReceived;\n-            wtx.GetAmounts(nGenerated, listReceived, nSent, nFee, strSentAccount);\n-            mapAccountBalances[strSentAccount] -= nSent+nFee;\n+            list<pair<string, int64> > listSent;\n+            wtx.GetAmounts(nGenerated, listReceived, listSent, nFee, strSentAccount);\n+            mapAccountBalances[strSentAccount] -= nFee;\n+            foreach(const PAIRTYPE(string, int64)& s, listSent)\n+                mapAccountBalances[strSentAccount] -= s.second;\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n                 mapAccountBalances[\"\"] += nGenerated;"
      },
      {
        "sha": "694f913045073e1f02be933e1d8924dfdeae7121",
        "filename": "util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee47795a6c63e012a937b612d004cc878eb88caf/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee47795a6c63e012a937b612d004cc878eb88caf/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util.cpp?ref=ee47795a6c63e012a937b612d004cc878eb88caf",
        "patch": "@@ -17,7 +17,7 @@ bool fDaemon = false;\n bool fCommandLine = false;\n string strMiscWarning;\n bool fTestNet = false;\n-\n+bool fNoListen = false;\n \n \n "
      },
      {
        "sha": "c69bf1ce17fdb2556a20ffe7eba5a3da7985ee6d",
        "filename": "util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee47795a6c63e012a937b612d004cc878eb88caf/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee47795a6c63e012a937b612d004cc878eb88caf/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util.h?ref=ee47795a6c63e012a937b612d004cc878eb88caf",
        "patch": "@@ -146,6 +146,7 @@ extern bool fDaemon;\n extern bool fCommandLine;\n extern string strMiscWarning;\n extern bool fTestNet;\n+extern bool fNoListen;\n \n void RandAddSeed();\n void RandAddSeedPerfmon();"
      }
    ]
  },
  {
    "sha": "f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDBhMDlhNzRiM2MwYWEyYTVkYmI5ODU4MWFiOWQ5MzQyYjA4YzY4",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-17T08:11:31Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-17T08:11:31Z"
      },
      "message": "merging in cmake from https://bitbucket.org/dkaparis/bitcoin-cmake core CMakeLists.txt merged, still some stuff to pull from modules",
      "tree": {
        "sha": "d9d0fef3f76b7941ab53c5044ef80e4056641aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9d0fef3f76b7941ab53c5044ef80e4056641aa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee47795a6c63e012a937b612d004cc878eb88caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee47795a6c63e012a937b612d004cc878eb88caf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee47795a6c63e012a937b612d004cc878eb88caf"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 34,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f13e5bdc08464a10ddfda6e0b6031213c8664afb",
        "filename": "CMakeLists.txt",
        "status": "modified",
        "additions": 34,
        "deletions": 8,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68/CMakeLists.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68/CMakeLists.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CMakeLists.txt?ref=f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68",
        "patch": "@@ -1,7 +1,3 @@\n-# Copyright (c) 2009-2010 Satoshi Nakamoto\n-# Distributed under the MIT/X11 software license, see the accompanying\n-# file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-\n cmake_minimum_required (VERSION 2.6)\n project (bitcoin)\n \n@@ -11,7 +7,19 @@ set(CMAKE_BUILD_TYPE Release)\n set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/Modules)\n \n # Find Boost components\n-find_package(Boost COMPONENTS system filesystem program_options thread REQUIRED)\n+set(Boost_USE_STATIC_LIBS ON)\n+set(Boost_ADDITIONAL_VERSIONS \"1.42\" \"1.42.0\" \"1.43\" \"1.43.0\")\n+find_package(Boost 1.35.0 COMPONENTS system \n+                                     filesystem \n+                                     program_options \n+                                     thread \n+                                     date_time\n+                                     regex REQUIRED)\n+\n+if (${Boost_VERSION} EQUAL 104400 AND MSVC_VERSION EQUAL 1600)\n+    #Avoid error with boost 1.44 interprocess and MSVC10\n+    add_definitions(-DBOOST_NO_RVALUE_REFERENCES)\n+endif (${Boost_VERSION} EQUAL 104400 AND MSVC_VERSION EQUAL 1600)\n \n \n # Use wxWidgets module built into CMake\n@@ -26,8 +34,19 @@ IF(BITCOIN_BUILD_GUI)\n \tIF(wxWidgets_FOUND)\n \t\tINCLUDE_DIRECTORIES(${wxWidgets_INCLUDE_DIRS})\n \tENDIF(wxWidgets_FOUND)\n+ \n ENDIF(BITCOIN_BUILD_GUI)\n \n+if (MSVC)\n+    #MSVC generates and embeds a manifest file automatically, so we should\n+    #disable wx's manifest file inclusion\n+    add_definitions(-DwxUSE_NO_MANIFEST)\n+    #ASM is disabled in original bitcoin makefile for vc. Without this,\n+    #SHA-256 hashing is broken\n+    add_definitions(-DCRYPTOPP_DISABLE_ASM)\n+endif (MSVC)\n+\n+\n # Use OpenSSL module built into CMake\n FIND_PACKAGE(OpenSSL REQUIRED)\n \n@@ -38,9 +57,10 @@ find_package(BerkeleyDB 4.7 REQUIRED)\n set(COMMON_LIBS crypto ${OPENSSL_LIBRARIES} ${BerkeleyDB_LIBRARIES}\n   ${Boost_FILESYSTEM_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_THREAD_LIBRARY})\n \n-include_directories(${OPENSSL_INCLUDE_DIR} ${BerkeleyDB_INCLUDE_DIR})\n+include_directories(${Boost_INCLUDE_DIR} ${OPENSSL_INCLUDE_DIR} ${BerkeleyDB_INCLUDE_DIR})\n \n-add_definitions(-D__WXGTK__ -DNOPCH -DFOURWAYSSE2 -DUSE_SSL -Wno-invalid-offsetof)\n+\n+add_definitions(-DNOPCH -DFOURWAYSSE2 -DUSE_SSL -Wno-invalid-offsetof)\n \n \n add_library(btc db.cpp irc.cpp net.cpp rpc.cpp script.cpp sha256.cpp util.cpp)\n@@ -61,8 +81,14 @@ IF(BITCOIN_BUILD_GUI)\n   target_link_libraries(bitcoin btc btc_ui cryptopp \n     ${wxWidgets_LIBRARIES} ${COMMON_LIBS})\n   \n+  include( ${wxWidgets_USE_FILE} )\n+\n ENDIF(BITCOIN_BUILD_GUI)\n \n IF(WIN32)\n-\tTARGET_LINK_LIBRARIES(bitcoin winmm.lib shlwapi.lib)\n+  # __WXMSW__ define is added by UsewxWidgets, but it is needed for\n+  #bitcoind also, even if wxwidgets is not found\n+  set_target_properties(bitcoind PROPERTIES COMPILE_DEFINITIONS __WXMSW__)\n+  \n+  TARGET_LINK_LIBRARIES(bitcoin winmm.lib shlwapi.lib) #TODO check win 7/Vista presence http://msdn.microsoft.com/en-us/library/bb759845%28v=vs.85%29.aspx\n ENDIF(WIN32)"
      }
    ]
  },
  {
    "sha": "7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2Y5MDUzYjFjNWYzYjkyMjFmYmVkMTg1MTViZmRmOGQ5YmY5ODE3",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-20T09:55:42Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-20T09:55:42Z"
      },
      "message": "merging FindBerkeleyDB macro from https://bitbucket.org/dkaparis/bitcoin-cmake",
      "tree": {
        "sha": "aaa4af9c908f845f9e982be26f4c0f4e7f11a954",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaa4af9c908f845f9e982be26f4c0f4e7f11a954"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f00a09a74b3c0aa2a5dbb98581ab9d9342b08c68"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 87,
      "deletions": 59
    },
    "files": [
      {
        "sha": "6814f959b1f76bc88b45dbecd824d435f7f8fa7d",
        "filename": "Modules/FindBerkeleyDB.cmake",
        "status": "modified",
        "additions": 87,
        "deletions": 59,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817/Modules/FindBerkeleyDB.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817/Modules/FindBerkeleyDB.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindBerkeleyDB.cmake?ref=7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817",
        "patch": "@@ -1,59 +1,87 @@\n-# -*- cmake -*-\n-\n-# - Find BerkeleyDB\n-# Find the BerkeleyDB includes and library\n-# This module defines\n-#  DB_INCLUDE_DIR, where to find db.h, etc.\n-#  DB_LIBRARIES, the libraries needed to use BerkeleyDB.\n-#  DB_FOUND, If false, do not try to use BerkeleyDB.\n-# also defined, but not for general use are\n-#  DB_LIBRARY, where to find the BerkeleyDB library.\n-\n-\n-FIND_PATH(BerkeleyDB_INCLUDE_DIR db_cxx.h\n-/usr/local/include/db4\n-/usr/local/include\n-/usr/include/db4\n-/usr/include\n-)\n-\n-SET(BerkeleyDB_NAMES ${BerkeleyDB_NAMES} db db_cxx)\n-\n-\n-if (BerkeleyDB_FIND_VERSION_MAJOR AND BerkeleyDB_FIND_VERSION_MINOR)\n-  set(NAME_EXTENSION -${BerkeleyDB_FIND_VERSION_MAJOR}.${BerkeleyDB_FIND_VERSION_MINOR})\n-elseif (BerkeleyDB_FIND_VERSION_MAJOR)\n-  set(NAME_EXTENSION -${BerkeleyDB_FIND_VERSION_MAJOR})\n-endif(BerkeleyDB_FIND_VERSION_MAJOR AND BerkeleyDB_FIND_VERSION_MINOR)\n-\n-if (NAME_EXTENSION)\n-  foreach (NAME ${BerkeleyDB_NAMES})\n-    set(NEW_NAMES ${NEW_NAMES} \"${NAME}${NAME_EXTENSION}\")\n-  endforeach (NAME)\n-  set (BerkeleyDB_NAMES ${NEW_NAMES})\n-endif (NAME_EXTENSION)\n-\n-\n-foreach(NAME ${BerkeleyDB_NAMES})\n-  FIND_LIBRARY(BerkeleyDB_LIBRARY${NAME}\n-    NAMES ${NAME}\n-    PATHS /usr/lib /usr/local/lib\n-    )\n-  \n-  SET(BerkeleyDB_LIBRARIES ${BerkeleyDB_LIBRARIES} ${BerkeleyDB_LIBRARY${NAME}})\n-endforeach(NAME)\n-\n-# handle the QUIETLY and REQUIRED arguments and set JPEG_FOUND to TRUE if \n-# all listed variables are TRUE\n-INCLUDE(FindPackageHandleStandardArgs)\n-FIND_PACKAGE_HANDLE_STANDARD_ARGS(BerkeleyDB DEFAULT_MSG BerkeleyDB_LIBRARIES BerkeleyDB_INCLUDE_DIR)\n-\n-\n-# Deprecated declarations.\n-SET (NATIVE_BerkeleyDB_INCLUDE_PATH ${BerkeleyDB_INCLUDE_DIR} )\n-#GET_FILENAME_COMPONENT (NATIVE_BerkeleyDB_LIB_PATH ${BerkeleyDB_LIBRARY} PATH)\n-\n-MARK_AS_ADVANCED(\n-  BerkeleyDB_LIBRARIES\n-  BerkeleyDB_INCLUDE_DIR\n-  )\n+# Copyright 2010, Dimitri Kaparis <kaparis.dimitri at gmail dot com>\r\n+\r\n+# CMake module to find Berkeley DB\r\n+\r\n+# For MSVC, only static libraries are used (with 's' suffix)\r\n+\r\n+# This module uses:\r\n+#\r\n+# DB_ROOT_DIR - set to BerkeleyDB's root directory\r\n+\r\n+# This module defines:\r\n+# DB_FOUND - True if BerkleyDB is found\r\n+# DB_INCLUDE_DIR - BerkeleyDB's include directory\r\n+# DB_LIBRARIES - Libraries needed to use Berkeley DB\r\n+\r\n+if (BerkeleyDB_FIND_VERSION_MAJOR AND BerkeleyDB_FIND_VERSION_MINOR)\r\n+  if (MSVC)\r\n+    set(NAME_EXTENSION ${BerkeleyDB_FIND_VERSION_MAJOR}${BerkeleyDB_FIND_VERSION_MINOR})\r\n+  else (MSVC)\r\n+    set(NAME_EXTENSION -${BerkeleyDB_FIND_VERSION_MAJOR}.${BerkeleyDB_FIND_VERSION_MINOR})\r\n+  endif(MSVC)\r\n+    \r\n+elseif (BerkeleyDB_FIND_VERSION_MAJOR)\r\n+  if (MSVC)\r\n+    set(NAME_EXTENSION ${BerkeleyDB_FIND_VERSION_MAJOR})\r\n+  else (MSVC)\r\n+    set(NAME_EXTENSION -${BerkeleyDB_FIND_VERSION_MAJOR})\r\n+  endif(MSVC)\r\n+endif(BerkeleyDB_FIND_VERSION_MAJOR AND BerkeleyDB_FIND_VERSION_MINOR)\r\n+\r\n+#library names\r\n+SET(BerkeleyDB_NAMES ${BerkeleyDB_NAMES} db db_cxx)\r\n+\r\n+#If a specific version is required append the extension.  \r\n+if (NAME_EXTENSION)\r\n+  foreach (NAME ${BerkeleyDB_NAMES})\r\n+    set(NEW_NAMES ${NEW_NAMES} \"${NAME}${NAME_EXTENSION}\")\r\n+  endforeach (NAME)\r\n+  set (BerkeleyDB_NAMES ${NEW_NAMES})\r\n+endif (NAME_EXTENSION)\r\n+\r\n+find_path(DB_INCLUDE_DIR NAMES db_cxx.h\r\n+          PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR}\r\n+          PATH_SUFFIXES include db${NAME_EXTENSION}\r\n+          )\r\n+\r\n+message(\"db include dir ${DB_INCLUDE_DIR}\")\r\n+if (MSVC)\r\n+    if (CMAKE_CL_64)\r\n+        set(_db_lib_path_SUFFIXES_DEBUG Debug_AMD64)\r\n+        set(_db_lib_path_SUFFIXES_RELEASE Release_AMD64)\r\n+    else (CMAKE_CL_64)\r\n+        set(_db_lib_path_SUFFIXES_DEBUG Debug)\r\n+        set(_db_lib_path_SUFFIXES_RELEASE Release)\r\n+    endif (CMAKE_CL_64)\r\n+    find_library(DBLIB_STATIC_RELEASE libdb${NAME_EXTENSION}s\r\n+                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${DB_INCLUDE_DIR}\r\n+                 PATH_SUFFIXES ${_db_lib_path_SUFFIXES_RELEASE} lib)\r\n+    find_library(DBLIB_STATIC_DEBUG libdb${NAME_EXTENSION}sd\r\n+                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${DB_INCLUDE_DIR}\r\n+                 PATH_SUFFIXES ${_db_lib_path_SUFFIXES_DEBUG} lib)\r\n+    set(DB_LIBRARIES optimized ${DBLIB_STATIC_RELEASE}\r\n+                     debug ${DBLIB_STATIC_DEBUG})\r\n+\r\n+else(MSVC)\r\n+    find_library(DB_LIB db${NAME_EXTENSION}\r\n+                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${DB_INCLUDE_DIR}\r\n+                       /usr/local/lib\r\n+                 PATH_SUFFIXES lib\r\n+                               db${NAME_EXTENSION})\r\n+    find_library(DB_LIBCXX db_cxx${NAME_EXTENSION}\r\n+                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${DB_INCLUDE_DIR}\r\n+                       /usr/local/lib\r\n+                 PATH_SUFFIXES lib db${NAME_EXTENSION})\r\n+    set(DB_LIBRARIES ${DB_LIB})\r\n+    if (DB_LIBCXX)\r\n+        list(APPEND DB_LIBRARIES ${DB_LIBCXX})\r\n+    endif (DB_LIBCXX)\r\n+endif (MSVC)\r\n+\r\n+include(FindPackageHandleStandardArgs)\r\n+find_package_handle_standard_args(DB DEFAULT_MSG DB_INCLUDE_DIR DB_LIBRARIES)\r\n+\r\n+MARK_AS_ADVANCED(\r\n+  BerkeleyDB_LIBRARIES\r\n+  BerkeleyDB_INCLUDE_DIR\r\n+  )\r"
      }
    ]
  },
  {
    "sha": "a029c1416665efeaab62ac0902adf92e71250a54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDI5YzE0MTY2NjVlZmVhYWI2MmFjMDkwMmFkZjkyZTcxMjUwYTU0",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-20T09:57:23Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-20T09:57:23Z"
      },
      "message": "removing errant debug statement",
      "tree": {
        "sha": "dc69216ec61e478b8f7f470b270523d95fe9b3ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc69216ec61e478b8f7f470b270523d95fe9b3ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a029c1416665efeaab62ac0902adf92e71250a54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a029c1416665efeaab62ac0902adf92e71250a54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a029c1416665efeaab62ac0902adf92e71250a54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a029c1416665efeaab62ac0902adf92e71250a54/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cf9053b1c5f3b9221fbed18515bfdf8d9bf9817"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "74a6ea61b9049fd36cde88b64c36321144c602a1",
        "filename": "Modules/FindBerkeleyDB.cmake",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a029c1416665efeaab62ac0902adf92e71250a54/Modules/FindBerkeleyDB.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a029c1416665efeaab62ac0902adf92e71250a54/Modules/FindBerkeleyDB.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindBerkeleyDB.cmake?ref=a029c1416665efeaab62ac0902adf92e71250a54",
        "patch": "@@ -44,7 +44,6 @@ find_path(DB_INCLUDE_DIR NAMES db_cxx.h\n           PATH_SUFFIXES include db${NAME_EXTENSION}\r\n           )\r\n \r\n-message(\"db include dir ${DB_INCLUDE_DIR}\")\r\n if (MSVC)\r\n     if (CMAKE_CL_64)\r\n         set(_db_lib_path_SUFFIXES_DEBUG Debug_AMD64)\r"
      }
    ]
  },
  {
    "sha": "682be87159163e7323ee9665017943798e082885",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODJiZTg3MTU5MTYzZTczMjNlZTk2NjUwMTc5NDM3OThlMDgyODg1",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-20T10:08:24Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-20T10:08:24Z"
      },
      "message": "Merge branch 'master' into cmake_devel",
      "tree": {
        "sha": "b66fa7f9063b81d3fcc53e6fa04f56318a006164",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b66fa7f9063b81d3fcc53e6fa04f56318a006164"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/682be87159163e7323ee9665017943798e082885",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/682be87159163e7323ee9665017943798e082885",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/682be87159163e7323ee9665017943798e082885",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/682be87159163e7323ee9665017943798e082885/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a029c1416665efeaab62ac0902adf92e71250a54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a029c1416665efeaab62ac0902adf92e71250a54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a029c1416665efeaab62ac0902adf92e71250a54"
      },
      {
        "sha": "b4671902f2c5aa1c95be547a61b0a72b8a3025de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4671902f2c5aa1c95be547a61b0a72b8a3025de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4671902f2c5aa1c95be547a61b0a72b8a3025de"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 48,
      "deletions": 19
    },
    "files": [
      {
        "sha": "e114d8072780c9d49e7e3dae73fcbd142c82aa04",
        "filename": "init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/682be87159163e7323ee9665017943798e082885/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/682be87159163e7323ee9665017943798e082885/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/init.cpp?ref=682be87159163e7323ee9665017943798e082885",
        "patch": "@@ -182,6 +182,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port>\\n\") +\n             \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n             \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip>\\n\") +\n+            \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n>\\n\") +\n             \"  -nolisten        \\t  \"   + _(\"Don't accept connections from outside\");\n \n #ifdef USE_SSL"
      },
      {
        "sha": "f80b24ea722eb2a3421f49ab081717e11ca44b01",
        "filename": "rpc.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 19,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/682be87159163e7323ee9665017943798e082885/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/682be87159163e7323ee9665017943798e082885/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/rpc.cpp?ref=682be87159163e7323ee9665017943798e082885",
        "patch": "@@ -315,15 +315,9 @@ Value getnewaddress(const Array& params, bool fHelp)\n }\n \n \n-Value getaccountaddress(const Array& params, bool fHelp)\n+string GetAccountAddress(string strAccount, bool bForceNew=false)\n {\n-    if (fHelp || params.size() != 1)\n-        throw runtime_error(\n-            \"getaccountaddress <account>\\n\"\n-            \"Returns the current bitcoin address for receiving payments to this account.\");\n-\n-    // Parse the account first so we don't generate a key if there's an error\n-    string strAccount = AccountFromValue(params[0]);\n+    string strAddress;\n \n     CRITICAL_BLOCK(cs_mapWallet)\n     {\n@@ -350,7 +344,7 @@ Value getaccountaddress(const Array& params, bool fHelp)\n         }\n \n         // Generate a new key\n-        if (account.vchPubKey.empty())\n+        if (account.vchPubKey.empty() || bForceNew)\n         {\n             account.vchPubKey = GetKeyFromKeyPool();\n             string strAddress = PubKeyToAddress(account.vchPubKey);\n@@ -359,11 +353,26 @@ Value getaccountaddress(const Array& params, bool fHelp)\n         }\n \n         walletdb.TxnCommit();\n-        return PubKeyToAddress(account.vchPubKey);\n+        strAddress = PubKeyToAddress(account.vchPubKey);\n     }\n+    return strAddress;\n+}\n+\n+Value getaccountaddress(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaccountaddress <account>\\n\"\n+            \"Returns the current bitcoin address for receiving payments to this account.\");\n+\n+    // Parse the account first so we don't generate a key if there's an error\n+    string strAccount = AccountFromValue(params[0]);\n+\n+    return GetAccountAddress(strAccount);\n }\n \n \n+\n Value setaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -376,6 +385,17 @@ Value setaccount(const Array& params, bool fHelp)\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n \n+    // Detect when changing the account of an address that is the 'unused current key' of another account:\n+    CRITICAL_BLOCK(cs_mapAddressBook)\n+    {\n+        if (mapAddressBook.count(strAddress))\n+        {\n+            string strOldAccount = mapAddressBook[strAddress];\n+            if (strAddress == GetAccountAddress(strOldAccount))\n+                GetAccountAddress(strOldAccount, true);\n+        }\n+    }\n+\n     SetAddressBookName(strAddress, strAccount);\n     return Value::null;\n }\n@@ -857,7 +877,7 @@ Value listreceivedbyaccount(const Array& params, bool fHelp)\n     return ListReceived(params, true);\n }\n \n-void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, Array& ret)\n+void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n     int64 nGenerated, nFee;\n     string strSentAccount;\n@@ -874,7 +894,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n         entry.push_back(Pair(\"account\", string(\"\")));\n         entry.push_back(Pair(\"category\", \"generate\"));\n         entry.push_back(Pair(\"amount\", ValueFromAmount(nGenerated)));\n-        WalletTxToJSON(wtx, entry);\n+        if (fLong)\n+            WalletTxToJSON(wtx, entry);\n         ret.push_back(entry);\n     }\n \n@@ -889,7 +910,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n             entry.push_back(Pair(\"category\", \"send\"));\n             entry.push_back(Pair(\"amount\", ValueFromAmount(-s.second)));\n             entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n-            WalletTxToJSON(wtx, entry);\n+            if (fLong)\n+                WalletTxToJSON(wtx, entry);\n             ret.push_back(entry);\n         }\n     }\n@@ -910,7 +932,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n                     entry.push_back(Pair(\"address\", r.first));\n                     entry.push_back(Pair(\"category\", \"receive\"));\n                     entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));\n-                    WalletTxToJSON(wtx, entry);\n+                    if (fLong)\n+                        WalletTxToJSON(wtx, entry);\n                     ret.push_back(entry);\n                 }\n             }\n@@ -976,7 +999,7 @@ Value listtransactions(const Array& params, bool fHelp)\n         {\n             CWalletTx *const pwtx = (*it).second.first;\n             if (pwtx != 0)\n-                ListTransactions(*pwtx, strAccount, 0, ret);\n+                ListTransactions(*pwtx, strAccount, 0, true, ret);\n             CAccountingEntry *const pacentry = (*it).second.second;\n             if (pacentry != 0)\n                 AcentryToJSON(*pacentry, strAccount, ret);\n@@ -1006,8 +1029,8 @@ Value listaccounts(const Array& params, bool fHelp)\n             \"Returns Object that has account names as keys, account balances as values.\");\n \n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (params.size() > 0)\n+        nMinDepth = params[0].get_int();\n \n     map<string, int64> mapAccountBalances;\n     CRITICAL_BLOCK(cs_mapWallet)\n@@ -1063,7 +1086,7 @@ Value gettransaction(const Array& params, bool fHelp)\n     CRITICAL_BLOCK(cs_mapWallet)\n     {\n         if (!mapWallet.count(hash))\n-            throw JSONRPCError(-5, \"Invalid transaction id\");\n+            throw JSONRPCError(-5, \"Invalid or non-wallet transaction id\");\n         const CWalletTx& wtx = mapWallet[hash];\n \n         int64 nCredit = wtx.GetCredit();\n@@ -1074,7 +1097,12 @@ Value gettransaction(const Array& params, bool fHelp)\n         entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n         if (wtx.IsFromMe())\n             entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+\n         WalletTxToJSON(mapWallet[hash], entry);\n+\n+        Array details;\n+        ListTransactions(mapWallet[hash], \"*\", 0, false, details);\n+        entry.push_back(Pair(\"details\", details));\n     }\n \n     return entry;\n@@ -1926,7 +1954,7 @@ int CommandLineRPC(int argc, char *argv[])\n         if (strMethod == \"sendfrom\"               && n > 2) ConvertTo<double>(params[2]);\n         if (strMethod == \"sendfrom\"               && n > 3) ConvertTo<boost::int64_t>(params[3]);\n         if (strMethod == \"listtransactions\"       && n > 1) ConvertTo<boost::int64_t>(params[1]);\n-        if (strMethod == \"listaccounts\"           && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+        if (strMethod == \"listaccounts\"           && n > 0) ConvertTo<boost::int64_t>(params[0]);\n \n         // Execute\n         Object reply = CallRPC(strMethod, params);"
      }
    ]
  },
  {
    "sha": "97822e339a917180fbcec501028cf37fef50d85a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzgyMmUzMzlhOTE3MTgwZmJjZWM1MDEwMjhjZjM3ZmVmNTBkODVh",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-20T10:22:21Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-20T10:22:21Z"
      },
      "message": "fixing variable names to be consistent",
      "tree": {
        "sha": "061b7047cb034694d90a2d0597d5b7a8ea4fc232",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/061b7047cb034694d90a2d0597d5b7a8ea4fc232"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97822e339a917180fbcec501028cf37fef50d85a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97822e339a917180fbcec501028cf37fef50d85a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97822e339a917180fbcec501028cf37fef50d85a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97822e339a917180fbcec501028cf37fef50d85a/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "682be87159163e7323ee9665017943798e082885",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/682be87159163e7323ee9665017943798e082885",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/682be87159163e7323ee9665017943798e082885"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "e12727268a18829eea167a8767879597504570ca",
        "filename": "Modules/FindBerkeleyDB.cmake",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97822e339a917180fbcec501028cf37fef50d85a/Modules/FindBerkeleyDB.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97822e339a917180fbcec501028cf37fef50d85a/Modules/FindBerkeleyDB.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindBerkeleyDB.cmake?ref=97822e339a917180fbcec501028cf37fef50d85a",
        "patch": "@@ -6,12 +6,12 @@\n \r\n # This module uses:\r\n #\r\n-# DB_ROOT_DIR - set to BerkeleyDB's root directory\r\n+# BerkeleyDB_ROOT_DIR - set to BerkeleyDB's root directory\r\n \r\n # This module defines:\r\n-# DB_FOUND - True if BerkleyDB is found\r\n-# DB_INCLUDE_DIR - BerkeleyDB's include directory\r\n-# DB_LIBRARIES - Libraries needed to use Berkeley DB\r\n+# BerkeleyDB_FOUND - True if BerkleyDB is found\r\n+# BerkeleyDB_INCLUDE_DIR - BerkeleyDB's include directory\r\n+# BerkeleyDB_LIBRARIES - Libraries needed to use Berkeley DB\r\n \r\n if (BerkeleyDB_FIND_VERSION_MAJOR AND BerkeleyDB_FIND_VERSION_MINOR)\r\n   if (MSVC)\r\n@@ -39,7 +39,7 @@ if (NAME_EXTENSION)\n   set (BerkeleyDB_NAMES ${NEW_NAMES})\r\n endif (NAME_EXTENSION)\r\n \r\n-find_path(DB_INCLUDE_DIR NAMES db_cxx.h\r\n+find_path(BerkeleyDB_INCLUDE_DIR NAMES db_cxx.h\r\n           PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR}\r\n           PATH_SUFFIXES include db${NAME_EXTENSION}\r\n           )\r\n@@ -53,32 +53,32 @@ if (MSVC)\n         set(_db_lib_path_SUFFIXES_RELEASE Release)\r\n     endif (CMAKE_CL_64)\r\n     find_library(DBLIB_STATIC_RELEASE libdb${NAME_EXTENSION}s\r\n-                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${DB_INCLUDE_DIR}\r\n+                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${BerkeleyDB_INCLUDE_DIR}\r\n                  PATH_SUFFIXES ${_db_lib_path_SUFFIXES_RELEASE} lib)\r\n     find_library(DBLIB_STATIC_DEBUG libdb${NAME_EXTENSION}sd\r\n-                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${DB_INCLUDE_DIR}\r\n+                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${BerkeleyDB_INCLUDE_DIR}\r\n                  PATH_SUFFIXES ${_db_lib_path_SUFFIXES_DEBUG} lib)\r\n-    set(DB_LIBRARIES optimized ${DBLIB_STATIC_RELEASE}\r\n+    set(BerkeleyDB_LIBRARIES optimized ${DBLIB_STATIC_RELEASE}\r\n                      debug ${DBLIB_STATIC_DEBUG})\r\n \r\n else(MSVC)\r\n-    find_library(DB_LIB db${NAME_EXTENSION}\r\n-                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${DB_INCLUDE_DIR}\r\n+    find_library(BerkeleyDB_LIB db${NAME_EXTENSION}\r\n+                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${BerkeleyDB_INCLUDE_DIR}\r\n                        /usr/local/lib\r\n                  PATH_SUFFIXES lib\r\n                                db${NAME_EXTENSION})\r\n-    find_library(DB_LIBCXX db_cxx${NAME_EXTENSION}\r\n-                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${DB_INCLUDE_DIR}\r\n+    find_library(BerkeleyDB_LIBCXX db_cxx${NAME_EXTENSION}\r\n+                 PATHS ${DB_ROOT_DIR} $ENV{DBROOTDIR} ${BerkeleyDB_INCLUDE_DIR}\r\n                        /usr/local/lib\r\n                  PATH_SUFFIXES lib db${NAME_EXTENSION})\r\n-    set(DB_LIBRARIES ${DB_LIB})\r\n-    if (DB_LIBCXX)\r\n-        list(APPEND DB_LIBRARIES ${DB_LIBCXX})\r\n-    endif (DB_LIBCXX)\r\n+    set(BerkeleyDB_LIBRARIES ${BerkeleyDB_LIB})\r\n+    if (BerkeleyDB_LIBCXX)\r\n+        list(APPEND BerkeleyDB_LIBRARIES ${BerkeleyDB_LIBCXX})\r\n+    endif (BerkeleyDB_LIBCXX)\r\n endif (MSVC)\r\n \r\n include(FindPackageHandleStandardArgs)\r\n-find_package_handle_standard_args(DB DEFAULT_MSG DB_INCLUDE_DIR DB_LIBRARIES)\r\n+find_package_handle_standard_args(BerkeleyDB DEFAULT_MSG BerkeleyDB_INCLUDE_DIR BerkeleyDB_LIBRARIES)\r\n \r\n MARK_AS_ADVANCED(\r\n   BerkeleyDB_LIBRARIES\r"
      }
    ]
  },
  {
    "sha": "288f55adab10d993a3d7688451ef197e6adb3de0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODhmNTVhZGFiMTBkOTkzYTNkNzY4ODQ1MWVmMTk3ZTZhZGIzZGUw",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-24T02:10:46Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-24T02:10:46Z"
      },
      "message": "pulling FindOpenSSL from https://bitbucket.org/dkaparis/bitcoin-cmake",
      "tree": {
        "sha": "9e713dbf4b0090e096783c1a00dd271bf469af31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e713dbf4b0090e096783c1a00dd271bf469af31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/288f55adab10d993a3d7688451ef197e6adb3de0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288f55adab10d993a3d7688451ef197e6adb3de0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/288f55adab10d993a3d7688451ef197e6adb3de0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288f55adab10d993a3d7688451ef197e6adb3de0/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97822e339a917180fbcec501028cf37fef50d85a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97822e339a917180fbcec501028cf37fef50d85a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97822e339a917180fbcec501028cf37fef50d85a"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 145,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5c57bbaf3ca467a30f08e7615b3e1be7d47a0b86",
        "filename": "Modules/FindOpenSSL.cmake",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/288f55adab10d993a3d7688451ef197e6adb3de0/Modules/FindOpenSSL.cmake",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/288f55adab10d993a3d7688451ef197e6adb3de0/Modules/FindOpenSSL.cmake",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Modules/FindOpenSSL.cmake?ref=288f55adab10d993a3d7688451ef197e6adb3de0",
        "patch": "@@ -0,0 +1,145 @@\n+# - Try to find the OpenSSL encryption library\r\n+# Once done this will define\r\n+#\r\n+#  OPENSSL_ROOT_DIR - Set this variable to the root installation of OpenSSL\r\n+#\r\n+# Read-Only variables:\r\n+#  OPENSSL_FOUND - system has the OpenSSL library\r\n+#  OPENSSL_INCLUDE_DIR - the OpenSSL include directory\r\n+#  OPENSSL_LIBRARIES - The libraries needed to use OpenSSL\r\n+\r\n+#=============================================================================\r\n+# Copyright 2006-2009 Kitware, Inc.\r\n+# Copyright 2006 Alexander Neundorf <neundorf@kde.org>\r\n+# Copyright 2009-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\r\n+# Minor fixes and bundled with Bitcoin build system by Dimitri Kaparis\r\n+# <kaparis.dimitri at gmail dot com>\r\n+#\r\n+\r\n+# Redistribution and use in source and binary forms, with or without\r\n+# modification, are permitted provided that the following conditions\r\n+# are met:\r\n+\r\n+# * Redistributions of source code must retain the above copyright\r\n+  # notice, this list of conditions and the following disclaimer.\r\n+\r\n+# * Redistributions in binary form must reproduce the above copyright\r\n+  # notice, this list of conditions and the following disclaimer in the\r\n+  # documentation and/or other materials provided with the distribution.\r\n+\r\n+# * Neither the names of Kitware, Inc., the Insight Software Consortium,\r\n+  # nor the names of their contributors may be used to endorse or promote\r\n+  # products derived from this software without specific prior written\r\n+  # permission.\r\n+\r\n+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n+# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n+# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n+# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n+# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n+# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n+# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n+# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n+# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+#=============================================================================\r\n+\r\n+# http://www.slproweb.com/products/Win32OpenSSL.html\r\n+SET(_OPENSSL_ROOT_HINTS\r\n+  \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\OpenSSL (32-bit)_is1;Inno Setup: App Path]\"\r\n+  \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\OpenSSL (64-bit)_is1;Inno Setup: App Path]\"\r\n+  )\r\n+SET(_OPENSSL_ROOT_PATHS\r\n+  \"C:/OpenSSL/\"\r\n+  )\r\n+FIND_PATH(OPENSSL_ROOT_DIR\r\n+  NAMES include/openssl/ssl.h\r\n+  HINTS ${_OPENSSL_ROOT_HINTS}\r\n+  PATHS ${_OPENSSL_ROOT_PATHS}\r\n+)\r\n+MARK_AS_ADVANCED(OPENSSL_ROOT_DIR)\r\n+\r\n+# Re-use the previous path:\r\n+FIND_PATH(OPENSSL_INCLUDE_DIR openssl/ssl.h\r\n+  ${OPENSSL_ROOT_DIR}/include\r\n+)\r\n+\r\n+IF(WIN32 AND NOT CYGWIN)\r\n+  # MINGW should go here too\r\n+  IF(MSVC)\r\n+    # /MD and /MDd are the standard values - if someone wants to use\r\n+    # others, the libnames have to change here too\r\n+    # use also ssl and ssleay32 in debug as fallback for openssl < 0.9.8b\r\n+    # TODO: handle /MT and static lib\r\n+    # In Visual C++ naming convention each of these four kinds of Windows libraries has it's standard suffix:\r\n+    #   * MD for dynamic-release\r\n+    #   * MDd for dynamic-debug\r\n+    #   * MT for static-release\r\n+    #   * MTd for static-debug\r\n+\r\n+    # Implementation details:\r\n+    # We are using the libraries located in the VC subdir instead of the parent directory eventhough :\r\n+    # libeay32MD.lib is identical to ../libeay32.lib, and\r\n+    # ssleay32MD.lib is identical to ../ssleay32.lib\r\n+    FIND_LIBRARY(LIB_EAY_DEBUG NAMES libeay32MDd libeay32\r\n+      PATHS ${OPENSSL_ROOT_DIR}/lib/VC\r\n+      )\r\n+    FIND_LIBRARY(LIB_EAY_RELEASE NAMES libeay32MD libeay32\r\n+      PATHS ${OPENSSL_ROOT_DIR}/lib/VC\r\n+      )\r\n+    FIND_LIBRARY(SSL_EAY_DEBUG NAMES ssleay32MDd ssleay32 ssl\r\n+      PATHS ${OPENSSL_ROOT_DIR}/lib/VC\r\n+      )\r\n+    FIND_LIBRARY(SSL_EAY_RELEASE NAMES ssleay32MD ssleay32 ssl\r\n+      PATHS ${OPENSSL_ROOT_DIR}/lib/VC\r\n+      )\r\n+    if( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )\r\n+      set( OPENSSL_LIBRARIES\r\n+        optimized ${SSL_EAY_RELEASE} debug ${SSL_EAY_DEBUG}\r\n+        optimized ${LIB_EAY_RELEASE} debug ${LIB_EAY_DEBUG}\r\n+        )\r\n+    else()\r\n+      set( OPENSSL_LIBRARIES ${SSL_EAY_RELEASE} ${LIB_EAY_RELEASE} )\r\n+    endif()\r\n+    MARK_AS_ADVANCED(SSL_EAY_DEBUG SSL_EAY_RELEASE)\r\n+    MARK_AS_ADVANCED(LIB_EAY_DEBUG LIB_EAY_RELEASE)\r\n+  ELSEIF(MINGW)\r\n+    # same player, for MingW\r\n+    FIND_LIBRARY(LIB_EAY NAMES libeay32\r\n+      PATHS ${OPENSSL_ROOT_DIR}/lib/MinGW\r\n+      )\r\n+    FIND_LIBRARY(SSL_EAY NAMES ssleay32\r\n+      PATHS ${OPENSSL_ROOT_DIR}/lib/MinGW\r\n+      )\r\n+    MARK_AS_ADVANCED(SSL_EAY LIB_EAY)\r\n+    set( OPENSSL_LIBRARIES ${SSL_EAY} ${LIB_EAY} )\r\n+  ELSE(MSVC)\r\n+    # Not sure what to pick for -say- intel, let's use the toplevel ones and hope someone report issues:\r\n+    FIND_LIBRARY(LIB_EAY NAMES libeay32\r\n+      ${OPENSSL_ROOT_DIR}/lib\r\n+      )\r\n+    FIND_LIBRARY(SSL_EAY NAMES ssleay32\r\n+      ${OPENSSL_ROOT_DIR}/lib\r\n+      )\r\n+    MARK_AS_ADVANCED(SSL_EAY LIB_EAY)\r\n+    set( OPENSSL_LIBRARIES ${SSL_EAY} ${LIB_EAY} )\r\n+  ENDIF(MSVC)\r\n+ELSE(WIN32 AND NOT CYGWIN)\r\n+\r\n+  FIND_LIBRARY(OPENSSL_SSL_LIBRARIES NAMES ssl ssleay32 ssleay32MD)\r\n+  FIND_LIBRARY(OPENSSL_CRYPTO_LIBRARIES NAMES crypto)\r\n+  MARK_AS_ADVANCED(OPENSSL_CRYPTO_LIBRARIES OPENSSL_SSL_LIBRARIES)\r\n+\r\n+  SET(OPENSSL_LIBRARIES ${OPENSSL_SSL_LIBRARIES} ${OPENSSL_CRYPTO_LIBRARIES})\r\n+\r\n+ENDIF(WIN32 AND NOT CYGWIN)\r\n+\r\n+include(FindPackageHandleStandardArgs)\r\n+find_package_handle_standard_args(OpenSSL DEFAULT_MSG\r\n+  OPENSSL_LIBRARIES \r\n+  OPENSSL_INCLUDE_DIR\r\n+)\r\n+\r\n+MARK_AS_ADVANCED(OPENSSL_INCLUDE_DIR OPENSSL_LIBRARIES)\r\n+\r"
      }
    ]
  },
  {
    "sha": "61151ba33db2244dcb752febcd065b59f4c6f057",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTE1MWJhMzNkYjIyNDRkY2I3NTJmZWJjZDA2NWI1OWY0YzZmMDU3",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-24T05:50:18Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-24T05:50:18Z"
      },
      "message": "merging changeset https://bitbucket.org/hsoft/bitcoin-clean/changeset/7c92db8ff380",
      "tree": {
        "sha": "ad13fa2ec5ddc40fe191a07ff4396e745b468345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad13fa2ec5ddc40fe191a07ff4396e745b468345"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61151ba33db2244dcb752febcd065b59f4c6f057",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61151ba33db2244dcb752febcd065b59f4c6f057",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61151ba33db2244dcb752febcd065b59f4c6f057",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61151ba33db2244dcb752febcd065b59f4c6f057/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "288f55adab10d993a3d7688451ef197e6adb3de0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/288f55adab10d993a3d7688451ef197e6adb3de0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/288f55adab10d993a3d7688451ef197e6adb3de0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe5ca0916a92a5877ed861b9e7f078e425f7443a",
        "filename": "CMakeLists.txt",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61151ba33db2244dcb752febcd065b59f4c6f057/CMakeLists.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61151ba33db2244dcb752febcd065b59f4c6f057/CMakeLists.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CMakeLists.txt?ref=61151ba33db2244dcb752febcd065b59f4c6f057",
        "patch": "@@ -24,6 +24,11 @@ endif (${Boost_VERSION} EQUAL 104400 AND MSVC_VERSION EQUAL 1600)\n \n # Use wxWidgets module built into CMake\n IF(BITCOIN_BUILD_GUI)\n+        if (APPLE)\n+          # If we don't do that, OS X's built-in wxWidgets library will be used, and it's too old.\n+          set(wxWidgets_CONFIG_EXECUTABLE \"../../deps/bin/wx-config\")\n+        endif (APPLE)\n+        \n \tSET(wxWidgets_USE_DEBUG OFF)\n \tSET(wxWidgets_USE_UNICODE ON)\n \tSET(wxWidgets_USE_UNIVERSAL ON)\n@@ -35,6 +40,11 @@ IF(BITCOIN_BUILD_GUI)\n \t\tINCLUDE_DIRECTORIES(${wxWidgets_INCLUDE_DIRS})\n \tENDIF(wxWidgets_FOUND)\n  \n+        if (APPLE)\n+          set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D__WXMAC_OSX__ -DNOPCH -DMSG_NOSIGNAL=0 -DUSE_SSL\")\n+        endif (APPLE)\n+\n+\n ENDIF(BITCOIN_BUILD_GUI)\n \n if (MSVC)"
      }
    ]
  },
  {
    "sha": "45b74d2b02a96822e9ab85f3043a64094a18e474",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWI3NGQyYjAyYTk2ODIyZTlhYjg1ZjMwNDNhNjQwOTRhMThlNDc0",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-24T07:50:43Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-01-24T07:50:43Z"
      },
      "message": "Merge git://github.com/bitcoin/bitcoin into cmake_devel",
      "tree": {
        "sha": "7dfb93b5a495c6f9c9cfc93b93626e34b5ea5503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dfb93b5a495c6f9c9cfc93b93626e34b5ea5503"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45b74d2b02a96822e9ab85f3043a64094a18e474",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45b74d2b02a96822e9ab85f3043a64094a18e474",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45b74d2b02a96822e9ab85f3043a64094a18e474",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45b74d2b02a96822e9ab85f3043a64094a18e474/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61151ba33db2244dcb752febcd065b59f4c6f057",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61151ba33db2244dcb752febcd065b59f4c6f057",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61151ba33db2244dcb752febcd065b59f4c6f057"
      },
      {
        "sha": "4698dd9a0230a58e8d83eab76315f550e016ec21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4698dd9a0230a58e8d83eab76315f550e016ec21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4698dd9a0230a58e8d83eab76315f550e016ec21"
      }
    ],
    "stats": {
      "total": 193,
      "additions": 164,
      "deletions": 29
    },
    "files": [
      {
        "sha": "ab328adbff244d735d3a1f03443709e773938cc8",
        "filename": "README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -1,13 +1,16 @@\n Bitcoin integration/staging tree\n \n-Straw-man plan for Bitcoin development (open source vets, please slap me around and help make this better):\n+Development process\n+===================\n \n-Developers work in their own trees, then submit pull requests when they think their feature is ready.\n+Developers work in their own trees, then submit pull requests when they think their feature or bug fix is ready.\n \n-Requests get discussed (where? bitcoin forums?) and if there's broad consensus they're a good thing, well written, match coding style, etc. then they're merged into the 'master' branch.\n+If it is a simple/trivial/non-controversial change, then one of the bitcoin development team members simply pulls it.\n \n-master branch is regularly built and tested (by who? need people willing to be quality assurance testers), and periodically pushed to the subversion repo to become the official, stable, released bitcoin.\n+If it is a more complicated or potentially controversial change, then the patch submitter will be asked to start a discussion (if they haven't already) on the development forums:  http://www.bitcoin.org/smf/index.php?board=6.0\n+The patch will be accepted if there is broad consensus that it is a good thing.  Developers should expect to rework and resubmit patches if they don't match the project's coding conventions (see coding.txt) or are controversial.\n \n+The master branch is regularly built and tested (by who? need people willing to be quality assurance testers), and periodically pushed to the subversion repo to become the official, stable, released bitcoin.\n \n-We'll create feature branches if/when there are major new features being worked on by several people.\n \n+Feature branches are created when there are major new features being worked on by several people."
      },
      {
        "sha": "04bdd68cde47ee1a65251a6e4c75e81f631e6b95",
        "filename": "init.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 9,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/init.cpp?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -158,7 +158,9 @@ bool AppInit2(int argc, char* argv[])\n \n     if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n     {\n+        string beta = VERSION_IS_BETA ? _(\" beta\") : \"\";\n         string strUsage = string() +\n+          _(\"Bitcoin version\") + \" \" + FormatVersion(VERSION) + pszSubVer + beta + \"\\n\\n\" +\n           _(\"Usage:\") + \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\" +\n             \"  bitcoin [options]                   \\t  \" + \"\\n\" +\n             \"  bitcoin [options] <command> [params]\\t  \" + _(\"Send command to -server or bitcoind\\n\") +\n@@ -173,25 +175,26 @@ bool AppInit2(int argc, char* argv[])\n             \"  -proxy=<ip:port> \\t  \"   + _(\"Connect through socks4 proxy\\n\") +\n             \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to\\n\") +\n             \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\\n\") +\n+            \"  -nolisten        \\t  \"   + _(\"Don't accept connections from outside\") +\n             \"  -paytxfee=<amt>  \\t  \"   + _(\"Fee per KB to add to transactions you send\\n\") +\n             \"  -server          \\t\\t  \" + _(\"Accept command line and JSON-RPC commands\\n\") +\n             \"  -daemon          \\t\\t  \" + _(\"Run in the background as a daemon and accept commands\\n\") +\n             \"  -testnet         \\t\\t  \" + _(\"Use the test network\\n\") +\n             \"  -rpcuser=<user>  \\t  \"   + _(\"Username for JSON-RPC connections\\n\") +\n             \"  -rpcpassword=<pw>\\t  \"   + _(\"Password for JSON-RPC connections\\n\") +\n-            \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port>\\n\") +\n+            \"  -rpcport=<port>  \\t\\t  \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332)\\n\") +\n             \"  -rpcallowip=<ip> \\t\\t  \" + _(\"Allow JSON-RPC connections from specified IP address\\n\") +\n-            \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip>\\n\") +\n-            \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n>\\n\") +\n-            \"  -nolisten        \\t  \"   + _(\"Don't accept connections from outside\");\n+            \"  -rpcconnect=<ip> \\t  \"   + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\\n\") +\n+            \"  -keypool=<n>     \\t  \"   + _(\"Set key pool size to <n> (default: 100)\\n\") +\n+            \"  -rescan          \\t  \"   + _(\"Rescan the block chain for missing wallet transactions\\n\");\n \n #ifdef USE_SSL\n         strUsage += string() +\n             _(\"\\nSSL options: (see the Bitcoin Wiki for SSL setup instructions)\\n\") +\n-            \"  -rpcssl=1                             \\t  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\\n\") +\n-            \"  -rpcsslcertificatchainfile=<file.cert>\\t  \" + _(\"Server certificate file (default: server.cert)\\n\") +\n-            \"  -rpcsslprivatekeyfile=<file.pem>      \\t  \" + _(\"Server private key (default: server.pem)\\n\") +\n-            \"  -rpcsslciphers=<ciphers>              \\t  \" + _(\"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\");\n+            \"  -rpcssl                                \\t  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\\n\") +\n+            \"  -rpcsslcertificatechainfile=<file.cert>\\t  \" + _(\"Server certificate file (default: server.cert)\\n\") +\n+            \"  -rpcsslprivatekeyfile=<file.pem>       \\t  \" + _(\"Server private key (default: server.pem)\\n\") +\n+            \"  -rpcsslciphers=<ciphers>               \\t  \" + _(\"Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH)\\n\");\n #endif\n \n         strUsage += string() +\n@@ -210,6 +213,7 @@ bool AppInit2(int argc, char* argv[])\n \n     fDebug = GetBoolArg(\"-debug\");\n \n+    fPrintToConsole = GetBoolArg(\"-printtoconsole\");\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n \n     fTestNet = GetBoolArg(\"-testnet\");\n@@ -225,7 +229,7 @@ bool AppInit2(int argc, char* argv[])\n     if (!fDebug && !pszSetDataDir[0])\n         ShrinkDebugFile();\n     printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n-    printf(\"Bitcoin version %s%s beta\\n\", FormatVersion(VERSION).c_str(), pszSubVer);\n+    printf(\"Bitcoin version %s%s%s\\n\", FormatVersion(VERSION).c_str(), pszSubVer, VERSION_IS_BETA ? _(\" beta\") : \"\");\n #ifdef GUI\n     printf(\"OS version %s\\n\", ((string)wxGetOsDescription()).c_str());\n     printf(\"System default language is %d %s\\n\", g_locale.GetSystemLanguage(), ((string)g_locale.GetSysName()).c_str());\n@@ -330,6 +334,13 @@ bool AppInit2(int argc, char* argv[])\n         strErrors += _(\"Error loading wallet.dat      \\n\");\n     printf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n \n+    if (GetBoolArg(\"-rescan\"))\n+    {\n+        nStart = GetTimeMillis();\n+        ScanForWalletTransactions(pindexGenesisBlock);\n+        printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    }\n+\n     printf(\"Done loading\\n\");\n \n         //// debug print"
      },
      {
        "sha": "216e245d0a741d44cb083c457585f5dbc0691d2b",
        "filename": "main.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 11,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.cpp?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -187,6 +187,19 @@ bool AddToWalletIfMine(const CTransaction& tx, const CBlock* pblock)\n     return true;\n }\n \n+bool AddToWalletIfFromMe(const CTransaction& tx, const CBlock* pblock)\n+{\n+    if (tx.IsFromMe() || mapWallet.count(tx.GetHash()))\n+    {\n+        CWalletTx wtx(tx);\n+        // Get merkle branch if transaction was found in a block\n+        if (pblock)\n+            wtx.SetMerkleBranch(pblock);\n+        return AddToWallet(wtx);\n+    }\n+    return true;\n+}\n+\n bool EraseFromWallet(uint256 hash)\n {\n     CRITICAL_BLOCK(cs_mapWallet)\n@@ -404,7 +417,7 @@ void CWalletTx::GetAmounts(int64& nGenerated, list<pair<string, int64> >& listRe\n \n     if (IsCoinBase())\n     {\n-        if (GetBlocksToMaturity() == 0)\n+        if (GetDepthInMainChain() >= COINBASE_MATURITY)\n             nGenerated = GetCredit();\n         return;\n     }\n@@ -429,8 +442,13 @@ void CWalletTx::GetAmounts(int64& nGenerated, list<pair<string, int64> >& listRe\n         else if (ExtractPubKey(txout.scriptPubKey, false, vchPubKey))\n             address = PubKeyToAddress(vchPubKey);\n         else\n-            address = \" unknown \"; // some type of weird non-standard transaction?\n+        {\n+            printf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n+                   this->GetHash().ToString().c_str());\n+            address = \" unknown \";\n+        }\n \n+        // Don't report 'change' txouts\n         if (nDebit > 0 && txout.IsChange())\n             continue;\n \n@@ -466,8 +484,19 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, i\n     CRITICAL_BLOCK(cs_mapAddressBook)\n     {\n         foreach(const PAIRTYPE(string,int64)& r, listReceived)\n-            if (mapAddressBook.count(r.first) && mapAddressBook[r.first] == strAccount)\n+        {\n+            if (mapAddressBook.count(r.first))\n+            {\n+                if (mapAddressBook[r.first] == strAccount)\n+                {\n+                    nReceived += r.second;\n+                }\n+            }\n+            else if (strAccount.empty())\n+            {\n                 nReceived += r.second;\n+            }\n+        }\n     }\n }\n \n@@ -849,11 +878,50 @@ bool CWalletTx::AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs)\n     return false;\n }\n \n+int ScanForWalletTransactions(CBlockIndex* pindexStart)\n+{\n+    int ret = 0;\n+\n+    CBlockIndex* pindex = pindexStart;\n+    CRITICAL_BLOCK(cs_mapWallet)\n+    {\n+        while (pindex)\n+        {\n+            CBlock block;\n+            block.ReadFromDisk(pindex, true);\n+            foreach(CTransaction& tx, block.vtx)\n+            {\n+                uint256 hash = tx.GetHash();\n+                if (mapWallet.count(hash)) continue;\n+                AddToWalletIfMine(tx, &block);\n+                if (mapWallet.count(hash))\n+                {\n+                    ++ret;\n+                    printf(\"Added missing RECEIVE %s\\n\", hash.ToString().c_str());\n+                    continue;\n+                }\n+                AddToWalletIfFromMe(tx, &block);\n+                if (mapWallet.count(hash))\n+                {\n+                    ++ret;\n+                    printf(\"Added missing SEND %s\\n\", hash.ToString().c_str());\n+                    continue;\n+                }\n+            }\n+            pindex = pindex->pnext;\n+        }\n+    }\n+    return ret;\n+}\n+\n void ReacceptWalletTransactions()\n {\n     CTxDB txdb(\"r\");\n-    CRITICAL_BLOCK(cs_mapWallet)\n+    bool fRepeat = true;\n+    while (fRepeat) CRITICAL_BLOCK(cs_mapWallet)\n     {\n+        fRepeat = false;\n+        vector<CDiskTxPos> vMissingTx;\n         foreach(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n         {\n             CWalletTx& wtx = item.second;\n@@ -875,12 +943,15 @@ void ReacceptWalletTransactions()\n                     {\n                         if (!txindex.vSpent[i].IsNull() && wtx.vout[i].IsMine())\n                         {\n-                            printf(\"ReacceptWalletTransactions found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()).c_str(), wtx.GetHash().ToString().c_str());\n                             wtx.fSpent = true;\n-                            wtx.WriteToDisk();\n-                            break;\n+                            vMissingTx.push_back(txindex.vSpent[i]);\n                         }\n                     }\n+                    if (wtx.fSpent)\n+                    {\n+                        printf(\"ReacceptWalletTransactions found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()).c_str(), wtx.GetHash().ToString().c_str());\n+                        wtx.WriteToDisk();\n+                    }\n                 }\n             }\n             else\n@@ -890,6 +961,12 @@ void ReacceptWalletTransactions()\n                     wtx.AcceptWalletTransaction(txdb, false);\n             }\n         }\n+        if (!vMissingTx.empty())\n+        {\n+            // TODO: optimize this to scan just part of the block chain?\n+            if (ScanForWalletTransactions(pindexGenesisBlock))\n+                fRepeat = true;  // Found missing transactions: re-do Reaccept.\n+        }\n     }\n }\n \n@@ -1361,8 +1438,6 @@ bool CBlock::ConnectBlock(CTxDB& txdb, CBlockIndex* pindex)\n     return true;\n }\n \n-\n-\n bool Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n {\n     printf(\"REORGANIZE\\n\");\n@@ -3052,7 +3127,7 @@ void CallCPUID(int in, int& aret, int& cret)\n         \"mov %%ecx, %1;\" // ecx into c\n         :\"=r\"(a),\"=r\"(c) /* output */\n         :\"r\"(in) /* input */\n-        :\"%eax\",\"%ecx\" /* clobbered register */\n+        :\"%eax\",\"%ebx\",\"%ecx\",\"%edx\" /* clobbered register */\n     );\n     aret = a;\n     cret = c;\n@@ -3455,7 +3530,7 @@ void BitcoinMiner()\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n     bool f4WaySSE2 = Detect128BitSSE2();\n     if (mapArgs.count(\"-4way\"))\n-        f4WaySSE2 = GetBoolArg(mapArgs[\"-4way\"]);\n+        f4WaySSE2 = GetBoolArg(\"-4way\");\n \n     // Each thread has its own key and counter\n     CReserveKey reservekey;"
      },
      {
        "sha": "a7ef336e000323d02200cd24815814e61aef2c34",
        "filename": "main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.h?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -69,6 +69,7 @@ bool AddKey(const CKey& key);\n vector<unsigned char> GenerateNewKey();\n bool AddToWallet(const CWalletTx& wtxIn);\n void WalletUpdateSpent(const COutPoint& prevout);\n+int ScanForWalletTransactions(CBlockIndex* pindexStart);\n void ReacceptWalletTransactions();\n bool LoadBlockIndex(bool fAllowNew=true);\n void PrintBlockTree();"
      },
      {
        "sha": "bfa6b055a8d5d6a092524d31420d8848b60c6429",
        "filename": "net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/net.cpp?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -688,12 +688,25 @@ void ThreadSocketHandler2(void* parg)\n             socklen_t len = sizeof(sockaddr);\n             SOCKET hSocket = accept(hListenSocket, (struct sockaddr*)&sockaddr, &len);\n             CAddress addr(sockaddr);\n+            bool fLimitConnections = false;\n+            int nInbound = 0;\n+\n+            if (mapArgs.count(\"-maxconnections\"))\n+                fLimitConnections = true;\n+\n+            if (fLimitConnections)\n+            {\n+                CRITICAL_BLOCK(cs_vNodes)\n+                    foreach(CNode* pnode, vNodes)\n+                    if (pnode->fInbound)\n+                        nInbound++;\n+            }\n             if (hSocket == INVALID_SOCKET)\n             {\n                 if (WSAGetLastError() != WSAEWOULDBLOCK)\n                     printf(\"socket error accept failed: %d\\n\", WSAGetLastError());\n             }\n-            else if (mapArgs.count(\"-maxconnections\") && (int)vNodes.size() >= atoi(mapArgs[\"-maxconnections\"]) - MAX_OUTBOUND_CONNECTIONS)\n+            else if (fLimitConnections && nInbound >= atoi(mapArgs[\"-maxconnections\"]) - MAX_OUTBOUND_CONNECTIONS)\n             {\n                 closesocket(hSocket);\n             }"
      },
      {
        "sha": "055e0cf1e7f16ef960199451a5fe53da266d16ac",
        "filename": "rpc.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/rpc.cpp?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -621,6 +621,36 @@ Value getbalance(const Array& params, bool fHelp)\n     if (params.size() == 0)\n         return ((double)GetBalance() / (double)COIN);\n \n+    if (params[0].get_str() == \"*\") {\n+        // Calculate total balance a different way from GetBalance()\n+        // (GetBalance() sums up all unspent TxOuts)\n+        // getbalance and getbalance '*' should always return the same number.\n+        int64 nBalance = 0;\n+        vector<string> vAccounts;\n+        for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+        {\n+            const CWalletTx& wtx = (*it).second;\n+            int64 allGenerated, allFee;\n+            allGenerated = allFee = 0;\n+            string strSentAccount;\n+            list<pair<string, int64> > listReceived;\n+            list<pair<string, int64> > listSent;\n+            wtx.GetAmounts(allGenerated, listReceived, listSent, allFee, strSentAccount);\n+            foreach(const PAIRTYPE(string,int64)& r, listReceived)\n+            {\n+                nBalance += r.second;\n+                if (!count(vAccounts.begin(), vAccounts.end(), r.first))\n+                    vAccounts.push_back(r.first);\n+            }\n+            foreach(const PAIRTYPE(string,int64)& r, listSent)\n+                nBalance -= r.second;\n+            nBalance -= allFee;\n+            nBalance += allGenerated;\n+        }\n+        printf(\"Found %d accounts\\n\", vAccounts.size());\n+        return (double)nBalance / (double)COIN;\n+    }\n+\n     string strAccount = AccountFromValue(params[0]);\n     int nMinDepth = 1;\n     if (params.size() > 1)\n@@ -1056,6 +1086,8 @@ Value listaccounts(const Array& params, bool fHelp)\n                 foreach(const PAIRTYPE(string, int64)& r, listReceived)\n                     if (mapAddressBook.count(r.first))\n                         mapAccountBalances[mapAddressBook[r.first]] += r.second;\n+                    else\n+                        mapAccountBalances[\"\"] += r.second;\n             }\n         }\n     }"
      },
      {
        "sha": "f434b04ca64a2f81636cac5728b5afca9099e667",
        "filename": "serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/serialize.h?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -27,6 +27,7 @@ static const unsigned int MAX_SIZE = 0x02000000;\n \n static const int VERSION = 31902;\n static const char* pszSubVer = \"\";\n+static const bool VERSION_IS_BETA = true;\n \n \n "
      },
      {
        "sha": "a421e776e33a239756accc73ffe1f504d8e27475",
        "filename": "uibase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/uibase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/uibase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/uibase.cpp?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -61,7 +61,6 @@ CMainFrameBase::CMainFrameBase( wxWindow* parent, wxWindowID id, const wxString&\n \tm_toolBar->Realize();\n \t\n \tm_statusBar = this->CreateStatusBar( 1, wxST_SIZEGRIP, wxID_ANY );\n-\tm_statusBar->SetBackgroundColour( wxColour( 240, 240, 240 ) );\n \t\n \twxBoxSizer* bSizer2;\n \tbSizer2 = new wxBoxSizer( wxVERTICAL );"
      },
      {
        "sha": "bf01732ea89e504c32a95b7ee26866ccb2539a62",
        "filename": "uiproject.fbp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/uiproject.fbp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/uiproject.fbp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/uiproject.fbp?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -282,7 +282,7 @@\n                 </object>\r\n             </object>\r\n             <object class=\"wxStatusBar\" expanded=\"1\">\r\n-                <property name=\"bg\">240,240,240</property>\r\n+                <property name=\"bg\"></property>\r\n                 <property name=\"context_help\"></property>\r\n                 <property name=\"enabled\">1</property>\r\n                 <property name=\"fg\"></property>\r"
      },
      {
        "sha": "0ad9532d65125fbaf5a8f5ce4cd09d5148ec7086",
        "filename": "util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45b74d2b02a96822e9ab85f3043a64094a18e474/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45b74d2b02a96822e9ab85f3043a64094a18e474/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util.cpp?ref=45b74d2b02a96822e9ab85f3043a64094a18e474",
        "patch": "@@ -165,7 +165,7 @@ inline int OutputDebugStringF(const char* pszFormat, ...)\n             GetDataDir(pszFile);\n             strlcat(pszFile, \"/debug.log\", sizeof(pszFile));\n             fileout = fopen(pszFile, \"a\");\n-            setbuf(fileout, NULL); // unbuffered\n+            if (fileout) setbuf(fileout, NULL); // unbuffered\n         }\n         if (fileout)\n         {"
      }
    ]
  },
  {
    "sha": "7a178db33ac01efefca88ee39a3931ca8d1d3434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTE3OGRiMzNhYzAxZWZlZmNhODhlZTM5YTM5MzFjYThkMWQzNDM0",
    "commit": {
      "author": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-02-03T08:29:20Z"
      },
      "committer": {
        "name": "Tully Foote",
        "email": "tfoote@willowgarage.com",
        "date": "2011-02-03T08:29:20Z"
      },
      "message": "Merge branch 'master' of https://github.com/bitcoin/bitcoin into cmake_devel",
      "tree": {
        "sha": "7732e34862bfa2c9ffad03c3a8be89ec83dda7cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7732e34862bfa2c9ffad03c3a8be89ec83dda7cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a178db33ac01efefca88ee39a3931ca8d1d3434",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a178db33ac01efefca88ee39a3931ca8d1d3434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a178db33ac01efefca88ee39a3931ca8d1d3434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a178db33ac01efefca88ee39a3931ca8d1d3434/comments",
    "author": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tfoote",
      "id": 447804,
      "node_id": "MDQ6VXNlcjQ0NzgwNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/447804?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tfoote",
      "html_url": "https://github.com/tfoote",
      "followers_url": "https://api.github.com/users/tfoote/followers",
      "following_url": "https://api.github.com/users/tfoote/following{/other_user}",
      "gists_url": "https://api.github.com/users/tfoote/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tfoote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tfoote/subscriptions",
      "organizations_url": "https://api.github.com/users/tfoote/orgs",
      "repos_url": "https://api.github.com/users/tfoote/repos",
      "events_url": "https://api.github.com/users/tfoote/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tfoote/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45b74d2b02a96822e9ab85f3043a64094a18e474",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45b74d2b02a96822e9ab85f3043a64094a18e474",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45b74d2b02a96822e9ab85f3043a64094a18e474"
      },
      {
        "sha": "bd7d9140f915d68e0abfdcd7ebdbb681c87d18c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd7d9140f915d68e0abfdcd7ebdbb681c87d18c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd7d9140f915d68e0abfdcd7ebdbb681c87d18c7"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 34,
      "deletions": 20
    },
    "files": [
      {
        "sha": "25c4db2557fa5a4eeb93a573f1e8f907c8aaa9f4",
        "filename": "build-unix.txt",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a178db33ac01efefca88ee39a3931ca8d1d3434/build-unix.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a178db33ac01efefca88ee39a3931ca8d1d3434/build-unix.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-unix.txt?ref=7a178db33ac01efefca88ee39a3931ca8d1d3434",
        "patch": "@@ -9,6 +9,14 @@ cryptographic software written by Eric Young (eay@cryptsoft.com).\n UNIX BUILD NOTES\n ================\n \n+To Build\n+--------\n+\n+make -f makefile.unix            # Bitcoin with wxWidgets GUI\n+  or\n+make -f makefile.unix bitcoind   # Headless bitcoin\n+\n+\n Dependencies\n ------------\n sudo apt-get install build-essential"
      },
      {
        "sha": "98317599ec58077bf6c4222a5285bbc5f8706b34",
        "filename": "main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a178db33ac01efefca88ee39a3931ca8d1d3434/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a178db33ac01efefca88ee39a3931ca8d1d3434/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/main.cpp?ref=7a178db33ac01efefca88ee39a3931ca8d1d3434",
        "patch": "@@ -1144,7 +1144,7 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n \n bool IsInitialBlockDownload()\n {\n-    if (pindexBest == NULL || (!fTestNet && nBestHeight < 74000))\n+    if (pindexBest == NULL || (!fTestNet && nBestHeight < 105000))\n         return true;\n     static int64 nLastUpdate;\n     static CBlockIndex* pindexLastBest;\n@@ -1705,11 +1705,12 @@ bool CBlock::AcceptBlock()\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!fTestNet)\n-        if ((nHeight == 11111 && hash != uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")) ||\n-            (nHeight == 33333 && hash != uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")) ||\n-            (nHeight == 68555 && hash != uint256(\"0x00000000001e1b4903550a0b96e9a9405c8a95f387162e4944e8d9fbe501cd6a\")) ||\n-            (nHeight == 70567 && hash != uint256(\"0x00000000006a49b14bcf27462068f1264c961f11fa2e0eddd2be0791e1d4124a\")) ||\n-            (nHeight == 74000 && hash != uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\")))\n+        if ((nHeight ==  11111 && hash != uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")) ||\n+            (nHeight ==  33333 && hash != uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")) ||\n+            (nHeight ==  68555 && hash != uint256(\"0x00000000001e1b4903550a0b96e9a9405c8a95f387162e4944e8d9fbe501cd6a\")) ||\n+            (nHeight ==  70567 && hash != uint256(\"0x00000000006a49b14bcf27462068f1264c961f11fa2e0eddd2be0791e1d4124a\")) ||\n+            (nHeight ==  74000 && hash != uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\")) ||\n+            (nHeight == 105000 && hash != uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\")))\n             return error(\"AcceptBlock() : rejected by checkpoint lockin at %d\", nHeight);\n \n     // Write block to history file\n@@ -1726,7 +1727,7 @@ bool CBlock::AcceptBlock()\n     if (hashBestChain == hash)\n         CRITICAL_BLOCK(cs_vNodes)\n             foreach(CNode* pnode, vNodes)\n-                if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 55000))\n+                if (nBestHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 105000))\n                     pnode->PushInventory(CInv(MSG_BLOCK, hash));\n \n     return true;"
      },
      {
        "sha": "b022dad9efdb2eb3a86ce18fa2f9f4e33fdf1d78",
        "filename": "net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a178db33ac01efefca88ee39a3931ca8d1d3434/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a178db33ac01efefca88ee39a3931ca8d1d3434/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/net.cpp?ref=7a178db33ac01efefca88ee39a3931ca8d1d3434",
        "patch": "@@ -1022,7 +1022,7 @@ void ThreadOpenConnections2(void* parg)\n                 {\n                     foreach(PAIRTYPE(const vector<unsigned char>, CAddress)& item, mapAddresses)\n                     {\n-                        if (setSeed.count(item.second.ip))\n+                        if (setSeed.count(item.second.ip) && item.second.nTime != 0)\n                         {\n                             item.second.nTime = 0;\n                             CAddrDB().WriteAddress(item.second);"
      },
      {
        "sha": "45dec955dda59dae3ed7f80c357f87f72034b8ed",
        "filename": "serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a178db33ac01efefca88ee39a3931ca8d1d3434/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a178db33ac01efefca88ee39a3931ca8d1d3434/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/serialize.h?ref=7a178db33ac01efefca88ee39a3931ca8d1d3434",
        "patch": "@@ -25,7 +25,7 @@ class CDataStream;\n class CAutoFile;\n static const unsigned int MAX_SIZE = 0x02000000;\n \n-static const int VERSION = 31902;\n+static const int VERSION = 32000;\n static const char* pszSubVer = \"\";\n static const bool VERSION_IS_BETA = true;\n "
      },
      {
        "sha": "94b0242dc74c14e8960cfb5dda78ad99978f26da",
        "filename": "util.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a178db33ac01efefca88ee39a3931ca8d1d3434/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a178db33ac01efefca88ee39a3931ca8d1d3434/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util.cpp?ref=7a178db33ac01efefca88ee39a3931ca8d1d3434",
        "patch": "@@ -810,19 +810,24 @@ void AddTimeData(unsigned int ip, int64 nTime)\n         else\n         {\n             nTimeOffset = 0;\n-            // If nobody else has the same time as us, give a warning\n-            bool fMatch = false;\n-            foreach(int64 nOffset, vTimeOffsets)\n-                if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n-                    fMatch = true;\n+\n             static bool fDone;\n-            if (!fMatch && !fDone)\n+            if (!fDone)\n             {\n-                fDone = true;\n-                string strMessage = _(\"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\");\n-                strMiscWarning = strMessage;\n-                printf(\"*** %s\\n\", strMessage.c_str());\n-                boost::thread(boost::bind(ThreadSafeMessageBox, strMessage+\" \", string(\"Bitcoin\"), wxOK | wxICON_EXCLAMATION, (wxWindow*)NULL, -1, -1));\n+                // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n+                bool fMatch = false;\n+                foreach(int64 nOffset, vTimeOffsets)\n+                    if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n+                        fMatch = true;\n+\n+                if (!fMatch)\n+                {\n+                    fDone = true;\n+                    string strMessage = _(\"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\");\n+                    strMiscWarning = strMessage;\n+                    printf(\"*** %s\\n\", strMessage.c_str());\n+                    boost::thread(boost::bind(ThreadSafeMessageBox, strMessage+\" \", string(\"Bitcoin\"), wxOK | wxICON_EXCLAMATION, (wxWindow*)NULL, -1, -1));\n+                }\n             }\n         }\n         foreach(int64 n, vTimeOffsets)"
      }
    ]
  }
]