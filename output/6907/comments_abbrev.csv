gmaxwell,2015-10-29T21:21:19Z,This adds news without frees.  I really don't think making this non-static is the right thing to do.\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-152331816,152331816,
jtimon,2015-10-29T22:32:53Z,Moved the containers from extern back to static.\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-152346451,152346451,
jtimon,2015-11-04T14:06:29Z,"Added some commits to replace Container with boost::scoped_pointer. That also reduces the total diff (by not adding a new file), which is nice.\nI'm ready to squash if people are happy with boost::scoped_pointer\n",https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-153729476,153729476,
dcousens,2015-11-05T00:47:19Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-153917620,153917620,
dcousens,2015-11-05T00:48:00Z,Nice work @jtimon\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-153917725,153917725,
jtimon,2015-11-10T15:00:17Z,Squashed.\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-155442757,155442757,
jtimon,2015-11-28T13:26:55Z,"@sipa good point. I would prefer to just remove all its uses (now the factory can be used directly instead) than to think much about solving that problem though (maybe there's not so many calls at this point, I will check).\n",https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-160296018,160296018,
jtimon,2015-11-28T14:08:31Z,Added a commit to get rid of `CChainParams& Params(std::string)`. It's not very big (+18 -23) but it required me to rebase.\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-160300179,160300179,
sipa,2015-11-28T15:33:14Z,test/miner_tests.cpp:62 needs the old function still.\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-160311422,160311422,
jtimon,2015-11-28T16:45:54Z,"Oops, fixed.\n",https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-160317892,160317892,
jtimon,2015-11-29T23:18:31Z,Rebased(1)\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-160480514,160480514,
dcousens,2015-11-30T04:15:49Z,re-ACK\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-160512272,160512272,
jtimon,2015-11-30T11:43:26Z,"@MarcoFalke Thanks for the heads up, build fixed.\n",https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-160607627,160607627,
MarcoFalke,2015-12-02T14:04:28Z,Needs rebase due to #7128\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-161303707,161303707,
jtimon,2015-12-03T11:50:32Z,"Rebased(2) [2 since I started counting for this particular PR. But although the commit says may 22, I've been trying to introduce a proper factory since much longer, at the very least since Nov 6, 2014 see #5229. I've been rebasing maintaining it in one way or another since then, but, still, I'll pretend I understand why this is not ready for 0.12 and that #7128 has been merged first. I'll keep re",https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-161608446,161608446,
jtimon,2015-12-03T19:58:51Z,Restored the testnet3 special case as requested by @laanwj \n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-161765951,161765951,
dcousens,2015-12-03T20:33:11Z,re-utACK\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-161774391,161774391,
jtimon,2016-01-07T12:38:56Z,ping\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-169652331,169652331,
jtimon,2016-01-13T20:36:40Z,Rebased (3)\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-171425050,171425050,
dcousens,2016-01-28T22:02:36Z,re-ACK bd13782\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-176441725,176441725,
jtimon,2016-02-20T04:14:33Z,Rebase(4)\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-186502708,186502708,
jtimon,2016-02-26T10:30:16Z,"This is way older than ""Oct 29, 2015"", @laanwj can you please merge it or close it?\n",https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-189209317,189209317,
laanwj,2016-03-03T13:27:28Z,I'm not convinced of the need for this. At least to me it doesn't really make the code easier to understand or follow.\n\nDo you need this for anything specific?\n,https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-191761311,191761311,
jtimon,2016-03-03T13:40:27Z,"I've provided many examples of how this could be useful in the past (including the sizetest testchain, sorry, I don’t have the pr number at hand). This also allows to remove effectively-global-variables from chainparams (without moving the factory out) as discussed very long ago with @theuni.\nHopefully my refactors will make more sense as part of bitcoin jt once it starts implementing extra funct",https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-191764173,191764173,
laanwj,2016-03-03T13:45:12Z,"> Thank you for asking about what you don't understand, even if it's very late. A ""no"" is always better than continued silence.\n\nYes, sorry for that. I'm just very busy. I have trouble keeping up with all the pulls, and I need to prioritize things that fix bugs or address immediate issues to things that are more speculative like refactors. I wish it was different, and we had a paid full-time tea",https://github.com/bitcoin/bitcoin/pull/6907#issuecomment-191765429,191765429,
jtimon,2015-10-29T22:45:11Z,Probably there's a better example of tests that don't have to depend on the chainparam globals (in this case cGlobalSwitchingChainParams) anymore to make sure they test the same as when CBaseChainParams::MAIN is selected.\nNote how the const for the params' reference wasn't possible before.\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r43454094,43454094,src/test/alert_tests.cpp
dcousens,2015-10-30T05:49:04Z,Return a managed pointer instead?\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r43473540,43473540,src/chainparamsbase.cpp
dcousens,2015-10-30T05:50:10Z,"What is the purpose of this `Container`? \nIt seems to be managing the lifetime of a pointer,  is a ~~boost~~ managed pointer not suitable? \n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r43473571,43473571,src/templates.hpp
jonasschnelli,2015-10-30T08:11:33Z,"1)\nNot sure, but we might prefer something like smart c++11 pointers (long term, once switched to c++11) over boost managed pointers (to – at least – not increase the boost library adhesion).\n\n2)\nIf we stick with the `Container` class: `Container` as classname in the global space seems to be to general.\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r43479712,43479712,src/templates.hpp
jonasschnelli,2015-10-30T08:13:00Z,What is the reason for using `std::string` instead of a enum for chain identification? We still could have something like `static std::string ChainParams::ToString(enum chain)`\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r43479788,43479788,src/chainparamsbase.cpp
dcousens,2015-10-30T08:50:14Z,"@jonasschnelli of course,  but the effort to swap between the two is trivial, so the point remains.\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r43481842,43481842,src/templates.hpp
jtimon,2015-10-30T10:04:55Z,"I wanted to allow reviewers to see that we can maintain all the asserts exactly as they are right now, that the functionality with this container is almost identical to the functionality before it.\nBut I was expecting people to propose other boost/c++11 equivalent classes.\nLinks to the documentation of your preferred data structure are welcomed. \n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r43486837,43486837,src/templates.hpp
jtimon,2015-10-30T10:12:15Z,"Using strings instead of enums for chain ~~identification~~ selection (for identification we should use the genesis block) it's not something that's being changed here, it was changed in #6235. Apart from the simplifications in that PR (and the fact that this very PR would be more complicated without having done #6235 first), here's a few other commits in #6382 that get simpler/more consistent by ",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r43487296,43487296,src/chainparamsbase.cpp
jtimon,2015-11-04T13:19:28Z,What about http://www.boost.org/doc/libs/1_59_0/libs/smart_ptr/scoped_ptr.htm ?\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r43878767,43878767,src/templates.hpp
sipa,2015-11-28T13:22:26Z,"This looks dangerous, as it destroys the chainparams object created by the previous caller. Can you either document this, or switch to a solution that doesn't need that (for example, keeping a std::map<string, CChainParams)?\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46079812,46079812,src/chainparams.cpp
dcousens,2015-11-30T04:12:55Z,@jtimon ^\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46107676,46107676,src/chainparamsbase.cpp
jtimon,2015-11-30T08:29:26Z,"Well, no, we're using the scoped pointer, but outside. The factory is, I believe, more generic like this.\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46117470,46117470,src/chainparamsbase.cpp
laanwj,2015-12-03T11:56:27Z,"I don't like this change, it is useful to have the port numbers for both networks in the help output\n(and we have the same for `-port`)\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46542652,46542652,src/bitcoin-cli.cpp
jtimon,2015-12-03T12:38:09Z,"And I don't like special cases for testnet3 (or any other chain), which I usually find with rgrep ""test"" or rgrep CBaseChainParams::TESTNET.\nMaybe we can loop through all the default ports for each supported chain as in \nhttps://github.com/jtimon/bitcoin/commit/28d961ff939bfc0887c6c8b8b288733864559abd ?\nI mean, that would require something like https://github.com/jtimon/bitcoin/commit/042fdb0f5",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46545963,46545963,src/bitcoin-cli.cpp
laanwj,2015-12-03T12:47:05Z,"As said, we're doing exactly the same for `-port`. What makes `-rpcport` different? #7128 unified these.\n\nLooping through all networks would be overkill, there's no good reason to list `regtest` here, which is hidden (unless --help-debug). I think the current solution is fine.\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46546744,46546744,src/bitcoin-cli.cpp
jtimon,2015-12-03T13:10:57Z,@laanwj what about https://github.com/jtimon/bitcoin/commit/dd3547118df166704061fdce3aabb198236c8fca ?\nThis way you can `bitcoind -testnet --help` but `bitcoind -regtest --help` too.\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46548855,46548855,src/bitcoin-cli.cpp
jtimon,2015-12-03T13:14:20Z,"re difference between -port and rpc-port, I'm removing the testnet3 special case from port too, see https://github.com/bitcoin/bitcoin/pull/6907/files#diff-c865a8939105e6350a50af02766291b7R374\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46549158,46549158,src/bitcoin-cli.cpp
jtimon,2015-12-03T13:29:53Z,"rewarding unification, the change in port was also introduced only 5 days ago in https://github.com/bitcoin/bitcoin/pull/6961\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46550522,46550522,src/bitcoin-cli.cpp
laanwj,2015-12-03T13:30:14Z,"> This way you can bitcoind -testnet --help but bitcoind -regtest --help too.\n\nI don't think that is better than just listing both in the standard help message. Parametrizing the help message on the network, I dunno, that's not something I'd expect as user.\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46550554,46550554,src/bitcoin-cli.cpp
jtimon,2015-12-03T17:31:01Z,"That can be documented, but I'll just restore the old messages and make another local variable for testnet3.\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46583141,46583141,src/bitcoin-cli.cpp
jtimon,2015-12-03T17:31:48Z,"well, 2 more.\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46583243,46583243,src/bitcoin-cli.cpp
MarcoFalke,2015-12-03T20:05:03Z,Where is the `!`?\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46603829,46603829,src/init.cpp
dcousens,2015-12-03T20:09:03Z,`CBaseChainParams::TESTNET`?\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46604322,46604322,src/bitcoin-cli.cpp
jtimon,2015-12-03T20:24:33Z,"oops, just realized locally now...\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46606421,46606421,src/bitcoin-cli.cpp
jtimon,2015-12-03T20:29:35Z,Fixed\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46607174,46607174,src/bitcoin-cli.cpp
jtimon,2015-12-03T20:30:44Z,"For some reason we we're using !testnet, which is the same as main and !!main, but the opposite of !!testnet.\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46607327,46607327,src/init.cpp
jtimon,2015-12-03T20:36:52Z,I wanted to have solved it ages ago in https://github.com/jtimon/bitcoin/commit/3d03f15126b79bd9f22ccd27f1d8ca43d9e16bf5 (#6423) but that commit depended on the cursed PR #6068 (just as cursed as its  several predecessors).\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46608141,46608141,src/init.cpp
MarcoFalke,2015-12-03T20:44:18Z,"In theory it's not defined for main, it's defined for `testnet/regtest only;`\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46609052,46609052,src/init.cpp
jtimon,2015-12-03T20:50:41Z,"For main, it is defined in https://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp#L120\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46609845,46609845,src/init.cpp
jtimon,2015-12-03T20:57:11Z,"What that text refers to, is that users aren't currently allowed to -acceptnonstdtxn=true on mainnet, they can only set -acceptnonstdtxn=false in testnet/regtest, which makes the fact that the displayed default is false (when in testnet/regtest the default is actually true) even more stupid.\nI wanted to have solved this in https://github.com/jtimon/bitcoin/commit/a4b28c491202a1d6c6e77f9439b08b3b2",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46610659,46610659,src/init.cpp
jtimon,2015-12-04T00:26:48Z,"Regarding looping and not wanting to show regtest's information, we could easily do that just by leaving regtest out of supportedChains (see https://github.com/jtimon/bitcoin/commit/160d874dfdb53c71a07b1bf7bdd0dab571dabefa#diff-64cbe1ad5465e13bc59ee8bb6f3de2e7R20 ). Although that would also leave it out from https://github.com/jtimon/bitcoin/commit/160d874dfdb53c71a07b1bf7bdd0dab571dabefa#diff-de3",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r46633906,46633906,src/bitcoin-cli.cpp
MarcoFalke,2016-01-07T13:30:47Z,"What about `default: %u` -> `default: %u (testnet), default: %u (regtest)`?\n",https://github.com/bitcoin/bitcoin/pull/6907#discussion_r49072336,49072336,src/init.cpp
jtimon,2016-01-07T18:44:51Z,I really think we should solve this by allowing -acceptnonstdtxn=true on mainnet. See https://github.com/jtimon/bitcoin/commit/a4b28c491202a1d6c6e77f9439b08b3b2613e818\n,https://github.com/bitcoin/bitcoin/pull/6907#discussion_r49109056,49109056,src/init.cpp
