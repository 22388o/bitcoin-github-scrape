[
  {
    "sha": "22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmNlM2QxZWFmYjBiMzU1MTI3Mjc0ZGU3Y2RkMWI3ZmZjNjA3ZGEx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-22T01:50:01Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-20T03:56:42Z"
      },
      "message": "Chainparams: Use a regular factory for creating chainparams",
      "tree": {
        "sha": "190ce6933e1583bbeef15a6e6b6b19a5c6ee0e5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/190ce6933e1583bbeef15a6e6b6b19a5c6ee0e5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6e00af8193f46fa02af13c2e9852a6bd7461d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6e00af8193f46fa02af13c2e9852a6bd7461d00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6e00af8193f46fa02af13c2e9852a6bd7461d00"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 48,
      "deletions": 32
    },
    "files": [
      {
        "sha": "88e7d44d93ddd9cedc46c13b8ba06804ccb46b3f",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
        "patch": "@@ -31,14 +31,16 @@ static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n \n std::string HelpMessageCli()\n {\n+    const boost::scoped_ptr<CBaseChainParams> defaultBaseParams(CBaseChainParams::Factory(CBaseChainParams::MAIN));\n+    const boost::scoped_ptr<CBaseChainParams> testnetBaseParams(CBaseChainParams::Factory(CBaseChainParams::TESTNET));\n     string strUsage;\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), DEFAULT_RPCCONNECT));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));"
      },
      {
        "sha": "e274d2687b51a79c174ae9dffeaae2e2a33b9a1d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
        "patch": "@@ -13,6 +13,7 @@\n #include <assert.h>\n \n #include <boost/assign/list_of.hpp>\n+#include <boost/scoped_ptr.hpp>\n \n #include \"chainparamsseeds.h\"\n \n@@ -142,7 +143,6 @@ class CMainParams : public CChainParams {\n         };\n     }\n };\n-static CMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -205,7 +205,6 @@ class CTestNetParams : public CChainParams {\n \n     }\n };\n-static CTestNetParams testNetParams;\n \n /**\n  * Regression test\n@@ -261,29 +260,35 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n };\n-static CRegTestParams regTestParams;\n \n-static CChainParams *pCurrentParams = 0;\n+static boost::scoped_ptr<CChainParams> globalChainParams;\n+static boost::scoped_ptr<CChainParams> globalSwitchingChainParams;\n \n const CChainParams &Params() {\n-    assert(pCurrentParams);\n-    return *pCurrentParams;\n+    assert(globalChainParams.get());\n+    return *globalChainParams;\n }\n \n-CChainParams& Params(const std::string& chain)\n+CChainParams* CChainParams::Factory(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-            return mainParams;\n+        return new CMainParams();\n     else if (chain == CBaseChainParams::TESTNET)\n-            return testNetParams;\n+        return new CTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n-            return regTestParams;\n+        return new CRegTestParams();\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n+const CChainParams& Params(const std::string& chain)\n+{\n+    globalSwitchingChainParams.reset(CChainParams::Factory(chain));\n+    return *globalSwitchingChainParams;\n+}\n+\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);\n-    pCurrentParams = &Params(network);\n+    globalChainParams.reset(CChainParams::Factory(network));\n }"
      },
      {
        "sha": "8fcaf55f7cc4938bf2b3752b51f763891ecae7d6",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
        "patch": "@@ -75,6 +75,12 @@ class CChainParams\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n+    /**\n+     * Creates and returns a CChainParams* of the chosen chain. The caller has to delete the object.\n+     * @returns a CChainParams* of the chosen chain.\n+     * @throws a std::runtime_error if the chain is not supported.\n+     */\n+    static CChainParams* Factory(const std::string& chain);\n protected:\n     CChainParams() {}\n \n@@ -106,7 +112,7 @@ const CChainParams &Params();\n /**\n  * @returns CChainParams for the given BIP70 chain name.\n  */\n-CChainParams& Params(const std::string& chain);\n+const CChainParams& Params(const std::string& chain);\n \n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name."
      },
      {
        "sha": "4e7b6cb4c62dd2cea98a0ff31889f53f02991924",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
        "patch": "@@ -8,7 +8,7 @@\n #include \"tinyformat.h\"\n #include \"util.h\"\n \n-#include <assert.h>\n+#include <boost/scoped_ptr.hpp>\n \n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n@@ -35,7 +35,6 @@ class CBaseMainParams : public CBaseChainParams\n         nRPCPort = 8332;\n     }\n };\n-static CBaseMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -49,7 +48,6 @@ class CBaseTestNetParams : public CBaseChainParams\n         strDataDir = \"testnet3\";\n     }\n };\n-static CBaseTestNetParams testNetParams;\n \n /*\n  * Regression test\n@@ -63,31 +61,30 @@ class CBaseRegTestParams : public CBaseChainParams\n         strDataDir = \"regtest\";\n     }\n };\n-static CBaseRegTestParams regTestParams;\n \n-static CBaseChainParams* pCurrentBaseParams = 0;\n+static boost::scoped_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n {\n-    assert(pCurrentBaseParams);\n-    return *pCurrentBaseParams;\n+    assert(globalChainBaseParams.get());\n+    return *globalChainBaseParams;\n }\n \n-CBaseChainParams& BaseParams(const std::string& chain)\n+CBaseChainParams* CBaseChainParams::Factory(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return mainParams;\n+        return new CBaseMainParams();\n     else if (chain == CBaseChainParams::TESTNET)\n-        return testNetParams;\n+        return new CBaseTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n-        return regTestParams;\n+        return new CBaseRegTestParams();\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n void SelectBaseParams(const std::string& chain)\n {\n-    pCurrentBaseParams = &BaseParams(chain);\n+    globalChainBaseParams.reset(CBaseChainParams::Factory(chain));\n }\n \n std::string ChainNameFromCommandLine()\n@@ -106,5 +103,5 @@ std::string ChainNameFromCommandLine()\n \n bool AreBaseParamsConfigured()\n {\n-    return pCurrentBaseParams != NULL;\n+    return globalChainBaseParams.get();\n }"
      },
      {
        "sha": "1dd9e3aca9e4fb68d112537af1f0427b6dfb4af1",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
        "patch": "@@ -22,7 +22,12 @@ class CBaseChainParams\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n-\n+    /**\n+     * Creates and returns a CBaseChainParams* of the chosen chain. The caller has to delete the object.\n+     * @returns A CBaseChainParams* of the chosen chain.\n+     * @throws a std::runtime_error if the chain is not supported.\n+     */\n+    static CBaseChainParams* Factory(const std::string& chain);\n protected:\n     CBaseChainParams() {}\n \n@@ -42,8 +47,6 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n  */\n const CBaseChainParams& BaseParams();\n \n-CBaseChainParams& BaseParams(const std::string& chain);\n-\n /** Sets the params returned by Params() to those for the given network. */\n void SelectBaseParams(const std::string& chain);\n "
      },
      {
        "sha": "1dbe3340abe8bc16cc9c00425a3b3cefc8f51fb0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
        "patch": "@@ -310,6 +310,8 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n \n std::string HelpMessage(HelpMessageMode mode)\n {\n+    const boost::scoped_ptr<CBaseChainParams> defaultBaseParams(CBaseChainParams::Factory(CBaseChainParams::MAIN));\n+    const boost::scoped_ptr<CBaseChainParams> testnetBaseParams(CBaseChainParams::Factory(CBaseChainParams::TESTNET));\n     const bool showDebug = GetBoolArg(\"-help-debug\", false);\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n@@ -508,7 +510,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), BaseParams(CBaseChainParams::MAIN).RPCPort(), BaseParams(CBaseChainParams::TESTNET).RPCPort()));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n     if (showDebug) {"
      },
      {
        "sha": "e382a2b7ceb511de0236719734acaa827cd44f43",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22ce3d1eafb0b355127274de7cdd1b7ffc607da1/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
        "patch": "@@ -21,6 +21,7 @@\n \n #include <boost/filesystem/operations.hpp>\n #include <boost/foreach.hpp>\n+#include <boost/scoped_ptr.hpp>\n #include <boost/test/unit_test.hpp>\n \n #if 0\n@@ -199,8 +200,8 @@ BOOST_AUTO_TEST_CASE(PartitionAlert)\n     // Test PartitionCheck\n     CCriticalSection csDummy;\n     CBlockIndex indexDummy[100];\n-    CChainParams& params = Params(CBaseChainParams::MAIN);\n-    int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    int64_t nPowTargetSpacing = testChainParams->GetConsensus().nPowTargetSpacing;\n \n     // Generate fake blockchain timestamps relative to\n     // an arbitrary time:"
      }
    ]
  },
  {
    "sha": "670a464d34e2ed1b0d4edc487a30bd78156d598f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzBhNDY0ZDM0ZTJlZDFiMGQ0ZWRjNDg3YTMwYmQ3ODE1NmQ1OThm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-28T14:04:35Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-02-22T19:18:27Z"
      },
      "message": "Chainparams: Get rid of CChainParams& Params(std::string)",
      "tree": {
        "sha": "14919539256c763d47158bc8fa5fba030a025608",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14919539256c763d47158bc8fa5fba030a025608"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/670a464d34e2ed1b0d4edc487a30bd78156d598f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/670a464d34e2ed1b0d4edc487a30bd78156d598f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/670a464d34e2ed1b0d4edc487a30bd78156d598f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/670a464d34e2ed1b0d4edc487a30bd78156d598f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22ce3d1eafb0b355127274de7cdd1b7ffc607da1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22ce3d1eafb0b355127274de7cdd1b7ffc607da1"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 24,
      "deletions": 27
    },
    "files": [
      {
        "sha": "829fcfbca2cceac2611856adf677645db46b0e47",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=670a464d34e2ed1b0d4edc487a30bd78156d598f",
        "patch": "@@ -262,7 +262,6 @@ class CRegTestParams : public CChainParams {\n };\n \n static boost::scoped_ptr<CChainParams> globalChainParams;\n-static boost::scoped_ptr<CChainParams> globalSwitchingChainParams;\n \n const CChainParams &Params() {\n     assert(globalChainParams.get());\n@@ -281,12 +280,6 @@ CChainParams* CChainParams::Factory(const std::string& chain)\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-const CChainParams& Params(const std::string& chain)\n-{\n-    globalSwitchingChainParams.reset(CChainParams::Factory(chain));\n-    return *globalSwitchingChainParams;\n-}\n-\n void SelectParams(const std::string& network)\n {\n     SelectBaseParams(network);"
      },
      {
        "sha": "f8f92a25e7fff9f5b84b6ed0201c22c4324d58cb",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=670a464d34e2ed1b0d4edc487a30bd78156d598f",
        "patch": "@@ -109,11 +109,6 @@ class CChainParams\n  */\n const CChainParams &Params();\n \n-/**\n- * @returns CChainParams for the given BIP70 chain name.\n- */\n-const CChainParams& Params(const std::string& chain);\n-\n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name.\n  * @throws std::runtime_error when the chain is not supported."
      },
      {
        "sha": "bd41644b728cb0d8adc442913ab6b78f5a521928",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=670a464d34e2ed1b0d4edc487a30bd78156d598f",
        "patch": "@@ -310,7 +310,9 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n \n std::string HelpMessage(HelpMessageMode mode)\n {\n+    const boost::scoped_ptr<CChainParams> defaultChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n     const boost::scoped_ptr<CBaseChainParams> defaultBaseParams(CBaseChainParams::Factory(CBaseChainParams::MAIN));\n+    const boost::scoped_ptr<CChainParams> testnetChainParams(CChainParams::Factory(CBaseChainParams::TESTNET));\n     const boost::scoped_ptr<CBaseChainParams> testnetBaseParams(CBaseChainParams::Factory(CBaseChainParams::TESTNET));\n     const bool showDebug = GetBoolArg(\"-help-debug\", false);\n \n@@ -375,7 +377,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-enforcenodebloom\", strprintf(\"Enforce minimum protocol version to limit use of bloom filters (default: %u)\", DEFAULT_ENFORCENODEBLOOM));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), Params(CBaseChainParams::MAIN).GetDefaultPort(), Params(CBaseChainParams::TESTNET).GetDefaultPort()));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()));\n     strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n     strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n     strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n@@ -431,8 +433,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", Params(CBaseChainParams::MAIN).DefaultConsistencyChecks()));\n+        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n+        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n #ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n@@ -489,7 +491,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n+        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", defaultChainParams->RequireStandard()));\n     strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Minimum bytes per sigop in transactions we relay and mine (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));"
      },
      {
        "sha": "aecd999cadfdff3d903c66af5c108047cbbd4eac",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=670a464d34e2ed1b0d4edc487a30bd78156d598f",
        "patch": "@@ -221,14 +221,16 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             if (GUIUtil::parseBitcoinURI(arg, &r) && !r.address.isEmpty())\n             {\n                 CBitcoinAddress address(r.address.toStdString());\n+                boost::scoped_ptr<CChainParams> tempChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n \n-                if (address.IsValid(Params(CBaseChainParams::MAIN)))\n+                if (address.IsValid(*tempChainParams))\n                 {\n                     SelectParams(CBaseChainParams::MAIN);\n                 }\n-                else if (address.IsValid(Params(CBaseChainParams::TESTNET)))\n-                {\n-                    SelectParams(CBaseChainParams::TESTNET);\n+                else {\n+                    tempChainParams.reset(CChainParams::Factory(CBaseChainParams::TESTNET));\n+                    if (address.IsValid(*tempChainParams))\n+                        SelectParams(CBaseChainParams::TESTNET);\n                 }\n             }\n         }"
      },
      {
        "sha": "b4564c3373b18e882d847188bb93f06c72593f7c",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=670a464d34e2ed1b0d4edc487a30bd78156d598f",
        "patch": "@@ -20,7 +20,8 @@ BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(sanity)\n {\n-    const CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    const CCheckpointData& checkpoints = testChainParams->Checkpoints();\n     BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate(checkpoints) >= 134444);\n }\n "
      },
      {
        "sha": "469db69679c3d6da18a96b4219cb5ef8e80d7939",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=670a464d34e2ed1b0d4edc487a30bd78156d598f",
        "patch": "@@ -120,7 +120,8 @@ BOOST_FIXTURE_TEST_SUITE(Alert_tests, ReadAlerts)\n BOOST_AUTO_TEST_CASE(AlertApplies)\n {\n     SetMockTime(11);\n-    const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    const std::vector<unsigned char>& alertKey = testChainParams->AlertKey();\n \n     BOOST_FOREACH(const CAlert& alert, alerts)\n     {\n@@ -161,7 +162,8 @@ BOOST_AUTO_TEST_CASE(AlertApplies)\n BOOST_AUTO_TEST_CASE(AlertNotify)\n {\n     SetMockTime(11);\n-    const std::vector<unsigned char>& alertKey = Params(CBaseChainParams::MAIN).AlertKey();\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    const std::vector<unsigned char>& alertKey = testChainParams->AlertKey();\n \n     boost::filesystem::path temp = GetTempPath() /\n         boost::filesystem::unique_path(\"alertnotify-%%%%.txt\");"
      },
      {
        "sha": "199af6fef24ee333ce537f7777c3028666e9b0fb",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=670a464d34e2ed1b0d4edc487a30bd78156d598f",
        "patch": "@@ -38,17 +38,18 @@ static void TestBlockSubsidyHalvings(int nSubsidyHalvingInterval)\n \n BOOST_AUTO_TEST_CASE(block_subsidy_test)\n {\n-    TestBlockSubsidyHalvings(Params(CBaseChainParams::MAIN).GetConsensus()); // As in main\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    TestBlockSubsidyHalvings(testChainParams->GetConsensus()); // As in main\n     TestBlockSubsidyHalvings(150); // As in regtest\n     TestBlockSubsidyHalvings(1000); // Just another interval\n }\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    const Consensus::Params& consensusParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n     CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        CAmount nSubsidy = GetBlockSubsidy(nHeight, consensusParams);\n+        CAmount nSubsidy = GetBlockSubsidy(nHeight, testChainParams->GetConsensus());\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));"
      },
      {
        "sha": "e7bb65871e9bd125fd20effad9c3611874703fc2",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/670a464d34e2ed1b0d4edc487a30bd78156d598f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=670a464d34e2ed1b0d4edc487a30bd78156d598f",
        "patch": "@@ -74,7 +74,8 @@ bool TestSequenceLocks(const CTransaction &tx, int flags)\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n-    const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n+    const boost::scoped_ptr<CChainParams> testChainParams(CChainParams::Factory(CBaseChainParams::MAIN));\n+    const CChainParams& chainparams = *testChainParams;\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n     CMutableTransaction tx,tx2;"
      }
    ]
  }
]