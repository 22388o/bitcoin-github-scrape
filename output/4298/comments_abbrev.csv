ghost,2014-06-07T12:29:00Z,I'm going to copy my comments from Reddit in response to petertodd:\n\nI think you're doing great work and this patch is undoubtedly necessary and will improve the ecosystem as a whole. But you or your colleagues working on the core need to harden the payment protocol before you ACK this. Making it 95% likely that anybody can double spend a zero conf transaction breaks real world usage of bitcoin.,https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45408850,45408850,
ghost,2014-06-07T12:53:57Z,"Maybe OT, but actually there **is** a place for offchain transactions.\nLoading a debit card with bitcoin very well be a way forward for small and\nmicro-transactions. It's certainly not a terrible thing and fits right into\nthe paradigm of debit cards and more inclusive than requiring everyone\ncarry a smartphone. You can still maintain control over most of your funds,\njust loading the card as y",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45409381,45409381,
ghost,2014-06-08T00:59:50Z,"So who issues the debit card? What if they choose to withdraw that service? How about people who DO have mobile wallets - will they no longer be able to use them? And there are a lot more people out there with wallet-capable smartphones than you seems to give credit for. \n\nThe fundamental issue here is that in the real world you walk into a shop, slap your money on the counter, and walk out with",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45425284,45425284,
luke-jr,2014-06-08T01:25:49Z,"How do you think they currently deal with credit card fraud? Losing an occasional Coke is built into the costs of business. If you're doing a high-value transaction, just ask to see a photo id and copy down the name/number so you can sue later if they double-spent you.\n\nPretending zero-confirmation on-chain can be secure is just a false sense of security in the best of circumstances.\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45425686,45425686,
petertodd,2014-06-08T02:55:54Z,"It's notable that _without_ many (any?) miners supporting replace-by-fee right now my double-spend script(1) has about a 95% success rate. Even if you try to take fees into account, try to measure propagation, detect double-spends, etc. you still end up with a 5% to 10% success rate.\n\nYou can says things need to be ""hardened"" first, before we ""break"" zeroconf security, but it's already broken, a",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45427006,45427006,
jgarzik,2014-06-08T03:04:00Z,"""We are seeing bad behavior, might as well release a feature making bad behavior easier"" is illogical.\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45427112,45427112,
ghost,2014-06-08T10:09:31Z,"jgarzik - You've summarised it much better than I could have :)\n\npetertodd - If you're speaking to vendors right now, what mitigating strategies/software changes are they putting into place to counteract fraud on zero conf transactions? Why not include some of those strategies in the core before this pull goes live?\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45433192,45433192,
sipa,2014-06-08T10:47:13Z,"There are two opinions about what the responsibility of the network should be, here: zero-confirmation double-spending prevention or not.\n\nIn my opinion, zero-confirmation security is a useful feature, and one that a significant portion of the network came to rely on. Most of those are aware that it's only a best-effort mechanism, and that with cooperation from miners, it is easily bypassed. But",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45433820,45433820,
ghost,2014-06-08T12:10:31Z,"Sipa - your point is very valid. This is an evolving process and petertodd's changes are certainly where the network should be moving. But surely, there can be some form of mitigation/risk management built in?\n- Maybe an option for vendors to enforce scorched-earth payments through some simple hard-coded mechanism to begin with - all a merchant wants to do is display a single QR code and get a '_",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45435339,45435339,
robbak,2014-06-08T12:33:58Z,"If you want trustworthy 0-conf transactions, you'll have to invent a new coin that makes it happen. The decisions made with Bitcoin don't make it possible. Sorry.\n\nThe only way I can see of making a quick-confirmation system work is to come to an agreement with more than 50% of the mining power that once they see one of your transactions, they will never accept a conflicting transaction, or mine",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45435708,45435708,
petertodd,2014-06-08T20:54:47Z,"The reason why you switch to replace-by-fee is because the only way to make the current way of making zeroconf transactions secure is to do things that greatly harm Bitcoin's decentralization. For instance Mike Hearn's coinbase reallocation/block blacklisting proposal can make zeroconf secure, but at the cost of adding real-world politics and regulation to whether or not a block is accepted by the",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45448269,45448269,
petertodd,2014-06-08T21:07:54Z,"@NanoAkron This whole ""scorched earth"" thing is completely compatible with any standard Bitcoin transaction; you don't need to do anything special to use it. That said because current Bitcoin wallets don't appear to be very good at not double-spending by accident you will want some explicit support in the payment protocol for it to let wallet software know that they must be sure a double-spend isn",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45448611,45448611,
petertodd,2014-06-08T21:11:03Z,"@robbak Yup, and such >50% agreements sound suspiciously like a group controlling >50% of the hashing power don't they... Also if those agreements are for a fee, they also mean that controlling a large amount of hashing power is more profitable than controlling a small amount, which encourages centralization of mining power. Just another reason why not adopting replace-by-fee now is very unwise. F",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45448704,45448704,
ghost,2014-06-08T23:04:53Z,"Thanks for your replies @petertodd.\n\nCould you perhaps clarify this double (triple?) negative for me: ""current Bitcoin wallets don't appear to be very good at not double-spending by accident"". If they are not good at not double spending by accident, they must be good at double spending on purpose?\n\nAnd perhaps if you solved this issue first (in your own words) ""explicit support in the payment ",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45451293,45451293,
jgarzik,2014-06-08T23:16:13Z,"@petertodd ""the only way to make the current way of making zeroconf transactions secure is to do things that greatly harm Bitcoin's decentralization""  This is sufficiently subjective to the point of being simply wrong.  There are many business cases involving 0conf which map easily onto bitcoin, as I've pointed out on IRC, that are accomplished today without ""greatly harm[ing] Bitcoin's decentrali",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45451540,45451540,
petertodd,2014-06-08T23:38:37Z,"@NanoAkron That's just an observation from my double-spending logs. Basically it appears that at least some clients are double-spending inputs on occasion, probably because the wallet software doesn't reliably record the fact that it's created a transaction spending the input. If you're to use replace-by-fee scorched-earth then your going to want wallet software that takes additional steps to be a",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45452055,45452055,
ghost,2014-06-09T11:12:50Z,"@petertodd How do you suggest someone buys a pint in a pub with bitcoin? Pay first, get a receipt, walk back to their table, wait 10 or maybe 20 minutes, walk back to the bar and collect their drink? Have you thought about how people transact in the real world or is the philosophical/intellectual perfection of the software more important to you than real world use?\n\nAnd if micropayment channels ",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45481196,45481196,
petertodd,2014-06-09T12:03:51Z,"@NanoAkron You're example of a bar is a perfect example where existing practices find that security isn't needed - the bar in the real world will happily give you a drink prior to paying.\n\nre: micropayment channels, etc. I can't and am not going to fix everything. We've also found out over and over again that people write remarkably broken and insecure code when they can't see why it's insecure ",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45484215,45484215,
dgenr8,2014-06-09T17:09:26Z,"""Replace by fee"" is not an accurate name for this change.\n\nThe policy implied by the fee checks is murky.  No attempt is made to ensure that any of the original outputs are still paid, and all the original inputs are dropped, regardless of who signed them.\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45516250,45516250,
mikehearn,2014-06-11T10:19:39Z,"The places being double spent need a better risk analysis that takes into account the fact that our network kind of sucks; not people simply giving up on the idea of a useful Bitcoin full stop.\n\nFor instance, places that are being double spent can simply reject payments that pay lower than the old min fee, or force them to wait for a confirmation. That's a much simpler change than this one, alth",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-45724411,45724411,
fraggle222,2014-06-18T12:15:34Z,"So, summarizing from what I've read on this issue:\n\nArguments for replace-by-fee patch:\n- zero conf transactions are not safe but people are using them anyway\n- so we need to make them really unsafe\n- then people will then stop using zero conf transactions\n- bitcoin will be better off because no one will accept zero conf transactions (but see next)**\n- this patch also opens the door for the",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-46427783,46427783,
jtimon,2014-06-18T14:02:24Z,"@petertodd I think mining policies should be abstracted away. So instead of replacing ""first-seen + starndard"" policy with a new ""replace-by-fee + standard"" policy, this patch could implement an abstract class Policy, extended by StandardPolicy (which reproduces the current behavior) which in turn is extended by ReplaceByFeePolicy modifying its behavior. a --policy parameter can select one of them",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-46439139,46439139,
fraggle222,2014-06-18T16:27:42Z,"@jtimon thanks for that, I will review and edit my response if necessary. Although I don't really see a comprehensive discussion on scorched earth in that thread.\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-46459235,46459235,
jtimon,2014-06-18T16:44:49Z,"@fraggle222 I did my best with that example of scorched earth protocol, I'm sorry it's not clear enough. Feel free to ask from clarifications in the mailing list.  What about the thread linked to from that thread? I know there's an earlier explanation somewhere.\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-46461322,46461322,
petertodd,2014-06-19T05:17:40Z,"@jtimon That's not a bad idea, although keep in mind that part of the controversy here is some thing having even a _different_ policy than the ""standard"" is in itself a bad thing.\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-46524495,46524495,
BitcoinPullTester,2014-06-23T01:25:56Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/p4298_32ca5de2af36e71aa720c2400836be7b0313b2a4/ for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.lo",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-46799178,46799178,
jgarzik,2014-07-29T16:55:27Z,"Closing, as there is clearly no consensus that we should move forward on this in the near future.\n\nShould consensus emerge, we can reopen this PR.\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-50504990,50504990,
luke-jr,2014-07-29T17:14:14Z,"This is relay/miner policy, so developers should not be making any decision on the direction here.\n\n@petertodd Can you make this a runtime option(s)?\n\nSide note: For relay-only nodes, I think they should require the replacing transaction to have <old fees> PLUS <fees to cover entire transaction again>; relay nodes don't get any direct benefit from the transaction fees, so they should insist on",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-50507483,50507483,
jgarzik,2014-07-29T17:19:49Z,"@luke-jr  hmmm, that is a fair point about miner policy.\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-50508231,50508231,
petertodd,2014-07-29T17:46:46Z,"-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nSure, runtime option is fine.\n\nThe patch requires that transactions pay for the bandwidth consumed by the rebroadcast by requiring that fees be increased by at least MIN_RELAY_FEE \* size; a single satoshi replacement won't be relayed.\n\nOn 29 July 2014 13:14:42 GMT-04:00, Luke-Jr notifications@github.com wrote:\n\n> This is relay/miner policy",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-50511995,50511995,
laanwj,2014-07-30T08:25:15Z,"@luke-jr I agree. However the other side of the coin is that we don't _have_ to merge everything that involves changing miner policy because someone may want to use it. Ideally some more modular system would be implemented here (that can outsource the decisions to an external process, for example) so that we don't end up merging a grab-bag of rarely used, never tested options.\n",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-50587314,50587314,
petertodd,2014-07-30T10:15:32Z,@laanwj I think in this case if people don't use it you'd remove the code at a later date; a runtime option allows us to test the waters temporarily. \n,https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-50597155,50597155,
jtimon,2014-08-05T10:01:00Z,"As said, I think it would be cleaner to encapsulate the policy under a class and then you can have several of them using a factory to allow the runtime option and either polymorphism or templates. Probably a couple of policies (standard and replace-by-fee?) will be enough for people understand the class and cleanly implement their own.\nPersonally I'm in favor of replace-by-fee, but I would prefer",https://github.com/bitcoin/bitcoin/pull/4298#issuecomment-51176930,51176930,
