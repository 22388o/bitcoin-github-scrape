TheBlueMatt,2014-11-06T19:24:13Z,"I'd vote this wait on #5220, though concept ACK 100%.\n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-62035698,62035698,
laanwj,2014-11-07T10:35:44Z,@TheBlueMatt What rationale to wait? This seems self-contained and a useful sanity check no matter what.\n,https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-62125198,62125198,
gmaxwell,2014-11-07T16:56:13Z,"Do we want to also add something in init.cpp that generates a rnadom key, verifies, and bombs out if it fails? (so that broken code is more likely to fail at startup with an explicable error message?)\n\nNot just totaly hypotetical: right now fedora's openssl compiles, links, and starts but fails at runtime the first time something tries to actually use the EC code.\n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-62175001,62175001,
theuni,2014-11-07T17:00:10Z,"@gmaxwell see ECC_InitSanityCheck() in init.cpp. Currently it just tries to call EC_KEY_new_by_curve_name() and returns false if it fails, in which case we die. That could be expanded as you suggest.\n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-62175568,62175568,
TheBlueMatt,2014-11-07T17:47:24Z,"@laanwj This just leaks even more shit via sidechannels...I'd assume OpenSSL's transform-priv-to-pub does too, but I'd prefer to not add to it. At least secp256k1 tries to not leak too much.\n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-62184190,62184190,
gmaxwell,2014-11-07T20:20:29Z,"The non-constant time ness in signing for openssl is the r*G multply and the computation of k^-1 (which is very not constant time),  but since we never publish that data it would be hard to make use of it. (E.g. you leak data about a random number, ...  which might be bad if you published the resulting signature, but you don't).   So, with this in mind it doesn't concern me much.   \n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-62205870,62205870,
sipa,2014-11-08T22:30:50Z,"@gmaxwell there already was an ECC sanity check as @theuni mentioned, but I've added a commit that does a key generation/verification in that check as well.\n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-62281484,62281484,
sipa,2014-11-19T14:41:12Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-63649230,63649230,
gmaxwell,2014-11-19T17:05:47Z,It looks like CWallet::AddKeyPubKey also needs to call VerifyPubKey so that rpc imported and newly generated keys get tested too.\n,https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-63674954,63674954,
sipa,2014-11-19T17:12:01Z,Do we want to apply the check to every key loaded at startup? That's probably a significant slowdown...\n,https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-63675978,63675978,
gmaxwell,2014-11-19T17:16:22Z,"I think so, just once (e.g. not every unlock). The generation of the pubkey each time is already slow, doing this basically quadruples it.   Any idea how long it would take for 100k keys?\n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-63676731,63676731,
sipa,2014-11-19T17:21:23Z,"For unecnrypted wallets we use a hash-based mechanism now; we used to re-derive the public key for every private key before, and apparently that was too slow (to @phantomcircuit, I believe).\n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-63677608,63677608,
gmaxwell,2014-11-19T17:28:58Z,"Okay, well if that was too slow, verifying will be too slow.\n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-63678834,63678834,
gmaxwell,2014-11-23T07:25:49Z,"@sipa Where are we on this?  If putting it at AddKeyPubKey is too much of a perfomance concern, it could just be added at GenerateNewKey, importprivkey, and (maybe?) importwallet.\n",https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-64109435,64109435,
sipa,2014-11-23T09:49:15Z,@gmaxwell Done.\n,https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-64112238,64112238,
gmaxwell,2014-11-23T10:38:28Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-64113576,64113576,
jgarzik,2014-11-23T14:45:19Z,ut ACK\n,https://github.com/bitcoin/bitcoin/pull/5224#issuecomment-64120157,64120157,
laanwj,2014-11-06T09:28:57Z,Maybe\n\n``` c++\nif (pubkey.IsCompressed() != fCompressed) {\n```\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19933791,19933791,src/key.cpp
laanwj,2014-11-06T09:29:22Z,s/doing/done\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19933807,19933807,src/key.h
laanwj,2014-11-06T09:31:02Z,please use str.data() instead of &str[0]\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19933867,19933867,src/key.cpp
laanwj,2014-11-06T09:32:43Z,s/8/sizeof(rnd)/ ? (as you use that below too)\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19933944,19933944,src/key.cpp
laanwj,2014-11-06T09:42:03Z,fCompressed / fValid no longer set?\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19934315,19934315,src/key.cpp
sipa,2014-11-06T09:51:00Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19934803,19934803,src/key.cpp
sipa,2014-11-06T09:51:14Z,Done doing the s/doing/done/.\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19934813,19934813,src/key.h
sipa,2014-11-06T09:51:22Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19934820,19934820,src/key.cpp
sipa,2014-11-06T09:51:42Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19934838,19934838,src/key.cpp
sipa,2014-11-06T09:51:58Z,Ugh. Thankfully the tests caught this...\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19934849,19934849,src/key.cpp
Diapolo,2014-11-06T19:20:55Z,What use has the \n here ;)?\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19967353,19967353,src/key.cpp
sipa,2014-11-06T19:21:51Z,Exactly as much as the 24 character before it.\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19967430,19967430,src/key.cpp
Diapolo,2014-11-06T19:22:08Z,As GetRandBytes() can fail and this is intended as an intensive check you should perhaps consider that.\n,https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19967455,19967455,src/key.cpp
Diapolo,2014-11-06T19:22:49Z,"Just asking, could (unsigned char*)str.data() be changed to just .c_str()? I guess no, because it's not unsigned ^^.\n",https://github.com/bitcoin/bitcoin/pull/5224#discussion_r19967501,19967501,src/key.cpp
laanwj,2014-11-07T10:35:07Z,"@diapolo Please don't suggest that. If you want the data (to be used with `.size()`), use `.data()`. .`c_str()` is if you want a null-terminated string.\n",https://github.com/bitcoin/bitcoin/pull/5224#discussion_r20003643,20003643,src/key.cpp
laanwj,2014-11-07T12:32:16Z,"Huh - I remember changing `GetRandBytes` to never fail, but stop with an assertion instead. There is no way bitcoin can handle a failing RNG gracefully. Seems that never got merged?\n",https://github.com/bitcoin/bitcoin/pull/5224#discussion_r20007769,20007769,src/key.cpp
