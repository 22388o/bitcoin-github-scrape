[
  {
    "sha": "acf269e1463c84d51f2eef695089cbf9d03b547f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2YyNjllMTQ2M2M4NGQ1MWYyZWVmNjk1MDg5Y2JmOWQwM2I1NDdm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-03-22T14:16:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-04T17:23:50Z"
      },
      "message": "tests: Add proof-of-work fuzzing harness",
      "tree": {
        "sha": "71f0ff27e60867bfbd37d4c476975f4fc75a3cb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71f0ff27e60867bfbd37d4c476975f4fc75a3cb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acf269e1463c84d51f2eef695089cbf9d03b547f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf269e1463c84d51f2eef695089cbf9d03b547f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acf269e1463c84d51f2eef695089cbf9d03b547f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf269e1463c84d51f2eef695089cbf9d03b547f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "244e88e6b580f94434d16b2cea2e5690db24f0d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/244e88e6b580f94434d16b2cea2e5690db24f0d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/244e88e6b580f94434d16b2cea2e5690db24f0d4"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 94,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2978e5a2ec6a170afa0427336f9407d711d8086b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf269e1463c84d51f2eef695089cbf9d03b547f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf269e1463c84d51f2eef695089cbf9d03b547f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=acf269e1463c84d51f2eef695089cbf9d03b547f",
        "patch": "@@ -57,6 +57,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/parse_univalue \\\n   test/fuzz/partial_merkle_tree_deserialize \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n+  test/fuzz/pow \\\n   test/fuzz/prefilled_transaction_deserialize \\\n   test/fuzz/process_message \\\n   test/fuzz/process_message_addr \\\n@@ -610,6 +611,12 @@ test_fuzz_partially_signed_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMO\n test_fuzz_partially_signed_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_partially_signed_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n+test_fuzz_pow_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_pow_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_pow_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_pow_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_pow_SOURCES = $(FUZZ_SUITE) test/fuzz/pow.cpp\n+\n test_fuzz_prefilled_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPREFILLED_TRANSACTION_DESERIALIZE=1\n test_fuzz_prefilled_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_prefilled_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "0343d33401dbce462045d4315b13c8937297f990",
        "filename": "src/test/fuzz/pow.cpp",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf269e1463c84d51f2eef695089cbf9d03b547f/src/test/fuzz/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf269e1463c84d51f2eef695089cbf9d03b547f/src/test/fuzz/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/pow.cpp?ref=acf269e1463c84d51f2eef695089cbf9d03b547f",
        "patch": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chain.h>\n+#include <chainparams.h>\n+#include <optional.h>\n+#include <pow.h>\n+#include <primitives/block.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    SelectParams(CBaseChainParams::MAIN);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const Consensus::Params& consensus_params = Params().GetConsensus();\n+    std::vector<CBlockIndex> blocks;\n+    const uint32_t fixed_time = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const uint32_t fixed_bits = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    while (fuzzed_data_provider.remaining_bytes() > 0) {\n+        const Optional<CBlockHeader> block_header = ConsumeDeserializable<CBlockHeader>(fuzzed_data_provider);\n+        if (!block_header) {\n+            continue;\n+        }\n+        CBlockIndex current_block{*block_header};\n+        {\n+            CBlockIndex* previous_block = !blocks.empty() ? &blocks[fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, blocks.size() - 1)] : nullptr;\n+            const int current_height = (previous_block != nullptr && previous_block->nHeight != std::numeric_limits<int>::max()) ? previous_block->nHeight + 1 : 0;\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                current_block.pprev = previous_block;\n+            }\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                current_block.nHeight = current_height;\n+            }\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                current_block.nTime = fixed_time + current_height * consensus_params.nPowTargetSpacing;\n+            }\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                current_block.nBits = fixed_bits;\n+            }\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                current_block.nChainWork = previous_block != nullptr ? previous_block->nChainWork + GetBlockProof(*previous_block) : arith_uint256{0};\n+            } else {\n+                current_block.nChainWork = ConsumeArithUInt256(fuzzed_data_provider);\n+            }\n+            blocks.push_back(current_block);\n+        }\n+        {\n+            (void)GetBlockProof(current_block);\n+            (void)CalculateNextWorkRequired(&current_block, fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(0, std::numeric_limits<int64_t>::max()), consensus_params);\n+            if (current_block.nHeight != std::numeric_limits<int>::max() && current_block.nHeight - (consensus_params.DifficultyAdjustmentInterval() - 1) >= 0) {\n+                (void)GetNextWorkRequired(&current_block, &(*block_header), consensus_params);\n+            }\n+        }\n+        {\n+            const CBlockIndex* to = &blocks[fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, blocks.size() - 1)];\n+            const CBlockIndex* from = &blocks[fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, blocks.size() - 1)];\n+            const CBlockIndex* tip = &blocks[fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, blocks.size() - 1)];\n+            try {\n+                (void)GetBlockProofEquivalentTime(*to, *from, *tip, consensus_params);\n+            } catch (const uint_error&) {\n+            }\n+        }\n+        {\n+            const Optional<uint256> hash = ConsumeDeserializable<uint256>(fuzzed_data_provider);\n+            if (hash) {\n+                (void)CheckProofOfWork(*hash, fuzzed_data_provider.ConsumeIntegral<unsigned int>(), consensus_params);\n+            }\n+        }\n+    }\n+}"
      },
      {
        "sha": "6b22601d2979b08f8126066bd4c958c77e9196cd",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf269e1463c84d51f2eef695089cbf9d03b547f/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf269e1463c84d51f2eef695089cbf9d03b547f/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=acf269e1463c84d51f2eef695089cbf9d03b547f",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_TEST_FUZZ_UTIL_H\n \n #include <amount.h>\n+#include <arith_uint256.h>\n #include <attributes.h>\n #include <optional.h>\n #include <script/script.h>\n@@ -80,6 +81,11 @@ NODISCARD inline uint256 ConsumeUInt256(FuzzedDataProvider& fuzzed_data_provider\n     return uint256{v256};\n }\n \n+NODISCARD inline arith_uint256 ConsumeArithUInt256(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    return UintToArith256(ConsumeUInt256(fuzzed_data_provider));\n+}\n+\n template <typename T>\n bool MultiplicationOverflow(T i, T j)\n {"
      }
    ]
  }
]