[
  {
    "sha": "67654b64056e8b7e8312607d7275f73dbc9548ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzY1NGI2NDA1NmU4YjdlODMxMjYwN2Q3Mjc1ZjczZGJjOTU0OGFk",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-09-20T07:33:07Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-09-24T20:58:06Z"
      },
      "message": "tests: write the notification to different files to avoid race condition",
      "tree": {
        "sha": "48f0d10ca35b950302487f3b250dab8f69c09b5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48f0d10ca35b950302487f3b250dab8f69c09b5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67654b64056e8b7e8312607d7275f73dbc9548ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67654b64056e8b7e8312607d7275f73dbc9548ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67654b64056e8b7e8312607d7275f73dbc9548ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67654b64056e8b7e8312607d7275f73dbc9548ad/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "990fc0de1afdfac8b711f39d9dbbab0c5f88a4c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/990fc0de1afdfac8b711f39d9dbbab0c5f88a4c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/990fc0de1afdfac8b711f39d9dbbab0c5f88a4c5"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 27,
      "deletions": 29
    },
    "files": [
      {
        "sha": "84cd596bbd10eb4116afab5f8310dc301636a56a",
        "filename": "appveyor.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67654b64056e8b7e8312607d7275f73dbc9548ad/appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67654b64056e8b7e8312607d7275f73dbc9548ad/appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/appveyor.yml?ref=67654b64056e8b7e8312607d7275f73dbc9548ad",
        "patch": "@@ -55,5 +55,5 @@ test_script:\n - ps:  src\\bench_bitcoin.exe -evals=1 -scaling=0\n - ps:  python test\\util\\bitcoin-util-test.py\n - cmd: python test\\util\\rpcauth-test.py\n-- cmd: python test\\functional\\test_runner.py --force --quiet --combinedlogslen=4000 --exclude \"feature_notifications,wallet_multiwallet,wallet_multiwallet.py --usecli\"\n+- cmd: python test\\functional\\test_runner.py --force --quiet --combinedlogslen=4000 --exclude \"wallet_multiwallet,wallet_multiwallet.py --usecli\"\n deploy: off"
      },
      {
        "sha": "a93443f2dbf54e01f54ee846ef8f32a46e3fa7ba",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 26,
        "deletions": 28,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67654b64056e8b7e8312607d7275f73dbc9548ad/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67654b64056e8b7e8312607d7275f73dbc9548ad/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=67654b64056e8b7e8312607d7275f73dbc9548ad",
        "patch": "@@ -17,73 +17,71 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def setup_network(self):\n-        self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n-        self.block_filename = os.path.join(self.options.tmpdir, \"blocks.txt\")\n-        self.tx_filename = os.path.join(self.options.tmpdir, \"transactions.txt\")\n+        self.alertnotify_dir = os.path.join(self.options.tmpdir, \"alertnotify\")\n+        self.blocknotify_dir = os.path.join(self.options.tmpdir, \"blocknotify\")\n+        self.walletnotify_dir = os.path.join(self.options.tmpdir, \"walletnotify\")\n+        os.mkdir(self.alertnotify_dir)\n+        os.mkdir(self.blocknotify_dir)\n+        os.mkdir(self.walletnotify_dir)\n \n         # -alertnotify and -blocknotify on node0, walletnotify on node1\n         self.extra_args = [[\"-blockversion=2\",\n-                            \"-alertnotify=echo %%s >> %s\" % self.alert_filename,\n-                            \"-blocknotify=echo %%s >> %s\" % self.block_filename],\n+                            \"-alertnotify=echo > {}\".format(os.path.join(self.alertnotify_dir, '%s')),\n+                            \"-blocknotify=echo > {}\".format(os.path.join(self.blocknotify_dir, '%s'))],\n                            [\"-blockversion=211\",\n                             \"-rescan\",\n-                            \"-walletnotify=echo %%s >> %s\" % self.tx_filename]]\n+                            \"-walletnotify=echo > {}\".format(os.path.join(self.walletnotify_dir, '%s'))]]\n         super().setup_network()\n \n     def run_test(self):\n         self.log.info(\"test -blocknotify\")\n         block_count = 10\n         blocks = self.nodes[1].generate(block_count)\n \n-        # wait at most 10 seconds for expected file size before reading the content\n-        wait_until(lambda: os.path.isfile(self.block_filename) and os.stat(self.block_filename).st_size >= (block_count * 65), timeout=10)\n+        # wait at most 10 seconds for expected number of files before reading the content\n+        wait_until(lambda: len(os.listdir(self.blocknotify_dir)) == block_count, timeout=10)\n \n-        # file content should equal the generated blocks hashes\n-        with open(self.block_filename, 'r', encoding=\"utf-8\") as f:\n-            assert_equal(sorted(blocks), sorted(l.strip() for l in f.read().splitlines()))\n+        # directory content should equal the generated blocks hashes\n+        assert_equal(sorted(blocks), sorted(os.listdir(self.blocknotify_dir)))\n \n         self.log.info(\"test -walletnotify\")\n-        # wait at most 10 seconds for expected file size before reading the content\n-        wait_until(lambda: os.path.isfile(self.tx_filename) and os.stat(self.tx_filename).st_size >= (block_count * 65), timeout=10)\n+        # wait at most 10 seconds for expected number of files before reading the content\n+        wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n-        # file content should equal the generated transaction hashes\n+        # directory content should equal the generated transaction hashes\n         txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n-        with open(self.tx_filename, 'r', encoding=\"ascii\") as f:\n-            assert_equal(sorted(txids_rpc), sorted(l.strip() for l in f.read().splitlines()))\n-        os.remove(self.tx_filename)\n+        assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n+        for tx_file in os.listdir(self.walletnotify_dir):\n+            os.remove(os.path.join(self.walletnotify_dir, tx_file))\n \n         self.log.info(\"test -walletnotify after rescan\")\n         # restart node to rescan to force wallet notifications\n         self.restart_node(1)\n         connect_nodes_bi(self.nodes, 0, 1)\n \n-        wait_until(lambda: os.path.isfile(self.tx_filename) and os.stat(self.tx_filename).st_size >= (block_count * 65), timeout=10)\n+        wait_until(lambda: len(os.listdir(self.walletnotify_dir)) == block_count, timeout=10)\n \n-        # file content should equal the generated transaction hashes\n+        # directory content should equal the generated transaction hashes\n         txids_rpc = list(map(lambda t: t['txid'], self.nodes[1].listtransactions(\"*\", block_count)))\n-        with open(self.tx_filename, 'r', encoding=\"ascii\") as f:\n-            assert_equal(sorted(txids_rpc), sorted(l.strip() for l in f.read().splitlines()))\n+        assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n \n         # Mine another 41 up-version blocks. -alertnotify should trigger on the 51st.\n         self.log.info(\"test -alertnotify\")\n         self.nodes[1].generate(41)\n         self.sync_all()\n \n         # Give bitcoind 10 seconds to write the alert notification\n-        wait_until(lambda: os.path.isfile(self.alert_filename) and os.path.getsize(self.alert_filename), timeout=10)\n+        wait_until(lambda: len(os.listdir(self.alertnotify_dir)), timeout=10)\n \n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n+        for notify_file in os.listdir(self.alertnotify_dir):\n+            os.remove(os.path.join(self.alertnotify_dir, notify_file))\n \n         # Mine more up-version blocks, should not get more alerts:\n         self.nodes[1].generate(2)\n         self.sync_all()\n \n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text2 = f.read()\n-\n         self.log.info(\"-alertnotify should not continue notifying for more unknown version blocks\")\n-        assert_equal(alert_text, alert_text2)\n+        assert_equal(len(os.listdir(self.alertnotify_dir)), 0)\n \n if __name__ == '__main__':\n     NotificationsTest().main()"
      }
    ]
  }
]