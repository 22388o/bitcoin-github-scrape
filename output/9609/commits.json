[
  {
    "sha": "80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGZmMDM0NGFlYmJkZWJkZmE3NDMzZDg1NWIwYWE5ZGU2YzRiZWQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-15T00:41:37Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T18:56:05Z"
      },
      "message": "Dont deserialize nVersion into CNode, should fix #9212",
      "tree": {
        "sha": "586c959f54a062154d05ceed8689ba676f27ddd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/586c959f54a062154d05ceed8689ba676f27ddd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6dcb907bcfceb0498d0df667cf221b2f4a089212",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
        "patch": "@@ -1199,7 +1199,8 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         uint64_t nServiceInt;\n-        vRecv >> pfrom->nVersion >> nServiceInt >> nTime >> addrMe;\n+        int nVersion;\n+        vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n         pfrom->nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n@@ -1214,18 +1215,18 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             return false;\n         }\n \n-        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n+        if (nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n+            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, nVersion);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n \n-        if (pfrom->nVersion == 10300)\n-            pfrom->nVersion = 300;\n+        if (nVersion == 10300)\n+            nVersion = 300;\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n@@ -1277,7 +1278,8 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n \n         // Change version\n         connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n-        int nSendVersion = std::min(pfrom->nVersion, PROTOCOL_VERSION);\n+        int nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n+        pfrom->nVersion = nVersion;\n         pfrom->SetSendVersion(nSendVersion);\n \n         if (!pfrom->fInbound)"
      }
    ]
  },
  {
    "sha": "2046617b5e06ddb7f960b28219c155995542f029",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDQ2NjE3YjVlMDZkZGI3Zjk2MGIyODIxOWMxNTU5OTU1NDJmMDI5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-18T23:15:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:13:52Z"
      },
      "message": "net: deserialize the entire version message locally\n\nThis avoids having some vars set if the version negotiation fails.\n\nAlso copy it all into CNode at the same site. nVersion and\nfSuccessfullyConnected are set last, as they are the gates for the other vars.\nMake them atomic for that reason.",
      "tree": {
        "sha": "53a62fc8ab3fc3361f026f7c1f6429d0456a5887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53a62fc8ab3fc3361f026f7c1f6429d0456a5887"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2046617b5e06ddb7f960b28219c155995542f029",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2046617b5e06ddb7f960b28219c155995542f029",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2046617b5e06ddb7f960b28219c155995542f029",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2046617b5e06ddb7f960b28219c155995542f029/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 36,
      "deletions": 29
    },
    "files": [
      {
        "sha": "c51ae5a18dff426e3ebf436056fa75769a695444",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2046617b5e06ddb7f960b28219c155995542f029/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2046617b5e06ddb7f960b28219c155995542f029/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2046617b5e06ddb7f960b28219c155995542f029",
        "patch": "@@ -627,7 +627,7 @@ class CNode\n     const CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n-    int nVersion;\n+    std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n@@ -639,7 +639,7 @@ class CNode\n     bool fAddnode;\n     bool fClient;\n     const bool fInbound;\n-    bool fSuccessfullyConnected;\n+    std::atomic_bool fSuccessfullyConnected;\n     std::atomic_bool fDisconnect;\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message"
      },
      {
        "sha": "d1e6b1ae045a6ff1ceccb8f4f2ea0fb41306fb5d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 27,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2046617b5e06ddb7f960b28219c155995542f029/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2046617b5e06ddb7f960b28219c155995542f029/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2046617b5e06ddb7f960b28219c155995542f029",
        "patch": "@@ -1199,16 +1199,23 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         uint64_t nServiceInt;\n+        ServiceFlags nServices;\n         int nVersion;\n+        int nSendVersion;\n+        std::string strSubVer;\n+        int nStartingHeight = -1;\n+        bool fRelay = true;\n+\n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n-        pfrom->nServices = ServiceFlags(nServiceInt);\n+        nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n+        nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n-            connman.SetServices(pfrom->addr, pfrom->nServices);\n+            connman.SetServices(pfrom->addr, nServices);\n         }\n-        if (pfrom->nServicesExpected & ~pfrom->nServices)\n+        if (pfrom->nServicesExpected & ~nServices)\n         {\n-            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, pfrom->nServices, pfrom->nServicesExpected);\n+            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, nServices, pfrom->nServicesExpected);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n                                strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n             pfrom->fDisconnect = true;\n@@ -1230,20 +1237,13 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n-            vRecv >> LIMITED_STRING(pfrom->strSubVer, MAX_SUBVERSION_LENGTH);\n-            pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n+            vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n         }\n         if (!vRecv.empty()) {\n-            vRecv >> pfrom->nStartingHeight;\n+            vRecv >> nStartingHeight;\n         }\n-        {\n-            LOCK(pfrom->cs_filter);\n-            if (!vRecv.empty())\n-                vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n-            else\n-                pfrom->fRelayTxes = true;\n-        }\n-\n+        if (!vRecv.empty())\n+            vRecv >> fRelay;\n         // Disconnect if we connected to ourself\n         if (pfrom->fInbound && !connman.CheckIncomingNonce(nNonce))\n         {\n@@ -1252,7 +1252,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             return true;\n         }\n \n-        pfrom->addrLocal = addrMe;\n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n             SeenLocal(addrMe);\n@@ -1262,9 +1261,25 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         if (pfrom->fInbound)\n             PushNodeVersion(pfrom, connman, GetAdjustedTime());\n \n-        pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n+        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+\n+        pfrom->nServices = nServices;\n+        pfrom->addrLocal = addrMe;\n+        pfrom->strSubVer = strSubVer;\n+        pfrom->cleanSubVer = SanitizeString(strSubVer);\n+        pfrom->nStartingHeight = nStartingHeight;\n+        pfrom->fClient = !(nServices & NODE_NETWORK);\n+        {\n+            LOCK(pfrom->cs_filter);\n+            pfrom->fRelayTxes = fRelay; // set to true after we get the first filter* message\n+        }\n+\n+        // Change version\n+        pfrom->SetSendVersion(nSendVersion);\n+        pfrom->nVersion = nVersion;\n+        pfrom->fSuccessfullyConnected = true;\n \n-        if((pfrom->nServices & NODE_WITNESS))\n+        if((nServices & NODE_WITNESS))\n         {\n             LOCK(cs_main);\n             State(pfrom->GetId())->fHaveWitness = true;\n@@ -1276,12 +1291,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n         }\n \n-        // Change version\n-        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n-        int nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n-        pfrom->nVersion = nVersion;\n-        pfrom->SetSendVersion(nSendVersion);\n-\n         if (!pfrom->fInbound)\n         {\n             // Advertise our address\n@@ -1309,8 +1318,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             connman.MarkAddressGood(pfrom->addr);\n         }\n \n-        pfrom->fSuccessfullyConnected = true;\n-\n         std::string remoteAddr;\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n@@ -1352,7 +1359,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n-        pfrom->SetRecvVersion(std::min(pfrom->nVersion, PROTOCOL_VERSION));\n+        pfrom->SetRecvVersion(std::min(pfrom->nVersion.load(), PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound) {\n             // Mark this node as currently connected, so we update its timestamp later."
      }
    ]
  },
  {
    "sha": "12752af0cc99745d6273ef072645d999c26a9ef7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjc1MmFmMGNjOTk3NDVkNjI3M2VmMDcyNjQ1ZDk5OWMyNmE5ZWY3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-21T01:34:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:14:16Z"
      },
      "message": "net: don't run callbacks on nodes that haven't completed the version handshake\n\nSince ForEach* are can be used to send messages to  all nodes, the caller may\nend up sending a message before the version handshake is complete. To limit\nthis, filter out these nodes. While we're at it, may as well filter out\ndisconnected nodes as well.\n\nDelete unused methods rather than updating them.",
      "tree": {
        "sha": "a7e0a2f8beec66f4486fef0ced9450a16b616731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7e0a2f8beec66f4486fef0ced9450a16b616731"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12752af0cc99745d6273ef072645d999c26a9ef7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12752af0cc99745d6273ef072645d999c26a9ef7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12752af0cc99745d6273ef072645d999c26a9ef7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12752af0cc99745d6273ef072645d999c26a9ef7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2046617b5e06ddb7f960b28219c155995542f029",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2046617b5e06ddb7f960b28219c155995542f029",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2046617b5e06ddb7f960b28219c155995542f029"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 25,
      "deletions": 57
    },
    "files": [
      {
        "sha": "19358dd5b795a1632c07711edaff1e1ebc6c8945",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=12752af0cc99745d6273ef072645d999c26a9ef7",
        "patch": "@@ -2630,6 +2630,11 @@ void CNode::AskFor(const CInv& inv)\n     mapAskFor.insert(std::make_pair(nRequestTime, inv));\n }\n \n+bool CConnman::NodeFullyConnected(const CNode* pnode)\n+{\n+    return pnode && pnode->fSuccessfullyConnected && !pnode->fDisconnect;\n+}\n+\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n@@ -2680,7 +2685,7 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n             break;\n         }\n     }\n-    return found != nullptr && func(found);\n+    return found != nullptr && NodeFullyConnected(found) && func(found);\n }\n \n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {"
      },
      {
        "sha": "05f178f9c50faa55d2ae5ef10f6eee0de52d9c06",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 19,
        "deletions": 56,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=12752af0cc99745d6273ef072645d999c26a9ef7",
        "patch": "@@ -161,85 +161,45 @@ class CConnman\n \n     void PushMessage(CNode* pnode, CSerializedNetMsg&& msg);\n \n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func)\n-    {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func) const\n-    {\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post)\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post) const\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n     template<typename Callable>\n     void ForEachNode(Callable&& func)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable>\n     void ForEachNode(Callable&& func) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n@@ -372,6 +332,9 @@ class CConnman\n     void RecordBytesRecv(uint64_t bytes);\n     void RecordBytesSent(uint64_t bytes);\n \n+    // Whether the node should be passed out in ForEach* callbacks\n+    static bool NodeFullyConnected(const CNode* pnode);\n+\n     // Network usage totals\n     CCriticalSection cs_totalBytesRecv;\n     CCriticalSection cs_totalBytesSent;"
      }
    ]
  },
  {
    "sha": "7a8c2519015650acd51eaf42719f04e53f839bbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YThjMjUxOTAxNTY1MGFjZDUxZWFmNDI3MTlmMDRlNTNmODM5YmJl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-26T17:35:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:14:16Z"
      },
      "message": "net: Disallow sending messages until the version handshake is complete\n\nThis is a change in behavior, though it's much more sane now than before.",
      "tree": {
        "sha": "a0dde75654c96f4c40654e083217d4c63fc7f747",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0dde75654c96f4c40654e083217d4c63fc7f747"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a8c2519015650acd51eaf42719f04e53f839bbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8c2519015650acd51eaf42719f04e53f839bbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8c2519015650acd51eaf42719f04e53f839bbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8c2519015650acd51eaf42719f04e53f839bbe/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12752af0cc99745d6273ef072645d999c26a9ef7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12752af0cc99745d6273ef072645d999c26a9ef7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12752af0cc99745d6273ef072645d999c26a9ef7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a7acd6edffd13a4d061c36d81d35b8aaa616a757",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a8c2519015650acd51eaf42719f04e53f839bbe/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a8c2519015650acd51eaf42719f04e53f839bbe/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7a8c2519015650acd51eaf42719f04e53f839bbe",
        "patch": "@@ -1277,7 +1277,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         // Change version\n         pfrom->SetSendVersion(nSendVersion);\n         pfrom->nVersion = nVersion;\n-        pfrom->fSuccessfullyConnected = true;\n \n         if((nServices & NODE_WITNESS))\n         {\n@@ -1387,6 +1386,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             nCMPCTBLOCKVersion = 1;\n             connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n+        pfrom->fSuccessfullyConnected = true;\n     }\n \n \n@@ -2725,8 +2725,8 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n-        // Don't send anything until we get its version message\n-        if (pto->nVersion == 0 || pto->fDisconnect)\n+        // Don't send anything until the version handshake is complete\n+        if (!pto->fSuccessfullyConnected || pto->fDisconnect)\n             return true;\n \n         // If we get here, the outgoing message serialization version is set and can't change."
      },
      {
        "sha": "a8f09ba6aef7a74d5b6c4a46fd2fa2803ec92fce",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a8c2519015650acd51eaf42719f04e53f839bbe/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a8c2519015650acd51eaf42719f04e53f839bbe/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=7a8c2519015650acd51eaf42719f04e53f839bbe",
        "patch": "@@ -55,6 +55,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n@@ -65,6 +66,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n     dummyNode2.nVersion = 1;\n+    dummyNode2.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n@@ -85,6 +87,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100);\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n@@ -110,6 +113,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode, *connman);\n     dummyNode.nVersion = 1;\n+    dummyNode.fSuccessfullyConnected = true;\n \n     Misbehaving(dummyNode.GetId(), 100);\n     SendMessages(&dummyNode, *connman, interruptDummy);"
      }
    ]
  },
  {
    "sha": "08bb6f4ed48359aedd869450b99799b9c734084b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGJiNmY0ZWQ0ODM1OWFlZGQ4Njk0NTBiOTk3OTliOWM3MzQwODRi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T19:33:41Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:14:16Z"
      },
      "message": "net: log an error rather than asserting if send version is misused\n\nAlso cleaned up the comments and moved from the header to the .cpp so that\nlogging headers aren't needed from net.h",
      "tree": {
        "sha": "57b415e1f950001d44192ec2d071875661a27f19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57b415e1f950001d44192ec2d071875661a27f19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08bb6f4ed48359aedd869450b99799b9c734084b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bb6f4ed48359aedd869450b99799b9c734084b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08bb6f4ed48359aedd869450b99799b9c734084b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bb6f4ed48359aedd869450b99799b9c734084b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a8c2519015650acd51eaf42719f04e53f839bbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8c2519015650acd51eaf42719f04e53f839bbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8c2519015650acd51eaf42719f04e53f839bbe"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 29,
      "deletions": 19
    },
    "files": [
      {
        "sha": "db914096f8896c52b65fb723c417570c83348eec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=08bb6f4ed48359aedd869450b99799b9c734084b",
        "patch": "@@ -689,6 +689,33 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     return true;\n }\n \n+void CNode::SetSendVersion(int nVersionIn)\n+{\n+    // Send version may only be changed in the version message, and\n+    // only one version message is allowed per session. We can therefore\n+    // treat this value as const and even atomic as long as it's only used\n+    // once a version message has been successfully processed. Any attempt to\n+    // set this twice is an error.\n+    if (nSendVersion != 0) {\n+        error(\"Send version already set for node: %i. Refusing to change from %i to %i\", id, nSendVersion, nVersionIn);\n+    } else {\n+        nSendVersion = nVersionIn;\n+    }\n+}\n+\n+int CNode::GetSendVersion() const\n+{\n+    // The send version should always be explicitly set to\n+    // INIT_PROTO_VERSION rather than using this value until SetSendVersion\n+    // has been called.\n+    if (nSendVersion == 0) {\n+        error(\"Requesting unset send version for node: %i. Using %i\", id, INIT_PROTO_VERSION);\n+        return INIT_PROTO_VERSION;\n+    }\n+    return nSendVersion;\n+}\n+\n+\n int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n {\n     // copy data to temporary parsing buffer"
      },
      {
        "sha": "1e3033785ef40401fb6d8f68bb21bcd9528968a0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 19,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=08bb6f4ed48359aedd869450b99799b9c734084b",
        "patch": "@@ -723,25 +723,8 @@ class CNode\n     {\n         return nRecvVersion;\n     }\n-    void SetSendVersion(int nVersionIn)\n-    {\n-        // Send version may only be changed in the version message, and\n-        // only one version message is allowed per session. We can therefore\n-        // treat this value as const and even atomic as long as it's only used\n-        // once the handshake is complete. Any attempt to set this twice is an\n-        // error.\n-        assert(nSendVersion == 0);\n-        nSendVersion = nVersionIn;\n-    }\n-\n-    int GetSendVersion() const\n-    {\n-        // The send version should always be explicitly set to\n-        // INIT_PROTO_VERSION rather than using this value until the handshake\n-        // is complete.\n-        assert(nSendVersion != 0);\n-        return nSendVersion;\n-    }\n+    void SetSendVersion(int nVersionIn);\n+    int GetSendVersion() const;\n \n     CNode* AddRef()\n     {"
      }
    ]
  }
]