[
  {
    "sha": "0cd9ad208c327127cc4616ccdc37557fad3cf381",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2Q5YWQyMDhjMzI3MTI3Y2M0NjE2Y2NkYzM3NTU3ZmFkM2NmMzgx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-12-12T23:21:19Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-01-16T00:33:32Z"
      },
      "message": "rpc: Make unloadwallet wait for complete wallet unload\n\nGithub-Pull: #14941\nRebased-From: c37851d",
      "tree": {
        "sha": "41393ae40812ce24475b650c89b70858d88f0336",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41393ae40812ce24475b650c89b70858d88f0336"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cd9ad208c327127cc4616ccdc37557fad3cf381",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cd9ad208c327127cc4616ccdc37557fad3cf381",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cd9ad208c327127cc4616ccdc37557fad3cf381",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cd9ad208c327127cc4616ccdc37557fad3cf381/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a0b2ea11fde7becbdd1c04205336c3a39bffbc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0b2ea11fde7becbdd1c04205336c3a39bffbc0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a0b2ea11fde7becbdd1c04205336c3a39bffbc0"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 56,
      "deletions": 12
    },
    "files": [
      {
        "sha": "075dc42099b58dbe87223052d90e83a50667f454",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0cd9ad208c327127cc4616ccdc37557fad3cf381",
        "patch": "@@ -282,10 +282,10 @@ void Shutdown()\n         LogPrintf(\"%s: Unable to remove pidfile: %s\\n\", __func__, e.what());\n     }\n #endif\n+    g_wallet_init_interface.Close();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     GetMainSignals().UnregisterWithMempoolSignals(mempool);\n-    g_wallet_init_interface.Close();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     LogPrintf(\"%s: done\\n\", __func__);"
      },
      {
        "sha": "7dc6c306458f19e68d3adcf6e2c0eeee810c0252",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=0cd9ad208c327127cc4616ccdc37557fad3cf381",
        "patch": "@@ -264,7 +264,11 @@ void WalletInit::Stop() const\n \n void WalletInit::Close() const\n {\n-    for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        RemoveWallet(pwallet);\n+    auto wallets = GetWallets();\n+    while (!wallets.empty()) {\n+        auto wallet = wallets.back();\n+        wallets.pop_back();\n+        RemoveWallet(wallet);\n+        UnloadWallet(std::move(wallet));\n     }\n }"
      },
      {
        "sha": "cc429f5e5654fb05306b39c421777385943562b4",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0cd9ad208c327127cc4616ccdc37557fad3cf381",
        "patch": "@@ -3239,16 +3239,8 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n     if (!RemoveWallet(wallet)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Requested wallet already unloaded\");\n     }\n-    UnregisterValidationInterface(wallet.get());\n \n-    // The wallet can be in use so it's not possible to explicitly unload here.\n-    // Just notify the unload intent so that all shared pointers are released.\n-    // The wallet will be destroyed once the last shared pointer is released.\n-    wallet->NotifyUnload();\n-\n-    // There's no point in waiting for the wallet to unload.\n-    // At this point this method should never fail. The unloading could only\n-    // fail due to an unexpected error which would cause a process termination.\n+    UnloadWallet(std::move(wallet));\n \n     return NullUniValue;\n }"
      },
      {
        "sha": "e86aa04d184c4c8ebd5c52218a0e5f8b6b81dc8f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0cd9ad208c327127cc4616ccdc37557fad3cf381",
        "patch": "@@ -81,13 +81,52 @@ std::shared_ptr<CWallet> GetWallet(const std::string& name)\n     return nullptr;\n }\n \n+static std::mutex g_wallet_release_mutex;\n+static std::condition_variable g_wallet_release_cv;\n+static std::set<CWallet*> g_unloading_wallet_set;\n+\n // Custom deleter for shared_ptr<CWallet>.\n static void ReleaseWallet(CWallet* wallet)\n {\n+    // Unregister and delete the wallet right after BlockUntilSyncedToCurrentChain\n+    // so that it's in sync with the current chainstate.\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n     wallet->BlockUntilSyncedToCurrentChain();\n     wallet->Flush();\n+    UnregisterValidationInterface(wallet);\n     delete wallet;\n+    // Wallet is now released, notify UnloadWallet, if any.\n+    {\n+        std::lock_guard<std::mutex> lock(g_wallet_release_mutex);\n+        if (g_unloading_wallet_set.erase(wallet) == 0) {\n+            // UnloadWallet was not called for this wallet, all done.\n+            return;\n+        }\n+    }\n+    g_wallet_release_cv.notify_all();\n+}\n+\n+void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n+{\n+    // Mark wallet for unloading.\n+    CWallet* pwallet = wallet.get();\n+    {\n+        std::lock_guard<std::mutex> lock(g_wallet_release_mutex);\n+        auto it = g_unloading_wallet_set.insert(pwallet);\n+        assert(it.second);\n+    }\n+    // The wallet can be in use so it's not possible to explicitly unload here.\n+    // Notify the unload intent so that all remaining shared pointers are\n+    // released.\n+    pwallet->NotifyUnload();\n+    // Time to ditch our shared_ptr and wait for ReleaseWallet call.\n+    wallet.reset();\n+    {\n+        std::unique_lock<std::mutex> lock(g_wallet_release_mutex);\n+        while (g_unloading_wallet_set.count(pwallet) == 1) {\n+            g_wallet_release_cv.wait(lock);\n+        }\n+    }\n }\n \n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;"
      },
      {
        "sha": "1f20834843211c4e63ec3e896e33e3a6f2f1e7da",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cd9ad208c327127cc4616ccdc37557fad3cf381/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0cd9ad208c327127cc4616ccdc37557fad3cf381",
        "patch": "@@ -33,6 +33,13 @@\n #include <utility>\n #include <vector>\n \n+//! Explicitly unload and delete the wallet.\n+//  Blocks the current thread after signaling the unload intent so that all\n+//  wallet clients release the wallet.\n+//  Note that, when blocking is not required, the wallet is implicitly unloaded\n+//  by the shared pointer deleter.\n+void UnloadWallet(std::shared_ptr<CWallet>&& wallet);\n+\n bool AddWallet(const std::shared_ptr<CWallet>& wallet);\n bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();\n@@ -817,6 +824,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     ~CWallet()\n     {\n+        // Should not have slots connected at this point.\n+        assert(NotifyUnload.empty());\n         delete encrypted_batch;\n         encrypted_batch = nullptr;\n     }"
      }
    ]
  }
]