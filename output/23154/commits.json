[
  {
    "sha": "9ab440199d5c888363a42c957433d0e46cd0d2ff",
    "node_id": "C_kwDOABII59oAKDlhYjQ0MDE5OWQ1Yzg4ODM2M2E0MmM5NTc0MzNkMGU0NmNkMGQyZmY",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-01T14:23:27Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-04T20:40:00Z"
      },
      "message": "doc: add assumeutxo notes",
      "tree": {
        "sha": "eea3e5985325ce6b3940dde7264f0e6ee77695f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eea3e5985325ce6b3940dde7264f0e6ee77695f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ab440199d5c888363a42c957433d0e46cd0d2ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmFbZqIACgkQepNdrbLE\nTwW+DA/+KcFEUy7U5V48VMo5r/3D19c1hrWcMfyFIlhqYM6ayRvRqx+X1a/Xo91M\nbxsXp3L6UzFVVHehCGWjEABk0a38ITUhulIs0Jx3vbDViIPalfaIDkjKjsjc/bMh\noephI8C+zcFis+7VFUSXkDr8NMx8mkBrsd83P3dONxNojDvwbPf9FVTqqkDtDQ+G\nZaYudbg2qvWtZZ8QnNtBtNg+OVTmfRouIa6F2kcyL5qOS+hSbM26/kjJPzm6xhw0\nz+Lk/asicSgdzppBD8bbxJkUFd6JmTzwfxLt6VQKWEhfNtOfXkovnD2NarUUDjqQ\nLM4SdOhi7u4TkIRL6clE14Ipz+7B9tpCjv/rYUBK7uenAH3QXyNcmobnnTFAwY/P\nZlRZgsBIV1O1B56Y2CnRRluu7O9Xjs+VLolatc+EXWlVMHnvjew3+3VBgEadFmY0\nRPshLTQmsDaggHJ7T64DDfLM8TZ6Z8fjReCEGFqbP+zrxFZjuyS/qolHLskbO3R6\nS798vOFd7LGIrD6FwHkMZnCAl47A53MGaa47BrDHa5TwWJqSWGhdi9Hi5by7kDns\nVgCH0MivQWHE9A1gA30LIK7Sgn58Qm/KgZVfEgqRsNq+2RXsEWzB3SwkvZrFP3Mp\nSXAhd93/WZi7+IGJ9DbT5jKaWE+w36vEg8LhV0UBrvG1dr97VhQ=\n=Yils\n-----END PGP SIGNATURE-----",
        "payload": "tree eea3e5985325ce6b3940dde7264f0e6ee77695f1\nparent 9013f23b0a6e0e450c4603f9d0f050ff10d552f6\nauthor James O'Beirne <james.obeirne@pm.me> 1633098207 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1633380000 -0400\n\ndoc: add assumeutxo notes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ab440199d5c888363a42c957433d0e46cd0d2ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ab440199d5c888363a42c957433d0e46cd0d2ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ab440199d5c888363a42c957433d0e46cd0d2ff/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9013f23b0a6e0e450c4603f9d0f050ff10d552f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9013f23b0a6e0e450c4603f9d0f050ff10d552f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9013f23b0a6e0e450c4603f9d0f050ff10d552f6"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 139,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4845f00ade55f354eb18ea407b10c480bb85d652",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ab440199d5c888363a42c957433d0e46cd0d2ff/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ab440199d5c888363a42c957433d0e46cd0d2ff/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=9ab440199d5c888363a42c957433d0e46cd0d2ff",
        "patch": "@@ -71,6 +71,7 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n+- [Assumeutxo design](assumeutxo.md)\n - [bitcoin.conf Configuration File](bitcoin-conf.md)\n - [Files](files.md)\n - [Fuzz-testing](fuzzing.md)"
      },
      {
        "sha": "2726cf779b2d6fb3fa194540b436c3da67e0a048",
        "filename": "doc/assumeutxo.md",
        "status": "added",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ab440199d5c888363a42c957433d0e46cd0d2ff/doc/assumeutxo.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ab440199d5c888363a42c957433d0e46cd0d2ff/doc/assumeutxo.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/assumeutxo.md?ref=9ab440199d5c888363a42c957433d0e46cd0d2ff",
        "patch": "@@ -0,0 +1,138 @@\n+# assumeutxo\n+\n+Assumeutxo is a feature that allows fast bootstrapping of a validating bitcoind\n+instance with a very similar security model to assumevalid.\n+\n+The RPC commands `dumptxoutset` and `loadtxoutset` are used to respectively generate\n+and load UTXO snapshots. The utility script `./contrib/devtools/utxo_snapshot.sh` may\n+be of use.\n+\n+## General background\n+\n+- [assumeutxo proposal](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal)\n+- [Github issue](https://github.com/bitcoin/bitcoin/issues/15605)\n+- [draft PR](https://github.com/bitcoin/bitcoin/pull/15606)\n+\n+## Design notes\n+\n+- A new block index `nStatus` flag is introduced, `BLOCK_ASSUMED_VALID`, to mark block\n+  index entries that are required to be assumed-valid by a chainstate created\n+  from a UTXO snapshot. This flag is mostly used as a way to modify certain\n+  CheckBlockIndex() logic to account for index entries that are pending validation by a\n+  chainstate running asynchronously in the background. We also use this flag to control\n+  which index entries are added to setBlockIndexCandidates during LoadBlockIndex().\n+\n+- Indexing implementations via BaseIndex can no longer assume that indexation happens\n+  sequentially, since background validation chainstates can submit BlockConnected\n+  events out of order with the active chain.\n+\n+- The concept of UTXO snapshots is treated as an implementation detail that lives\n+  behind the ChainstateManager interface. The external presentation of the changes\n+  required to facilitate the use of UTXO snapshots is the understanding that there are\n+  now certain regions of the chain that can be temporarily assumed to be valid (using\n+  the nStatus flag mentioned above). In certain cases, e.g. wallet rescanning, this is\n+  very similar to dealing with a pruned chain.\n+\n+  Logic outside ChainstateManager should try not to know about snapshots, instead\n+  preferring to work in terms of more general states like assumed-valid.\n+\n+\n+## Chainstate phases\n+\n+Chainstate within the system goes through a number of phases when UTXO snapshots are\n+used, as managed by `ChainstateManager`. At various points there can be multiple\n+`CChainState` objects in existence to facilitate both maintaining the network tip and\n+performing historical validation of the assumed-valid chain.\n+\n+It is worth noting that though there are multiple separate chainstates, those\n+chainstates share use of a common block index (i.e. they hold the same `BlockManager`\n+reference).\n+\n+The subheadings below outline the phases and the corresponding changes to chainstate\n+data.\n+\n+### \"Normal\" operation via initial block download\n+\n+`ChainstateManager` manages a single CChainState object, for which\n+`m_snapshot_blockhash` is null. This chainstate is (maybe obviously)\n+considered active. This is the \"traditional\" mode of operation for bitcoind.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |\n+\n+### User loads a UTXO snapshot via `loadtxoutset` RPC\n+\n+`ChainstateManager` initializes a new chainstate (see `ActivateSnapshot()`) to load the\n+snapshot contents into. During snapshot load and validation (see\n+`PopulateAndValidateSnapshot()`), the new chainstate is not considered active and the\n+original chainstate remains in use as active.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | ibd |\n+\n+Once the snapshot chainstate is loaded and validated, it is promoted to active\n+chainstate and a sync to tip begins. A new chainstate directory is created in the\n+datadir for the snapshot chainstate called\n+`chainstate_[SHA256 blockhash of snapshot base block]`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | snapshot |\n+\n+The snapshot begins to sync to tip from its base block, technically in parallel with\n+the original chainstate, but it is given priority during block download and is\n+allocated most of the cache (see `MaybeRebalanceCaches()` and usages) as our chief\n+consideration is getting to network tip.\n+\n+**Failure consideration:** if shutdown happens at any point during this phase, both\n+chainstates will be detected during the next init and the process will resume.\n+\n+### Snapshot chainstate hits network tip\n+\n+Once the snapshot chainstate leaves IBD, caches are rebalanced\n+(via `MaybeRebalanceCaches()` in `ActivateBestChain()`) and more cache is given\n+to the background chainstate, which is responsible for doing full validation of the\n+assumed-valid parts of the chain.\n+\n+**Note:** at this point, ValidationInterface callbacks will be coming in from both\n+chainstates. Considerations here must be made for indexing, which may no longer be happening\n+sequentially.\n+\n+### Background chainstate hits snapshot base block\n+\n+Once the tip of the background chainstate hits the base block of the snapshot\n+chainstate, we stop use of the background chainstate by setting `m_stop_use` (not yet\n+committed - see #15606), in `CompleteSnapshotValidation()`, which is checked in\n+`ActivateBestChain()`). We hash the background chainstate's UTXO set contents and\n+ensure it matches the compiled value in `CMainParams::m_assumeutxo_data`.\n+\n+The background chainstate data lingers on disk until shutdown, when in\n+`ChainstateManager::Reset()`, the background chainstate is cleaned up with\n+`ValidatedSnapshotShutdownCleanup()`, which renames the `chainstate_[hash]` datadir as\n+`chainstate`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 (ibd has `m_stop_use=true`) |\n+| active chainstate | snapshot |\n+\n+**Failure consideration:** if bitcoind unexpectedly halts after `m_stop_use` is set on\n+the background chainstate but before `CompleteSnapshotValidation()` can finish, the\n+need to complete snapshot validation will be detected on subsequent init by\n+`ChainstateManager::CheckForUncleanShutdown()`.\n+\n+### Bitcoind restarts sometime after snapshot validation has completed\n+\n+When bitcoind initializes again, what began as the snapshot chainstate is now\n+indistinguishable from a chainstate that has been built from the traditional IBD\n+process, and will be initialized as such.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |"
      }
    ]
  }
]