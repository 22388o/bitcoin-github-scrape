[
  {
    "sha": "67d4cbab461260cd51386a16a1a34bb9161e73a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2Q0Y2JhYjQ2MTI2MGNkNTEzODZhMTZhMWEzNGJiOTE2MWU3M2E4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-01T16:44:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-13T10:31:28Z"
      },
      "message": "Move GetStartOnSystemStartup and SetStartOnSystemStartup to GUI code",
      "tree": {
        "sha": "c85905d162513f4f53c337de167ab362650cd58a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c85905d162513f4f53c337de167ab362650cd58a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67d4cbab461260cd51386a16a1a34bb9161e73a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67d4cbab461260cd51386a16a1a34bb9161e73a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67d4cbab461260cd51386a16a1a34bb9161e73a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67d4cbab461260cd51386a16a1a34bb9161e73a8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82f66082b986132ab9ef039afa3c1e116dcbb36b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82f66082b986132ab9ef039afa3c1e116dcbb36b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82f66082b986132ab9ef039afa3c1e116dcbb36b"
      }
    ],
    "stats": {
      "total": 309,
      "additions": 155,
      "deletions": 154
    },
    "files": [
      {
        "sha": "38e2b6f9e6b81ef8e5743b4f82f5f9b4d05d2aa4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "patch": "@@ -656,11 +656,6 @@ bool AppInit2(int argc, char* argv[])\n     if (fServer)\n         CreateThread(ThreadRPCServer, NULL);\n \n-#ifdef QT_GUI\n-    if (GetStartOnSystemStartup())\n-        SetStartOnSystemStartup(true); // Remove startup links\n-#endif\n-\n #if !defined(QT_GUI)\n     while (1)\n         Sleep(5000);"
      },
      {
        "sha": "cf115c48f10d3bd0a26c24c348058464207aeff9",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "patch": "@@ -232,6 +232,10 @@ int main(int argc, char *argv[])\n \n     try\n     {\n+        // Regenerate startup link, to fix links to old versions\n+        if (GUIUtil::GetStartOnSystemStartup())\n+            GUIUtil::SetStartOnSystemStartup(true);\n+\n         BitcoinGUI window;\n         guiref = &window;\n         if(AppInit2(argc, argv))"
      },
      {
        "sha": "23e657677213ca22f83cc634b173c0aa0209ee0c",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "patch": "@@ -19,6 +19,7 @@\n #include <QThread>\n \n #include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n \n #ifdef WIN32\n #ifdef _WIN32_WINNT\n@@ -268,5 +269,149 @@ bool ToolTipToRichTextFilter::eventFilter(QObject *obj, QEvent *evt)\n     return QObject::eventFilter(obj, evt);\n }\n \n+#ifdef WIN32\n+boost::filesystem::path static StartupShortcutPath()\n+{\n+    return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n+}\n+\n+bool GetStartOnSystemStartup()\n+{\n+    // check for Bitcoin.lnk\n+    return boost::filesystem::exists(StartupShortcutPath());\n+}\n+\n+bool SetStartOnSystemStartup(bool fAutoStart)\n+{\n+    // If the shortcut exists already, remove it for updating\n+    boost::filesystem::remove(StartupShortcutPath());\n+\n+    if (fAutoStart)\n+    {\n+        CoInitialize(NULL);\n+\n+        // Get a pointer to the IShellLink interface.\n+        IShellLink* psl = NULL;\n+        HRESULT hres = CoCreateInstance(CLSID_ShellLink, NULL,\n+                                CLSCTX_INPROC_SERVER, IID_IShellLink,\n+                                reinterpret_cast<void**>(&psl));\n+\n+        if (SUCCEEDED(hres))\n+        {\n+            // Get the current executable path\n+            TCHAR pszExePath[MAX_PATH];\n+            GetModuleFileName(NULL, pszExePath, sizeof(pszExePath));\n+\n+            TCHAR pszArgs[5] = TEXT(\"-min\");\n+\n+            // Set the path to the shortcut target\n+            psl->SetPath(pszExePath);\n+            PathRemoveFileSpec(pszExePath);\n+            psl->SetWorkingDirectory(pszExePath);\n+            psl->SetShowCmd(SW_SHOWMINNOACTIVE);\n+            psl->SetArguments(pszArgs);\n+\n+            // Query IShellLink for the IPersistFile interface for\n+            // saving the shortcut in persistent storage.\n+            IPersistFile* ppf = NULL;\n+            hres = psl->QueryInterface(IID_IPersistFile,\n+                                       reinterpret_cast<void**>(&ppf));\n+            if (SUCCEEDED(hres))\n+            {\n+                WCHAR pwsz[MAX_PATH];\n+                // Ensure that the string is ANSI.\n+                MultiByteToWideChar(CP_ACP, 0, StartupShortcutPath().string().c_str(), -1, pwsz, MAX_PATH);\n+                // Save the link by calling IPersistFile::Save.\n+                hres = ppf->Save(pwsz, TRUE);\n+                ppf->Release();\n+                psl->Release();\n+                CoUninitialize();\n+                return true;\n+            }\n+            psl->Release();\n+        }\n+        CoUninitialize();\n+        return false;\n+    }\n+    return true;\n+}\n+\n+#elif defined(LINUX)\n+\n+// Follow the Desktop Application Autostart Spec:\n+//  http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n+\n+boost::filesystem::path static GetAutostartDir()\n+{\n+    namespace fs = boost::filesystem;\n+\n+    char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n+    if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n+    char* pszHome = getenv(\"HOME\");\n+    if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";\n+    return fs::path();\n+}\n+\n+boost::filesystem::path static GetAutostartFilePath()\n+{\n+    return GetAutostartDir() / \"bitcoin.desktop\";\n+}\n+\n+bool GetStartOnSystemStartup()\n+{\n+    boost::filesystem::ifstream optionFile(GetAutostartFilePath());\n+    if (!optionFile.good())\n+        return false;\n+    // Scan through file for \"Hidden=true\":\n+    std::string line;\n+    while (!optionFile.eof())\n+    {\n+        getline(optionFile, line);\n+        if (line.find(\"Hidden\") != std::string::npos &&\n+            line.find(\"true\") != std::string::npos)\n+            return false;\n+    }\n+    optionFile.close();\n+\n+    return true;\n+}\n+\n+bool SetStartOnSystemStartup(bool fAutoStart)\n+{\n+    if (!fAutoStart)\n+        boost::filesystem::remove(GetAutostartFilePath());\n+    else\n+    {\n+        char pszExePath[MAX_PATH+1];\n+        memset(pszExePath, 0, sizeof(pszExePath));\n+        if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)\n+            return false;\n+\n+        boost::filesystem::create_directories(GetAutostartDir());\n+\n+        boost::filesystem::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out|std::ios_base::trunc);\n+        if (!optionFile.good())\n+            return false;\n+        // Write a bitcoin.desktop file to the autostart directory:\n+        optionFile << \"[Desktop Entry]\\n\";\n+        optionFile << \"Type=Application\\n\";\n+        optionFile << \"Name=Bitcoin\\n\";\n+        optionFile << \"Exec=\" << pszExePath << \" -min\\n\";\n+        optionFile << \"Terminal=false\\n\";\n+        optionFile << \"Hidden=false\\n\";\n+        optionFile.close();\n+    }\n+    return true;\n+}\n+#else\n+\n+// TODO: OSX startup stuff; see:\n+// http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPSystemStartup/Articles/CustomLogin.html\n+\n+bool GetStartOnSystemStartup() { return false; }\n+bool SetStartOnSystemStartup(bool fAutoStart) { return false; }\n+\n+#endif\n+\n } // namespace GUIUtil\n "
      },
      {
        "sha": "f30d5db35bbae71c06d9b79d8b3fea12177a1655",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "patch": "@@ -90,6 +90,9 @@ namespace GUIUtil\n         int size_threshold;\n     };\n \n+    bool GetStartOnSystemStartup();\n+    bool SetStartOnSystemStartup(bool fAutoStart);\n+\n } // namespace GUIUtil\n \n #endif // GUIUTIL_H"
      },
      {
        "sha": "181dec4400bccccc0a9576ebe363ee4945997478",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"init.h\"\n #include \"walletdb.h\"\n+#include \"guiutil.h\"\n \n OptionsModel::OptionsModel(QObject *parent) :\n     QAbstractListModel(parent)\n@@ -107,7 +108,7 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n         switch(index.row())\n         {\n         case StartAtStartup:\n-            return QVariant(GetStartOnSystemStartup());\n+            return QVariant(GUIUtil::GetStartOnSystemStartup());\n         case MinimizeToTray:\n             return QVariant(fMinimizeToTray);\n         case MapPortUPnP:\n@@ -146,7 +147,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         switch(index.row())\n         {\n         case StartAtStartup:\n-            successful = SetStartOnSystemStartup(value.toBool());\n+            successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n             break;\n         case MinimizeToTray:\n             fMinimizeToTray = value.toBool();"
      },
      {
        "sha": "170ea05139cb9aa999236bb9dcf8f51a559fe4a4",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 143,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "patch": "@@ -48,7 +48,6 @@ namespace boost {\n #define NOMINMAX\n #endif\n #include \"shlobj.h\"\n-#include \"shlwapi.h\"\n #endif\n \n using namespace std;\n@@ -1078,146 +1077,4 @@ boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)\n     printf(\"SHGetSpecialFolderPathA() failed, could not obtain requested path.\\n\");\n     return fs::path(\"\");\n }\n-\n-boost::filesystem::path static StartupShortcutPath()\n-{\n-    return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n-}\n-\n-bool GetStartOnSystemStartup()\n-{\n-    // check for Bitcoin.lnk\n-    return boost::filesystem::exists(StartupShortcutPath());\n-}\n-\n-bool SetStartOnSystemStartup(bool fAutoStart)\n-{\n-    // If the shortcut exists already, remove it for updating\n-    boost::filesystem::remove(StartupShortcutPath());\n-\n-    if (fAutoStart)\n-    {\n-        CoInitialize(NULL);\n-\n-        // Get a pointer to the IShellLink interface.\n-        IShellLink* psl = NULL;\n-        HRESULT hres = CoCreateInstance(CLSID_ShellLink, NULL,\n-                                CLSCTX_INPROC_SERVER, IID_IShellLink,\n-                                reinterpret_cast<void**>(&psl));\n-\n-        if (SUCCEEDED(hres))\n-        {\n-            // Get the current executable path\n-            TCHAR pszExePath[MAX_PATH];\n-            GetModuleFileName(NULL, pszExePath, sizeof(pszExePath));\n-\n-            TCHAR pszArgs[5] = TEXT(\"-min\");\n-\n-            // Set the path to the shortcut target\n-            psl->SetPath(pszExePath);\n-            PathRemoveFileSpec(pszExePath);\n-            psl->SetWorkingDirectory(pszExePath);\n-            psl->SetShowCmd(SW_SHOWMINNOACTIVE);\n-            psl->SetArguments(pszArgs);\n-\n-            // Query IShellLink for the IPersistFile interface for\n-            // saving the shortcut in persistent storage.\n-            IPersistFile* ppf = NULL;\n-            hres = psl->QueryInterface(IID_IPersistFile,\n-                                       reinterpret_cast<void**>(&ppf));\n-            if (SUCCEEDED(hres))\n-            {\n-                WCHAR pwsz[MAX_PATH];\n-                // Ensure that the string is ANSI.\n-                MultiByteToWideChar(CP_ACP, 0, StartupShortcutPath().string().c_str(), -1, pwsz, MAX_PATH);\n-                // Save the link by calling IPersistFile::Save.\n-                hres = ppf->Save(pwsz, TRUE);\n-                ppf->Release();\n-                psl->Release();\n-                CoUninitialize();\n-                return true;\n-            }\n-            psl->Release();\n-        }\n-        CoUninitialize();\n-        return false;\n-    }\n-    return true;\n-}\n-\n-#elif defined(LINUX)\n-\n-// Follow the Desktop Application Autostart Spec:\n-//  http://standards.freedesktop.org/autostart-spec/autostart-spec-latest.html\n-\n-boost::filesystem::path static GetAutostartDir()\n-{\n-    namespace fs = boost::filesystem;\n-\n-    char* pszConfigHome = getenv(\"XDG_CONFIG_HOME\");\n-    if (pszConfigHome) return fs::path(pszConfigHome) / \"autostart\";\n-    char* pszHome = getenv(\"HOME\");\n-    if (pszHome) return fs::path(pszHome) / \".config\" / \"autostart\";\n-    return fs::path();\n-}\n-\n-boost::filesystem::path static GetAutostartFilePath()\n-{\n-    return GetAutostartDir() / \"bitcoin.desktop\";\n-}\n-\n-bool GetStartOnSystemStartup()\n-{\n-    boost::filesystem::ifstream optionFile(GetAutostartFilePath());\n-    if (!optionFile.good())\n-        return false;\n-    // Scan through file for \"Hidden=true\":\n-    string line;\n-    while (!optionFile.eof())\n-    {\n-        getline(optionFile, line);\n-        if (line.find(\"Hidden\") != string::npos &&\n-            line.find(\"true\") != string::npos)\n-            return false;\n-    }\n-    optionFile.close();\n-\n-    return true;\n-}\n-\n-bool SetStartOnSystemStartup(bool fAutoStart)\n-{\n-    if (!fAutoStart)\n-        boost::filesystem::remove(GetAutostartFilePath());\n-    else\n-    {\n-        char pszExePath[MAX_PATH+1];\n-        memset(pszExePath, 0, sizeof(pszExePath));\n-        if (readlink(\"/proc/self/exe\", pszExePath, sizeof(pszExePath)-1) == -1)\n-            return false;\n-\n-        boost::filesystem::create_directories(GetAutostartDir());\n-\n-        boost::filesystem::ofstream optionFile(GetAutostartFilePath(), ios_base::out|ios_base::trunc);\n-        if (!optionFile.good())\n-            return false;\n-        // Write a bitcoin.desktop file to the autostart directory:\n-        optionFile << \"[Desktop Entry]\\n\";\n-        optionFile << \"Type=Application\\n\";\n-        optionFile << \"Name=Bitcoin\\n\";\n-        optionFile << \"Exec=\" << pszExePath << \" -min\\n\";\n-        optionFile << \"Terminal=false\\n\";\n-        optionFile << \"Hidden=false\\n\";\n-        optionFile.close();\n-    }\n-    return true;\n-}\n-#else\n-\n-// TODO: OSX startup stuff; see:\n-// http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPSystemStartup/Articles/CustomLogin.html\n-\n-bool GetStartOnSystemStartup() { return false; }\n-bool SetStartOnSystemStartup(bool fAutoStart) { return false; }\n-\n #endif"
      },
      {
        "sha": "8e65fa786437ebd4692becf29fad704be87ae021",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67d4cbab461260cd51386a16a1a34bb9161e73a8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=67d4cbab461260cd51386a16a1a34bb9161e73a8",
        "patch": "@@ -162,8 +162,6 @@ void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map\n #ifdef WIN32\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif\n-bool GetStartOnSystemStartup();\n-bool SetStartOnSystemStartup(bool fAutoStart);\n void ShrinkDebugFile();\n int GetRandInt(int nMax);\n uint64 GetRand(uint64 nMax);\n@@ -182,8 +180,6 @@ void AddTimeData(const CNetAddr& ip, int64 nTime);\n \n \n \n-\n-\n inline std::string i64tostr(int64 n)\n {\n     return strprintf(\"%\"PRI64d, n);"
      }
    ]
  }
]