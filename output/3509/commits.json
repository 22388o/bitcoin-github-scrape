[
  {
    "sha": "bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGMyZDUxNWZhZjJiNjQ1OWMwZWU5OGRlNWNiYzMxNDlmZjU5NzBk",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-01-07T05:01:35Z"
      },
      "committer": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-01-10T23:04:53Z"
      },
      "message": "Transaction expiration",
      "tree": {
        "sha": "6fac28761dc8f2335e1e5c65ca6f018784a82794",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fac28761dc8f2335e1e5c65ca6f018784a82794"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62e9d774966c9f4344f0356c59ddadcc5ff17212",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e9d774966c9f4344f0356c59ddadcc5ff17212",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62e9d774966c9f4344f0356c59ddadcc5ff17212"
      }
    ],
    "stats": {
      "total": 299,
      "additions": 270,
      "deletions": 29
    },
    "files": [
      {
        "sha": "37ec6259e6216c38b9b88ac4afb28038d7a458f4",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -229,6 +229,11 @@ class CTransaction\n     // Compute priority, given priority of inputs and (optionally) tx size\n     double ComputePriority(double dPriorityInputs, unsigned int nTxSize=0) const;\n \n+    bool IsExpired(unsigned int nBlockTime) const\n+    {\n+        return (!vin.empty() && nBlockTime > 129600 && vin[0].nSequence < nBlockTime - 129600); // txs expire after 36h\n+    }\n+\n     bool IsCoinBase() const\n     {\n         return (vin.size() == 1 && vin[0].prevout.IsNull());\n@@ -345,7 +350,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int CURRENT_VERSION=2;\n+    static const int CURRENT_VERSION=3;\n     int nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "715fb56c4d5031cd5ff9d3a1e04bf65ffb137f4b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -265,6 +265,8 @@ std::string HelpMessage(HelpMessageMode hmm)\n     strUsage += \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \"\\n\";\n     strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \"\\n\";\n     strUsage += \"  -par=<n>               \" + _(\"Set the number of script verification threads (up to 16, 0 = auto, <0 = leave that many cores free, default: 0)\") + \"\\n\";\n+    strUsage += \"  -txtimestamp           \" + _(\"Timestamp transactions on creation. This lets created unconfirmed transactions expire after 36 hours, if they have not been confirmed by the network (default: 1)\") + \"\\n\";\n+    strUsage += \"  -expirenotify=<cmd>    \" + _(\"Execute command when a wallet transaction expires (%s in cmd is replaced by TxID)\") + \"\\n\";\n #ifdef ENABLE_WALLET\n     strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n     strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n@@ -532,6 +534,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n             InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n     }\n \n+    fTimestampTransactions = GetBoolArg(\"-txtimestamp\", true);\n+\n     strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log"
      },
      {
        "sha": "cc5e4cbd3de5434fc61a2a0cfd1ed9b1ffe2ff5c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 7,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -106,7 +106,7 @@ struct CMainSignals {\n     // Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible).\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     // Notifies listeners of a new active block chain.\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (CBlockIndex* pindexNew, const bool fIsInitialDownload)> SetBestChain;\n     // Notifies listeners about an inventory item being seen on the network.\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     // Tells listeners to broadcast their data.\n@@ -118,15 +118,15 @@ void RegisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.EraseTransaction.connect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CWalletInterface::UpdatedTransaction, pwalletIn, _1));\n-    g_signals.SetBestChain.connect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.SetBestChain.connect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1, _2));\n     g_signals.Inventory.connect(boost::bind(&CWalletInterface::Inventory, pwalletIn, _1));\n     g_signals.Broadcast.connect(boost::bind(&CWalletInterface::ResendWalletTransactions, pwalletIn));\n }\n \n void UnregisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.Broadcast.disconnect(boost::bind(&CWalletInterface::ResendWalletTransactions, pwalletIn));\n     g_signals.Inventory.disconnect(boost::bind(&CWalletInterface::Inventory, pwalletIn, _1));\n-    g_signals.SetBestChain.disconnect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1));\n+    g_signals.SetBestChain.disconnect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1, _2));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CWalletInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.EraseTransaction.disconnect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n     g_signals.SyncTransaction.disconnect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n@@ -671,7 +671,7 @@ int64_t GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree,\n \n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee)\n+                        bool* pfMissingInputs, bool fRejectInsaneFee, bool fCheckExpired)\n {\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n@@ -691,6 +691,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                          error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason.c_str()),\n                          REJECT_NONSTANDARD, reason);\n \n+    // Transaction expiration, reject transactions expiring in 24 hours or less\n+    if (fCheckExpired && tx.IsExpired((unsigned int)GetAdjustedTime() + 86400))\n+        return false;\n+\n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n     if (pool.exists(hash))\n@@ -1836,7 +1840,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     BOOST_FOREACH(CTransaction& tx, vResurrect) {\n         // ignore validation errors in resurrected transactions\n         CValidationState stateDummy;\n-        if (!AcceptToMemoryPool(mempool,stateDummy, tx, false, NULL))\n+        if (!AcceptToMemoryPool(mempool,stateDummy, tx, false, NULL, false, false))\n             mempool.remove(tx, true);\n     }\n \n@@ -1846,11 +1850,13 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         mempool.removeConflicts(tx);\n     }\n \n+    // Remove expired transactions\n+    mempool.removeExpired(pindexNew->nTime);\n+\n     mempool.check(pcoinsTip);\n \n     // Update best block in wallet (so we can detect restored wallets)\n-    if ((pindexNew->nHeight % 20160) == 0 || (!fIsInitialDownload && (pindexNew->nHeight % 144) == 0))\n-        g_signals.SetBestChain(chainActive.GetLocator(pindexNew));\n+    g_signals.SetBestChain(pindexNew, fIsInitialDownload);\n \n     // New best block\n     nTimeBestReceived = GetTime();\n@@ -2166,6 +2172,30 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CDiskBlockPos* dbp)\n                                      REJECT_INVALID, \"height incorrect in coinbase\");\n             }\n         }\n+\n+        // Reject block.nVersion=2 blocks when 95% (75% on testnet) of the network has upgraded:\n+        if (block.nVersion < 3)\n+        {\n+            if ((!TestNet() && CBlockIndex::IsSuperMajority(3, pindexPrev, 950, 1000)) ||\n+                (TestNet() && CBlockIndex::IsSuperMajority(3, pindexPrev, 75, 100)))\n+            {\n+                return state.Invalid(error(\"AcceptBlock() : rejected nVersion=2 block\"),\n+                                     REJECT_OBSOLETE, \"version 2 blocks obsolete\");\n+            }\n+        }\n+        // Enforce block.nVersion=3 rule that expired transactions are not allowed\n+        if (block.nVersion >= 3)\n+        {\n+            // if 750 of the last 1,000 blocks are version 3 or greater (51/100 if testnet):\n+            if ((!TestNet() && CBlockIndex::IsSuperMajority(3, pindexPrev, 750, 1000)) ||\n+                (TestNet() && CBlockIndex::IsSuperMajority(3, pindexPrev, 51, 100)))\n+            {\n+                BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+                    if (tx.IsExpired(block.nTime))\n+                        return state.DoS(100, error(\"AcceptBlock() : expired transaction found\"),\n+                                     REJECT_INVALID, \"expired transaction in block\");\n+            }\n+        }\n     }\n \n     // Write block to history file"
      },
      {
        "sha": "9d4475d7c92b358892fa63f5d48993f1807491e7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -185,7 +185,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee=false);\n+                        bool* pfMissingInputs, bool fRejectInsaneFee=false, bool fCheckExpired=true);\n \n \n \n@@ -1092,7 +1092,7 @@ class CWalletInterface {\n protected:\n     virtual void SyncTransaction(const uint256 &hash, const CTransaction &tx, const CBlock *pblock) =0;\n     virtual void EraseFromWallet(const uint256 &hash) =0;\n-    virtual void SetBestChain(const CBlockLocator &locator) =0;\n+    virtual void SetBestChain(CBlockIndex* pindexNew, bool fIsInitialDownload) =0;\n     virtual void UpdatedTransaction(const uint256 &hash) =0;\n     virtual void Inventory(const uint256 &hash) =0;\n     virtual void ResendWalletTransactions() =0;"
      },
      {
        "sha": "3e1de87737dd688b21a72cbf85aaa228822794fe",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -146,6 +146,9 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         CCoinsViewCache view(*pcoinsTip, true);\n \n+        // Set block nTime early to be able to check for expired transactions\n+        UpdateTime(*pblock, pindexPrev);\n+\n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n         map<uint256, vector<COrphan*> > mapDependers;\n@@ -158,7 +161,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->second.GetTx();\n-            if (tx.IsCoinBase() || !IsFinalTx(tx))\n+            if (tx.IsCoinBase() || !IsFinalTx(tx) || tx.IsExpired(pblock->nTime + 3600)) // 3600 = safety threshold because mining software may change the timestamp afterwards\n                 continue;\n \n             COrphan* porphan = NULL;\n@@ -326,7 +329,6 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(*pblock, pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n         pblock->nNonce         = 0;\n         pblock->vtx[0].vin[0].scriptSig = CScript() << OP_0 << OP_0;"
      },
      {
        "sha": "2b7c188423ad68ebb77588485096e007e8b141e8",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -48,6 +48,7 @@ class TxViewDelegate : public QAbstractItemDelegate\n         QString address = index.data(Qt::DisplayRole).toString();\n         qint64 amount = index.data(TransactionTableModel::AmountRole).toLongLong();\n         bool confirmed = index.data(TransactionTableModel::ConfirmedRole).toBool();\n+        bool expired = index.data(TransactionTableModel::ExpiredRole).toBool();\n         QVariant value = index.data(Qt::ForegroundRole);\n         QColor foreground = option.palette.color(QPalette::Text);\n         if(value.canConvert<QBrush>())\n@@ -75,7 +76,10 @@ class TxViewDelegate : public QAbstractItemDelegate\n         QString amountText = BitcoinUnits::formatWithUnit(unit, amount, true);\n         if(!confirmed)\n         {\n-            amountText = QString(\"[\") + amountText + QString(\"]\");\n+            if (expired)\n+                amountText = QString(\"[\") + tr(\"expired\") + QString(\"]\");\n+            else\n+                amountText = QString(\"[\") + amountText + QString(\"]\");\n         }\n         painter->drawText(amountRect, Qt::AlignRight|Qt::AlignVCenter, amountText);\n "
      },
      {
        "sha": "ed3339fb472129fc331d07bd01f7d787e10a7b1d",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -30,7 +30,9 @@ QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n     else\n     {\n         int nDepth = wtx.GetDepthInMainChain();\n-        if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n+        if (wtx.fExpired)\n+            return tr(\"%1/expired\").arg(nDepth);\n+        else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n             return tr(\"%1/offline\").arg(nDepth);\n         else if (nDepth < 6)\n             return tr(\"%1/unconfirmed\").arg(nDepth);\n@@ -62,6 +64,18 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n             else if (nRequests > 0)\n                 strHTML += tr(\", broadcast through %n node(s)\", \"\", nRequests);\n         }\n+        if (!wtx.fExpired && wtx.GetDepthInMainChain() == 0 && !wtx.vin.empty())\n+        {\n+            int nExpiresInHours = (int)(((int64_t)wtx.vin[0].nSequence - GetTime() + 129600 + 3599) / 3600);\n+\n+            nExpiresInHours += 2; // the wallets shows expired about 2 hours late on purpose\n+\n+            if (nExpiresInHours < 1)\n+                nExpiresInHours = 1;\n+\n+            if (nExpiresInHours <= 38)\n+                strHTML += tr(\", expires in about %n hour(s) if still unconfirmed by the network\", \"\", nExpiresInHours);\n+        }\n         strHTML += \"<br>\";\n \n         strHTML += \"<b>\" + tr(\"Date\") + \":</b> \" + (nTime ? GUIUtil::dateTimeStr(nTime) : \"\") + \"<br>\";"
      },
      {
        "sha": "107557e2481b7a2b695f07683dc39614a05aafb5",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -183,7 +183,11 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     }\n     else\n     {\n-        if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n+        if (wtx.fExpired)\n+        {\n+            status.status = TransactionStatus::Expired;\n+        }\n+        else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n         {\n             status.status = TransactionStatus::Offline;\n         }"
      },
      {
        "sha": "7c8bda20234e3c597123c8533fe8c473bb652f85",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -36,7 +36,8 @@ class TransactionStatus\n         OpenUntilBlock,\n         Offline,\n         Unconfirmed,\n-        HaveConfirmations\n+        HaveConfirmations,\n+        Expired\n     };\n \n     bool confirmed;"
      },
      {
        "sha": "2885fa5f94458385130494cacb5dc0a72164e64f",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -320,6 +320,9 @@ QString TransactionTableModel::formatTxStatus(const TransactionRecord *wtx) cons\n         case TransactionStatus::HaveConfirmations:\n             status = tr(\"Confirmed (%1 confirmations)\").arg(wtx->status.depth);\n             break;\n+        case TransactionStatus::Expired:\n+            status = tr(\"Expired\");\n+            break;\n         }\n     }\n \n@@ -486,6 +489,8 @@ QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx)\n             };\n         case TransactionStatus::HaveConfirmations:\n             return QIcon(\":/icons/transaction_confirmed\");\n+        case TransactionStatus::Expired:\n+            return QIcon(\":/icons/quit\");\n         }\n     }\n     return QColor(0,0,0);\n@@ -585,6 +590,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         // Return True if transaction counts for balance\n         return rec->status.confirmed && !(rec->type == TransactionRecord::Generated &&\n                                           rec->status.maturity != TransactionStatus::Mature);\n+    case ExpiredRole:\n+        return (rec->status.status == TransactionStatus::Expired);\n     case FormattedAmountRole:\n         return formatTxAmount(rec, false);\n     }"
      },
      {
        "sha": "a3854d6a1cede5e529effc16aa684cd4e5cff6a7",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -52,6 +52,8 @@ class TransactionTableModel : public QAbstractTableModel\n         TxIDRole,\n         /** Is transaction confirmed? */\n         ConfirmedRole,\n+        /** Is transaction expired? */\n+        ExpiredRole,\n         /** Formatted amount, without brackets when unconfirmed */\n         FormattedAmountRole\n     };"
      },
      {
        "sha": "9c75229472fe1b4c7f41ecc1f5007b9b07ad8c88",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -314,7 +314,7 @@ Value getwork(const Array& params, bool fHelp)\n         static CBlockIndex* pindexPrev;\n         static int64_t nStart;\n         static CBlockTemplate* pblocktemplate;\n-        if (pindexPrev != chainActive.Tip() ||\n+        if (pindexPrev != chainActive.Tip() || GetTime() - nStart > 1800 ||\n             (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 60))\n         {\n             if (pindexPrev != chainActive.Tip())\n@@ -490,7 +490,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static CBlockTemplate* pblocktemplate;\n-    if (pindexPrev != chainActive.Tip() ||\n+    if (pindexPrev != chainActive.Tip() || GetTime() - nStart > 1800 ||\n         (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n     {\n         // Clear pindexPrev so future calls make a new block, despite any failures from here on"
      },
      {
        "sha": "936cb20f065fa57965e1c73fbdb7e00bf46a1987",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -365,6 +365,17 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n         CTxIn in(COutPoint(txid, nOutput));\n+\n+        // timestamp for transaction expiration\n+        if (fTimestampTransactions && rawTx.vin.empty())\n+        {\n+            // check if system clock is more than 12 hours in the past\n+            if ((unsigned int)GetAdjustedTime() + 43200 < ((chainActive.Tip()) ? chainActive.Tip()->nTime : 0))\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Your computers date and time seem to be wrong. Please fix your system clock!\");\n+\n+            in.nSequence = (unsigned int)GetAdjustedTime();\n+        }\n+\n         rawTx.vin.push_back(in);\n     }\n "
      },
      {
        "sha": "b082afb389eaaf21e135f4f5effe79bb1a2fcb3a",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 6,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -54,6 +54,7 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     entry.push_back(Pair(\"txid\", wtx.GetHash().GetHex()));\n     entry.push_back(Pair(\"time\", (boost::int64_t)wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (boost::int64_t)wtx.nTimeReceived));\n+    entry.push_back(Pair(\"expired\", wtx.fExpired));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n         entry.push_back(Pair(item.first, item.second));\n }\n@@ -482,7 +483,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n+        if (wtx.IsCoinBase() || !IsFinalTx(wtx) || wtx.fExpired)\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n@@ -531,7 +532,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n+        if (wtx.IsCoinBase() || !IsFinalTx(wtx) || wtx.fExpired)\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n@@ -555,7 +556,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (!IsFinalTx(wtx))\n+        if (!IsFinalTx(wtx) || wtx.fExpired)\n             continue;\n \n         int64_t nReceived, nSent, nFee;\n@@ -940,7 +941,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     {\n         const CWalletTx& wtx = (*it).second;\n \n-        if (wtx.IsCoinBase() || !IsFinalTx(wtx))\n+        if (wtx.IsCoinBase() || !IsFinalTx(wtx) || wtx.fExpired)\n             continue;\n \n         int nDepth = wtx.GetDepthInMainChain();\n@@ -1168,15 +1169,16 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Ar\n \n Value listtransactions(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 3)\n+    if (fHelp || params.size() > 4)\n         throw runtime_error(\n             \"listtransactions ( \\\"account\\\" count from )\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"    (string, optional) The account name. If not included, it will list all transactions for all accounts.\\n\"\n+            \"1. \\\"account\\\"    (string, optional) The account name. If not included or \\\"*\\\", it will list all transactions for all accounts.\\n\"\n             \"                                     If \\\"\\\" is set, it will list transactions for the default account.\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. from           (numeric, optional, default=0) The number of transactions to skip\\n\"\n+            \"4. filter         (string, optional, default=all) all = list all (default), expired = list only expired transactions\\n\"\n \n             \"\\nResult:\\n\"\n             \"[\\n\"\n@@ -1205,6 +1207,7 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n             \"                                          for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"expired\\\" : true|false,   (boolean) Whether or not the transaction has been expired, true is only possible if confirmations == 0\\n\"\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n             \"    \\\"otheraccount\\\": \\\"accountname\\\",  (string) For the 'move' category of transactions, the account the funds came \\n\"\n             \"                                          from (for receiving funds, positive amounts), or went to (for sending funds,\\n\"\n@@ -1215,6 +1218,8 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"\\nExamples:\\n\"\n             \"\\nList the most recent 10 transactions in the systems\\n\"\n             + HelpExampleCli(\"listtransactions\", \"\") +\n+            \"\\nList the most recent 10 expired transactions\\n\"\n+            + HelpExampleCli(\"listtransactions\", \"\\\"*\\\" 10 0 \\\"expired\\\"\") +\n             \"\\nList the most recent 10 transactions for the tabby account\\n\"\n             + HelpExampleCli(\"listtransactions\", \"\\\"tabby\\\"\") +\n             \"\\nList transactions 100 to 120 from the tabby account\\n\"\n@@ -1232,11 +1237,16 @@ Value listtransactions(const Array& params, bool fHelp)\n     int nFrom = 0;\n     if (params.size() > 2)\n         nFrom = params[2].get_int();\n+    string strFilter = \"all\";\n+    if (params.size() > 3)\n+        strFilter = params[3].get_str();\n \n     if (nCount < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n     if (nFrom < 0)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative from\");\n+    if (strFilter != \"all\" && strFilter != \"expired\")\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Wrong filter, allowed values are all|expired\");\n \n     Array ret;\n \n@@ -1247,6 +1257,10 @@ Value listtransactions(const Array& params, bool fHelp)\n     for (CWallet::TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n+\n+        if (strFilter == \"expired\" && (pwtx == 0 || !pwtx->fExpired))\n+            continue;\n+\n         if (pwtx != 0)\n             ListTransactions(*pwtx, strAccount, 0, true, ret);\n         CAccountingEntry *const pacentry = (*it).second.second;\n@@ -1311,6 +1325,10 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n+\n+        if (wtx.fExpired)\n+            continue;\n+\n         int64_t nFee;\n         string strSentAccount;\n         list<pair<CTxDestination, int64_t> > listReceived;\n@@ -1366,6 +1384,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n             \"    \\\"txid\\\": \\\"transactionid\\\",  (string) The transaction id (see https://blockchain.info/tx/[transactionid]. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"expired\\\" : false,        (boolean) Whether or not the transaction has been expired, can only be false here.\\n\"\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n             \"    \\\"to\\\": \\\"...\\\",            (string) If a comment to is associated with the transaction.\\n\"\n              \"  ],\\n\"\n@@ -1438,6 +1457,7 @@ Value gettransaction(const Array& params, bool fHelp)\n             \"  \\\"txid\\\" : \\\"transactionid\\\",   (string) The transaction id, see also https://blockchain.info/tx/[transactionid]\\n\"\n             \"  \\\"time\\\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n+            \"  \\\"expired\\\" : true|false,  (boolean) Whether or not the transaction has been expired, true is only possible if confirmations == 0\\n\"\n             \"  \\\"details\\\" : [\\n\"\n             \"    {\\n\"\n             \"      \\\"account\\\" : \\\"accountname\\\",  (string) The account name involved in the transaction, can be \\\"\\\" for the default account.\\n\""
      },
      {
        "sha": "ef7965bbe579a195bcc078832deece0a8fbba91d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -125,6 +125,23 @@ bool CTxMemPool::removeConflicts(const CTransaction &tx)\n     return true;\n }\n \n+void CTxMemPool::removeExpired(unsigned int nBlockTime)\n+{\n+    vector<CTransaction> vDelete;\n+    {\n+        LOCK(cs);\n+        for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); ++it) {\n+            const CTransaction& tx = it->second.GetTx();\n+            if (tx.IsExpired(nBlockTime))\n+                vDelete.push_back(tx);\n+        }\n+    }\n+    BOOST_FOREACH(CTransaction& tx, vDelete) {\n+        remove(tx);\n+        removeConflicts(tx);\n+    }\n+}\n+\n void CTxMemPool::clear()\n {\n     LOCK(cs);"
      },
      {
        "sha": "b469c84e414605b36c150fda7b9bc2d30ed5848e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -74,6 +74,7 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n     bool remove(const CTransaction &tx, bool fRecursive = false);\n     bool removeConflicts(const CTransaction &tx);\n+    void removeExpired(unsigned int nBlockTime);\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);"
      },
      {
        "sha": "d9a0f57e8321e4bb7c121b285d2a60747285a7b8",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 5,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -18,6 +18,7 @@ using namespace std;\n \n // Settings\n int64_t nTransactionFee = 0;\n+bool fTimestampTransactions = true;\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -185,6 +186,47 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n     return false;\n }\n \n+void CWallet::SetBestChain(CBlockIndex* pindexNew, bool fIsInitialDownload)\n+{\n+    if ((pindexNew->nHeight % 20160) == 0 || (!fIsInitialDownload && (pindexNew->nHeight % 144) == 0))\n+        SetBestChain(chainActive.GetLocator(pindexNew));\n+\n+    // check for expired transactions\n+    if (!fIsInitialDownload)\n+    {\n+        LOCK(cs_wallet);\n+        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n+        {\n+            CWalletTx& wtx = item.second;\n+\n+            // the wallet waits about 2 hours longer before marking txs as expired, to really ensure the tx is expired and cannot appear in blocks anymore (unless big chainforks)\n+            if (wtx.GetDepthInMainChain() == 0 && !wtx.IsCoinBase() && !wtx.fExpired && wtx.IsExpired((unsigned int)pindexNew->GetMedianTimePast() - 3600))\n+            {\n+                // make inputs spendable again\n+                BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+                {\n+                    if (!mapWallet.count(txin.prevout.hash)) continue;\n+                    CWalletTx &coin = mapWallet[txin.prevout.hash];\n+                    coin.MarkUnspent(txin.prevout.n);\n+                    coin.WriteToDisk();\n+                }\n+\n+                // mark tx as expired\n+                wtx.fExpired = true;\n+                wtx.WriteToDisk();\n+\n+                // notify an external script when a wallet transaction expires\n+                std::string strCmd = GetArg(\"-expirenotify\", \"\");\n+                if ( !strCmd.empty())\n+                {\n+                    boost::replace_all(strCmd, \"%s\", wtx.GetHash().GetHex());\n+                    boost::thread t(runCommand, strCmd); // thread runs free\n+                }\n+            }\n+        }\n+    }\n+}\n+\n void CWallet::SetBestChain(const CBlockLocator& loc)\n {\n     CWalletDB walletdb(strWalletFile);\n@@ -468,6 +510,22 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         bool fUpdated = false;\n         if (!fInsertedNew)\n         {\n+            // Very unlikely, a tx already marked as expired suddenly appears in a block => \"unexpire\"\n+            if (wtx.fExpired && wtxIn.hashBlock != 0)\n+            {\n+                wtx.fExpired = false;\n+                fUpdated = true;\n+\n+                // Mark old coins as spent\n+                BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+                {\n+                    if (!mapWallet.count(txin.prevout.hash)) continue;\n+                    CWalletTx &coin = mapWallet[txin.prevout.hash];\n+                    coin.MarkSpent(txin.prevout.n);\n+                    coin.WriteToDisk();\n+                }\n+            }\n+\n             // Merge\n             if (wtxIn.hashBlock != 0 && wtxIn.hashBlock != wtx.hashBlock)\n             {\n@@ -869,6 +927,22 @@ void CWallet::ReacceptWalletTransactions()\n             bool fFound = pcoinsTip->GetCoins(wtx.GetHash(), coins);\n             if (fFound || wtx.GetDepthInMainChain() > 0)\n             {\n+                // Very unlikely, a tx already marked as expired suddenly appears in a block => \"unexpire\"\n+                if (wtx.fExpired)\n+                {\n+                    wtx.fExpired = false;\n+                    fUpdated = true;\n+\n+                    // Mark old coins as spent\n+                    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+                    {\n+                        if (!mapWallet.count(txin.prevout.hash)) continue;\n+                        CWalletTx &coin = mapWallet[txin.prevout.hash];\n+                        coin.MarkSpent(txin.prevout.n);\n+                        coin.WriteToDisk();\n+                    }\n+                }\n+\n                 // Update fSpent if a tx got spent somewhere else by a copy of wallet.dat\n                 for (unsigned int i = 0; i < wtx.vout.size(); i++)\n                 {\n@@ -891,7 +965,7 @@ void CWallet::ReacceptWalletTransactions()\n             else\n             {\n                 // Re-accept any txes of ours that aren't already in a block\n-                if (!wtx.IsCoinBase())\n+                if (!wtx.IsCoinBase() && !wtx.fExpired)\n                     wtx.AcceptWalletTransaction();\n             }\n         }\n@@ -913,11 +987,12 @@ void CWalletTx::RelayWalletTransaction()\n         // banned when retransmitted, hence the check for !tx.vin.empty()\n         if (!tx.IsCoinBase() && !tx.vin.empty())\n             if (tx.GetDepthInMainChain() == 0)\n-                RelayTransaction((CTransaction)tx, tx.GetHash());\n+                if (!tx.IsExpired((unsigned int)GetAdjustedTime() + 86400))\n+                    RelayTransaction((CTransaction)tx, tx.GetHash());\n     }\n     if (!IsCoinBase())\n     {\n-        if (GetDepthInMainChain() == 0) {\n+        if (GetDepthInMainChain() == 0 && !fExpired && !IsExpired((unsigned int)GetAdjustedTime() + 86400)) {\n             uint256 hash = GetHash();\n             LogPrintf(\"Relaying wtx %s\\n\", hash.ToString().c_str());\n             RelayTransaction((CTransaction)*this, hash);\n@@ -999,7 +1074,8 @@ int64_t CWallet::GetUnconfirmedBalance() const\n         {\n             const CWalletTx* pcoin = &(*it).second;\n             if (!IsFinalTx(*pcoin) || !pcoin->IsConfirmed())\n-                nTotal += pcoin->GetAvailableCredit();\n+                if (!pcoin->fExpired)\n+                    nTotal += pcoin->GetAvailableCredit();\n         }\n     }\n     return nTotal;\n@@ -1030,7 +1106,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n         {\n             const CWalletTx* pcoin = &(*it).second;\n \n-            if (!IsFinalTx(*pcoin))\n+            if (!IsFinalTx(*pcoin) || pcoin->fExpired)\n                 continue;\n \n             if (fOnlyConfirmed && !pcoin->IsConfirmed())\n@@ -1344,6 +1420,19 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)\n                     wtxNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second));\n \n+                // Timestamp for transaction expiration\n+                if (fTimestampTransactions && !wtxNew.vin.empty())\n+                {\n+                    // check if system clock is more than 12 hours in the past\n+                    if ((unsigned int)GetAdjustedTime() + 43200 < ((chainActive.Tip()) ? chainActive.Tip()->nTime : 0))\n+                    {\n+                        strFailReason = _(\"Your computers date and time seem to be wrong. Please fix your system clock!\");\n+                        return false;\n+                    }\n+\n+                    wtxNew.vin[0].nSequence = (unsigned int)GetAdjustedTime();\n+                }\n+\n                 // Sign\n                 int nIn = 0;\n                 BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins)"
      },
      {
        "sha": "0017c8f4e27a0458aba8863428184c133ee49d34",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc2d515faf2b6459c0ee98de5cbc3149ff5970d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=bdc2d515faf2b6459c0ee98de5cbc3149ff5970d",
        "patch": "@@ -25,6 +25,7 @@\n \n // Settings\n extern int64_t nTransactionFee;\n+extern bool fTimestampTransactions;\n \n class CAccountingEntry;\n class CCoinControl;\n@@ -307,6 +308,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nChange;\n     }\n+    void SetBestChain(CBlockIndex* pindexNew, bool fIsInitialDownload);\n     void SetBestChain(const CBlockLocator& loc);\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n@@ -425,6 +427,7 @@ class CWalletTx : public CMerkleTx\n     std::string strFromAccount;\n     std::vector<char> vfSpent; // which outputs are already spent\n     int64_t nOrderPos;  // position in ordered transaction list\n+    bool fExpired;\n \n     // memory only\n     mutable bool fDebitCached;\n@@ -481,6 +484,7 @@ class CWalletTx : public CMerkleTx\n         nAvailableCreditCached = 0;\n         nChangeCached = 0;\n         nOrderPos = -1;\n+        fExpired = false;\n     }\n \n     IMPLEMENT_SERIALIZE\n@@ -507,6 +511,8 @@ class CWalletTx : public CMerkleTx\n \n             if (nTimeSmart)\n                 pthis->mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n+\n+            pthis->mapValue[\"expired\"] = (fExpired ? '1' : '0');\n         }\n \n         nSerSize += SerReadWrite(s, *(CMerkleTx*)this, nType, nVersion,ser_action);\n@@ -531,13 +537,16 @@ class CWalletTx : public CMerkleTx\n             ReadOrderPos(pthis->nOrderPos, pthis->mapValue);\n \n             pthis->nTimeSmart = mapValue.count(\"timesmart\") ? (unsigned int)atoi64(pthis->mapValue[\"timesmart\"]) : 0;\n+\n+            pthis->fExpired = (mapValue.count(\"expired\") && pthis->mapValue[\"expired\"] == \"1\");\n         }\n \n         pthis->mapValue.erase(\"fromaccount\");\n         pthis->mapValue.erase(\"version\");\n         pthis->mapValue.erase(\"spent\");\n         pthis->mapValue.erase(\"n\");\n         pthis->mapValue.erase(\"timesmart\");\n+        pthis->mapValue.erase(\"expired\");\n     )\n \n     // marks certain txout's as spent\n@@ -587,6 +596,18 @@ class CWalletTx : public CMerkleTx\n         }\n     }\n \n+    void MarkUnspent(unsigned int nOut)\n+    {\n+        if (nOut >= vout.size())\n+            throw std::runtime_error(\"CWalletTx::MarkUnspent() : nOut out of range\");\n+        vfSpent.resize(vout.size());\n+        if (vfSpent[nOut])\n+        {\n+            vfSpent[nOut] = false;\n+            fAvailableCreditCached = false;\n+        }\n+    }\n+\n     bool IsSpent(unsigned int nOut) const\n     {\n         if (nOut >= vout.size())\n@@ -691,6 +712,8 @@ class CWalletTx : public CMerkleTx\n             return true;\n         if (!IsFromMe()) // using wtx's cached debit\n             return false;\n+        if (fExpired)\n+            return false;\n \n         // If no confirmations but it's from us, we can still\n         // consider it confirmed if all dependencies are confirmed\n@@ -708,6 +731,13 @@ class CWalletTx : public CMerkleTx\n                 continue;\n             if (!pwallet->IsFromMe(*ptx))\n                 return false;\n+            map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(ptx->GetHash());\n+            if (mi != pwallet->mapWallet.end())\n+            {\n+                const CWalletTx& wtx = (*mi).second;\n+                if (wtx.fExpired)\n+                    return false;\n+            }\n \n             if (mapPrev.empty())\n             {"
      }
    ]
  }
]