[
  {
    "sha": "fa2198328e4650e11e0245c0fd09346815441e58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTIxOTgzMjhlNDY1MGUxMWUwMjQ1YzBmZDA5MzQ2ODE1NDQxZTU4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-25T16:34:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-25T16:29:10Z"
      },
      "message": "qa: Style-only fixes in touched files",
      "tree": {
        "sha": "ea5b46935d36e5a8a90f945909abb5cce745237a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea5b46935d36e5a8a90f945909abb5cce745237a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2198328e4650e11e0245c0fd09346815441e58",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcSzlWAAoJEM4rdWl+aaVIzH8MAJMPr0cp+UdcjHWudg+lDsV/\nRN/jG8B2C7Ik58xcoJKvNyP0NlwUio2nDAQPHWvHda0pW8WVNwncUS1qReJ3stOX\nlzL2jUf+S6xOz9FR+u+TGJDMYe69wHWH9vsEr+BoEh6N2pV11ecSea5jgpqKlnaG\ntknDqSVji3jahGZ1LcIGh0i4QK31Y+K5PEOS1Lhmnz6nz/WrO9AxS2zj9AF1HQBR\n/zhLbnzZnwFsoPfKc/iX6G8xkkmdbUWviwiGo5NcXk9g7MzbGPv35569tLY+Hl/P\n/tEW2Rf2yS+6ghITGv1ziLkFM9SARSV3UWAcOQEWiVPzacGu76xLxlbwcomjV4t9\nMzBDNL5P6VDy4bAAzKQYFtEgxEZNyDGswyGLHJsVisXJw0NOxc7004+bHtGdI4Lt\nFqiQMXm/HVsA/mW/KEl1ZpKd6RTBrcPSdU4LOEYdEJmuif+kvWbQblSzTlx9wX1D\nD2AA7LOEDgMMdm3cpsXdFpppziaK99wHje3Emhgr7g==\n=NJ2c\n-----END PGP SIGNATURE-----",
        "payload": "tree ea5b46935d36e5a8a90f945909abb5cce745237a\nparent 003a47f804b1c66661fbe9a3ccef431d5e300282\nauthor MarcoFalke <falke.marco@gmail.com> 1548434079 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1548433750 -0500\n\nqa: Style-only fixes in touched files\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2198328e4650e11e0245c0fd09346815441e58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2198328e4650e11e0245c0fd09346815441e58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2198328e4650e11e0245c0fd09346815441e58/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "003a47f804b1c66661fbe9a3ccef431d5e300282",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003a47f804b1c66661fbe9a3ccef431d5e300282",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/003a47f804b1c66661fbe9a3ccef431d5e300282"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 29,
      "deletions": 18
    },
    "files": [
      {
        "sha": "198022607f67099d130a6e96b3cfe68801477c13",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 21,
        "deletions": 12,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2198328e4650e11e0245c0fd09346815441e58/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2198328e4650e11e0245c0fd09346815441e58/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fa2198328e4650e11e0245c0fd09346815441e58",
        "patch": "@@ -13,7 +13,15 @@\n from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, disconnect_nodes, sync_blocks, sync_mempools\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    connect_nodes,\n+    disconnect_nodes,\n+    sync_blocks,\n+    sync_mempools,\n+)\n+\n \n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -40,7 +48,7 @@ def run_test(self):\n \n         sync_blocks(self.nodes)\n         newbalance = self.nodes[0].getbalance()\n-        assert(balance - newbalance < Decimal(\"0.001\")) #no more than fees lost\n+        assert balance - newbalance < Decimal(\"0.001\")  #no more than fees lost\n         balance = newbalance\n \n         # Disconnect nodes so node0's transactions don't get into node1's mempool\n@@ -51,10 +59,10 @@ def run_test(self):\n         nB = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txB, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n         nC = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txC, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n \n-        inputs =[]\n+        inputs = []\n         # spend 10btc outputs from txA and txB\n-        inputs.append({\"txid\":txA, \"vout\":nA})\n-        inputs.append({\"txid\":txB, \"vout\":nB})\n+        inputs.append({\"txid\": txA, \"vout\": nA})\n+        inputs.append({\"txid\": txB, \"vout\": nB})\n         outputs = {}\n \n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"14.99998\")\n@@ -67,17 +75,17 @@ def run_test(self):\n \n         #Create a child tx spending AB1 and C\n         inputs = []\n-        inputs.append({\"txid\":txAB1, \"vout\":nAB})\n-        inputs.append({\"txid\":txC, \"vout\":nC})\n+        inputs.append({\"txid\": txAB1, \"vout\": nAB})\n+        inputs.append({\"txid\": txC, \"vout\": nC})\n         outputs = {}\n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"24.9996\")\n         signed2 = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txABC2 = self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n \n         # Create a child tx spending ABC2\n         signed3_change = Decimal(\"24.999\")\n-        inputs = [ {\"txid\":txABC2, \"vout\":0} ]\n-        outputs = { self.nodes[0].getnewaddress(): signed3_change }\n+        inputs = [{\"txid\": txABC2, \"vout\": 0}]\n+        outputs = {self.nodes[0].getnewaddress(): signed3_change}\n         signed3 = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         # note tx is never directly referenced, only abandoned as a child of the above\n         self.nodes[0].sendrawtransaction(signed3[\"hex\"])\n@@ -105,7 +113,7 @@ def run_test(self):\n         unconfbalance = self.nodes[0].getunconfirmedbalance() + self.nodes[0].getbalance()\n         assert_equal(unconfbalance, newbalance)\n         # Also shouldn't show up in listunspent\n-        assert(not txABC2 in [utxo[\"txid\"] for utxo in self.nodes[0].listunspent(0)])\n+        assert not txABC2 in [utxo[\"txid\"] for utxo in self.nodes[0].listunspent(0)]\n         balance = newbalance\n \n         # Abandon original transaction and verify inputs are available again\n@@ -145,8 +153,8 @@ def run_test(self):\n \n         # Create a double spend of AB1 by spending again from only A's 10 output\n         # Mine double spend from node 1\n-        inputs =[]\n-        inputs.append({\"txid\":txA, \"vout\":nA})\n+        inputs = []\n+        inputs.append({\"txid\": txA, \"vout\": nA})\n         outputs = {}\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n@@ -172,5 +180,6 @@ def run_test(self):\n         self.log.info(\"conflicted has not resumed causing its inputs to be seen as spent.  See Issue #7315\")\n         self.log.info(str(balance) + \" -> \" + str(newbalance) + \" ?\")\n \n+\n if __name__ == '__main__':\n     AbandonConflictTest().main()"
      },
      {
        "sha": "d8be21906b2c6b78ee31659d335ac480f70a5691",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2198328e4650e11e0245c0fd09346815441e58/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2198328e4650e11e0245c0fd09346815441e58/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fa2198328e4650e11e0245c0fd09346815441e58",
        "patch": "@@ -19,6 +19,7 @@\n     wait_until,\n )\n \n+\n class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n@@ -237,7 +238,7 @@ def run_test(self):\n         assert_equal(set(relayed), {txid1, txid2})\n         sync_mempools(self.nodes)\n \n-        assert(txid1 in self.nodes[3].getrawmempool())\n+        assert txid1 in self.nodes[3].getrawmempool()\n \n         # check if we can list zero value tx as available coins\n         # 1. create raw_tx\n@@ -264,7 +265,7 @@ def run_test(self):\n             if uTx['txid'] == zero_value_txid:\n                 found = True\n                 assert_equal(uTx['amount'], Decimal('0'))\n-        assert(found)\n+        assert found\n \n         # do some -walletbroadcast tests\n         self.stop_nodes()\n@@ -341,7 +342,7 @@ def run_test(self):\n         self.nodes[1].importaddress(address_to_import)\n \n         # 3. Validate that the imported address is watch-only on node1\n-        assert(self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"])\n+        assert self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"]\n \n         # 4. Check that the unspents after import are not spendable\n         assert_array_result(self.nodes[1].listunspent(),\n@@ -383,7 +384,7 @@ def run_test(self):\n                 addr = self.nodes[0].getnewaddress()\n                 self.nodes[0].setlabel(addr, label)\n                 assert_equal(self.nodes[0].getaddressinfo(addr)['label'], label)\n-                assert(label in self.nodes[0].listlabels())\n+                assert label in self.nodes[0].listlabels()\n         self.nodes[0].rpc.ensure_ascii = True  # restore to default\n \n         # maintenance tests\n@@ -442,8 +443,8 @@ def run_test(self):\n         # Without walletrejectlongchains, we will still generate a txid\n         # The tx will be stored in the wallet but not accepted to the mempool\n         extra_txid = self.nodes[0].sendtoaddress(sending_addr, Decimal('0.0001'))\n-        assert(extra_txid not in self.nodes[0].getrawmempool())\n-        assert(extra_txid in [tx[\"txid\"] for tx in self.nodes[0].listtransactions()])\n+        assert extra_txid not in self.nodes[0].getrawmempool()\n+        assert extra_txid in [tx[\"txid\"] for tx in self.nodes[0].listtransactions()]\n         self.nodes[0].abandontransaction(extra_txid)\n         total_txs = len(self.nodes[0].listtransactions(\"*\", 99999))\n \n@@ -491,5 +492,6 @@ def run_test(self):\n         self.nodes[0].setlabel(change, 'foobar')\n         assert_equal(self.nodes[0].getaddressinfo(change)['ischange'], False)\n \n+\n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  },
  {
    "sha": "fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUyNzhhNDE5NmNmMGI1NjBmNWVlYjFmYjVmOWM1ZTk4MjE5ZWM0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-24T23:52:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-27T03:43:56Z"
      },
      "message": "qa: Use wallet to retrieve raw transactions",
      "tree": {
        "sha": "d725a4ceeff34a77ec986319dd9dab2cd47b8dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d725a4ceeff34a77ec986319dd9dab2cd47b8dce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcTSj8AAoJEM4rdWl+aaVIWjEMAJ2IFWg71FOnD5buHzQGNYu5\nQIlFj2WJRNba1qCIRrGionXl1ZGWW0TG/c5Y/ECUmddtYJaKot2iqZdarrZa2ok1\n0AZ5m5ZDBXbfvlHId3Z3j6z6zx61JxGliH6iMu6FASglRE3gJXrHkl/WHqleqvWo\nTtoM36v9zIbewcG+PChUIbD2esqudw9EUBoEinYWR04lbT8vsppVLVfmjzLUcUOc\n0QdoE1d2GoZ2d1Jt+uFS7mtswV2ccQt6IwdNYAup0tchRfp12n8DtpqyJSSdCTYi\n4X+PN0kXYXy4QYFvhElICsbHSV4amHSCkzkWRi598SnieLtXSFpCm0hPF1s/AwiM\nxCNJkMGMoBrmjhYK8Y8DROkjmY0ex/Trs6CyzV6xYMGDEwwmMV8O20y38Zas4fpM\ncxBUlqla68uGZaybo+lbWbnEvmxkg3g2LGSU5R/FbVqKpZ0CkHxntIGPtnL5BB3/\noQ6W6KLwqpQ7yXMkyN74ZG0mhJZcXGx5hEyPWHhQZQ==\n=G4wp\n-----END PGP SIGNATURE-----",
        "payload": "tree d725a4ceeff34a77ec986319dd9dab2cd47b8dce\nparent fa2198328e4650e11e0245c0fd09346815441e58\nauthor MarcoFalke <falke.marco@gmail.com> 1548373949 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1548560636 -0500\n\nqa: Use wallet to retrieve raw transactions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa2198328e4650e11e0245c0fd09346815441e58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2198328e4650e11e0245c0fd09346815441e58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2198328e4650e11e0245c0fd09346815441e58"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "b0b151d2d61b14a41c0f17bc5493573fc03a004a",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the abandontransaction RPC.\n@@ -55,9 +55,9 @@ def run_test(self):\n         disconnect_nodes(self.nodes[0], 1)\n \n         # Identify the 10btc outputs\n-        nA = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txA, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n-        nB = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txB, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n-        nC = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txC, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"10\"))\n+        nA = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(txA)[\"details\"] if tx_out[\"amount\"] == Decimal(\"10\"))\n+        nB = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(txB)[\"details\"] if tx_out[\"amount\"] == Decimal(\"10\"))\n+        nC = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(txC)[\"details\"] if tx_out[\"amount\"] == Decimal(\"10\"))\n \n         inputs = []\n         # spend 10btc outputs from txA and txB\n@@ -71,7 +71,7 @@ def run_test(self):\n         txAB1 = self.nodes[0].sendrawtransaction(signed[\"hex\"])\n \n         # Identify the 14.99998btc output\n-        nAB = next(i for i, vout in enumerate(self.nodes[0].getrawtransaction(txAB1, 1)[\"vout\"]) if vout[\"value\"] == Decimal(\"14.99998\"))\n+        nAB = next(tx_out[\"vout\"] for tx_out in self.nodes[0].gettransaction(txAB1)[\"details\"] if tx_out[\"amount\"] == Decimal(\"14.99998\"))\n \n         #Create a child tx spending AB1 and C\n         inputs = []"
      },
      {
        "sha": "107fec8cc02e1b4e48329779d97908f03bbcf486",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fa5278a4196cf0b560f5eeb1fb5f9c5e98219ec4",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet.\"\"\"\n@@ -195,7 +195,7 @@ def run_test(self):\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all([self.nodes[0:3]])\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, self.get_vsize(self.nodes[2].getrawtransaction(txid)))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n@@ -204,14 +204,14 @@ def run_test(self):\n         self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, self.get_vsize(self.nodes[2].getrawtransaction(txid)))\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n         self.sync_all([self.nodes[0:3]])\n         node_0_bal += Decimal('10')\n-        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].getrawtransaction(txid)))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n@@ -220,7 +220,7 @@ def run_test(self):\n         self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n-        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].getrawtransaction(txid)))\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n         # Test ResendWalletTransactions:\n         # Create a couple of transactions, then start up a fourth\n@@ -481,7 +481,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         destination = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(destination, 0.123)\n-        tx = self.nodes[0].decoderawtransaction(self.nodes[0].getrawtransaction(txid))\n+        tx = self.nodes[0].decoderawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n         output_addresses = [vout['scriptPubKey']['addresses'][0] for vout in tx[\"vout\"]]\n         assert len(output_addresses) > 1\n         for address in output_addresses:"
      }
    ]
  }
]