[
  {
    "sha": "22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmRmZDczNTk4NjMyMTdlYjhjYWVmNzUwODRjZmE4ZmE4ZTFkOGZi",
    "commit": {
      "author": {
        "name": "coderrr",
        "email": "coderrr.contact@gmail.com",
        "date": "2012-08-01T16:48:42Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2012-08-23T19:55:42Z"
      },
      "message": "Add address groupings RPC from the coincontrol patches.\n\nSigned-off-by: Gregory Maxwell <greg@xiph.org>",
      "tree": {
        "sha": "5ed884dcea256b01a5d9bd140ddac3377f6d31ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ed884dcea256b01a5d9bd140ddac3377f6d31ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/comments",
    "author": null,
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47753fa369f15274718779ffea1e2f151aa8307d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47753fa369f15274718779ffea1e2f151aa8307d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47753fa369f15274718779ffea1e2f151aa8307d"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 163,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ebde28fe046107ffa275b7aaa6d509bd4a085226",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
        "patch": "@@ -231,6 +231,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getblockhash\",           &getblockhash,           false,  false },\n     { \"gettransaction\",         &gettransaction,         false,  false },\n     { \"listtransactions\",       &listtransactions,       false,  false },\n+    { \"listaddressgroupings\",   &listaddressgroupings,   false,  false },\n     { \"signmessage\",            &signmessage,            false,  false },\n     { \"verifymessage\",          &verifymessage,          false,  false },\n     { \"getwork\",                &getwork,                true,   false },"
      },
      {
        "sha": "94446c36bb1907631e0d53fbe73e2429b2a3b1d8",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
        "patch": "@@ -114,6 +114,7 @@ extern json_spirit::Value addmultisigaddress(const json_spirit::Array& params, b\n extern json_spirit::Value listreceivedbyaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listreceivedbyaccount(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listtransactions(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listaddressgroupings(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listaccounts(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value listsinceblock(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gettransaction(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "519e353138b25a0ab6917faf3994d5547f4ed6ca",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
        "patch": "@@ -274,6 +274,33 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n+Value listaddressgroupings(const Array& params, bool fHelp)\n+{\n+    if (fHelp)\n+        throw runtime_error(\"listaddressgroupings\");\n+\n+    Array jsonGroupings;\n+    map<string, int64> balances = pwalletMain->GetAddressBalances();\n+    BOOST_FOREACH(set<string> grouping, pwalletMain->GetAddressGroupings())\n+    {\n+        Array jsonGrouping;\n+        BOOST_FOREACH(string address, grouping)\n+        {\n+            Array addressInfo;\n+            addressInfo.push_back(address);\n+            addressInfo.push_back(ValueFromAmount(balances[address]));\n+            {\n+                LOCK(pwalletMain->cs_wallet);\n+                if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n+                    addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second);\n+            }\n+            jsonGrouping.push_back(addressInfo);\n+        }\n+        jsonGroupings.push_back(jsonGrouping);\n+    }\n+    return jsonGroupings;\n+}\n+\n Value signmessage(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)"
      },
      {
        "sha": "87792e50ee02772192e85cc49ebdaf3f8ca07bd5",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
        "patch": "@@ -1620,6 +1620,129 @@ int64 CWallet::GetOldestKeyPoolTime()\n     return keypool.nTime;\n }\n \n+std::map<std::string, int64> CWallet::GetAddressBalances()\n+{\n+    map<string, int64> balances;\n+\n+    {\n+        LOCK(cs_wallet);\n+        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+        {\n+            CWalletTx *pcoin = &walletEntry.second;\n+\n+            if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n+                continue;\n+\n+            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+                continue;\n+\n+            int nDepth = pcoin->GetDepthInMainChain();\n+            if (nDepth < (pcoin->IsFromMe() ? 0 : 1))\n+                continue;\n+\n+            for (int i = 0; i < pcoin->vout.size(); i++)\n+            {\n+                if (!IsMine(pcoin->vout[i]))\n+                    continue;\n+\n+                int64 n = pcoin->IsSpent(i) ? 0 : pcoin->vout[i].nValue;\n+\n+                string addr = pcoin->GetAddressOfTxOut(i);\n+                if (!balances.count(addr))\n+                    balances[addr] = 0;\n+                balances[addr] += n;\n+            }\n+        }\n+    }\n+\n+    return balances;\n+}\n+\n+set< set<string> > CWallet::GetAddressGroupings()\n+{\n+    set< set<string> > groupings;\n+    set<string> grouping;\n+\n+    BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n+    {\n+        CWalletTx *pcoin = &walletEntry.second;\n+\n+        if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n+            continue;\n+\n+        if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+            continue;\n+\n+        int nDepth = pcoin->GetDepthInMainChain();\n+        if (nDepth < (pcoin->IsFromMe() ? 0 : 1))\n+            continue;\n+\n+        if (pcoin->vin.size() > 0 && IsMine(pcoin->vin[0]))\n+        {\n+            // group all input addresses with each other\n+            BOOST_FOREACH(CTxIn txin, pcoin->vin)\n+                grouping.insert(mapWallet[txin.prevout.hash].GetAddressOfTxOut(txin.prevout.n));\n+\n+            // group change with input addresses\n+            BOOST_FOREACH(CTxOut txout, pcoin->vout)\n+                if (IsChange(txout))\n+                {\n+                    CWalletTx tx = mapWallet[pcoin->vin[0].prevout.hash];\n+                    string addr = tx.GetAddressOfTxOut(pcoin->vin[0].prevout.n);\n+                    CTxDestination txoutAddr;\n+                    ExtractDestination(txout.scriptPubKey, txoutAddr);\n+                    grouping.insert(CBitcoinAddress(txoutAddr).ToString());\n+                }\n+            groupings.insert(grouping);\n+            grouping.clear();\n+        }\n+\n+        // group lone addrs by themselves\n+        for (int i = 0; i < pcoin->vout.size(); i++)\n+            if (IsMine(pcoin->vout[i]))\n+            {\n+                grouping.insert(pcoin->GetAddressOfTxOut(i));\n+                groupings.insert(grouping);\n+                grouping.clear();\n+            }\n+    }\n+\n+    set< set<string>* > uniqueGroupings; // a set of pointers to groups of addresses\n+    map< string, set<string>* > setmap;  // map addresses to the unique group containing it\n+    BOOST_FOREACH(set<string> grouping, groupings)\n+    {\n+        // make a set of all the groups hit by this new group\n+        set< set<string>* > hits;\n+        map< string, set<string>* >::iterator it;\n+        BOOST_FOREACH(string address, grouping)\n+            if ((it = setmap.find(address)) != setmap.end())\n+                hits.insert((*it).second);\n+\n+        // merge all hit groups into a new single group and delete old groups\n+        set<string>* merged = new set<string>(grouping);\n+        BOOST_FOREACH(set<string>* hit, hits)\n+        {\n+            merged->insert(hit->begin(), hit->end());\n+            uniqueGroupings.erase(hit);\n+            delete hit;\n+        }\n+        uniqueGroupings.insert(merged);\n+\n+        // update setmap\n+        BOOST_FOREACH(string element, *merged)\n+            setmap[element] = merged;\n+    }\n+\n+    set< set<string> > ret;\n+    BOOST_FOREACH(set<string>* uniqueGrouping, uniqueGroupings)\n+    {\n+        ret.insert(*uniqueGrouping);\n+        delete uniqueGrouping;\n+    }\n+\n+    return ret;\n+}\n+\n CPubKey CReserveKey::GetReservedKey()\n {\n     if (nIndex == -1)"
      },
      {
        "sha": "5f6a6a4444d145d5e9f00414eeb2f77e05a6480a",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22dfd7359863217eb8caef75084cfa8fa8e1d8fb/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <stdlib.h>\n \n+#include \"base58.h\"\n #include \"main.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -176,6 +177,9 @@ class CWallet : public CCryptoKeyStore\n     int64 GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress);\n \n+    std::set< std::set<std::string> > GetAddressGroupings();\n+    std::map<std::string, int64> GetAddressBalances();\n+\n     bool IsMine(const CTxIn& txin) const;\n     int64 GetDebit(const CTxIn& txin) const;\n     bool IsMine(const CTxOut& txout) const\n@@ -643,6 +647,13 @@ class CWalletTx : public CMerkleTx\n         return true;\n     }\n \n+    std::string GetAddressOfTxOut(int n)\n+    {\n+        CTxDestination addr;\n+        ExtractDestination(vout[n].scriptPubKey, addr);\n+        return CBitcoinAddress(addr).ToString();\n+    }\n+\n     bool WriteToDisk();\n \n     int64 GetTxTime() const;"
      }
    ]
  },
  {
    "sha": "92735bca313768dbc49789566c47e3a68ecef59a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjczNWJjYTMxMzc2OGRiYzQ5Nzg5NTY2YzQ3ZTNhNjhlY2VmNTlh",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2012-08-06T17:02:48Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2012-08-23T19:55:50Z"
      },
      "message": "Add txout address filtering to listunspent.\n\nThis applies on top of the coincontrol listaddressgroupings patch\nand makes finding eligible outputs from the groups returned\nby listaddressgroupings possible.",
      "tree": {
        "sha": "bc5f0fa10286a0a9122296441c92126648e2c6fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc5f0fa10286a0a9122296441c92126648e2c6fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92735bca313768dbc49789566c47e3a68ecef59a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92735bca313768dbc49789566c47e3a68ecef59a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92735bca313768dbc49789566c47e3a68ecef59a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92735bca313768dbc49789566c47e3a68ecef59a/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22dfd7359863217eb8caef75084cfa8fa8e1d8fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22dfd7359863217eb8caef75084cfa8fa8e1d8fb"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 25,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c144f5fbad9ff9fd723ca58824964a9f0b7dec7d",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92735bca313768dbc49789566c47e3a68ecef59a/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92735bca313768dbc49789566c47e3a68ecef59a/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=92735bca313768dbc49789566c47e3a68ecef59a",
        "patch": "@@ -1140,6 +1140,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"addmultisigaddress\"     && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"listunspent\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"listunspent\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n+    if (strMethod == \"listunspent\"            && n > 2) ConvertTo<Array>(params[2]);\n     if (strMethod == \"getrawtransaction\"      && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"createrawtransaction\"   && n > 0) ConvertTo<Array>(params[0]);\n     if (strMethod == \"createrawtransaction\"   && n > 1) ConvertTo<Object>(params[1]);"
      },
      {
        "sha": "d6fb30cac6c031c91c5d037db86ef474bb72175e",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 4,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92735bca313768dbc49789566c47e3a68ecef59a/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92735bca313768dbc49789566c47e3a68ecef59a/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=92735bca313768dbc49789566c47e3a68ecef59a",
        "patch": "@@ -138,24 +138,40 @@ Value getrawtransaction(const Array& params, bool fHelp)\n \n Value listunspent(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() > 2)\n+    if (fHelp || params.size() > 3)\n         throw runtime_error(\n-            \"listunspent [minconf=1] [maxconf=999999]\\n\"\n+            \"listunspent [minconf=1] [maxconf=9999999] ['addr1','addr2',...]\\n\"\n             \"Returns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n+            \"Optionally filtered to only include txouts paid to specified addresses.\\n\"\n             \"Results are an array of Objects, each of which has:\\n\"\n             \"{txid, vout, scriptPubKey, amount, confirmations}\");\n \n-    RPCTypeCheck(params, list_of(int_type)(int_type));\n+    RPCTypeCheck(params, list_of(int_type)(int_type)(array_type));\n \n     int nMinDepth = 1;\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n \n-    int nMaxDepth = 999999;\n+    int nMaxDepth = 9999999;\n     if (params.size() > 1)\n         nMaxDepth = params[1].get_int();\n \n+    set<CBitcoinAddress> setAddress;\n+    if (params.size() > 2)\n+    {\n+        Array inputs = params[2].get_array();\n+        BOOST_FOREACH(Value& input, inputs)\n+        {\n+            CBitcoinAddress address(input.get_str());\n+            if (!address.IsValid())\n+                throw JSONRPCError(-5, string(\"Invalid Bitcoin address:\")+input.get_str());\n+            if (setAddress.count(address))\n+                throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n+           setAddress.insert(address);\n+        }\n+    }\n+\n     Array results;\n     vector<COutput> vecOutputs;\n     pwalletMain->AvailableCoins(vecOutputs, false);\n@@ -164,6 +180,9 @@ Value listunspent(const Array& params, bool fHelp)\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;\n \n+        if (setAddress.size() && !setAddress.count(out.tx->GetAddressOfTxOut(out.i)))\n+            continue;\n+\n         int64 nValue = out.tx->vout[out.i].nValue;\n         const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n         Object entry;"
      },
      {
        "sha": "f02c1467b51a7e3fc45516b8380d7fdf63073fdd",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92735bca313768dbc49789566c47e3a68ecef59a/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92735bca313768dbc49789566c47e3a68ecef59a/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=92735bca313768dbc49789566c47e3a68ecef59a",
        "patch": "@@ -647,7 +647,7 @@ class CWalletTx : public CMerkleTx\n         return true;\n     }\n \n-    std::string GetAddressOfTxOut(int n)\n+    std::string GetAddressOfTxOut(int n) const\n     {\n         CTxDestination addr;\n         ExtractDestination(vout[n].scriptPubKey, addr);"
      }
    ]
  },
  {
    "sha": "b1093efa833376a7883deb0cbcddd0aed364de84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTA5M2VmYTgzMzM3NmE3ODgzZGViMGNiY2RkZDBhZWQzNjRkZTg0",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2012-08-20T17:43:33Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2012-08-24T07:28:45Z"
      },
      "message": "Change CWallet addressgrouping to use CTxDestination instead of strings.\n\nThis is cleanup for the listaddressgroupings code. Also add some\nreal help text.",
      "tree": {
        "sha": "2c63671503ea5c8b3f53a6701d54d6a25cbae910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c63671503ea5c8b3f53a6701d54d6a25cbae910"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1093efa833376a7883deb0cbcddd0aed364de84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1093efa833376a7883deb0cbcddd0aed364de84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1093efa833376a7883deb0cbcddd0aed364de84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1093efa833376a7883deb0cbcddd0aed364de84/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92735bca313768dbc49789566c47e3a68ecef59a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92735bca313768dbc49789566c47e3a68ecef59a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92735bca313768dbc49789566c47e3a68ecef59a"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 57,
      "deletions": 54
    },
    "files": [
      {
        "sha": "2b6f4f7a4bd3e48b88ef04fcd34b1185650d59a5",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1093efa833376a7883deb0cbcddd0aed364de84/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1093efa833376a7883deb0cbcddd0aed364de84/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=b1093efa833376a7883deb0cbcddd0aed364de84",
        "patch": "@@ -140,7 +140,7 @@ Value listunspent(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 3)\n         throw runtime_error(\n-            \"listunspent [minconf=1] [maxconf=9999999] ['addr1','addr2',...]\\n\"\n+            \"listunspent [minconf=1] [maxconf=9999999]  [\\\"address\\\",...]\\n\"\n             \"Returns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n             \"Optionally filtered to only include txouts paid to specified addresses.\\n\"\n@@ -165,7 +165,7 @@ Value listunspent(const Array& params, bool fHelp)\n         {\n             CBitcoinAddress address(input.get_str());\n             if (!address.IsValid())\n-                throw JSONRPCError(-5, string(\"Invalid Bitcoin address:\")+input.get_str());\n+                throw JSONRPCError(-5, string(\"Invalid Bitcoin address: \")+input.get_str());\n             if (setAddress.count(address))\n                 throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+input.get_str());\n            setAddress.insert(address);\n@@ -180,8 +180,15 @@ Value listunspent(const Array& params, bool fHelp)\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;\n \n-        if (setAddress.size() && !setAddress.count(out.tx->GetAddressOfTxOut(out.i)))\n-            continue;\n+        if(setAddress.size())\n+        {\n+            CTxDestination address;\n+            if(!ExtractDestination(out.tx->vout[out.i].scriptPubKey, address))\n+                continue;\n+\n+            if (!setAddress.count(address))\n+                continue;\n+        }\n \n         int64 nValue = out.tx->vout[out.i].nValue;\n         const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n@@ -243,7 +250,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     {\n         CBitcoinAddress address(s.name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(-5, string(\"Invalid Bitcoin address:\")+s.name_);\n+            throw JSONRPCError(-5, string(\"Invalid Bitcoin address: \")+s.name_);\n \n         if (setAddress.count(address))\n             throw JSONRPCError(-8, string(\"Invalid parameter, duplicated address: \")+s.name_);"
      },
      {
        "sha": "a32eb7801fb0cf74b1c20a67c62b9b63d3688a65",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1093efa833376a7883deb0cbcddd0aed364de84/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1093efa833376a7883deb0cbcddd0aed364de84/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=b1093efa833376a7883deb0cbcddd0aed364de84",
        "patch": "@@ -277,17 +277,21 @@ Value sendtoaddress(const Array& params, bool fHelp)\n Value listaddressgroupings(const Array& params, bool fHelp)\n {\n     if (fHelp)\n-        throw runtime_error(\"listaddressgroupings\");\n+        throw runtime_error(\n+            \"listaddressgroupings\\n\"\n+            \"Lists groups of addresses which have had their common ownership\\n\"\n+            \"made public by common use as inputs or as the resulting change\\n\"\n+            \"in past transactions\");\n \n     Array jsonGroupings;\n-    map<string, int64> balances = pwalletMain->GetAddressBalances();\n-    BOOST_FOREACH(set<string> grouping, pwalletMain->GetAddressGroupings())\n+    map<CTxDestination, int64> balances = pwalletMain->GetAddressBalances();\n+    BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n     {\n         Array jsonGrouping;\n-        BOOST_FOREACH(string address, grouping)\n+        BOOST_FOREACH(CTxDestination address, grouping)\n         {\n             Array addressInfo;\n-            addressInfo.push_back(address);\n+            addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n                 LOCK(pwalletMain->cs_wallet);"
      },
      {
        "sha": "a5a4e7e431e1eb945a9cf2092429862ba743181d",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 34,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1093efa833376a7883deb0cbcddd0aed364de84/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1093efa833376a7883deb0cbcddd0aed364de84/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=b1093efa833376a7883deb0cbcddd0aed364de84",
        "patch": "@@ -1620,9 +1620,9 @@ int64 CWallet::GetOldestKeyPoolTime()\n     return keypool.nTime;\n }\n \n-std::map<std::string, int64> CWallet::GetAddressBalances()\n+std::map<CTxDestination, int64> CWallet::GetAddressBalances()\n {\n-    map<string, int64> balances;\n+    map<CTxDestination, int64> balances;\n \n     {\n         LOCK(cs_wallet);\n@@ -1640,14 +1640,16 @@ std::map<std::string, int64> CWallet::GetAddressBalances()\n             if (nDepth < (pcoin->IsFromMe() ? 0 : 1))\n                 continue;\n \n-            for (int i = 0; i < pcoin->vout.size(); i++)\n+            for (unsigned int i = 0; i < pcoin->vout.size(); i++)\n             {\n+                CTxDestination addr;\n                 if (!IsMine(pcoin->vout[i]))\n                     continue;\n+                if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr))\n+                    continue;\n \n                 int64 n = pcoin->IsSpent(i) ? 0 : pcoin->vout[i].nValue;\n \n-                string addr = pcoin->GetAddressOfTxOut(i);\n                 if (!balances.count(addr))\n                     balances[addr] = 0;\n                 balances[addr] += n;\n@@ -1658,69 +1660,67 @@ std::map<std::string, int64> CWallet::GetAddressBalances()\n     return balances;\n }\n \n-set< set<string> > CWallet::GetAddressGroupings()\n+set< set<CTxDestination> > CWallet::GetAddressGroupings()\n {\n-    set< set<string> > groupings;\n-    set<string> grouping;\n+    set< set<CTxDestination> > groupings;\n+    set<CTxDestination> grouping;\n \n     BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet)\n     {\n         CWalletTx *pcoin = &walletEntry.second;\n \n-        if (!pcoin->IsFinal() || !pcoin->IsConfirmed())\n-            continue;\n-\n-        if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n-            continue;\n-\n-        int nDepth = pcoin->GetDepthInMainChain();\n-        if (nDepth < (pcoin->IsFromMe() ? 0 : 1))\n-            continue;\n-\n         if (pcoin->vin.size() > 0 && IsMine(pcoin->vin[0]))\n         {\n             // group all input addresses with each other\n             BOOST_FOREACH(CTxIn txin, pcoin->vin)\n-                grouping.insert(mapWallet[txin.prevout.hash].GetAddressOfTxOut(txin.prevout.n));\n+            {\n+                CTxDestination address;\n+                if(!ExtractDestination(mapWallet[txin.prevout.hash].vout[txin.prevout.n].scriptPubKey, address))\n+                    continue;\n+                grouping.insert(address);\n+            }\n \n             // group change with input addresses\n             BOOST_FOREACH(CTxOut txout, pcoin->vout)\n                 if (IsChange(txout))\n                 {\n                     CWalletTx tx = mapWallet[pcoin->vin[0].prevout.hash];\n-                    string addr = tx.GetAddressOfTxOut(pcoin->vin[0].prevout.n);\n                     CTxDestination txoutAddr;\n-                    ExtractDestination(txout.scriptPubKey, txoutAddr);\n-                    grouping.insert(CBitcoinAddress(txoutAddr).ToString());\n+                    if(!ExtractDestination(txout.scriptPubKey, txoutAddr))\n+                        continue;\n+                    grouping.insert(txoutAddr);\n                 }\n             groupings.insert(grouping);\n             grouping.clear();\n         }\n \n         // group lone addrs by themselves\n-        for (int i = 0; i < pcoin->vout.size(); i++)\n+        for (unsigned int i = 0; i < pcoin->vout.size(); i++)\n             if (IsMine(pcoin->vout[i]))\n             {\n-                grouping.insert(pcoin->GetAddressOfTxOut(i));\n+                CTxDestination address;\n+                if(!ExtractDestination(pcoin->vout[i].scriptPubKey, address))\n+                    continue;\n+                grouping.insert(address);\n                 groupings.insert(grouping);\n                 grouping.clear();\n             }\n     }\n \n-    set< set<string>* > uniqueGroupings; // a set of pointers to groups of addresses\n-    map< string, set<string>* > setmap;  // map addresses to the unique group containing it\n-    BOOST_FOREACH(set<string> grouping, groupings)\n+    set< set<CTxDestination>* > uniqueGroupings; // a set of pointers to groups of addresses\n+    map< CTxDestination, set<CTxDestination>* > setmap;  // map addresses to the unique group containing it\n+    BOOST_FOREACH(set<CTxDestination> grouping, groupings)\n     {\n         // make a set of all the groups hit by this new group\n-        set< set<string>* > hits;\n-        map< string, set<string>* >::iterator it;\n-        BOOST_FOREACH(string address, grouping)\n+        set< set<CTxDestination>* > hits;\n+        map< CTxDestination, set<CTxDestination>* >::iterator it;\n+        BOOST_FOREACH(CTxDestination address, grouping)\n             if ((it = setmap.find(address)) != setmap.end())\n                 hits.insert((*it).second);\n \n         // merge all hit groups into a new single group and delete old groups\n-        set<string>* merged = new set<string>(grouping);\n-        BOOST_FOREACH(set<string>* hit, hits)\n+        set<CTxDestination>* merged = new set<CTxDestination>(grouping);\n+        BOOST_FOREACH(set<CTxDestination>* hit, hits)\n         {\n             merged->insert(hit->begin(), hit->end());\n             uniqueGroupings.erase(hit);\n@@ -1729,12 +1729,12 @@ set< set<string> > CWallet::GetAddressGroupings()\n         uniqueGroupings.insert(merged);\n \n         // update setmap\n-        BOOST_FOREACH(string element, *merged)\n+        BOOST_FOREACH(CTxDestination element, *merged)\n             setmap[element] = merged;\n     }\n \n-    set< set<string> > ret;\n-    BOOST_FOREACH(set<string>* uniqueGrouping, uniqueGroupings)\n+    set< set<CTxDestination> > ret;\n+    BOOST_FOREACH(set<CTxDestination>* uniqueGrouping, uniqueGroupings)\n     {\n         ret.insert(*uniqueGrouping);\n         delete uniqueGrouping;"
      },
      {
        "sha": "428cff7480291f7028f51ed2901fb437f4b815c1",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1093efa833376a7883deb0cbcddd0aed364de84/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1093efa833376a7883deb0cbcddd0aed364de84/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=b1093efa833376a7883deb0cbcddd0aed364de84",
        "patch": "@@ -10,7 +10,6 @@\n \n #include <stdlib.h>\n \n-#include \"base58.h\"\n #include \"main.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -177,8 +176,8 @@ class CWallet : public CCryptoKeyStore\n     int64 GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress);\n \n-    std::set< std::set<std::string> > GetAddressGroupings();\n-    std::map<std::string, int64> GetAddressBalances();\n+    std::set< std::set<CTxDestination> > GetAddressGroupings();\n+    std::map<CTxDestination, int64> GetAddressBalances();\n \n     bool IsMine(const CTxIn& txin) const;\n     int64 GetDebit(const CTxIn& txin) const;\n@@ -647,13 +646,6 @@ class CWalletTx : public CMerkleTx\n         return true;\n     }\n \n-    std::string GetAddressOfTxOut(int n) const\n-    {\n-        CTxDestination addr;\n-        ExtractDestination(vout[n].scriptPubKey, addr);\n-        return CBitcoinAddress(addr).ToString();\n-    }\n-\n     bool WriteToDisk();\n \n     int64 GetTxTime() const;"
      }
    ]
  }
]