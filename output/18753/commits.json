[
  {
    "sha": "fa8b9b5d1f48ad95eecf47ebbd7bf374777fc621",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYThiOWI1ZDFmNDhhZDk1ZWVjZjQ3ZWJiZDdiZjM3NDc3N2ZjNjIx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-23T23:00:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-23T23:01:26Z"
      },
      "message": "test: Fix intermittent failure in wallet_importmulti",
      "tree": {
        "sha": "85d1f62a2953291b9057fd2149848885fe44eb2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85d1f62a2953291b9057fd2149848885fe44eb2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa8b9b5d1f48ad95eecf47ebbd7bf374777fc621",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgqvgv/XiYsjxxMrcI2iW5KKso8ho8uEh/J0Pfu6z4ig8U+R8dHDI6MgiA2Xqbw\neUx635cSNIJFAS3FjeOdkh73EhNg2XDOmcm/JqNGGQUubDHljqpnd6lffKRv/180\nG8OaZPTHCFFnsrp4wh9x9LJ57sFP8c4NUxW3IZq7PfOqH+Mc7mvNtaYetMpvG5St\n+zbArP7NxAYfFSgIltrV+V7Qlne/zRRtplr/1YM8PmJFfdTgp3cf+oMyaasXNAOg\ne/yDh+4g5FQJrmxaoZE6AjNyOLompn6wKMz7HZ6giWuc/Ed6HJmNiVKq30jZl4gQ\nGIWQBu5IYqbxavHjLVqRdNlJiVPAh2imDTYi+teY4GgS0uhPVN2TPK3AKheExj6/\nV/8XhvriHpkKOL9/wgqmxpYTanlzrDgefGX2+EGuyH7hW+CRR9BVsQyAP0WgMd6u\n7XcgiN5ur+ui59irzmiSlWQ94wmcXNutyGSEMxkFXkV7plKR32VvB8j007eJMpb9\nSZOropzN\n=IG22\n-----END PGP SIGNATURE-----",
        "payload": "tree 85d1f62a2953291b9057fd2149848885fe44eb2e\nparent e890c15e2cc91487ce023900912646ff56ee97b4\nauthor MarcoFalke <falke.marco@gmail.com> 1587682812 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1587682886 -0400\n\ntest: Fix intermittent failure in wallet_importmulti\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8b9b5d1f48ad95eecf47ebbd7bf374777fc621",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8b9b5d1f48ad95eecf47ebbd7bf374777fc621",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8b9b5d1f48ad95eecf47ebbd7bf374777fc621/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e890c15e2cc91487ce023900912646ff56ee97b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e890c15e2cc91487ce023900912646ff56ee97b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e890c15e2cc91487ce023900912646ff56ee97b4"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bd4fcdabcf35417ca0501f55d7622f049987eb7e",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa8b9b5d1f48ad95eecf47ebbd7bf374777fc621/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa8b9b5d1f48ad95eecf47ebbd7bf374777fc621/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=fa8b9b5d1f48ad95eecf47ebbd7bf374777fc621",
        "patch": "@@ -32,6 +32,7 @@\n     test_address,\n )\n \n+\n class ImportMultiTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n@@ -51,7 +52,7 @@ def test_importmulti(self, req, success, error_code=None, error_message=None, wa\n         result = self.nodes[1].importmulti([req])\n         observed_warnings = []\n         if 'warnings' in result[0]:\n-           observed_warnings = result[0]['warnings']\n+            observed_warnings = result[0]['warnings']\n         assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n         assert_equal(result[0]['success'], success)\n         if error_code is not None:\n@@ -63,6 +64,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n+        self.nodes[1].syncwithvalidationinterfacequeue()\n \n         node0_address1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n \n@@ -257,6 +259,7 @@ def run_test(self):\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n+        self.nodes[1].syncwithvalidationinterfacequeue()\n \n         self.log.info(\"Should import a p2sh\")\n         self.test_importmulti({\"scriptPubKey\": {\"address\": multisig.p2sh_addr},\n@@ -277,6 +280,7 @@ def run_test(self):\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n+        self.nodes[1].syncwithvalidationinterfacequeue()\n \n         self.log.info(\"Should import a p2sh with respective redeem script\")\n         self.test_importmulti({\"scriptPubKey\": {\"address\": multisig.p2sh_addr},\n@@ -297,6 +301,7 @@ def run_test(self):\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n+        self.nodes[1].syncwithvalidationinterfacequeue()\n \n         self.log.info(\"Should import a p2sh with respective redeem script and private keys\")\n         self.test_importmulti({\"scriptPubKey\": {\"address\": multisig.p2sh_addr},\n@@ -322,6 +327,7 @@ def run_test(self):\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n+        self.nodes[1].syncwithvalidationinterfacequeue()\n \n         self.log.info(\"Should import a p2sh with respective redeem script and private keys\")\n         self.test_importmulti({\"scriptPubKey\": {\"address\": multisig.p2sh_addr},\n@@ -851,5 +857,6 @@ def run_test(self):\n             addr = wrpc.getnewaddress('', 'bech32')\n             assert_equal(addr, addresses[i])\n \n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      }
    ]
  }
]