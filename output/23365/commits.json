[
  {
    "sha": "698c524698c33595a4d555eaa9e21bc19b4d3e93",
    "node_id": "C_kwDOABII59oAKDY5OGM1MjQ2OThjMzM1OTVhNGQ1NTVlYWE5ZTIxYmMxOWI0ZDNlOTM",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-10-26T20:25:04Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-11-26T15:27:25Z"
      },
      "message": "index: Fix backwards search for bestblock\n\nThis allows filters to be reconstructed when the best known block is\nthe Genesis block without needing to reindex.\nIt fixes Init errors seen in #23289.",
      "tree": {
        "sha": "3e5ae26f60cfa4fd726856916a0db20a747f854f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e5ae26f60cfa4fd726856916a0db20a747f854f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/698c524698c33595a4d555eaa9e21bc19b4d3e93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/698c524698c33595a4d555eaa9e21bc19b4d3e93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/698c524698c33595a4d555eaa9e21bc19b4d3e93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/698c524698c33595a4d555eaa9e21bc19b4d3e93/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "111c3e06b35b7867f2e0f740e988f648ac6c325d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111c3e06b35b7867f2e0f740e988f648ac6c325d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/111c3e06b35b7867f2e0f740e988f648ac6c325d"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8525dcbfa02d9c1edb312627cd2db37cc9c16345",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/698c524698c33595a4d555eaa9e21bc19b4d3e93/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/698c524698c33595a4d555eaa9e21bc19b4d3e93/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=698c524698c33595a4d555eaa9e21bc19b4d3e93",
        "patch": "@@ -91,11 +91,12 @@ bool BaseIndex::Init()\n             const CBlockIndex* block = active_chain.Tip();\n             prune_violation = true;\n             // check backwards from the tip if we have all block data until we reach the indexes bestblock\n-            while (block_to_test && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n+            while (block_to_test && block && (block->nStatus & BLOCK_HAVE_DATA)) {\n                 if (block_to_test == block) {\n                     prune_violation = false;\n                     break;\n                 }\n+                assert(block->pprev);\n                 block = block->pprev;\n             }\n         }"
      }
    ]
  },
  {
    "sha": "9600ea01450b0d39be90eb2971c1ac5c9b69a66e",
    "node_id": "C_kwDOABII59oAKDk2MDBlYTAxNDUwYjBkMzliZTkwZWIyOTcxYzFhYzVjOWI2OWE2NmU",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-10-27T22:59:40Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-11-26T15:27:32Z"
      },
      "message": "test: Add edge case of pruning up to index height",
      "tree": {
        "sha": "fdc9132593fa7485550bc4c3eae0f27219c63567",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdc9132593fa7485550bc4c3eae0f27219c63567"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9600ea01450b0d39be90eb2971c1ac5c9b69a66e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9600ea01450b0d39be90eb2971c1ac5c9b69a66e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9600ea01450b0d39be90eb2971c1ac5c9b69a66e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9600ea01450b0d39be90eb2971c1ac5c9b69a66e/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "698c524698c33595a4d555eaa9e21bc19b4d3e93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/698c524698c33595a4d555eaa9e21bc19b4d3e93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/698c524698c33595a4d555eaa9e21bc19b4d3e93"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 17,
      "deletions": 6
    },
    "files": [
      {
        "sha": "83a50c504e25556b590612519d90078442be1d2b",
        "filename": "test/functional/feature_blockfilterindex_prune.py",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9600ea01450b0d39be90eb2971c1ac5c9b69a66e/test/functional/feature_blockfilterindex_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9600ea01450b0d39be90eb2971c1ac5c9b69a66e/test/functional/feature_blockfilterindex_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blockfilterindex_prune.py?ref=9600ea01450b0d39be90eb2971c1ac5c9b69a66e",
        "patch": "@@ -24,9 +24,7 @@ def run_test(self):\n         self.log.info(\"check if we can access a blockfilter when pruning is enabled but no blocks are actually pruned\")\n         self.sync_index(height=200)\n         assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getbestblockhash())['filter']), 0)\n-        # Mine two batches of blocks to avoid hitting NODE_NETWORK_LIMITED_MIN_BLOCKS disconnection\n-        self.generate(self.nodes[0], 250)\n-        self.generate(self.nodes[0], 250)\n+        self.generate(self.nodes[0], 500)\n         self.sync_index(height=700)\n \n         self.log.info(\"prune some blocks\")\n@@ -39,16 +37,29 @@ def run_test(self):\n         self.log.info(\"check if we can access the blockfilter of a pruned block\")\n         assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getblockhash(2))['filter']), 0)\n \n+        # mine and sync index up to a height that will later be the pruneheight\n+        self.generate(self.nodes[0], 298)\n+        self.sync_index(height=998)\n+\n         self.log.info(\"start node without blockfilterindex\")\n         self.restart_node(0, extra_args=[\"-fastprune\", \"-prune=1\"])\n \n         self.log.info(\"make sure accessing the blockfilters throws an error\")\n         assert_raises_rpc_error(-1, \"Index is not enabled for filtertype basic\", self.nodes[0].getblockfilter, self.nodes[0].getblockhash(2))\n-        self.generate(self.nodes[0], 1000)\n+        self.generate(self.nodes[0], 502)\n+\n+        self.log.info(\"prune exactly up to the blockfilterindexes best block while blockfilters are disabled\")\n+        pruneheight_2 = self.nodes[0].pruneblockchain(1000)\n+        assert_equal(pruneheight_2, 998)\n+        self.restart_node(0, extra_args=[\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\"])\n+        self.log.info(\"make sure that we can continue with the partially synced index after having pruned up to the index height\")\n+        self.sync_index(height=1500)\n \n         self.log.info(\"prune below the blockfilterindexes best block while blockfilters are disabled\")\n-        pruneheight_new = self.nodes[0].pruneblockchain(1000)\n-        assert_greater_than(pruneheight_new, pruneheight)\n+        self.restart_node(0, extra_args=[\"-fastprune\", \"-prune=1\"])\n+        self.generate(self.nodes[0], 1000)\n+        pruneheight_3 = self.nodes[0].pruneblockchain(2000)\n+        assert_greater_than(pruneheight_3, pruneheight_2)\n         self.stop_node(0)\n \n         self.log.info(\"make sure we get an init error when starting the node again with block filters\")"
      }
    ]
  }
]