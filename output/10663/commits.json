[
  {
    "sha": "2416dd7cc94e765efbbf9069dbf0f6fb71404ebb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDE2ZGQ3Y2M5NGU3NjVlZmJiZjkwNjlkYmYwZjZmYjcxNDA0ZWJi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-22T18:01:04Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-18T17:47:47Z"
      },
      "message": "net: separate resolving and conecting\n\nConnectSocketByName handled resolves as necessary, obscuring the connection\nprocess. With them separated, each can be handled asynchronously.\n\nAlso, since proxies must be considered now anyway, go ahead and eliminate the\nConnectSocket wrapper and use ConnectSocketDirectly... directly.",
      "tree": {
        "sha": "7f66d156ebf5c4e1b4253277abc688c26edd2338",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f66d156ebf5c4e1b4253277abc688c26edd2338"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44e1fd926cfb0df0fbd8c41de8cd65ed8d5d6e18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44e1fd926cfb0df0fbd8c41de8cd65ed8d5d6e18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44e1fd926cfb0df0fbd8c41de8cd65ed8d5d6e18"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 44,
      "deletions": 21
    },
    "files": [
      {
        "sha": "a9f26fb566db65b897bf139f1ced66a377126ea3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 19,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2416dd7cc94e765efbbf9069dbf0f6fb71404ebb",
        "patch": "@@ -380,19 +380,16 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pszDest ? pszDest : addrConnect.ToString(),\n         pszDest ? 0.0 : (double)(GetAdjustedTime() - addrConnect.nTime)/3600.0);\n \n-    // Connect\n-    SOCKET hSocket;\n-    bool proxyConnectionFailed = false;\n-    if (pszDest ? ConnectSocketByName(addrConnect, hSocket, pszDest, Params().GetDefaultPort(), nConnectTimeout, &proxyConnectionFailed) :\n-                  ConnectSocket(addrConnect, hSocket, nConnectTimeout, &proxyConnectionFailed))\n-    {\n-        if (!IsSelectableSocket(hSocket)) {\n-            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n-            CloseSocket(hSocket);\n-            return nullptr;\n-        }\n-\n-        if (pszDest && addrConnect.IsValid()) {\n+    // Resolve\n+    const int default_port = Params().GetDefaultPort();\n+    if (pszDest) {\n+        std::vector<CService> resolved;\n+        if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {\n+            addrConnect = CAddress(resolved[GetRand(resolved.size())], NODE_NONE);\n+            if (!addrConnect.IsValid()) {\n+                LogPrint(BCLog::NET, \"Resolver returned invalid address %s for %s\", addrConnect.ToString(), pszDest);\n+                return nullptr;\n+            }\n             // It is possible that we already have a connection to the IP/port pszDest resolved to.\n             // In that case, drop the connection that was just created, and return the existing CNode instead.\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n@@ -402,13 +399,40 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             if (pnode)\n             {\n                 pnode->MaybeSetAddrName(std::string(pszDest));\n-                CloseSocket(hSocket);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n                 return nullptr;\n             }\n         }\n+    }\n \n-        addrman.Attempt(addrConnect, fCountFailure);\n+    // Connect\n+    bool connected = false;\n+    SOCKET hSocket;\n+    proxyType proxy;\n+    if (addrConnect.IsValid()) {\n+        bool proxyConnectionFailed = false;\n+\n+        if (GetProxy(addrConnect.GetNetwork(), proxy))\n+            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, &proxyConnectionFailed);\n+        else // no proxy needed (none set for target network)\n+            connected = ConnectSocketDirectly(addrConnect, hSocket, nConnectTimeout);\n+        if (!proxyConnectionFailed) {\n+            // If a connection to the node was attempted, and failure (if any) is not caused by a problem connecting to\n+            // the proxy, mark this as an attempt.\n+            addrman.Attempt(addrConnect, fCountFailure);\n+        }\n+    } else if (pszDest && GetNameProxy(proxy)) {\n+        std::string host;\n+        int port = default_port;\n+        SplitHostPort(std::string(pszDest), port, host);\n+        connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, nullptr);\n+    }\n+    if (connected) {\n+        if (!IsSelectableSocket(hSocket)) {\n+            LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n+            CloseSocket(hSocket);\n+            return nullptr;\n+        }\n \n         // Add node\n         NodeId id = GetNewNodeId();\n@@ -419,10 +443,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pnode->AddRef();\n \n         return pnode;\n-    } else if (!proxyConnectionFailed) {\n-        // If connecting to the node failed, and failure is not caused by a problem connecting to\n-        // the proxy, mark this as an attempt.\n-        addrman.Attempt(addrConnect, fCountFailure);\n     }\n \n     return nullptr;"
      },
      {
        "sha": "d4a91da1f09d140fc47cc57946652b97b46a58ee",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=2416dd7cc94e765efbbf9069dbf0f6fb71404ebb",
        "patch": "@@ -399,7 +399,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     return true;\n }\n \n-bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)\n+bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout)\n {\n     hSocketRet = INVALID_SOCKET;\n \n@@ -534,7 +534,7 @@ bool IsProxy(const CNetAddr &addr) {\n     return false;\n }\n \n-static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n {\n     SOCKET hSocket = INVALID_SOCKET;\n     // first connect to proxy server"
      },
      {
        "sha": "50425f0f8046b1fd452eea8c9a17bc3ce06bbf09",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=2416dd7cc94e765efbbf9069dbf0f6fb71404ebb",
        "patch": "@@ -44,6 +44,7 @@ bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n+bool GetNameProxy(proxyType &nameProxyOut);\n bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup);\n bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup);\n@@ -52,6 +53,8 @@ CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed = nullptr);\n bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = nullptr);\n+bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout);\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n /** Close socket and set hSocket to INVALID_SOCKET */"
      }
    ]
  },
  {
    "sha": "45fd75453e59868471572907db237630ca2b7afd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWZkNzU0NTNlNTk4Njg0NzE1NzI5MDdkYjIzNzYzMGNhMmI3YWZk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-23T16:29:50Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-18T17:47:47Z"
      },
      "message": "net: remove now-superfluous numeric resolve\n\nThis was added in order to help OpenNetworkConnection avoid creating a\nconnection that it would end up aborting. It was necessary because resolving\nwas done as part of the connection process.\n\nNow that resolving is separated from connecting, this case is detected before\nthe connection is attempted.",
      "tree": {
        "sha": "13b1b423cfb85a7d0c81e1cd087fdbe8cc822cc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13b1b423cfb85a7d0c81e1cd087fdbe8cc822cc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45fd75453e59868471572907db237630ca2b7afd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45fd75453e59868471572907db237630ca2b7afd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45fd75453e59868471572907db237630ca2b7afd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45fd75453e59868471572907db237630ca2b7afd/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2416dd7cc94e765efbbf9069dbf0f6fb71404ebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2416dd7cc94e765efbbf9069dbf0f6fb71404ebb"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "64b8fe726b44f2b0be357bc97bcd5f2a34c38290",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45fd75453e59868471572907db237630ca2b7afd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45fd75453e59868471572907db237630ca2b7afd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=45fd75453e59868471572907db237630ca2b7afd",
        "patch": "@@ -1934,11 +1934,9 @@ void CConnman::ThreadOpenAddedConnections()\n                     // the addednodeinfo state might change.\n                     break;\n                 }\n-                // If strAddedNode is an IP/port, decode it immediately, so\n-                // OpenNetworkConnection can detect existing connections to that IP/port.\n                 tried = true;\n-                CService service(LookupNumeric(info.strAddedNode.c_str(), Params().GetDefaultPort()));\n-                OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false, false, true);\n+                CAddress addr(CService(), NODE_NONE);\n+                OpenNetworkConnection(addr, false, &grant, info.strAddedNode.c_str(), false, false, true);\n                 if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n                     return;\n             }"
      }
    ]
  },
  {
    "sha": "b887676e1b86ce03181b5876cf6203d617750d0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODg3Njc2ZTFiODZjZTAzMTgxYjU4NzZjZjYyMDNkNjE3NzUwZDBh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-23T15:53:45Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-18T17:47:47Z"
      },
      "message": "net: remove now-unused functions",
      "tree": {
        "sha": "d7b26f4b56d1960c144f7eaf4abe4104ff012f2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7b26f4b56d1960c144f7eaf4abe4104ff012f2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b887676e1b86ce03181b5876cf6203d617750d0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b887676e1b86ce03181b5876cf6203d617750d0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b887676e1b86ce03181b5876cf6203d617750d0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b887676e1b86ce03181b5876cf6203d617750d0a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45fd75453e59868471572907db237630ca2b7afd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45fd75453e59868471572907db237630ca2b7afd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45fd75453e59868471572907db237630ca2b7afd"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 0,
      "deletions": 43
    },
    "files": [
      {
        "sha": "9212be981659191df99f0fa845740230aeb04220",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b887676e1b86ce03181b5876cf6203d617750d0a/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b887676e1b86ce03181b5876cf6203d617750d0a/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=b887676e1b86ce03181b5876cf6203d617750d0a",
        "patch": "@@ -558,47 +558,6 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n     hSocketRet = hSocket;\n     return true;\n }\n-\n-bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed)\n-{\n-    proxyType proxy;\n-    if (outProxyConnectionFailed)\n-        *outProxyConnectionFailed = false;\n-\n-    if (GetProxy(addrDest.GetNetwork(), proxy))\n-        return ConnectThroughProxy(proxy, addrDest.ToStringIP(), addrDest.GetPort(), hSocketRet, nTimeout, outProxyConnectionFailed);\n-    else // no proxy needed (none set for target network)\n-        return ConnectSocketDirectly(addrDest, hSocketRet, nTimeout);\n-}\n-\n-bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed)\n-{\n-    std::string strDest;\n-    int port = portDefault;\n-\n-    if (outProxyConnectionFailed)\n-        *outProxyConnectionFailed = false;\n-\n-    SplitHostPort(std::string(pszDest), port, strDest);\n-\n-    proxyType proxy;\n-    GetNameProxy(proxy);\n-\n-    std::vector<CService> addrResolved;\n-    if (Lookup(strDest.c_str(), addrResolved, port, fNameLookup && !HaveNameProxy(), 256)) {\n-        if (addrResolved.size() > 0) {\n-            addr = addrResolved[GetRand(addrResolved.size())];\n-            return ConnectSocket(addr, hSocketRet, nTimeout);\n-        }\n-    }\n-\n-    addr = CService();\n-\n-    if (!HaveNameProxy())\n-        return false;\n-    return ConnectThroughProxy(proxy, strDest, port, hSocketRet, nTimeout, outProxyConnectionFailed);\n-}\n-\n bool LookupSubNet(const char* pszName, CSubNet& ret)\n {\n     std::string strSubnet(pszName);"
      },
      {
        "sha": "e7d7bcb3751d1a94aa9eaec77a1438e3492f7edd",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b887676e1b86ce03181b5876cf6203d617750d0a/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b887676e1b86ce03181b5876cf6203d617750d0a/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=b887676e1b86ce03181b5876cf6203d617750d0a",
        "patch": "@@ -51,8 +51,6 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n CService LookupNumeric(const char *pszName, int portDefault = 0);\n bool LookupSubNet(const char *pszName, CSubNet& subnet);\n-bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed = nullptr);\n-bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed = nullptr);\n bool ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRet, int nTimeout);\n bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n /** Return readable error string for a network error code */"
      }
    ]
  }
]