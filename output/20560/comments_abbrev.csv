sipa,2020-12-03 17:57:40,"Concept ACK, under the condition that we can do some basic testing that this doesn't meaningfully affect the speed at which fuzzers find issues.",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-738179710,738179710,
MarcoFalke,2020-12-03 17:59:21,"The cost is dereferencing one pointer (to a function). I highly doubt that this affects performance, but I am happy to test.",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-738180605,738180605,
sipa,2020-12-03 18:00:20,"> The cost is dereferencing one pointer (to a function). I highly doubt that this affects performance, but I am happy to test.\n\nThat seems entirely reasonable, and is my expectation too. But given the pervasive ""one binary per test"" recommendation, I'd rather make sure.",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-738181191,738181191,
DrahtBot,2020-12-04 00:30:52,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20516 (Well-defined CAddress disk serialization, and addrv2 anchors.dat by sipa)\n* #20487 (draft: Add syscall sandboxing",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-738471408,738471408,
MarcoFalke,2020-12-04 06:32:59,@RandyMcMillan Good catch on macOS. Should be fixed now (hopefully),https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-738596037,738596037,
DrahtBot,2020-12-04 09:50:17,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @achow101 @sipa @practicalswift @harding have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-738686270,738686270,
laanwj,2020-12-04 18:59:13,"I'm very much in favor of this with regard to organization. The large number of binaries was bothering me. That said, I know nothing about fuzzing, so  only ACK if it doesn't make fuzzing less useful.",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-738959266,738959266,
MarcoFalke,2020-12-05 07:58:08,"# Benchmarks\n\n## Compilation\n\nMeasured was wall clock time and disk usage of the full build pipeline with a warm ccache:\nautogen, configure with ccache, make clean, make -j 9.\n\n|                                              | master         | this pull        |\n|----------------------------------------------|----------------|------------------|\n| `--with-sanitizers=address,fuzzer",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-739141580,739141580,
MarcoFalke,2020-12-05 14:26:47,benchmarks updated with images,https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-739257606,739257606,
sipa,2020-12-06 08:35:00,"Doing a benchmark as well.\n\nError introducing patch (similar to a bug I had during development of #19988):\n\n```diff\ndiff --git a/src/txrequest.cpp b/src/txrequest.cpp\nindex e54c073328..8a68e4fd8a 100644\n--- a/src/txrequest.cpp\n+++ b/src/txrequest.cpp\n@@ -553,16 +553,17 @@ public:\n             //   In other words, the situation where std::next(it) is deleted can only occur if st",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-739472657,739472657,
sipa,2020-12-06 20:03:34,"Updated my numbers. It appears that there is a (statistically) significant difference in iteration count, but for -use_value_profile=0 it's in the other direction than -use_value_profile=1. So I'm going to assume it's just due to arbitrary alignment changes in the binary or so.\n\nConcept ACK. I'm not concerned anymore about the impact on fuzzing speed. Will review the code changes soon.",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-739555420,739555420,
MarcoFalke,2020-12-10 07:49:21,@practicalswift Mind taking a look here as well?,https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-742330306,742330306,
practicalswift,2020-12-11 16:46:28,"> @practicalswift Mind taking a look here as well?\n\nI think the _addition_ of an option to link all targets once is a great idea for the reasons you mentioned.\n\nMy only concern is that this _removes_ the ability to link the targets separately.\n\nThat is problematic since the de facto standard in fuzzing is the one-binary-per-harness mode like we currently use: all fuzzing management pla",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-743302686,743302686,
MarcoFalke,2020-12-11 17:14:36,"I am using `test/fuzz/test_runner.py` to do ""case 2"" continuous fuzzing and it works just fine. If there is something broken specifically, it would be good to explain how to reproduce the failure and we can take it from there.",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-743318149,743318149,
MarcoFalke,2020-12-11 18:52:06,"To address your feedback, I've written a oneline bash script to link each target individually.\n\n\n```sh\nfor f in $(git grep --extended-regexp  'FUZZ_TARGET\(.*)$' | sed --regexp-extended 's/.*FUZZ_TARGET.(.*).$/\1/g'); do echo ""Compiling target $f ..."" && git reset --hard HEAD && sed -i ""s/std::getenv(\""FUZZ\"")/\""$f\""/g"" ./src/test/fuzz/fuzz.cpp && make -j 9 && mv ./src/test/fuzz/fuzz ./src",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-743364056,743364056,
practicalswift,2020-12-12 12:15:34,"> To address your feedback, I've written a oneline bash script to link each target individually.\n> \n> ```shell\n> for f in $(git grep --extended-regexp  'FUZZ_TARGET\(.*)$' | sed --regexp-extended 's/.*FUZZ_TARGET.(.*).$/\1/g'); do echo ""Compiling target $f ..."" && git reset --hard HEAD && sed -i ""s/std::getenv(\""FUZZ\"")/\""$f\""/g"" ./src/test/fuzz/fuzz.cpp && make -j 9 && mv ./src/test/fuzz/fu",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-743747317,743747317,
MarcoFalke,2020-12-14 15:00:44,Addressed all feedback. Anything left to do here?,https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-744498103,744498103,
jonatack,2020-12-14 17:13:50,Began looking over the code. Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-744583285,744583285,
practicalswift,2020-12-14 19:39:34,"Thanks for adding `--enable-danger-fuzz-link-all` for backwards compatibility!\n\nConcept ACK\n\nWill review.",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-744665263,744665263,
practicalswift,2020-12-15 16:57:51,"Tested ACK fa13e1b0c52738492310b6b421d8e38cb04da5b1\n\nGreat work! Thanks! ‚ù§Ô∏è \n\n```\n$ gh pr checkout 20560\n$ make distclean\n$ ./autogen.sh\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\n$ make\n$ find src/test/fuzz/ -type f -executable\nsrc/test/fuzz/fuzz\n$ PRINT_ALL_FUZZ_TARGETS_AND_ABORT=1 src/test/fuzz/fuzz | head -10\naddition_o",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-745424837,745424837,
MarcoFalke,2020-12-15 17:07:08,@sipa Mind to re-ACK?,https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-745430749,745430749,
sipa,2020-12-15 17:41:23,"ACK fa13e1b0c52738492310b6b421d8e38cb04da5b1. Reviewed the code changes, and tested the 3 different test_runner.py modes (run once, merge, generate). I also tested building with the new --enable-danger-fuzz-link-all\n\nAs a potential follow-up, if there is interesting in building the separate-binary strategy faster it may be useful to instead of modifying the source code in place, make the scrip",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-745451685,745451685,
MarcoFalke,2020-12-15 18:05:08,"Just for reference (not sure if you noticed during review), one of the targets had to be renamed, which is why I also pushed https://github.com/bitcoin-core/qa-assets/commit/70083a813b9cb1c226d480be25996e5f2567e024",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-745465975,745465975,
dongcarl,2020-12-18 21:58:48,"Is it expected behaviour that\n```\n./configure --enable-fuzz CC=clang CXX=clang++\nmake\n```\nno longer works, and now requires the `--with-sanitizers=address,fuzzer,undefined` configure flag to work?\n\nThe error I'm seeing during `make`:\n```\n/usr/bin/ld: /usr/bin/ld: DWARF error: could not find variable specification at offset c4\nlibtest_fuzz.a(libtest_fuzz_a-fuzz.o): in function `",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-748339644,748339644,
jonatack,2020-12-18 23:13:05,It's late and I could be misremembering but I think that flag was always needed.,https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-748367231,748367231,
MarcoFalke,2020-12-19 06:01:29,"@dongcarl I think this is a bug (typo). Functions with a body in a header file need to be `inline` unless they are member functions, because those are already inline.\n\nSo you might be able to fix it by adding `inline`.",https://github.com/bitcoin/bitcoin/pull/20560#issuecomment-748425412,748425412,
sipa,2020-12-10 03:41:16,Command here is still the old binary path.,https://github.com/bitcoin/bitcoin/pull/20560#discussion_r539821896,539821896,test/fuzz/test_runner.py
MarcoFalke,2020-12-10 06:16:36,nice catch. Fixed,https://github.com/bitcoin/bitcoin/pull/20560#discussion_r539879689,539879689,test/fuzz/test_runner.py
