DrahtBot,2020-12-22 20:41:01,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21025 (validation: Guard the active_chainstate with cs_main by dongcarl)\n* #20758 (net-processing refactoring -- lose gl",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-749765464,749765464,
jnewbery,2020-12-30 14:25:35,Concept ACK!,https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-752639564,752639564,
laanwj,2021-01-08 21:07:30,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-756998410,756998410,
jnewbery,2021-01-11 21:08:14,"I've reviewed everything up to 94bbdd7134 _validation: Remove global LookupBlockIndex_ and it looks good so far.\n\nDoes it make sense to remove the `assert(std::addressof(thing) == std::addressof(thing));` lines as the last commit of this PR? Is there value in keeping those in place until the series of PRs is finished?\n",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-758225714,758225714,
dongcarl,2021-01-12 20:19:11,"> I've reviewed everything up to [94bbdd7](https://github.com/bitcoin/bitcoin/commit/94bbdd7134588961a63a23a5ac93e6503bee47ec) _validation: Remove global LookupBlockIndex_ and it looks good so far.\n\nYay! ‚ò∫Ô∏è \n\n> Does it make sense to remove the `assert(std::addressof(thing) == std::addressof(thing));` lines as the last commit of this PR? Is there value in keeping those in place until the se",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-758916993,758916993,
DrahtBot,2021-01-13 11:46:15,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @sipa @fjahr have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-759396506,759396506,
dongcarl,2021-01-13 20:19:05,"Push e8dedbb064e90aaa8b2540c7524af54bbdd49d0a -> c948ff186b34693e762fa595ddc174cd88bfd89c\n- Addressed https://github.com/bitcoin/bitcoin/pull/20749#discussion_r550179512 and https://github.com/bitcoin/bitcoin/pull/20749#discussion_r556051990\n\n",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-759715558,759715558,
jonatack,2021-01-15 11:00:41,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-760870364,760870364,
dongcarl,2021-01-15 21:06:05,"Note: If #20946 gets in before this, we won't need this last commit I just pushed.",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-761197346,761197346,
laanwj,2021-01-20 17:53:47,"Code review ACK 364fa81a2b014bd6257e011e6a201a48c1b8853e\nChecked that this only moves methods around and doesn't change any validation logic.",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-763824082,763824082,
dongcarl,2021-01-21 15:54:16,"Pushed d0454bad30253e735254cf7be359212293d952af -> 6ea8e92fc1105cf827acf6a72572d16696e2051c\n- Rebased over master to include #20946, dropped last commit accordingly",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-764741125,764741125,
dongcarl,2021-01-26 20:13:07,"Pushed 6ea8e92fc1105cf827acf6a72572d16696e2051c -> 2bda16f4e46bf361bcfa600a4e751e6303a63d0d\n- Rebased over master to include #20972, dropped cs_main locking according to https://github.com/bitcoin/bitcoin/pull/20749#discussion_r564711195",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-767799339,767799339,
glozow,2021-01-27 13:11:33,"reACK https://github.com/bitcoin/bitcoin/commit/2bda16f4e46bf361bcfa600a4e751e6303a63d0d, only change is dropping repeat-lock of cs_main",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-768275550,768275550,
laanwj,2021-01-27 13:58:51,re-ACK 2bda16f4e46bf361bcfa600a4e751e6303a63d0d,https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-768303293,768303293,
dongcarl,2021-01-28 00:50:35,"If anyone was wondering about resolving the AssumeUTXO changes in #19806 with the deglobalizing-chainman changes, here's an update: https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768673523.\n\nThe conclusion was that the PRs are mergeable in any order without much pain if the last commit of the AssumeUTXO changes in #19806 is slightly modified.",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-768677337,768677337,
dongcarl,2021-01-28 19:03:46,"Pushed 2bda16f4e46bf361bcfa600a4e751e6303a63d0d -> 246cb0f29b01e9b24cd13388dfd38c4b0729783c\n- Rebased on top of #21025 to fix locking\n- Addressed jnewbery's review comments (thanks!)",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-769305311,769305311,
dongcarl,2021-01-28 19:16:18,"Pushed 246cb0f29b01e9b24cd13388dfd38c4b0729783c -> 67c9a83df19c6e2a2edb32336879204e7770b4a7\n- Rebased over new changes in #21025",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-769312396,769312396,
jnewbery,2021-01-28 19:27:18,utACK 67c9a83df19c6e2a2edb32336879204e7770b4a7,https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-769318849,769318849,
jnewbery,2021-02-01 09:34:26,"If @laanwj reACKs this, then I think it'll be ready for merge",https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-770716244,770716244,
laanwj,2021-02-01 12:04:15,re-ACK 67c9a83df19c6e2a2edb32336879204e7770b4a7,https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-770807215,770807215,
hebasto,2021-02-01 12:43:34,Warnings are fixed in #21051.,https://github.com/bitcoin/bitcoin/pull/20749#issuecomment-770829188,770829188,
MarcoFalke,2020-12-22 18:53:33,"I know I've asked the same question already, but I didn't get why this can't use `chainman.ActiveChainstate().Load...`.\n\nThis should simplify review because it will touch the same lines of code less often.\n\nAlso, it shouldn't make review harder, because everyone knows that there is only one chainman (whether it is called `g_chainman` or `chainman` shouldn't matter). On top you added a runt",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r547447969,547447969,src/init.cpp
MarcoFalke,2020-12-22 18:58:50,"Anyway, no big deal if you want to keep it that way. Will review regardless.",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r547450444,547450444,src/init.cpp
Sjors,2020-12-30 12:33:38,626b709edfe1bd71e6d485c096ff9a52f698a94c nit: move help text to header file,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r550179512,550179512,src/validation.cpp
Sjors,2020-12-30 12:43:32,"a375714f24b85b6f9ce7e1765a1137e3b85af009 nit: drop `, nullptr`?",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r550182154,550182154,src/validation.cpp
Sjors,2020-12-30 12:45:17,"a375714f24b85b6f9ce7e1765a1137e3b85af009  Should this comment be preserved?\n```\n* May not be called with cs_main held. May not be called in a		\n* validationinterface callback.\n ```",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r550182687,550182687,src/validation.h
dongcarl,2021-01-05 15:15:41,"Unsure, perhaps @jamesob can help expound on this point a little?",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r551995246,551995246,src/validation.h
dongcarl,2021-01-05 15:16:35,Will do on next push!,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r551995825,551995825,src/validation.cpp
jnewbery,2021-01-11 21:04:45,"It is preserved, at the bottom of this comment. It was just duplicated before.\n\nAlthough I think it's fine to remove ""May not be called with cs_main held."" We have lock annotations to document/enforce that now, so the comment is redundant.",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r555338921,555338921,src/validation.h
ryanofsky,2021-01-12 20:08:03,"In commit ""validation: Make CChainState.m_blockman public"" (f28f8e3da5a48be3cdc0207112d9aa8ec8f6e820)\n\nIs it intentional to add GUARDED_BY here? Maybe add a comment saying what semantics are. I wouldn't think it should be necessary to lock cs_main just to get a reference to the BlockManager instance. It does seem like cs_main is needed to use some BlockManager members, but these are already an",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r556051990,556051990,src/validation.h
dongcarl,2021-01-13 20:17:27,"True, that doesn't seem necessary!",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r556802926,556802926,src/validation.h
ariard,2021-01-15 02:02:56,"I think this `assert` can be removed after 98f2375, as `FindForkInGlobalIndex` is moved to `BlockManager` and thus you can now directly access the new local method `BlockManager::LookupBlockIndex`. Asserting `g_chainmain.m_blockman` equivalence is lapsed ? \n\nSame for `assert`s in `GetSpendHeight` after d34c069 and in `GetLastCheckpoint` after 866834a",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r557816128,557816128,src/validation.cpp
jonatack,2021-01-15 11:34:55,"64d27fb0b950bcbd87bc7cd0b4d62f47f305ef88 naming and placement suggestions, feel free to ignore\n\n- as the verb is ""look up"" (not ""lookup"", which is a noun or adjective), suggest naming the function `LookUpBlockIndex`\n\n- it may be nice to place the function next to its similar twins, per the following diff\n\n<details><summary>suggested diff</summary><p>\n\n```diff\n+++ b/src/validation",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r558249589,558249589,src/validation.h
dongcarl,2021-01-15 18:21:35,"I see your point, but I don't think it hurts anything üòÅ\nAll of these will be removed in the end with a scripted-diff anyway",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r558488887,558488887,src/validation.cpp
jnewbery,2021-01-18 09:30:30,"The lock ordering is to take `cs_main` then take `mempool.cs` so at first glance, this looks like a lock inversion since it's locking `cs_main` while already holding `mempool.cs`. In fact, whenever `mempool.check()` is called, we're already holding `cs_main` (see the two call sites in net_processing).\n\nI think it'd be better to add an `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` annotation to `check()`",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559425521,559425521,src/txmempool.cpp
jnewbery,2021-01-18 09:36:10,"No need for this forward declaration. You're including chainparams.h, which is where this is declared.",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559429565,559429565,src/validation.h
jnewbery,2021-01-18 09:48:53,"I find these very long lines almost impossible to read. If you touch this branch again, could you be convinced to split it up. Something like:\n\n```suggestion\nbool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams,\n                       CChainState& chainstate, const CBlock& block, CBlockIndex* pindexPrev,\n                       bool fCheckPOW = true, bool fC",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559437992,559437992,src/validation.h
jnewbery,2021-01-18 09:49:23,Same comment as for the declaration. Consider splitting this line.,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559438289,559438289,src/validation.cpp
jnewbery,2021-01-18 09:55:09,Any reason not to just jump straight to using `EnsureChainman(request.context)` in all the rpc methods that you're touching here?,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559441927,559441927,src/rpc/mining.cpp
jnewbery,2021-01-18 12:12:44,"There's still some redundant text in here. Consider:\n\n```diff\ndiff --git a/src/validation.h b/src/validation.h\nindex 10943b6c24..2e1c441ba5 100644\n--- a/src/validation.h\n+++ b/src/validation.h\n@@ -649,18 +649,16 @@ public:\n     void PruneAndFlush();\n \n     /**\n-     * Find the best known block, and make it the tip of the block chain\n-     *\n-     * Make the best chain act",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559524032,559524032,src/validation.h
jnewbery,2021-01-18 12:49:11,"`ActiveChainstate()` doesn't take `cs_main`, whereas `::ChainstateActive()` does. Is that a problem? I imagine we shouldn't be reading `m_active_chainstate` without `cs_main`. The comment says:\n\n```\n    //! Once this pointer is set to a corresponding chainstate, it will not\n    //! be reset until init.cpp:Shutdown(). This means it is safe to acquire\n    //! the contents of this pointer w",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559544027,559544027,src/validation.cpp
ryanofsky,2021-01-20 13:57:12,"In commit ""validation: Move GetSpendHeight to BlockManager"" (d34c0698ec34b45b3ce153dd7ef0b79650e6deb9)\n\nre: https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559425521\n\n> The lock ordering is to take `cs_main` then take `mempool.cs` so at first glance, this looks like a lock inversion since it's locking `cs_main` while already holding `mempool.cs`. In fact, whenever `mempool.check(",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r560977964,560977964,src/txmempool.cpp
ryanofsky,2021-01-20 13:58:57,"In commit ""validation: Use existing chainstate in ChainstateManager::ProcessNewBlockHeaders"" (e0ab7ee8ded2eb44fe2791a081703452012228e8)\n\nre: https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559544027\n\n> `ActiveChainstate()` doesn't take `cs_main`, whereas `::ChainstateActive()` does. Is that a problem? I imagine we shouldn't be reading `m_active_chainstate` without `cs_main`. The ",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r560979259,560979259,src/validation.cpp
ryanofsky,2021-01-20 14:38:29,"In commit ""fuzz: Initialize a full TestingSetup instead of BasicTestingSetup"" (364fa81a2b014bd6257e011e6a201a48c1b8853e)\n\nThis seems safe and fine, but I'm only casually familiar with the fuzzing code and can't say I understand what the goal of the change and new code actually is. It might be good to have a code comment saying what the purpose of TestingSetup/REGTEST/nodebuglogfile is here, or",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r561009408,561009408,src/test/fuzz/load_external_block_file.cpp
dongcarl,2021-01-20 20:48:32,"I agree with all the points made, I wanted to keep it this way as it doesn't change the existing (fragile) behaviour, but just makes it more obvious. However, I do think it'd be good to add the annotation.\n\nI opened a new PR for this: https://github.com/bitcoin/bitcoin/pull/20972",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r561293393,561293393,src/txmempool.cpp
dongcarl,2021-01-20 20:49:10,"Good catch, fixed!",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r561293786,561293786,src/validation.h
dongcarl,2021-01-20 20:49:33,Fixed in: d8a5fe24af84c34492e2b23ed341bae70a3c8983,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r561294017,561294017,src/validation.h
dongcarl,2021-01-20 20:49:41,Fixed in: d8a5fe24af84c34492e2b23ed341bae70a3c8983,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r561294078,561294078,src/validation.cpp
dongcarl,2021-01-20 20:50:50,Fixed in: d0454bad30253e735254cf7be359212293d952af,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r561294694,561294694,src/validation.h
dongcarl,2021-01-20 20:52:00,"Added some context in the commit message here: 4c4eb967016d80247cbf38e6811c8640761ada42\nLmk if that needs additional explanation!",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r561295549,561295549,src/test/fuzz/load_external_block_file.cpp
dongcarl,2021-01-20 21:31:46,"I don't think it makes too much of a difference, and I found it clearer to push that decision to a later commit when we've resolved everything under RPC and can see everything that depends on chainman. See: 02e3831e9cd10f78bfde2d67a99c47f08564f07b",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r561320325,561320325,src/rpc/mining.cpp
dongcarl,2021-01-20 22:36:24,"Question: if the concern is that after #19806 the active chainstate may change after ‚Äúcs_main is released in the code immediately above‚Äù, then that concern would still exist even if we did not switch from ::ChainstateActive to ActiveChainstate, no? In other words, this is not a new problem that my PR introduced?\n\nAs far as I can tell, the behaviour change that switching from ::ChainstateActive",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r561352940,561352940,src/validation.cpp
jamesob,2021-01-26 14:59:59,"For what it's worth, I'd figured that the [`GUARDED_BY` on `g_chainman`](https://github.com/bitcoin/bitcoin/blob/master/src/validation.h#L937) would've cascaded through to many of the usages in question, but maybe I misunderstood.",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r564577629,564577629,src/validation.cpp
glozow,2021-01-26 17:51:06,"Er, why is `WITH_LOCK(cs_main)` needed if `check()` has already asserted that it's held?",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r564711195,564711195,src/txmempool.cpp
dongcarl,2021-01-26 20:13:18,Fixed!,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r564802417,564802417,src/txmempool.cpp
jnewbery,2021-01-28 10:32:54,"This isn't required. You can just forward declare `CCheckpointData` and then include chainparams.h in validation.cpp (if a type is only used as a reference argument for a function declaration, you don't need the full definition for that type).",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r565985090,565985090,src/validation.h
jnewbery,2021-01-28 10:36:06,"""Keeping a local reference allows us to test more easily as opposed to referencing a global."" is outdated, since this reference is no longer used just for testing and is part of the public interface.",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r565987283,565987283,src/validation.h
jnewbery,2021-01-28 10:39:47,"I was going to ask if you could `const CChainState&` to indicate that you're not mutating the chainstate...\n\n... but in fact `TestBlockValidity()` connects the passed-in block to the chain tip. What a terrible name for this function!",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r565989760,565989760,src/validation.h
jnewbery,2021-01-28 11:10:24,ok!,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r566009682,566009682,src/rpc/mining.cpp
jnewbery,2021-01-28 11:26:56,">  if the concern is that after #19806 the active chainstate may change after ‚Äúcs_main is released in the code immediately above‚Äù, then that concern would still exist even if we did not switch from ::ChainstateActive to ActiveChainstate, no? In other words, this is not a new problem that my PR introduced?\n\nThe concern is that reading/writing `m_active_chainstate` is not guaranteed to be atomic",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r566019524,566019524,src/validation.cpp
jnewbery,2021-01-28 11:29:14,Same problem as above: you're grabbing `m_active_chainstate` without locking cs_main first. I think it'd be easiest to make a local `CChainstate*` variable and set it while holding cs_main.,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r566020865,566020865,src/validation.cpp
dongcarl,2021-01-28 19:04:41,Fixed!,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r566338288,566338288,src/validation.h
dongcarl,2021-01-28 19:07:26,Fixed by rebasing over #21025,https://github.com/bitcoin/bitcoin/pull/20749#discussion_r566339904,566339904,src/validation.cpp
dongcarl,2021-01-28 19:08:19,"Fixed by rebasing over #21025, thanks all for the patience and guidance!",https://github.com/bitcoin/bitcoin/pull/20749#discussion_r566340540,566340540,src/validation.cpp
