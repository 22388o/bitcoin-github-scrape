[
  {
    "sha": "f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTJkYzY1NTdhMTUzYjM5MGExYWUxZDA4MDhmZjdlZDVkMDJjNjZl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-27T21:20:59Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:14:22Z"
      },
      "message": "validation: Guard the active_chainstate with cs_main\n\nThis avoids a potential race-condition where a thread is reading the\nChainstateManager::m_active_chainstate pointer while another one is\nwriting to it. There is no portable guarantee that reading/writing the\npointer is thread-safe.\n\nThis is also done in way that mimics ::ChainstateActive(), so the\ntransition from that function to this method is easy.\n\nMore discussion:\n1. https://github.com/bitcoin/bitcoin/pull/20749#discussion_r559544027\n2. https://github.com/bitcoin/bitcoin/pull/19806#discussion_r561023961\n3. https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768946522\n4. https://github.com/bitcoin/bitcoin/pull/19806#issuecomment-768955695",
      "tree": {
        "sha": "d8f634761b2bd2a792847625776aa24fc12fd136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8f634761b2bd2a792847625776aa24fc12fd136"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e130ff38c91ad3527924e6195325f6ae7ce5d77c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e130ff38c91ad3527924e6195325f6ae7ce5d77c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e130ff38c91ad3527924e6195325f6ae7ce5d77c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d9bee575db54ae481268c6f775ad33a67b42d2eb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
        "patch": "@@ -5143,6 +5143,7 @@ double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pin\n }\n \n Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n+    LOCK(::cs_main);  // for m_active_chainstate access\n     if (m_active_chainstate != nullptr) {\n         // If a snapshot chainstate exists, it will always be our active.\n         return m_active_chainstate->m_from_snapshot_blockhash;\n@@ -5189,13 +5190,14 @@ CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const\n \n CChainState& ChainstateManager::ActiveChainstate() const\n {\n+    LOCK(::cs_main);\n     assert(m_active_chainstate);\n     return *m_active_chainstate;\n }\n \n bool ChainstateManager::IsSnapshotActive() const\n {\n-    return m_snapshot_chainstate && m_active_chainstate == m_snapshot_chainstate.get();\n+    return m_snapshot_chainstate && WITH_LOCK(::cs_main, return m_active_chainstate) == m_snapshot_chainstate.get();\n }\n \n CChainState& ChainstateManager::ValidatedChainstate() const\n@@ -5226,7 +5228,10 @@ void ChainstateManager::Reset()\n {\n     m_ibd_chainstate.reset();\n     m_snapshot_chainstate.reset();\n-    m_active_chainstate = nullptr;\n+    {\n+        LOCK(::cs_main);\n+        m_active_chainstate = nullptr;\n+    }\n     m_snapshot_validated = false;\n }\n "
      },
      {
        "sha": "5d060ec753ce083b12ac3852d00991c3980bcf1e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
        "patch": "@@ -817,7 +817,7 @@ class ChainstateManager\n     //! This is especially important when, e.g., calling ActivateBestChain()\n     //! on all chainstates because we are not able to hold ::cs_main going into\n     //! that call.\n-    CChainState* m_active_chainstate{nullptr};\n+    CChainState* m_active_chainstate GUARDED_BY(::cs_main) {nullptr};\n \n     //! If true, the assumed-valid chainstate has been fully validated\n     //! by the background validation chainstate."
      }
    ]
  },
  {
    "sha": "15d20f40e1321b24963b40c12958c7d30ad112ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWQyMGY0MGUxMzIxYjI0OTYzYjQwYzEyOTU4YzdkMzBhZDExMmVj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T21:27:05Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Move LookupBlockIndex to BlockManager\n\n[META] This commit should be followed up by a scripted-diff commit which\n       fixes calls to LookupBlockIndex tree-wide.\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nLookupBlockIndex only acts on BlockManager.",
      "tree": {
        "sha": "40ba167bd2d0656a8e78e3551ad915bb4e0d9425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40ba167bd2d0656a8e78e3551ad915bb4e0d9425"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15d20f40e1321b24963b40c12958c7d30ad112ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15d20f40e1321b24963b40c12958c7d30ad112ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15d20f40e1321b24963b40c12958c7d30ad112ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15d20f40e1321b24963b40c12958c7d30ad112ec/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f92dc6557a153b390a1ae1d0808ff7ed5d02c66e"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 16,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f441fb7163aaf11ca180643481dd2481861300e8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 8,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15d20f40e1321b24963b40c12958c7d30ad112ec/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15d20f40e1321b24963b40c12958c7d30ad112ec/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=15d20f40e1321b24963b40c12958c7d30ad112ec",
        "patch": "@@ -168,10 +168,16 @@ namespace {\n } // anon namespace\n \n CBlockIndex* LookupBlockIndex(const uint256& hash)\n+{\n+    return g_chainman.m_blockman.LookupBlockIndex(hash);\n+}\n+\n+CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);\n-    BlockMap::const_iterator it = g_chainman.BlockIndex().find(hash);\n-    return it == g_chainman.BlockIndex().end() ? nullptr : it->second;\n+    assert(std::addressof(g_chainman.BlockIndex()) == std::addressof(m_block_index));\n+    BlockMap::const_iterator it = m_block_index.find(hash);\n+    return it == m_block_index.end() ? nullptr : it->second;\n }\n \n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n@@ -181,7 +187,7 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n     // Find the latest block common to locator and chain - we expect that\n     // locator.vHave is sorted descending by height.\n     for (const uint256& hash : locator.vHave) {\n-        CBlockIndex* pindex = LookupBlockIndex(hash);\n+        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (pindex) {\n             if (chain.Contains(pindex))\n                 return pindex;\n@@ -1413,7 +1419,7 @@ bool CScriptCheck::operator()() {\n int GetSpendHeight(const CCoinsViewCache& inputs)\n {\n     LOCK(cs_main);\n-    CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n+    CBlockIndex* pindexPrev = g_chainman.m_blockman.LookupBlockIndex(inputs.GetBestBlock());\n     return pindexPrev->nHeight + 1;\n }\n \n@@ -3406,7 +3412,7 @@ static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOC\n     for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n     {\n         const uint256& hash = i.second;\n-        CBlockIndex* pindex = LookupBlockIndex(hash);\n+        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (pindex) {\n             return pindex;\n         }\n@@ -4169,7 +4175,7 @@ bool CChainState::LoadChainTip(const CChainParams& chainparams)\n     }\n \n     // Load pointer to end of best chain\n-    CBlockIndex* pindex = LookupBlockIndex(coins_cache.GetBestBlock());\n+    CBlockIndex* pindex = m_blockman.LookupBlockIndex(coins_cache.GetBestBlock());\n     if (!pindex) {\n         return false;\n     }\n@@ -4648,7 +4654,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !LookupBlockIndex(block.hashPrevBlock)) {\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n                         if (dbp)\n@@ -4657,7 +4663,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     }\n \n                     // process in case the block isn't known yet\n-                    CBlockIndex* pindex = LookupBlockIndex(hash);\n+                    CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n                       if (::ChainstateActive().AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {"
      },
      {
        "sha": "1c3852d158b5220bba8ff360a44640e1be383357",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15d20f40e1321b24963b40c12958c7d30ad112ec/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15d20f40e1321b24963b40c12958c7d30ad112ec/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=15d20f40e1321b24963b40c12958c7d30ad112ec",
        "patch": "@@ -433,6 +433,8 @@ class BlockManager\n         const CChainParams& chainparams,\n         CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     ~BlockManager() {\n         Unload();\n     }"
      }
    ]
  },
  {
    "sha": "eae54e6e60d7ed05b29d8345c0bb055397149ce8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWU1NGU2ZTYwZDdlZDA1YjI5ZDgzNDVjMGJiMDU1Mzk3MTQ5Y2U4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T21:39:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "scripted-diff: Use BlockManager::LookupBlockIndex\n\n[META] In a previous commit, we moved ::LookupBlockIndex to become a\n       member function of BlockManager. This commit is split out from\n       that one since it can be expressed nicely as a scripted-diff.\n\n-BEGIN VERIFY SCRIPT-\nfind_regex='LookupBlockIndex' \\\n    && git grep -l -E \"$find_regex\" -- src \\\n        | grep -v '^src/validation\\.\\(cpp\\|h\\)$' \\\n        | xargs sed -i -E \"s@${find_regex}@g_chainman.m_blockman.LookupBlockIndex@g\"\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "ca337597b1656e3a68bb585d70eacd8868bdcd50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca337597b1656e3a68bb585d70eacd8868bdcd50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eae54e6e60d7ed05b29d8345c0bb055397149ce8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eae54e6e60d7ed05b29d8345c0bb055397149ce8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eae54e6e60d7ed05b29d8345c0bb055397149ce8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eae54e6e60d7ed05b29d8345c0bb055397149ce8/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15d20f40e1321b24963b40c12958c7d30ad112ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15d20f40e1321b24963b40c12958c7d30ad112ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15d20f40e1321b24963b40c12958c7d30ad112ec"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 55,
      "deletions": 55
    },
    "files": [
      {
        "sha": "505c9c45b7182777fd3bbf012c80f540ab02f58d",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -239,7 +239,7 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n     const CBlockIndex* locator_tip_index;\n     {\n         LOCK(cs_main);\n-        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+        locator_tip_index = g_chainman.m_blockman.LookupBlockIndex(locator_tip_hash);\n     }\n \n     if (!locator_tip_index) {"
      },
      {
        "sha": "cf6fad9982194bfcc193f69688895cafa0a44ab1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -1611,7 +1611,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n                 if (!chainman.BlockIndex().empty() &&\n-                        !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                        !g_chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n "
      },
      {
        "sha": "8f7bc669088e11a3ffb95dbbc6243f2bcbc469d4",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -45,7 +45,7 @@ void RegenerateCommitments(CBlock& block)\n     tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));\n     block.vtx.at(0) = MakeTransactionRef(tx);\n \n-    GenerateCoinbaseCommitment(block, WITH_LOCK(cs_main, return LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n+    GenerateCoinbaseCommitment(block, WITH_LOCK(cs_main, return g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n \n     block.hashMerkleRoot = BlockMerkleRoot(block);\n }"
      },
      {
        "sha": "6d96ccde63813d642bc4a362852d980513e12353",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -676,7 +676,7 @@ static void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_\n     assert(state != nullptr);\n \n     if (!state->hashLastUnknownBlock.IsNull()) {\n-        const CBlockIndex* pindex = LookupBlockIndex(state->hashLastUnknownBlock);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(state->hashLastUnknownBlock);\n         if (pindex && pindex->nChainWork > 0) {\n             if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n                 state->pindexBestKnownBlock = pindex;\n@@ -693,7 +693,7 @@ static void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) EXCLUSIV\n \n     ProcessBlockAvailability(nodeid);\n \n-    const CBlockIndex* pindex = LookupBlockIndex(hash);\n+    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n     if (pindex && pindex->nChainWork > 0) {\n         // An actually better block was announced.\n         if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n@@ -1595,7 +1595,7 @@ bool static AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& mempool) EXCLU\n \n bool static AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    return LookupBlockIndex(block_hash) != nullptr;\n+    return g_chainman.m_blockman.LookupBlockIndex(block_hash) != nullptr;\n }\n \n void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n@@ -1685,7 +1685,7 @@ void static ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& ch\n     bool need_activate_chain = false;\n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = LookupBlockIndex(inv.hash);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(inv.hash);\n         if (pindex) {\n             if (pindex->HaveTxsDownloaded() && !pindex->IsValid(BLOCK_VALID_SCRIPTS) &&\n                     pindex->IsValid(BLOCK_VALID_TREE)) {\n@@ -1706,7 +1706,7 @@ void static ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& ch\n     }\n \n     LOCK(cs_main);\n-    const CBlockIndex* pindex = LookupBlockIndex(inv.hash);\n+    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(inv.hash);\n     if (pindex) {\n         send = BlockRequestAllowed(pindex, consensusParams);\n         if (!send) {\n@@ -1996,7 +1996,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n         //   don't connect before giving DoS points\n         // - Once a headers message is received that is valid and does connect,\n         //   nUnconnectingHeaders gets reset back to 0.\n-        if (!LookupBlockIndex(headers[0].hashPrevBlock) && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), uint256()));\n             LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n@@ -2026,7 +2026,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n \n         // If we don't have the last header, then they'll have given us\n         // something new (if these headers are valid).\n-        if (!LookupBlockIndex(hashLastBlock)) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(hashLastBlock)) {\n             received_new_header = true;\n         }\n     }\n@@ -2278,7 +2278,7 @@ static bool PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_par\n \n     {\n         LOCK(cs_main);\n-        stop_index = LookupBlockIndex(stop_hash);\n+        stop_index = g_chainman.m_blockman.LookupBlockIndex(stop_hash);\n \n         // Check that the stop block exists and the peer would be allowed to fetch it.\n         if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n@@ -3021,7 +3021,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         {\n             LOCK(cs_main);\n \n-            const CBlockIndex* pindex = LookupBlockIndex(req.blockhash);\n+            const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(req.blockhash);\n             if (!pindex || !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n                 LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block we don't have\\n\", pfrom.GetId());\n                 return;\n@@ -3075,7 +3075,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (locator.IsNull())\n         {\n             // If locator is null, return the hashStop block\n-            pindex = LookupBlockIndex(hashStop);\n+            pindex = g_chainman.m_blockman.LookupBlockIndex(hashStop);\n             if (!pindex) {\n                 return;\n             }\n@@ -3352,14 +3352,14 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         {\n         LOCK(cs_main);\n \n-        if (!LookupBlockIndex(cmpctblock.header.hashPrevBlock)) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(cmpctblock.header.hashPrevBlock)) {\n             // Doesn't connect (or is genesis), instead of DoSing in AcceptBlockHeader, request deeper headers\n             if (!::ChainstateActive().IsInitialBlockDownload())\n                 m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), uint256()));\n             return;\n         }\n \n-        if (!LookupBlockIndex(cmpctblock.header.GetHash())) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(cmpctblock.header.GetHash())) {\n             received_new_header = true;\n         }\n         }\n@@ -4425,7 +4425,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 // then send all headers past that one.  If we come across any\n                 // headers that aren't on ::ChainActive(), give up.\n                 for (const uint256& hash : peer->m_blocks_for_headers_relay) {\n-                    const CBlockIndex* pindex = LookupBlockIndex(hash);\n+                    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n                     assert(pindex);\n                     if (::ChainActive()[pindex->nHeight] != pindex) {\n                         // Bail out if we reorged away from this block\n@@ -4517,7 +4517,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 // in the past.\n                 if (!peer->m_blocks_for_headers_relay.empty()) {\n                     const uint256& hashToAnnounce = peer->m_blocks_for_headers_relay.back();\n-                    const CBlockIndex* pindex = LookupBlockIndex(hashToAnnounce);\n+                    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hashToAnnounce);\n                     assert(pindex);\n \n                     // Warn if we're announcing a block that is not on the main chain."
      },
      {
        "sha": "56113cb731b77c40499ccbf9dbe0e85c811a1309",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -63,7 +63,7 @@ static bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, T hash_obj, const\n     stats.hashBlock = pcursor->GetBestBlock();\n     {\n         LOCK(cs_main);\n-        stats.nHeight = LookupBlockIndex(stats.hashBlock)->nHeight;\n+        stats.nHeight = g_chainman.m_blockman.LookupBlockIndex(stats.hashBlock)->nHeight;\n     }\n \n     PrepareHash(hash_obj, stats);"
      },
      {
        "sha": "e0bd07bc5a74ec9a1bc47283ca99f9c3bedf0d44",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -456,7 +456,7 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        return FillBlock(LookupBlockIndex(hash), block, lock, active);\n+        return FillBlock(g_chainman.m_blockman.LookupBlockIndex(hash), block, lock, active);\n     }\n     bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block) override\n     {\n@@ -468,7 +468,7 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        if (const CBlockIndex* block = LookupBlockIndex(block_hash)) {\n+        if (const CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(block_hash)) {\n             if (const CBlockIndex* ancestor = block->GetAncestor(ancestor_height)) {\n                 return FillBlock(ancestor, ancestor_out, lock, active);\n             }\n@@ -479,17 +479,17 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        const CBlockIndex* block = LookupBlockIndex(block_hash);\n-        const CBlockIndex* ancestor = LookupBlockIndex(ancestor_hash);\n+        const CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(block_hash);\n+        const CBlockIndex* ancestor = g_chainman.m_blockman.LookupBlockIndex(ancestor_hash);\n         if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n         return FillBlock(ancestor, ancestor_out, lock, active);\n     }\n     bool findCommonAncestor(const uint256& block_hash1, const uint256& block_hash2, const FoundBlock& ancestor_out, const FoundBlock& block1_out, const FoundBlock& block2_out) override\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n-        const CBlockIndex* block2 = LookupBlockIndex(block_hash2);\n+        const CBlockIndex* block1 = g_chainman.m_blockman.LookupBlockIndex(block_hash1);\n+        const CBlockIndex* block2 = g_chainman.m_blockman.LookupBlockIndex(block_hash2);\n         const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n         // Using & instead of && below to avoid short circuiting and leaving\n         // output uninitialized.\n@@ -499,7 +499,7 @@ class ChainImpl : public Chain\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);\n-        return GuessVerificationProgress(Params().TxData(), LookupBlockIndex(block_hash));\n+        return GuessVerificationProgress(Params().TxData(), g_chainman.m_blockman.LookupBlockIndex(block_hash));\n     }\n     bool hasBlocks(const uint256& block_hash, int min_height, Optional<int> max_height) override\n     {\n@@ -511,7 +511,7 @@ class ChainImpl : public Chain\n         // used to limit the range, and passing min_height that's too low or\n         // max_height that's too high will not crash or change the result.\n         LOCK(::cs_main);\n-        if (CBlockIndex* block = LookupBlockIndex(block_hash)) {\n+        if (CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(block_hash)) {\n             if (max_height && block->nHeight >= *max_height) block = block->GetAncestor(*max_height);\n             for (; block->nStatus & BLOCK_HAVE_DATA; block = block->pprev) {\n                 // Check pprev to not segfault if min_height is too low"
      },
      {
        "sha": "f872f6e59d655f824c6f120886b4fb35e02a65c9",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -179,7 +179,7 @@ static bool rest_headers(const util::Ref& context,\n     {\n         LOCK(cs_main);\n         tip = ::ChainActive().Tip();\n-        const CBlockIndex* pindex = LookupBlockIndex(hash);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n             headers.push_back(pindex);\n             if (headers.size() == (unsigned long)count)\n@@ -247,7 +247,7 @@ static bool rest_block(HTTPRequest* req,\n     {\n         LOCK(cs_main);\n         tip = ::ChainActive().Tip();\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n         }"
      },
      {
        "sha": "5d2922486b0ec3a429160f9371f855f659f44a6c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -843,7 +843,7 @@ static RPCHelpMan getblockheader()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         tip = ::ChainActive().Tip();\n     }\n \n@@ -967,7 +967,7 @@ static RPCHelpMan getblock()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         tip = ::ChainActive().Tip();\n \n         if (!pblockindex) {\n@@ -1164,7 +1164,7 @@ static RPCHelpMan gettxout()\n         }\n     }\n \n-    const CBlockIndex* pindex = LookupBlockIndex(coins_view->GetBestBlock());\n+    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(coins_view->GetBestBlock());\n     ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n         ret.pushKV(\"confirmations\", 0);\n@@ -1557,7 +1557,7 @@ static RPCHelpMan preciousblock()\n \n     {\n         LOCK(cs_main);\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -1595,7 +1595,7 @@ static RPCHelpMan invalidateblock()\n     CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n-        pblockindex = LookupBlockIndex(hash);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -1634,7 +1634,7 @@ static RPCHelpMan reconsiderblock()\n \n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = LookupBlockIndex(hash);\n+        CBlockIndex* pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -1689,7 +1689,7 @@ static RPCHelpMan getchaintxstats()\n     } else {\n         uint256 hash(ParseHashV(request.params[1], \"blockhash\"));\n         LOCK(cs_main);\n-        pindex = LookupBlockIndex(hash);\n+        pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -1867,7 +1867,7 @@ static RPCHelpMan getblockstats()\n         pindex = ::ChainActive()[height];\n     } else {\n         const uint256 hash(ParseHashV(request.params[0], \"hash_or_height\"));\n-        pindex = LookupBlockIndex(hash);\n+        pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -2330,7 +2330,7 @@ static RPCHelpMan getblockfilter()\n     bool block_was_connected;\n     {\n         LOCK(cs_main);\n-        block_index = LookupBlockIndex(block_hash);\n+        block_index = g_chainman.m_blockman.LookupBlockIndex(block_hash);\n         if (!block_index) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -2440,7 +2440,7 @@ static RPCHelpMan dumptxoutset()\n         }\n \n         pcursor = std::unique_ptr<CCoinsViewCursor>(::ChainstateActive().CoinsDB().Cursor());\n-        tip = LookupBlockIndex(stats.hashBlock);\n+        tip = g_chainman.m_blockman.LookupBlockIndex(stats.hashBlock);\n         CHECK_NONFATAL(tip);\n     }\n "
      },
      {
        "sha": "4de1ce2cb4742e9b19ca3cd02c4ac8ad6440416a",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -375,7 +375,7 @@ static RPCHelpMan generateblock()\n         LOCK(cs_main);\n \n         BlockValidationState state;\n-        if (!TestBlockValidity(state, chainparams, block, LookupBlockIndex(block.hashPrevBlock), false, false)) {\n+        if (!TestBlockValidity(state, chainparams, block, g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", state.ToString()));\n         }\n     }\n@@ -618,7 +618,7 @@ static RPCHelpMan getblocktemplate()\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n             uint256 hash = block.GetHash();\n-            const CBlockIndex* pindex = LookupBlockIndex(hash);\n+            const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n             if (pindex) {\n                 if (pindex->IsValid(BLOCK_VALID_SCRIPTS))\n                     return \"duplicate\";\n@@ -966,7 +966,7 @@ static RPCHelpMan submitblock()\n     uint256 hash = block.GetHash();\n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = LookupBlockIndex(hash);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n         if (pindex) {\n             if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n                 return \"duplicate\";\n@@ -979,7 +979,7 @@ static RPCHelpMan submitblock()\n \n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = LookupBlockIndex(block.hashPrevBlock);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n         if (pindex) {\n             UpdateUncommittedBlockStructures(block, pindex, Params().GetConsensus());\n         }\n@@ -1023,7 +1023,7 @@ static RPCHelpMan submitheader()\n     }\n     {\n         LOCK(cs_main);\n-        if (!LookupBlockIndex(h.hashPrevBlock)) {\n+        if (!g_chainman.m_blockman.LookupBlockIndex(h.hashPrevBlock)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, \"Must submit previous header (\" + h.hashPrevBlock.GetHex() + \") first\");\n         }\n     }"
      },
      {
        "sha": "7b9cab75d6c19b2520e952932cd12b61bf0200b2",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -54,7 +54,7 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n         LOCK(cs_main);\n \n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n-        CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n+        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (pindex) {\n             if (::ChainActive().Contains(pindex)) {\n                 entry.pushKV(\"confirmations\", 1 + ::ChainActive().Height() - pindex->nHeight);\n@@ -178,7 +178,7 @@ static RPCHelpMan getrawtransaction()\n         LOCK(cs_main);\n \n         uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n-        blockindex = LookupBlockIndex(blockhash);\n+        blockindex = g_chainman.m_blockman.LookupBlockIndex(blockhash);\n         if (!blockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n         }\n@@ -260,7 +260,7 @@ static RPCHelpMan gettxoutproof()\n     if (!request.params[1].isNull()) {\n         LOCK(cs_main);\n         hashBlock = ParseHashV(request.params[1], \"blockhash\");\n-        pblockindex = LookupBlockIndex(hashBlock);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -290,7 +290,7 @@ static RPCHelpMan gettxoutproof()\n         if (!tx || hashBlock.IsNull()) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n         }\n-        pblockindex = LookupBlockIndex(hashBlock);\n+        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");\n         }\n@@ -350,7 +350,7 @@ static RPCHelpMan verifytxoutproof()\n \n     LOCK(cs_main);\n \n-    const CBlockIndex* pindex = LookupBlockIndex(merkleBlock.header.GetHash());\n+    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(merkleBlock.header.GetHash());\n     if (!pindex || !::ChainActive().Contains(pindex) || pindex->nTx == 0) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n     }"
      },
      {
        "sha": "633a95ce96e0ffc97164ffaa8a37652ec9db65f4",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -178,7 +178,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = LookupBlockIndex(block->GetHash());\n+            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -196,7 +196,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = LookupBlockIndex(block->GetHash());\n+            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -210,7 +210,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = LookupBlockIndex(block->GetHash());\n+            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -231,14 +231,14 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n \n          {\n              LOCK(cs_main);\n-             block_index = LookupBlockIndex(chainA[i]->GetHash());\n+             block_index = g_chainman.m_blockman.LookupBlockIndex(chainA[i]->GetHash());\n          }\n          BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainA_last_header);\n \n          {\n              LOCK(cs_main);\n-             block_index = LookupBlockIndex(chainB[i]->GetHash());\n+             block_index = g_chainman.m_blockman.LookupBlockIndex(chainB[i]->GetHash());\n          }\n          BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainB_last_header);"
      },
      {
        "sha": "ec45d9a4346304f5d06f2e72c68d519052256b2c",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eae54e6e60d7ed05b29d8345c0bb055397149ce8/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "patch": "@@ -95,8 +95,8 @@ std::shared_ptr<CBlock> MinerTestingSetup::Block(const uint256& prev_hash)\n \n std::shared_ptr<CBlock> MinerTestingSetup::FinalizeBlock(std::shared_ptr<CBlock> pblock)\n {\n-    LOCK(cs_main); // For LookupBlockIndex\n-    GenerateCoinbaseCommitment(*pblock, LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n+    LOCK(cs_main); // For g_chainman.m_blockman.LookupBlockIndex\n+    GenerateCoinbaseCommitment(*pblock, g_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n \n     pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n "
      }
    ]
  },
  {
    "sha": "3664a150ac7547c9336b571557af223d9e31aac9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjY0YTE1MGFjNzU0N2M5MzM2YjU3MTU1N2FmMjIzZDllMzFhYWM5",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-26T19:27:24Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Remove global LookupBlockIndex",
      "tree": {
        "sha": "7fdc5b2030c92b6f675b58c870fed0d8a7f06a71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fdc5b2030c92b6f675b58c870fed0d8a7f06a71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3664a150ac7547c9336b571557af223d9e31aac9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3664a150ac7547c9336b571557af223d9e31aac9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3664a150ac7547c9336b571557af223d9e31aac9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3664a150ac7547c9336b571557af223d9e31aac9/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eae54e6e60d7ed05b29d8345c0bb055397149ce8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eae54e6e60d7ed05b29d8345c0bb055397149ce8"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cabceca91baba1aa76f4e9d1d33d21eacb8ca15c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3664a150ac7547c9336b571557af223d9e31aac9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3664a150ac7547c9336b571557af223d9e31aac9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3664a150ac7547c9336b571557af223d9e31aac9",
        "patch": "@@ -167,11 +167,6 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n-CBlockIndex* LookupBlockIndex(const uint256& hash)\n-{\n-    return g_chainman.m_blockman.LookupBlockIndex(hash);\n-}\n-\n CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "e829c0c1c54db8e89530cf186be215ebf0900094",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3664a150ac7547c9336b571557af223d9e31aac9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3664a150ac7547c9336b571557af223d9e31aac9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3664a150ac7547c9336b571557af223d9e31aac9",
        "patch": "@@ -311,8 +311,6 @@ class CVerifyDB {\n     bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n-CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      }
    ]
  },
  {
    "sha": "b026e318c39f59a06e29f1b25c7f577e01b25ccb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDI2ZTMxOGMzOWY1OWEwNmUyOWYxYjI1YzdmNTc3ZTAxYjI1Y2Ni",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T20:40:21Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Move FindForkInGlobalIndex to BlockManager\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nFindForkInGlobalIndex only acts on BlockManager.\n\nNote to reviewers: Since FindForkInGlobalIndex is always called with\n::ChainActive() as its first parameter, it is possible to move\nFindForkInGlobalIndex to CChainState and remove this const CChain&\nparameter to instead use m_chain. However, it seems like the original\nintention was for FindForkInGlobalIndex to work with _any_ chain, not\njust the current active chain. Let me know if this should be changed.",
      "tree": {
        "sha": "f47575cf7c0ecbd69ae57817cc39a8b2f5fe02c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f47575cf7c0ecbd69ae57817cc39a8b2f5fe02c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b026e318c39f59a06e29f1b25c7f577e01b25ccb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b026e318c39f59a06e29f1b25c7f577e01b25ccb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b026e318c39f59a06e29f1b25c7f577e01b25ccb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b026e318c39f59a06e29f1b25c7f577e01b25ccb/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3664a150ac7547c9336b571557af223d9e31aac9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3664a150ac7547c9336b571557af223d9e31aac9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3664a150ac7547c9336b571557af223d9e31aac9"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3d3dda95b10dac7f7144e26a7ee08227d3337ba3",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=b026e318c39f59a06e29f1b25c7f577e01b25ccb",
        "patch": "@@ -62,7 +62,7 @@ bool BaseIndex::Init()\n     if (locator.IsNull()) {\n         m_best_block_index = nullptr;\n     } else {\n-        m_best_block_index = FindForkInGlobalIndex(::ChainActive(), locator);\n+        m_best_block_index = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n     }\n     m_synced = m_best_block_index.load() == ::ChainActive().Tip();\n     return true;"
      },
      {
        "sha": "fb013a0deb20d8f3fc62ef06a937288b095ac311",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b026e318c39f59a06e29f1b25c7f577e01b25ccb",
        "patch": "@@ -2968,7 +2968,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         LOCK(cs_main);\n \n         // Find the last block the caller has in the main chain\n-        const CBlockIndex* pindex = FindForkInGlobalIndex(::ChainActive(), locator);\n+        const CBlockIndex* pindex = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n \n         // Send the rest of the chain\n         if (pindex)\n@@ -3088,7 +3088,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         else\n         {\n             // Find the last block the caller has in the main chain\n-            pindex = FindForkInGlobalIndex(::ChainActive(), locator);\n+            pindex = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n             if (pindex)\n                 pindex = ::ChainActive().Next(pindex);\n         }"
      },
      {
        "sha": "b7efd68cfd8b076306ad82d01ccd16f7709a8940",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=b026e318c39f59a06e29f1b25c7f577e01b25ccb",
        "patch": "@@ -447,7 +447,7 @@ class ChainImpl : public Chain\n     {\n         LOCK(cs_main);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        if (CBlockIndex* fork = FindForkInGlobalIndex(active, locator)) {\n+        if (CBlockIndex* fork = g_chainman.m_blockman.FindForkInGlobalIndex(active, locator)) {\n             return fork->nHeight;\n         }\n         return nullopt;"
      },
      {
        "sha": "69207fb529e2e826d7e345076fad05675bccc2d3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b026e318c39f59a06e29f1b25c7f577e01b25ccb",
        "patch": "@@ -175,14 +175,15 @@ CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash)\n     return it == m_block_index.end() ? nullptr : it->second;\n }\n \n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n+CBlockIndex* BlockManager::FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     AssertLockHeld(cs_main);\n \n+    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n     // Find the latest block common to locator and chain - we expect that\n     // locator.vHave is sorted descending by height.\n     for (const uint256& hash : locator.vHave) {\n-        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        CBlockIndex* pindex = LookupBlockIndex(hash);\n         if (pindex) {\n             if (chain.Contains(pindex))\n                 return pindex;"
      },
      {
        "sha": "d8b6a656528f3ec285ebe48520abacb3c4f75215",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b026e318c39f59a06e29f1b25c7f577e01b25ccb/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b026e318c39f59a06e29f1b25c7f577e01b25ccb",
        "patch": "@@ -311,9 +311,6 @@ class CVerifyDB {\n     bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n-/** Find the last common block between the parameter chain and a locator. */\n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n enum DisconnectResult\n {\n     DISCONNECT_OK,      // All good.\n@@ -433,6 +430,9 @@ class BlockManager\n \n     CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /** Find the last common block between the parameter chain and a locator. */\n+    CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     ~BlockManager() {\n         Unload();\n     }"
      }
    ]
  },
  {
    "sha": "e4b95eefbc700ebc915bec312f77477ce3e87a7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGI5NWVlZmJjNzAwZWJjOTE1YmVjMzEyZjc3NDc3Y2UzZTg3YTdl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T21:11:32Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Move GetSpendHeight to BlockManager\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nGetSpendHeight only acts on BlockManager.",
      "tree": {
        "sha": "b04b3effd3a1c27b2cddae75ded9ec262982bd96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b04b3effd3a1c27b2cddae75ded9ec262982bd96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4b95eefbc700ebc915bec312f77477ce3e87a7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4b95eefbc700ebc915bec312f77477ce3e87a7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4b95eefbc700ebc915bec312f77477ce3e87a7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4b95eefbc700ebc915bec312f77477ce3e87a7e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b026e318c39f59a06e29f1b25c7f577e01b25ccb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b026e318c39f59a06e29f1b25c7f577e01b25ccb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b026e318c39f59a06e29f1b25c7f577e01b25ccb"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c370f9e98195d484a061dc188e92be2fb7d3926a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4b95eefbc700ebc915bec312f77477ce3e87a7e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4b95eefbc700ebc915bec312f77477ce3e87a7e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e4b95eefbc700ebc915bec312f77477ce3e87a7e",
        "patch": "@@ -626,7 +626,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n-    const int64_t spendheight = GetSpendHeight(mempoolDuplicate);\n+    const int64_t spendheight = g_chainman.m_blockman.GetSpendHeight(mempoolDuplicate);\n \n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {"
      },
      {
        "sha": "7e3957d8d8a849eac4bdd55dbba210e6894a6eb5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4b95eefbc700ebc915bec312f77477ce3e87a7e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4b95eefbc700ebc915bec312f77477ce3e87a7e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e4b95eefbc700ebc915bec312f77477ce3e87a7e",
        "patch": "@@ -684,7 +684,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n     CAmount nFees = 0;\n-    if (!Consensus::CheckTxInputs(tx, state, m_view, GetSpendHeight(m_view), nFees)) {\n+    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), nFees)) {\n         return false; // state filled in by CheckTxInputs\n     }\n \n@@ -1412,10 +1412,11 @@ bool CScriptCheck::operator()() {\n     return VerifyScript(scriptSig, m_tx_out.scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, m_tx_out.nValue, cacheStore, *txdata), &error);\n }\n \n-int GetSpendHeight(const CCoinsViewCache& inputs)\n+int BlockManager::GetSpendHeight(const CCoinsViewCache& inputs)\n {\n-    LOCK(cs_main);\n-    CBlockIndex* pindexPrev = g_chainman.m_blockman.LookupBlockIndex(inputs.GetBestBlock());\n+    AssertLockHeld(cs_main);\n+    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n+    CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n     return pindexPrev->nHeight + 1;\n }\n "
      },
      {
        "sha": "a58d06c194e9bccfce7ac53337625605c165282f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4b95eefbc700ebc915bec312f77477ce3e87a7e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4b95eefbc700ebc915bec312f77477ce3e87a7e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e4b95eefbc700ebc915bec312f77477ce3e87a7e",
        "patch": "@@ -433,6 +433,13 @@ class BlockManager\n     /** Find the last common block between the parameter chain and a locator. */\n     CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Return the spend height, which is one more than the inputs.GetBestBlock().\n+     * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)\n+     * This is also true for mempool checks.\n+     */\n+    int GetSpendHeight(const CCoinsViewCache& inputs) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     ~BlockManager() {\n         Unload();\n     }\n@@ -945,13 +952,6 @@ CChain& ChainActive();\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n-/**\n- * Return the spend height, which is one more than the inputs.GetBestBlock().\n- * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)\n- * This is also true for mempool checks.\n- */\n-int GetSpendHeight(const CCoinsViewCache& inputs);\n-\n extern VersionBitsCache versionbitscache;\n \n /**"
      }
    ]
  },
  {
    "sha": "f11d11600ddb0ddff6538250ae2a35df6112c3db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTFkMTE2MDBkZGIwZGRmZjY1MzgyNTBhZTJhMzVkZjYxMTJjM2Ri",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T20:53:30Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Move GetLastCheckpoint to BlockManager\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nGetLastCheckPoint mainly acts on BlockManager.",
      "tree": {
        "sha": "2a4f6863b2044a6bd8292670bccf911c80e56f1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a4f6863b2044a6bd8292670bccf911c80e56f1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f11d11600ddb0ddff6538250ae2a35df6112c3db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f11d11600ddb0ddff6538250ae2a35df6112c3db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f11d11600ddb0ddff6538250ae2a35df6112c3db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f11d11600ddb0ddff6538250ae2a35df6112c3db/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4b95eefbc700ebc915bec312f77477ce3e87a7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4b95eefbc700ebc915bec312f77477ce3e87a7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4b95eefbc700ebc915bec312f77477ce3e87a7e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "53034362903db542e76c8f4f25e8dc4144d19760",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f11d11600ddb0ddff6538250ae2a35df6112c3db/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f11d11600ddb0ddff6538250ae2a35df6112c3db/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f11d11600ddb0ddff6538250ae2a35df6112c3db",
        "patch": "@@ -3401,15 +3401,15 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     return commitment;\n }\n \n-//! Returns last CBlockIndex* that is a checkpoint\n-static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+CBlockIndex* BlockManager::GetLastCheckpoint(const CCheckpointData& data)\n {\n     const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n     for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n     {\n         const uint256& hash = i.second;\n-        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n+        CBlockIndex* pindex = LookupBlockIndex(hash);\n         if (pindex) {\n             return pindex;\n         }\n@@ -3441,7 +3441,7 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // BlockIndex().\n-        CBlockIndex* pcheckpoint = GetLastCheckpoint(params.Checkpoints());\n+        CBlockIndex* pcheckpoint = g_chainman.m_blockman.GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n             LogPrintf(\"ERROR: %s: forked chain older than last checkpoint (height %d)\\n\", __func__, nHeight);\n             return state.Invalid(BlockValidationResult::BLOCK_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");"
      },
      {
        "sha": "d39c02f79558097735579e5992e3eb2a313f038f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f11d11600ddb0ddff6538250ae2a35df6112c3db/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f11d11600ddb0ddff6538250ae2a35df6112c3db/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f11d11600ddb0ddff6538250ae2a35df6112c3db",
        "patch": "@@ -40,6 +40,7 @@ class CBlockIndex;\n class CBlockTreeDB;\n class CBlockUndo;\n class CChainParams;\n+class CCheckpointData;\n class CInv;\n class CConnman;\n class CScriptCheck;\n@@ -433,6 +434,9 @@ class BlockManager\n     /** Find the last common block between the parameter chain and a locator. */\n     CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    //! Returns last CBlockIndex* that is a checkpoint\n+    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     /**\n      * Return the spend height, which is one more than the inputs.GetBestBlock().\n      * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)"
      }
    ]
  },
  {
    "sha": "d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzYzZDA2YmY3ZDZjMzczNjE0MDY3MmJhOGE3ZjgyZjRkNmZiNmFi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-30T20:59:25Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Pass in blockman to ContextualCheckBlockHeader\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "ba6a2daec7bd43d372f8c76fd9251bc3930460c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba6a2daec7bd43d372f8c76fd9251bc3930460c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f11d11600ddb0ddff6538250ae2a35df6112c3db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f11d11600ddb0ddff6538250ae2a35df6112c3db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f11d11600ddb0ddff6538250ae2a35df6112c3db"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fe08c37b8f47bc7b37e2d8c2180b826d4dda89de",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab",
        "patch": "@@ -3426,7 +3426,7 @@ CBlockIndex* BlockManager::GetLastCheckpoint(const CCheckpointData& data)\n  *  in ConnectBlock().\n  *  Note that -reindex-chainstate skips the validation that happens here!\n  */\n-static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidationState& state, BlockManager& blockman, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     assert(pindexPrev != nullptr);\n     const int nHeight = pindexPrev->nHeight + 1;\n@@ -3441,7 +3441,8 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // BlockIndex().\n-        CBlockIndex* pcheckpoint = g_chainman.m_blockman.GetLastCheckpoint(params.Checkpoints());\n+        assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n+        CBlockIndex* pcheckpoint = blockman.GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n             LogPrintf(\"ERROR: %s: forked chain older than last checkpoint (height %d)\\n\", __func__, nHeight);\n             return state.Invalid(BlockValidationResult::BLOCK_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n@@ -3592,7 +3593,7 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n             LogPrintf(\"ERROR: %s: prev block invalid\\n\", __func__);\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_PREV, \"bad-prevblk\");\n         }\n-        if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n+        if (!ContextualCheckBlockHeader(block, state, *this, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), state.ToString());\n \n         /* Determine if this block descends from any block which has been found\n@@ -3820,7 +3821,7 @@ bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainpar\n     indexDummy.phashBlock = &block_hash;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n+    if (!ContextualCheckBlockHeader(block, state, g_chainman.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, state.ToString());\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());"
      }
    ]
  },
  {
    "sha": "0e17c833cda67cdba5338bd7409061772b6d5edb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTE3YzgzM2NkYTY3Y2RiYTUzMzhiZDc0MDkwNjE3NzJiNmQ1ZWRi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-02T20:05:54Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Make CChainState.m_blockman public",
      "tree": {
        "sha": "652cc3c418043d00b816b565b3d1ba2ebacd5373",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/652cc3c418043d00b816b565b3d1ba2ebacd5373"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e17c833cda67cdba5338bd7409061772b6d5edb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e17c833cda67cdba5338bd7409061772b6d5edb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e17c833cda67cdba5338bd7409061772b6d5edb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e17c833cda67cdba5338bd7409061772b6d5edb/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d363d06bf7d6c3736140672ba8a7f82f4d6fb6ab"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3a9ad5844e8db7ee583cf2d1c3b217d67f44953b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e17c833cda67cdba5338bd7409061772b6d5edb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e17c833cda67cdba5338bd7409061772b6d5edb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0e17c833cda67cdba5338bd7409061772b6d5edb",
        "patch": "@@ -1264,8 +1264,8 @@ void CoinsViews::InitCache()\n }\n \n CChainState::CChainState(CTxMemPool& mempool, BlockManager& blockman, uint256 from_snapshot_blockhash)\n-    : m_blockman(blockman),\n-      m_mempool(mempool),\n+    : m_mempool(mempool),\n+      m_blockman(blockman),\n       m_from_snapshot_blockhash(from_snapshot_blockhash) {}\n \n void CChainState::InitCoinsDB("
      },
      {
        "sha": "ad5cbe019eeafce334a4715415cca085fe2cc987",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e17c833cda67cdba5338bd7409061772b6d5edb/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e17c833cda67cdba5338bd7409061772b6d5edb/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0e17c833cda67cdba5338bd7409061772b6d5edb",
        "patch": "@@ -536,18 +536,17 @@ class CChainState\n      */\n     mutable std::atomic<bool> m_cached_finished_ibd{false};\n \n-    //! Reference to a BlockManager instance which itself is shared across all\n-    //! CChainState instances. Keeping a local reference allows us to test more\n-    //! easily as opposed to referencing a global.\n-    BlockManager& m_blockman;\n-\n     //! mempool that is kept in sync with the chain\n     CTxMemPool& m_mempool;\n \n     //! Manages the UTXO set, which is a reflection of the contents of `m_chain`.\n     std::unique_ptr<CoinsViews> m_coins_views;\n \n public:\n+    //! Reference to a BlockManager instance which itself is shared across all\n+    //! CChainState instances.\n+    BlockManager& m_blockman;\n+\n     explicit CChainState(CTxMemPool& mempool, BlockManager& blockman, uint256 from_snapshot_blockhash = uint256());\n \n     /**"
      }
    ]
  },
  {
    "sha": "9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzMwMGNjOGIzY2UzZDgyODc0OTgyZmJmMzA4N2U0OGE2YWMwZWYy",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-30T21:02:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Pass in chainstate to TestBlockValidity\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "c97b5a6ae6098a87906879fcf2d19224a1a9c1a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c97b5a6ae6098a87906879fcf2d19224a1a9c1a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e17c833cda67cdba5338bd7409061772b6d5edb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e17c833cda67cdba5338bd7409061772b6d5edb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e17c833cda67cdba5338bd7409061772b6d5edb"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 11,
      "deletions": 9
    },
    "files": [
      {
        "sha": "076d43c951cd3f423ced7ed69b039c00ab4b7f5d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
        "patch": "@@ -176,7 +176,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     BlockValidationState state;\n-    if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false)) {\n+    if (!TestBlockValidity(state, chainparams, ::ChainstateActive(), *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }\n     int64_t nTime2 = GetTimeMicros();"
      },
      {
        "sha": "da73d38af22330dfc3460d591dd18e680c838f0c",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
        "patch": "@@ -375,7 +375,7 @@ static RPCHelpMan generateblock()\n         LOCK(cs_main);\n \n         BlockValidationState state;\n-        if (!TestBlockValidity(state, chainparams, block, g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n+        if (!TestBlockValidity(state, chainparams, ::ChainstateActive(), block, g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", state.ToString()));\n         }\n     }\n@@ -632,7 +632,7 @@ static RPCHelpMan getblocktemplate()\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             BlockValidationState state;\n-            TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), ::ChainstateActive(), block, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n "
      },
      {
        "sha": "f7aca45e66f0869aa18e0f953859fce68abc69c2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
        "patch": "@@ -3809,25 +3809,27 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n     return true;\n }\n \n-bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, CChainState& chainstate, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n-    assert(pindexPrev && pindexPrev == ::ChainActive().Tip());\n-    CCoinsViewCache viewNew(&::ChainstateActive().CoinsTip());\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n+    assert(pindexPrev && pindexPrev == chainstate.m_chain.Tip());\n+    CCoinsViewCache viewNew(&chainstate.CoinsTip());\n     uint256 block_hash(block.GetHash());\n     CBlockIndex indexDummy(block);\n     indexDummy.pprev = pindexPrev;\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n     indexDummy.phashBlock = &block_hash;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, g_chainman.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))\n+    assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainstate.m_blockman));\n+    if (!ContextualCheckBlockHeader(block, state, chainstate.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, state.ToString());\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, state.ToString());\n     if (!ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindexPrev))\n         return error(\"%s: Consensus::ContextualCheckBlock: %s\", __func__, state.ToString());\n-    if (!::ChainstateActive().ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n+    if (!chainstate.ConnectBlock(block, state, &indexDummy, viewNew, chainparams, true))\n         return false;\n     assert(state.IsValid());\n "
      },
      {
        "sha": "10a2f8f804530d25c8faf60303d8bb38e4471c93",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
        "patch": "@@ -292,7 +292,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex);\n bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block) */\n-bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, CChainState& chainstate, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Check whether witness commitments are required for a block, and whether to enforce NULLDUMMY (BIP 147) rules.\n  *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */"
      }
    ]
  },
  {
    "sha": "2a696472a1423e877bfa83f016f66c7e45be7369",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTY5NjQ3MmExNDIzZTg3N2JmYTgzZjAxNmY2NmM3ZTQ1YmU3MzY5",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-15T20:06:45Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Pass in chainstate to ::NotifyHeaderTip\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "ed4edda50fbdf988293e55c0e15faae505b278e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed4edda50fbdf988293e55c0e15faae505b278e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a696472a1423e877bfa83f016f66c7e45be7369",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a696472a1423e877bfa83f016f66c7e45be7369",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a696472a1423e877bfa83f016f66c7e45be7369",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a696472a1423e877bfa83f016f66c7e45be7369/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c300cc8b3ce3d82874982fbf3087e48a6ac0ef2"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "16245cae8d135fb86fba35ea71f8abbf7e0213ac",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a696472a1423e877bfa83f016f66c7e45be7369/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a696472a1423e877bfa83f016f66c7e45be7369/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2a696472a1423e877bfa83f016f66c7e45be7369",
        "patch": "@@ -2770,7 +2770,7 @@ static SynchronizationState GetSynchronizationState(bool init)\n     return SynchronizationState::INIT_DOWNLOAD;\n }\n \n-static bool NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n+static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\n     bool fNotify = false;\n     bool fInitialBlockDownload = false;\n     static CBlockIndex* pindexHeaderOld = nullptr;\n@@ -2781,7 +2781,8 @@ static bool NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n-            fInitialBlockDownload = ::ChainstateActive().IsInitialBlockDownload();\n+            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n+            fInitialBlockDownload = chainstate.IsInitialBlockDownload();\n             pindexHeaderOld = pindexHeader;\n         }\n     }\n@@ -3664,7 +3665,7 @@ bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>&\n             }\n         }\n     }\n-    if (NotifyHeaderTip()) {\n+    if (NotifyHeaderTip(::ChainstateActive())) {\n         if (::ChainstateActive().IsInitialBlockDownload() && ppindex && *ppindex) {\n             LogPrintf(\"Synchronizing blockheaders, height: %d (~%.2f%%)\\n\", (*ppindex)->nHeight, 100.0/((*ppindex)->nHeight+(GetAdjustedTime() - (*ppindex)->GetBlockTime()) / Params().GetConsensus().nPowTargetSpacing) * (*ppindex)->nHeight);\n         }\n@@ -3800,7 +3801,7 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n         }\n     }\n \n-    NotifyHeaderTip();\n+    NotifyHeaderTip(::ChainstateActive());\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n     if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n@@ -4685,7 +4686,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     }\n                 }\n \n-                NotifyHeaderTip();\n+                NotifyHeaderTip(::ChainstateActive());\n \n                 // Recursively process earlier encountered successors of this block\n                 std::deque<uint256> queue;\n@@ -4711,7 +4712,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                         }\n                         range.first++;\n                         mapBlocksUnknownParent.erase(it);\n-                        NotifyHeaderTip();\n+                        NotifyHeaderTip(::ChainstateActive());\n                     }\n                 }\n             } catch (const std::exception& e) {"
      }
    ]
  },
  {
    "sha": "5f8cd7b3a527999512161956db4d718688cb956f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjhjZDdiM2E1Mjc5OTk1MTIxNjE5NTZkYjRkNzE4Njg4Y2I5NTZm",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-15T19:26:36Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Remove global ::ActivateBestChain\n\nInstead use CChainState::ActivateBestChain, which is what the global one\ncalls anyway.",
      "tree": {
        "sha": "b90e409cee9deb189cad076e0cfde747525666c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b90e409cee9deb189cad076e0cfde747525666c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f8cd7b3a527999512161956db4d718688cb956f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f8cd7b3a527999512161956db4d718688cb956f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f8cd7b3a527999512161956db4d718688cb956f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f8cd7b3a527999512161956db4d718688cb956f/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a696472a1423e877bfa83f016f66c7e45be7369",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a696472a1423e877bfa83f016f66c7e45be7369",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a696472a1423e877bfa83f016f66c7e45be7369"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 9,
      "deletions": 18
    },
    "files": [
      {
        "sha": "087f35251a7bf6bc3444e69d646b0e25d7cd5d04",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f8cd7b3a527999512161956db4d718688cb956f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f8cd7b3a527999512161956db4d718688cb956f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5f8cd7b3a527999512161956db4d718688cb956f",
        "patch": "@@ -1700,7 +1700,7 @@ void static ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& ch\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n         BlockValidationState state;\n-        if (!ActivateBestChain(state, chainparams, a_recent_block)) {\n+        if (!::ChainstateActive().ActivateBestChain(state, chainparams, a_recent_block)) {\n             LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n         }\n     }\n@@ -2960,7 +2960,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 a_recent_block = most_recent_block;\n             }\n             BlockValidationState state;\n-            if (!ActivateBestChain(state, m_chainparams, a_recent_block)) {\n+            if (!::ChainstateActive().ActivateBestChain(state, m_chainparams, a_recent_block)) {\n                 LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n             }\n         }"
      },
      {
        "sha": "16a8f408892432886f0d639450892ebef3402db8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f8cd7b3a527999512161956db4d718688cb956f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f8cd7b3a527999512161956db4d718688cb956f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5f8cd7b3a527999512161956db4d718688cb956f",
        "patch": "@@ -1603,7 +1603,7 @@ static RPCHelpMan invalidateblock()\n     InvalidateBlock(state, Params(), pblockindex);\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state, Params());\n+        ::ChainstateActive().ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {\n@@ -1643,7 +1643,7 @@ static RPCHelpMan reconsiderblock()\n     }\n \n     BlockValidationState state;\n-    ActivateBestChain(state, Params());\n+    ::ChainstateActive().ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());"
      },
      {
        "sha": "dcd388d6252b30f505ca473d537a1752152145b1",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f8cd7b3a527999512161956db4d718688cb956f/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f8cd7b3a527999512161956db4d718688cb956f/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=5f8cd7b3a527999512161956db4d718688cb956f",
        "patch": "@@ -185,7 +185,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     }\n \n     BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n+    if (!::ChainstateActive().ActivateBestChain(state, chainparams)) {\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n "
      },
      {
        "sha": "70e01cfdddc2b780c9364b3cde0136bfcb0c0586",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f8cd7b3a527999512161956db4d718688cb956f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f8cd7b3a527999512161956db4d718688cb956f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5f8cd7b3a527999512161956db4d718688cb956f",
        "patch": "@@ -2899,10 +2899,6 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n     return true;\n }\n \n-bool ActivateBestChain(BlockValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n-    return ::ChainstateActive().ActivateBestChain(state, chainparams, std::move(pblock));\n-}\n-\n bool CChainState::PreciousBlock(BlockValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n {\n     {\n@@ -4681,7 +4677,7 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 // Activate the genesis block so normal node progress can continue\n                 if (hash == chainparams.GetConsensus().hashGenesisBlock) {\n                     BlockValidationState state;\n-                    if (!ActivateBestChain(state, chainparams, nullptr)) {\n+                    if (!::ChainstateActive().ActivateBestChain(state, chainparams, nullptr)) {\n                         break;\n                     }\n                 }"
      },
      {
        "sha": "f55c0d4c3140446fbe4b6be160d9a66f9153d80b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f8cd7b3a527999512161956db4d718688cb956f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f8cd7b3a527999512161956db4d718688cb956f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=5f8cd7b3a527999512161956db4d718688cb956f",
        "patch": "@@ -167,13 +167,6 @@ void StopScriptCheckWorkerThreads();\n  * @returns                    The tx if found, otherwise nullptr\n  */\n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock);\n-/**\n- * Find the best known block, and make it the tip of the block chain\n- *\n- * May not be called with cs_main held. May not be called in a\n- * validationinterface callback.\n- */\n-bool ActivateBestChain(BlockValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n@@ -648,6 +641,8 @@ class CChainState\n     void PruneAndFlush();\n \n     /**\n+     * Find the best known block, and make it the tip of the block chain\n+     *\n      * Make the best chain active, in multiple steps. The result is either failure\n      * or an activated best chain. pblock is either nullptr or a pointer to a block\n      * that is already loaded (to avoid loading it again from disk).\n@@ -664,7 +659,7 @@ class CChainState\n     bool ActivateBestChain(\n         BlockValidationState& state,\n         const CChainParams& chainparams,\n-        std::shared_ptr<const CBlock> pblock) LOCKS_EXCLUDED(cs_main);\n+        std::shared_ptr<const CBlock> pblock = nullptr) LOCKS_EXCLUDED(cs_main);\n \n     bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n "
      }
    ]
  },
  {
    "sha": "e0dc3057277c9576ddbfb8541599db0149e08bb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGRjMzA1NzI3N2M5NTc2ZGRiZmI4NTQxNTk5ZGIwMTQ5ZTA4YmI2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-25T21:17:22Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Move LoadExternalBlockFile to CChainState\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.\n\nLoadExternalBlockFile mainly acts on CChainState.",
      "tree": {
        "sha": "db9dabeb5a4ddf34a06fdc3134177dd0344dc8f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db9dabeb5a4ddf34a06fdc3134177dd0344dc8f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0dc3057277c9576ddbfb8541599db0149e08bb6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0dc3057277c9576ddbfb8541599db0149e08bb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0dc3057277c9576ddbfb8541599db0149e08bb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0dc3057277c9576ddbfb8541599db0149e08bb6/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f8cd7b3a527999512161956db4d718688cb956f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f8cd7b3a527999512161956db4d718688cb956f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f8cd7b3a527999512161956db4d718688cb956f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 21,
      "deletions": 13
    },
    "files": [
      {
        "sha": "1369023c2d65dd536fdb00762d200defa45f0e52",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0dc3057277c9576ddbfb8541599db0149e08bb6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0dc3057277c9576ddbfb8541599db0149e08bb6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e0dc3057277c9576ddbfb8541599db0149e08bb6",
        "patch": "@@ -705,7 +705,7 @@ static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImp\n             if (!file)\n                 break; // This error is logged in OpenBlockFile\n             LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-            LoadExternalBlockFile(chainparams, file, &pos);\n+            ::ChainstateActive().LoadExternalBlockFile(chainparams, file, &pos);\n             if (ShutdownRequested()) {\n                 LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                 return;\n@@ -724,7 +724,7 @@ static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImp\n         FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-            LoadExternalBlockFile(chainparams, file);\n+            ::ChainstateActive().LoadExternalBlockFile(chainparams, file);\n             if (ShutdownRequested()) {\n                 LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                 return;"
      },
      {
        "sha": "95597bf0822d117fb2b6051cbdc378ec58c629d6",
        "filename": "src/test/fuzz/load_external_block_file.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0dc3057277c9576ddbfb8541599db0149e08bb6/src/test/fuzz/load_external_block_file.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0dc3057277c9576ddbfb8541599db0149e08bb6/src/test/fuzz/load_external_block_file.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/load_external_block_file.cpp?ref=e0dc3057277c9576ddbfb8541599db0149e08bb6",
        "patch": "@@ -27,5 +27,5 @@ FUZZ_TARGET_INIT(load_external_block_file, initialize_load_external_block_file)\n         return;\n     }\n     FlatFilePos flat_file_pos;\n-    LoadExternalBlockFile(Params(), fuzzed_block_file, fuzzed_data_provider.ConsumeBool() ? &flat_file_pos : nullptr);\n+    ::ChainstateActive().LoadExternalBlockFile(Params(), fuzzed_block_file, fuzzed_data_provider.ConsumeBool() ? &flat_file_pos : nullptr);\n }"
      },
      {
        "sha": "c152c110cc415ec12ccb91d73d4764db04cd7a40",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0dc3057277c9576ddbfb8541599db0149e08bb6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0dc3057277c9576ddbfb8541599db0149e08bb6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e0dc3057277c9576ddbfb8541599db0149e08bb6",
        "patch": "@@ -4602,7 +4602,7 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return ::ChainstateActive().LoadGenesisBlock(chainparams);\n }\n \n-void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp)\n+void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, FlatFilePos> mapBlocksUnknownParent;\n@@ -4651,7 +4651,8 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n+                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n+                    if (hash != chainparams.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n                         if (dbp)\n@@ -4660,10 +4661,12 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                     }\n \n                     // process in case the block isn't known yet\n-                    CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n+                    CBlockIndex* pindex = m_blockman.LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n-                      if (::ChainstateActive().AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n+                      assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                      if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n                           nLoaded++;\n                       }\n                       if (state.IsError()) {\n@@ -4677,12 +4680,14 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                 // Activate the genesis block so normal node progress can continue\n                 if (hash == chainparams.GetConsensus().hashGenesisBlock) {\n                     BlockValidationState state;\n-                    if (!::ChainstateActive().ActivateBestChain(state, chainparams, nullptr)) {\n+                    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                    if (!ActivateBestChain(state, chainparams, nullptr)) {\n                         break;\n                     }\n                 }\n \n-                NotifyHeaderTip(::ChainstateActive());\n+                assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                NotifyHeaderTip(*this);\n \n                 // Recursively process earlier encountered successors of this block\n                 std::deque<uint256> queue;\n@@ -4700,15 +4705,17 @@ void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFi\n                                     head.ToString());\n                             LOCK(cs_main);\n                             BlockValidationState dummy;\n-                            if (::ChainstateActive().AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n+                            assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                            if (AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());\n                             }\n                         }\n                         range.first++;\n                         mapBlocksUnknownParent.erase(it);\n-                        NotifyHeaderTip(::ChainstateActive());\n+                        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+                        NotifyHeaderTip(*this);\n                     }\n                 }\n             } catch (const std::exception& e) {"
      },
      {
        "sha": "a4c60261ee8ed2b10ad1432616206ee688d58c00",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0dc3057277c9576ddbfb8541599db0149e08bb6/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0dc3057277c9576ddbfb8541599db0149e08bb6/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e0dc3057277c9576ddbfb8541599db0149e08bb6",
        "patch": "@@ -144,8 +144,6 @@ extern const std::vector<std::string> CHECKLEVEL_DOC;\n FILE* OpenBlockFile(const FlatFilePos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n fs::path GetBlockPosFilename(const FlatFilePos &pos);\n-/** Import blocks from an external file */\n-void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Unload database information */\n@@ -616,6 +614,9 @@ class CChainState\n     bool ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)\n         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n+    /** Import blocks from an external file */\n+    void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp = nullptr);\n+\n     /**\n      * Update the on-disk chain state.\n      * The caches and indexes are flushed depending on the mode we're called with"
      }
    ]
  },
  {
    "sha": "ea4fed90219be17160136313c68c06d84176af08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTRmZWQ5MDIxOWJlMTcxNjAxMzYzMTNjNjhjMDZkODQxNzZhZjA4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-26T18:42:01Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Use existing chainstate in ChainstateManager::ProcessNewBlockHeaders\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "0b994ffc36e1448e2322f9277480aaf33645ab63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b994ffc36e1448e2322f9277480aaf33645ab63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea4fed90219be17160136313c68c06d84176af08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea4fed90219be17160136313c68c06d84176af08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea4fed90219be17160136313c68c06d84176af08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea4fed90219be17160136313c68c06d84176af08/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0dc3057277c9576ddbfb8541599db0149e08bb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0dc3057277c9576ddbfb8541599db0149e08bb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0dc3057277c9576ddbfb8541599db0149e08bb6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d9453e46a92ee020b724260eaed33ac9c40a8148",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea4fed90219be17160136313c68c06d84176af08/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea4fed90219be17160136313c68c06d84176af08/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ea4fed90219be17160136313c68c06d84176af08",
        "patch": "@@ -3644,14 +3644,15 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n // Exposed wrapper for AcceptBlockHeader\n bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n {\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n     AssertLockNotHeld(cs_main);\n     {\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n             bool accepted = m_blockman.AcceptBlockHeader(\n                 header, state, chainparams, &pindex);\n-            ::ChainstateActive().CheckBlockIndex(chainparams.GetConsensus());\n+            ActiveChainstate().CheckBlockIndex(chainparams.GetConsensus());\n \n             if (!accepted) {\n                 return false;\n@@ -3661,8 +3662,8 @@ bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>&\n             }\n         }\n     }\n-    if (NotifyHeaderTip(::ChainstateActive())) {\n-        if (::ChainstateActive().IsInitialBlockDownload() && ppindex && *ppindex) {\n+    if (NotifyHeaderTip(ActiveChainstate())) {\n+        if (ActiveChainstate().IsInitialBlockDownload() && ppindex && *ppindex) {\n             LogPrintf(\"Synchronizing blockheaders, height: %d (~%.2f%%)\\n\", (*ppindex)->nHeight, 100.0/((*ppindex)->nHeight+(GetAdjustedTime() - (*ppindex)->GetBlockTime()) / Params().GetConsensus().nPowTargetSpacing) * (*ppindex)->nHeight);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "0cdad753903640ff4240b715dec9d62f68e51407",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2RhZDc1MzkwMzY0MGZmNDI0MGI3MTVkZWM5ZDYyZjY4ZTUxNDA3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-26T18:44:47Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "validation: Use accessible chainstate in ChainstateManager::ProcessNewBlock\n\n[META] This commit should be followed up by removing the comments and\n       assertions meant only to show that the change is correct.",
      "tree": {
        "sha": "0d4cccc7afc8671d7186c4b8d8ebe74bdf89f302",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d4cccc7afc8671d7186c4b8d8ebe74bdf89f302"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cdad753903640ff4240b715dec9d62f68e51407",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cdad753903640ff4240b715dec9d62f68e51407",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cdad753903640ff4240b715dec9d62f68e51407",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cdad753903640ff4240b715dec9d62f68e51407/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea4fed90219be17160136313c68c06d84176af08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea4fed90219be17160136313c68c06d84176af08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea4fed90219be17160136313c68c06d84176af08"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0219a4c32d3571cfc3bcad069e7a2a063c510fe3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cdad753903640ff4240b715dec9d62f68e51407/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cdad753903640ff4240b715dec9d62f68e51407/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0cdad753903640ff4240b715dec9d62f68e51407",
        "patch": "@@ -3775,6 +3775,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n \n     {\n         CBlockIndex *pindex = nullptr;\n@@ -3790,18 +3791,18 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n         bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n         if (ret) {\n             // Store to disk\n-            ret = ::ChainstateActive().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = ActiveChainstate().AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n             return error(\"%s: AcceptBlock FAILED (%s)\", __func__, state.ToString());\n         }\n     }\n \n-    NotifyHeaderTip(::ChainstateActive());\n+    NotifyHeaderTip(ActiveChainstate());\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n+    if (!ActiveChainstate().ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed (%s)\", __func__, state.ToString());\n \n     return true;"
      }
    ]
  },
  {
    "sha": "b8e95658d5909f93dfc7d1e6532661db8919e5b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGU5NTY1OGQ1OTA5ZjkzZGZjN2QxZTY1MzI2NjFkYjg5MTllNWI3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-20T19:27:27Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "style-only: Make TestBlockValidity signature readable",
      "tree": {
        "sha": "22715e803397485d1908234732858c558aa6396f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22715e803397485d1908234732858c558aa6396f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8e95658d5909f93dfc7d1e6532661db8919e5b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8e95658d5909f93dfc7d1e6532661db8919e5b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8e95658d5909f93dfc7d1e6532661db8919e5b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8e95658d5909f93dfc7d1e6532661db8919e5b7/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cdad753903640ff4240b715dec9d62f68e51407",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cdad753903640ff4240b715dec9d62f68e51407",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cdad753903640ff4240b715dec9d62f68e51407"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cf6dd6d92d58f3848479082e8ec88db5ea8ee32e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8e95658d5909f93dfc7d1e6532661db8919e5b7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8e95658d5909f93dfc7d1e6532661db8919e5b7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b8e95658d5909f93dfc7d1e6532661db8919e5b7",
        "patch": "@@ -3808,7 +3808,13 @@ bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const s\n     return true;\n }\n \n-bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, CChainState& chainstate, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(BlockValidationState& state,\n+                       const CChainParams& chainparams,\n+                       CChainState& chainstate,\n+                       const CBlock& block,\n+                       CBlockIndex* pindexPrev,\n+                       bool fCheckPOW,\n+                       bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n     assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));"
      },
      {
        "sha": "39fc98d3b4d19f942ec2638e71bb64f366da36f3",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8e95658d5909f93dfc7d1e6532661db8919e5b7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8e95658d5909f93dfc7d1e6532661db8919e5b7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b8e95658d5909f93dfc7d1e6532661db8919e5b7",
        "patch": "@@ -283,7 +283,13 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex);\n bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block) */\n-bool TestBlockValidity(BlockValidationState& state, const CChainParams& chainparams, CChainState& chainstate, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool TestBlockValidity(BlockValidationState& state,\n+                       const CChainParams& chainparams,\n+                       CChainState& chainstate,\n+                       const CBlock& block,\n+                       CBlockIndex* pindexPrev,\n+                       bool fCheckPOW = true,\n+                       bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Check whether witness commitments are required for a block, and whether to enforce NULLDUMMY (BIP 147) rules.\n  *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */"
      }
    ]
  },
  {
    "sha": "67c9a83df19c6e2a2edb32336879204e7770b4a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2M5YTgzZGYxOWM2ZTJhMmVkYjMyMzM2ODc5MjA0ZTc3NzBiNGE3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-20T19:28:48Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-28T19:15:26Z"
      },
      "message": "style-only: Remove redundant sentence in ActivateBestChain comment",
      "tree": {
        "sha": "eaddd1603c1dc4cb0e516518f8fc676a331ef3fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eaddd1603c1dc4cb0e516518f8fc676a331ef3fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67c9a83df19c6e2a2edb32336879204e7770b4a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67c9a83df19c6e2a2edb32336879204e7770b4a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67c9a83df19c6e2a2edb32336879204e7770b4a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67c9a83df19c6e2a2edb32336879204e7770b4a7/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8e95658d5909f93dfc7d1e6532661db8919e5b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8e95658d5909f93dfc7d1e6532661db8919e5b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8e95658d5909f93dfc7d1e6532661db8919e5b7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e86b3d3af8ce6d90c26a055f56280aab0cb78587",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67c9a83df19c6e2a2edb32336879204e7770b4a7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67c9a83df19c6e2a2edb32336879204e7770b4a7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=67c9a83df19c6e2a2edb32336879204e7770b4a7",
        "patch": "@@ -648,11 +648,10 @@ class CChainState\n     void PruneAndFlush();\n \n     /**\n-     * Find the best known block, and make it the tip of the block chain\n-     *\n-     * Make the best chain active, in multiple steps. The result is either failure\n-     * or an activated best chain. pblock is either nullptr or a pointer to a block\n-     * that is already loaded (to avoid loading it again from disk).\n+     * Find the best known block, and make it the tip of the block chain. The\n+     * result is either failure or an activated best chain. pblock is either\n+     * nullptr or a pointer to a block that is already loaded (to avoid loading\n+     * it again from disk).\n      *\n      * ActivateBestChain is split into steps (see ActivateBestChainStep) so that\n      * we avoid holding cs_main for an extended period of time; the length of this"
      }
    ]
  }
]