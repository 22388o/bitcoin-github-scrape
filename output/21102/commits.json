[
  {
    "sha": "48ddbfd83958b1308d3664dc3afc06b69678a5c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGRkYmZkODM5NThiMTMwOGQzNjY0ZGMzYWZjMDZiNjk2NzhhNWM3",
    "commit": {
      "author": {
        "name": "wodry",
        "email": "wodry@users.noreply.github.com",
        "date": "2021-02-07T04:29:33Z"
      },
      "committer": {
        "name": "wodry",
        "email": "wodry@users.noreply.github.com",
        "date": "2021-02-07T15:44:09Z"
      },
      "message": "Log debug log category",
      "tree": {
        "sha": "e6fa298a194c5cb0c21f1e7dc04c225047fa8db7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6fa298a194c5cb0c21f1e7dc04c225047fa8db7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48ddbfd83958b1308d3664dc3afc06b69678a5c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48ddbfd83958b1308d3664dc3afc06b69678a5c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48ddbfd83958b1308d3664dc3afc06b69678a5c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48ddbfd83958b1308d3664dc3afc06b69678a5c7/comments",
    "author": {
      "login": "wodry",
      "id": 8447873,
      "node_id": "MDQ6VXNlcjg0NDc4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8447873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wodry",
      "html_url": "https://github.com/wodry",
      "followers_url": "https://api.github.com/users/wodry/followers",
      "following_url": "https://api.github.com/users/wodry/following{/other_user}",
      "gists_url": "https://api.github.com/users/wodry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wodry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wodry/subscriptions",
      "organizations_url": "https://api.github.com/users/wodry/orgs",
      "repos_url": "https://api.github.com/users/wodry/repos",
      "events_url": "https://api.github.com/users/wodry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wodry/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "wodry",
      "id": 8447873,
      "node_id": "MDQ6VXNlcjg0NDc4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8447873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wodry",
      "html_url": "https://github.com/wodry",
      "followers_url": "https://api.github.com/users/wodry/followers",
      "following_url": "https://api.github.com/users/wodry/following{/other_user}",
      "gists_url": "https://api.github.com/users/wodry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wodry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wodry/subscriptions",
      "organizations_url": "https://api.github.com/users/wodry/orgs",
      "repos_url": "https://api.github.com/users/wodry/repos",
      "events_url": "https://api.github.com/users/wodry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wodry/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c6140846f37de8c132b3b6abf09f3d7940554a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c6140846f37de8c132b3b6abf09f3d7940554a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c6140846f37de8c132b3b6abf09f3d7940554a7"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 43,
      "deletions": 2
    },
    "files": [
      {
        "sha": "aca0da4499d4334ec746b75e65a27792fda290af",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48ddbfd83958b1308d3664dc3afc06b69678a5c7/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48ddbfd83958b1308d3664dc3afc06b69678a5c7/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=48ddbfd83958b1308d3664dc3afc06b69678a5c7",
        "patch": "@@ -6,7 +6,7 @@\n #include <logging.h>\n #include <util/threadnames.h>\n #include <util/time.h>\n-\n+#include <map>\n #include <mutex>\n \n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n@@ -174,6 +174,26 @@ bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str)\n     return false;\n }\n \n+typedef std::map<uint32_t, std::string> LogCategoryMap;\n+\n+// read array of struct into map of flag->name\n+LogCategoryMap GetLogCategoryMap() {\n+    LogCategoryMap category_map;\n+    for (const CLogCategoryDesc& category_desc : LogCategories) {\n+        category_map[category_desc.flag] = category_desc.category;\n+    }\n+    return category_map;\n+}\n+const LogCategoryMap LogCategoryNames = GetLogCategoryMap();\n+\n+bool GetLogCategoryName(const BCLog::LogFlags flag, std::string& name)\n+{\n+    LogCategoryMap::const_iterator search_result = LogCategoryNames.find(flag);\n+    if (search_result == LogCategoryNames.end()) return false;\n+    name = search_result->second;\n+    return true;\n+}\n+\n std::vector<LogCategory> BCLog::Logger::LogCategoriesList() const\n {\n     std::vector<LogCategory> ret;"
      },
      {
        "sha": "c2f1b5af55f60b14cec38d5b40aff56e8669eea9",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48ddbfd83958b1308d3664dc3afc06b69678a5c7/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48ddbfd83958b1308d3664dc3afc06b69678a5c7/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=48ddbfd83958b1308d3664dc3afc06b69678a5c7",
        "patch": "@@ -17,6 +17,7 @@\n #include <mutex>\n #include <string>\n #include <vector>\n+#include <map>\n \n static const bool DEFAULT_LOGTIMEMICROS = false;\n static const bool DEFAULT_LOGIPS        = false;\n@@ -158,6 +159,9 @@ static inline bool LogAcceptCategory(BCLog::LogFlags category)\n /** Return true if str parses as a log category and set the flag */\n bool GetLogCategory(BCLog::LogFlags& flag, const std::string& str);\n \n+// get debug flag's log category descriptive name\n+bool GetLogCategoryName(const BCLog::LogFlags flag, std::string& name);\n+\n // Be conservative when using LogPrintf/error or other things which\n // unconditionally log to debug.log! It should not be the case that an inbound\n // peer can fill up a user's disk with debug.log entries.\n@@ -177,12 +181,29 @@ static inline void LogPrintf(const char* fmt, const Args&... args)\n     }\n }\n \n+template <typename... Args>\n+static inline void LogCategoryPrintf(const BCLog::LogFlags category, const char* fmt, const Args&... args)\n+{\n+    if (LogInstance().Enabled()) {\n+        std::string log_msg;\n+        std::string category_name;\n+        if (!GetLogCategoryName(category, category_name)) category_name = \"UNKNOWN\";\n+        try {\n+            log_msg = tfm::format(fmt, args...);\n+        } catch (tinyformat::format_error& fmterr) {\n+            /* Original format string will have newline so don't add one here */\n+            log_msg = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + fmt;\n+        }\n+        LogInstance().LogPrintStr(\"[\" + category_name + \"] \" + log_msg);\n+    }\n+}\n+\n // Use a macro instead of a function for conditional logging to prevent\n // evaluating arguments when logging for the category is not enabled.\n #define LogPrint(category, ...)              \\\n     do {                                     \\\n         if (LogAcceptCategory((category))) { \\\n-            LogPrintf(__VA_ARGS__);          \\\n+            LogCategoryPrintf(category, __VA_ARGS__);          \\\n         }                                    \\\n     } while (0)\n "
      }
    ]
  },
  {
    "sha": "c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTg2Y2FiZDdhZDlhZWMzYzI3YTg1ZmZhOWNlMTRjZjk5OTc0NDRi",
    "commit": {
      "author": {
        "name": "wodry",
        "email": "wodry@users.noreply.github.com",
        "date": "2021-02-08T21:52:05Z"
      },
      "committer": {
        "name": "wodry",
        "email": "wodry@users.noreply.github.com",
        "date": "2021-02-08T21:52:05Z"
      },
      "message": "scripted-diff: Remove debug log category prefix from log messages\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/(BCLog::(NET|TOR|MEMPOOL|HTTP|BENCH|ZMQ|WALLETDB|RPC|ESTIMATEFEE|ADDRMAN|SELECTCOINS|REINDEX|CMPCTBLOCK|RAND|PRUNE|PROXY|MEMPOOLREJ|LIBEVENT|COINDB|QT|LEVELDB|VALIDATION)\\s*,\\s*\")\\s*\\2\\s*:\\s*(.*)/\\1\\3/gi' $(git ls-files src/)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "128b0da38e0cbe12d65ed71d561760b39636991a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/128b0da38e0cbe12d65ed71d561760b39636991a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/comments",
    "author": {
      "login": "wodry",
      "id": 8447873,
      "node_id": "MDQ6VXNlcjg0NDc4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8447873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wodry",
      "html_url": "https://github.com/wodry",
      "followers_url": "https://api.github.com/users/wodry/followers",
      "following_url": "https://api.github.com/users/wodry/following{/other_user}",
      "gists_url": "https://api.github.com/users/wodry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wodry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wodry/subscriptions",
      "organizations_url": "https://api.github.com/users/wodry/orgs",
      "repos_url": "https://api.github.com/users/wodry/repos",
      "events_url": "https://api.github.com/users/wodry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wodry/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "wodry",
      "id": 8447873,
      "node_id": "MDQ6VXNlcjg0NDc4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8447873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wodry",
      "html_url": "https://github.com/wodry",
      "followers_url": "https://api.github.com/users/wodry/followers",
      "following_url": "https://api.github.com/users/wodry/following{/other_user}",
      "gists_url": "https://api.github.com/users/wodry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wodry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wodry/subscriptions",
      "organizations_url": "https://api.github.com/users/wodry/orgs",
      "repos_url": "https://api.github.com/users/wodry/repos",
      "events_url": "https://api.github.com/users/wodry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wodry/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48ddbfd83958b1308d3664dc3afc06b69678a5c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48ddbfd83958b1308d3664dc3afc06b69678a5c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48ddbfd83958b1308d3664dc3afc06b69678a5c7"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 39,
      "deletions": 39
    },
    "files": [
      {
        "sha": "2d2077a59574391e3ecdbcb1089892ac9ed8203c",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "patch": "@@ -346,7 +346,7 @@ static void libevent_log_cb(int severity, const char *msg)\n     if (severity >= EVENT_LOG_WARN) // Log warn messages and higher without debug category\n         LogPrintf(\"libevent: %s\\n\", msg);\n     else\n-        LogPrint(BCLog::LIBEVENT, \"libevent: %s\\n\", msg);\n+        LogPrint(BCLog::LIBEVENT, \"%s\\n\", msg);\n }\n \n bool InitHTTPServer()"
      },
      {
        "sha": "03fcafb93c3a77496ebd9e4f5928b3e1c482beb1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "patch": "@@ -1708,7 +1708,7 @@ bool CConnman::GetTryNewOutboundPeer()\n void CConnman::SetTryNewOutboundPeer(bool flag)\n {\n     m_try_another_outbound_peer = flag;\n-    LogPrint(BCLog::NET, \"net: setting try another outbound peer=%s\\n\", flag ? \"true\" : \"false\");\n+    LogPrint(BCLog::NET, \"setting try another outbound peer=%s\\n\", flag ? \"true\" : \"false\");\n }\n \n // Return the number of peers we have over our outbound connection limit"
      },
      {
        "sha": "ecb2fa2c282a7964da3d387467066e9220727153",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "patch": "@@ -944,7 +944,7 @@ class CConnman\n     bool GetTryNewOutboundPeer();\n \n     void StartExtraBlockRelayPeers() {\n-        LogPrint(BCLog::NET, \"net: enabling extra block-relay-only peers\\n\");\n+        LogPrint(BCLog::NET, \"enabling extra block-relay-only peers\\n\");\n         m_start_extra_block_relay_peers = true;\n     }\n "
      },
      {
        "sha": "5b07b41956d383747dd0c6b84482045bd1e170f6",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "patch": "@@ -166,7 +166,7 @@ void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n                     self->reply_handlers.front()(*self, self->message);\n                     self->reply_handlers.pop_front();\n                 } else {\n-                    LogPrint(BCLog::TOR, \"tor: Received unexpected sync reply %i\\n\", self->message.code);\n+                    LogPrint(BCLog::TOR, \"Received unexpected sync reply %i\\n\", self->message.code);\n                 }\n             }\n             self->message.Clear();\n@@ -185,13 +185,13 @@ void TorControlConnection::eventcb(struct bufferevent *bev, short what, void *ct\n {\n     TorControlConnection *self = static_cast<TorControlConnection*>(ctx);\n     if (what & BEV_EVENT_CONNECTED) {\n-        LogPrint(BCLog::TOR, \"tor: Successfully connected!\\n\");\n+        LogPrint(BCLog::TOR, \"Successfully connected!\\n\");\n         self->connected(*self);\n     } else if (what & (BEV_EVENT_EOF|BEV_EVENT_ERROR)) {\n         if (what & BEV_EVENT_ERROR) {\n-            LogPrint(BCLog::TOR, \"tor: Error connecting to Tor control socket\\n\");\n+            LogPrint(BCLog::TOR, \"Error connecting to Tor control socket\\n\");\n         } else {\n-            LogPrint(BCLog::TOR, \"tor: End of stream\\n\");\n+            LogPrint(BCLog::TOR, \"End of stream\\n\");\n         }\n         self->Disconnect();\n         self->disconnected(*self);\n@@ -473,7 +473,7 @@ TorController::TorController(struct event_base* _base, const std::string& tor_co\n     // Read service private key if cached\n     std::pair<bool,std::string> pkf = ReadBinaryFile(GetPrivateKeyFile());\n     if (pkf.first) {\n-        LogPrint(BCLog::TOR, \"tor: Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n+        LogPrint(BCLog::TOR, \"Reading cached private key from %s\\n\", GetPrivateKeyFile().string());\n         private_key = pkf.second;\n     }\n }\n@@ -492,7 +492,7 @@ TorController::~TorController()\n void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlReply& reply)\n {\n     if (reply.code == 250) {\n-        LogPrint(BCLog::TOR, \"tor: ADD_ONION successful\\n\");\n+        LogPrint(BCLog::TOR, \"ADD_ONION successful\\n\");\n         for (const std::string &s : reply.lines) {\n             std::map<std::string,std::string> m = ParseTorReplyMapping(s);\n             std::map<std::string,std::string>::iterator i;\n@@ -511,7 +511,7 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n         service = LookupNumeric(std::string(service_id+\".onion\"), Params().GetDefaultPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n-            LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n+            LogPrint(BCLog::TOR, \"Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n         } else {\n             LogPrintf(\"tor: Error writing service private key to %s\\n\", GetPrivateKeyFile().string());\n         }\n@@ -527,7 +527,7 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply& reply)\n {\n     if (reply.code == 250) {\n-        LogPrint(BCLog::TOR, \"tor: Authentication successful\\n\");\n+        LogPrint(BCLog::TOR, \"Authentication successful\\n\");\n \n         // Now that we know Tor is running setup the proxy for onion addresses\n         // if -onion isn't set to something else.\n@@ -581,7 +581,7 @@ static std::vector<uint8_t> ComputeResponse(const std::string &key, const std::v\n void TorController::authchallenge_cb(TorControlConnection& _conn, const TorControlReply& reply)\n {\n     if (reply.code == 250) {\n-        LogPrint(BCLog::TOR, \"tor: SAFECOOKIE authentication challenge successful\\n\");\n+        LogPrint(BCLog::TOR, \"SAFECOOKIE authentication challenge successful\\n\");\n         std::pair<std::string,std::string> l = SplitTorReplyLine(reply.lines[0]);\n         if (l.first == \"AUTHCHALLENGE\") {\n             std::map<std::string,std::string> m = ParseTorReplyMapping(l.second);\n@@ -591,7 +591,7 @@ void TorController::authchallenge_cb(TorControlConnection& _conn, const TorContr\n             }\n             std::vector<uint8_t> serverHash = ParseHex(m[\"SERVERHASH\"]);\n             std::vector<uint8_t> serverNonce = ParseHex(m[\"SERVERNONCE\"]);\n-            LogPrint(BCLog::TOR, \"tor: AUTHCHALLENGE ServerHash %s ServerNonce %s\\n\", HexStr(serverHash), HexStr(serverNonce));\n+            LogPrint(BCLog::TOR, \"AUTHCHALLENGE ServerHash %s ServerNonce %s\\n\", HexStr(serverHash), HexStr(serverNonce));\n             if (serverNonce.size() != 32) {\n                 LogPrintf(\"tor: ServerNonce is not 32 bytes, as required by spec\\n\");\n                 return;\n@@ -636,12 +636,12 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n                 std::map<std::string,std::string> m = ParseTorReplyMapping(l.second);\n                 std::map<std::string,std::string>::iterator i;\n                 if ((i = m.find(\"Tor\")) != m.end()) {\n-                    LogPrint(BCLog::TOR, \"tor: Connected to Tor version %s\\n\", i->second);\n+                    LogPrint(BCLog::TOR, \"Connected to Tor version %s\\n\", i->second);\n                 }\n             }\n         }\n         for (const std::string &s : methods) {\n-            LogPrint(BCLog::TOR, \"tor: Supported authentication method: %s\\n\", s);\n+            LogPrint(BCLog::TOR, \"Supported authentication method: %s\\n\", s);\n         }\n         // Prefer NULL, otherwise SAFECOOKIE. If a password is provided, use HASHEDPASSWORD\n         /* Authentication:\n@@ -651,18 +651,18 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n         std::string torpassword = gArgs.GetArg(\"-torpassword\", \"\");\n         if (!torpassword.empty()) {\n             if (methods.count(\"HASHEDPASSWORD\")) {\n-                LogPrint(BCLog::TOR, \"tor: Using HASHEDPASSWORD authentication\\n\");\n+                LogPrint(BCLog::TOR, \"Using HASHEDPASSWORD authentication\\n\");\n                 boost::replace_all(torpassword, \"\\\"\", \"\\\\\\\"\");\n                 _conn.Command(\"AUTHENTICATE \\\"\" + torpassword + \"\\\"\", std::bind(&TorController::auth_cb, this, std::placeholders::_1, std::placeholders::_2));\n             } else {\n                 LogPrintf(\"tor: Password provided with -torpassword, but HASHEDPASSWORD authentication is not available\\n\");\n             }\n         } else if (methods.count(\"NULL\")) {\n-            LogPrint(BCLog::TOR, \"tor: Using NULL authentication\\n\");\n+            LogPrint(BCLog::TOR, \"Using NULL authentication\\n\");\n             _conn.Command(\"AUTHENTICATE\", std::bind(&TorController::auth_cb, this, std::placeholders::_1, std::placeholders::_2));\n         } else if (methods.count(\"SAFECOOKIE\")) {\n             // Cookie: hexdump -e '32/1 \"%02x\"\"\\n\"'  ~/.tor/control_auth_cookie\n-            LogPrint(BCLog::TOR, \"tor: Using SAFECOOKIE authentication, reading cookie authentication from %s\\n\", cookiefile);\n+            LogPrint(BCLog::TOR, \"Using SAFECOOKIE authentication, reading cookie authentication from %s\\n\", cookiefile);\n             std::pair<bool,std::string> status_cookie = ReadBinaryFile(cookiefile, TOR_COOKIE_SIZE);\n             if (status_cookie.first && status_cookie.second.size() == TOR_COOKIE_SIZE) {\n                 // _conn.Command(\"AUTHENTICATE \" + HexStr(status_cookie.second), std::bind(&TorController::auth_cb, this, std::placeholders::_1, std::placeholders::_2));\n@@ -704,7 +704,7 @@ void TorController::disconnected_cb(TorControlConnection& _conn)\n     if (!reconnect)\n         return;\n \n-    LogPrint(BCLog::TOR, \"tor: Not connected to Tor control port %s, trying to reconnect\\n\", m_tor_control_center);\n+    LogPrint(BCLog::TOR, \"Not connected to Tor control port %s, trying to reconnect\\n\", m_tor_control_center);\n \n     // Single-shot timer for reconnect. Use exponential backoff.\n     struct timeval time = MillisToTimeval(int64_t(reconnect_timeout * 1000.0));"
      },
      {
        "sha": "605435a92969afcf919505cfba5cde7e8d0eeba9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "patch": "@@ -3987,7 +3987,7 @@ void BlockManager::FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPr\n         }\n     }\n \n-    LogPrint(BCLog::PRUNE, \"Prune: target=%dMiB actual=%dMiB diff=%dMiB max_prune_height=%d removed %d blk/rev pairs\\n\",\n+    LogPrint(BCLog::PRUNE, \"target=%dMiB actual=%dMiB diff=%dMiB max_prune_height=%d removed %d blk/rev pairs\\n\",\n            nPruneTarget/1024/1024, nCurrentUsage/1024/1024,\n            ((int64_t)nPruneTarget - (int64_t)nCurrentUsage)/1024/1024,\n            nLastBlockWeCanPrune, count);"
      },
      {
        "sha": "678ad72178290372115f24383f5b84621c310780",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "patch": "@@ -70,9 +70,9 @@ bool CZMQNotificationInterface::Initialize()\n {\n     int major = 0, minor = 0, patch = 0;\n     zmq_version(&major, &minor, &patch);\n-    LogPrint(BCLog::ZMQ, \"zmq: version %d.%d.%d\\n\", major, minor, patch);\n+    LogPrint(BCLog::ZMQ, \"version %d.%d.%d\\n\", major, minor, patch);\n \n-    LogPrint(BCLog::ZMQ, \"zmq: Initialize notification interface\\n\");\n+    LogPrint(BCLog::ZMQ, \"Initialize notification interface\\n\");\n     assert(!pcontext);\n \n     pcontext = zmq_ctx_new();\n@@ -85,9 +85,9 @@ bool CZMQNotificationInterface::Initialize()\n \n     for (auto& notifier : notifiers) {\n         if (notifier->Initialize(pcontext)) {\n-            LogPrint(BCLog::ZMQ, \"zmq: Notifier %s ready (address = %s)\\n\", notifier->GetType(), notifier->GetAddress());\n+            LogPrint(BCLog::ZMQ, \"Notifier %s ready (address = %s)\\n\", notifier->GetType(), notifier->GetAddress());\n         } else {\n-            LogPrint(BCLog::ZMQ, \"zmq: Notifier %s failed (address = %s)\\n\", notifier->GetType(), notifier->GetAddress());\n+            LogPrint(BCLog::ZMQ, \"Notifier %s failed (address = %s)\\n\", notifier->GetType(), notifier->GetAddress());\n             return false;\n         }\n     }\n@@ -98,11 +98,11 @@ bool CZMQNotificationInterface::Initialize()\n // Called during shutdown sequence\n void CZMQNotificationInterface::Shutdown()\n {\n-    LogPrint(BCLog::ZMQ, \"zmq: Shutdown notification interface\\n\");\n+    LogPrint(BCLog::ZMQ, \"Shutdown notification interface\\n\");\n     if (pcontext)\n     {\n         for (auto& notifier : notifiers) {\n-            LogPrint(BCLog::ZMQ, \"zmq: Shutdown notifier %s at %s\\n\", notifier->GetType(), notifier->GetAddress());\n+            LogPrint(BCLog::ZMQ, \"Shutdown notifier %s at %s\\n\", notifier->GetType(), notifier->GetAddress());\n             notifier->Shutdown();\n         }\n         zmq_ctx_term(pcontext);"
      },
      {
        "sha": "2b2e4d86aaf4980b1e4c8f967d7061c647da44b4",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "patch": "@@ -88,7 +88,7 @@ bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n             return false;\n         }\n \n-        LogPrint(BCLog::ZMQ, \"zmq: Outbound message high water mark for %s at %s is %d\\n\", type, address, outbound_message_high_water_mark);\n+        LogPrint(BCLog::ZMQ, \"Outbound message high water mark for %s at %s is %d\\n\", type, address, outbound_message_high_water_mark);\n \n         int rc = zmq_setsockopt(psocket, ZMQ_SNDHWM, &outbound_message_high_water_mark, sizeof(outbound_message_high_water_mark));\n         if (rc != 0)\n@@ -120,8 +120,8 @@ bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n     }\n     else\n     {\n-        LogPrint(BCLog::ZMQ, \"zmq: Reusing socket for address %s\\n\", address);\n-        LogPrint(BCLog::ZMQ, \"zmq: Outbound message high water mark for %s at %s is %d\\n\", type, address, outbound_message_high_water_mark);\n+        LogPrint(BCLog::ZMQ, \"Reusing socket for address %s\\n\", address);\n+        LogPrint(BCLog::ZMQ, \"Outbound message high water mark for %s at %s is %d\\n\", type, address, outbound_message_high_water_mark);\n \n         psocket = i->second->psocket;\n         mapPublishNotifiers.insert(std::make_pair(address, this));\n@@ -152,7 +152,7 @@ void CZMQAbstractPublishNotifier::Shutdown()\n \n     if (count == 1)\n     {\n-        LogPrint(BCLog::ZMQ, \"zmq: Close socket at address %s\\n\", address);\n+        LogPrint(BCLog::ZMQ, \"Close socket at address %s\\n\", address);\n         int linger = 0;\n         zmq_setsockopt(psocket, ZMQ_LINGER, &linger, sizeof(linger));\n         zmq_close(psocket);\n@@ -181,7 +181,7 @@ bool CZMQAbstractPublishNotifier::SendZmqMessage(const char *command, const void\n bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n {\n     uint256 hash = pindex->GetBlockHash();\n-    LogPrint(BCLog::ZMQ, \"zmq: Publish hashblock %s to %s\\n\", hash.GetHex(), this->address);\n+    LogPrint(BCLog::ZMQ, \"Publish hashblock %s to %s\\n\", hash.GetHex(), this->address);\n     char data[32];\n     for (unsigned int i = 0; i < 32; i++)\n         data[31 - i] = hash.begin()[i];\n@@ -191,7 +191,7 @@ bool CZMQPublishHashBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n {\n     uint256 hash = transaction.GetHash();\n-    LogPrint(BCLog::ZMQ, \"zmq: Publish hashtx %s to %s\\n\", hash.GetHex(), this->address);\n+    LogPrint(BCLog::ZMQ, \"Publish hashtx %s to %s\\n\", hash.GetHex(), this->address);\n     char data[32];\n     for (unsigned int i = 0; i < 32; i++)\n         data[31 - i] = hash.begin()[i];\n@@ -200,7 +200,7 @@ bool CZMQPublishHashTransactionNotifier::NotifyTransaction(const CTransaction &t\n \n bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n {\n-    LogPrint(BCLog::ZMQ, \"zmq: Publish rawblock %s to %s\\n\", pindex->GetBlockHash().GetHex(), this->address);\n+    LogPrint(BCLog::ZMQ, \"Publish rawblock %s to %s\\n\", pindex->GetBlockHash().GetHex(), this->address);\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n@@ -222,7 +222,7 @@ bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n bool CZMQPublishRawTransactionNotifier::NotifyTransaction(const CTransaction &transaction)\n {\n     uint256 hash = transaction.GetHash();\n-    LogPrint(BCLog::ZMQ, \"zmq: Publish rawtx %s to %s\\n\", hash.GetHex(), this->address);\n+    LogPrint(BCLog::ZMQ, \"Publish rawtx %s to %s\\n\", hash.GetHex(), this->address);\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n     ss << transaction;\n     return SendZmqMessage(MSG_RAWTX, &(*ss.begin()), ss.size());\n@@ -244,27 +244,27 @@ static bool SendSequenceMsg(CZMQAbstractPublishNotifier& notifier, uint256 hash,\n bool CZMQPublishSequenceNotifier::NotifyBlockConnect(const CBlockIndex *pindex)\n {\n     uint256 hash = pindex->GetBlockHash();\n-    LogPrint(BCLog::ZMQ, \"zmq: Publish sequence block connect %s to %s\\n\", hash.GetHex(), this->address);\n+    LogPrint(BCLog::ZMQ, \"Publish sequence block connect %s to %s\\n\", hash.GetHex(), this->address);\n     return SendSequenceMsg(*this, hash, /* Block (C)onnect */ 'C');\n }\n \n bool CZMQPublishSequenceNotifier::NotifyBlockDisconnect(const CBlockIndex *pindex)\n {\n     uint256 hash = pindex->GetBlockHash();\n-    LogPrint(BCLog::ZMQ, \"zmq: Publish sequence block disconnect %s to %s\\n\", hash.GetHex(), this->address);\n+    LogPrint(BCLog::ZMQ, \"Publish sequence block disconnect %s to %s\\n\", hash.GetHex(), this->address);\n     return SendSequenceMsg(*this, hash, /* Block (D)isconnect */ 'D');\n }\n \n bool CZMQPublishSequenceNotifier::NotifyTransactionAcceptance(const CTransaction &transaction, uint64_t mempool_sequence)\n {\n     uint256 hash = transaction.GetHash();\n-    LogPrint(BCLog::ZMQ, \"zmq: Publish hashtx mempool acceptance %s to %s\\n\", hash.GetHex(), this->address);\n+    LogPrint(BCLog::ZMQ, \"Publish hashtx mempool acceptance %s to %s\\n\", hash.GetHex(), this->address);\n     return SendSequenceMsg(*this, hash, /* Mempool (A)cceptance */ 'A', mempool_sequence);\n }\n \n bool CZMQPublishSequenceNotifier::NotifyTransactionRemoval(const CTransaction &transaction, uint64_t mempool_sequence)\n {\n     uint256 hash = transaction.GetHash();\n-    LogPrint(BCLog::ZMQ, \"zmq: Publish hashtx mempool removal %s to %s\\n\", hash.GetHex(), this->address);\n+    LogPrint(BCLog::ZMQ, \"Publish hashtx mempool removal %s to %s\\n\", hash.GetHex(), this->address);\n     return SendSequenceMsg(*this, hash, /* Mempool (R)emoval */ 'R', mempool_sequence);\n }"
      },
      {
        "sha": "1e65174076ed286d2983e774f3dca265b1ee2e56",
        "filename": "src/zmq/zmqutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/zmq/zmqutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b/src/zmq/zmqutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqutil.cpp?ref=c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "patch": "@@ -10,5 +10,5 @@\n \n void zmqError(const char* str)\n {\n-    LogPrint(BCLog::ZMQ, \"zmq: Error: %s, errno=%s\\n\", str, zmq_strerror(errno));\n+    LogPrint(BCLog::ZMQ, \"Error: %s, errno=%s\\n\", str, zmq_strerror(errno));\n }"
      }
    ]
  },
  {
    "sha": "555dbfbfa71ded24cec25bec1755aaa426b52b66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTVkYmZiZmE3MWRlZDI0Y2VjMjViZWMxNzU1YWFhNDI2YjUyYjY2",
    "commit": {
      "author": {
        "name": "wodry",
        "email": "wodry@users.noreply.github.com",
        "date": "2021-02-08T21:58:57Z"
      },
      "committer": {
        "name": "wodry",
        "email": "wodry@users.noreply.github.com",
        "date": "2021-02-08T21:58:57Z"
      },
      "message": "tag [lc:category] instead of [category]",
      "tree": {
        "sha": "bed001324021eb0ae809d6e997e32e763319a768",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bed001324021eb0ae809d6e997e32e763319a768"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/555dbfbfa71ded24cec25bec1755aaa426b52b66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/555dbfbfa71ded24cec25bec1755aaa426b52b66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/555dbfbfa71ded24cec25bec1755aaa426b52b66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/555dbfbfa71ded24cec25bec1755aaa426b52b66/comments",
    "author": {
      "login": "wodry",
      "id": 8447873,
      "node_id": "MDQ6VXNlcjg0NDc4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8447873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wodry",
      "html_url": "https://github.com/wodry",
      "followers_url": "https://api.github.com/users/wodry/followers",
      "following_url": "https://api.github.com/users/wodry/following{/other_user}",
      "gists_url": "https://api.github.com/users/wodry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wodry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wodry/subscriptions",
      "organizations_url": "https://api.github.com/users/wodry/orgs",
      "repos_url": "https://api.github.com/users/wodry/repos",
      "events_url": "https://api.github.com/users/wodry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wodry/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "wodry",
      "id": 8447873,
      "node_id": "MDQ6VXNlcjg0NDc4NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8447873?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wodry",
      "html_url": "https://github.com/wodry",
      "followers_url": "https://api.github.com/users/wodry/followers",
      "following_url": "https://api.github.com/users/wodry/following{/other_user}",
      "gists_url": "https://api.github.com/users/wodry/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wodry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wodry/subscriptions",
      "organizations_url": "https://api.github.com/users/wodry/orgs",
      "repos_url": "https://api.github.com/users/wodry/repos",
      "events_url": "https://api.github.com/users/wodry/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wodry/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c586cabd7ad9aec3c27a85ffa9ce14cf9997444b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0ed20367de6db9b1363f69a4e03375e484a7e656",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/555dbfbfa71ded24cec25bec1755aaa426b52b66/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/555dbfbfa71ded24cec25bec1755aaa426b52b66/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=555dbfbfa71ded24cec25bec1755aaa426b52b66",
        "patch": "@@ -194,7 +194,7 @@ static inline void LogCategoryPrintf(const BCLog::LogFlags category, const char*\n             /* Original format string will have newline so don't add one here */\n             log_msg = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + fmt;\n         }\n-        LogInstance().LogPrintStr(\"[\" + category_name + \"] \" + log_msg);\n+        LogInstance().LogPrintStr(\"[lc:\" + category_name + \"] \" + log_msg);\n     }\n }\n "
      }
    ]
  }
]