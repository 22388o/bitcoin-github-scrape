[
  {
    "sha": "fa80c814874a2893e4323ba5148fba21d7f421cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTgwYzgxNDg3NGEyODkzZTQzMjNiYTUxNDhmYmEyMWQ3ZjQyMWNk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-31T16:29:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-31T16:29:55Z"
      },
      "message": "Assert that RPCArg names are equal to CRPCCommand ones (blockchain)",
      "tree": {
        "sha": "f9c7fb77e4527784a31bd151abdbdf78d6cf123e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9c7fb77e4527784a31bd151abdbdf78d6cf123e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa80c814874a2893e4323ba5148fba21d7f421cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgziwwAztNELvaTKLAl2o/Ax2+V3DDMy7sx5sxintb8N1DBFWS09G28338DjKeR\nouaMQzy6XYr/WeSXoNWihHP/jbOVbzvUAHwUilu32UVPNDp6CkzwMb/KanCHDoy8\nlZbiOLZZmwlstZcAx2j6ftIRwQvhsiM2clglTD3BCt1nl89bxs92/joHuxJsK5QV\nLn98/vQuM3S7eGb77FxQo7U2BeO6/iPy5upjDNexyu8GZ/p3PTxp49IX7+eblnIn\n7u0w3TJO/5ovMcncxGVS036zfpGCH4KK7gjrKhqhPAQz3ykUEl2qr47O687fODo8\n4tbGFk56fBbev2emSD3fb+vrAoXXIiqJt0t1NpGH31a7B/qD2VplvVxZFhRao3nE\nB5RqCD61c+qSY/sIFAiSzEeUyZAYitj7B/VUWn8blSVPQt8y6TV/jy1RZ4J+aZH3\nC5CWvUQFX5iETL36ghsU+4P9Gzj9DaVh+O2cYXKAGlywuj6EYO1eF0i/2f1+QXp7\nG+39AB0x\n=IL6E\n-----END PGP SIGNATURE-----",
        "payload": "tree f9c7fb77e4527784a31bd151abdbdf78d6cf123e\nparent 89a8299a14af68c1f96ca1650cbfd4fc2952e77b\nauthor MarcoFalke <falke.marco@gmail.com> 1598891375 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1598891395 +0200\n\nAssert that RPCArg names are equal to CRPCCommand ones (blockchain)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80c814874a2893e4323ba5148fba21d7f421cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80c814874a2893e4323ba5148fba21d7f421cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80c814874a2893e4323ba5148fba21d7f421cd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89a8299a14af68c1f96ca1650cbfd4fc2952e77b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a8299a14af68c1f96ca1650cbfd4fc2952e77b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89a8299a14af68c1f96ca1650cbfd4fc2952e77b"
      }
    ],
    "stats": {
      "total": 305,
      "additions": 184,
      "deletions": 121
    },
    "files": [
      {
        "sha": "4e7ba15fe27b40ab6e5a63577b51f6e0a95399ef",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa80c814874a2893e4323ba5148fba21d7f421cd/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa80c814874a2893e4323ba5148fba21d7f421cd/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=fa80c814874a2893e4323ba5148fba21d7f421cd",
        "patch": "@@ -303,7 +303,7 @@ static bool rest_block_notxdetails(const util::Ref& context, HTTPRequest* req, c\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp\n-UniValue getblockchaininfo(const JSONRPCRequest& request);\n+RPCHelpMan getblockchaininfo();\n \n static bool rest_chaininfo(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n@@ -316,7 +316,7 @@ static bool rest_chaininfo(const util::Ref& context, HTTPRequest* req, const std\n     case RetFormat::JSON: {\n         JSONRPCRequest jsonRequest(context);\n         jsonRequest.params = UniValue(UniValue::VARR);\n-        UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n+        UniValue chainInfoObject = getblockchaininfo().HandleRequest(jsonRequest);\n         std::string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);"
      },
      {
        "sha": "37a2e4c46755b1dcfec702e41462be7b33f5a9ad",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 182,
        "deletions": 119,
        "changes": 301,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa80c814874a2893e4323ba5148fba21d7f421cd/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa80c814874a2893e4323ba5148fba21d7f421cd/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa80c814874a2893e4323ba5148fba21d7f421cd",
        "patch": "@@ -189,9 +189,9 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* tip, const CBlockIn\n     return result;\n }\n \n-static UniValue getblockcount(const JSONRPCRequest& request)\n+static RPCHelpMan getblockcount()\n {\n-            RPCHelpMan{\"getblockcount\",\n+    return RPCHelpMan{\"getblockcount\",\n                 \"\\nReturns the height of the most-work fully-validated chain.\\n\"\n                 \"The genesis block has height 0.\\n\",\n                 {},\n@@ -201,15 +201,17 @@ static UniValue getblockcount(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockcount\", \"\")\n             + HelpExampleRpc(\"getblockcount\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n     return ::ChainActive().Height();\n+},\n+    };\n }\n \n-static UniValue getbestblockhash(const JSONRPCRequest& request)\n+static RPCHelpMan getbestblockhash()\n {\n-            RPCHelpMan{\"getbestblockhash\",\n+    return RPCHelpMan{\"getbestblockhash\",\n                 \"\\nReturns the hash of the best (tip) block in the most-work fully-validated chain.\\n\",\n                 {},\n                 RPCResult{\n@@ -218,10 +220,12 @@ static UniValue getbestblockhash(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getbestblockhash\", \"\")\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n     return ::ChainActive().Tip()->GetBlockHash().GetHex();\n+},\n+    };\n }\n \n void RPCNotifyBlockChange(const CBlockIndex* pindex)\n@@ -234,9 +238,9 @@ void RPCNotifyBlockChange(const CBlockIndex* pindex)\n     cond_blockchange.notify_all();\n }\n \n-static UniValue waitfornewblock(const JSONRPCRequest& request)\n+static RPCHelpMan waitfornewblock()\n {\n-            RPCHelpMan{\"waitfornewblock\",\n+    return RPCHelpMan{\"waitfornewblock\",\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n@@ -252,7 +256,8 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"waitfornewblock\", \"1000\")\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n                 },\n-            }.Check(request);\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     int timeout = 0;\n     if (!request.params[0].isNull())\n         timeout = request.params[0].get_int();\n@@ -271,11 +276,13 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n     ret.pushKV(\"hash\", block.hash.GetHex());\n     ret.pushKV(\"height\", block.height);\n     return ret;\n+},\n+    };\n }\n \n-static UniValue waitforblock(const JSONRPCRequest& request)\n+static RPCHelpMan waitforblock()\n {\n-            RPCHelpMan{\"waitforblock\",\n+    return RPCHelpMan{\"waitforblock\",\n                 \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n                 {\n@@ -292,7 +299,8 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\" 1000\")\n             + HelpExampleRpc(\"waitforblock\", \"\\\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\\\", 1000\")\n                 },\n-            }.Check(request);\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     int timeout = 0;\n \n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n@@ -314,11 +322,13 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n     ret.pushKV(\"hash\", block.hash.GetHex());\n     ret.pushKV(\"height\", block.height);\n     return ret;\n+},\n+    };\n }\n \n-static UniValue waitforblockheight(const JSONRPCRequest& request)\n+static RPCHelpMan waitforblockheight()\n {\n-            RPCHelpMan{\"waitforblockheight\",\n+    return RPCHelpMan{\"waitforblockheight\",\n                 \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n                 \"of the current tip.\\n\"\n                 \"\\nReturns the current block on timeout or exit.\\n\",\n@@ -336,7 +346,8 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                     HelpExampleCli(\"waitforblockheight\", \"100 1000\")\n             + HelpExampleRpc(\"waitforblockheight\", \"100, 1000\")\n                 },\n-            }.Check(request);\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     int timeout = 0;\n \n     int height = request.params[0].get_int();\n@@ -357,27 +368,31 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n     ret.pushKV(\"hash\", block.hash.GetHex());\n     ret.pushKV(\"height\", block.height);\n     return ret;\n+},\n+    };\n }\n \n-static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n+static RPCHelpMan syncwithvalidationinterfacequeue()\n {\n-            RPCHelpMan{\"syncwithvalidationinterfacequeue\",\n+    return RPCHelpMan{\"syncwithvalidationinterfacequeue\",\n                 \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\",\n                 {},\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"syncwithvalidationinterfacequeue\",\"\")\n             + HelpExampleRpc(\"syncwithvalidationinterfacequeue\",\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     SyncWithValidationInterfaceQueue();\n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue getdifficulty(const JSONRPCRequest& request)\n+static RPCHelpMan getdifficulty()\n {\n-            RPCHelpMan{\"getdifficulty\",\n+    return RPCHelpMan{\"getdifficulty\",\n                 \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\",\n                 {},\n                 RPCResult{\n@@ -386,10 +401,12 @@ static UniValue getdifficulty(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getdifficulty\", \"\")\n             + HelpExampleRpc(\"getdifficulty\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n     return GetDifficulty(::ChainActive().Tip());\n+},\n+    };\n }\n \n static std::vector<RPCResult> MempoolEntryDescription() { return {\n@@ -510,9 +527,9 @@ UniValue MempoolToJSON(const CTxMemPool& pool, bool verbose)\n     }\n }\n \n-static UniValue getrawmempool(const JSONRPCRequest& request)\n+static RPCHelpMan getrawmempool()\n {\n-            RPCHelpMan{\"getrawmempool\",\n+    return RPCHelpMan{\"getrawmempool\",\n                 \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n                 \"\\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\\n\",\n                 {\n@@ -534,18 +551,20 @@ static UniValue getrawmempool(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getrawmempool\", \"true\")\n             + HelpExampleRpc(\"getrawmempool\", \"true\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     bool fVerbose = false;\n     if (!request.params[0].isNull())\n         fVerbose = request.params[0].get_bool();\n \n     return MempoolToJSON(EnsureMemPool(request.context), fVerbose);\n+},\n+    };\n }\n \n-static UniValue getmempoolancestors(const JSONRPCRequest& request)\n+static RPCHelpMan getmempoolancestors()\n {\n-            RPCHelpMan{\"getmempoolancestors\",\n+    return RPCHelpMan{\"getmempoolancestors\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n@@ -565,8 +584,8 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolancestors\", \"\\\"mytxid\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     bool fVerbose = false;\n     if (!request.params[1].isNull())\n         fVerbose = request.params[1].get_bool();\n@@ -603,11 +622,13 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n         }\n         return o;\n     }\n+},\n+    };\n }\n \n-static UniValue getmempooldescendants(const JSONRPCRequest& request)\n+static RPCHelpMan getmempooldescendants()\n {\n-            RPCHelpMan{\"getmempooldescendants\",\n+    return RPCHelpMan{\"getmempooldescendants\",\n                 \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n@@ -627,8 +648,8 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempooldescendants\", \"\\\"mytxid\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     bool fVerbose = false;\n     if (!request.params[1].isNull())\n         fVerbose = request.params[1].get_bool();\n@@ -666,11 +687,13 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n         }\n         return o;\n     }\n+},\n+    };\n }\n \n-static UniValue getmempoolentry(const JSONRPCRequest& request)\n+static RPCHelpMan getmempoolentry()\n {\n-            RPCHelpMan{\"getmempoolentry\",\n+    return RPCHelpMan{\"getmempoolentry\",\n                 \"\\nReturns mempool data for given transaction\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id (must be in mempool)\"},\n@@ -681,8 +704,8 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n             + HelpExampleRpc(\"getmempoolentry\", \"\\\"mytxid\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     const CTxMemPool& mempool = EnsureMemPool(request.context);\n@@ -697,11 +720,13 @@ static UniValue getmempoolentry(const JSONRPCRequest& request)\n     UniValue info(UniValue::VOBJ);\n     entryToJSON(mempool, info, e);\n     return info;\n+},\n+    };\n }\n \n-static UniValue getblockhash(const JSONRPCRequest& request)\n+static RPCHelpMan getblockhash()\n {\n-            RPCHelpMan{\"getblockhash\",\n+    return RPCHelpMan{\"getblockhash\",\n                 \"\\nReturns hash of block in best-block-chain at height provided.\\n\",\n                 {\n                     {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The height index\"},\n@@ -712,8 +737,8 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockhash\", \"1000\")\n             + HelpExampleRpc(\"getblockhash\", \"1000\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n \n     int nHeight = request.params[0].get_int();\n@@ -722,11 +747,13 @@ static UniValue getblockhash(const JSONRPCRequest& request)\n \n     CBlockIndex* pblockindex = ::ChainActive()[nHeight];\n     return pblockindex->GetBlockHash().GetHex();\n+},\n+    };\n }\n \n-static UniValue getblockheader(const JSONRPCRequest& request)\n+static RPCHelpMan getblockheader()\n {\n-            RPCHelpMan{\"getblockheader\",\n+    return RPCHelpMan{\"getblockheader\",\n                 \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n                 \"If verbose is true, returns an Object with information about blockheader <hash>.\\n\",\n                 {\n@@ -760,8 +787,8 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblockheader\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     uint256 hash(ParseHashV(request.params[0], \"hash\"));\n \n     bool fVerbose = true;\n@@ -789,6 +816,8 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n     }\n \n     return blockheaderToJSON(tip, pblockindex);\n+},\n+    };\n }\n \n static CBlock GetBlockChecked(const CBlockIndex* pblockindex)\n@@ -822,9 +851,9 @@ static CBlockUndo GetUndoChecked(const CBlockIndex* pblockindex)\n     return blockUndo;\n }\n \n-static UniValue getblock(const JSONRPCRequest& request)\n+static RPCHelpMan getblock()\n {\n-    RPCHelpMan{\"getblock\",\n+    return RPCHelpMan{\"getblock\",\n                 \"\\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n                 \"If verbosity is 1, returns an Object with information about block <hash>.\\n\"\n                 \"If verbosity is 2, returns an Object with information about block <hash> and information about each transaction. \\n\",\n@@ -877,8 +906,8 @@ static UniValue getblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n             + HelpExampleRpc(\"getblock\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\"\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n     int verbosity = 1;\n@@ -913,11 +942,13 @@ static UniValue getblock(const JSONRPCRequest& request)\n     }\n \n     return blockToJSON(block, tip, pblockindex, verbosity >= 2);\n+},\n+    };\n }\n \n-static UniValue pruneblockchain(const JSONRPCRequest& request)\n+static RPCHelpMan pruneblockchain()\n {\n-            RPCHelpMan{\"pruneblockchain\", \"\",\n+    return RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n                     {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or to a \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n@@ -928,8 +959,8 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n                     HelpExampleCli(\"pruneblockchain\", \"1000\")\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     if (!fPruneMode)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n \n@@ -968,11 +999,13 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n         block = block->pprev;\n     }\n     return uint64_t(block->nHeight);\n+},\n+    };\n }\n \n-static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n+static RPCHelpMan gettxoutsetinfo()\n {\n-            RPCHelpMan{\"gettxoutsetinfo\",\n+    return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n                 \"Note this call may take some time.\\n\",\n                 {\n@@ -994,8 +1027,8 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"gettxoutsetinfo\", \"\")\n             + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n@@ -1020,11 +1053,13 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n     }\n     return ret;\n+},\n+    };\n }\n \n-UniValue gettxout(const JSONRPCRequest& request)\n+static RPCHelpMan gettxout()\n {\n-            RPCHelpMan{\"gettxout\",\n+    return RPCHelpMan{\"gettxout\",\n                 \"\\nReturns details about an unspent transaction output.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The transaction id\"},\n@@ -1056,8 +1091,8 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"gettxout\", \"\\\"txid\\\", 1\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n \n     UniValue ret(UniValue::VOBJ);\n@@ -1099,11 +1134,13 @@ UniValue gettxout(const JSONRPCRequest& request)\n     ret.pushKV(\"coinbase\", (bool)coin.fCoinBase);\n \n     return ret;\n+},\n+    };\n }\n \n-static UniValue verifychain(const JSONRPCRequest& request)\n+static RPCHelpMan verifychain()\n {\n-            RPCHelpMan{\"verifychain\",\n+    return RPCHelpMan{\"verifychain\",\n                 \"\\nVerifies blockchain database.\\n\",\n                 {\n                     {\"checklevel\", RPCArg::Type::NUM, /* default */ strprintf(\"%d, range=0-4\", DEFAULT_CHECKLEVEL),\n@@ -1116,14 +1153,16 @@ static UniValue verifychain(const JSONRPCRequest& request)\n                     HelpExampleCli(\"verifychain\", \"\")\n             + HelpExampleRpc(\"verifychain\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     const int check_level(request.params[0].isNull() ? DEFAULT_CHECKLEVEL : request.params[0].get_int());\n     const int check_depth{request.params[1].isNull() ? DEFAULT_CHECKBLOCKS : request.params[1].get_int()};\n \n     LOCK(cs_main);\n \n     return CVerifyDB().VerifyDB(Params(), &::ChainstateActive().CoinsTip(), check_level, check_depth);\n+},\n+    };\n }\n \n static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n@@ -1192,9 +1231,9 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     softforks.pushKV(name, rv);\n }\n \n-UniValue getblockchaininfo(const JSONRPCRequest& request)\n+RPCHelpMan getblockchaininfo()\n {\n-            RPCHelpMan{\"getblockchaininfo\",\n+    return RPCHelpMan{\"getblockchaininfo\",\n                 \"Returns an object containing various state info regarding blockchain processing.\\n\",\n                 {},\n                 RPCResult{\n@@ -1245,8 +1284,8 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getblockchaininfo\", \"\")\n             + HelpExampleRpc(\"getblockchaininfo\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n \n     const CBlockIndex* tip = ::ChainActive().Tip();\n@@ -1291,6 +1330,8 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);\n     return obj;\n+},\n+    };\n }\n \n /** Comparison function for sorting the getchaintips heads.  */\n@@ -1308,9 +1349,9 @@ struct CompareBlocksByHeight\n     }\n };\n \n-static UniValue getchaintips(const JSONRPCRequest& request)\n+static RPCHelpMan getchaintips()\n {\n-            RPCHelpMan{\"getchaintips\",\n+    return RPCHelpMan{\"getchaintips\",\n                 \"Return information about all known tips in the block tree,\"\n                 \" including the main chain as well as orphaned branches.\\n\",\n                 {},\n@@ -1333,8 +1374,8 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getchaintips\", \"\")\n             + HelpExampleRpc(\"getchaintips\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     ChainstateManager& chainman = EnsureChainman(request.context);\n     LOCK(cs_main);\n \n@@ -1401,6 +1442,8 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n     }\n \n     return res;\n+},\n+    };\n }\n \n UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n@@ -1420,9 +1463,9 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     return ret;\n }\n \n-static UniValue getmempoolinfo(const JSONRPCRequest& request)\n+static RPCHelpMan getmempoolinfo()\n {\n-            RPCHelpMan{\"getmempoolinfo\",\n+    return RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n                 {},\n                 RPCResult{\n@@ -1441,14 +1484,16 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmempoolinfo\", \"\")\n             + HelpExampleRpc(\"getmempoolinfo\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     return MempoolInfoToJSON(EnsureMemPool(request.context));\n+},\n+    };\n }\n \n-static UniValue preciousblock(const JSONRPCRequest& request)\n+static RPCHelpMan preciousblock()\n {\n-            RPCHelpMan{\"preciousblock\",\n+    return RPCHelpMan{\"preciousblock\",\n                 \"\\nTreats a block as if it were received before others with the same work.\\n\"\n                 \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n                 \"\\nThe effects of preciousblock are not retained across restarts.\\n\",\n@@ -1460,8 +1505,8 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n \n@@ -1481,11 +1526,13 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue invalidateblock(const JSONRPCRequest& request)\n+static RPCHelpMan invalidateblock()\n {\n-            RPCHelpMan{\"invalidateblock\",\n+    return RPCHelpMan{\"invalidateblock\",\n                 \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to mark as invalid\"},\n@@ -1495,8 +1542,8 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     BlockValidationState state;\n \n@@ -1519,11 +1566,13 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue reconsiderblock(const JSONRPCRequest& request)\n+static RPCHelpMan reconsiderblock()\n {\n-            RPCHelpMan{\"reconsiderblock\",\n+    return RPCHelpMan{\"reconsiderblock\",\n                 \"\\nRemoves invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\\n\"\n                 \"This can be used to undo the effects of invalidateblock.\\n\",\n                 {\n@@ -1534,8 +1583,8 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n                     HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n     {\n@@ -1556,11 +1605,13 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue getchaintxstats(const JSONRPCRequest& request)\n+static RPCHelpMan getchaintxstats()\n {\n-            RPCHelpMan{\"getchaintxstats\",\n+    return RPCHelpMan{\"getchaintxstats\",\n                 \"\\nCompute statistics about the total number and rate of transactions in the chain.\\n\",\n                 {\n                     {\"nblocks\", RPCArg::Type::NUM, /* default */ \"one month\", \"Size of the window in number of blocks\"},\n@@ -1582,8 +1633,8 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getchaintxstats\", \"\")\n             + HelpExampleRpc(\"getchaintxstats\", \"2016\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n@@ -1633,6 +1684,8 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     }\n \n     return ret;\n+},\n+    };\n }\n \n template<typename T>\n@@ -1691,9 +1744,9 @@ static inline bool SetHasKeys(const std::set<T>& set, const Tk& key, const Args&\n // outpoint (needed for the utxo index) + nHeight + fCoinBase\n static constexpr size_t PER_UTXO_OVERHEAD = sizeof(COutPoint) + sizeof(uint32_t) + sizeof(bool);\n \n-static UniValue getblockstats(const JSONRPCRequest& request)\n+static RPCHelpMan getblockstats()\n {\n-    RPCHelpMan{\"getblockstats\",\n+    return RPCHelpMan{\"getblockstats\",\n                 \"\\nCompute per block statistics for a given window. All amounts are in satoshis.\\n\"\n                 \"It won't work for some heights with pruning.\\n\",\n                 {\n@@ -1751,8 +1804,8 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                     HelpExampleRpc(\"getblockstats\", R\"(\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\", [\"minfeerate\",\"avgfeerate\"])\") +\n                     HelpExampleRpc(\"getblockstats\", R\"(1000, [\"minfeerate\",\"avgfeerate\"])\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n \n     CBlockIndex* pindex;\n@@ -1948,20 +2001,22 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n         ret.pushKV(stat, value);\n     }\n     return ret;\n+},\n+    };\n }\n \n-static UniValue savemempool(const JSONRPCRequest& request)\n+static RPCHelpMan savemempool()\n {\n-            RPCHelpMan{\"savemempool\",\n+    return RPCHelpMan{\"savemempool\",\n                 \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\",\n                 {},\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"savemempool\", \"\")\n             + HelpExampleRpc(\"savemempool\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     const CTxMemPool& mempool = EnsureMemPool(request.context);\n \n     if (!mempool.IsLoaded()) {\n@@ -1973,6 +2028,8 @@ static UniValue savemempool(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n namespace {\n@@ -2034,9 +2091,9 @@ class CoinsViewScanReserver\n     }\n };\n \n-UniValue scantxoutset(const JSONRPCRequest& request)\n+static RPCHelpMan scantxoutset()\n {\n-            RPCHelpMan{\"scantxoutset\",\n+    return RPCHelpMan{\"scantxoutset\",\n                 \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n                 \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n                 \"Examples of output descriptors are:\\n\"\n@@ -2090,8 +2147,8 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                         {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of all found unspent outputs in \" + CURRENCY_UNIT},\n                     }},\n                 RPCExamples{\"\"},\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR});\n \n     UniValue result(UniValue::VOBJ);\n@@ -2184,11 +2241,13 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid command\");\n     }\n     return result;\n+},\n+    };\n }\n \n-static UniValue getblockfilter(const JSONRPCRequest& request)\n+static RPCHelpMan getblockfilter()\n {\n-            RPCHelpMan{\"getblockfilter\",\n+    return RPCHelpMan{\"getblockfilter\",\n                 \"\\nRetrieve a BIP 157 content filter for a particular block.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hash of the block\"},\n@@ -2203,9 +2262,9 @@ static UniValue getblockfilter(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"getblockfilter\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\" \\\"basic\\\"\") +\n                     HelpExampleRpc(\"getblockfilter\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\", \\\"basic\\\"\")\n-                }\n-            }.Check(request);\n-\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     uint256 block_hash = ParseHashV(request.params[0], \"blockhash\");\n     std::string filtertype_name = \"basic\";\n     if (!request.params[1].isNull()) {\n@@ -2260,16 +2319,18 @@ static UniValue getblockfilter(const JSONRPCRequest& request)\n     ret.pushKV(\"filter\", HexStr(filter.GetEncodedFilter()));\n     ret.pushKV(\"header\", filter_header.GetHex());\n     return ret;\n+},\n+    };\n }\n \n /**\n  * Serialize the UTXO set to a file for loading elsewhere.\n  *\n  * @see SnapshotMetadata\n  */\n-UniValue dumptxoutset(const JSONRPCRequest& request)\n+static RPCHelpMan dumptxoutset()\n {\n-    RPCHelpMan{\n+    return RPCHelpMan{\n         \"dumptxoutset\",\n         \"\\nWrite the serialized UTXO set to disk.\\n\",\n         {\n@@ -2290,9 +2351,9 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n         },\n         RPCExamples{\n             HelpExampleCli(\"dumptxoutset\", \"utxo.dat\")\n-        }\n-    }.Check(request);\n-\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     fs::path path = fs::absolute(request.params[0].get_str(), GetDataDir());\n     // Write to a temporary path and then move into `path` on completion\n     // to avoid confusion due to an interruption.\n@@ -2366,6 +2427,8 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n     result.pushKV(\"base_height\", tip->nHeight);\n     result.pushKV(\"path\", path.string());\n     return result;\n+},\n+    };\n }\n \n void RegisterBlockchainRPCCommands(CRPCTable &t)"
      }
    ]
  },
  {
    "sha": "fa6bb0ce5dba33970e2c1e47ea4d0d2c0718eccb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZiYjBjZTVkYmEzMzk3MGUyYzFlNDdlYTRkMGQyYzA3MThlY2Ni",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-31T16:29:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-31T16:29:57Z"
      },
      "message": "Assert that RPCArg names are equal to CRPCCommand ones (rawtransaction)",
      "tree": {
        "sha": "5b8f8e24e0a8b0719298f8794cedc3d89654ecfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b8f8e24e0a8b0719298f8794cedc3d89654ecfb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6bb0ce5dba33970e2c1e47ea4d0d2c0718eccb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiTYQwApfc+PhTok4vHUuADO7vHL04bY8Fh7GiyYMgU3s9FtX1qEfgBJFQo1RNe\nEU+YbVe6TDid55yivovmP+EhPgf47SiWA04gcdxBa1O565Cd7yPV+k9yfLFTj0bu\nTqCV9TH3jsxk3ppAxBfRMe9+hLNok8I22JpW9sr2OhdDi/pxTGWGMhRFaaU3TjOg\nadnibae/GmJfoFWPgseKznaxO1jQvi5hyMVtmUbc5iE+74NXzjl6IjVjFvqHYcHI\n7Q4Z146rkGjnGIDc0/0Opgmi+/QN64K5gpL7r6wl+U4ysz55TCeLt9BN9eYYAtbF\n34W4hCfWJyYg/QuuhwxvL3RWTYhigWgSwEbrGkzjN86ARaCU76XM9Vld57R06dz+\neAd8wl+eF3nBR54Km7LuAbMOCUEaJx7CHCD6hiRUplJn2dyg/p8bSEyOvOjYu7K3\n0hmqitP+un+DCsw4e9lawg14sNEkDI38aNwy1VP/yTmDuQPPqrJFI85PtLLgQ6fG\n7qssQlEp\n=ZMlJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b8f8e24e0a8b0719298f8794cedc3d89654ecfb\nparent fa80c814874a2893e4323ba5148fba21d7f421cd\nauthor MarcoFalke <falke.marco@gmail.com> 1598891388 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1598891397 +0200\n\nAssert that RPCArg names are equal to CRPCCommand ones (rawtransaction)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6bb0ce5dba33970e2c1e47ea4d0d2c0718eccb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6bb0ce5dba33970e2c1e47ea4d0d2c0718eccb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6bb0ce5dba33970e2c1e47ea4d0d2c0718eccb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa80c814874a2893e4323ba5148fba21d7f421cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80c814874a2893e4323ba5148fba21d7f421cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80c814874a2893e4323ba5148fba21d7f421cd"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 111,
      "deletions": 72
    },
    "files": [
      {
        "sha": "05ba5e9406f0b1de7694675aa5475fb10ffa2f62",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 111,
        "deletions": 72,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bb0ce5dba33970e2c1e47ea4d0d2c0718eccb/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bb0ce5dba33970e2c1e47ea4d0d2c0718eccb/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa6bb0ce5dba33970e2c1e47ea4d0d2c0718eccb",
        "patch": "@@ -67,9 +67,9 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n     }\n }\n \n-static UniValue getrawtransaction(const JSONRPCRequest& request)\n+static RPCHelpMan getrawtransaction()\n {\n-    RPCHelpMan{\n+    return RPCHelpMan{\n                 \"getrawtransaction\",\n                 \"\\nReturn the raw transaction data.\\n\"\n \n@@ -155,8 +155,8 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" false \\\"myblockhash\\\"\")\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     const NodeContext& node = EnsureNodeContext(request.context);\n \n     bool in_active_chain = true;\n@@ -217,11 +217,13 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     if (blockindex) result.pushKV(\"in_active_chain\", in_active_chain);\n     TxToJSON(*tx, hash_block, result);\n     return result;\n+},\n+    };\n }\n \n-static UniValue gettxoutproof(const JSONRPCRequest& request)\n+static RPCHelpMan gettxoutproof()\n {\n-            RPCHelpMan{\"gettxoutproof\",\n+    return RPCHelpMan{\"gettxoutproof\",\n                 \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n                 \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n                 \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n@@ -239,8 +241,8 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n                     RPCResult::Type::STR, \"data\", \"A string that is a serialized, hex-encoded data for the proof.\"\n                 },\n                 RPCExamples{\"\"},\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::set<uint256> setTxids;\n     uint256 oneTxid;\n     UniValue txids = request.params[0].get_array();\n@@ -315,11 +317,13 @@ static UniValue gettxoutproof(const JSONRPCRequest& request)\n     ssMB << mb;\n     std::string strHex = HexStr(ssMB);\n     return strHex;\n+},\n+    };\n }\n \n-static UniValue verifytxoutproof(const JSONRPCRequest& request)\n+static RPCHelpMan verifytxoutproof()\n {\n-            RPCHelpMan{\"verifytxoutproof\",\n+    return RPCHelpMan{\"verifytxoutproof\",\n                 \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n                 \"and throwing an RPC error if the block is not in our best chain\\n\",\n                 {\n@@ -332,8 +336,8 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n                     }\n                 },\n                 RPCExamples{\"\"},\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n@@ -360,11 +364,13 @@ static UniValue verifytxoutproof(const JSONRPCRequest& request)\n     }\n \n     return res;\n+},\n+    };\n }\n \n-static UniValue createrawtransaction(const JSONRPCRequest& request)\n+static RPCHelpMan createrawtransaction()\n {\n-            RPCHelpMan{\"createrawtransaction\",\n+    return RPCHelpMan{\"createrawtransaction\",\n                 \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n                 \"Outputs can be addresses or data.\\n\"\n                 \"Returns hex-encoded raw transaction.\\n\"\n@@ -412,8 +418,8 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"address\\\\\\\":0.01}]\\\"\")\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n         UniValueType(), // ARR or OBJ, checked later\n@@ -429,11 +435,13 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n     CMutableTransaction rawTx = ConstructTransaction(request.params[0], request.params[1], request.params[2], rbf);\n \n     return EncodeHexTx(CTransaction(rawTx));\n+},\n+    };\n }\n \n-static UniValue decoderawtransaction(const JSONRPCRequest& request)\n+static RPCHelpMan decoderawtransaction()\n {\n-    RPCHelpMan{\"decoderawtransaction\",\n+    return RPCHelpMan{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n@@ -498,8 +506,8 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n     CMutableTransaction mtx;\n@@ -515,6 +523,8 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n     TxToUniv(CTransaction(std::move(mtx)), uint256(), result, false);\n \n     return result;\n+},\n+    };\n }\n \n static std::string GetAllOutputTypes()\n@@ -527,9 +537,9 @@ static std::string GetAllOutputTypes()\n     return Join(ret, \", \");\n }\n \n-static UniValue decodescript(const JSONRPCRequest& request)\n+static RPCHelpMan decodescript()\n {\n-    RPCHelpMan{\"decodescript\",\n+    return RPCHelpMan{\"decodescript\",\n                 \"\\nDecode a hex-encoded script.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded script\"},\n@@ -563,8 +573,8 @@ static UniValue decodescript(const JSONRPCRequest& request)\n                     HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     UniValue r(UniValue::VOBJ);\n@@ -616,11 +626,13 @@ static UniValue decodescript(const JSONRPCRequest& request)\n     }\n \n     return r;\n+},\n+    };\n }\n \n-static UniValue combinerawtransaction(const JSONRPCRequest& request)\n+static RPCHelpMan combinerawtransaction()\n {\n-            RPCHelpMan{\"combinerawtransaction\",\n+    return RPCHelpMan{\"combinerawtransaction\",\n                 \"\\nCombine multiple partially signed transactions into one transaction.\\n\"\n                 \"The combined transaction may be another partially signed transaction or a \\n\"\n                 \"fully signed transaction.\",\n@@ -637,8 +649,8 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"combinerawtransaction\", R\"('[\"myhex1\", \"myhex2\", \"myhex3\"]')\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n \n     UniValue txs = request.params[0].get_array();\n     std::vector<CMutableTransaction> txVariants(txs.size());\n@@ -699,11 +711,13 @@ static UniValue combinerawtransaction(const JSONRPCRequest& request)\n     }\n \n     return EncodeHexTx(CTransaction(mergedTx));\n+},\n+    };\n }\n \n-static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+static RPCHelpMan signrawtransactionwithkey()\n {\n-            RPCHelpMan{\"signrawtransactionwithkey\",\n+    return RPCHelpMan{\"signrawtransactionwithkey\",\n                 \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n                 \"The second argument is an array of base58-encoded private\\n\"\n                 \"keys that will be the only keys used to sign the transaction.\\n\"\n@@ -761,8 +775,8 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                     HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\" \\\"[\\\\\\\"key1\\\\\\\",\\\\\\\"key2\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\", \\\"[\\\\\\\"key1\\\\\\\",\\\\\\\"key2\\\\\\\"]\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n \n     CMutableTransaction mtx;\n@@ -795,11 +809,13 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     UniValue result(UniValue::VOBJ);\n     SignTransaction(mtx, &keystore, coins, request.params[3], result);\n     return result;\n+},\n+    };\n }\n \n-static UniValue sendrawtransaction(const JSONRPCRequest& request)\n+static RPCHelpMan sendrawtransaction()\n {\n-    RPCHelpMan{\"sendrawtransaction\",\n+    return RPCHelpMan{\"sendrawtransaction\",\n                 \"\\nSubmit a raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n                 \"\\nNote that the transaction will be sent unconditionally to all peers, so using this\\n\"\n                 \"for manual rebroadcast may degrade privacy by leaking the transaction's origin, as\\n\"\n@@ -824,8 +840,8 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {\n         UniValue::VSTR,\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n@@ -853,11 +869,13 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n     }\n \n     return tx->GetHash().GetHex();\n+},\n+    };\n }\n \n-static UniValue testmempoolaccept(const JSONRPCRequest& request)\n+static RPCHelpMan testmempoolaccept()\n {\n-    RPCHelpMan{\"testmempoolaccept\",\n+    return RPCHelpMan{\"testmempoolaccept\",\n                 \"\\nReturns result of mempool acceptance tests indicating if raw transaction (serialized, hex-encoded) would be accepted by mempool.\\n\"\n                 \"\\nThis checks if the transaction violates the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n@@ -892,8 +910,8 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"testmempoolaccept\", \"[\\\"signedhex\\\"]\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n@@ -944,11 +962,13 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     result.push_back(std::move(result_0));\n     return result;\n+},\n+    };\n }\n \n-UniValue decodepsbt(const JSONRPCRequest& request)\n+static RPCHelpMan decodepsbt()\n {\n-            RPCHelpMan{\"decodepsbt\",\n+    return RPCHelpMan{\"decodepsbt\",\n                 \"\\nReturn a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.\\n\",\n                 {\n                     {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The PSBT base64 string\"},\n@@ -1060,8 +1080,8 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"decodepsbt\", \"\\\"psbt\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     // Unserialize the transactions\n@@ -1253,11 +1273,13 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n     }\n \n     return result;\n+},\n+    };\n }\n \n-UniValue combinepsbt(const JSONRPCRequest& request)\n+static RPCHelpMan combinepsbt()\n {\n-            RPCHelpMan{\"combinepsbt\",\n+    return RPCHelpMan{\"combinepsbt\",\n                 \"\\nCombine multiple partially signed Bitcoin transactions into one transaction.\\n\"\n                 \"Implements the Combiner role.\\n\",\n                 {\n@@ -1273,8 +1295,8 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"combinepsbt\", R\"('[\"mybase64_1\", \"mybase64_2\", \"mybase64_3\"]')\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VARR}, true);\n \n     // Unserialize the transactions\n@@ -1301,11 +1323,13 @@ UniValue combinepsbt(const JSONRPCRequest& request)\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << merged_psbt;\n     return EncodeBase64(MakeUCharSpan(ssTx));\n+},\n+    };\n }\n \n-UniValue finalizepsbt(const JSONRPCRequest& request)\n+static RPCHelpMan finalizepsbt()\n {\n-            RPCHelpMan{\"finalizepsbt\",\n+    return RPCHelpMan{\"finalizepsbt\",\n                 \"Finalize the inputs of a PSBT. If the transaction is fully signed, it will produce a\\n\"\n                 \"network serialized transaction which can be broadcast with sendrawtransaction. Otherwise a PSBT will be\\n\"\n                 \"created which has the final_scriptSig and final_scriptWitness fields filled for inputs that are complete.\\n\"\n@@ -1326,8 +1350,8 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"finalizepsbt\", \"\\\"psbt\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL}, true);\n \n     // Unserialize the transactions\n@@ -1358,11 +1382,13 @@ UniValue finalizepsbt(const JSONRPCRequest& request)\n     result.pushKV(\"complete\", complete);\n \n     return result;\n+},\n+    };\n }\n \n-UniValue createpsbt(const JSONRPCRequest& request)\n+static RPCHelpMan createpsbt()\n {\n-            RPCHelpMan{\"createpsbt\",\n+    return RPCHelpMan{\"createpsbt\",\n                 \"\\nCreates a transaction in the Partially Signed Transaction format.\\n\"\n                 \"Implements the Creator role.\\n\",\n                 {\n@@ -1404,8 +1430,8 @@ UniValue createpsbt(const JSONRPCRequest& request)\n                 RPCExamples{\n                     HelpExampleCli(\"createpsbt\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"[{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}]\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n \n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n@@ -1436,11 +1462,13 @@ UniValue createpsbt(const JSONRPCRequest& request)\n     ssTx << psbtx;\n \n     return EncodeBase64(MakeUCharSpan(ssTx));\n+},\n+    };\n }\n \n-UniValue converttopsbt(const JSONRPCRequest& request)\n+static RPCHelpMan converttopsbt()\n {\n-    RPCHelpMan{\"converttopsbt\",\n+    return RPCHelpMan{\"converttopsbt\",\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n@@ -1464,8 +1492,8 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                             \"\\nConvert the transaction to a PSBT\\n\"\n                             + HelpExampleCli(\"converttopsbt\", \"\\\"rawtransaction\\\"\")\n                 },\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VBOOL}, true);\n \n     // parse hex string from parameter\n@@ -1503,11 +1531,13 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n     ssTx << psbtx;\n \n     return EncodeBase64(MakeUCharSpan(ssTx));\n+},\n+    };\n }\n \n-UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n+static RPCHelpMan utxoupdatepsbt()\n {\n-            RPCHelpMan{\"utxoupdatepsbt\",\n+    return RPCHelpMan{\"utxoupdatepsbt\",\n             \"\\nUpdates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set or the mempool.\\n\",\n             {\n                 {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"},\n@@ -1524,8 +1554,9 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n             },\n             RPCExamples {\n                 HelpExampleCli(\"utxoupdatepsbt\", \"\\\"psbt\\\"\")\n-            }}.Check(request);\n-\n+            },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR}, true);\n \n     // Unserialize the transactions\n@@ -1591,11 +1622,13 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << psbtx;\n     return EncodeBase64(MakeUCharSpan(ssTx));\n+},\n+    };\n }\n \n-UniValue joinpsbts(const JSONRPCRequest& request)\n+static RPCHelpMan joinpsbts()\n {\n-            RPCHelpMan{\"joinpsbts\",\n+    return RPCHelpMan{\"joinpsbts\",\n             \"\\nJoins multiple distinct PSBTs with different inputs and outputs into one PSBT with inputs and outputs from all of the PSBTs\\n\"\n             \"No input in any of the PSBTs can be in more than one of the PSBTs.\\n\",\n             {\n@@ -1609,8 +1642,9 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n             },\n             RPCExamples {\n                 HelpExampleCli(\"joinpsbts\", \"\\\"psbt\\\"\")\n-            }}.Check(request);\n-\n+            },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VARR}, true);\n \n     // Unserialize the transactions\n@@ -1684,11 +1718,13 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n     ssTx << shuffled_psbt;\n     return EncodeBase64(MakeUCharSpan(ssTx));\n+},\n+    };\n }\n \n-UniValue analyzepsbt(const JSONRPCRequest& request)\n+static RPCHelpMan analyzepsbt()\n {\n-            RPCHelpMan{\"analyzepsbt\",\n+    return RPCHelpMan{\"analyzepsbt\",\n             \"\\nAnalyzes and provides information about the current status of a PSBT and its inputs\\n\",\n             {\n                 {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n@@ -1727,8 +1763,9 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n             },\n             RPCExamples {\n                 HelpExampleCli(\"analyzepsbt\", \"\\\"psbt\\\"\")\n-            }}.Check(request);\n-\n+            },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     // Unserialize the transaction\n@@ -1792,6 +1829,8 @@ UniValue analyzepsbt(const JSONRPCRequest& request)\n     }\n \n     return result;\n+},\n+    };\n }\n \n void RegisterRawTransactionRPCCommands(CRPCTable &t)"
      }
    ]
  }
]