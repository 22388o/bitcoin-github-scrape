[
  {
    "sha": "6412265b5935173fcaa02b20195d0e282cb2d804",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDEyMjY1YjU5MzUxNzNmY2FhMDJiMjAxOTVkMGUyODJjYjJkODA0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-21T21:28:03Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-09-27T03:53:13Z"
      },
      "message": "Import pubkeys when importing p2sh with importmulti",
      "tree": {
        "sha": "b7c21d20cd2913f71c765602e3fff9aced99edf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7c21d20cd2913f71c765602e3fff9aced99edf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6412265b5935173fcaa02b20195d0e282cb2d804",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6412265b5935173fcaa02b20195d0e282cb2d804",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6412265b5935173fcaa02b20195d0e282cb2d804",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6412265b5935173fcaa02b20195d0e282cb2d804/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "427253cf7e19ed9ef86b45457de41e345676c88e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/427253cf7e19ed9ef86b45457de41e345676c88e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/427253cf7e19ed9ef86b45457de41e345676c88e"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e36ca345a3d47a1fb33a5c6f0067e11287f6e57b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6412265b5935173fcaa02b20195d0e282cb2d804/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6412265b5935173fcaa02b20195d0e282cb2d804/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=6412265b5935173fcaa02b20195d0e282cb2d804",
        "patch": "@@ -5,6 +5,7 @@\n #include <chain.h>\n #include <key_io.h>\n #include <rpc/server.h>\n+#include <rpc/util.h>\n #include <validation.h>\n #include <script/script.h>\n #include <script/standard.h>\n@@ -917,6 +918,46 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 pwallet->SetAddressBook(dest, label, \"receive\");\n             }\n \n+            // Import public keys\n+            for (size_t i = 0; i < pubKeys.size(); ++i) {\n+                CPubKey pubKey = HexToPubKey(pubKeys[i].get_str());\n+\n+                if (!pubKey.IsFullyValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                }\n+\n+                CTxDestination pubkey_dest = pubKey.GetID();\n+                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n+\n+                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+                }\n+\n+                pwallet->MarkDirty();\n+\n+                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n+\n+                // add to address book or update label\n+                if (IsValidDestination(pubkey_dest)) {\n+                    pwallet->SetAddressBook(pubkey_dest, label, \"receive\");\n+                }\n+\n+                // TODO Is this necessary?\n+                CScript scriptRawPubKey = GetScriptForRawPubKey(pubKey);\n+\n+                if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+                }\n+\n+                pwallet->MarkDirty();\n+\n+                if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n+            }\n+\n             // Import private keys.\n             if (keys.size()) {\n                 for (size_t i = 0; i < keys.size(); i++) {"
      },
      {
        "sha": "278a174b306d132f158b7b6003f8d3c51d93d1e4",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6412265b5935173fcaa02b20195d0e282cb2d804/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6412265b5935173fcaa02b20195d0e282cb2d804/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=6412265b5935173fcaa02b20195d0e282cb2d804",
        "patch": "@@ -446,6 +446,27 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Importing multiple public keys with 2-of-2 p2sh multisig\n+        self.log.info(\"Pubkeys should be available after importing 2-of-2 p2sh multisig with pubkeys\")\n+        addr1 = self.nodes[1].getnewaddress()\n+        addr2 = self.nodes[1].getnewaddress()\n+        pub1 = self.nodes[1].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[1].getaddressinfo(addr2)['pubkey']\n+        ms = self.nodes[1].createmultisig(2, [pub1, pub2])\n+        result = self.nodes[0].importmulti(\n+            [{\n+                'scriptPubKey' : { 'address' : ms['address'] },\n+                'redeemscript' : ms['redeemScript'],\n+                'pubkeys' : [pub1, pub2],\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert_equal(result[0]['success'], True)\n+        import_pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        assert_equal(pub1, import_pub1)\n+        import_pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        assert_equal(pub2, import_pub2)\n+\n \n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      }
    ]
  }
]