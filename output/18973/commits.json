[
  {
    "sha": "315ae14f3f5c98ae4c4476e4bb260b9086c773a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTVhZTE0ZjNmNWM5OGFlNGM0NDc2ZTRiYjI2MGI5MDg2Yzc3M2E0",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-11-16T23:41:16Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:06Z"
      },
      "message": "gui: Fix itemWalletAddress leak when not tree mode\n\nGithub-Pull: #18578\nRebased-From: e8123eae40eb264bbb71007d0eb074901f0e2fe5",
      "tree": {
        "sha": "735fe7680bd947a643591913e892724d007d1872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/735fe7680bd947a643591913e892724d007d1872"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/315ae14f3f5c98ae4c4476e4bb260b9086c773a4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl69104ACgkQLuufXMCV\nJsHr0w/9EJ/wOelwaY8b+Bp0hRfLN4g04KF9pBfpZWlv2LrZymyubNSGdDZzX6yK\nPouH7xGHnQLashuf47mq+ZslqCq2vA3ORQ5oj7nV3TQkDaUA+RygNpl3SIa9SROW\ns31tbz9EBnIsUhuO8tJ7VWubDsxlO1xjh/rt65S0Iy7wsJkk9VL4sUPK14eO5qnX\nGziXjJAXt8egpT+uAdnhDZ1uHiKMZB3gCjiLOmTh+VVSFzi7If+pWR25L7BPNjFT\nQ741ZySEto3U1ChKDQv8a/m4ApYozlFcKqaJCTk3lTgBIDstYC1YDTouF9RjOw1y\n/gqBG2Vj2zmHUgONs58EgdVAGpp6Y3gaOn8mDwvpWhbLcPkhAUhOU/hKa0lTCz4o\navOTRsvoCp9tFW1qSe+1JTJDtb7oLHAT8dB+tViP/Vbrt4j7gVf2hzQW7iax9jO9\nZ39QlP9WiehSDLsQA/DY3Uo+LsLnIzBlenNRQ25XDgQxxtAp6PX2sMbYNfTV3n6z\nuU+v4ch9gau/9pppW96gfXOrryzgWFyXr0kjTLYknMy3Xo9hu/4E4w+8HL1NxacG\nvi3ILis3LMUeLFMTkSibNg4fB7N9ptptTyg5JVllJt5LUJt3SwH22ZQPFriNiYDG\nVZEq6qmgdxhuqv2en4ihbHhfs64z970diB9AAO9uAsfogNGjiZ4=\n=2aLQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 735fe7680bd947a643591913e892724d007d1872\nparent aa7c6858e6e480eb841195bdaf2ee0185f17f9a7\nauthor Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com> 1573947676 +0000\ncommitter fanquake <fanquake@gmail.com> 1589499726 +0800\n\ngui: Fix itemWalletAddress leak when not tree mode\n\nGithub-Pull: #18578\nRebased-From: e8123eae40eb264bbb71007d0eb074901f0e2fe5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/315ae14f3f5c98ae4c4476e4bb260b9086c773a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/315ae14f3f5c98ae4c4476e4bb260b9086c773a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/315ae14f3f5c98ae4c4476e4bb260b9086c773a4/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa7c6858e6e480eb841195bdaf2ee0185f17f9a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa7c6858e6e480eb841195bdaf2ee0185f17f9a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa7c6858e6e480eb841195bdaf2ee0185f17f9a7"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ec61a4f5dd2bb596bad8a3fc9f30cdb8a92838b9",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/315ae14f3f5c98ae4c4476e4bb260b9086c773a4/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/315ae14f3f5c98ae4c4476e4bb260b9086c773a4/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=315ae14f3f5c98ae4c4476e4bb260b9086c773a4",
        "patch": "@@ -612,8 +612,7 @@ void CoinControlDialog::updateView()\n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n \n     for (const auto& coins : model->wallet().listCoins()) {\n-        CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n-        itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n+        CCoinControlWidgetItem* itemWalletAddress{nullptr};\n         QString sWalletAddress = QString::fromStdString(EncodeDestination(coins.first));\n         QString sWalletLabel = model->getAddressTableModel()->labelForAddress(sWalletAddress);\n         if (sWalletLabel.isEmpty())\n@@ -622,7 +621,7 @@ void CoinControlDialog::updateView()\n         if (treeMode)\n         {\n             // wallet address\n-            ui->treeWidget->addTopLevelItem(itemWalletAddress);\n+            itemWalletAddress = new CCoinControlWidgetItem(ui->treeWidget);\n \n             itemWalletAddress->setFlags(flgTristate);\n             itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);"
      },
      {
        "sha": "fcf34356f11786f975eaf88816a125e544705a20",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/315ae14f3f5c98ae4c4476e4bb260b9086c773a4/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/315ae14f3f5c98ae4c4476e4bb260b9086c773a4/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=315ae14f3f5c98ae4c4476e4bb260b9086c773a4",
        "patch": "@@ -31,7 +31,6 @@ class CCoinControlWidgetItem : public QTreeWidgetItem\n {\n public:\n     explicit CCoinControlWidgetItem(QTreeWidget *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n-    explicit CCoinControlWidgetItem(int type = Type) : QTreeWidgetItem(type) {}\n     explicit CCoinControlWidgetItem(QTreeWidgetItem *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n \n     bool operator<(const QTreeWidgetItem &other) const;"
      }
    ]
  },
  {
    "sha": "fb821731eb12906996bffdf4b3633d7fe47c85a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjgyMTczMWViMTI5MDY5OTZiZmZkZjRiMzYzM2Q3ZmU0N2M4NWE3",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-27T20:59:37Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:07Z"
      },
      "message": "[net processing] ignore tx GETDATA from blocks-only peers\n\nCo-Authored-By: John Newbery <john@johnnewbery.com>\n\nGithub-Pull: #18808\nRebased-From: 047ceac142246b5d51056a51dbf4645b31802be4",
      "tree": {
        "sha": "1388387968d1d719706ddc7164d6426164d01509",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1388387968d1d719706ddc7164d6426164d01509"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb821731eb12906996bffdf4b3633d7fe47c85a7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl69108ACgkQLuufXMCV\nJsErvg/9GPPUWyDFHgh5fyWEXqzJ8K2adhFw+x86niagMD0VN5n7raG77kUdgaA1\nGqXNL8Ceeav/NflU+KQZUn/fxpNpGL919B7oAFCOq9Ow38Jd7lLTbIUd0YYUBQfm\nAKUsphtzFo5a2hTthPjzAqxC7TGi6saGuy/nGWE7EZncGcJM0kuL33QjM1LwMS9n\npWPGBwOi15LC+ejddl0Dd9YzLJNKaXxgMnDjKEaD42uBQ82h4KhTfoU+ui7uyIaf\ns5x60RSKPERqIZpdXcIRLl2btfFcvnHrSYPVXX2rEoakcsCIrGhsQjzvR6gVlTQg\n1RfM8qe17mgv6tPhfRvYwMhI53QR1nNb4FWMJw1PPCiSRRRZbC/wKC1vJ7riOSnn\nKp5VIc4KNE+0KjCnQeNiLd5J5JB1nqDBiNjy5NdJF99L4Sz1bJ/UNH12X26lR5Xu\nqMI1sPyy8v4ZlgRXTH/9sQx2rz83iG8rst0yxWTS370N1q++boZzUO2rIQxiKnIj\nBUZlhPiRU+Ug7+JgZJDOaCKrTOF5l1gkX6oIgyX3zSlMdM5/VDPYkKaIHeBShQWI\nysepx5GHUeHwNkF1Xb7jZsRLeLO6ynXxCU5ymQh8HIqcVKLQQagyIAhra5Mxs9Ao\nD0tFgzn11QxWN0dIovASkuitNMYkmM9Ply7wTNrwGMcPjbTX7yE=\n=CxaK\n-----END PGP SIGNATURE-----",
        "payload": "tree 1388387968d1d719706ddc7164d6426164d01509\nparent 315ae14f3f5c98ae4c4476e4bb260b9086c773a4\nauthor Amiti Uttarwar <amiti@uttarwar.org> 1588021177 -0700\ncommitter fanquake <fanquake@gmail.com> 1589499727 +0800\n\n[net processing] ignore tx GETDATA from blocks-only peers\n\nCo-Authored-By: John Newbery <john@johnnewbery.com>\n\nGithub-Pull: #18808\nRebased-From: 047ceac142246b5d51056a51dbf4645b31802be4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb821731eb12906996bffdf4b3633d7fe47c85a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb821731eb12906996bffdf4b3633d7fe47c85a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb821731eb12906996bffdf4b3633d7fe47c85a7/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "315ae14f3f5c98ae4c4476e4bb260b9086c773a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/315ae14f3f5c98ae4c4476e4bb260b9086c773a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/315ae14f3f5c98ae4c4476e4bb260b9086c773a4"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "01067e58a6d846fb13170c2bea919969c43da8c8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb821731eb12906996bffdf4b3633d7fe47c85a7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb821731eb12906996bffdf4b3633d7fe47c85a7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fb821731eb12906996bffdf4b3633d7fe47c85a7",
        "patch": "@@ -1564,15 +1564,13 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n-    // Note that if we receive a getdata for a MSG_TX or MSG_WITNESS_TX from a\n-    // block-relay-only outbound peer, we will stop processing further getdata\n-    // messages from this peer (likely resulting in our peer eventually\n-    // disconnecting us).\n-    if (pfrom->m_tx_relay != nullptr) {\n-        // mempool entries added before this time have likely expired from mapRelay\n-        const std::chrono::seconds longlived_mempool_time = GetTime<std::chrono::seconds>() - RELAY_TX_CACHE_TIME;\n-        const std::chrono::seconds mempool_req = pfrom->m_tx_relay->m_last_mempool_req.load();\n+    // mempool entries added before this time have likely expired from mapRelay\n+    const std::chrono::seconds longlived_mempool_time = GetTime<std::chrono::seconds>() - RELAY_TX_CACHE_TIME;\n+    // Get last mempool request time\n+    const std::chrono::seconds mempool_req = pfrom->m_tx_relay != nullptr ? pfrom->m_tx_relay->m_last_mempool_req.load()\n+                                                                          : std::chrono::seconds::min();\n \n+    {\n         LOCK(cs_main);\n \n         while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n@@ -1582,8 +1580,12 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (pfrom->fPauseSend)\n                 break;\n \n-            const CInv &inv = *it;\n-            it++;\n+            const CInv &inv = *it++;\n+\n+            if (pfrom->m_tx_relay == nullptr) {\n+                // Ignore GETDATA requests for transactions from blocks-only peers.\n+                continue;\n+            }\n \n             // Send stream from relay memory\n             bool push = false;"
      }
    ]
  },
  {
    "sha": "1e73d7248a10863dc99a93f1db36d035c17f29d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTczZDcyNDhhMTA4NjNkYzk5YTkzZjFkYjM2ZDAzNWMxN2YyOWQ3",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-27T21:00:21Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:07Z"
      },
      "message": "[net processing] ignore unknown INV types in GETDATA messages\n\nCo-Authored-By: John Newbery <john@johnnewbery.com>\n\nGithub-Pull: #18808\nRebased-From: e257cf71c851e25e1a533bf1d4296f6b55c81332",
      "tree": {
        "sha": "875bbb3f0314b8cf6879c0eaac508c5dcf1c55c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/875bbb3f0314b8cf6879c0eaac508c5dcf1c55c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e73d7248a10863dc99a93f1db36d035c17f29d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl69108ACgkQLuufXMCV\nJsHXwA/+NdGhhsZe4GxNs/o1gVQYvkOVAYi5tnQA99jDQ3f2AzYUeCpyDq0ry6vH\nNE04zjjK3irkEQ6L9jvp0/Zpqc+anxUCs6Nk2xRhakOKOpCTokiwC9LuHXxxCymd\nps7Gp1EfeBxMEAVFfAUhgiwHavdbAVEMRGugx2BVY1FrN0feYLddmrVB46hVTqvp\n2O96OqoT3xI/ibk7PSLQM8TAAQ4s8JwzuWxCiefH4WByHtwEy67qckpUftLvkAhg\nCsBnZIvlN9Lp+QQZQB/gQvXJH9wMIJju5JjBTSQmXcr5VP+18dGaye9n4UqkQNqP\nZTlihKjBYjTsmg6q/iaz6TPylylOpcvqOW09g/Ve605T/qRIImy8PDgptWvZg4iC\nGaQ71AvExmd58t9OUrQQeXZaBNkTHQC3gHfITZa77o9XCzUvk9xf1ZHW08yPoDmr\nDlbZnyuHiW+WsZzyOa+rwOoWeyCk63roKhhgXB6QiaDsHJQduz0Xyc5TAgvg8V/Y\n0FaL1Ln93Sg+QtvxIr3+xupVGfzb8Bf7ULPDyJp+HX56VasrRfrMLBOgNP6bdVaF\niqyHBI635qMFfTdIYiVVehGf9wvqaEK5gdE1zA9zk3ctoj9KL0VV+Iq1EiOJUE3S\nGjd1gPDUIbtKrbcMXWKV1VyUA6ajsmEyJ51KVEKj6eEuilsUhQs=\n=jchG\n-----END PGP SIGNATURE-----",
        "payload": "tree 875bbb3f0314b8cf6879c0eaac508c5dcf1c55c5\nparent fb821731eb12906996bffdf4b3633d7fe47c85a7\nauthor Amiti Uttarwar <amiti@uttarwar.org> 1588021221 -0700\ncommitter fanquake <fanquake@gmail.com> 1589499727 +0800\n\n[net processing] ignore unknown INV types in GETDATA messages\n\nCo-Authored-By: John Newbery <john@johnnewbery.com>\n\nGithub-Pull: #18808\nRebased-From: e257cf71c851e25e1a533bf1d4296f6b55c81332\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e73d7248a10863dc99a93f1db36d035c17f29d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e73d7248a10863dc99a93f1db36d035c17f29d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e73d7248a10863dc99a93f1db36d035c17f29d7/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb821731eb12906996bffdf4b3633d7fe47c85a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb821731eb12906996bffdf4b3633d7fe47c85a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb821731eb12906996bffdf4b3633d7fe47c85a7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 3,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a6f9445a9dffc0c60a2b872dafae75028d9f83fc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e73d7248a10863dc99a93f1db36d035c17f29d7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e73d7248a10863dc99a93f1db36d035c17f29d7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=1e73d7248a10863dc99a93f1db36d035c17f29d7",
        "patch": "@@ -1614,18 +1614,14 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     } // release cs_main\n \n     if (it != pfrom->vRecvGetData.end() && !pfrom->fPauseSend) {\n-        const CInv &inv = *it;\n+        const CInv &inv = *it++;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {\n-            it++;\n             ProcessGetBlockData(pfrom, chainparams, inv, connman);\n         }\n+        // else: If the first item on the queue is an unknown type, we erase it\n+        // and continue processing the queue on the next call.\n     }\n \n-    // Unknown types in the GetData stay in vRecvGetData and block any future\n-    // message from this peer, see vRecvGetData check in ProcessMessages().\n-    // Depending on future p2p changes, we might either drop unknown getdata on\n-    // the floor or disconnect the peer.\n-\n     pfrom->vRecvGetData.erase(pfrom->vRecvGetData.begin(), it);\n \n     if (!vNotFound.empty()) {"
      }
    ]
  },
  {
    "sha": "011532e380bb1a42eac9e79a17b35531f768becf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTE1MzJlMzgwYmIxYTQyZWFjOWU3OWExN2IzNTUzMWY3NjhiZWNm",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-04-27T21:52:10Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:07Z"
      },
      "message": "[test] test that an invalid GETDATA doesn't prevent processing of future messages\n\nCo-Authored-By: John Newbery <john@johnnewbery.com>\n\nGithub-Pull: #18808\nRebased-From: 2f032556e08a04807c71eb02104ca9589eaadf1b",
      "tree": {
        "sha": "f2cbf9d90efa8a83e016616535e171e5091a3f68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2cbf9d90efa8a83e016616535e171e5091a3f68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/011532e380bb1a42eac9e79a17b35531f768becf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl69108ACgkQLuufXMCV\nJsGwfhAAriNY8lP/o1gDKVFNde3jgzdyXl/HrRy+QE6ZAvvx7kv86eOKpiM5x7wq\npP1Rx/zmhJ0IVWujWjZmbGcrXI3s/lxECJ0O+2aZMaMGCjoiMOdy2jkBzQ0MWQzy\nhVP8Ez8T6w+V2T/oP6w3gR48d/PmoCk7jCaoA2C/3MXAw4b3vMSr3jRENzknXvO+\nDC5zQAfozemg+3CfaNou8b4e+UlE/RDVGB0qbzWNPvD7JgoqJqJPhrCH9lVi7WKJ\nogSgEA+msLtp1IzheY5S1jP1qlpW5HnBZVPfNMWy8VjvK3L2znLGJvMeF4by4/Sp\n1ljQ4fWQ2kQKcvlmio/z7SqJtekc6aPs5dLwA9yXs5Xy2Y+5YLRo+s8YoT/qgyiK\ng/ts7RrHpzADaCZEMEur+l1yx44QXkfuITX0/gIexsAN+1iopqD+0+jKBS+OSc6w\n+6DUsGZFPd9Lg0s07qnjpa3F73WILrTPmcAaJBjt4CHNYbYqdPAH1HNWl8O6b2YL\nhvptezBV4czh+2LyfdybWoQAmhrD6nw5uAldM/D1wCVnEYO7G8T8GbfcPK46p6sK\n7xnEqQ4AWYTzIruwnc1Y8tJix1ucQwhJlMAmPiLPX8y8wjawzM330fN+/z0Jj2dg\nUuMS6GYNjkJtlXXss3eDFeNrZQhAlliQ5Thym+0dR/eJd7stwTY=\n=eieX\n-----END PGP SIGNATURE-----",
        "payload": "tree f2cbf9d90efa8a83e016616535e171e5091a3f68\nparent 1e73d7248a10863dc99a93f1db36d035c17f29d7\nauthor Amiti Uttarwar <amiti@uttarwar.org> 1588024330 -0700\ncommitter fanquake <fanquake@gmail.com> 1589499727 +0800\n\n[test] test that an invalid GETDATA doesn't prevent processing of future messages\n\nCo-Authored-By: John Newbery <john@johnnewbery.com>\n\nGithub-Pull: #18808\nRebased-From: 2f032556e08a04807c71eb02104ca9589eaadf1b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/011532e380bb1a42eac9e79a17b35531f768becf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/011532e380bb1a42eac9e79a17b35531f768becf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/011532e380bb1a42eac9e79a17b35531f768becf/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e73d7248a10863dc99a93f1db36d035c17f29d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e73d7248a10863dc99a93f1db36d035c17f29d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e73d7248a10863dc99a93f1db36d035c17f29d7"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd94a09d80269ac47bd705fa40cda256f33292c1",
        "filename": "test/functional/p2p_getdata.py",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/011532e380bb1a42eac9e79a17b35531f768becf/test/functional/p2p_getdata.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/011532e380bb1a42eac9e79a17b35531f768becf/test/functional/p2p_getdata.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_getdata.py?ref=011532e380bb1a42eac9e79a17b35531f768becf",
        "patch": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test GETDATA processing behavior\"\"\"\n+from collections import defaultdict\n+\n+from test_framework.messages import (\n+    CInv,\n+    msg_getdata,\n+)\n+from test_framework.mininode import (\n+    mininode_lock,\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import wait_until\n+\n+class P2PStoreBlock(P2PInterface):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.blocks = defaultdict(int)\n+\n+    def on_block(self, message):\n+        message.block.calc_sha256()\n+        self.blocks[message.block.sha256] += 1\n+\n+class GetdataTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        self.nodes[0].add_p2p_connection(P2PStoreBlock())\n+\n+        self.log.info(\"test that an invalid GETDATA doesn't prevent processing of future messages\")\n+\n+        # Send invalid message and verify that node responds to later ping\n+        invalid_getdata = msg_getdata()\n+        invalid_getdata.inv.append(CInv(t=0, h=0))  # INV type 0 is invalid.\n+        self.nodes[0].p2ps[0].send_and_ping(invalid_getdata)\n+\n+        # Check getdata still works by fetching tip block\n+        best_block = int(self.nodes[0].getbestblockhash(), 16)\n+        good_getdata = msg_getdata()\n+        good_getdata.inv.append(CInv(t=2, h=best_block))\n+        self.nodes[0].p2ps[0].send_and_ping(good_getdata)\n+        wait_until(lambda: self.nodes[0].p2ps[0].blocks[best_block] == 1, timeout=30, lock=mininode_lock)\n+\n+if __name__ == '__main__':\n+    GetdataTest().main()"
      },
      {
        "sha": "9f885ae4b092c4090920598c9fb6cc2def341ec8",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/011532e380bb1a42eac9e79a17b35531f768becf/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/011532e380bb1a42eac9e79a17b35531f768becf/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=011532e380bb1a42eac9e79a17b35531f768becf",
        "patch": "@@ -145,6 +145,7 @@\n     'rpc_deprecated.py',\n     'wallet_disable.py',\n     'p2p_addr_relay.py',\n+    'p2p_getdata.py',\n     'rpc_net.py',\n     'wallet_keypool.py',\n     'p2p_mempool.py',"
      }
    ]
  },
  {
    "sha": "a3fe458a1e477cacd19e7e0edb8e7bb965067115",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2ZlNDU4YTFlNDc3Y2FjZDE5ZTdlMGVkYjhlN2JiOTY1MDY3MTE1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-29T00:28:51Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:07Z"
      },
      "message": "[docs] Improve commenting in ProcessGetData()\n\nGithub-Pull: #18808\nRebased-From: 9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7",
      "tree": {
        "sha": "1def3515e98d81ce26b92fad91f368563e8b2919",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1def3515e98d81ce26b92fad91f368563e8b2919"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3fe458a1e477cacd19e7e0edb8e7bb965067115",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl69108ACgkQLuufXMCV\nJsHreQ/+LAQ0fd5X/VR79f6Mg9+qUvdE+QUrI/5gi6gV3J/KD9FSWpvPwUvVHVBH\njCkWF7anLIh/PKtERtzM9lC5mI9RRpHb5SXO67bNKGuGHlvapudNhvvS7sou8qMi\n1WAQupS7GIXecEoV3Qdji4m5JHooVPlNzJfTZ2kTWkit3DBq1VAlqWXNexEZBlbR\n0pNIFsAOUrGBTAUJCErv9NUE3Ywp+3YID44krjDDpYBx0S4B4/O4PA7T6RIq/XVV\nX4e1kE7F65UqyAimpwpm20zyJrAcAxl5KaOQhBjqFeGkYNkezGwYIiMijzTMLzXn\nK3w+vzCiRvvSNZu82JwyTjja6SfBpqyHvbRuG6vuXVa4IhemZWo6QDSzbXWkh9u4\nfr9ELx0QPw17Unet/iMIQwWO9fkP5GN2ZHi8wGPkSnDccnxcgBR36lzkkJorrr+k\nmi0rnQEtMIvGfC8kpxKwh9iruCiv3A2+C3tPdwcGMOyt+kS/ys0bguE2zuGQ9Rkv\n00yTa9lWcjObmhrq85KLXaxEiRVhmcJXJriNrl1kz/z/TmH/1xra4e27C5yRujZc\ny4ZK7OL/ya9T1bGVXhSDG7LKgfCNQrzIBaS42UvVdH8mgSjxWooCSGJ5L7MZo6Lv\nsMg3W/E6BIsF/kD/m1URjtI4bNq0vf8DaJzKYfmDZJTX+qgM/co=\n=1fjY\n-----END PGP SIGNATURE-----",
        "payload": "tree 1def3515e98d81ce26b92fad91f368563e8b2919\nparent 011532e380bb1a42eac9e79a17b35531f768becf\nauthor John Newbery <john@johnnewbery.com> 1588120131 -0400\ncommitter fanquake <fanquake@gmail.com> 1589499727 +0800\n\n[docs] Improve commenting in ProcessGetData()\n\nGithub-Pull: #18808\nRebased-From: 9847e205bf7edcac4c30ce4b6d62f482aa7bc1b7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3fe458a1e477cacd19e7e0edb8e7bb965067115",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3fe458a1e477cacd19e7e0edb8e7bb965067115",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3fe458a1e477cacd19e7e0edb8e7bb965067115/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "011532e380bb1a42eac9e79a17b35531f768becf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/011532e380bb1a42eac9e79a17b35531f768becf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/011532e380bb1a42eac9e79a17b35531f768becf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2db2619a811c29ed463c45db86077d02ac148ab7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3fe458a1e477cacd19e7e0edb8e7bb965067115/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3fe458a1e477cacd19e7e0edb8e7bb965067115/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a3fe458a1e477cacd19e7e0edb8e7bb965067115",
        "patch": "@@ -1573,10 +1573,14 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     {\n         LOCK(cs_main);\n \n+        // Process as many TX items from the front of the getdata queue as\n+        // possible, since they're common and it's efficient to batch process\n+        // them.\n         while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n             if (interruptMsgProc)\n                 return;\n-            // Don't bother if send buffer is too full to respond anyway\n+            // The send buffer provides backpressure. If there's no space in\n+            // the buffer, pause processing until the next call.\n             if (pfrom->fPauseSend)\n                 break;\n \n@@ -1613,6 +1617,8 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n         }\n     } // release cs_main\n \n+    // Only process one BLOCK item per call, since they're uncommon and can be\n+    // expensive to process.\n     if (it != pfrom->vRecvGetData.end() && !pfrom->fPauseSend) {\n         const CInv &inv = *it++;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {"
      }
    ]
  },
  {
    "sha": "ca4dac48c5675af3fc53db6740a0b70fef622b0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTRkYWM0OGM1Njc1YWYzZmM1M2RiNjc0MGEwYjcwZmVmNjIyYjBh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-29T09:40:39Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:07Z"
      },
      "message": "rpc: Add mutex to guard deadlineTimers\n\nGithub-Pull: #18814\nRebased-From: a2e6db5c4f1bb52a8814102b628e51652493d06a",
      "tree": {
        "sha": "a6a0fcbc280a075c5f8ddea6f8e7969cf43d98ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6a0fcbc280a075c5f8ddea6f8e7969cf43d98ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca4dac48c5675af3fc53db6740a0b70fef622b0a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl69108ACgkQLuufXMCV\nJsFMaBAArne9APOXcSJGjZGsgS7Epe5zh2chdNw12b9PjfHog1vlqqkqox/m0Orp\n/KNukew2trHA2sh6h0yzFEI5J3lYsY9Onga47E10NA8PEu4dRBUXJuHh+Y38SDVW\nsiWDjpdTXZCKjHlqzt8NW62jkreG1KCw8xFKK45t03G7HrJyA0zmx/IGuQ7Dopar\nky6TRjF5CXNN0ZRXtfkgWGwCyRWVvaQVu/1KTQpV6uhekA9p/LrDfBPXbYs+qkJs\nUrUbtNuKD6ow9hnDwdcKTV9qmIcH9iZvYSZoKh2FCDkBwMluNE8nBs0RQg3nSv24\nvOh0KSwGKXOqCsYhonZXcKIqr68cRuTPGhWC60AwZEwmpPaC7Nv8SsGGWjMgeWct\nyHfb+Q7r/CTnMrmAtmadwTDavv2FPai8wxGAXvh702jBY3SxGouFIFmYX9p4Nusw\nTMl4W6GRUXj6hfU7XNorWgKQflsYhFEB1pmoYEwiK2jP8Y+Kf9xNiz7lWFhYrLlr\no+aZYEbsvVgqopCF71GjHIFFi/GRlfcN6VkUpqXXoS0Zy0w1prN42SRrP1fwMtsH\naZGEOtjxbolMqafG8CJClOY9XtJjOWLgozmsz2lam1jv6hP19IFH1RnuJ3whcwEg\nAk7trNRHOFAzpGqNaOAI00o34LvR1hdhp8gCc3k/kl9S7pd3ly0=\n=P0Gi\n-----END PGP SIGNATURE-----",
        "payload": "tree a6a0fcbc280a075c5f8ddea6f8e7969cf43d98ce\nparent a3fe458a1e477cacd19e7e0edb8e7bb965067115\nauthor Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com> 1588153239 +0100\ncommitter fanquake <fanquake@gmail.com> 1589499727 +0800\n\nrpc: Add mutex to guard deadlineTimers\n\nGithub-Pull: #18814\nRebased-From: a2e6db5c4f1bb52a8814102b628e51652493d06a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4dac48c5675af3fc53db6740a0b70fef622b0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4dac48c5675af3fc53db6740a0b70fef622b0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4dac48c5675af3fc53db6740a0b70fef622b0a/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3fe458a1e477cacd19e7e0edb8e7bb965067115",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3fe458a1e477cacd19e7e0edb8e7bb965067115",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3fe458a1e477cacd19e7e0edb8e7bb965067115"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "219979f09533378e286725b27bf978ec134b5bcf",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca4dac48c5675af3fc53db6740a0b70fef622b0a/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca4dac48c5675af3fc53db6740a0b70fef622b0a/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=ca4dac48c5675af3fc53db6740a0b70fef622b0a",
        "patch": "@@ -25,7 +25,8 @@ static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server starte\n /* Timer-creating functions */\n static RPCTimerInterface* timerInterface = nullptr;\n /* Map of name to timer. */\n-static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n+static Mutex g_deadline_timers_mutex;\n+static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers GUARDED_BY(g_deadline_timers_mutex);\n static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler);\n \n struct RPCCommandExecutionInfo\n@@ -298,7 +299,7 @@ void InterruptRPC()\n void StopRPC()\n {\n     LogPrint(BCLog::RPC, \"Stopping RPC\\n\");\n-    deadlineTimers.clear();\n+    WITH_LOCK(g_deadline_timers_mutex, deadlineTimers.clear());\n     DeleteAuthCookie();\n     g_rpcSignals.Stopped();\n }\n@@ -486,6 +487,7 @@ void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nS\n {\n     if (!timerInterface)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"No timer handler registered for RPC\");\n+    LOCK(g_deadline_timers_mutex);\n     deadlineTimers.erase(name);\n     LogPrint(BCLog::RPC, \"queue run of timer %s in %i seconds (using %s)\\n\", name, nSeconds, timerInterface->Name());\n     deadlineTimers.emplace(name, std::unique_ptr<RPCTimerBase>(timerInterface->NewTimer(func, nSeconds*1000)));"
      }
    ]
  },
  {
    "sha": "251e321ad7d9ddb938e8a07ddfbe90739f0bafdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTFlMzIxYWQ3ZDlkZGI5MzhlOGEwN2RkZmJlOTA3MzlmMGJhZmRk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-29T09:45:12Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:08Z"
      },
      "message": "rpc: Relock wallet only if most recent callback\n\nGithub-Pull: #18814\nRebased-From: 9f59dde9740d065118bdddde75ef9f4e4603a7b1",
      "tree": {
        "sha": "30b31ffc3f9e3af24ae2d90e1656ae9846b56ad9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30b31ffc3f9e3af24ae2d90e1656ae9846b56ad9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6911AACgkQLuufXMCV\nJsGFMhAAqaVMs160DNX2MFMcirQdNRotqyiRKKTKOfVYUWoKNvpe0kq0pZoF96UL\nuC9DafO6PvQd1pGAcGEmS3R8zyaUSeAAJcB3A7KgVtqIVfvQkCfwh9x6Sk0Ovrsb\ng3zDqDvfU8/wgqDYDLr86LpMv6j6VRJ4aATONtBexftOu2wOjwdC3KOGydkoFFsS\nnRFPtzDBG+2Pjuyxt3E/a0WTdyv7zvaFY/ndDPwGyKhh3THQhAVXRZRg59x0mWAb\n8c3uk8V3a1ZYoS7OtrVdkcO2fPl+Qr/nA+845/bAFEJrCPg1CHgq1ZY4gBZacnDx\ncXSsRlDPMy7U5d3BQHBkbddkDAtXWW+RdxxT4xP5DQWw2S6Kg0eSIf43dkm9bOPV\nXCtFl6jfhCi6ysFbwCwUuLKBaeWWogzHeF3M8+liOaT6LC9dV78uSMec9exYg67J\napzkC49cBbu+2HjULPJKis4qZKDwHV+AdP1DbMLvnD+oAoQyUZkcJxEjtr7EYg68\noFSUkUnMY1/3va+gRVYCp3y/6F7BUjsGrL5F1Pr0IMUvmQCkDQj1liq+Z8J75khz\nAJSu5l0tSTzXHtz4A1dN7eVehMAwlThnnYuHI4S8puUFWLZ1rRsmMS0448AKJL3q\ny5JVnCrDn/wNRVxm6nWNO0UfXuFqgi3O2DZoilgZOzBK+EqweKA=\n=9hfx\n-----END PGP SIGNATURE-----",
        "payload": "tree 30b31ffc3f9e3af24ae2d90e1656ae9846b56ad9\nparent ca4dac48c5675af3fc53db6740a0b70fef622b0a\nauthor Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com> 1588153512 +0100\ncommitter fanquake <fanquake@gmail.com> 1589499728 +0800\n\nrpc: Relock wallet only if most recent callback\n\nGithub-Pull: #18814\nRebased-From: 9f59dde9740d065118bdddde75ef9f4e4603a7b1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca4dac48c5675af3fc53db6740a0b70fef622b0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca4dac48c5675af3fc53db6740a0b70fef622b0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca4dac48c5675af3fc53db6740a0b70fef622b0a"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a5036413c82ae7cc2da4208e8abc8bfa0a0a1ae1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=251e321ad7d9ddb938e8a07ddfbe90739f0bafdd",
        "patch": "@@ -1917,6 +1917,9 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n             }.Check(request);\n \n     int64_t nSleepTime;\n+    int64_t relock_time;\n+    // Prevent concurrent calls to walletpassphrase with the same wallet.\n+    LOCK(pwallet->m_unlock_mutex);\n     {\n         auto locked_chain = pwallet->chain().lock();\n         LOCK(pwallet->cs_wallet);\n@@ -1955,6 +1958,7 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n         pwallet->TopUpKeyPool();\n \n         pwallet->nRelockTime = GetTime() + nSleepTime;\n+        relock_time = pwallet->nRelockTime;\n     }\n \n     // rpcRunLater must be called without cs_wallet held otherwise a deadlock\n@@ -1966,9 +1970,11 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n     std::weak_ptr<CWallet> weak_wallet = wallet;\n-    pwallet->chain().rpcRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), [weak_wallet] {\n+    pwallet->chain().rpcRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), [weak_wallet, relock_time] {\n         if (auto shared_wallet = weak_wallet.lock()) {\n             LOCK(shared_wallet->cs_wallet);\n+            // Skip if this is not the most recent rpcRunLater callback.\n+            if (shared_wallet->nRelockTime != relock_time) return;\n             shared_wallet->Lock();\n             shared_wallet->nRelockTime = 0;\n         }"
      },
      {
        "sha": "7446a4889a4484256a7ec4debbfd09920f7f84da",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=251e321ad7d9ddb938e8a07ddfbe90739f0bafdd",
        "patch": "@@ -867,8 +867,10 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     std::vector<std::string> GetDestValues(const std::string& prefix) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n-    int64_t nRelockTime = 0;\n+    int64_t nRelockTime GUARDED_BY(cs_wallet){0};\n \n+    // Used to prevent concurrent calls to walletpassphrase RPC.\n+    Mutex m_unlock_mutex;\n     bool Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys = false);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);"
      }
    ]
  },
  {
    "sha": "ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDBhZmU4YzFmZjM3OTI2Y2M1YmRjYjBlOGU0OTgzZTE5NGU2ZDYx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-05T02:27:19Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:08Z"
      },
      "message": "test: Add test for conflicted wallet tx notifications\n\nAdd test coverage for conflicted wallet transaction notifications so we improve\ncurrent behavior and avoid future regressions\n\nhttps://github.com/bitcoin/bitcoin/pull/9240 - accidental break\nhttps://github.com/bitcoin/bitcoin/issues/9479 - bug report\nhttps://github.com/bitcoin/bitcoin/pull/9371 - fix\nhttps://github.com/bitcoin/bitcoin/pull/16624 - accidental break\nhttps://github.com/bitcoin/bitcoin/issues/18325 - bug report\nhttps://github.com/bitcoin/bitcoin/pull/18600 - potential fix\n\nGithub-Pull: #18878\nRebased-From: f963a680515eda66429b3d1537a7baf281ab9283",
      "tree": {
        "sha": "cb75003815dde769d854fcbc96fe2629c1d8848e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb75003815dde769d854fcbc96fe2629c1d8848e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6911AACgkQLuufXMCV\nJsHBmg/9Gpj1FZQ5wuW6l6fMApp25SHgAXR/JqH2iCwAaOGYPjIAwHgY3LN1iiuv\nF9X+EsB+VXLBtP5FGEhvod2jgZTGc8dDzWsM4Dua3BjNKmCQ8M4taWr+ksUXg2xa\nGgyVt6hnHwhpOPLUsA+DwcG8F6bz3RBIbdiaWaYUM0SBH5TMccl1FyOG8/o8ncu9\nyt+D7c7tC5ZY9lgEtzG27KfppFciE2WBbV2fsGeasCWionipqcUY6GNPACP7Qg2M\nckN3LpJbrhYO740xsdQZxnIMwj/cPBBShsdWdZb3i5F4k3wNLkv9RzyvNXKaoIkL\nkCYJUcmGRRZmEucezKcorTxO3fsQ5rV0wruia2zc3Q7yMnhSBq+cERwjiD732Efb\nVaVZCZlti98P/kB3rMIydjtrVZb5/wWVVaKEfK+rWg9fQlsniFvFj9KnHCIWB61j\nCFSWpiFfKTShOhl294R66ToXPMl095mDCJoiBNyY5E97XP7DDPxjMSbs3+ANO+0z\nvijkC+oJdrJ8VzrYuccVGahwPfWExd9mmnwGjb65gqdWhsTbrOLqo53+HS7mmRWR\nu47POWglcdJdwfoPus8ZVJ/9Y6Ny4ukoyco3CUi/ank6+bva6wAcY19PP/NWoaFp\nyT3bx6Np0Zzhjopuc0A6UVagQ8tM/C6T6WIFfSdPTQXDk8fVct0=\n=aIhc\n-----END PGP SIGNATURE-----",
        "payload": "tree cb75003815dde769d854fcbc96fe2629c1d8848e\nparent 251e321ad7d9ddb938e8a07ddfbe90739f0bafdd\nauthor Russell Yanofsky <russ@yanofsky.org> 1588645639 -0400\ncommitter fanquake <fanquake@gmail.com> 1589499728 +0800\n\ntest: Add test for conflicted wallet tx notifications\n\nAdd test coverage for conflicted wallet transaction notifications so we improve\ncurrent behavior and avoid future regressions\n\nhttps://github.com/bitcoin/bitcoin/pull/9240 - accidental break\nhttps://github.com/bitcoin/bitcoin/issues/9479 - bug report\nhttps://github.com/bitcoin/bitcoin/pull/9371 - fix\nhttps://github.com/bitcoin/bitcoin/pull/16624 - accidental break\nhttps://github.com/bitcoin/bitcoin/issues/18325 - bug report\nhttps://github.com/bitcoin/bitcoin/pull/18600 - potential fix\n\nGithub-Pull: #18878\nRebased-From: f963a680515eda66429b3d1537a7baf281ab9283\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "251e321ad7d9ddb938e8a07ddfbe90739f0bafdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/251e321ad7d9ddb938e8a07ddfbe90739f0bafdd"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 67,
      "deletions": 1
    },
    "files": [
      {
        "sha": "47200b6cc6fa8e4f15dd42716882c45e32240c26",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 67,
        "deletions": 1,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61",
        "patch": "@@ -5,12 +5,14 @@\n \"\"\"Test the -alertnotify, -blocknotify and -walletnotify options.\"\"\"\n import os\n \n-from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE, keyhash_to_p2pkh\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     wait_until,\n     connect_nodes,\n+    disconnect_nodes,\n+    hex_str_to_bytes,\n )\n \n # Linux allow all characters other than \\x00\n@@ -81,8 +83,72 @@ def run_test(self):\n             # directory content should equal the generated transaction hashes\n             txids_rpc = list(map(lambda t: notify_outputname(self.wallet, t['txid']), self.nodes[1].listtransactions(\"*\", block_count)))\n             assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n+            for tx_file in os.listdir(self.walletnotify_dir):\n+                os.remove(os.path.join(self.walletnotify_dir, tx_file))\n+\n+            # Conflicting transactions tests. Give node 0 same wallet seed as\n+            # node 1, generate spends from node 0, and check notifications\n+            # triggered by node 1\n+            self.log.info(\"test -walletnotify with conflicting transactions\")\n+            self.nodes[0].sethdseed(seed=self.nodes[1].dumpprivkey(keyhash_to_p2pkh(hex_str_to_bytes(self.nodes[1].getwalletinfo()['hdseedid'])[::-1])))\n+            self.nodes[0].rescanblockchain()\n+            self.nodes[0].generatetoaddress(100, ADDRESS_BCRT1_UNSPENDABLE)\n+\n+            # Generate transaction on node 0, sync mempools, and check for\n+            # notification on node 1.\n+            tx1 = self.nodes[0].sendtoaddress(address=ADDRESS_BCRT1_UNSPENDABLE, amount=1, replaceable=True)\n+            assert_equal(tx1 in self.nodes[0].getrawmempool(), True)\n+            self.sync_mempools()\n+            self.expect_wallet_notify([tx1])\n+\n+            # Generate bump transaction, sync mempools, and check for bump1\n+            # notification. In the future, per\n+            # https://github.com/bitcoin/bitcoin/pull/9371, it might be better\n+            # to have notifications for both tx1 and bump1.\n+            bump1 = self.nodes[0].bumpfee(tx1)[\"txid\"]\n+            assert_equal(bump1 in self.nodes[0].getrawmempool(), True)\n+            self.sync_mempools()\n+            self.expect_wallet_notify([bump1])\n+\n+            # Add bump1 transaction to new block, checking for a notification\n+            # and the correct number of confirmations.\n+            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+            self.sync_blocks()\n+            self.expect_wallet_notify([bump1])\n+            assert_equal(self.nodes[1].gettransaction(bump1)[\"confirmations\"], 1)\n+\n+            # Generate a second transaction to be bumped.\n+            tx2 = self.nodes[0].sendtoaddress(address=ADDRESS_BCRT1_UNSPENDABLE, amount=1, replaceable=True)\n+            assert_equal(tx2 in self.nodes[0].getrawmempool(), True)\n+            self.sync_mempools()\n+            self.expect_wallet_notify([tx2])\n+\n+            # Bump tx2 as bump2 and generate a block on node 0 while\n+            # disconnected, then reconnect and check for notifications on node 1\n+            # about newly confirmed bump2 and newly conflicted tx2. Currently\n+            # only the bump2 notification is sent. Ideally, notifications would\n+            # be sent both for bump2 and tx2, which was the previous behavior\n+            # before being broken by an accidental change in PR\n+            # https://github.com/bitcoin/bitcoin/pull/16624. The bug is reported\n+            # in issue https://github.com/bitcoin/bitcoin/issues/18325.\n+            disconnect_nodes(self.nodes[0], 1)\n+            bump2 = self.nodes[0].bumpfee(tx2)[\"txid\"]\n+            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+            assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n+            assert_equal(tx2 in self.nodes[1].getrawmempool(), True)\n+            connect_nodes(self.nodes[0], 1)\n+            self.sync_blocks()\n+            self.expect_wallet_notify([bump2])\n+            assert_equal(self.nodes[1].gettransaction(bump2)[\"confirmations\"], 1)\n \n         # TODO: add test for `-alertnotify` large fork notifications\n \n+    def expect_wallet_notify(self, tx_ids):\n+        wait_until(lambda: len(os.listdir(self.walletnotify_dir)) >= len(tx_ids), timeout=10)\n+        assert_equal(sorted(notify_outputname(self.wallet, tx_id) for tx_id in tx_ids), sorted(os.listdir(self.walletnotify_dir)))\n+        for tx_file in os.listdir(self.walletnotify_dir):\n+            os.remove(os.path.join(self.walletnotify_dir, tx_file))\n+\n+\n if __name__ == '__main__':\n     NotificationsTest().main()"
      }
    ]
  },
  {
    "sha": "ff4dc2075031e9a49220cc27a270aeabe8954989",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjRkYzIwNzUwMzFlOWE0OTIyMGNjMjdhMjcwYWVhYmU4OTU0OTg5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-05-05T22:56:21Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:08Z"
      },
      "message": "gui: Fix manual coin control with multiple wallets loaded\n\nGithub-Pull: #18894\nRebased-From: a8b5f1b133d4f23975a3fbfb7a415b17261466ee",
      "tree": {
        "sha": "de7add8d4e3e7fe03a8061bc14925584417f5c57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de7add8d4e3e7fe03a8061bc14925584417f5c57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff4dc2075031e9a49220cc27a270aeabe8954989",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6911AACgkQLuufXMCV\nJsEKzQ//Uxe5PNOqidrHstU0oRiumxfgAczW8n5wIHQGEUA+sOkfzZ8IoUs5tSDj\nP8UwTzv0NyP+EX1RSmjqzN5+wiNjYer0o5HmJKcLchUJde+rOEAHFd9jr3Kz9PeK\nLY+EalOqnHnTa/VUduvw+IEJFUs8VqD56qelXRRNyNC229ZMR4xWcq0vu89/Klqm\nmoUKevTb+wPm25+ALtnWSNesiHvtRXN7dD8ncAqXbApGzczNu6X2k/AX/FLzEf20\n13PSjDTcs0h6U5IaXQOlf5LzvE89kuWAQhE0ZMLa6VbRIA534vhxmvBjvHuAuwI2\nOzhyMELnSPxbfpM18Ofvr03snUuffaZ3SifSRQXRjdI61qkbBWiiNuXbjbVAqBR8\n/TLZpkmK5wvHXKxiBiSC/mHp6pd27IVBw2BRFP1JHYbgJApU0H/YXNhAh8Jbkiuk\nmSsGew3jn62oVAI2n9oiX30JSpaBholwAIvmqB8ySjLHvUGZBsrso6doCPHP8suG\numqSOLG7NN1D4XPb+lpXMGG9rjnCrSTH86/mwMnejMR26bHkyi7d+kVjC3yRG047\nAM66egeq8nTn7teX4Rmen/5B8pbRP/T/zru0zyfaoJKefpI1FoOHFLaGEppDNLKU\nweMIeWQM/BWmGU1FuDZpHzlvD1UQMlharWmw1XdL0FyHMFVkSyo=\n=abhL\n-----END PGP SIGNATURE-----",
        "payload": "tree de7add8d4e3e7fe03a8061bc14925584417f5c57\nparent ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61\nauthor Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com> 1588719381 +0100\ncommitter fanquake <fanquake@gmail.com> 1589499728 +0800\n\ngui: Fix manual coin control with multiple wallets loaded\n\nGithub-Pull: #18894\nRebased-From: a8b5f1b133d4f23975a3fbfb7a415b17261466ee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4dc2075031e9a49220cc27a270aeabe8954989",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff4dc2075031e9a49220cc27a270aeabe8954989",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4dc2075031e9a49220cc27a270aeabe8954989/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0afe8c1ff37926cc5bdcb0e8e4983e194e6d61"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 45,
      "deletions": 67
    },
    "files": [
      {
        "sha": "88e73043837cfdaa4be507a0857692df6c904d12",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 31,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff4dc2075031e9a49220cc27a270aeabe8954989/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff4dc2075031e9a49220cc27a270aeabe8954989/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=ff4dc2075031e9a49220cc27a270aeabe8954989",
        "patch": "@@ -41,10 +41,11 @@ bool CCoinControlWidgetItem::operator<(const QTreeWidgetItem &other) const {\n     return QTreeWidgetItem::operator<(other);\n }\n \n-CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidget *parent) :\n+CoinControlDialog::CoinControlDialog(CCoinControl& coin_control, WalletModel* _model, const PlatformStyle *_platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::CoinControlDialog),\n-    model(nullptr),\n+    m_coin_control(coin_control),\n+    model(_model),\n     platformStyle(_platformStyle)\n {\n     ui->setupUi(this);\n@@ -134,6 +135,13 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n         ui->radioTreeMode->click();\n     if (settings.contains(\"nCoinControlSortColumn\") && settings.contains(\"nCoinControlSortOrder\"))\n         sortView(settings.value(\"nCoinControlSortColumn\").toInt(), (static_cast<Qt::SortOrder>(settings.value(\"nCoinControlSortOrder\").toInt())));\n+\n+    if(_model->getOptionsModel() && _model->getAddressTableModel())\n+    {\n+        updateView();\n+        updateLabelLocked();\n+        CoinControlDialog::updateLabels(m_coin_control, _model, this);\n+    }\n }\n \n CoinControlDialog::~CoinControlDialog()\n@@ -146,18 +154,6 @@ CoinControlDialog::~CoinControlDialog()\n     delete ui;\n }\n \n-void CoinControlDialog::setModel(WalletModel *_model)\n-{\n-    this->model = _model;\n-\n-    if(_model && _model->getOptionsModel() && _model->getAddressTableModel())\n-    {\n-        updateView();\n-        updateLabelLocked();\n-        CoinControlDialog::updateLabels(_model, this);\n-    }\n-}\n-\n // ok button\n void CoinControlDialog::buttonBoxClicked(QAbstractButton* button)\n {\n@@ -183,8 +179,8 @@ void CoinControlDialog::buttonSelectAllClicked()\n                 ui->treeWidget->topLevelItem(i)->setCheckState(COLUMN_CHECKBOX, state);\n     ui->treeWidget->setEnabled(true);\n     if (state == Qt::Unchecked)\n-        coinControl()->UnSelectAll(); // just to be sure\n-    CoinControlDialog::updateLabels(model, this);\n+        m_coin_control.UnSelectAll(); // just to be sure\n+    CoinControlDialog::updateLabels(m_coin_control, model, this);\n }\n \n // context menu\n@@ -369,15 +365,15 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n         COutPoint outpt(uint256S(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()), item->data(COLUMN_ADDRESS, VOutRole).toUInt());\n \n         if (item->checkState(COLUMN_CHECKBOX) == Qt::Unchecked)\n-            coinControl()->UnSelect(outpt);\n+            m_coin_control.UnSelect(outpt);\n         else if (item->isDisabled()) // locked (this happens if \"check all\" through parent node)\n             item->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         else\n-            coinControl()->Select(outpt);\n+            m_coin_control.Select(outpt);\n \n         // selection changed -> update labels\n         if (ui->treeWidget->isEnabled()) // do not update on every click for (un)select all\n-            CoinControlDialog::updateLabels(model, this);\n+            CoinControlDialog::updateLabels(m_coin_control, model, this);\n     }\n \n     // TODO: Remove this temporary qt5 fix after Qt5.3 and Qt5.4 are no longer used.\n@@ -402,7 +398,7 @@ void CoinControlDialog::updateLabelLocked()\n     else ui->labelLocked->setVisible(false);\n }\n \n-void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n+void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *model, QDialog* dialog)\n {\n     if (!model)\n         return;\n@@ -434,7 +430,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     bool fWitness               = false;\n \n     std::vector<COutPoint> vCoinControl;\n-    coinControl()->ListSelected(vCoinControl);\n+    m_coin_control.ListSelected(vCoinControl);\n \n     size_t i = 0;\n     for (const auto& out : model->wallet().getCoins(vCoinControl)) {\n@@ -445,7 +441,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         const COutPoint& outpt = vCoinControl[i++];\n         if (out.is_spent)\n         {\n-            coinControl()->UnSelect(outpt);\n+            m_coin_control.UnSelect(outpt);\n             continue;\n         }\n \n@@ -498,7 +494,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = model->wallet().getMinimumFee(nBytes, *coinControl(), nullptr /* returned_target */, nullptr /* reason */);\n+        nPayFee = model->wallet().getMinimumFee(nBytes, m_coin_control, nullptr /* returned_target */, nullptr /* reason */);\n \n         if (nPayAmount > 0)\n         {\n@@ -590,12 +586,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         label->setVisible(nChange < 0);\n }\n \n-CCoinControl* CoinControlDialog::coinControl()\n-{\n-    static CCoinControl coin_control;\n-    return &coin_control;\n-}\n-\n void CoinControlDialog::updateView()\n {\n     if (!model || !model->getOptionsModel() || !model->getAddressTableModel())\n@@ -695,13 +685,13 @@ void CoinControlDialog::updateView()\n              // disable locked coins\n             if (model->wallet().isLockedCoin(output))\n             {\n-                coinControl()->UnSelect(output); // just to be sure\n+                m_coin_control.UnSelect(output); // just to be sure\n                 itemOutput->setDisabled(true);\n                 itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n             }\n \n             // set checkbox\n-            if (coinControl()->IsSelected(output))\n+            if (m_coin_control.IsSelected(output))\n                 itemOutput->setCheckState(COLUMN_CHECKBOX, Qt::Checked);\n         }\n "
      },
      {
        "sha": "c8a91e5f58187805eabf18e973006ac808bc40c8",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff4dc2075031e9a49220cc27a270aeabe8954989/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff4dc2075031e9a49220cc27a270aeabe8954989/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=ff4dc2075031e9a49220cc27a270aeabe8954989",
        "patch": "@@ -42,20 +42,18 @@ class CoinControlDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit CoinControlDialog(const PlatformStyle *platformStyle, QWidget *parent = nullptr);\n+    explicit CoinControlDialog(CCoinControl& coin_control, WalletModel* model, const PlatformStyle *platformStyle, QWidget *parent = nullptr);\n     ~CoinControlDialog();\n \n-    void setModel(WalletModel *model);\n-\n     // static because also called from sendcoinsdialog\n-    static void updateLabels(WalletModel*, QDialog*);\n+    static void updateLabels(CCoinControl& m_coin_control, WalletModel*, QDialog*);\n \n     static QList<CAmount> payAmounts;\n-    static CCoinControl *coinControl();\n     static bool fSubtractFeeFromAmount;\n \n private:\n     Ui::CoinControlDialog *ui;\n+    CCoinControl& m_coin_control;\n     WalletModel *model;\n     int sortColumn;\n     Qt::SortOrder sortOrder;"
      },
      {
        "sha": "2a6ef4122120345463a44255d279e4b94d3628c7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 31,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff4dc2075031e9a49220cc27a270aeabe8954989/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff4dc2075031e9a49220cc27a270aeabe8954989/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=ff4dc2075031e9a49220cc27a270aeabe8954989",
        "patch": "@@ -57,6 +57,7 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     ui(new Ui::SendCoinsDialog),\n     clientModel(nullptr),\n     model(nullptr),\n+    m_coin_control(new CCoinControl),\n     fNewRecipientAllowed(true),\n     fFeeMinimized(true),\n     platformStyle(_platformStyle)\n@@ -262,14 +263,9 @@ void SendCoinsDialog::on_sendButton_clicked()\n     WalletModelTransaction currentTransaction(recipients);\n     WalletModel::SendCoinsReturn prepareStatus;\n \n-    // Always use a CCoinControl instance, use the CoinControlDialog instance if CoinControl has been enabled\n-    CCoinControl ctrl;\n-    if (model->getOptionsModel()->getCoinControlFeatures())\n-        ctrl = *CoinControlDialog::coinControl();\n+    updateCoinControlState(*m_coin_control);\n \n-    updateCoinControlState(ctrl);\n-\n-    prepareStatus = model->prepareTransaction(currentTransaction, ctrl);\n+    prepareStatus = model->prepareTransaction(currentTransaction, *m_coin_control);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,\n@@ -413,7 +409,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     }\n     if (!send_failure) {\n         accept();\n-        CoinControlDialog::coinControl()->UnSelectAll();\n+        m_coin_control->UnSelectAll();\n         coinControlUpdateLabels();\n     }\n     fNewRecipientAllowed = true;\n@@ -422,7 +418,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n void SendCoinsDialog::clear()\n {\n     // Clear coin control settings\n-    CoinControlDialog::coinControl()->UnSelectAll();\n+    m_coin_control->UnSelectAll();\n     ui->checkBoxCoinControlChange->setChecked(false);\n     ui->lineEditCoinControlChange->clear();\n     coinControlUpdateLabels();\n@@ -645,17 +641,11 @@ void SendCoinsDialog::on_buttonMinimizeFee_clicked()\n \n void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n {\n-    // Get CCoinControl instance if CoinControl is enabled or create a new one.\n-    CCoinControl coin_control;\n-    if (model->getOptionsModel()->getCoinControlFeatures()) {\n-        coin_control = *CoinControlDialog::coinControl();\n-    }\n-\n     // Include watch-only for wallets without private key\n-    coin_control.fAllowWatchOnly = model->wallet().privateKeysDisabled();\n+    m_coin_control->fAllowWatchOnly = model->wallet().privateKeysDisabled();\n \n     // Calculate available amount to send.\n-    CAmount amount = model->wallet().getAvailableBalance(coin_control);\n+    CAmount amount = model->wallet().getAvailableBalance(*m_coin_control);\n     for (int i = 0; i < ui->entries->count(); ++i) {\n         SendCoinsEntry* e = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n         if (e && !e->isHidden() && e != entry) {\n@@ -714,12 +704,11 @@ void SendCoinsDialog::updateSmartFeeLabel()\n {\n     if(!model || !model->getOptionsModel())\n         return;\n-    CCoinControl coin_control;\n-    updateCoinControlState(coin_control);\n-    coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n+    updateCoinControlState(*m_coin_control);\n+    m_coin_control->m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n     int returned_target;\n     FeeReason reason;\n-    CFeeRate feeRate = CFeeRate(model->wallet().getMinimumFee(1000, coin_control, &returned_target, &reason));\n+    CFeeRate feeRate = CFeeRate(model->wallet().getMinimumFee(1000, *m_coin_control, &returned_target, &reason));\n \n     ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n \n@@ -790,16 +779,15 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     ui->frameCoinControl->setVisible(checked);\n \n     if (!checked && model) // coin control features disabled\n-        CoinControlDialog::coinControl()->SetNull();\n+        m_coin_control->SetNull();\n \n     coinControlUpdateLabels();\n }\n \n // Coin Control: button inputs -> show actual coin control dialog\n void SendCoinsDialog::coinControlButtonClicked()\n {\n-    CoinControlDialog dlg(platformStyle);\n-    dlg.setModel(model);\n+    CoinControlDialog dlg(*m_coin_control, model, platformStyle);\n     dlg.exec();\n     coinControlUpdateLabels();\n }\n@@ -809,7 +797,7 @@ void SendCoinsDialog::coinControlChangeChecked(int state)\n {\n     if (state == Qt::Unchecked)\n     {\n-        CoinControlDialog::coinControl()->destChange = CNoDestination();\n+        m_coin_control->destChange = CNoDestination();\n         ui->labelCoinControlChangeLabel->clear();\n     }\n     else\n@@ -825,7 +813,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n     if (model && model->getAddressTableModel())\n     {\n         // Default to no change address until verified\n-        CoinControlDialog::coinControl()->destChange = CNoDestination();\n+        m_coin_control->destChange = CNoDestination();\n         ui->labelCoinControlChangeLabel->setStyleSheet(\"QLabel{color:red;}\");\n \n         const CTxDestination dest = DecodeDestination(text.toStdString());\n@@ -848,7 +836,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                     QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel);\n \n                 if(btnRetVal == QMessageBox::Yes)\n-                    CoinControlDialog::coinControl()->destChange = dest;\n+                    m_coin_control->destChange = dest;\n                 else\n                 {\n                     ui->lineEditCoinControlChange->setText(\"\");\n@@ -867,7 +855,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                 else\n                     ui->labelCoinControlChangeLabel->setText(tr(\"(no label)\"));\n \n-                CoinControlDialog::coinControl()->destChange = dest;\n+                m_coin_control->destChange = dest;\n             }\n         }\n     }\n@@ -879,7 +867,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     if (!model || !model->getOptionsModel())\n         return;\n \n-    updateCoinControlState(*CoinControlDialog::coinControl());\n+    updateCoinControlState(*m_coin_control);\n \n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n@@ -897,10 +885,10 @@ void SendCoinsDialog::coinControlUpdateLabels()\n         }\n     }\n \n-    if (CoinControlDialog::coinControl()->HasSelected())\n+    if (m_coin_control->HasSelected())\n     {\n         // actual coin control calculation\n-        CoinControlDialog::updateLabels(model, this);\n+        CoinControlDialog::updateLabels(*m_coin_control, model, this);\n \n         // show coin control stats\n         ui->labelCoinControlAutomaticallySelected->hide();"
      },
      {
        "sha": "8eadc5a225541a1abcdf76600c764d78f3905577",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff4dc2075031e9a49220cc27a270aeabe8954989/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff4dc2075031e9a49220cc27a270aeabe8954989/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=ff4dc2075031e9a49220cc27a270aeabe8954989",
        "patch": "@@ -12,6 +12,7 @@\n #include <QString>\n #include <QTimer>\n \n+class CCoinControl;\n class ClientModel;\n class PlatformStyle;\n class SendCoinsEntry;\n@@ -60,6 +61,7 @@ public Q_SLOTS:\n     Ui::SendCoinsDialog *ui;\n     ClientModel *clientModel;\n     WalletModel *model;\n+    std::unique_ptr<CCoinControl> m_coin_control;\n     bool fNewRecipientAllowed;\n     bool fFeeMinimized;\n     const PlatformStyle *platformStyle;"
      }
    ]
  },
  {
    "sha": "37a620748bd3578eda1c74daad8df8451d13b989",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2E2MjA3NDhiZDM1NzhlZGExYzc0ZGFhZDhkZjg0NTFkMTNiOTg5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-23T18:04:02Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:08Z"
      },
      "message": "test: Add unregister_validation_interface_race test\n\nThis commit is (intentionally) adding a broken test. The test is broken\nbecause it registering a subscriber object that can go out of scope\nwhile events are still being sent.\n\nTo run the broken test and reproduce the bug:\n  - Remove comment /** and */\n  - ./configure --with-sanitizers=address\n  - export ASAN_OPTIONS=detect_leaks=0\n  - make\n  - while ./src/test/test_bitcoin -t validationinterface_tests/unregister_validation_interface_race --catch_system_errors=no  ; do true; done\n\nGithub-Pull: #18742\nRebased-From: fab6d060ce5f580db538070beec1c5518c8c777c",
      "tree": {
        "sha": "14424869ce20bf8dd9f013c921ebb12ed273d605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14424869ce20bf8dd9f013c921ebb12ed273d605"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37a620748bd3578eda1c74daad8df8451d13b989",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6911AACgkQLuufXMCV\nJsH8Qw/+MNkw2Gglh4urRA4yw3QTnSDMKO3/ZwuZ2WWj9c7BMcqM3jdkJlWGhnPq\nOIvS71CcWZdfiC+7wZCjQBR8flD9rx0W6KyBuYFkbGVIZd6OstnYWn6YCsFALYr3\n3gi3AeU1omt3JQ6SEDjrbsDN7RLgMdm22wG5IDEaJ9YLGSrOyd/anXfvo+01BdF8\nL1rhb2z8zw8qGpwK2/8DwOSXnr80uXU/nTMpgI4AH4CoXKzyWYHpNaVkoHBOzh7E\nARXOINjXpFkl1t82dlhg0zpuevj4EYmP3etD5ValLa8DCTfydaoDUG0q5adThQKn\n7lXqs1j3dWgLmFamXvS8xvJTI8pBbULD8vbb3h7EF6Z4Qy+rBrKhUMt8L5QwKb0T\nKCm/x5+rF+bNHeb7tEPR1aOy3GGvMQdb+JF60DmBVXVFRoclyNwADn2lNoceqCtN\nGQ2T+XRiWYBzZmcgTTuFNGFDLxF8r0lg2MBDs/UeLFcoYoKlCKc9nFx+AKYWrkW2\nM5Amtxg7b3hw/9y9N74yz2QxSRCDN/FoI7eP/eTk7GhoZjcgKdch49t3VYJT8lLG\nQA0Mx8xbvGy683VHwBVa9EPddDTbVRHhH//9VCIOE4bxko8UOXl2GSbSa5g2Z/Sx\nbdRM/NmweJ29FtbxEx8GQuBuU8o259oW2F24K85ga4IMtz1Qw/A=\n=LEQX\n-----END PGP SIGNATURE-----",
        "payload": "tree 14424869ce20bf8dd9f013c921ebb12ed273d605\nparent ff4dc2075031e9a49220cc27a270aeabe8954989\nauthor MarcoFalke <falke.marco@gmail.com> 1587665042 -0400\ncommitter fanquake <fanquake@gmail.com> 1589499728 +0800\n\ntest: Add unregister_validation_interface_race test\n\nThis commit is (intentionally) adding a broken test. The test is broken\nbecause it registering a subscriber object that can go out of scope\nwhile events are still being sent.\n\nTo run the broken test and reproduce the bug:\n  - Remove comment /** and */\n  - ./configure --with-sanitizers=address\n  - export ASAN_OPTIONS=detect_leaks=0\n  - make\n  - while ./src/test/test_bitcoin -t validationinterface_tests/unregister_validation_interface_race --catch_system_errors=no  ; do true; done\n\nGithub-Pull: #18742\nRebased-From: fab6d060ce5f580db538070beec1c5518c8c777c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37a620748bd3578eda1c74daad8df8451d13b989",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37a620748bd3578eda1c74daad8df8451d13b989",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37a620748bd3578eda1c74daad8df8451d13b989/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff4dc2075031e9a49220cc27a270aeabe8954989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff4dc2075031e9a49220cc27a270aeabe8954989",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff4dc2075031e9a49220cc27a270aeabe8954989"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 36,
      "deletions": 0
    },
    "files": [
      {
        "sha": "14f09ae905082f24c168085fa449143d3fe58430",
        "filename": "src/test/validationinterface_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37a620748bd3578eda1c74daad8df8451d13b989/src/test/validationinterface_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37a620748bd3578eda1c74daad8df8451d13b989/src/test/validationinterface_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validationinterface_tests.cpp?ref=37a620748bd3578eda1c74daad8df8451d13b989",
        "patch": "@@ -12,6 +12,42 @@\n \n BOOST_FIXTURE_TEST_SUITE(validationinterface_tests, TestingSetup)\n \n+/**\n+struct TestSubscriberNoop final : public CValidationInterface {\n+    void BlockChecked(const CBlock&, const BlockValidationState&) override {}\n+};\n+\n+BOOST_AUTO_TEST_CASE(unregister_validation_interface_race)\n+{\n+    std::atomic<bool> generate{true};\n+\n+    // Start thread to generate notifications\n+    std::thread gen{[&] {\n+        const CBlock block_dummy;\n+        const BlockValidationState state_dummy;\n+        while (generate) {\n+            GetMainSignals().BlockChecked(block_dummy, state_dummy);\n+        }\n+    }};\n+\n+    // Start thread to consume notifications\n+    std::thread sub{[&] {\n+        // keep going for about 1 sec, which is 250k iterations\n+        for (int i = 0; i < 250000; i++) {\n+            TestSubscriberNoop sub{};\n+            RegisterValidationInterface(&sub);\n+            UnregisterValidationInterface(&sub);\n+        }\n+        // tell the other thread we are done\n+        generate = false;\n+    }};\n+\n+    gen.join();\n+    sub.join();\n+    BOOST_CHECK(!generate);\n+}\n+*/\n+\n class TestInterface : public CValidationInterface\n {\n public:"
      }
    ]
  },
  {
    "sha": "cc7d34465bbb0195d8bcd9143097840a2e9765f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzdkMzQ0NjViYmIwMTk1ZDhiY2Q5MTQzMDk3ODQwYTJlOTc2NWYy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-27T14:35:32Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-14T23:42:08Z"
      },
      "message": "miner: Avoid stack-use-after-return in validationinterface\n\nThis is achieved by switching to a shared_ptr.\n\nAlso, switch the validationinterfaces in the tests to use shared_ptrs\nfor the same reason.\n\nGithub-Pull: #18742\nRebased-From: 7777f2a4bb1f9d843bc50a4e35085cfbb2808780",
      "tree": {
        "sha": "21c484795f906d9de0e7dd7dff73421525854a89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21c484795f906d9de0e7dd7dff73421525854a89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc7d34465bbb0195d8bcd9143097840a2e9765f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6911AACgkQLuufXMCV\nJsE2rRAAu1fRZYCnLw0P0RuITtTIebfKtuYzZiu0wTVU8WcPW8IbmwFP5eJQH5ns\nGQQfeya04+ujYyFZ4cJjdH2meAHYgrjQoiaCsj+cdXyhu4zzXOoy6ZV5okh/MEk2\nBXBfsCin6p4dMw9bbcZdbbOT9APiOSe8ycChptbgBOTiJbnMIykyh3nPcEA32PNt\nWO9Kci5F6awAjremstJJEhJ2s1+gZ9N7VsaP3A5vTU43TCkSRrU71HO7RmzRp0F4\npZYE3d9X+WtJ0MEg3g5nVE6FkoBNwJmBsXQHPgU0enLesbfXuolbbvEtDJsNBNC/\nOWCLTLdJsvJa8e65giN4VCcW+CAgN4R6K7F258eI1aDvEDCJm627aCkevHS9bamt\nZ4p8NmNDwKL3pphqG+bcwUi5iz8nSToBBbI2h/5mNqtRSY85AUVit1mceRPlTl3+\n7f+ALEoqMDiNo6UtRh93xEhP7paPOwcCFa7DfsGVkRuazbmTsXw99P4Wzv15ls63\nGMx4RnKpQyqHjojFPi0No+iQAPCtcW4WP/9egwxJZGHIMonoSKch/ESX5Kbtoqhm\n8Cpwldmit8slffU68dapMlGgjO9wbiEyeW+b1PgKOPFI4/aaItxWeoa+1HshjvQs\nS6gzt9FZNMeFREUPCgRm0y/X8Q0WeU1YO8NhpgWhiGM726mvQBk=\n=qUKi\n-----END PGP SIGNATURE-----",
        "payload": "tree 21c484795f906d9de0e7dd7dff73421525854a89\nparent 37a620748bd3578eda1c74daad8df8451d13b989\nauthor MarcoFalke <falke.marco@gmail.com> 1587998132 -0400\ncommitter fanquake <fanquake@gmail.com> 1589499728 +0800\n\nminer: Avoid stack-use-after-return in validationinterface\n\nThis is achieved by switching to a shared_ptr.\n\nAlso, switch the validationinterfaces in the tests to use shared_ptrs\nfor the same reason.\n\nGithub-Pull: #18742\nRebased-From: 7777f2a4bb1f9d843bc50a4e35085cfbb2808780\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc7d34465bbb0195d8bcd9143097840a2e9765f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc7d34465bbb0195d8bcd9143097840a2e9765f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc7d34465bbb0195d8bcd9143097840a2e9765f2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37a620748bd3578eda1c74daad8df8451d13b989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37a620748bd3578eda1c74daad8df8451d13b989",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37a620748bd3578eda1c74daad8df8451d13b989"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 14,
      "deletions": 16
    },
    "files": [
      {
        "sha": "94590e0da44767b105c0b8455816552234c4e973",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc7d34465bbb0195d8bcd9143097840a2e9765f2/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc7d34465bbb0195d8bcd9143097840a2e9765f2/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=cc7d34465bbb0195d8bcd9143097840a2e9765f2",
        "patch": "@@ -724,7 +724,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     return result;\n }\n \n-class submitblock_StateCatcher : public CValidationInterface\n+class submitblock_StateCatcher final : public CValidationInterface\n {\n public:\n     uint256 hash;\n@@ -792,17 +792,17 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     }\n \n     bool new_block;\n-    submitblock_StateCatcher sc(block.GetHash());\n-    RegisterValidationInterface(&sc);\n+    auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n+    RegisterSharedValidationInterface(sc);\n     bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n-    UnregisterValidationInterface(&sc);\n+    UnregisterSharedValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n-    if (!sc.found) {\n+    if (!sc->found) {\n         return \"inconclusive\";\n     }\n-    return BIP22ValidationResult(sc.state);\n+    return BIP22ValidationResult(sc->state);\n }\n \n static UniValue submitheader(const JSONRPCRequest& request)"
      },
      {
        "sha": "e61ea13b0210ddd342d215a015fd5f28fc23d36d",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc7d34465bbb0195d8bcd9143097840a2e9765f2/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc7d34465bbb0195d8bcd9143097840a2e9765f2/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=cc7d34465bbb0195d8bcd9143097840a2e9765f2",
        "patch": "@@ -32,7 +32,7 @@ struct MinerTestingSetup : public RegTestingSetup {\n \n BOOST_FIXTURE_TEST_SUITE(validation_block_tests, MinerTestingSetup)\n \n-struct TestSubscriber : public CValidationInterface {\n+struct TestSubscriber final : public CValidationInterface {\n     uint256 m_expected_tip;\n \n     explicit TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n@@ -175,8 +175,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n         LOCK(cs_main);\n         initial_tip = ::ChainActive().Tip();\n     }\n-    TestSubscriber sub(initial_tip->GetBlockHash());\n-    RegisterValidationInterface(&sub);\n+    auto sub = std::make_shared<TestSubscriber>(initial_tip->GetBlockHash());\n+    RegisterSharedValidationInterface(sub);\n \n     // create a bunch of threads that repeatedly process a block generated above at random\n     // this will create parallelism and randomness inside validation - the ValidationInterface\n@@ -208,10 +208,10 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n         UninterruptibleSleep(std::chrono::milliseconds{100});\n     }\n \n-    UnregisterValidationInterface(&sub);\n+    UnregisterSharedValidationInterface(sub);\n \n     LOCK(cs_main);\n-    BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n+    BOOST_CHECK_EQUAL(sub->m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n /**"
      },
      {
        "sha": "d2fc20e625afaff0f262cf6ee0437cdaccb2791a",
        "filename": "src/test/validationinterface_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc7d34465bbb0195d8bcd9143097840a2e9765f2/src/test/validationinterface_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc7d34465bbb0195d8bcd9143097840a2e9765f2/src/test/validationinterface_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validationinterface_tests.cpp?ref=cc7d34465bbb0195d8bcd9143097840a2e9765f2",
        "patch": "@@ -12,7 +12,6 @@\n \n BOOST_FIXTURE_TEST_SUITE(validationinterface_tests, TestingSetup)\n \n-/**\n struct TestSubscriberNoop final : public CValidationInterface {\n     void BlockChecked(const CBlock&, const BlockValidationState&) override {}\n };\n@@ -34,9 +33,9 @@ BOOST_AUTO_TEST_CASE(unregister_validation_interface_race)\n     std::thread sub{[&] {\n         // keep going for about 1 sec, which is 250k iterations\n         for (int i = 0; i < 250000; i++) {\n-            TestSubscriberNoop sub{};\n-            RegisterValidationInterface(&sub);\n-            UnregisterValidationInterface(&sub);\n+            auto sub = std::make_shared<TestSubscriberNoop>();\n+            RegisterSharedValidationInterface(sub);\n+            UnregisterSharedValidationInterface(sub);\n         }\n         // tell the other thread we are done\n         generate = false;\n@@ -46,7 +45,6 @@ BOOST_AUTO_TEST_CASE(unregister_validation_interface_race)\n     sub.join();\n     BOOST_CHECK(!generate);\n }\n-*/\n \n class TestInterface : public CValidationInterface\n {"
      }
    ]
  },
  {
    "sha": "cf2a6e2a390ad18a616d7f2718688375f2576577",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjJhNmUyYTM5MGFkMThhNjE2ZDdmMjcxODY4ODM3NWYyNTc2NTc3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2020-05-14T16:31:57Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-15T00:08:15Z"
      },
      "message": "test: Remove const to work around compiler error on xenial\n\nFix the following error in travis:\n\n    test/validationinterface_tests.cpp:26:36: error: default initialization of an object of const type 'const BlockValidationState' without a user-provided default constructor\n\n    const BlockValidationState state_dummy;\n\nGithub-Pull: #18975\nRebased-From: 050e2ee6f28e7b31c167013be7313726e34084e9",
      "tree": {
        "sha": "f27e65e63a255409742f0551d441da752bc5f4f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f27e65e63a255409742f0551d441da752bc5f4f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf2a6e2a390ad18a616d7f2718688375f2576577",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl693YQACgkQLuufXMCV\nJsGoPg/+KYcCJ2JIndJ4SFWefK5y3gYYPSVmuzhTVYRUJ/cukOMC3ZPg0WQfui08\n8sQkWkkF4GVAi67UWp47fDwu2ULxIn88Z6c7s4oX7NDjsayn69rkG2vxT5ZSSz8h\nV4hrczqnlGseDkukFP3A7AjcJNT4NP6qkyrGLTyTSCYI4jHhUtSiQdsO/t8vDhyF\nsq473iHlFyq2uG/UV2w2pTXJoI8m+y5GeAr0LjbTu06sjoWZf6vQOaDFo868CDNO\ndzFvKDJo5jewBCtnwvvdpfsDGAOTo68KfIH8banvWBx67UESECGR3PlB6MfY52bG\nimG3Scjbg4VtNfh+AeRBIFP3NgiIMCRPcq85nSuRd3jr8k8YFPffEh3C9ghQewLg\nFcRBzJovQiS72+/CNL9t0WEi2w/HEHRThDrkdQEZobQbmenFEtwch2hFxNUJfOeD\nVBSXbeYeCS0L/LoWIHYdmrbWB8jgwWp8ZwQ+CsTIsIB7OTk5QImzDekLBRzFQH21\nc3+zEg3gOCF7pSiLF5KAjQsC8MiQo4NpsZb1RrA2DA3e7nh1BpSJG/D6C0KQRKnh\n3PESZ4ueWSWuDusFylSHZMdvzez+7R8h8a0IcaZlqO3gbwqE1s9zbgNFxE5NJOlR\nmjKbnWss1c6fDouA+NvGdpnlVbUzZ7U+pV6zxMTiF7MtJVE7eyg=\n=TJ3m\n-----END PGP SIGNATURE-----",
        "payload": "tree f27e65e63a255409742f0551d441da752bc5f4f4\nparent cc7d34465bbb0195d8bcd9143097840a2e9765f2\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1589473917 +0200\ncommitter fanquake <fanquake@gmail.com> 1589501295 +0800\n\ntest: Remove const to work around compiler error on xenial\n\nFix the following error in travis:\n\n    test/validationinterface_tests.cpp:26:36: error: default initialization of an object of const type 'const BlockValidationState' without a user-provided default constructor\n\n    const BlockValidationState state_dummy;\n\nGithub-Pull: #18975\nRebased-From: 050e2ee6f28e7b31c167013be7313726e34084e9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2a6e2a390ad18a616d7f2718688375f2576577",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2a6e2a390ad18a616d7f2718688375f2576577",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2a6e2a390ad18a616d7f2718688375f2576577/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc7d34465bbb0195d8bcd9143097840a2e9765f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc7d34465bbb0195d8bcd9143097840a2e9765f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc7d34465bbb0195d8bcd9143097840a2e9765f2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ceba689e52970ee5fff32682742d77bc2df48c63",
        "filename": "src/test/validationinterface_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf2a6e2a390ad18a616d7f2718688375f2576577/src/test/validationinterface_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf2a6e2a390ad18a616d7f2718688375f2576577/src/test/validationinterface_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validationinterface_tests.cpp?ref=cf2a6e2a390ad18a616d7f2718688375f2576577",
        "patch": "@@ -23,7 +23,7 @@ BOOST_AUTO_TEST_CASE(unregister_validation_interface_race)\n     // Start thread to generate notifications\n     std::thread gen{[&] {\n         const CBlock block_dummy;\n-        const BlockValidationState state_dummy;\n+        BlockValidationState state_dummy;\n         while (generate) {\n             GetMainSignals().BlockChecked(block_dummy, state_dummy);\n         }"
      }
    ]
  },
  {
    "sha": "6161c94a6108ebddafe4e95c14bde4cdc3f8c01c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTYxYzk0YTYxMDhlYmRkYWZlNGU5NWMxNGJkZTRjZGMzZjhjMDFj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T18:18:13Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-15T00:10:05Z"
      },
      "message": "[net processing] Only send a getheaders for one block in an INV\n\nHeaders-first is the primary method of announcement on the network. If a\nnode fell back sending blocks by inv, it's probably for a re-org. The\nfinal block hash provided should be the highest, so send a getheaders\nand then fetch the blocks we need to catch up.\n\nGithub-Pull: #18962\nRebased-From: 746736639e6d05acdb85c866d4c605c947d4c500",
      "tree": {
        "sha": "9b9cfb1789665cff43f4ea7034719fa01382054f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b9cfb1789665cff43f4ea7034719fa01382054f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6161c94a6108ebddafe4e95c14bde4cdc3f8c01c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl693fIACgkQLuufXMCV\nJsHgARAAia4f/L/yANspACYlo4Ha9OZSIoo1F6WFLeztKNi1XkEkckIEdd0iP1dS\nBzoxkk6uPhsgNUq/VaFwkQ/bpNSnATfdcFLGfBc4VtN5S6VT0WOGizKMIwdOFAeY\nDf097DYR+d7knLaHWRLR3FcyNBxsOVA7Mz/kxZ2e+bAy015Gij30lDmQ3KlDxFxU\nVHvfucDPayOONtmmjrlZS7fc2Q5VfHdrY0SyM4EOYe5kZ84V7dH+pOGEYbmmvFjx\ntF6gs5+Pwe0Rd4Pke/Ep6U+nmeBGXn6qkQz/Y+01sZXPYvc2hMI0FkTk1uoA5oHk\nOTEwBWHOG9ULf4rMan5z3p/LfHh7Kj1n40r+14rq1sHpy120BMuU9mjeVuYOVPZn\nK+SBuFnWHU/bS/9A+8gLGwAJkvWtjlKzfBJbCioc9Yu50sdxAESeyjps5Drm/2SB\nnnN/ySKXyIuulps7DOEA88Ce5y68w1VRcruIp3jTKtRWkB/qCuXljmCiTnhDwt7x\n7SJJxhlZ+TUQ/5DSoYbQ186qb+D+GqI8tZiclUlCvuowKI5R8wsMC7UZka11z6Jy\nslCDBLOvUCj0wJECY3Zr7QxFvFRHltZTbBZ1HOHUqtP+5bTtjS0b+60MQRAB+il6\nNzXLW2fprFbvAt4tXsHNruUt4ohIaLeGJjCZv8+PzphidnGS/Bs=\n=G1on\n-----END PGP SIGNATURE-----",
        "payload": "tree 9b9cfb1789665cff43f4ea7034719fa01382054f\nparent cf2a6e2a390ad18a616d7f2718688375f2576577\nauthor John Newbery <john@johnnewbery.com> 1588961893 -0400\ncommitter fanquake <fanquake@gmail.com> 1589501405 +0800\n\n[net processing] Only send a getheaders for one block in an INV\n\nHeaders-first is the primary method of announcement on the network. If a\nnode fell back sending blocks by inv, it's probably for a re-org. The\nfinal block hash provided should be the highest, so send a getheaders\nand then fetch the blocks we need to catch up.\n\nGithub-Pull: #18962\nRebased-From: 746736639e6d05acdb85c866d4c605c947d4c500\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6161c94a6108ebddafe4e95c14bde4cdc3f8c01c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6161c94a6108ebddafe4e95c14bde4cdc3f8c01c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6161c94a6108ebddafe4e95c14bde4cdc3f8c01c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf2a6e2a390ad18a616d7f2718688375f2576577",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf2a6e2a390ad18a616d7f2718688375f2576577",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf2a6e2a390ad18a616d7f2718688375f2576577"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 14,
      "deletions": 10
    },
    "files": [
      {
        "sha": "2a61f84a085d70b7efc9ea77e5343754b60dd932",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6161c94a6108ebddafe4e95c14bde4cdc3f8c01c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6161c94a6108ebddafe4e95c14bde4cdc3f8c01c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6161c94a6108ebddafe4e95c14bde4cdc3f8c01c",
        "patch": "@@ -2261,6 +2261,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n \n         uint32_t nFetchFlags = GetFetchFlags(pfrom);\n         const auto current_time = GetTime<std::chrono::microseconds>();\n+        uint256* best_block{nullptr};\n \n         for (CInv &inv : vInv)\n         {\n@@ -2277,17 +2278,14 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n-                    // We used to request the full block here, but since headers-announcements are now the\n-                    // primary method of announcement on the network, and since, in the case that a node\n-                    // fell back to inv we probably have a reorg which we should get the headers for first,\n-                    // we now only provide a getheaders response here. When we receive the headers, we will\n-                    // then ask for the blocks we need.\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), inv.hash));\n-                    LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->GetId());\n+                    // Headers-first is the primary method of announcement on\n+                    // the network. If a node fell back to sending blocks by inv,\n+                    // it's probably for a re-org. The final block hash\n+                    // provided should be the highest, so send a getheaders and\n+                    // then fetch the blocks we need to catch up.\n+                    best_block = &inv.hash;\n                 }\n-            }\n-            else\n-            {\n+            } else {\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n@@ -2298,6 +2296,12 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                 }\n             }\n         }\n+\n+        if (best_block != nullptr) {\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), *best_block));\n+            LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, best_block->ToString(), pfrom->GetId());\n+        }\n+\n         return true;\n     }\n "
      }
    ]
  },
  {
    "sha": "9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YThmYjRjZjRiYTQ3MmE1YzNlMWI5YjcxZDMxNjczZjg4MWE0ODk2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-24T12:29:47Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-15T04:03:50Z"
      },
      "message": "fuzz: Remove enumeration of expected deserialization exceptions in ProcessMessage(...) fuzzer\n\nGithub-Pull: #18757\nRebased-From: fdceb6328382ac0f9d643f9d42ba0509062d7d48",
      "tree": {
        "sha": "3951bb860f5bfff0f179b30f3f9ef3a4f0e3b69e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3951bb860f5bfff0f179b30f3f9ef3a4f0e3b69e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6+FMcACgkQLuufXMCV\nJsH7KQ//bg9DlY9kt8MnYBQ4DU745NF5AQJLF6pN3s/0+8csy/l8f6AmQlRFQXRo\ndnhJrHmQtR9v4+t8LXGwock30si4AYdkByAnklq5vH4Z0eMdRdrAfEB2M9TbRaEl\nktN4obsENqAKOhFWVYhKL4RHETWjOgCjwIJ/SpVbe/7iGyVoe+xdq8yFcAgqQjSP\nXBByN38GgJNCOS1y27gDD59lV9SxHGHK17/fzj31cNwxSE9cW7v6TXrxhm6pInfh\nLuPj06jZJzz6ol8by0UnUSSB0rwSQJwfId3SGAMj+ZwQykVWGg6GDAnN9raOTmI6\nOPuJ8Y6CVu8B5Joc9ot7o0M4Cu2r7A93p7pTGxOnW3NK4ujrqPcu+kU6ntlfsCJq\nR0OwBpVIwtk3U+/FtrNr5xC6Bb8yctNzBQg+iC8mlwota4mcjc+wjDr7cLxeNqWv\nZ0SS1GpIv5C8wv4DKdkJEhGoY69WJKRwuoKqUIm7KrI0vtLdYTapaBozUaADz/GD\nhVeNIAS2Bidu85yCb+DofL0urA6PT3wRMwJPzPPP6m5tV8l7qrnOXkTma4T0ITI/\nc2HSi26nJ56OhlpPhdnluAnkdiKXhSyHdqvcW9vK7W+9toIKQOmFr6Bg8Sup59Rs\nd49MrVq5e9S1jNFAPCMbKiZiuBpJkDz7uUQrxT02yqJ3eoT7SXY=\n=9/ky\n-----END PGP SIGNATURE-----",
        "payload": "tree 3951bb860f5bfff0f179b30f3f9ef3a4f0e3b69e\nparent 6161c94a6108ebddafe4e95c14bde4cdc3f8c01c\nauthor practicalswift <practicalswift@users.noreply.github.com> 1587731387 +0000\ncommitter fanquake <fanquake@gmail.com> 1589515430 +0800\n\nfuzz: Remove enumeration of expected deserialization exceptions in ProcessMessage(...) fuzzer\n\nGithub-Pull: #18757\nRebased-From: fdceb6328382ac0f9d643f9d42ba0509062d7d48\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6161c94a6108ebddafe4e95c14bde4cdc3f8c01c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6161c94a6108ebddafe4e95c14bde4cdc3f8c01c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6161c94a6108ebddafe4e95c14bde4cdc3f8c01c"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 1,
      "deletions": 23
    },
    "files": [
      {
        "sha": "425503190461ba03d703729922fa18c47669f866",
        "filename": "src/test/fuzz/process_message.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 23,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896/src/test/fuzz/process_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896/src/test/fuzz/process_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_message.cpp?ref=9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896",
        "patch": "@@ -19,16 +19,13 @@\n #include <validationinterface.h>\n #include <version.h>\n \n-#include <algorithm>\n #include <atomic>\n #include <cassert>\n #include <chrono>\n #include <cstdint>\n #include <iosfwd>\n #include <iostream>\n-#include <map>\n #include <memory>\n-#include <set>\n #include <string>\n #include <vector>\n \n@@ -44,19 +41,6 @@ const std::string LIMIT_TO_MESSAGE_TYPE{TO_STRING(MESSAGE_TYPE)};\n const std::string LIMIT_TO_MESSAGE_TYPE;\n #endif\n \n-const std::map<std::string, std::set<std::string>> EXPECTED_DESERIALIZATION_EXCEPTIONS = {\n-    {\"CDataStream::read(): end of data: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"feefilter\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"ping\", \"sendcmpct\", \"tx\"}},\n-    {\"CompactSize exceeds limit of type: iostream error\", {\"cmpctblock\"}},\n-    {\"differential value overflow: iostream error\", {\"getblocktxn\"}},\n-    {\"index overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n-    {\"index overflowed 16-bits: iostream error\", {\"cmpctblock\"}},\n-    {\"indexes overflowed 16 bits: iostream error\", {\"getblocktxn\"}},\n-    {\"non-canonical ReadCompactSize(): iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n-    {\"ReadCompactSize(): size too large: iostream error\", {\"addr\", \"block\", \"blocktxn\", \"cmpctblock\", \"filteradd\", \"filterload\", \"getblocks\", \"getblocktxn\", \"getdata\", \"getheaders\", \"headers\", \"inv\", \"notfound\", \"tx\"}},\n-    {\"Superfluous witness record: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n-    {\"Unknown transaction optional data: iostream error\", {\"block\", \"blocktxn\", \"cmpctblock\", \"tx\"}},\n-};\n-\n const RegTestingSetup* g_setup;\n } // namespace\n \n@@ -86,13 +70,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n     try {\n         (void)ProcessMessage(&p2p_node, random_message_type, random_bytes_data_stream, GetTimeMillis(), Params(), *g_setup->m_node.mempool, g_setup->m_node.connman.get(), g_setup->m_node.banman.get(), std::atomic<bool>{false});\n-    } catch (const std::ios_base::failure& e) {\n-        const std::string exception_message{e.what()};\n-        const auto p = EXPECTED_DESERIALIZATION_EXCEPTIONS.find(exception_message);\n-        if (p == EXPECTED_DESERIALIZATION_EXCEPTIONS.cend() || p->second.count(random_message_type) == 0) {\n-            std::cout << \"Unexpected exception when processing message type \\\"\" << random_message_type << \"\\\": \" << exception_message << std::endl;\n-            assert(false);\n-        }\n+    } catch (const std::ios_base::failure&) {\n     }\n     SyncWithValidationInterfaceQueue();\n }"
      }
    ]
  },
  {
    "sha": "245c862cfd4883ea91b53d766abb00a9c3c1ea5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDVjODYyY2ZkNDg4M2VhOTFiNTNkNzY2YWJiMDBhOWMzYzFlYTVj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-15T07:13:56Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-05-15T07:50:32Z"
      },
      "message": "test: disable script fuzz tests\n\nGiven that #18413 has not been backported.",
      "tree": {
        "sha": "091e01639ac8e8c3c870e848539ede3f0f4a3aef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/091e01639ac8e8c3c870e848539ede3f0f4a3aef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/245c862cfd4883ea91b53d766abb00a9c3c1ea5c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6+ScgACgkQLuufXMCV\nJsGkcA/+Ow6v7CJuXQFvYzW+agt4bSPbmxRzb2KeQL0CsGGoHbHDPdRQuMQ2yUJs\nUEIKO3dVMZ7atwxLsL7ovrXcwgK3z+2DqQe/E7hosHk2gd26gvfTyTpAQGNFGTol\nkUpEjzPQx+qMAwijAuTLhhilRTUNZs+/D4RncHpB6DyViOX0LLfPDlFJ+qfZc9Uc\nk2rp6r67s/s6116cQdjhdzihyhqPpuZ+V4SAGoos6hlEv2WHlZt1I/wmOVmiczPy\nAz1yGKTYJC7P9//jG7JALRGEn+KoqvGfhcyl2qUHLZxtsCuENoetBGo2Vc5m+YHL\n1Vrfq+iNwX/5phfkfSxOgbO4dTMZYQf3JbweryAbWr6K6FJI2meiRJMe8Rczx6hv\n5NAWZCr0qmwLs47jhZ4rNNBNrqVymVA5KON2Hwlbm7K+6XkC7HENyo1KTf7lEM6L\n8BbFHoWTYkNEwUoL9s1FbJ2DmItRkh0WizpO2BqFGR4Wwich3UzeDd55vDU7wFa6\nsy+ajq4ryraBXikKE1GhyiM2oa6tjX26PPneXA5nNuUx/ryNp2VJRhRYGCx5A9PR\nppoiltYENQVfEvBNyD6seJWgPb0RsRvmp9LxG8HkRcteLtCh1jKzy04zYaSpAWiL\npF1nBOMEoT+ls7hSKVBqfPnSkPb9BwPwFYgjFIZmTJcj6w/E6x4=\n=p+4W\n-----END PGP SIGNATURE-----",
        "payload": "tree 091e01639ac8e8c3c870e848539ede3f0f4a3aef\nparent 9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896\nauthor fanquake <fanquake@gmail.com> 1589526836 +0800\ncommitter fanquake <fanquake@gmail.com> 1589529032 +0800\n\ntest: disable script fuzz tests\n\nGiven that #18413 has not been backported.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/245c862cfd4883ea91b53d766abb00a9c3c1ea5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/245c862cfd4883ea91b53d766abb00a9c3c1ea5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/245c862cfd4883ea91b53d766abb00a9c3c1ea5c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a8fb4cf4ba472a5c3e1b9b71d31673f881a4896"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 12,
      "deletions": 13
    },
    "files": [
      {
        "sha": "56c887af7879ad99cef80bd7d2fcb660f3150125",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245c862cfd4883ea91b53d766abb00a9c3c1ea5c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245c862cfd4883ea91b53d766abb00a9c3c1ea5c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=245c862cfd4883ea91b53d766abb00a9c3c1ea5c",
        "patch": "@@ -104,8 +104,6 @@ FUZZ_TARGETS = \\\n   test/fuzz/script \\\n   test/fuzz/script_deserialize \\\n   test/fuzz/script_flags \\\n-  test/fuzz/script_ops \\\n-  test/fuzz/scriptnum_ops \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/signature_checker \\\n   test/fuzz/snapshotmetadata_deserialize \\\n@@ -893,17 +891,18 @@ test_fuzz_script_flags_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_flags_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_script_flags_SOURCES = test/fuzz/script_flags.cpp\n \n-test_fuzz_script_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_script_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_script_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-test_fuzz_script_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_script_ops_SOURCES = test/fuzz/script_ops.cpp\n-\n-test_fuzz_scriptnum_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_scriptnum_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_scriptnum_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-test_fuzz_scriptnum_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_scriptnum_ops_SOURCES = test/fuzz/scriptnum_ops.cpp\n+# Disabled for now, as #18413 has not been backported.\n+# test_fuzz_script_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+# test_fuzz_script_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+# test_fuzz_script_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+# test_fuzz_script_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+# test_fuzz_script_ops_SOURCES = test/fuzz/script_ops.cpp\n+\n+# test_fuzz_scriptnum_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+# test_fuzz_scriptnum_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+# test_fuzz_scriptnum_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+# test_fuzz_scriptnum_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+# test_fuzz_scriptnum_ops_SOURCES = test/fuzz/scriptnum_ops.cpp\n \n test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      }
    ]
  }
]