[
  {
    "sha": "eeee42c620e37e0362982e3ad8d910e181209eba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWVlNDJjNjIwZTM3ZTAzNjI5ODJlM2FkOGQ5MTBlMTgxMjA5ZWJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-27T23:30:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-28T23:04:58Z"
      },
      "message": "qa: Combine logs on travis by default",
      "tree": {
        "sha": "60166efaee84b5b23abd13b69957e1d6f5edefc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60166efaee84b5b23abd13b69957e1d6f5edefc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeee42c620e37e0362982e3ad8d910e181209eba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeee42c620e37e0362982e3ad8d910e181209eba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeee42c620e37e0362982e3ad8d910e181209eba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeee42c620e37e0362982e3ad8d910e181209eba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a89221873a3ee2451c73b41bbe2d99d36f439d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a89221873a3ee2451c73b41bbe2d99d36f439d31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a89221873a3ee2451c73b41bbe2d99d36f439d31"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 29,
      "deletions": 26
    },
    "files": [
      {
        "sha": "77fe5868db7fbd7a5e28a7a5c898a253512198ad",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeee42c620e37e0362982e3ad8d910e181209eba/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeee42c620e37e0362982e3ad8d910e181209eba/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=eeee42c620e37e0362982e3ad8d910e181209eba",
        "patch": "@@ -18,7 +18,6 @@ env:\n     - CCACHE_COMPRESS=1\n     - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n     - SDK_URL=https://bitcoincore.org/depends-sources/sdks\n-    - PYTHON_DEBUG=1\n     - WINEDEBUG=fixme-all\n   matrix:\n # ARM"
      },
      {
        "sha": "cd8b236af70de715d11950a286541190cd9b239c",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeee42c620e37e0362982e3ad8d910e181209eba/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeee42c620e37e0362982e3ad8d910e181209eba/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=eeee42c620e37e0362982e3ad8d910e181209eba",
        "patch": "@@ -5,7 +5,7 @@\n to write to an outputfile.\"\"\"\n \n import argparse\n-from collections import defaultdict, namedtuple\n+from collections import defaultdict, namedtuple, deque\n import heapq\n import itertools\n import os\n@@ -38,9 +38,13 @@ def main():\n         print(\"Unexpected arguments\" + str(unknown_args))\n         sys.exit(1)\n \n-    log_events = read_logs(unknown_args[0])\n+    combine_logs(dir_test=unknown_args[0], use_color=args.color, use_html=args.html)\n+\n+\n+def combine_logs(dir_test, use_color=False, use_html=False, max_lines_to_print=None):\n+    log_events = read_logs(dir_test)\n+    print_logs(log_events, use_color, use_html, max_lines_to_print)\n \n-    print_logs(log_events, color=args.color, html=args.html)\n \n def read_logs(tmp_dir):\n     \"\"\"Reads log files.\n@@ -85,8 +89,10 @@ def get_log_events(source, logfile):\n     except FileNotFoundError:\n         print(\"File %s could not be opened. Continuing without it.\" % logfile, file=sys.stderr)\n \n-def print_logs(log_events, color=False, html=False):\n+\n+def print_logs(log_events, color, html, max_lines_to_print):\n     \"\"\"Renders the iterator of log events into text or html.\"\"\"\n+    log_events = deque(log_events, max_lines_to_print)\n     if not html:\n         colors = defaultdict(lambda: '')\n         if color:"
      },
      {
        "sha": "54fe6896860011eda26591f9309250523b34bdf5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 20,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeee42c620e37e0362982e3ad8d910e181209eba/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeee42c620e37e0362982e3ad8d910e181209eba/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=eeee42c620e37e0362982e3ad8d910e181209eba",
        "patch": "@@ -4,7 +4,6 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Base class for RPC testing.\"\"\"\n \n-from collections import deque\n from enum import Enum\n import logging\n import optparse\n@@ -149,32 +148,19 @@ def main(self):\n             shutil.rmtree(self.options.tmpdir)\n         else:\n             self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n-            if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                # Dump the end of the debug logs, to aid in debugging rare\n-                # travis failures.\n-                import glob\n-                filenames = [self.options.tmpdir + \"/test_framework.log\"]\n-                filenames += glob.glob(self.options.tmpdir + \"/node*/regtest/debug.log\")\n-                MAX_LINES_TO_PRINT = 1000\n-                for fn in filenames:\n-                    try:\n-                        with open(fn, 'r') as f:\n-                            print(\"From\", fn, \":\")\n-                            print(\"\".join(deque(f, MAX_LINES_TO_PRINT)))\n-                    except OSError:\n-                        print(\"Opening file %s failed.\" % fn)\n-                        traceback.print_exc()\n \n         if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")\n-            sys.exit(TEST_EXIT_PASSED)\n+            exit_code = TEST_EXIT_PASSED\n         elif success == TestStatus.SKIPPED:\n             self.log.info(\"Test skipped\")\n-            sys.exit(TEST_EXIT_SKIPPED)\n+            exit_code = TEST_EXIT_SKIPPED\n         else:\n             self.log.error(\"Test failed. Test logging available at %s/test_framework.log\", self.options.tmpdir)\n-            logging.shutdown()\n-            sys.exit(TEST_EXIT_FAILED)\n+            self.log.error(\"Hint: Call {} '{}' to consolidate all logs\".format(os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../combine_logs.py\"), self.options.tmpdir))\n+            exit_code = TEST_EXIT_FAILED\n+        logging.shutdown()\n+        sys.exit(exit_code)\n \n     # Methods to override in subclass test scripts.\n     def set_test_params(self):"
      },
      {
        "sha": "5c3c3cafbdcc46d4f313dc64b17481da86c364ac",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeee42c620e37e0362982e3ad8d910e181209eba/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeee42c620e37e0362982e3ad8d910e181209eba/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=eeee42c620e37e0362982e3ad8d910e181209eba",
        "patch": "@@ -299,7 +299,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n         coverage = None\n \n     if len(test_list) > 1 and jobs > 1:\n-        # Populate cache\n+        # Need to pre-populate cache when running multiple tests in parallel\n         try:\n             subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n         except Exception as e:\n@@ -337,6 +337,18 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     # Clear up the temp directory if all subdirectories are gone\n     if not os.listdir(tmpdir):\n         os.rmdir(tmpdir)\n+    elif os.getenv(\"TRAVIS\", \"\") == \"true\":\n+        # Print the logs on travis, so they are preserved when the vm is disposed\n+        LINES_PRINT_TRAVIS = 4000\n+        print('\\n{}Combine the logs and print the last {} lines ...\\n{}'.format(BOLD[1], LINES_PRINT_TRAVIS, BOLD[0]))\n+        from combine_logs import combine_logs\n+        for entry in os.listdir(tmpdir):\n+            entry = os.path.join(tmpdir, entry)\n+            if os.path.isdir(entry):\n+                print('\\n============')\n+                print('{}Combined log for {}:{}'.format(BOLD[1], entry, BOLD[0]))\n+                print('============\\n')\n+                combine_logs(dir_test=entry, use_color=True, max_lines_to_print=LINES_PRINT_TRAVIS)\n \n     all_passed = all(map(lambda test_result: test_result.was_successful, test_results))\n "
      }
    ]
  }
]