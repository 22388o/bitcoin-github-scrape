[
  {
    "sha": "cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDNkNjdjZjNiMGQ1NzNkMmMzODdjMmVjMzVlOGI1MjEyOTg2M2Q5",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-12T20:03:23Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-03-13T17:11:11Z"
      },
      "message": "Fix InvalidateBlock to add chainActive.Tip to setBlockIndexCandidates",
      "tree": {
        "sha": "b9c8a454b4c9fbd8c0d3dc5df17b2cde3ddb0256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9c8a454b4c9fbd8c0d3dc5df17b2cde3ddb0256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7077fe6dd4208bdbd46940f7923b7d89202c3287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7077fe6dd4208bdbd46940f7923b7d89202c3287"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 28,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ccfcf00e30e286498700e8396b0351ddf6073752",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
        "patch": "@@ -16,15 +16,17 @@ class InvalidateTest(BitcoinTestFramework):\n         \n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n-        initialize_chain_clean(self.options.tmpdir, 2)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n                  \n     def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False \n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n         self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n         \n     def run_test(self):\n+        print \"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\"\n         print \"Mine 4 blocks on Node 0\"\n         self.nodes[0].setgenerate(True, 4)\n         assert(self.nodes[0].getblockcount() == 4)\n@@ -36,7 +38,7 @@ def run_test(self):\n \n         print \"Connect nodes to force a reorg\"\n         connect_nodes_bi(self.nodes,0,1)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:2])\n         assert(self.nodes[0].getblockcount() == 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n@@ -47,5 +49,28 @@ def run_test(self):\n         if (newheight != 4 or newhash != besthash):\n             raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n \n+        print \"\\nMake sure we won't reorg to a lower work chain:\"\n+        connect_nodes_bi(self.nodes,1,2)\n+        print \"Sync node 2 to node 1 so both have 6 blocks\"\n+        sync_blocks(self.nodes[1:3])\n+        assert(self.nodes[2].getblockcount() == 6)\n+        print \"Invalidate block 5 on node 1 so its tip is now at 4\"\n+        self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n+        assert(self.nodes[1].getblockcount() == 4)\n+        print \"Invalidate block 3 on node 2, so its tip is now 2\"\n+        self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n+        assert(self.nodes[2].getblockcount() == 2)\n+        print \"..and then mine a block\"\n+        self.nodes[2].setgenerate(True, 1)\n+        print \"Verify all nodes are at the right height\"\n+        time.sleep(5)\n+        for i in xrange(3):\n+            print i,self.nodes[i].getblockcount()\n+        assert(self.nodes[2].getblockcount() == 3)\n+        assert(self.nodes[0].getblockcount() == 4)\n+        node1height = self.nodes[1].getblockcount()\n+        if node1height < 4:\n+            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+\n if __name__ == '__main__':\n     InvalidateTest().main()"
      },
      {
        "sha": "5207f608969831d289fefe85d34d4bdb6bec4367",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd3d67cf3b0d573d2c387c2ec35e8b52129863d9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cd3d67cf3b0d573d2c387c2ec35e8b52129863d9",
        "patch": "@@ -2310,7 +2310,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n     // add them again.\n     BlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n+        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n             setBlockIndexCandidates.insert(it->second);\n         }\n         it++;"
      }
    ]
  }
]