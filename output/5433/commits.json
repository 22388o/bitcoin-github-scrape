[
  {
    "sha": "7357c1ad7094b595b97ab60d0ada00f6204189a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzU3YzFhZDcwOTRiNTk1Yjk3YWI2MGQwYWRhMDBmNjIwNDE4OWE5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-22T01:45:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-22T01:58:14Z"
      },
      "message": "Make mempool-removed tracking much more explicit\n\n...with comments and a new signal to wallets",
      "tree": {
        "sha": "3692fa940a9139db6ee3a56ce7f1b1a81848848d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3692fa940a9139db6ee3a56ce7f1b1a81848848d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7357c1ad7094b595b97ab60d0ada00f6204189a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7357c1ad7094b595b97ab60d0ada00f6204189a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7357c1ad7094b595b97ab60d0ada00f6204189a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7357c1ad7094b595b97ab60d0ada00f6204189a9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49793fbb097e9f00149a054adeddad07f0444c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49793fbb097e9f00149a054adeddad07f0444c12"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 44,
      "deletions": 17
    },
    "files": [
      {
        "sha": "a93e08e8c73131754b106c55d048fcd23463022d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "patch": "@@ -2035,7 +2035,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Resurrect mempool transactions from the disconnected block.\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n         // ignore validation errors in resurrected transactions\n-        list<CTransaction> removed;\n+        list<uint256> removed;\n         CValidationState stateDummy;\n         if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n             mempool.remove(tx, removed, true);\n@@ -2099,20 +2099,22 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CB\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(\"bench\", \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n     // Remove conflicting transactions from the mempool.\n-    list<CTransaction> txConflicted;\n+    list<uint256> txConflicted;\n     mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n     mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n-    BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n-        SyncWithWallets(tx, NULL);\n+    BOOST_FOREACH(const uint256 &txhash, txConflicted) {\n+        GetMainSignals().TransactionConflicted(txhash);\n     }\n     // ... and about transactions that got confirmed:\n     BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n         SyncWithWallets(tx, pblock);\n     }\n+    // ... note that the above two loops must be atomic with the cs_main lock held,\n+    // see comment in CWallet::TransactionConflicted\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(\"bench\", \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);"
      },
      {
        "sha": "478253bad71d67b54a74233383002b1fc1c75282",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "patch": "@@ -52,7 +52,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n \n \n     CTxMemPool testPool(CFeeRate(0));\n-    std::list<CTransaction> removed;\n+    std::list<uint256> removed;\n \n     // Nothing in pool, remove should do nothing:\n     testPool.remove(txParent, removed, true);"
      },
      {
        "sha": "ac1a6d8d26fbf53c935222bfb5d62d8b88f29b61",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "patch": "@@ -44,7 +44,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     for (unsigned int i = 0; i < 128; i++)\n         garbage.push_back('X');\n     CMutableTransaction tx;\n-    std::list<CTransaction> dummyConflicted;\n+    std::list<uint256> dummyConflicted;\n     tx.vin.resize(1);\n     tx.vin[0].scriptSig = garbage;\n     tx.vout.resize(1);"
      },
      {
        "sha": "26ce7ed177bba03a3ea80ab8a680f333fa9ac7a6",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "patch": "@@ -109,7 +109,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n }\n \n \n-void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& removed, bool fRecursive)\n+void CTxMemPool::remove(const CTransaction &origTx, std::list<uint256>& removed, bool fRecursive)\n {\n     // Remove transaction from memory pool\n     {\n@@ -146,7 +146,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n                 mapNextTx.erase(txin.prevout);\n \n-            removed.push_back(tx);\n+            removed.push_back(hash);\n             totalTxSize -= mapTx[hash].GetTxSize();\n             cachedInnerUsage -= mapTx[hash].DynamicMemoryUsage();\n             mapTx.erase(hash);\n@@ -176,12 +176,12 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n         }\n     }\n     BOOST_FOREACH(const CTransaction& tx, transactionsToRemove) {\n-        list<CTransaction> removed;\n+        list<uint256> removed;\n         remove(tx, removed, true);\n     }\n }\n \n-void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n+void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<uint256>& removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     list<CTransaction> result;\n@@ -202,7 +202,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n  * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                                std::list<CTransaction>& conflicts, bool fCurrentEstimate)\n+                                std::list<uint256>& conflicts, bool fCurrentEstimate)\n {\n     LOCK(cs);\n     std::vector<CTxMemPoolEntry> entries;\n@@ -214,7 +214,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     }\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n     {\n-        std::list<CTransaction> dummy;\n+        std::list<uint256> dummy;\n         remove(tx, dummy, false);\n         removeConflicts(tx, conflicts);\n         ClearPrioritisation(tx.GetHash());"
      },
      {
        "sha": "4dca2b7c8a085ce3c8c7a78083a06a34c25792e8",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "patch": "@@ -117,11 +117,11 @@ class CTxMemPool\n     void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate = true);\n-    void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n+    void remove(const CTransaction &tx, std::list<uint256>& removed, bool fRecursive = false);\n     void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n-    void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n+    void removeConflicts(const CTransaction &tx, std::list<uint256>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                        std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);\n+                        std::list<uint256>& conflicts, bool fCurrentEstimate = true);\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);"
      },
      {
        "sha": "870de3270010570c1353d7c03f9fe4acd4c8ff22",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "patch": "@@ -14,6 +14,7 @@ CMainSignals& GetMainSignals()\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n+    g_signals.TransactionConflicted.connect(boost::bind(&CValidationInterface::TransactionConflicted, pwalletIn, _1));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n@@ -31,6 +32,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n+    g_signals.TransactionConflicted.disconnect(boost::bind(&CValidationInterface::TransactionConflicted, pwalletIn, _1));\n     g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2));\n }\n \n@@ -42,6 +44,7 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.Inventory.disconnect_all_slots();\n     g_signals.SetBestChain.disconnect_all_slots();\n     g_signals.UpdatedTransaction.disconnect_all_slots();\n+    g_signals.TransactionConflicted.disconnect_all_slots();\n     g_signals.SyncTransaction.disconnect_all_slots();\n }\n "
      },
      {
        "sha": "d85744a713879b3d396e7098905d84e334ba45fc",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "patch": "@@ -31,6 +31,7 @@ void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n class CValidationInterface {\n protected:\n     virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) {}\n+    virtual void TransactionConflicted(const uint256& txHash) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -44,8 +45,10 @@ class CValidationInterface {\n };\n \n struct CMainSignals {\n-    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n+    /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in). */\n     boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n+    /** Notifies listeners of transaction invalidated by a double-spend (transaction hash) */\n+    boost::signals2::signal<void (const uint256 &)> TransactionConflicted;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "1b695b050d3259308da0974c432d665fd83ec527",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "patch": "@@ -771,6 +771,25 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n     return false;\n }\n \n+void CWallet::TransactionConflicted(const uint256& txid)\n+{\n+    // When a transaction becomes conflicted, we simply have to mark it dirty\n+    // so that any cached balances get recalculated.\n+    // Note that it is critical that main.cpp holds the cs_main lock for all\n+    // TransactionConflicted and all SyncTransaction calls for a single\n+    // connect event, otherwise a poorly-timed getbalance call might break\n+    // the balance caching logic\n+    LOCK2(cs_main, cs_wallet);\n+    if (mapWallet.count(txid)) {\n+        mapWallet[txid].MarkDirty();\n+        BOOST_FOREACH(const CTxIn& txin, mapWallet[txid].vin)\n+        {\n+            if (mapWallet.count(txin.prevout.hash))\n+                mapWallet[txin.prevout.hash].MarkDirty();\n+        }\n+    }\n+}\n+\n void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n {\n     LOCK2(cs_main, cs_wallet);"
      },
      {
        "sha": "434c14becb91faee73569f25fe52009f7a0b8a74",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7357c1ad7094b595b97ab60d0ada00f6204189a9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "patch": "@@ -305,7 +305,6 @@ class CWalletTx : public CMerkleTx\n             mapValue[\"fromaccount\"] = strFromAccount;\n \n             WriteOrderPos(nOrderPos, mapValue);\n-\n             if (nTimeSmart)\n                 mapValue[\"timesmart\"] = strprintf(\"%u\", nTimeSmart);\n         }\n@@ -616,6 +615,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb);\n     void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n+    void TransactionConflicted(const uint256& txid);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();"
      }
    ]
  },
  {
    "sha": "423abaa453c28fb88cc12e59fea73680ff179020",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjNhYmFhNDUzYzI4ZmI4OGNjMTJlNTlmZWE3MzY4MGZmMTc5MDIw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-12-06T08:27:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-22T01:58:14Z"
      },
      "message": "Add conflicted-txn python test",
      "tree": {
        "sha": "7e754f3570829f5938bdfe79da0c466b736b4756",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e754f3570829f5938bdfe79da0c466b736b4756"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/423abaa453c28fb88cc12e59fea73680ff179020",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/423abaa453c28fb88cc12e59fea73680ff179020",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/423abaa453c28fb88cc12e59fea73680ff179020",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/423abaa453c28fb88cc12e59fea73680ff179020/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7357c1ad7094b595b97ab60d0ada00f6204189a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7357c1ad7094b595b97ab60d0ada00f6204189a9"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 134,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ddcbd753e0c39376ef0edf9ec070564836d3c03",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/423abaa453c28fb88cc12e59fea73680ff179020/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/423abaa453c28fb88cc12e59fea73680ff179020/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=423abaa453c28fb88cc12e59fea73680ff179020",
        "patch": "@@ -26,6 +26,7 @@ testScripts=(\n     'rest.py'\n     'mempool_spendcoinbase.py'\n     'mempool_coinbase_spends.py'\n+    'conflicted_txn.py'\n     'httpbasics.py'\n     'zapwallettxes.py'\n     'proxy_test.py'"
      },
      {
        "sha": "4ef58530014b5a01d110b110eea741f21d531286",
        "filename": "qa/rpc-tests/conflicted_txn.py",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/423abaa453c28fb88cc12e59fea73680ff179020/qa/rpc-tests/conflicted_txn.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/423abaa453c28fb88cc12e59fea73680ff179020/qa/rpc-tests/conflicted_txn.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/conflicted_txn.py?ref=423abaa453c28fb88cc12e59fea73680ff179020",
        "patch": "@@ -0,0 +1,133 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+\n+class RemoveTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[1], 2)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print(\"Mining blocks...\")\n+        self.nodes[2].setgenerate(True, 105)\n+        self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 11)\n+        self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 42)\n+        self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 15)\n+        self.nodes[2].setgenerate(True)\n+        self.sync_all()\n+\n+        node1utxos = self.nodes[1].listunspent(1)\n+\n+        utxo = node1utxos.pop()\n+        utxo2 = node1utxos.pop()\n+        txto1_1_raw = self.nodes[1].createrawtransaction([{\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]}, {\"txid\": utxo2[\"txid\"], \"vout\": utxo2[\"vout\"]}], {self.nodes[1].getnewaddress(): utxo[\"amount\"] + utxo2[\"amount\"]})\n+        txto1_1_raw = self.nodes[1].signrawtransaction(txto1_1_raw)[\"hex\"]\n+        txto1_1_hash = self.nodes[1].sendrawtransaction(txto1_1_raw)\n+\n+        utxo3 = node1utxos.pop()\n+        txto1_2_addr = self.nodes[1].getnewaddress()\n+        txto1_2_raw = self.nodes[1].createrawtransaction([{\"txid\": txto1_1_hash, \"vout\": 0}, {\"txid\": utxo3[\"txid\"], \"vout\": utxo3[\"vout\"]}], {txto1_2_addr: utxo[\"amount\"], self.nodes[1].getnewaddress(): utxo2[\"amount\"], self.nodes[2].getnewaddress(): utxo3[\"amount\"]})\n+        txto1_2_raw = self.nodes[1].signrawtransaction(txto1_2_raw)[\"hex\"]\n+        txto1_2_hash = self.nodes[1].sendrawtransaction(txto1_2_raw)\n+\n+        txto1_2_vout = 0 if self.nodes[1].getrawtransaction(txto1_2_hash, 1)[\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0] == txto1_2_addr else 1\n+        txto1_2_vout = txto1_2_vout if self.nodes[1].getrawtransaction(txto1_2_hash, 1)[\"vout\"][2][\"scriptPubKey\"][\"addresses\"][0] != txto1_2_addr else 2\n+        txto0_1_raw = self.nodes[1].createrawtransaction([{\"txid\": txto1_2_hash, \"vout\": txto1_2_vout}], {self.nodes[0].getnewaddress(): utxo[\"amount\"]})\n+        txto0_1_raw = self.nodes[1].signrawtransaction(txto0_1_raw)[\"hex\"]\n+        txto0_1_hash = self.nodes[1].sendrawtransaction(txto0_1_raw, True)\n+\n+        self.sync_all()\n+\n+        txto0_2_raw = self.nodes[0].createrawtransaction([{\"txid\": txto0_1_hash, \"vout\": 0}], {self.nodes[0].getnewaddress(): utxo[\"amount\"] - 1, self.nodes[1].getnewaddress(): 1})\n+        txto0_2_raw = self.nodes[0].signrawtransaction(txto0_2_raw)[\"hex\"]\n+        txto0_2_hash = self.nodes[0].sendrawtransaction(txto0_2_raw)\n+\n+        self.sync_all()\n+        # txto0_2_raw should be untrusted as it depends on untrusted, unconfirmed inputs\n+        #XXX: assert_equal(self.nodes[0].getbalance(), 0)\n+        #XXX: assert_equal(self.nodes[0].getunconfirmedbalance(), utxo[\"amount\"] - 1)\n+        assert_equal(self.nodes[1].getbalance(), utxo2[\"amount\"])\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), 1)\n+\n+        stop_node(self.nodes[0],0)\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\"])\n+        stop_node(self.nodes[1],1)\n+        self.nodes[1] = start_node(1, self.options.tmpdir, [\"-debug\"])\n+        stop_node(self.nodes[2],2)\n+        self.nodes[2] = start_node(2, self.options.tmpdir, [\"-debug\"])\n+\n+        self.nodes[0].getbalance()\n+        self.nodes[0].getunconfirmedbalance()\n+        self.nodes[1].getbalance()\n+        self.nodes[1].getunconfirmedbalance()\n+\n+        txto1_1_ds_node2_addr = self.nodes[2].getnewaddress()\n+        txto1_1_ds_raw = self.nodes[1].createrawtransaction([{\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]}, {\"txid\": utxo3[\"txid\"], \"vout\": utxo3[\"vout\"]}], {self.nodes[1].getnewaddress(): utxo[\"amount\"], txto1_1_ds_node2_addr: utxo3[\"amount\"]})\n+        txto1_1_ds_raw = self.nodes[1].signrawtransaction(txto1_1_ds_raw)[\"hex\"]\n+        txto1_1_ds_hash = self.nodes[2].sendrawtransaction(txto1_1_ds_raw)\n+        self.nodes[2].setgenerate(True)\n+\n+        connect_nodes(self.nodes[1], 2)\n+        connect_nodes(self.nodes[0], 1)\n+        self.sync_all()\n+\n+        # We are now entirely conflicted and have no spendable outputs\n+        assert_equal(self.nodes[0].getbalance(), 0)\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), 0)\n+        assert_equal(self.nodes[0].gettransaction(txto0_1_hash)[\"confirmations\"], -1)\n+        assert_equal(self.nodes[0].gettransaction(txto0_2_hash)[\"confirmations\"], -1)\n+\n+        assert_equal(self.nodes[1].getbalance(), utxo[\"amount\"] + utxo2[\"amount\"])\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), 0)\n+\n+        stop_node(self.nodes[2],2)\n+        self.nodes[2] = start_node(2, self.options.tmpdir, [\"-debug\"])\n+\n+        txto1_1_ds_vout = 1 if self.nodes[1].getrawtransaction(txto1_1_ds_hash, 1)[\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0] == txto1_1_ds_node2_addr else 0\n+        txto0_3_raw = self.nodes[1].createrawtransaction([{\"txid\": txto1_1_ds_hash, \"vout\": txto1_1_ds_vout}], {self.nodes[0].getnewaddress(): utxo[\"amount\"]})\n+        txto0_3_raw = self.nodes[1].signrawtransaction(txto0_3_raw)[\"hex\"]\n+        txto0_3_ds_raw = self.nodes[1].createrawtransaction([{\"txid\": txto1_1_ds_hash, \"vout\": txto1_1_ds_vout}], {self.nodes[1].getnewaddress(): utxo[\"amount\"]})\n+        txto0_3_ds_raw = self.nodes[1].signrawtransaction(txto0_3_ds_raw)[\"hex\"]\n+\n+        txto0_3_hash = self.nodes[1].sendrawtransaction(txto0_3_raw)\n+        self.nodes[1].setgenerate(True)\n+\n+        assert_equal(self.nodes[1].getbalance(), utxo2[\"amount\"])\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), 0)\n+\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n+        txto1_3_hash = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        #self.nodes[0].setgenerate(True)\n+        assert(self.nodes[0].getbalance() > utxo[\"amount\"] - 2 and self.nodes[0].getbalance() < utxo[\"amount\"] - 1)\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), 0)\n+\n+        txto0_3_ds_hash = self.nodes[2].sendrawtransaction(txto0_3_ds_raw)\n+        self.nodes[2].setgenerate(True, 2)\n+\n+        connect_nodes(self.nodes[1], 2)\n+        self.sync_all()\n+\n+        # We are now entirely conflicted and have no spendable outputs\n+        assert_equal(self.nodes[0].getbalance(), 0)\n+        assert_equal(self.nodes[0].getunconfirmedbalance(), 0)\n+        assert_equal(self.nodes[0].gettransaction(txto0_3_hash)[\"confirmations\"], -1)\n+        assert_equal(self.nodes[0].gettransaction(txto1_3_hash)[\"confirmations\"], -1)\n+\n+        assert_equal(self.nodes[1].getbalance(), utxo[\"amount\"] + utxo2[\"amount\"])\n+        assert_equal(self.nodes[1].getunconfirmedbalance(), 0)\n+\n+\n+if __name__ == '__main__':\n+    RemoveTest().main ()"
      }
    ]
  },
  {
    "sha": "85f11ed248adb48d898bf6f43a22270137f02a49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWYxMWVkMjQ4YWRiNDhkODk4YmY2ZjQzYTIyMjcwMTM3ZjAyYTQ5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-28T19:50:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-28T20:46:45Z"
      },
      "message": "Fix test to use new framework updates",
      "tree": {
        "sha": "3159f577039def9d4a830f3d175c260a48ab4e63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3159f577039def9d4a830f3d175c260a48ab4e63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85f11ed248adb48d898bf6f43a22270137f02a49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85f11ed248adb48d898bf6f43a22270137f02a49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85f11ed248adb48d898bf6f43a22270137f02a49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85f11ed248adb48d898bf6f43a22270137f02a49/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "423abaa453c28fb88cc12e59fea73680ff179020",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/423abaa453c28fb88cc12e59fea73680ff179020",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/423abaa453c28fb88cc12e59fea73680ff179020"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a765bc5b77463bef0fc9dab7d068a2a3aff9496c",
        "filename": "qa/rpc-tests/conflicted_txn.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85f11ed248adb48d898bf6f43a22270137f02a49/qa/rpc-tests/conflicted_txn.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85f11ed248adb48d898bf6f43a22270137f02a49/qa/rpc-tests/conflicted_txn.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/conflicted_txn.py?ref=85f11ed248adb48d898bf6f43a22270137f02a49",
        "patch": "@@ -4,28 +4,28 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n \n-from test_framework import BitcoinTestFramework\n-from util import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n \n class RemoveTest(BitcoinTestFramework):\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 3)\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.nodes = start_nodes(3, self.options.tmpdir, [[\"-relaypriority=false\"], [\"-relaypriority=false\"], [\"-relaypriority=false\"]])\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n         self.is_network_split = False\n         self.sync_all()\n \n     def run_test (self):\n         print(\"Mining blocks...\")\n-        self.nodes[2].setgenerate(True, 105)\n+        self.nodes[2].generate(105)\n         self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 11)\n         self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 42)\n         self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 15)\n-        self.nodes[2].setgenerate(True)\n+        self.nodes[2].generate(1)\n         self.sync_all()\n \n         node1utxos = self.nodes[1].listunspent(1)\n@@ -62,11 +62,11 @@ def run_test (self):\n         assert_equal(self.nodes[1].getunconfirmedbalance(), 1)\n \n         stop_node(self.nodes[0],0)\n-        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\"])\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-relaypriority=false\"])\n         stop_node(self.nodes[1],1)\n-        self.nodes[1] = start_node(1, self.options.tmpdir, [\"-debug\"])\n+        self.nodes[1] = start_node(1, self.options.tmpdir, [\"-debug\", \"-relaypriority=false\"])\n         stop_node(self.nodes[2],2)\n-        self.nodes[2] = start_node(2, self.options.tmpdir, [\"-debug\"])\n+        self.nodes[2] = start_node(2, self.options.tmpdir, [\"-debug\", \"-relaypriority=false\"])\n \n         self.nodes[0].getbalance()\n         self.nodes[0].getunconfirmedbalance()\n@@ -77,7 +77,7 @@ def run_test (self):\n         txto1_1_ds_raw = self.nodes[1].createrawtransaction([{\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]}, {\"txid\": utxo3[\"txid\"], \"vout\": utxo3[\"vout\"]}], {self.nodes[1].getnewaddress(): utxo[\"amount\"], txto1_1_ds_node2_addr: utxo3[\"amount\"]})\n         txto1_1_ds_raw = self.nodes[1].signrawtransaction(txto1_1_ds_raw)[\"hex\"]\n         txto1_1_ds_hash = self.nodes[2].sendrawtransaction(txto1_1_ds_raw)\n-        self.nodes[2].setgenerate(True)\n+        self.nodes[2].generate(1)\n \n         connect_nodes(self.nodes[1], 2)\n         connect_nodes(self.nodes[0], 1)\n@@ -93,7 +93,7 @@ def run_test (self):\n         assert_equal(self.nodes[1].getunconfirmedbalance(), 0)\n \n         stop_node(self.nodes[2],2)\n-        self.nodes[2] = start_node(2, self.options.tmpdir, [\"-debug\"])\n+        self.nodes[2] = start_node(2, self.options.tmpdir, [\"-debug\", \"-relaypriority=false\"])\n \n         txto1_1_ds_vout = 1 if self.nodes[1].getrawtransaction(txto1_1_ds_hash, 1)[\"vout\"][0][\"scriptPubKey\"][\"addresses\"][0] == txto1_1_ds_node2_addr else 0\n         txto0_3_raw = self.nodes[1].createrawtransaction([{\"txid\": txto1_1_ds_hash, \"vout\": txto1_1_ds_vout}], {self.nodes[0].getnewaddress(): utxo[\"amount\"]})\n@@ -102,19 +102,19 @@ def run_test (self):\n         txto0_3_ds_raw = self.nodes[1].signrawtransaction(txto0_3_ds_raw)[\"hex\"]\n \n         txto0_3_hash = self.nodes[1].sendrawtransaction(txto0_3_raw)\n-        self.nodes[1].setgenerate(True)\n+        self.nodes[1].generate(1)\n \n         assert_equal(self.nodes[1].getbalance(), utxo2[\"amount\"])\n         assert_equal(self.nodes[1].getunconfirmedbalance(), 0)\n \n         sync_blocks([self.nodes[0], self.nodes[1]])\n         txto1_3_hash = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        #self.nodes[0].setgenerate(True)\n+        #self.nodes[0].generate(1)\n         assert(self.nodes[0].getbalance() > utxo[\"amount\"] - 2 and self.nodes[0].getbalance() < utxo[\"amount\"] - 1)\n         assert_equal(self.nodes[0].getunconfirmedbalance(), 0)\n \n         txto0_3_ds_hash = self.nodes[2].sendrawtransaction(txto0_3_ds_raw)\n-        self.nodes[2].setgenerate(True, 2)\n+        self.nodes[2].generate(2)\n \n         connect_nodes(self.nodes[1], 2)\n         self.sync_all()"
      }
    ]
  }
]