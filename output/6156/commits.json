[
  {
    "sha": "8afc59867be9cadb17fbd752d908957e5476ec39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWZjNTk4NjdiZTljYWRiMTdmYmQ3NTJkOTA4OTU3ZTU0NzZlYzM5",
    "commit": {
      "author": {
        "name": "Shawn Wilkinson",
        "email": "me@super3.org",
        "date": "2015-05-18T18:12:50Z"
      },
      "committer": {
        "name": "Shawn Wilkinson",
        "email": "me@super3.org",
        "date": "2015-05-18T18:12:50Z"
      },
      "message": "Various PEP8 Fixes",
      "tree": {
        "sha": "54e5ee1ae5bb63ebafe6e03c0f1f67345a5ad9bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54e5ee1ae5bb63ebafe6e03c0f1f67345a5ad9bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8afc59867be9cadb17fbd752d908957e5476ec39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8afc59867be9cadb17fbd752d908957e5476ec39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8afc59867be9cadb17fbd752d908957e5476ec39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8afc59867be9cadb17fbd752d908957e5476ec39/comments",
    "author": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "super3",
      "id": 60975,
      "node_id": "MDQ6VXNlcjYwOTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/60975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/super3",
      "html_url": "https://github.com/super3",
      "followers_url": "https://api.github.com/users/super3/followers",
      "following_url": "https://api.github.com/users/super3/following{/other_user}",
      "gists_url": "https://api.github.com/users/super3/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/super3/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/super3/subscriptions",
      "organizations_url": "https://api.github.com/users/super3/orgs",
      "repos_url": "https://api.github.com/users/super3/repos",
      "events_url": "https://api.github.com/users/super3/events{/privacy}",
      "received_events_url": "https://api.github.com/users/super3/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26e08a16a6fb64b535d10f5d459183092deefa50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26e08a16a6fb64b535d10f5d459183092deefa50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26e08a16a6fb64b535d10f5d459183092deefa50"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 36,
      "deletions": 30
    },
    "files": [
      {
        "sha": "85722e9e519134a1847c1e71a1e8fc0d6fb49454",
        "filename": "contrib/bitrpc/bitrpc.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/bitrpc/bitrpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/bitrpc/bitrpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitrpc/bitrpc.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -255,9 +255,9 @@\n         mc = raw_input(\"Minimum confirmations (optional): \")\n         comment = raw_input(\"Comment (optional): \")\n         try:\n-            print access.sendmany(frm,to,mc,comment)\n+            print access.sendmany(frm, to, mc, comment)\n         except:\n-            print access.sendmany(frm,to)\n+            print access.sendmany(frm, to)\n     except Exception as inst:\n         print inst\n \n@@ -268,17 +268,17 @@\n         comment = raw_input(\"Comment (optional): \")\n         commentto = raw_input(\"Comment-to (optional): \")\n         try:\n-            print access.sendtoaddress(to,amt,comment,commentto)\n+            print access.sendtoaddress(to, amt, comment, commentto)\n         except:\n-            print access.sendtoaddress(to,amt)\n+            print access.sendtoaddress(to, amt)\n     except Exception as inst:\n         print inst\n \n elif cmd == \"setaccount\":\n     try:\n         addr = raw_input(\"Address: \")\n         acct = raw_input(\"Account:\")\n-        print access.setaccount(addr,acct)\n+        print access.setaccount(addr, acct)\n     except Exception as inst:\n         print inst\n "
      },
      {
        "sha": "82037f5ea5ae802fd72089fa4a9d39306f30f498",
        "filename": "contrib/devtools/fix-copyright-headers.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/devtools/fix-copyright-headers.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/devtools/fix-copyright-headers.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/fix-copyright-headers.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -25,7 +25,7 @@\n command = \"perl -pi -e 's/%s The Bitcoin/%s The Bitcoin/' %s\"\n listFilesCommand = \"find . | grep %s\"\n \n-extensions = [\".cpp\",\".h\"]\n+extensions = [\".cpp\", \".h\"]\n \n def getLastGitModifiedDate(filePath):\n   gitGetLastCommitDateCommand = \"git log \" + filePath +\" | grep Date | head -n 1\"\n@@ -34,7 +34,7 @@ def getLastGitModifiedDate(filePath):\n   for l in p:\n     result = l\n     break\n-  result = result.replace(\"\\n\",\"\")\n+  result = result.replace(\"\\n\", \"\")\n   return result\n \n n=1\n@@ -46,8 +46,8 @@ def getLastGitModifiedDate(filePath):\n       filePath = os.getcwd() + filePath\n       modifiedTime = getLastGitModifiedDate(filePath)\n       if len(modifiedTime) > 0 and str(year) in modifiedTime:\n-        print n,\"Last Git Modified: \", modifiedTime, \" - \", filePath\n-        os.popen(command % (last_year,year,filePath))\n+        print n, \"Last Git Modified: \", modifiedTime, \" - \", filePath\n+        os.popen(command % (last_year, year, filePath))\n         n = n + 1\n \n "
      },
      {
        "sha": "78a3bae3304628801e6ff22083f39d5084534dc2",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -6,11 +6,13 @@\n import hashlib\n from PIL import Image\n \n+\n def file_hash(filename):\n     '''Return hash of raw file contents'''\n     with open(filename, 'rb') as f:\n         return hashlib.sha256(f.read()).hexdigest()\n \n+\n def content_hash(filename):\n     '''Return hash of RGBA contents of image'''\n     i = Image.open(filename)"
      },
      {
        "sha": "12833806b0aa348d8cc5d3000b342f9b22807807",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -36,10 +36,10 @@\n #   (glibc)    GLIBC_2_11\n #\n MAX_VERSIONS = {\n-'GCC':     (4,4,0),\n-'CXXABI':  (1,3,3),\n-'GLIBCXX': (3,4,13),\n-'GLIBC':   (2,11)\n+'GCC':     (4, 4, 0),\n+'CXXABI':  (1, 3, 3),\n+'GLIBCXX': (3, 4, 13),\n+'GLIBC':   (2, 11)\n }\n # Ignore symbols that are exported as part of every executable\n IGNORE_EXPORTS = {\n@@ -103,12 +103,12 @@ def check_version(max_versions, version):\n     retval = 0\n     for filename in sys.argv[1:]:\n         # Check imported symbols\n-        for sym,version in read_symbols(filename, True):\n+        for sym, version in read_symbols(filename, True):\n             if version and not check_version(MAX_VERSIONS, version):\n                 print('%s: symbol %s from unsupported version %s' % (filename, cppfilt(sym), version))\n                 retval = 1\n         # Check exported symbols\n-        for sym,version in read_symbols(filename, False):\n+        for sym, version in read_symbols(filename, False):\n             if sym in IGNORE_EXPORTS:\n                 continue\n             print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))"
      },
      {
        "sha": "e997509cb8eb60ac30217249cd0b9841003b2f9a",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -58,17 +58,17 @@ def split_format_specifiers(specifiers):\n     numeric = []\n     other = []\n     for s in specifiers:\n-        if s in {'1','2','3','4','5','6','7','8','9'}:\n+        if s in {'1', '2', '3', '4', '5', '6', '7', '8', '9'}:\n             numeric.append(s)\n         else:\n             other.append(s)\n \n     # numeric (Qt) can be present in any order, others (strprintf) must be in specified order\n-    return set(numeric),other\n+    return set(numeric), other\n \n def sanitize_string(s):\n     '''Sanitize string for printing'''\n-    return s.replace('\\n',' ')\n+    return s.replace('\\n', ' ')\n \n def check_format_specifiers(source, translation, errors):\n     source_f = split_format_specifiers(find_format_specifiers(source))\n@@ -118,11 +118,11 @@ def postprocess_translations(reduce_diff_hacks=False):\n         _orig_escape_cdata = ET._escape_cdata\n         ET._escape_cdata = escape_cdata\n \n-    for (filename,filepath) in all_ts_files():\n+    for (filename, filepath) in all_ts_files():\n         os.rename(filepath, filepath+'.orig')\n \n     have_errors = False\n-    for (filename,filepath) in all_ts_files('.orig'):\n+    for (filename, filepath) in all_ts_files('.orig'):\n         # pre-fixups to cope with transifex output\n         parser = ET.XMLParser(encoding='utf-8') # need to override encoding because 'utf8' is not understood only 'utf-8'\n         with open(filepath + '.orig', 'rb') as f:"
      },
      {
        "sha": "3e92f78d7afab82497676676aba0408963629ed9",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -81,7 +81,7 @@ def get_block_hashes(settings):\n \n def mkblockmap(blkindex):\n \tblkmap = {}\n-\tfor height,hash in enumerate(blkindex):\n+\tfor height, hash in enumerate(blkindex):\n \t\tblkmap[hash] = height\n \treturn blkmap\n "
      },
      {
        "sha": "ac66a772cd536b4a5ca615a621726db9a80e9b26",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -65,7 +65,7 @@ def get_block_hashes(settings, max_blocks_per_call=10000):\n \n \t\treply = rpc.execute(batch)\n \n-\t\tfor x,resp_obj in enumerate(reply):\n+\t\tfor x, resp_obj in enumerate(reply):\n \t\t\tif rpc.response_is_error(resp_obj):\n \t\t\t\tprint('JSON-RPC: error at height', height+x, ': ', resp_obj['error'], file=sys.stderr)\n \t\t\t\texit(1)"
      },
      {
        "sha": "04268d5b8014a9319c8522e63b09c6eb2fd92f1b",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -283,7 +283,7 @@ def copyFramework(framework, path, verbose):\n \n     if not framework.isDylib(): # Copy resources for real frameworks\n \n-        linkfrom = os.path.join(path, \"Contents\",\"Frameworks\", framework.frameworkName, \"Versions\", \"Current\")\n+        linkfrom = os.path.join(path, \"Contents\", \"Frameworks\", framework.frameworkName, \"Versions\", \"Current\")\n         linkto = framework.version\n         if not os.path.exists(linkfrom):\n             os.symlink(linkto, linkfrom)"
      },
      {
        "sha": "d1f3d5df8340c83079f517c7773ba0677cc51b4b",
        "filename": "contrib/qt_translations.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/qt_translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/qt_translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qt_translations.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -10,7 +10,7 @@\n import sys\n \n if len(sys.argv) != 3:\n-  sys.exit(\"Usage: %s $QTDIR/translations $BITCOINDIR/src/qt/locale\"%sys.argv[0])\n+    sys.exit(\"Usage: %s $QTDIR/translations $BITCOINDIR/src/qt/locale\"%sys.argv[0])\n \n d1 = sys.argv[1]\n d2 = sys.argv[2]"
      },
      {
        "sha": "ffb6f5fb054bbd7f891d96f8594fe54fcfabf9bd",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -3,9 +3,9 @@\n # Generate seeds.txt from Pieter's DNS seeder\n #\n \n-NSEEDS=512\n+NSEEDS = 512\n \n-MAX_SEEDS_PER_ASN=2\n+MAX_SEEDS_PER_ASN = 2\n \n MIN_BLOCKS = 337600\n \n@@ -36,7 +36,7 @@ def parseline(line):\n         return None\n     # Do IPv4 sanity check\n     ip = 0\n-    for i in range(0,4):\n+    for i in range(0, 4):\n         if int(m.group(i+2)) < 0 or int(m.group(i+2)) > 255:\n             return None\n         ip = ip + (int(m.group(i+2)) << (8*(3-i)))"
      },
      {
        "sha": "0ceaf3a4ca698a4c92486354034a39ad70b8562c",
        "filename": "contrib/spendfrom/spendfrom.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/spendfrom/spendfrom.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/spendfrom/spendfrom.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/spendfrom/spendfrom.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -25,6 +25,7 @@\n \n BASE_FEE=Decimal(\"0.001\")\n \n+\n def check_json_precision():\n     \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n     n = Decimal(\"20000000.00000003\")\n@@ -48,6 +49,7 @@ class FakeSecHead(object):\n         def __init__(self, fp):\n             self.fp = fp\n             self.sechead = '[all]\\n'\n+\n         def readline(self):\n             if self.sechead:\n                 try: return self.sechead\n@@ -244,7 +246,7 @@ def main():\n \n     if options.amount is None:\n         address_summary = list_available(bitcoind)\n-        for address,info in address_summary.iteritems():\n+        for address, info in address_summary.iteritems():\n             n_transactions = len(info['outputs'])\n             if n_transactions > 1:\n                 print(\"%s %.8f %s (%d transactions)\"%(address, info['total'], info['account'], n_transactions))"
      },
      {
        "sha": "27845c9251abbf49cb182e3c5d7034983776ae01",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -5,6 +5,7 @@\n '''\n import hashlib\n \n+\n # for compatibility with following code...\n class SHA256:\n     new = hashlib.sha256\n@@ -13,6 +14,7 @@ class SHA256:\n     # Python 3.x\n     def ord(c):\n         return c\n+\n     def chr(n):\n         return bytes( (n,) )\n "
      },
      {
        "sha": "20fa3def70e49b54b3dc5f349528207a409bccfe",
        "filename": "contrib/testgen/gen_base58_test_vectors.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/testgen/gen_base58_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8afc59867be9cadb17fbd752d908957e5476ec39/contrib/testgen/gen_base58_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_base58_test_vectors.py?ref=8afc59867be9cadb17fbd752d908957e5476ec39",
        "patch": "@@ -60,7 +60,7 @@ def gen_valid_vectors():\n             suffix = str(bytearray(template[2]))\n             rv = b58encode_chk(prefix + payload + suffix)\n             assert is_valid(rv)\n-            metadata = dict([(x,y) for (x,y) in zip(metadata_keys,template[3]) if y is not None])\n+            metadata = dict([(x, y) for (x, y) in zip(metadata_keys, template[3]) if y is not None])\n             yield (rv, b2a_hex(payload), metadata)\n \n def gen_invalid_vector(template, corrupt_prefix, randomize_payload_size, corrupt_suffix):\n@@ -99,7 +99,7 @@ def gen_invalid_vectors():\n         #   corrupt checksum\n         for template in templates:\n             val = gen_invalid_vector(template, randbool(0.2), randbool(0.2), randbool(0.2))\n-            if random.randint(0,10)<1: # line corruption\n+            if random.randint(0, 10)<1: # line corruption\n                 if randbool(): # add random character to end\n                     val += random.choice(b58chars)\n                 else: # replace random character in the middle"
      }
    ]
  }
]