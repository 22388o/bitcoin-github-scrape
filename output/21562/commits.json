[
  {
    "sha": "9190b01d8dcf03b74e9b9e1653688a97ac171b37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTkwYjAxZDhkY2YwM2I3NGU5YjllMTY1MzY4OGE5N2FjMTcxYjM3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-31T17:34:49Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-20T12:12:42Z"
      },
      "message": "[net processing] Add Orphanage empty consistency check\n\nWhen removing the final peer, assert that m_tx_orphanage is empty.",
      "tree": {
        "sha": "d42ceee268c5a577ad21fc432c7c8ae5dd306de3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d42ceee268c5a577ad21fc432c7c8ae5dd306de3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9190b01d8dcf03b74e9b9e1653688a97ac171b37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9190b01d8dcf03b74e9b9e1653688a97ac171b37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9190b01d8dcf03b74e9b9e1653688a97ac171b37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9190b01d8dcf03b74e9b9e1653688a97ac171b37/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "201c5e4aec5210b258644ff96379cda0ca7273ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/201c5e4aec5210b258644ff96379cda0ca7273ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/201c5e4aec5210b258644ff96379cda0ca7273ab"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c2202c73dae6ebf75f17158aa9c2005eb7ff5dde",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9190b01d8dcf03b74e9b9e1653688a97ac171b37/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9190b01d8dcf03b74e9b9e1653688a97ac171b37/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9190b01d8dcf03b74e9b9e1653688a97ac171b37",
        "patch": "@@ -1194,6 +1194,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n         assert(m_outbound_peers_with_protect_from_disconnect == 0);\n         assert(m_wtxid_relay_peers == 0);\n         assert(m_txrequest.Size() == 0);\n+        assert(m_orphanage.Size() == 0);\n     }\n     } // cs_main\n     if (node.fSuccessfullyConnected && misbehavior == 0 &&"
      },
      {
        "sha": "24c8318f369e2c46821eab159c1c620715615e47",
        "filename": "src/txorphanage.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9190b01d8dcf03b74e9b9e1653688a97ac171b37/src/txorphanage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9190b01d8dcf03b74e9b9e1653688a97ac171b37/src/txorphanage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txorphanage.h?ref=9190b01d8dcf03b74e9b9e1653688a97ac171b37",
        "patch": "@@ -47,6 +47,13 @@ class TxOrphanage {\n      * (ie orphans that may have found their final missing parent, and so should be reconsidered for the mempool) */\n     void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n+    /** Return how many entries exist in the orphange */\n+    size_t Size() LOCKS_EXCLUDED(::g_cs_orphans)\n+    {\n+        LOCK(::g_cs_orphans);\n+        return m_orphans.size();\n+    }\n+\n protected:\n     struct OrphanTx {\n         CTransactionRef tx;"
      }
    ]
  },
  {
    "sha": "a28bfd1d4cfa523a6abf3832dbfd6183cd546944",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjhiZmQxZDRjZmE1MjNhNmFiZjM4MzJkYmZkNjE4M2NkNTQ2OTQ0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-31T17:37:52Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-20T12:12:42Z"
      },
      "message": "[net processing] Default initialize m_stale_tip_check_time",
      "tree": {
        "sha": "3e5a7e64773d780ada0dece78e36432003e9048a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e5a7e64773d780ada0dece78e36432003e9048a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a28bfd1d4cfa523a6abf3832dbfd6183cd546944",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a28bfd1d4cfa523a6abf3832dbfd6183cd546944",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a28bfd1d4cfa523a6abf3832dbfd6183cd546944",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a28bfd1d4cfa523a6abf3832dbfd6183cd546944/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9190b01d8dcf03b74e9b9e1653688a97ac171b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9190b01d8dcf03b74e9b9e1653688a97ac171b37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9190b01d8dcf03b74e9b9e1653688a97ac171b37"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6a1cd7f0222002f4afb2200d9ccfd45f2caa4d53",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a28bfd1d4cfa523a6abf3832dbfd6183cd546944/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a28bfd1d4cfa523a6abf3832dbfd6183cd546944/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a28bfd1d4cfa523a6abf3832dbfd6183cd546944",
        "patch": "@@ -396,7 +396,8 @@ class PeerManagerImpl final : public PeerManager\n     /** The height of the best chain */\n     std::atomic<int> m_best_height{-1};\n \n-    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n+    /** Next time to check for stale tip */\n+    int64_t m_stale_tip_check_time{0};\n \n     /** Whether this node is running in blocks only mode */\n     const bool m_ignore_incoming_txs;\n@@ -1393,7 +1394,6 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n       m_banman(banman),\n       m_chainman(chainman),\n       m_mempool(pool),\n-      m_stale_tip_check_time(0),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n {\n     // Initialize global variables that cannot be constructed at startup."
      }
    ]
  },
  {
    "sha": "cd9902ac5054c01228d52616bf85f7196364d4ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDk5MDJhYzUwNTRjMDEyMjhkNTI2MTZiZjg1ZjcxOTYzNjRkNGZm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-31T17:40:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-20T12:13:59Z"
      },
      "message": "[net processing] Default initialize recentRejects\n\nNow that recentRejects is owned by PeerManagerImpl, and\nPeerManagerImpl's lifetime is managed by the node context, we can just\ndefault initialize recentRejects during object initialization. We can\nalso remove the unique_ptr indirection.",
      "tree": {
        "sha": "a0160be4611c0376f0dc416f3332393f5250827c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0160be4611c0376f0dc416f3332393f5250827c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd9902ac5054c01228d52616bf85f7196364d4ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9902ac5054c01228d52616bf85f7196364d4ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9902ac5054c01228d52616bf85f7196364d4ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9902ac5054c01228d52616bf85f7196364d4ff/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a28bfd1d4cfa523a6abf3832dbfd6183cd546944",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a28bfd1d4cfa523a6abf3832dbfd6183cd546944",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a28bfd1d4cfa523a6abf3832dbfd6183cd546944"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 10,
      "deletions": 16
    },
    "files": [
      {
        "sha": "0f5f18aada533b81c04a188d682cb740c8e0d9f6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 16,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9902ac5054c01228d52616bf85f7196364d4ff/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9902ac5054c01228d52616bf85f7196364d4ff/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cd9902ac5054c01228d52616bf85f7196364d4ff",
        "patch": "@@ -470,7 +470,7 @@ class PeerManagerImpl final : public PeerManager\n      *\n      * Memory used: 1.3 MB\n      */\n-    std::unique_ptr<CRollingBloomFilter> recentRejects GUARDED_BY(cs_main);\n+    CRollingBloomFilter recentRejects GUARDED_BY(::cs_main){120'000, 0.000'001};\n     uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n     /*\n@@ -1396,9 +1396,6 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n       m_mempool(pool),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n {\n-    // Initialize global variables that cannot be constructed at startup.\n-    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n-\n     // Blocks don't typically have more than 4000 transactions, so this should\n     // be at least six blocks (~1 hr) worth of transactions that we can store,\n     // inserting both a txid and wtxid for every observed transaction.\n@@ -1601,14 +1598,13 @@ void PeerManagerImpl::BlockChecked(const CBlock& block, const BlockValidationSta\n \n bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n {\n-    assert(recentRejects);\n     if (m_chainman.ActiveChain().Tip()->GetBlockHash() != hashRecentRejectsChainTip) {\n         // If the chain tip has changed previously rejected transactions\n         // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n         // or a double-spend. Reset the rejects filter and give those\n         // txs a second chance.\n         hashRecentRejectsChainTip = m_chainman.ActiveChain().Tip()->GetBlockHash();\n-        recentRejects->reset();\n+        recentRejects.reset();\n     }\n \n     const uint256& hash = gtxid.GetHash();\n@@ -1620,7 +1616,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n         if (m_recent_confirmed_transactions->contains(hash)) return true;\n     }\n \n-    return recentRejects->contains(hash) || m_mempool.exists(gtxid);\n+    return recentRejects.contains(hash) || m_mempool.exists(gtxid);\n }\n \n bool PeerManagerImpl::AlreadyHaveBlock(const uint256& block_hash)\n@@ -2239,8 +2235,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n                 // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n                 // for concerns around weakening security of unupgraded nodes\n                 // if we start doing this too early.\n-                assert(recentRejects);\n-                recentRejects->insert(porphanTx->GetWitnessHash());\n+                recentRejects.insert(porphanTx->GetWitnessHash());\n                 // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n                 // then we know that the witness was irrelevant to the policy\n                 // failure, since this check depends only on the txid\n@@ -2252,7 +2247,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n                 if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\n                     // We only add the txid if it differs from the wtxid, to\n                     // avoid wasting entries in the rolling bloom filter.\n-                    recentRejects->insert(porphanTx->GetHash());\n+                    recentRejects.insert(porphanTx->GetHash());\n                 }\n             }\n             m_orphanage.EraseTx(orphanHash);\n@@ -3255,7 +3250,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             std::sort(unique_parents.begin(), unique_parents.end());\n             unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());\n             for (const uint256& parent_txid : unique_parents) {\n-                if (recentRejects->contains(parent_txid)) {\n+                if (recentRejects.contains(parent_txid)) {\n                     fRejectedParents = true;\n                     break;\n                 }\n@@ -3296,8 +3291,8 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 // regardless of what witness is provided, we will not accept\n                 // this, so we don't need to allow for redownload of this txid\n                 // from any of our non-wtxidrelay peers.\n-                recentRejects->insert(tx.GetHash());\n-                recentRejects->insert(tx.GetWitnessHash());\n+                recentRejects.insert(tx.GetHash());\n+                recentRejects.insert(tx.GetWitnessHash());\n                 m_txrequest.ForgetTxHash(tx.GetHash());\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n             }\n@@ -3316,8 +3311,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n                 // for concerns around weakening security of unupgraded nodes\n                 // if we start doing this too early.\n-                assert(recentRejects);\n-                recentRejects->insert(tx.GetWitnessHash());\n+                recentRejects.insert(tx.GetWitnessHash());\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n                 // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n                 // then we know that the witness was irrelevant to the policy\n@@ -3328,7 +3322,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 // transactions are later received (resulting in\n                 // parent-fetching by txid via the orphan-handling logic).\n                 if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && tx.GetWitnessHash() != tx.GetHash()) {\n-                    recentRejects->insert(tx.GetHash());\n+                    recentRejects.insert(tx.GetHash());\n                     m_txrequest.ForgetTxHash(tx.GetHash());\n                 }\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {"
      }
    ]
  },
  {
    "sha": "37dcd12d539e4a875581fa049aa0f7fafeb932a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2RjZDEyZDUzOWU0YTg3NTU4MWZhMDQ5YWEwZjdmYWZlYjkzMmE0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-31T17:44:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-20T12:14:32Z"
      },
      "message": "scripted-diff: Rename recentRejects\n\n-BEGIN VERIFY SCRIPT-\nren() { sed -i \"s:\\<$1\\>:$2:g\" $(git grep -l \"\\<$1\\>\" ./src ./test); }\n\nren recentRejects m_recent_rejects\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "b0dc965d307bc5028be3186cb74c4d20e771e312",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0dc965d307bc5028be3186cb74c4d20e771e312"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37dcd12d539e4a875581fa049aa0f7fafeb932a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37dcd12d539e4a875581fa049aa0f7fafeb932a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37dcd12d539e4a875581fa049aa0f7fafeb932a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37dcd12d539e4a875581fa049aa0f7fafeb932a4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd9902ac5054c01228d52616bf85f7196364d4ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9902ac5054c01228d52616bf85f7196364d4ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9902ac5054c01228d52616bf85f7196364d4ff"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "94ecbdf9832782209eb09b8e421335972c34b728",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37dcd12d539e4a875581fa049aa0f7fafeb932a4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37dcd12d539e4a875581fa049aa0f7fafeb932a4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=37dcd12d539e4a875581fa049aa0f7fafeb932a4",
        "patch": "@@ -470,7 +470,7 @@ class PeerManagerImpl final : public PeerManager\n      *\n      * Memory used: 1.3 MB\n      */\n-    CRollingBloomFilter recentRejects GUARDED_BY(::cs_main){120'000, 0.000'001};\n+    CRollingBloomFilter m_recent_rejects GUARDED_BY(::cs_main){120'000, 0.000'001};\n     uint256 hashRecentRejectsChainTip GUARDED_BY(cs_main);\n \n     /*\n@@ -1604,7 +1604,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n         // or a double-spend. Reset the rejects filter and give those\n         // txs a second chance.\n         hashRecentRejectsChainTip = m_chainman.ActiveChain().Tip()->GetBlockHash();\n-        recentRejects.reset();\n+        m_recent_rejects.reset();\n     }\n \n     const uint256& hash = gtxid.GetHash();\n@@ -1616,7 +1616,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n         if (m_recent_confirmed_transactions->contains(hash)) return true;\n     }\n \n-    return recentRejects.contains(hash) || m_mempool.exists(gtxid);\n+    return m_recent_rejects.contains(hash) || m_mempool.exists(gtxid);\n }\n \n bool PeerManagerImpl::AlreadyHaveBlock(const uint256& block_hash)\n@@ -2235,7 +2235,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n                 // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n                 // for concerns around weakening security of unupgraded nodes\n                 // if we start doing this too early.\n-                recentRejects.insert(porphanTx->GetWitnessHash());\n+                m_recent_rejects.insert(porphanTx->GetWitnessHash());\n                 // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n                 // then we know that the witness was irrelevant to the policy\n                 // failure, since this check depends only on the txid\n@@ -2247,7 +2247,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n                 if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\n                     // We only add the txid if it differs from the wtxid, to\n                     // avoid wasting entries in the rolling bloom filter.\n-                    recentRejects.insert(porphanTx->GetHash());\n+                    m_recent_rejects.insert(porphanTx->GetHash());\n                 }\n             }\n             m_orphanage.EraseTx(orphanHash);\n@@ -3250,7 +3250,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             std::sort(unique_parents.begin(), unique_parents.end());\n             unique_parents.erase(std::unique(unique_parents.begin(), unique_parents.end()), unique_parents.end());\n             for (const uint256& parent_txid : unique_parents) {\n-                if (recentRejects.contains(parent_txid)) {\n+                if (m_recent_rejects.contains(parent_txid)) {\n                     fRejectedParents = true;\n                     break;\n                 }\n@@ -3291,8 +3291,8 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 // regardless of what witness is provided, we will not accept\n                 // this, so we don't need to allow for redownload of this txid\n                 // from any of our non-wtxidrelay peers.\n-                recentRejects.insert(tx.GetHash());\n-                recentRejects.insert(tx.GetWitnessHash());\n+                m_recent_rejects.insert(tx.GetHash());\n+                m_recent_rejects.insert(tx.GetWitnessHash());\n                 m_txrequest.ForgetTxHash(tx.GetHash());\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n             }\n@@ -3311,7 +3311,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 // See also comments in https://github.com/bitcoin/bitcoin/pull/18044#discussion_r443419034\n                 // for concerns around weakening security of unupgraded nodes\n                 // if we start doing this too early.\n-                recentRejects.insert(tx.GetWitnessHash());\n+                m_recent_rejects.insert(tx.GetWitnessHash());\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n                 // If the transaction failed for TX_INPUTS_NOT_STANDARD,\n                 // then we know that the witness was irrelevant to the policy\n@@ -3322,7 +3322,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 // transactions are later received (resulting in\n                 // parent-fetching by txid via the orphan-handling logic).\n                 if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && tx.GetWitnessHash() != tx.GetHash()) {\n-                    recentRejects.insert(tx.GetHash());\n+                    m_recent_rejects.insert(tx.GetHash());\n                     m_txrequest.ForgetTxHash(tx.GetHash());\n                 }\n                 if (RecursiveDynamicUsage(*ptx) < 100000) {\n@@ -3331,21 +3331,21 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             }\n         }\n \n-        // If a tx has been detected by recentRejects, we will have reached\n+        // If a tx has been detected by m_recent_rejects, we will have reached\n         // this point and the tx will have been ignored. Because we haven't run\n         // the tx through AcceptToMemoryPool, we won't have computed a DoS\n         // score for it or determined exactly why we consider it invalid.\n         //\n         // This means we won't penalize any peer subsequently relaying a DoSy\n         // tx (even if we penalized the first peer who gave it to us) because\n-        // we have to account for recentRejects showing false positives. In\n+        // we have to account for m_recent_rejects showing false positives. In\n         // other words, we shouldn't penalize a peer if we aren't *sure* they\n         // submitted a DoSy tx.\n         //\n-        // Note that recentRejects doesn't just record DoSy or invalid\n+        // Note that m_recent_rejects doesn't just record DoSy or invalid\n         // transactions, but any tx not accepted by the mempool, which may be\n         // due to node policy (vs. consensus). So we can't blanket penalize a\n-        // peer simply for relaying a tx that our recentRejects has caught,\n+        // peer simply for relaying a tx that our m_recent_rejects has caught,\n         // regardless of false positives.\n \n         if (state.IsInvalid()) {"
      },
      {
        "sha": "b5086e1df1809c86beca97d609b3cb4486373c7b",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37dcd12d539e4a875581fa049aa0f7fafeb932a4/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37dcd12d539e4a875581fa049aa0f7fafeb932a4/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=37dcd12d539e4a875581fa049aa0f7fafeb932a4",
        "patch": "@@ -80,7 +80,7 @@ def run_test(self):\n         self.log.info(\"Generate a block\")\n         last_block = self.nodes[0].generate(1)\n         # Sync blocks, so that peer 1 gets the block before timelock_tx\n-        # Otherwise, peer 1 would put the timelock_tx in recentRejects\n+        # Otherwise, peer 1 would put the timelock_tx in m_recent_rejects\n         self.sync_all()\n \n         self.log.info(\"The time-locked transaction can now be spent\")"
      },
      {
        "sha": "8b285907c5a47656d1560138ac43527ccf0e022b",
        "filename": "test/functional/p2p_permissions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37dcd12d539e4a875581fa049aa0f7fafeb932a4/test/functional/p2p_permissions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37dcd12d539e4a875581fa049aa0f7fafeb932a4/test/functional/p2p_permissions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_permissions.py?ref=37dcd12d539e4a875581fa049aa0f7fafeb932a4",
        "patch": "@@ -130,7 +130,7 @@ def check_tx_relay(self):\n         tx.vout[0].nValue += 1\n         txid = tx.rehash()\n         # Send the transaction twice. The first time, it'll be rejected by ATMP because it conflicts\n-        # with a mempool transaction. The second time, it'll be in the recentRejects filter.\n+        # with a mempool transaction. The second time, it'll be in the m_recent_rejects filter.\n         p2p_rebroadcast_wallet.send_txs_and_test(\n             [tx],\n             self.nodes[1],"
      }
    ]
  },
  {
    "sha": "fde1bf4f6136638e84cdf9806eedaae08e841bbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGUxYmY0ZjYxMzY2MzhlODRjZGY5ODA2ZWVkYWFlMDhlODQxYmJm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-31T17:40:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-07-20T12:15:26Z"
      },
      "message": "[net processing] Default initialize m_recent_confirmed_transactions\n\nNow that m_recent_confirmed_transactions is owned by PeerManagerImpl,\nand PeerManagerImpl's lifetime is managed by the node context, we can\njust default initialize m_recent_confirmed_transactions during object\ninitialization. We can also remove the unique_ptr indirection.",
      "tree": {
        "sha": "e466562c1d7b004679aeaeca71f6312533b60d7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e466562c1d7b004679aeaeca71f6312533b60d7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fde1bf4f6136638e84cdf9806eedaae08e841bbf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fde1bf4f6136638e84cdf9806eedaae08e841bbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fde1bf4f6136638e84cdf9806eedaae08e841bbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fde1bf4f6136638e84cdf9806eedaae08e841bbf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37dcd12d539e4a875581fa049aa0f7fafeb932a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37dcd12d539e4a875581fa049aa0f7fafeb932a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37dcd12d539e4a875581fa049aa0f7fafeb932a4"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 15,
      "deletions": 16
    },
    "files": [
      {
        "sha": "c4186208591710e37edb34e26007c2e034aebc37",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 16,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fde1bf4f6136638e84cdf9806eedaae08e841bbf/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fde1bf4f6136638e84cdf9806eedaae08e841bbf/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fde1bf4f6136638e84cdf9806eedaae08e841bbf",
        "patch": "@@ -477,9 +477,19 @@ class PeerManagerImpl final : public PeerManager\n      * Filter for transactions that have been recently confirmed.\n      * We use this to avoid requesting transactions that have already been\n      * confirnmed.\n+     *\n+     * Blocks don't typically have more than 4000 transactions, so this should\n+     * be at least six blocks (~1 hr) worth of transactions that we can store,\n+     * inserting both a txid and wtxid for every observed transaction.\n+     * If the number of transactions appearing in a block goes up, or if we are\n+     * seeing getdata requests more than an hour after initial announcement, we\n+     * can increase this number.\n+     * The false positive rate of 1/1M should come out to less than 1\n+     * transaction per day that would be inadvertently ignored (which is the\n+     * same probability that we have in the reject filter).\n      */\n     Mutex m_recent_confirmed_transactions_mutex;\n-    std::unique_ptr<CRollingBloomFilter> m_recent_confirmed_transactions GUARDED_BY(m_recent_confirmed_transactions_mutex);\n+    CRollingBloomFilter m_recent_confirmed_transactions GUARDED_BY(m_recent_confirmed_transactions_mutex){48'000, 0.000'001};\n \n     /** Have we requested this block from a peer */\n     bool IsBlockRequested(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -1396,17 +1406,6 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n       m_mempool(pool),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n {\n-    // Blocks don't typically have more than 4000 transactions, so this should\n-    // be at least six blocks (~1 hr) worth of transactions that we can store,\n-    // inserting both a txid and wtxid for every observed transaction.\n-    // If the number of transactions appearing in a block goes up, or if we are\n-    // seeing getdata requests more than an hour after initial announcement, we\n-    // can increase this number.\n-    // The false positive rate of 1/1M should come out to less than 1\n-    // transaction per day that would be inadvertently ignored (which is the\n-    // same probability that we have in the reject filter).\n-    m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n-\n     // Stale tip checking and peer eviction are on two different timers, but we\n     // don't want them to get out of sync due to drift in the scheduler, so we\n     // combine them in one function and schedule at the quicker (peer-eviction)\n@@ -1432,9 +1431,9 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n     {\n         LOCK(m_recent_confirmed_transactions_mutex);\n         for (const auto& ptx : pblock->vtx) {\n-            m_recent_confirmed_transactions->insert(ptx->GetHash());\n+            m_recent_confirmed_transactions.insert(ptx->GetHash());\n             if (ptx->GetHash() != ptx->GetWitnessHash()) {\n-                m_recent_confirmed_transactions->insert(ptx->GetWitnessHash());\n+                m_recent_confirmed_transactions.insert(ptx->GetWitnessHash());\n             }\n         }\n     }\n@@ -1458,7 +1457,7 @@ void PeerManagerImpl::BlockDisconnected(const std::shared_ptr<const CBlock> &blo\n     // presumably the most common case of relaying a confirmed transaction\n     // should be just after a new block containing it is found.\n     LOCK(m_recent_confirmed_transactions_mutex);\n-    m_recent_confirmed_transactions->reset();\n+    m_recent_confirmed_transactions.reset();\n }\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n@@ -1613,7 +1612,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid)\n \n     {\n         LOCK(m_recent_confirmed_transactions_mutex);\n-        if (m_recent_confirmed_transactions->contains(hash)) return true;\n+        if (m_recent_confirmed_transactions.contains(hash)) return true;\n     }\n \n     return m_recent_rejects.contains(hash) || m_mempool.exists(gtxid);"
      }
    ]
  }
]