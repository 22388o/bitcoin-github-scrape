DrahtBot,2020-04-27 04:33:48,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18736 (test: Add fuzzing harnesses for various classes/functions in util/ by practicalswift)\n\nIf you consider this pull",https://github.com/bitcoin/bitcoin/pull/18775#issuecomment-619710149,619710149,
practicalswift,2020-04-30 14:21:33,Added a commit which clarifies how the signed integer overflow in `CFeeRate::GetFeePerK()` is avoided when fuzzing :),https://github.com/bitcoin/bitcoin/pull/18775#issuecomment-621884400,621884400,
MarcoFalke,2020-04-27 14:03:55,how is this possible? ConsumeMoney should be less than 34873208148477500,https://github.com/bitcoin/bitcoin/pull/18775#discussion_r415840299,415840299,src/test/fuzz/util.h
MarcoFalke,2020-04-27 14:05:44,does this do anything for the small inputs that  the fuzz engine produces by default?,https://github.com/bitcoin/bitcoin/pull/18775#discussion_r415841752,415841752,src/test/fuzz/policy_estimator.cpp
MarcoFalke,2020-04-27 14:07:00,"```suggestion\n            (void)block_policy_estimator.removeTx(ConsumeUInt256(fuzzed_data_provider), /* inBlock */ fuzzed_data_provider.ConsumeBool());\n```",https://github.com/bitcoin/bitcoin/pull/18775#discussion_r415842808,415842808,src/test/fuzz/policy_estimator.cpp
MarcoFalke,2020-04-27 14:07:20,"```suggestion\n                (void)block_policy_estimator.removeTx(tx.GetHash(), /* inBlock */ fuzzed_data_provider.ConsumeBool());\n```",https://github.com/bitcoin/bitcoin/pull/18775#discussion_r415843074,415843074,src/test/fuzz/policy_estimator.cpp
practicalswift,2020-04-30 13:12:54,"I don't think the impact (if any) will be large, but it doesn't hurt and it makes `clang-tidy` happy :)",https://github.com/bitcoin/bitcoin/pull/18775#discussion_r417998493,417998493,src/test/fuzz/policy_estimator.cpp
practicalswift,2020-04-30 13:19:55,Fixed!,https://github.com/bitcoin/bitcoin/pull/18775#discussion_r418003132,418003132,src/test/fuzz/policy_estimator.cpp
practicalswift,2020-04-30 13:20:03,Fixed!,https://github.com/bitcoin/bitcoin/pull/18775#discussion_r418003214,418003214,src/test/fuzz/policy_estimator.cpp
practicalswift,2020-04-30 13:38:24,"I think you're misunderstanding what is happening here: note that it `ConsumeMoney` is always returning within the money bounds, but the calculation does not take place directly on that amount :)\n\nSee this example:\n\n```c++\nconst CAmount fee_paid = 348732081484775;\nassert(MoneyRange(fee_paid));\nconst size_t bytes = 10;\nconst CFeeRate fee_rate(fee_paid, bytes);\n(void)fee_rate.GetFe",https://github.com/bitcoin/bitcoin/pull/18775#discussion_r418015926,418015926,src/test/fuzz/util.h
