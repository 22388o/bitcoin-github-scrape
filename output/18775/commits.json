[
  {
    "sha": "3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDM5Yzg4YTVkMmQwYmRjYzMwZDk0OWI5ZDQwMGNhOTBiOGE3ZDI4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-26T19:27:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-30T13:19:24Z"
      },
      "message": "tests: Add fuzzing harness for CBlockPolicyEstimator",
      "tree": {
        "sha": "d088897b3130e682744eda79099c4d8cee75d139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d088897b3130e682744eda79099c4d8cee75d139"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00c1a4d9a95eaead64508ee2a7625bdc67e65fa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00c1a4d9a95eaead64508ee2a7625bdc67e65fa3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00c1a4d9a95eaead64508ee2a7625bdc67e65fa3"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 91,
      "deletions": 0
    },
    "files": [
      {
        "sha": "af03eee20053a5f3d861bbfd95c3a1359d31d4ae",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28",
        "patch": "@@ -67,6 +67,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/parse_univalue \\\n   test/fuzz/partial_merkle_tree_deserialize \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n+  test/fuzz/policy_estimator \\\n   test/fuzz/pow \\\n   test/fuzz/prefilled_transaction_deserialize \\\n   test/fuzz/prevector \\\n@@ -683,6 +684,12 @@ test_fuzz_partially_signed_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMO\n test_fuzz_partially_signed_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_partially_signed_transaction_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n+test_fuzz_policy_estimator_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_policy_estimator_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_policy_estimator_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_policy_estimator_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_policy_estimator_SOURCES = test/fuzz/policy_estimator.cpp\n+\n test_fuzz_pow_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_pow_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_pow_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "201f49c87b29d8665aca3878e36e71aad8989f18",
        "filename": "src/test/fuzz/policy_estimator.cpp",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28/src/test/fuzz/policy_estimator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28/src/test/fuzz/policy_estimator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/policy_estimator.cpp?ref=3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28",
        "patch": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <optional.h>\n+#include <policy/fees.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <txmempool.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    CBlockPolicyEstimator block_policy_estimator;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 3)) {\n+        case 0: {\n+            const Optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!mtx) {\n+                break;\n+            }\n+            const CTransaction tx{*mtx};\n+            block_policy_estimator.processTransaction(ConsumeTxMemPoolEntry(fuzzed_data_provider, tx), fuzzed_data_provider.ConsumeBool());\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                (void)block_policy_estimator.removeTx(tx.GetHash(), /* inBlock */ fuzzed_data_provider.ConsumeBool());\n+            }\n+            break;\n+        }\n+        case 1: {\n+            std::vector<CTxMemPoolEntry> mempool_entries;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+                if (!mtx) {\n+                    break;\n+                }\n+                const CTransaction tx{*mtx};\n+                mempool_entries.push_back(ConsumeTxMemPoolEntry(fuzzed_data_provider, tx));\n+            }\n+            std::vector<const CTxMemPoolEntry*> ptrs;\n+            ptrs.reserve(mempool_entries.size());\n+            for (const CTxMemPoolEntry& mempool_entry : mempool_entries) {\n+                ptrs.push_back(&mempool_entry);\n+            }\n+            block_policy_estimator.processBlock(fuzzed_data_provider.ConsumeIntegral<unsigned int>(), ptrs);\n+            break;\n+        }\n+        case 2: {\n+            (void)block_policy_estimator.removeTx(ConsumeUInt256(fuzzed_data_provider), /* inBlock */ fuzzed_data_provider.ConsumeBool());\n+            break;\n+        }\n+        case 3: {\n+            block_policy_estimator.FlushUnconfirmed();\n+            break;\n+        }\n+        }\n+        (void)block_policy_estimator.estimateFee(fuzzed_data_provider.ConsumeIntegral<int>());\n+        EstimationResult result;\n+        (void)block_policy_estimator.estimateRawFee(fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeFloatingPoint<double>(), fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}), fuzzed_data_provider.ConsumeBool() ? &result : nullptr);\n+        FeeCalculation fee_calculation;\n+        (void)block_policy_estimator.estimateSmartFee(fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeBool() ? &fee_calculation : nullptr, fuzzed_data_provider.ConsumeBool());\n+        (void)block_policy_estimator.HighestTargetTracked(fuzzed_data_provider.PickValueInArray({FeeEstimateHorizon::SHORT_HALFLIFE, FeeEstimateHorizon::MED_HALFLIFE, FeeEstimateHorizon::LONG_HALFLIFE}));\n+    }\n+}"
      },
      {
        "sha": "98fe30fcecdfe44c188be189cf6411e7829118e0",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28",
        "patch": "@@ -8,12 +8,15 @@\n #include <amount.h>\n #include <arith_uint256.h>\n #include <attributes.h>\n+#include <consensus/consensus.h>\n #include <optional.h>\n+#include <primitives/transaction.h>\n #include <script/script.h>\n #include <serialize.h>\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n+#include <txmempool.h>\n #include <uint256.h>\n #include <version.h>\n \n@@ -97,6 +100,18 @@ NODISCARD inline arith_uint256 ConsumeArithUInt256(FuzzedDataProvider& fuzzed_da\n     return UintToArith256(ConsumeUInt256(fuzzed_data_provider));\n }\n \n+NODISCARD inline CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept\n+{\n+    // Avoid:\n+    // policy/feerate.cpp:28:34: runtime error: signed integer overflow: 34873208148477500 * 1000 cannot be represented in type 'long'\n+    const CAmount fee = ConsumeMoney(fuzzed_data_provider) / static_cast<CAmount>(100);\n+    const int64_t time = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+    const unsigned int entry_height = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+    const bool spends_coinbase = fuzzed_data_provider.ConsumeBool();\n+    const unsigned int sig_op_cost = fuzzed_data_provider.ConsumeIntegralInRange<unsigned int>(0, MAX_BLOCK_SIGOPS_COST);\n+    return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n+}\n+\n template <typename T>\n NODISCARD bool MultiplicationOverflow(const T i, const T j) noexcept\n {"
      }
    ]
  },
  {
    "sha": "13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2MxZjZiMjRmYTVlNTNmMTAwZDkwZDM2YjQ3YjdkZDNiYzkxYjlm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-26T19:29:03Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-30T13:19:24Z"
      },
      "message": "tests: Add fuzzing harness for IsRBFOptIn(...)",
      "tree": {
        "sha": "b390f9ac3c8692799c95bad76daf8d7df3923b80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b390f9ac3c8692799c95bad76daf8d7df3923b80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3439c88a5d2d0bdcc30d949b9d400ca90b8a7d28"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1fe4df805989529dc07ce7f0a40ca05682356b6c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f",
        "patch": "@@ -104,6 +104,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/psbt_output_deserialize \\\n   test/fuzz/pub_key_deserialize \\\n   test/fuzz/random \\\n+  test/fuzz/rbf \\\n   test/fuzz/rolling_bloom_filter \\\n   test/fuzz/script \\\n   test/fuzz/script_deserialize \\\n@@ -900,6 +901,12 @@ test_fuzz_random_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_random_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_random_SOURCES = test/fuzz/random.cpp\n \n+test_fuzz_rbf_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_rbf_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_rbf_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_rbf_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_rbf_SOURCES = test/fuzz/rbf.cpp\n+\n test_fuzz_rolling_bloom_filter_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_rolling_bloom_filter_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_rolling_bloom_filter_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "eb54b05df973ef8fde62043af444f564fc0c730f",
        "filename": "src/test/fuzz/rbf.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f/src/test/fuzz/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f/src/test/fuzz/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rbf.cpp?ref=13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <optional.h>\n+#include <policy/rbf.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <txmempool.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    Optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+    if (!mtx) {\n+        return;\n+    }\n+    CTxMemPool pool;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const Optional<CMutableTransaction> another_mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        if (!another_mtx) {\n+            break;\n+        }\n+        const CTransaction another_tx{*another_mtx};\n+        if (fuzzed_data_provider.ConsumeBool() && !mtx->vin.empty()) {\n+            mtx->vin[0].prevout = COutPoint{another_tx.GetHash(), 0};\n+        }\n+        LOCK2(cs_main, pool.cs);\n+        pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, another_tx));\n+    }\n+    const CTransaction tx{*mtx};\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        LOCK2(cs_main, pool.cs);\n+        pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, tx));\n+    }\n+    {\n+        LOCK(pool.cs);\n+        (void)IsRBFOptIn(tx, pool);\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "2bcc2bd742392730b4f21e3d4f00438c34acac1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmNjMmJkNzQyMzkyNzMwYjRmMjFlM2Q0ZjAwNDM4YzM0YWNhYzFm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-30T14:19:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-30T14:19:49Z"
      },
      "message": "tests: Clarify how we avoid hitting the signed integer overflow in CFeeRate::GetFeePerK() when fuzzing",
      "tree": {
        "sha": "3766d615cd7144a22ffe868ed7a1ccc4a586bb44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3766d615cd7144a22ffe868ed7a1ccc4a586bb44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bcc2bd742392730b4f21e3d4f00438c34acac1f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcc2bd742392730b4f21e3d4f00438c34acac1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bcc2bd742392730b4f21e3d4f00438c34acac1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bcc2bd742392730b4f21e3d4f00438c34acac1f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13c1f6b24fa5e53f100d90d36b47b7dd3bc91b9f"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "501bb1de5aeb65a094e7842b19700cdb5bdc8734",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bcc2bd742392730b4f21e3d4f00438c34acac1f/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bcc2bd742392730b4f21e3d4f00438c34acac1f/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=2bcc2bd742392730b4f21e3d4f00438c34acac1f",
        "patch": "@@ -104,7 +104,10 @@ NODISCARD inline CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzze\n {\n     // Avoid:\n     // policy/feerate.cpp:28:34: runtime error: signed integer overflow: 34873208148477500 * 1000 cannot be represented in type 'long'\n-    const CAmount fee = ConsumeMoney(fuzzed_data_provider) / static_cast<CAmount>(100);\n+    //\n+    // Reproduce using CFeeRate(348732081484775, 10).GetFeePerK()\n+    const CAmount fee = std::min<CAmount>(ConsumeMoney(fuzzed_data_provider), std::numeric_limits<CAmount>::max() / static_cast<CAmount>(100000));\n+    assert(MoneyRange(fee));\n     const int64_t time = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const unsigned int entry_height = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n     const bool spends_coinbase = fuzzed_data_provider.ConsumeBool();"
      }
    ]
  }
]