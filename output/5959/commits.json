[
  {
    "sha": "ede379f780b8b976be5e44ce0d8019d59e8829d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGUzNzlmNzgwYjhiOTc2YmU1ZTQ0Y2UwZDgwMTlkNTllODgyOWQ2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-01T17:12:50Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-01T19:11:45Z"
      },
      "message": "Add additional block index consistency checks\n\nThis adds more tests to CheckBlockIndex:\n- HAVE_DATA is true iff nTx > 0\n- BLOCK_VALID_TRANSACTIONS is true iff nTx > 0\n- BLOCK_VALID_TRANSACTIONS is true for a block and all parents iff\n  nChainTx > 0",
      "tree": {
        "sha": "20084817bf4f309e8c03b67d96cd06d2e11dcc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20084817bf4f309e8c03b67d96cd06d2e11dcc38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ede379f780b8b976be5e44ce0d8019d59e8829d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ede379f780b8b976be5e44ce0d8019d59e8829d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ede379f780b8b976be5e44ce0d8019d59e8829d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ede379f780b8b976be5e44ce0d8019d59e8829d6/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e8a1f2725f5d3c0b8462352e69b78cb59268fb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e8a1f2725f5d3c0b8462352e69b78cb59268fb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e8a1f2725f5d3c0b8462352e69b78cb59268fb2"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7da190bdf03a2bc34e77f2519c25b7ccb985b820",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ede379f780b8b976be5e44ce0d8019d59e8829d6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ede379f780b8b976be5e44ce0d8019d59e8829d6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ede379f780b8b976be5e44ce0d8019d59e8829d6",
        "patch": "@@ -3248,13 +3248,15 @@ void static CheckBlockIndex()\n     CBlockIndex* pindexFirstInvalid = NULL; // Oldest ancestor of pindex which is invalid.\n     CBlockIndex* pindexFirstMissing = NULL; // Oldest ancestor of pindex which does not have BLOCK_HAVE_DATA.\n     CBlockIndex* pindexFirstNotTreeValid = NULL; // Oldest ancestor of pindex which does not have BLOCK_VALID_TREE (regardless of being valid or not).\n+    CBlockIndex* pindexFirstNotTransactionsValid = NULL; // Oldest ancestor of pindex which does not have BLOCK_VALID_TRANSACTIONS (regardless of being valid or not).\n     CBlockIndex* pindexFirstNotChainValid = NULL; // Oldest ancestor of pindex which does not have BLOCK_VALID_CHAIN (regardless of being valid or not).\n     CBlockIndex* pindexFirstNotScriptsValid = NULL; // Oldest ancestor of pindex which does not have BLOCK_VALID_SCRIPTS (regardless of being valid or not).\n     while (pindex != NULL) {\n         nNodes++;\n         if (pindexFirstInvalid == NULL && pindex->nStatus & BLOCK_FAILED_VALID) pindexFirstInvalid = pindex;\n         if (pindexFirstMissing == NULL && !(pindex->nStatus & BLOCK_HAVE_DATA)) pindexFirstMissing = pindex;\n         if (pindex->pprev != NULL && pindexFirstNotTreeValid == NULL && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_TREE) pindexFirstNotTreeValid = pindex;\n+        if (pindex->pprev != NULL && pindexFirstNotTransactionsValid == NULL && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_TRANSACTIONS) pindexFirstNotTransactionsValid = pindex;\n         if (pindex->pprev != NULL && pindexFirstNotChainValid == NULL && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_CHAIN) pindexFirstNotChainValid = pindex;\n         if (pindex->pprev != NULL && pindexFirstNotScriptsValid == NULL && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_SCRIPTS) pindexFirstNotScriptsValid = pindex;\n \n@@ -3264,7 +3266,12 @@ void static CheckBlockIndex()\n             assert(pindex->GetBlockHash() == Params().HashGenesisBlock()); // Genesis block's hash must match.\n             assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n         }\n+        // HAVE_DATA is equivalent to VALID_TRANSACTIONS and equivalent to nTx > 0 (we stored the number of transactions in the block)\n+        assert(!(pindex->nStatus & BLOCK_HAVE_DATA) == (pindex->nTx == 0));\n+        assert(((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS) == (pindex->nTx > 0));\n+        // All parents having data is equivalent to all parents being VALID_TRANSACTIONS, which is equivalent to nChainTx being set.\n         assert((pindexFirstMissing != NULL) == (pindex->nChainTx == 0)); // nChainTx == 0 is used to signal that all parent block's transaction data is available.\n+        assert((pindexFirstNotTransactionsValid != NULL) == (pindex->nChainTx == 0));\n         assert(pindex->nHeight == nHeight); // nHeight must be consistent.\n         assert(pindex->pprev == NULL || pindex->nChainWork >= pindex->pprev->nChainWork); // For every block except the genesis block, the chainwork must be larger than the parent's.\n         assert(nHeight < 2 || (pindex->pskip && (pindex->pskip->nHeight < nHeight))); // The pskip pointer must point back for all but the first 2 blocks.\n@@ -3320,6 +3327,7 @@ void static CheckBlockIndex()\n             if (pindex == pindexFirstInvalid) pindexFirstInvalid = NULL;\n             if (pindex == pindexFirstMissing) pindexFirstMissing = NULL;\n             if (pindex == pindexFirstNotTreeValid) pindexFirstNotTreeValid = NULL;\n+            if (pindex == pindexFirstNotTransactionsValid) pindexFirstNotTransactionsValid = NULL;\n             if (pindex == pindexFirstNotChainValid) pindexFirstNotChainValid = NULL;\n             if (pindex == pindexFirstNotScriptsValid) pindexFirstNotScriptsValid = NULL;\n             // Find our parent."
      }
    ]
  }
]