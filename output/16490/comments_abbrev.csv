DrahtBot,2019-07-31 10:16:07,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17809 (rpc: Auto-format RPCResult by MarcoFalke)\n* #17786 (refactor: Nuke policy/fees->mempool circular dependencies by ",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-516788831,516788831,
laanwj,2019-08-14 11:27:25,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-521207702,521207702,
MarcoFalke,2019-08-20 18:28:07,Added test,https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-523139224,523139224,
luke-jr,2019-09-02 23:09:38,"BIP 125 is pretty straightforward... Any other policy *isn't* BIP 125.\n\nIt would be incorrect for `""bip125-replacable""` to show true/false based on anything other than BIP 125.\n\nIf we want to be clearer with regard to different policies, we need a new boolean too. Or just a string/null field. A string that doesn't answer the main ""is this replacable?"" question isn't very helpful.",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-527255510,527255510,
MarcoFalke,2019-09-05 01:35:33,"Ok, made it a new optional string, without modifying existing return values",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-528157918,528157918,
MarcoFalke,2019-10-11 18:57:44,"Ok, changed to what @fjahr suggested",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-541184460,541184460,
fjahr,2019-10-12 14:46:12,tested ACK fa5d55d,https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-541331311,541331311,
MarcoFalke,2019-10-18 20:45:04,"This has three ACKs, so I will probably merge it in the next few days unless there are objections.",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-543936433,543936433,
sdaftuar,2019-10-22 15:37:19,"This change seems premature to me -- it only seems to make sense in a world where we've updated our actual policy rules to include other-than-bip-125 replacement, which we've not done (yet).\n\nIn the meantime, having an extra ""replaceable"" field on top of ""bip-125-replaceable"" seems like it will confuse our users.  I don't think we should make a change like this in a release where bip 125 repla",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-545022926,545022926,
ryanofsky,2019-10-22 17:12:52,"> seems like it will confuse our users\n\nMight be less confusing to mark the old field as deprecated, and maybe start the process of removing it with deprecation flags.\n\nIf policy rules are likely to be updated in the future, updating the RPC interface sooner that could allow writing more robust RPC client code that won't have to change later. If I were writing RPC client code and knew ther",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-545063043,545063043,
sdaftuar,2019-10-22 17:44:18,"@ryanofsky If we had consensus to change our policy rules, then I'd agree that marking the old field as deprecated would make sense to allow people to prepare.  But I think the issue has been that we haven't reached that consensus yet (I believe several PRs in the last year or two that proposed new replacement policies have stalled out or been closed).\n",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-545075686,545075686,
ryanofsky,2019-10-22 18:25:25,"Achieving consensus about changing policy rules and achieving consensus about future-proofing an RPC seem like things that _could_ be done separately. That'd probably be my inclination, so I'd keep my previous ACK here. But I don't have a very strong opinion, and really just wanted to add the practical suggestion to document the less general field as deprecated to avoid confusion, or at least ment",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-545092288,545092288,
DrahtBot,2020-03-04 14:28:17,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-594555982,594555982,
mjdietzx,2021-11-29 14:39:08,"Concept ACK fa46f68211ae6616a42c0fd1467fdd5710cd3b72\n\nI think I am a concept NACK fa5d55d4eda6f88e7424e58c33b7522a33cad30e, along the lines of @luke-jr 's initial comment here",https://github.com/bitcoin/bitcoin/pull/16490#issuecomment-981695495,981695495,
practicalswift,2019-08-18 21:27:22,"Should be ""replaceable"" :-)",https://github.com/bitcoin/bitcoin/pull/16490#discussion_r315003112,315003112,src/policy/rbf.h
practicalswift,2019-08-18 21:27:35,Same :-),https://github.com/bitcoin/bitcoin/pull/16490#discussion_r315003121,315003121,src/rpc/blockchain.cpp
practicalswift,2019-08-18 21:27:42,And same :-),https://github.com/bitcoin/bitcoin/pull/16490#discussion_r315003124,315003124,src/rpc/blockchain.cpp
fjahr,2019-10-11 14:28:45,typo: this this,https://github.com/bitcoin/bitcoin/pull/16490#discussion_r334019720,334019720,src/rpc/blockchain.cpp
MarcoFalke,2019-10-11 18:41:59,"Thanks, fixed typo",https://github.com/bitcoin/bitcoin/pull/16490#discussion_r334125914,334125914,src/rpc/blockchain.cpp
promag,2019-10-12 15:32:49,Have you considered not adding the key at all?,https://github.com/bitcoin/bitcoin/pull/16490#discussion_r334242628,334242628,src/rpc/blockchain.cpp
MarcoFalke,2019-10-13 19:24:24,"The caller doesn't have to use it. I think it might be helpful to see the reason why something is replaceable, no?",https://github.com/bitcoin/bitcoin/pull/16490#discussion_r334292320,334292320,src/rpc/blockchain.cpp
promag,2019-10-13 19:33:44,"Ops, I mean when it's null.",https://github.com/bitcoin/bitcoin/pull/16490#discussion_r334292718,334292718,src/rpc/blockchain.cpp
MarcoFalke,2019-10-13 19:36:36,A missing key will throw `KeyError` for the caller,https://github.com/bitcoin/bitcoin/pull/16490#discussion_r334292853,334292853,src/rpc/blockchain.cpp
luke-jr,2019-10-13 21:49:30,"That depends on the caller's programming language and API of choice.\n\nIf they choose a language that gives `KeyError`, then they should expect it...",https://github.com/bitcoin/bitcoin/pull/16490#discussion_r334298604,334298604,src/rpc/blockchain.cpp
MarcoFalke,2019-10-14 14:26:12,I think it is not a good api design to make parsing depend on the result,https://github.com/bitcoin/bitcoin/pull/16490#discussion_r334508912,334508912,src/rpc/blockchain.cpp
promag,2019-10-16 06:40:32,"No strong feeling but it was already suggested (and implemented) elsewhere to omit keys when not applicable. For instance, search for ""present"" in rpcwallet.cpp.",https://github.com/bitcoin/bitcoin/pull/16490#discussion_r335299747,335299747,src/rpc/blockchain.cpp
MarcoFalke,2019-10-16 12:21:24,Lets discuss this in #17155 ,https://github.com/bitcoin/bitcoin/pull/16490#discussion_r335440107,335440107,src/rpc/blockchain.cpp
ryanofsky,2019-10-18 20:21:56,"Maybe with #17192 this would be updated to something like:\n\n```c++\n    switch (state) {\n    case RBFTransactionState::REPLACEABLE_BIP125:\n        return ""bip125"";\n    case RBFTransactionState::FINAL:\n        return NullUniValue; // not replaceable\n    case RBFTransactionState::UNKNOWN:\n        break; // should never happen\n    }\n    CHECK_NONFATAL(false);\n```",https://github.com/bitcoin/bitcoin/pull/16490#discussion_r336661898,336661898,src/rpc/blockchain.cpp
MarcoFalke,2019-10-18 20:36:31,Indeed. Will adjust the second of the pulls that gets merged accordingly.,https://github.com/bitcoin/bitcoin/pull/16490#discussion_r336666657,336666657,src/rpc/blockchain.cpp
MarcoFalke,2019-10-18 20:44:03,Closing this discussion,https://github.com/bitcoin/bitcoin/pull/16490#discussion_r336669081,336669081,src/rpc/blockchain.cpp
promag,2019-12-17 10:12:09,Please rebase as this change is already in master.,https://github.com/bitcoin/bitcoin/pull/16490#discussion_r358704189,358704189,src/txmempool.cpp
fanquake,2021-03-15 02:07:25,Please [use `std::optional` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/optional.h#L12).,https://github.com/bitcoin/bitcoin/pull/16490#discussion_r594006870,594006870,src/policy/rbf.cpp
