[
  {
    "sha": "f1920e86063d0ed008c6028d8223b0e21889bf75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTkyMGU4NjA2M2QwZWQwMDhjNjAyOGQ4MjIzYjBlMjE4ODliZjc1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-10-14T22:34:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-09T21:06:56Z"
      },
      "message": "Ping automatically every 2 minutes (unconditionally)\n\n... instead of after 30 minutes of no sending, for latency measurement\nand keep-alive. Also, disconnect if no reply arrives within 20 minutes,\ninstead of 90 of inactivity (for peers supporting the 'pong' message).",
      "tree": {
        "sha": "73819080978357908611074ede88c08d503dadc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73819080978357908611074ede88c08d503dadc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1920e86063d0ed008c6028d8223b0e21889bf75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1920e86063d0ed008c6028d8223b0e21889bf75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1920e86063d0ed008c6028d8223b0e21889bf75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1920e86063d0ed008c6028d8223b0e21889bf75/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6741837233eec841f84131548befcfea8ebf6f14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6741837233eec841f84131548befcfea8ebf6f14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6741837233eec841f84131548befcfea8ebf6f14"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 27,
      "deletions": 17
    },
    "files": [
      {
        "sha": "dd33f443bfeeafd4231e49fbd1ce23b6348af4c0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1920e86063d0ed008c6028d8223b0e21889bf75/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1920e86063d0ed008c6028d8223b0e21889bf75/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f1920e86063d0ed008c6028d8223b0e21889bf75",
        "patch": "@@ -4296,24 +4296,23 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             // RPC ping request by user\n             pingSend = true;\n         }\n-        if (pto->nLastSend && GetTime() - pto->nLastSend > 30 * 60 && pto->vSendMsg.empty()) {\n-            // Ping automatically sent as a keepalive\n+        if (pto->nPingNonceSent == 0 && pto->nPingUsecStart + PING_INTERVAL * 1000000 < GetTimeMicros()) {\n+            // Ping automatically sent as a latency probe & keepalive.\n             pingSend = true;\n         }\n         if (pingSend) {\n             uint64_t nonce = 0;\n             while (nonce == 0) {\n                 RAND_bytes((unsigned char*)&nonce, sizeof(nonce));\n             }\n-            pto->nPingNonceSent = nonce;\n             pto->fPingQueued = false;\n+            pto->nPingUsecStart = GetTimeMicros();\n             if (pto->nVersion > BIP0031_VERSION) {\n-                // Take timestamp as close as possible before transmitting ping\n-                pto->nPingUsecStart = GetTimeMicros();\n+                pto->nPingNonceSent = nonce;\n                 pto->PushMessage(\"ping\", nonce);\n             } else {\n-                // Peer is too old to support ping command with nonce, pong will never arrive, disable timing\n-                pto->nPingUsecStart = 0;\n+                // Peer is too old to support ping command with nonce, pong will never arrive.\n+                pto->nPingNonceSent = 0;\n                 pto->PushMessage(\"ping\");\n             }\n         }"
      },
      {
        "sha": "fe6e9337ae366b1dcd4a14b57043a4bb30e4fdfc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1920e86063d0ed008c6028d8223b0e21889bf75/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1920e86063d0ed008c6028d8223b0e21889bf75/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f1920e86063d0ed008c6028d8223b0e21889bf75",
        "patch": "@@ -1028,23 +1028,27 @@ void ThreadSocketHandler()\n             //\n             // Inactivity checking\n             //\n-            if (pnode->vSendMsg.empty())\n-                pnode->nLastSendEmpty = GetTime();\n-            if (GetTime() - pnode->nTimeConnected > 60)\n+            int64_t nTime = GetTime();\n+            if (nTime - pnode->nTimeConnected > 60)\n             {\n                 if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n                 {\n                     LogPrint(\"net\", \"socket no message in first 60 seconds, %d %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0);\n                     pnode->fDisconnect = true;\n                 }\n-                else if (GetTime() - pnode->nLastSend > 90*60 && GetTime() - pnode->nLastSendEmpty > 90*60)\n+                else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n                 {\n-                    LogPrintf(\"socket not sending\\n\");\n+                    LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n                     pnode->fDisconnect = true;\n                 }\n-                else if (GetTime() - pnode->nLastRecv > 90*60)\n+                else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n                 {\n-                    LogPrintf(\"socket inactivity timeout\\n\");\n+                    LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < GetTimeMicros())\n+                {\n+                    LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n                     pnode->fDisconnect = true;\n                 }\n             }"
      },
      {
        "sha": "7a77e55a14c422a0a0c6acfd5338cd8ce9a57099",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1920e86063d0ed008c6028d8223b0e21889bf75/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1920e86063d0ed008c6028d8223b0e21889bf75/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f1920e86063d0ed008c6028d8223b0e21889bf75",
        "patch": "@@ -28,6 +28,7 @@\n #include <boost/signals2/signal.hpp>\n #include <openssl/rand.h>\n \n+\n class CAddrMan;\n class CBlockIndex;\n class CNode;\n@@ -36,6 +37,10 @@ namespace boost {\n     class thread_group;\n }\n \n+/** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n+static const int PING_INTERVAL = 2 * 60;\n+/** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n+static const int TIMEOUT_INTERVAL = 20 * 60;\n /** The maximum number of entries in an 'inv' protocol message */\n static const unsigned int MAX_INV_SZ = 50000;\n /** -upnp default */\n@@ -217,7 +222,6 @@ class CNode\n \n     int64_t nLastSend;\n     int64_t nLastRecv;\n-    int64_t nLastSendEmpty;\n     int64_t nTimeConnected;\n     CAddress addr;\n     std::string addrName;\n@@ -273,10 +277,14 @@ class CNode\n     CCriticalSection cs_inventory;\n     std::multimap<int64_t, CInv> mapAskFor;\n \n-    // Ping time measurement\n+    // Ping time measurement:\n+    // The pong reply we're expecting, or 0 if no pong expected.\n     uint64_t nPingNonceSent;\n+    // Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n     int64_t nPingUsecStart;\n+    // Last measured round-trip time.\n     int64_t nPingUsecTime;\n+    // Whether a ping is requested.\n     bool fPingQueued;\n \n     CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false) : ssSend(SER_NETWORK, INIT_PROTO_VERSION), setAddrKnown(5000)\n@@ -288,7 +296,6 @@ class CNode\n         nLastRecv = 0;\n         nSendBytes = 0;\n         nRecvBytes = 0;\n-        nLastSendEmpty = GetTime();\n         nTimeConnected = GetTime();\n         addr = addrIn;\n         addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;"
      }
    ]
  }
]