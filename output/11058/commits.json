[
  {
    "sha": "360b464a08ac42a9a249b34c1a780ada2d4f610a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjBiNDY0YTA4YWM0MmE5YTI0OWIzNGMxYTc4MGFkYTJkNGY2MTBh",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-08-16T00:55:26Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-08-18T21:45:08Z"
      },
      "message": "Comments: More comments on functions/globals in standard.h.",
      "tree": {
        "sha": "435784e2e9fe7517d5cd88d8610faba3a461fa30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/435784e2e9fe7517d5cd88d8610faba3a461fa30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/360b464a08ac42a9a249b34c1a780ada2d4f610a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/360b464a08ac42a9a249b34c1a780ada2d4f610a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/360b464a08ac42a9a249b34c1a780ada2d4f610a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/360b464a08ac42a9a249b34c1a780ada2d4f610a/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "262167393d05eb46b962cf0515a6dc73c4cec8ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/262167393d05eb46b962cf0515a6dc73c4cec8ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/262167393d05eb46b962cf0515a6dc73c4cec8ea"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 58,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2aed393921269e7647ba05d26435c2db02763b19",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/360b464a08ac42a9a249b34c1a780ada2d4f610a/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/360b464a08ac42a9a249b34c1a780ada2d4f610a/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=360b464a08ac42a9a249b34c1a780ada2d4f610a",
        "patch": "@@ -34,9 +34,6 @@ const char* GetTxnOutputType(txnouttype t)\n     return nullptr;\n }\n \n-/**\n- * Return public keys or hashes from scriptPubKey, for 'standard' transaction types.\n- */\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet)\n {\n     // Templates"
      },
      {
        "sha": "76191922647f2699cf3c1d51de5d1f72a381b6c1",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 58,
        "deletions": 4,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/360b464a08ac42a9a249b34c1a780ada2d4f610a/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/360b464a08ac42a9a249b34c1a780ada2d4f610a/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=360b464a08ac42a9a249b34c1a780ada2d4f610a",
        "patch": "@@ -27,16 +27,27 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 83; //!< bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n+/**\n+ * Default setting for nMaxDatacarrierBytes. 80 bytes of data, +1 for OP_RETURN,\n+ * +2 for the pushdata opcodes.\n+ */\n+static const unsigned int MAX_OP_RETURN_RELAY = 83;\n+\n+/**\n+ * A data carrying output is an unspendable output containing data. The script\n+ * type is designated as TX_NULL_DATA.\n+ */\n extern bool fAcceptDatacarrier;\n+\n+/** Maximum size of TX_NULL_DATA scripts that this node considers standard. */\n extern unsigned nMaxDatacarrierBytes;\n \n /**\n  * Mandatory script verification flags that all new blocks must comply with for\n  * them to be valid. (but old blocks may not comply with) Currently just P2SH,\n  * but in the future other flags may be added, such as a soft-fork to enforce\n  * strict DER encoding.\n- * \n+ *\n  * Failing one of these tests may trigger a DoS ban - see CheckInputs() for\n  * details.\n  */\n@@ -50,7 +61,7 @@ enum txnouttype\n     TX_PUBKEYHASH,\n     TX_SCRIPTHASH,\n     TX_MULTISIG,\n-    TX_NULL_DATA,\n+    TX_NULL_DATA, //!< unspendable OP_RETURN script that carries data\n     TX_WITNESS_V0_SCRIPTHASH,\n     TX_WITNESS_V0_KEYHASH,\n };\n@@ -61,7 +72,7 @@ class CNoDestination {\n     friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n };\n \n-/** \n+/**\n  * A txout script template with a specific destination. It is either:\n  *  * CNoDestination: no destination set\n  *  * CKeyID: TX_PUBKEYHASH destination\n@@ -70,15 +81,58 @@ class CNoDestination {\n  */\n typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n \n+/** Get the name of a txnouttype as a C string, or nullptr if unknown. */\n const char* GetTxnOutputType(txnouttype t);\n \n+/**\n+ * Parse a scriptPubKey and identify script type for standard scripts. If\n+ * successful, returns script type and parsed pubkeys or hashes, depending on\n+ * the type. For example, for a P2SH script, vSolutionsRet will contain the\n+ * script hash, for P2PKH it will contain the key hash, etc.\n+ *\n+ * @param[in]   scriptPubKey   Script to parse\n+ * @param[out]  typeRet        The script type\n+ * @param[out]  vSolutionsRet  Vector of parsed pubkeys and hashes\n+ * @return                     True if script matches standard template\n+ */\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n+\n+/**\n+ * Parse a standard scriptPubKey for the destination address. Assigns result to\n+ * the addressRet parameter and returns true if successful. For multisig\n+ * scripts, instead use ExtractDestinations. Currently only works for P2PK,\n+ * P2PKH, and P2SH scripts.\n+ */\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n+\n+/**\n+ * Parse a standard scriptPubKey with one or more destination addresses. For\n+ * multisig scripts, this populates the addressRet vector with the pubkey IDs\n+ * and nRequiredRet with the n required to spend. For other destinations,\n+ * addressRet is populated with a single value and nRequiredRet is set to 1.\n+ * Returns true if successful. Currently does not extract address from\n+ * pay-to-witness scripts.\n+ */\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n \n+/**\n+ * Generate a Bitcoin scriptPubKey for the given CTxDestination. Returns a P2PKH\n+ * script for a CKeyID destination, a P2SH script for a CScriptID, and an empty\n+ * script for CNoDestination.\n+ */\n CScript GetScriptForDestination(const CTxDestination& dest);\n+\n+/** Generate a P2PK script for the given pubkey. */\n CScript GetScriptForRawPubKey(const CPubKey& pubkey);\n+\n+/** Generate a multisig script. */\n CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n+\n+/**\n+ * Generate a pay-to-witness script for the given redeem script. If the redeem\n+ * script is P2PK or P2PKH, this returns a P2WPKH script, otherwise it returns a\n+ * P2WSH script.\n+ */\n CScript GetScriptForWitness(const CScript& redeemscript);\n \n #endif // BITCOIN_SCRIPT_STANDARD_H"
      }
    ]
  }
]