[
  {
    "sha": "e9473c871cae28dd57650484e7099a68e4a61ddf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTQ3M2M4NzFjYWUyOGRkNTc2NTA0ODRlNzA5OWE2OGU0YTYxZGRm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-05T16:02:33Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-05T16:02:33Z"
      },
      "message": "Remove redundant on-the-same-line-repetition of type names (DRY): RepeatedTypeName foo = static_cast<RepeatedTypeName>(bar)\n\nSee the [C++ Core Guidelines](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es11-use-auto-to-avoid-redundant-repetition-of-type-names) for a general discussion on the use of `auto` to avoid redundant repetition of type names.",
      "tree": {
        "sha": "67677fcde55b915245768bc0287869c1d6c0a9f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67677fcde55b915245768bc0287869c1d6c0a9f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9473c871cae28dd57650484e7099a68e4a61ddf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9473c871cae28dd57650484e7099a68e4a61ddf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9473c871cae28dd57650484e7099a68e4a61ddf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9473c871cae28dd57650484e7099a68e4a61ddf/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35da2aeed7d4000dde93957c3b6e048ab83c4f2b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f56a40dc1416b8a4f653ce5f1eb9fac72da0889f",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9473c871cae28dd57650484e7099a68e4a61ddf/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9473c871cae28dd57650484e7099a68e4a61ddf/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=e9473c871cae28dd57650484e7099a68e4a61ddf",
        "patch": "@@ -156,7 +156,7 @@ const char *http_errorstring(int code)\n \n static void http_request_done(struct evhttp_request *req, void *ctx)\n {\n-    HTTPReply *reply = static_cast<HTTPReply*>(ctx);\n+    auto *reply = static_cast<HTTPReply*>(ctx);\n \n     if (req == NULL) {\n         /* If req is NULL, it means an error occurred while connecting: the\n@@ -182,7 +182,7 @@ static void http_request_done(struct evhttp_request *req, void *ctx)\n #if LIBEVENT_VERSION_NUMBER >= 0x02010300\n static void http_error_cb(enum evhttp_request_error err, void *ctx)\n {\n-    HTTPReply *reply = static_cast<HTTPReply*>(ctx);\n+    auto *reply = static_cast<HTTPReply*>(ctx);\n     reply->error = err;\n }\n #endif"
      },
      {
        "sha": "367976b26996c7aae73ca4299bbe09a5fb4c566e",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9473c871cae28dd57650484e7099a68e4a61ddf/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9473c871cae28dd57650484e7099a68e4a61ddf/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=e9473c871cae28dd57650484e7099a68e4a61ddf",
        "patch": "@@ -393,7 +393,7 @@ static UniValue GetNetworksInfo()\n     UniValue networks(UniValue::VARR);\n     for(int n=0; n<NET_MAX; ++n)\n     {\n-        enum Network network = static_cast<enum Network>(n);\n+        auto network = static_cast<enum Network>(n);\n         if(network == NET_UNROUTABLE)\n             continue;\n         proxyType proxy;"
      },
      {
        "sha": "ce47c6efb61aa6b20db3f72913cbc994fb84b164",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9473c871cae28dd57650484e7099a68e4a61ddf/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9473c871cae28dd57650484e7099a68e4a61ddf/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=e9473c871cae28dd57650484e7099a68e4a61ddf",
        "patch": "@@ -92,7 +92,7 @@ bool CBlockTreeDB::ReadLastBlockFile(int &nFile) {\n \n CCoinsViewCursor *CCoinsViewDB::Cursor() const\n {\n-    CCoinsViewDBCursor *i = new CCoinsViewDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator(), GetBestBlock());\n+    auto *i = new CCoinsViewDBCursor(const_cast<CDBWrapper*>(&db)->NewIterator(), GetBestBlock());\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */"
      },
      {
        "sha": "d58bb7c0b38f8538841073c7994a2be87d5b7e09",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9473c871cae28dd57650484e7099a68e4a61ddf/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9473c871cae28dd57650484e7099a68e4a61ddf/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e9473c871cae28dd57650484e7099a68e4a61ddf",
        "patch": "@@ -3837,7 +3837,7 @@ bool InitBlockIndex(const CChainParams& chainparams)\n     // Only add the genesis block if not reindexing (in which case we reuse the one already on disk)\n     if (!fReindex) {\n         try {\n-            CBlock &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n+            auto &block = const_cast<CBlock&>(chainparams.GenesisBlock());\n             // Start new block file\n             unsigned int nBlockSize = ::GetSerializeSize(block, SER_DISK, CLIENT_VERSION);\n             CDiskBlockPos blockPos;"
      },
      {
        "sha": "cd03e4b1b48ef5373d18a0f9c287a81d1cedba67",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9473c871cae28dd57650484e7099a68e4a61ddf/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9473c871cae28dd57650484e7099a68e4a61ddf/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=e9473c871cae28dd57650484e7099a68e4a61ddf",
        "patch": "@@ -821,7 +821,7 @@ bool CWalletDB::Recover(const std::string& filename)\n \n bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n {\n-    CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n+    auto *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n     CWalletScanState dummyWss;\n     std::string strType, strErr;\n     bool fReadOK;"
      }
    ]
  }
]