[
  {
    "sha": "fa70ccc6c4e304646b4610228f3975b3a9762643",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTcwY2NjNmM0ZTMwNDY0NmI0NjEwMjI4ZjM5NzViM2E5NzYyNjQz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-06T22:35:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-07T13:58:38Z"
      },
      "message": "scheduler: Use C++11 member initialization, add shutdown assert\n\n\"Initializing the members in the declaration makes it easy to spot\nuninitialized ones\".\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures",
      "tree": {
        "sha": "6e71660d0e31639aff2638332fc273a0198956ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e71660d0e31639aff2638332fc273a0198956ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa70ccc6c4e304646b4610228f3975b3a9762643",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhCnAwAroYQwvGnSxsmmlWKJRHX527Y6id93TftYzurCyYV6eK2pGnWjJM2H3ff\nMqkqyduEf64u6lgx2oq/FdO3PqE/Sa9cGEoMEYoVY9+JBEwIixIU8ISfQ7lhC57e\nG3+9D9GiR4tVyR27OSBNIE3GzhSPU+NM2VxpdCYs5EgsrVEuimuDT2kcefcGtbbt\n9KjEO8/T/GOeL1kZ1Fi4j2lF+a+eZ2LpNNSgTek0GgENFaqXGDbWOIS2Shp4AB+x\n0PFZdB5U7eAQ5H9UXgI4XqOR8mzvV1tp7AAcJsxkX5rh/FMTYowoX259/39XWqAt\n8efBLDpJnxb4RRKK9jMpsAjMG0iWqOsA6fS+4o22h8hm4BcH1c+TD8nWdfmYwqKT\nYUPJ7+ULEergLFEUMt4tXDqKllW43dsOq8YPIZwbNrPuykZEF1XMLj2BGZwV1TXl\nR8iUWaXxzResdwerdcZbrGL+NPIZDyVwOADm3szKiWxkD9kkFl/q0M+LvPc71W7a\nBqXuWc/6\n=I5Au\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e71660d0e31639aff2638332fc273a0198956ab\nparent 3516a31eaa7714a815e0346625ae096f281d3d9e\nauthor MarcoFalke <falke.marco@gmail.com> 1583534109 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1583589518 -0500\n\nscheduler: Use C++11 member initialization, add shutdown assert\n\n\"Initializing the members in the declaration makes it easy to spot\nuninitialized ones\".\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa70ccc6c4e304646b4610228f3975b3a9762643",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa70ccc6c4e304646b4610228f3975b3a9762643",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa70ccc6c4e304646b4610228f3975b3a9762643/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3516a31eaa7714a815e0346625ae096f281d3d9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3516a31eaa7714a815e0346625ae096f281d3d9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3516a31eaa7714a815e0346625ae096f281d3d9e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "67e17d074beece8c366861cd95f81337aad5b8ae",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa70ccc6c4e304646b4610228f3975b3a9762643/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa70ccc6c4e304646b4610228f3975b3a9762643/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=fa70ccc6c4e304646b4610228f3975b3a9762643",
        "patch": "@@ -9,13 +9,14 @@\n #include <assert.h>\n #include <utility>\n \n-CScheduler::CScheduler() : nThreadsServicingQueue(0), stopRequested(false), stopWhenEmpty(false)\n+CScheduler::CScheduler()\n {\n }\n \n CScheduler::~CScheduler()\n {\n     assert(nThreadsServicingQueue == 0);\n+    if (stopWhenEmpty) assert(taskQueue.empty());\n }\n \n "
      },
      {
        "sha": "71d1726c4f55a1570c4b8d9ce12aff45c4bbb779",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa70ccc6c4e304646b4610228f3975b3a9762643/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa70ccc6c4e304646b4610228f3975b3a9762643/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=fa70ccc6c4e304646b4610228f3975b3a9762643",
        "patch": "@@ -86,9 +86,9 @@ class CScheduler\n     mutable Mutex newTaskMutex;\n     std::condition_variable newTaskScheduled;\n     std::multimap<std::chrono::system_clock::time_point, Function> taskQueue GUARDED_BY(newTaskMutex);\n-    int nThreadsServicingQueue GUARDED_BY(newTaskMutex);\n-    bool stopRequested GUARDED_BY(newTaskMutex);\n-    bool stopWhenEmpty GUARDED_BY(newTaskMutex);\n+    int nThreadsServicingQueue GUARDED_BY(newTaskMutex){0};\n+    bool stopRequested GUARDED_BY(newTaskMutex){false};\n+    bool stopWhenEmpty GUARDED_BY(newTaskMutex){false};\n     bool shouldStop() const EXCLUSIVE_LOCKS_REQUIRED(newTaskMutex) { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n "
      }
    ]
  },
  {
    "sha": "fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRhZmI4M2NmZjlhOWEzNDBlYWMxYjVhODUzZTI0NjdkNWUwZWY3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-06T23:06:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-10T13:47:32Z"
      },
      "message": "scheduler: Make schedule* methods type safe",
      "tree": {
        "sha": "62583dfe70fc70cfde198ca12c1872ef79adc5a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62583dfe70fc70cfde198ca12c1872ef79adc5a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh59Av/dLU55VtATbl+F0/eD5Fx/6Msa+xBoOh2kMExkW/NT+MgtBEObNKpniiU\ngd7ygea4lPyAKqlKEqko0mHDCvmJF/UdcQ1bASxQ9RwG41u3Dau0YPZkDHQPbNER\nISsFARko43mAQQ1/VJOijC3gdsxAe/9w09TzJ2kExP7c7ZBkWUWYWPkRbbGpPOeA\n3wKL5pK4Fs2RvHMk+kDxPRThVLKYbhpQvGEg1LaM4eX3oQePMMBfTlyHTr1h3Gu0\nKpCpcLzusf0ATra6eacvOzx8m2/SpuC/syDEalJA+QgktD85MFOVI+2YxcDA2kqC\neF81k+YkptTySdh+bsb+C/SnmMfAYW+8jNdMme2odU0vIRTdHW1x0/9NRfmqf9tz\nY7X9RgD5EVzLI+someqRLtZkD2Iw6xlTcCDKUbeGoOEwkZUxVaEJ4OcjKQzxvR/w\neyRfFQybG0axDOWGyt2oT/rFPh8qOqQcMkr8Y8h1IFCtPUXZ0Y7+8hsHio7rqPxK\nEnIqpuzG\n=GRfZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 62583dfe70fc70cfde198ca12c1872ef79adc5a6\nparent fa70ccc6c4e304646b4610228f3975b3a9762643\nauthor MarcoFalke <falke.marco@gmail.com> 1583536010 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1583848052 -0400\n\nscheduler: Make schedule* methods type safe\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa70ccc6c4e304646b4610228f3975b3a9762643",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa70ccc6c4e304646b4610228f3975b3a9762643",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa70ccc6c4e304646b4610228f3975b3a9762643"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 34,
      "deletions": 35
    },
    "files": [
      {
        "sha": "eaabcf7382912bf82f41baa4a6b1c3e37ae71ffd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
        "patch": "@@ -86,8 +86,8 @@ static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n-// Dump addresses to banlist.dat every 15 minutes (900s)\n-static constexpr int DUMP_BANS_INTERVAL = 60 * 15;\n+// How often to dump addresses to banlist.dat\n+static constexpr std::chrono::minutes DUMP_BANS_INTERVAL{15};\n \n \n #ifdef WIN32\n@@ -1278,7 +1278,7 @@ bool AppInitMain(NodeContext& node)\n     // Gather some entropy once per minute.\n     node.scheduler->scheduleEvery([]{\n         RandAddPeriodic();\n-    }, 60000);\n+    }, std::chrono::minutes{1});\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n@@ -1863,7 +1863,7 @@ bool AppInitMain(NodeContext& node)\n     BanMan* banman = node.banman.get();\n     node.scheduler->scheduleEvery([banman]{\n         banman->DumpBanlist();\n-    }, DUMP_BANS_INTERVAL * 1000);\n+    }, DUMP_BANS_INTERVAL);\n \n     return true;\n }"
      },
      {
        "sha": "8352c40b98262dc2a8970f771970dac23826df52",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
        "patch": "@@ -45,8 +45,8 @@ static_assert(MINIUPNPC_API_VERSION >= 10, \"miniUPnPc API version >= 10 assumed\"\n \n #include <math.h>\n \n-// Dump addresses to peers.dat every 15 minutes (900s)\n-static constexpr int DUMP_PEERS_INTERVAL = 15 * 60;\n+// How often to dump addresses to peers.dat\n+static constexpr std::chrono::minutes DUMP_PEERS_INTERVAL{15};\n \n /** Number of DNS seeds to query when the number of connections is low. */\n static constexpr int DNSSEEDS_TO_QUERY_AT_ONCE = 3;\n@@ -2343,7 +2343,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     threadMessageHandler = std::thread(&TraceThread<std::function<void()> >, \"msghand\", std::function<void()>(std::bind(&CConnman::ThreadMessageHandler, this)));\n \n     // Dump network addresses\n-    scheduler.scheduleEvery(std::bind(&CConnman::DumpAddresses, this), DUMP_PEERS_INTERVAL * 1000);\n+    scheduler.scheduleEvery([this] { DumpAddresses(); }, DUMP_PEERS_INTERVAL);\n \n     return true;\n }"
      },
      {
        "sha": "b9f77685abf5f6a4c821f1329fd1d65621225f8d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
        "patch": "@@ -1124,7 +1124,7 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CS\n     // combine them in one function and schedule at the quicker (peer-eviction)\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n-    scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\n+    scheduler.scheduleEvery([&] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n }\n \n /**"
      },
      {
        "sha": "4cac5a54e0010f45a974487356573f150653b2f2",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
        "patch": "@@ -92,11 +92,6 @@ void CScheduler::schedule(CScheduler::Function f, std::chrono::system_clock::tim\n     newTaskScheduled.notify_one();\n }\n \n-void CScheduler::scheduleFromNow(CScheduler::Function f, int64_t deltaMilliSeconds)\n-{\n-    schedule(f, std::chrono::system_clock::now() + std::chrono::milliseconds(deltaMilliSeconds));\n-}\n-\n void CScheduler::MockForward(std::chrono::seconds delta_seconds)\n {\n     assert(delta_seconds.count() > 0 && delta_seconds < std::chrono::hours{1});\n@@ -119,15 +114,15 @@ void CScheduler::MockForward(std::chrono::seconds delta_seconds)\n     newTaskScheduled.notify_one();\n }\n \n-static void Repeat(CScheduler* s, CScheduler::Function f, int64_t deltaMilliSeconds)\n+static void Repeat(CScheduler& s, CScheduler::Function f, std::chrono::milliseconds delta)\n {\n     f();\n-    s->scheduleFromNow(std::bind(&Repeat, s, f, deltaMilliSeconds), deltaMilliSeconds);\n+    s.scheduleFromNow([=, &s] { Repeat(s, f, delta); }, delta);\n }\n \n-void CScheduler::scheduleEvery(CScheduler::Function f, int64_t deltaMilliSeconds)\n+void CScheduler::scheduleEvery(CScheduler::Function f, std::chrono::milliseconds delta)\n {\n-    scheduleFromNow(std::bind(&Repeat, this, f, deltaMilliSeconds), deltaMilliSeconds);\n+    scheduleFromNow([=] { Repeat(*this, f, delta); }, delta);\n }\n \n size_t CScheduler::getQueueInfo(std::chrono::system_clock::time_point &first,"
      },
      {
        "sha": "1e6419548460465c80bebd2b50d69dbfbf49df45",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
        "patch": "@@ -24,8 +24,8 @@\n // Usage:\n //\n // CScheduler* s = new CScheduler();\n-// s->scheduleFromNow(doSomething, 11); // Assuming a: void doSomething() { }\n-// s->scheduleFromNow(std::bind(Class::func, this, argument), 3);\n+// s->scheduleFromNow(doSomething, std::chrono::milliseconds{11}); // Assuming a: void doSomething() { }\n+// s->scheduleFromNow([=] { this->func(argument); }, std::chrono::milliseconds{3});\n // boost::thread* t = new boost::thread(std::bind(CScheduler::serviceQueue, s));\n //\n // ... then at program shutdown, make sure to call stop() to clean up the thread(s) running serviceQueue:\n@@ -46,15 +46,19 @@ class CScheduler\n     // Call func at/after time t\n     void schedule(Function f, std::chrono::system_clock::time_point t);\n \n-    // Convenience method: call f once deltaMilliSeconds from now\n-    void scheduleFromNow(Function f, int64_t deltaMilliSeconds);\n+    /** Call f once after the delta has passed */\n+    void scheduleFromNow(Function f, std::chrono::milliseconds delta)\n+    {\n+        schedule(std::move(f), std::chrono::system_clock::now() + delta);\n+    }\n \n-    // Another convenience method: call f approximately\n-    // every deltaMilliSeconds forever, starting deltaMilliSeconds from now.\n-    // To be more precise: every time f is finished, it\n-    // is rescheduled to run deltaMilliSeconds later. If you\n-    // need more accurate scheduling, don't use this method.\n-    void scheduleEvery(Function f, int64_t deltaMilliSeconds);\n+    /**\n+     * Repeat f until the scheduler is stopped. First run is after delta has passed once.\n+     *\n+     * The timing is not exact: Every time f is finished, it is rescheduled to run again after delta. If you need more\n+     * accurate scheduling, don't use this method.\n+     */\n+    void scheduleEvery(Function f, std::chrono::milliseconds delta);\n \n     /**\n      * Mock the scheduler to fast forward in time."
      },
      {
        "sha": "fb95802b67bca11f9a4db9a523dc16f7edab4825",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
        "patch": "@@ -150,10 +150,10 @@ BOOST_AUTO_TEST_CASE(mockforward)\n     CScheduler::Function dummy = [&counter]{counter++;};\n \n     // schedule jobs for 2, 5 & 8 minutes into the future\n-    int64_t min_in_milli = 60*1000;\n-    scheduler.scheduleFromNow(dummy, 2*min_in_milli);\n-    scheduler.scheduleFromNow(dummy, 5*min_in_milli);\n-    scheduler.scheduleFromNow(dummy, 8*min_in_milli);\n+\n+    scheduler.scheduleFromNow(dummy, std::chrono::minutes{2});\n+    scheduler.scheduleFromNow(dummy, std::chrono::minutes{5});\n+    scheduler.scheduleFromNow(dummy, std::chrono::minutes{8});\n \n     // check taskQueue\n     std::chrono::system_clock::time_point first, last;\n@@ -163,10 +163,10 @@ BOOST_AUTO_TEST_CASE(mockforward)\n     std::thread scheduler_thread([&]() { scheduler.serviceQueue(); });\n \n     // bump the scheduler forward 5 minutes\n-    scheduler.MockForward(std::chrono::seconds(5*60));\n+    scheduler.MockForward(std::chrono::minutes{5});\n \n     // ensure scheduler has chance to process all tasks queued for before 1 ms from now.\n-    scheduler.scheduleFromNow([&scheduler]{ scheduler.stop(false); }, 1);\n+    scheduler.scheduleFromNow([&scheduler] { scheduler.stop(false); }, std::chrono::milliseconds{1});\n     scheduler_thread.join();\n \n     // check that the queue only has one job remaining"
      },
      {
        "sha": "3e92c07d64aed249fcbf631e6bb9788d647c1694",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
        "patch": "@@ -88,8 +88,8 @@ void StartWallets(CScheduler& scheduler)\n     }\n \n     // Schedule periodic wallet flushes and tx rebroadcasts\n-    scheduler.scheduleEvery(MaybeCompactWalletDB, 500);\n-    scheduler.scheduleEvery(MaybeResendWalletTxs, 1000);\n+    scheduler.scheduleEvery(MaybeCompactWalletDB, std::chrono::milliseconds{500});\n+    scheduler.scheduleEvery(MaybeResendWalletTxs, std::chrono::milliseconds{1000});\n }\n \n void FlushWallets()"
      }
    ]
  },
  {
    "sha": "fa36f3a29538012a6eb5c3402b3b3c18fd32b230",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM2ZjNhMjk1MzgwMTJhNmViNWMzNDAyYjNiM2MxOGZkMzJiMjMw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-10T13:58:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-10T13:52:53Z"
      },
      "message": "refactor: move DUMP_BANS_INTERVAL to banman.h",
      "tree": {
        "sha": "5624613e5a3e137b7031d94af12fcc83a1406dec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5624613e5a3e137b7031d94af12fcc83a1406dec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa36f3a29538012a6eb5c3402b3b3c18fd32b230",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUipugwAqqv8S/ALvMSU+83KkNetsWrvS9NGQp3NWx0bZIvXHIQ2IBX+TrXuC3+i\ni92Nsa2imeJoDkee9P6pq6PpioB2/qXY5esgMOMHh1CvLkHH89QPhAAI90P8S8Zr\nYLaCBjpLlb6uydYpxRYtEC5qBIXmZf+wGrsaHZjszvCZqukE607YfwGZx9PKN+8J\ncdafzvjvIY/IOFIauCfhKlnUKmEsSdPJyW4j6bZT9PNprwwJm9Lpilvh43ah1Grb\nlDWmUFVYsZKlKXDnpUToWT6RK7GxoYFZ3W1vgbGstimScT5HkEvT7OBAXsrZX99c\nliBhENtie+N4S2PqEeUukBBHeMNvoH3EMGKqoPKj0o9x15vyJ7+C66mQfbRS8J//\nWJ/GT7M6kPUVXXm/2UXibPzrFnvxLdkPbSEZRb64KzQVrppJGFNmCtYR1IkW/95h\nRWoe3NecukgsVlOPOjfhZIhBH1RRNGWxeIyBUPtNkc/MoMNpNBPl+wS89O4AUkbr\nTxHRoPn4\n=Mt1J\n-----END PGP SIGNATURE-----",
        "payload": "tree 5624613e5a3e137b7031d94af12fcc83a1406dec\nparent fadafb83cff9a9a340eac1b5a853e2467d5e0ef7\nauthor MarcoFalke <falke.marco@gmail.com> 1583848729 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1583848373 -0400\n\nrefactor: move DUMP_BANS_INTERVAL to banman.h\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa36f3a29538012a6eb5c3402b3b3c18fd32b230",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa36f3a29538012a6eb5c3402b3b3c18fd32b230",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa36f3a29538012a6eb5c3402b3b3c18fd32b230/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fadafb83cff9a9a340eac1b5a853e2467d5e0ef7"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6bea2e75e94f072d49149ce17d085f40bb0c34b2",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa36f3a29538012a6eb5c3402b3b3c18fd32b230/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa36f3a29538012a6eb5c3402b3b3c18fd32b230/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=fa36f3a29538012a6eb5c3402b3b3c18fd32b230",
        "patch": "@@ -5,16 +5,19 @@\n #ifndef BITCOIN_BANMAN_H\n #define BITCOIN_BANMAN_H\n \n-#include <cstdint>\n-#include <memory>\n-\n #include <addrdb.h>\n #include <fs.h>\n #include <net_types.h> // For banmap_t\n #include <sync.h>\n \n+#include <chrono>\n+#include <cstdint>\n+#include <memory>\n+\n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static constexpr unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24; // Default 24-hour ban\n+// How often to dump addresses to banlist.dat\n+static constexpr std::chrono::minutes DUMP_BANS_INTERVAL{15};\n \n class CClientUIInterface;\n class CNetAddr;"
      },
      {
        "sha": "22d5b8660ae6de02fc217180f683bb41c24c7a24",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa36f3a29538012a6eb5c3402b3b3c18fd32b230/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa36f3a29538012a6eb5c3402b3b3c18fd32b230/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa36f3a29538012a6eb5c3402b3b3c18fd32b230",
        "patch": "@@ -86,10 +86,6 @@ static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n-// How often to dump addresses to banlist.dat\n-static constexpr std::chrono::minutes DUMP_BANS_INTERVAL{15};\n-\n-\n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n // accessing block files don't count towards the fd_set size limit"
      }
    ]
  }
]