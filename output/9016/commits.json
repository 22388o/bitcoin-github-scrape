[
  {
    "sha": "169bdabe14ef5988ff92a7370114edc85b070b27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjliZGFiZTE0ZWY1OTg4ZmY5MmE3MzcwMTE0ZWRjODViMDcwYjI3",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-10-25T18:27:04Z"
      },
      "committer": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-10-26T19:59:33Z"
      },
      "message": "Return useful error message on ATMP failure",
      "tree": {
        "sha": "1a077ce1f422e2bad2006d282f0ea32f1f918f3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a077ce1f422e2bad2006d282f0ea32f1f918f3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/169bdabe14ef5988ff92a7370114edc85b070b27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169bdabe14ef5988ff92a7370114edc85b070b27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/169bdabe14ef5988ff92a7370114edc85b070b27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169bdabe14ef5988ff92a7370114edc85b070b27/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f08222e882b18c1f279308636e03beceece2dbf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08222e882b18c1f279308636e03beceece2dbf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f08222e882b18c1f279308636e03beceece2dbf1"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 22,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d3dc865684bf1d5044a9a3d2d773234583281a3e",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169bdabe14ef5988ff92a7370114edc85b070b27/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169bdabe14ef5988ff92a7370114edc85b070b27/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=169bdabe14ef5988ff92a7370114edc85b070b27",
        "patch": "@@ -5,6 +5,7 @@\n #include \"walletmodel.h\"\n \n #include \"addresstablemodel.h\"\n+#include \"consensus/validation.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"paymentserver.h\"\n@@ -328,7 +329,8 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         }\n \n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get()))\n+        CValidationState state;\n+        if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get(), state))\n             return TransactionCommitFailed;\n \n         CTransaction* t = (CTransaction*)newTx;"
      },
      {
        "sha": "c6a4dcc006afea758bec7bfe58d5ba651918c5e2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=169bdabe14ef5988ff92a7370114edc85b070b27",
        "patch": "@@ -6,6 +6,7 @@\n #include \"amount.h\"\n #include \"base58.h\"\n #include \"chain.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\"\n@@ -365,8 +366,11 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n-    if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get()))\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of the wallet and coins were spent in the copy but not marked as spent here.\");\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n }\n \n UniValue sendtoaddress(const JSONRPCRequest& request)\n@@ -959,8 +963,11 @@ UniValue sendmany(const JSONRPCRequest& request)\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n-    if (!pwalletMain->CommitTransaction(wtx, keyChange, g_connman.get()))\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n+        strFailReason = strprintf(\"Transaction commit failed:: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n+    }\n \n     return wtx.GetHash().GetHex();\n }"
      },
      {
        "sha": "3fc05c1c1d189bd1f03014d1c297c730295cfbb6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=169bdabe14ef5988ff92a7370114edc85b070b27",
        "patch": "@@ -1463,7 +1463,8 @@ void CWallet::ReacceptWalletTransactions()\n         CWalletTx& wtx = *(item.second);\n \n         LOCK(mempool.cs);\n-        wtx.AcceptToMemoryPool(maxTxFee);\n+        CValidationState state;\n+        wtx.AcceptToMemoryPool(maxTxFee, state);\n     }\n }\n \n@@ -2474,7 +2475,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman)\n+bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n {\n     {\n         LOCK2(cs_main, cs_wallet);\n@@ -2502,9 +2503,9 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(maxTxFee)) {\n+            if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n                 // This must not fail. The transaction has already been signed and recorded.\n-                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\\n\");\n+                LogPrintf(\"CommitTransaction(): Error: Transaction not valid, %s\\n\", state.GetRejectReason());\n                 return false;\n             }\n             wtxNew.RelayWalletTransaction(connman);\n@@ -3649,8 +3650,7 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee)\n+bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    CValidationState state;\n     return ::AcceptToMemoryPool(mempool, state, *this, true, NULL, false, nAbsurdFee);\n }"
      },
      {
        "sha": "c33a6ca91f670b1453888ffd0c48c08fb8200abc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=169bdabe14ef5988ff92a7370114edc85b070b27",
        "patch": "@@ -215,7 +215,7 @@ class CMerkleTx : public CTransaction\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee);\n+    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n@@ -774,7 +774,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n-    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman);\n+    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n \n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);"
      }
    ]
  }
]