[
  {
    "sha": "15ba08c3b5f66a6c4726a746affc7fb3216d4206",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWJhMDhjM2I1ZjY2YTZjNDcyNmE3NDZhZmZjN2ZiMzIxNmQ0MjA2",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-07T20:44:16Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "Implement SequenceLocks functions\n\nSequenceLocks functions are used to evaluate sequence lock times or heights per BIP 68.\n\nThe majority of this code is copied from maaku in #6312\nFurther credit: btcdrak, sipa, NicolasDorier",
      "tree": {
        "sha": "4f05b267f52affe50d5e59f5f007d2a6161a6c52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f05b267f52affe50d5e59f5f007d2a6161a6c52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15ba08c3b5f66a6c4726a746affc7fb3216d4206",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15ba08c3b5f66a6c4726a746affc7fb3216d4206",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15ba08c3b5f66a6c4726a746affc7fb3216d4206",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15ba08c3b5f66a6c4726a746affc7fb3216d4206/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4662646352dfe3d3f9bc46682a38973a119d0d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4662646352dfe3d3f9bc46682a38973a119d0d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4662646352dfe3d3f9bc46682a38973a119d0d8"
      }
    ],
    "stats": {
      "total": 351,
      "additions": 301,
      "deletions": 50
    },
    "files": [
      {
        "sha": "ad9cc26175351eb3db101e92e3924c93fc71dfc0",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -13,8 +13,11 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n-/** Flags for LockTime() */\n+/** Flags for nSequence and nLockTime locks */\n enum {\n+    /* Interpret sequence numbers as relative lock-time constraints. */\n+    LOCKTIME_VERIFY_SEQUENCE = (1 << 0),\n+\n     /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n     LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n };"
      },
      {
        "sha": "1bc02c0943e7d5edf1b57623b909dc736edd2b06",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 148,
        "deletions": 2,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -671,9 +671,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n         return true;\n     if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        if (!txin.IsFinal())\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n             return false;\n+    }\n     return true;\n }\n \n@@ -709,6 +710,128 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(mempool.cs);\n+\n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n+    // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n+    // height based locks because when SequenceLocks() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // SequenceLocks() with one more than chainActive.Height().\n+    index.nHeight = tip->nHeight + 1;\n+\n+    // pcoinsTip contains the UTXO set for chainActive.Tip()\n+    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+    std::vector<int> prevheights;\n+    prevheights.resize(tx.vin.size());\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+        CCoins coins;\n+        if (!viewMemPool.GetCoins(txin.prevout.hash, coins)) {\n+            return error(\"%s: Missing input\", __func__);\n+        }\n+        if (coins.nHeight == MEMPOOL_HEIGHT) {\n+            // Assume all mempool transaction confirm in the next block\n+            prevheights[txinIndex] = tip->nHeight + 1;\n+        } else {\n+            prevheights[txinIndex] = coins.nHeight;\n+        }\n+    }\n+\n+    std::pair<int, int64_t> lockPair = CalculateSequenceLocks(tx, flags, &prevheights, index);\n+    return EvaluateSequenceLocks(index, lockPair);\n+}\n+\n+\n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n     unsigned int nSigOps = 0;\n@@ -930,6 +1053,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n \n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n+\n+        // Only accept BIP68 sequence locked transactions that can be mined in the next\n+        // block; we don't want our mempool filled up with transactions that can't\n+        // be mined yet.\n+        // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n+        // CoinsViewCache instead of create its own\n+        if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n         }\n \n         // Check for non-standard pay-to-script-hash in inputs\n@@ -2056,6 +2187,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n+    std::vector<int> prevheights;\n+    int nLockTimeFlags = 0;\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n@@ -2079,6 +2212,19 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n+            // Check that transaction is BIP68 final\n+            // BIP68 lock checks (as opposed to nLockTime checks) must\n+            // be in ConnectBlock because they require the UTXO set\n+            prevheights.resize(tx.vin.size());\n+            for (size_t j = 0; j < tx.vin.size(); j++) {\n+                prevheights[j] = view.AccessCoins(tx.vin[j].prevout.hash)->nHeight;\n+            }\n+\n+            if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n+                return state.DoS(100, error(\"ConnectBlock(): contains a non-BIP68-final transaction\", __func__),\n+                                 REJECT_INVALID, \"bad-txns-nonfinal\");\n+            }\n+\n             if (fStrictPayToScriptHash)\n             {\n                 // Add in sigops done by pay-to-script-hash inputs;"
      },
      {
        "sha": "ed02a2e71dc85fde49adf1b914388a16984a8fb2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -353,7 +353,22 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n-/** \n+/**\n+ * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n+ * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n+ */\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+\n+/**\n+ * Check if transaction will be BIP 68 final in the next block to be created.\n+ *\n+ * Calls SequenceLocks() with data from the tip of the current active chain.\n+ *\n+ * See consensus/consensus.h for flag definitions.\n+ */\n+bool CheckSequenceLocks(const CTransaction &tx, int flags);\n+\n+/**\n  * Closure representing one script verification\n  * Note that this stores references to the spending transaction \n  */"
      },
      {
        "sha": "746775f566532194186bacc0fa22d2103d93b30f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -45,8 +45,9 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n+/** Used as the flags parameter to LockTime() in non-consensus code. */\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n+                                                           LOCKTIME_MEDIAN_TIME_PAST;\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**"
      },
      {
        "sha": "947f2e6a73bafb3110dc7e482974d0c80d374615",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -37,7 +37,7 @@ std::string CTxIn::ToString() const\n         str += strprintf(\", coinbase %s\", HexStr(scriptSig));\n     else\n         str += strprintf(\", scriptSig=%s\", HexStr(scriptSig).substr(0, 24));\n-    if (nSequence != std::numeric_limits<unsigned int>::max())\n+    if (nSequence != SEQUENCE_FINAL)\n         str += strprintf(\", nSequence=%u\", nSequence);\n     str += \")\";\n     return str;"
      },
      {
        "sha": "07ae39e0b444fff301c85bf00b348ca8b7bb954b",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 30,
        "deletions": 8,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -61,13 +61,40 @@ class CTxIn\n     CScript scriptSig;\n     uint32_t nSequence;\n \n+    /* Setting nSequence to this value for every input in a transaction\n+     * disables nLockTime. */\n+    static const uint32_t SEQUENCE_FINAL = 0xffffffff;\n+\n+    /* Below flags apply in the context of BIP 68*/\n+    /* If this flag set, CTxIn::nSequence is NOT interpreted as a\n+     * relative lock-time. */\n+    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);\n+\n+    /* If CTxIn::nSequence encodes a relative lock-time and this flag\n+     * is set, the relative lock-time has units of 512 seconds,\n+     * otherwise it specifies blocks with a granularity of 1. */\n+    static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);\n+\n+    /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n+     * applied to extract that lock-time from the sequence field. */\n+    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n+\n+    /* In order to use the same number of bits to encode roughly the\n+     * same wall-clock duration, and because blocks are naturally\n+     * limited to occur every 600s on average, the minimum granularity\n+     * for time-based relative lock-time is fixed at 512 seconds.\n+     * Converting from CTxIn::nSequence to seconds is performed by\n+     * multiplying by 512 = 2^9, or equivalently shifting up by\n+     * 9 bits. */\n+    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n+\n     CTxIn()\n     {\n-        nSequence = std::numeric_limits<unsigned int>::max();\n+        nSequence = SEQUENCE_FINAL;\n     }\n \n-    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n-    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n+    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -78,11 +105,6 @@ class CTxIn\n         READWRITE(nSequence);\n     }\n \n-    bool IsFinal() const\n-    {\n-        return (nSequence == std::numeric_limits<uint32_t>::max());\n-    }\n-\n     friend bool operator==(const CTxIn& a, const CTxIn& b)\n     {\n         return (a.prevout   == b.prevout &&"
      },
      {
        "sha": "901f901f01958d3c15096b3807807b213ae95002",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -1150,7 +1150,7 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     // prevent this condition. Alternatively we could test all\n     // inputs, but testing just this input minimizes the data\n     // required to prove correct CHECKLOCKTIMEVERIFY execution.\n-    if (txTo->vin[nIn].IsFinal())\n+    if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n     return true;"
      },
      {
        "sha": "f3297e074de488bf0e7559591f86677f2ddf42b6",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 31,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -57,6 +57,20 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n+CBlockIndex CreateBlockIndex(int nHeight)\n+{\n+    CBlockIndex index;\n+    index.nHeight = nHeight;\n+    index.pprev = chainActive.Tip();\n+    return index;\n+}\n+\n+bool TestSequenceLocks(const CTransaction &tx, int flags)\n+{\n+    LOCK(mempool.cs);\n+    return CheckSequenceLocks(tx, flags);\n+}\n+\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n@@ -79,6 +93,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n+    int baseheight = 0;\n     std::vector<CTransaction*>txFirst;\n     for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n     {\n@@ -92,7 +107,9 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n         txCoinbase.vout[0].scriptPubKey = CScript();\n         pblock->vtx[0] = CTransaction(txCoinbase);\n-        if (txFirst.size() < 2)\n+        if (txFirst.size() == 0)\n+            baseheight = chainActive.Height();\n+        if (txFirst.size() < 4)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n@@ -240,49 +257,96 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n+    int flags = LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST;\n+    // height map\n+    std::vector<int> prevheights;\n \n-    // height locked\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    // relative height locked\n+    tx.nVersion = 2;\n+    tx.vin.resize(1);\n+    prevheights.resize(1);\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction\n+    tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].nSequence = 0;\n+    tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n+    prevheights[0] = baseheight + 1;\n+    tx.vout.resize(1);\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx.nLockTime = chainActive.Tip()->nHeight+1;\n+    tx.nLockTime = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n-\n-    // time locked\n-    tx2.vin.resize(1);\n-    tx2.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx2.vin[0].prevout.n = 0;\n-    tx2.vin[0].scriptSig = CScript() << OP_1;\n-    tx2.vin[0].nSequence = 0;\n-    tx2.vout.resize(1);\n-    tx2.vout[0].nValue = 4900000000LL;\n-    tx2.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n-    hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n-    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n+\n+    // relative time locked\n+    tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    prevheights[0] = baseheight + 2;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n+\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n+\n+    // absolute height locked\n+    tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n+    prevheights[0] = baseheight + 3;\n+    tx.nLockTime = chainActive.Tip()->nHeight + 1;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n+\n+    // absolute time locked\n+    tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n+    tx.nLockTime = chainActive.Tip()->GetMedianTimePast();\n+    prevheights.resize(1);\n+    prevheights[0] = baseheight + 4;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n+\n+    // mempool-dependent transactions (not added)\n+    tx.vin[0].prevout.hash = hash;\n+    prevheights[0] = chainActive.Tip()->nHeight + 1;\n+    tx.nLockTime = 0;\n+    tx.vin[0].nSequence = 0;\n+    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    tx.vin[0].nSequence = 1;\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG;\n+    BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;\n+    BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n \n-    // Neither tx should have make it into the template.\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n+    // None of the of the absolute height/time locked tx should have made\n+    // it into the template because we still check IsFinalTx in CreateNewBlock,\n+    // but relative locked txs will if inconsistently added to mempool.\n+    // For now these will still generate a valid template until BIP68 soft fork\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n-\n-    // However if we advance height and time by one, both will.\n+    // However if we advance height by 1 and time by 512, all of them should be mined\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n     chainActive.Tip()->nHeight++;\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);\n-\n-    // FIXME: we should *actually* create a new block so the following test\n-    //        works; CheckFinalTx() isn't fooled by monkey-patching nHeight.\n-    //BOOST_CHECK(CheckFinalTx(tx));\n-    //BOOST_CHECK(CheckFinalTx(tx2));\n+    SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      },
      {
        "sha": "f370a4aa2a7970211a056d97921209688fb9f0a8",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -63,7 +63,7 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     txCredit.vout.resize(1);\n     txCredit.vin[0].prevout.SetNull();\n     txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n-    txCredit.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txCredit.vout[0].scriptPubKey = scriptPubKey;\n     txCredit.vout[0].nValue = 0;\n \n@@ -80,7 +80,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     txSpend.vin[0].prevout.hash = txCredit.GetHash();\n     txSpend.vin[0].prevout.n = 0;\n     txSpend.vin[0].scriptSig = scriptSig;\n-    txSpend.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txSpend.vout[0].scriptPubKey = CScript();\n     txSpend.vout[0].nValue = 0;\n "
      },
      {
        "sha": "0b0f32e406ed89fd378e65c8c3b0ed280d608308",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15ba08c3b5f66a6c4726a746affc7fb3216d4206/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "patch": "@@ -506,7 +506,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        if (!CheckFinalTx(tx, flags)) {\n+        if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(tx, flags)) {\n             transactionsToRemove.push_back(tx);\n         } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {"
      }
    ]
  },
  {
    "sha": "0d09af77b730e5a30e9c138233517c86af41ce76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDA5YWY3N2I3MzBlNWEzMGU5YzEzODIzMzUxN2M4NmFmNDFjZTc2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-12-08T22:25:28Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "Add RPC test exercising BIP68 (mempool only)",
      "tree": {
        "sha": "c266baaba7327bc4798d6cec0f3ec9ad84851a36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c266baaba7327bc4798d6cec0f3ec9ad84851a36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d09af77b730e5a30e9c138233517c86af41ce76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d09af77b730e5a30e9c138233517c86af41ce76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d09af77b730e5a30e9c138233517c86af41ce76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d09af77b730e5a30e9c138233517c86af41ce76/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15ba08c3b5f66a6c4726a746affc7fb3216d4206",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15ba08c3b5f66a6c4726a746affc7fb3216d4206"
      }
    ],
    "stats": {
      "total": 396,
      "additions": 396,
      "deletions": 0
    },
    "files": [
      {
        "sha": "45b4f22c0ba2665375b6ba27a35f312a6ca7d516",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "added",
        "additions": 388,
        "deletions": 0,
        "changes": 388,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d09af77b730e5a30e9c138233517c86af41ce76/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d09af77b730e5a30e9c138233517c86af41ce76/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=0d09af77b730e5a30e9c138233517c86af41ce76",
        "patch": "@@ -0,0 +1,388 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test BIP68 implementation (mempool only)\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.script import *\n+from test_framework.mininode import *\n+from test_framework.blocktools import *\n+\n+COIN = 100000000\n+SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n+SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)\n+SEQUENCE_LOCKTIME_GRANULARITY = 9 # this is a bit-shift\n+SEQUENCE_LOCKTIME_MASK = 0x0000ffff\n+\n+# RPC error for non-BIP68 final transactions\n+NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n+\n+class BIP68Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-blockprioritysize=0\"]))\n+        self.is_network_split = False\n+        self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+\n+    def run_test(self):\n+        # Generate some coins\n+        self.nodes[0].generate(110)\n+\n+        print \"Running test disable flag\"\n+        self.test_disable_flag()\n+\n+        print \"Running test sequence-lock-confirmed-inputs\"\n+        self.test_sequence_lock_confirmed_inputs()\n+\n+        print \"Running test sequence-lock-unconfirmed-inputs\"\n+        self.test_sequence_lock_unconfirmed_inputs()\n+\n+        # This test needs to change when BIP68 becomes consensus\n+        print \"Running test BIP68 not consensus\"\n+        self.test_bip68_not_consensus()\n+\n+        print \"Passed\\n\"\n+\n+    # Test that BIP68 is not in effect if tx version is 1, or if\n+    # the first sequence bit is set.\n+    def test_disable_flag(self):\n+        # Create some unconfirmed inputs\n+        new_addr = self.nodes[0].getnewaddress()\n+        self.nodes[0].sendtoaddress(new_addr, 2) # send 2 BTC\n+\n+        utxos = self.nodes[0].listunspent(0, 0)\n+        assert(len(utxos) > 0)\n+\n+        utxo = utxos[0]\n+\n+        tx1 = CTransaction()\n+        value = satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN\n+\n+        # Check that the disable flag disables relative locktime.\n+        # If sequence locks were used, this would require 1 block for the\n+        # input to mature.\n+        sequence_value = SEQUENCE_LOCKTIME_DISABLE_FLAG | 1\n+        tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)] \n+        tx1.vout = [CTxOut(value, CScript([b'a']))]\n+\n+        tx1_signed = self.nodes[0].signrawtransaction(ToHex(tx1))[\"hex\"]\n+        tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n+        tx1_id = int(tx1_id, 16)\n+\n+        # This transaction will enable sequence-locks, so this transaction should\n+        # fail\n+        tx2 = CTransaction()\n+        tx2.nVersion = 2\n+        sequence_value = sequence_value & 0x7fffffff\n+        tx2.vin = [CTxIn(COutPoint(tx1_id, 0), nSequence=sequence_value)]\n+        tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n+        tx2.rehash()\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # Setting the version back down to 1 should disable the sequence lock,\n+        # so this should be accepted.\n+        tx2.nVersion = 1\n+\n+        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+\n+    # Calculate the median time past of a prior block (\"confirmations\" before\n+    # the current tip).\n+    def get_median_time_past(self, confirmations):\n+        block_hash = self.nodes[0].getblockhash(self.nodes[0].getblockcount()-confirmations)\n+        return self.nodes[0].getblockheader(block_hash)[\"mediantime\"]\n+\n+    # Test that sequence locks are respected for transactions spending confirmed inputs.\n+    def test_sequence_lock_confirmed_inputs(self):\n+        # Create lots of confirmed utxos, and use them to generate lots of random\n+        # transactions.\n+        max_outputs = 50\n+        addresses = []\n+        while len(addresses) < max_outputs:\n+            addresses.append(self.nodes[0].getnewaddress())\n+        while len(self.nodes[0].listunspent()) < 200:\n+            import random\n+            random.shuffle(addresses)\n+            num_outputs = random.randint(1, max_outputs)\n+            outputs = {}\n+            for i in xrange(num_outputs):\n+                outputs[addresses[i]] = random.randint(1, 20)*0.01\n+            self.nodes[0].sendmany(\"\", outputs)\n+            self.nodes[0].generate(1)\n+\n+        utxos = self.nodes[0].listunspent()\n+\n+        # Try creating a lot of random transactions.\n+        # Each time, choose a random number of inputs, and randomly set\n+        # some of those inputs to be sequence locked (and randomly choose\n+        # between height/time locking). Small random chance of making the locks\n+        # all pass.\n+        for i in xrange(400):\n+            # Randomly choose up to 10 inputs\n+            num_inputs = random.randint(1, 10)\n+            random.shuffle(utxos)\n+\n+            # Track whether any sequence locks used should fail\n+            should_pass = True\n+            \n+            # Track whether this transaction was built with sequence locks\n+            using_sequence_locks = False\n+\n+            tx = CTransaction()\n+            tx.nVersion = 2\n+            value = 0\n+            for j in xrange(num_inputs):\n+                sequence_value = 0xfffffffe # this disables sequence locks\n+\n+                # 50% chance we enable sequence locks\n+                if random.randint(0,1):\n+                    using_sequence_locks = True\n+\n+                    # 10% of the time, make the input sequence value pass\n+                    input_will_pass = (random.randint(1,10) == 1)\n+                    sequence_value = utxos[j][\"confirmations\"]\n+                    if not input_will_pass:\n+                        sequence_value += 1\n+                        should_pass = False\n+\n+                    # Figure out what the median-time-past was for the confirmed input\n+                    # Note that if an input has N confirmations, we're going back N blocks\n+                    # from the tip so that we're looking up MTP of the block\n+                    # PRIOR to the one the input appears in, as per the BIP68 spec.\n+                    orig_time = self.get_median_time_past(utxos[j][\"confirmations\"])\n+                    cur_time = self.get_median_time_past(0) # MTP of the tip\n+\n+                    # can only timelock this input if it's not too old -- otherwise use height\n+                    can_time_lock = True\n+                    if ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY) >= SEQUENCE_LOCKTIME_MASK:\n+                        can_time_lock = False\n+\n+                    # if time-lockable, then 50% chance we make this a time lock\n+                    if random.randint(0,1) and can_time_lock:\n+                        # Find first time-lock value that fails, or latest one that succeeds\n+                        time_delta = sequence_value << SEQUENCE_LOCKTIME_GRANULARITY\n+                        if input_will_pass and time_delta > cur_time - orig_time:\n+                            sequence_value = ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY)\n+                        elif (not input_will_pass and time_delta <= cur_time - orig_time):\n+                            sequence_value = ((cur_time - orig_time) >> SEQUENCE_LOCKTIME_GRANULARITY)+1\n+                        sequence_value |= SEQUENCE_LOCKTIME_TYPE_FLAG\n+                tx.vin.append(CTxIn(COutPoint(int(utxos[j][\"txid\"], 16), utxos[j][\"vout\"]), nSequence=sequence_value))\n+                value += utxos[j][\"amount\"]*COIN\n+            # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n+            tx_size = len(ToHex(tx))/2 + 120*num_inputs + 50\n+            tx.vout.append(CTxOut(value-self.relayfee*tx_size*COIN/1000, CScript([b'a'])))\n+            rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n+\n+            try:\n+                self.nodes[0].sendrawtransaction(rawtx)\n+            except JSONRPCException as exp:\n+                assert(not should_pass and using_sequence_locks)\n+                assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+            else:\n+                assert(should_pass or not using_sequence_locks)\n+                # Recalculate utxos if we successfully sent the transaction\n+                utxos = self.nodes[0].listunspent()\n+\n+    # Test that sequence locks on unconfirmed inputs must have nSequence\n+    # height or time of 0 to be accepted.\n+    # Then test that BIP68-invalid transactions are removed from the mempool\n+    # after a reorg.\n+    def test_sequence_lock_unconfirmed_inputs(self):\n+        # Store height so we can easily reset the chain at the end of the test\n+        cur_height = self.nodes[0].getblockcount()\n+\n+        utxos = self.nodes[0].listunspent()\n+\n+        # Create a mempool tx.\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n+        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1.rehash()\n+\n+        # Anyone-can-spend mempool tx.\n+        # Sequence lock of 0 should pass.\n+        tx2 = CTransaction()\n+        tx2.nVersion = 2\n+        tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n+        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2 = FromHex(tx2, tx2_raw)\n+        tx2.rehash()\n+\n+        self.nodes[0].sendrawtransaction(tx2_raw)\n+\n+        # Create a spend of the 0th output of orig_tx with a sequence lock\n+        # of 1, and test what happens when submitting.\n+        # orig_tx.vout[0] must be an anyone-can-spend output\n+        def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n+            sequence_value = 1\n+            if not use_height_lock:\n+                sequence_value |= SEQUENCE_LOCKTIME_TYPE_FLAG\n+\n+            tx = CTransaction()\n+            tx.nVersion = 2\n+            tx.vin = [CTxIn(COutPoint(orig_tx.sha256, 0), nSequence=sequence_value)]\n+            tx.vout = [CTxOut(int(orig_tx.vout[0].nValue - relayfee*COIN), CScript([b'a']))]\n+            tx.rehash()\n+\n+            try:\n+                node.sendrawtransaction(ToHex(tx))\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+                assert(orig_tx.hash in node.getrawmempool())\n+            else:\n+                # orig_tx must not be in mempool\n+                assert(orig_tx.hash not in node.getrawmempool())\n+            return tx\n+\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=True)\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+\n+        # Now mine some blocks, but make sure tx2 doesn't get mined.\n+        # Use prioritisetransaction to lower the effective feerate to 0\n+        self.nodes[0].prioritisetransaction(tx2.hash, -1e15, int(-self.relayfee*COIN))\n+        cur_time = int(time.time())\n+        for i in xrange(10):\n+            self.nodes[0].setmocktime(cur_time + 600)\n+            self.nodes[0].generate(1)\n+            cur_time += 600\n+\n+        assert(tx2.hash in self.nodes[0].getrawmempool())\n+\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=True)\n+        test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+\n+        # Mine tx2, and then try again\n+        self.nodes[0].prioritisetransaction(tx2.hash, 1e15, int(self.relayfee*COIN))\n+\n+        # Advance the time on the node so that we can test timelocks\n+        self.nodes[0].setmocktime(cur_time+600)\n+        self.nodes[0].generate(1)\n+        assert(tx2.hash not in self.nodes[0].getrawmempool())\n+\n+        # Now that tx2 is not in the mempool, a sequence locked spend should\n+        # succeed\n+        tx3 = test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n+        assert(tx3.hash in self.nodes[0].getrawmempool())\n+\n+        self.nodes[0].generate(1)\n+        assert(tx3.hash not in self.nodes[0].getrawmempool())\n+\n+        # One more test, this time using height locks\n+        tx4 = test_nonzero_locks(tx3, self.nodes[0], self.relayfee, use_height_lock=True)\n+        assert(tx4.hash in self.nodes[0].getrawmempool())\n+\n+        # Now try combining confirmed and unconfirmed inputs\n+        tx5 = test_nonzero_locks(tx4, self.nodes[0], self.relayfee, use_height_lock=True)\n+        assert(tx5.hash not in self.nodes[0].getrawmempool())\n+\n+        tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n+        tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n+        raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(raw_tx5)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # Test mempool-BIP68 consistency after reorg\n+        #\n+        # State of the transactions in the last blocks:\n+        # ... -> [ tx2 ] ->  [ tx3 ]\n+        #         tip-1        tip\n+        # And currently tx4 is in the mempool.\n+        #\n+        # If we invalidate the tip, tx3 should get added to the mempool, causing\n+        # tx4 to be removed (fails sequence-lock).\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        assert(tx4.hash not in self.nodes[0].getrawmempool())\n+        assert(tx3.hash in self.nodes[0].getrawmempool())\n+\n+        # Now mine 2 empty blocks to reorg out the current tip (labeled tip-1 in\n+        # diagram above).\n+        # This would cause tx2 to be added back to the mempool, which in turn causes\n+        # tx3 to be removed.\n+        tip = int(self.nodes[0].getblockhash(self.nodes[0].getblockcount()-1), 16)\n+        height = self.nodes[0].getblockcount()\n+        for i in xrange(2):\n+            block = create_block(tip, create_coinbase(height), cur_time)\n+            block.nVersion = 3\n+            block.rehash()\n+            block.solve()\n+            tip = block.sha256\n+            height += 1\n+            self.nodes[0].submitblock(ToHex(block))\n+            cur_time += 1\n+\n+        mempool = self.nodes[0].getrawmempool()\n+        assert(tx3.hash not in mempool)\n+        assert(tx2.hash in mempool)\n+\n+        # Reset the chain and get rid of the mocktimed-blocks\n+        self.nodes[0].setmocktime(0)\n+        self.nodes[0].invalidateblock(self.nodes[0].getblockhash(cur_height+1))\n+        self.nodes[0].generate(10)\n+\n+    # Make sure that BIP68 isn't being used to validate blocks.\n+    def test_bip68_not_consensus(self):\n+        txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n+\n+        tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n+        tx1.rehash()\n+\n+        # Make an anyone-can-spend transaction\n+        tx2 = CTransaction()\n+        tx2.nVersion = 1\n+        tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n+        tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+\n+        # sign tx2\n+        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2 = FromHex(tx2, tx2_raw)\n+        tx2.rehash()\n+\n+        self.nodes[0].sendrawtransaction(ToHex(tx2))\n+        \n+        # Now make an invalid spend of tx2 according to BIP68\n+        sequence_value = 100 # 100 block relative locktime\n+\n+        tx3 = CTransaction()\n+        tx3.nVersion = 2\n+        tx3.vin = [CTxIn(COutPoint(tx2.sha256, 0), nSequence=sequence_value)]\n+        tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+        tx3.rehash()\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(ToHex(tx3))\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], NOT_FINAL_ERROR)\n+        else:\n+            assert(False)\n+\n+        # make a block that violates bip68; ensure that the tip updates\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+        block = create_block(tip, create_coinbase(self.nodes[0].getblockcount()+1))\n+        block.nVersion = 3\n+        block.vtx.extend([tx1, tx2, tx3])\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.nodes[0].submitblock(ToHex(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+\n+\n+if __name__ == '__main__':\n+    BIP68Test().main()"
      },
      {
        "sha": "81bb439ceaa75ba0676759902952323033ca586f",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d09af77b730e5a30e9c138233517c86af41ce76/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d09af77b730e5a30e9c138233517c86af41ce76/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=0d09af77b730e5a30e9c138233517c86af41ce76",
        "patch": "@@ -231,6 +231,14 @@ def ser_int_vector(l):\n         r += struct.pack(\"<i\", i)\n     return r\n \n+# Deserialize from a hex string representation (eg from RPC)\n+def FromHex(obj, hex_string):\n+    obj.deserialize(cStringIO.StringIO(binascii.unhexlify(hex_string)))\n+    return obj\n+\n+# Convert a binary-serializable object to hex (eg for submission via RPC)\n+def ToHex(obj):\n+    return binascii.hexlify(obj.serialize()).decode('utf-8')\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n "
      }
    ]
  },
  {
    "sha": "0a79c04af335b38afefc5c9f753ad5c32478c758",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTc5YzA0YWYzMzViMzhhZmVmYzVjOWY3NTNhZDVjMzI0NzhjNzU4",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-10T21:01:04Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "Bug fix to RPC test",
      "tree": {
        "sha": "804f39a4a06e529fd9728925b05678a47e1b2be0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/804f39a4a06e529fd9728925b05678a47e1b2be0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a79c04af335b38afefc5c9f753ad5c32478c758",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a79c04af335b38afefc5c9f753ad5c32478c758",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a79c04af335b38afefc5c9f753ad5c32478c758",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a79c04af335b38afefc5c9f753ad5c32478c758/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d09af77b730e5a30e9c138233517c86af41ce76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d09af77b730e5a30e9c138233517c86af41ce76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d09af77b730e5a30e9c138233517c86af41ce76"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bd61282fa18e49a2530cd2ba89db137f713bee21",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a79c04af335b38afefc5c9f753ad5c32478c758/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a79c04af335b38afefc5c9f753ad5c32478c758/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=0a79c04af335b38afefc5c9f753ad5c32478c758",
        "patch": "@@ -202,8 +202,6 @@ def test_sequence_lock_unconfirmed_inputs(self):\n         # Store height so we can easily reset the chain at the end of the test\n         cur_height = self.nodes[0].getblockcount()\n \n-        utxos = self.nodes[0].listunspent()\n-\n         # Create a mempool tx.\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n         tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))\n@@ -286,6 +284,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         tx5 = test_nonzero_locks(tx4, self.nodes[0], self.relayfee, use_height_lock=True)\n         assert(tx5.hash not in self.nodes[0].getrawmempool())\n \n+        utxos = self.nodes[0].listunspent()\n         tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n         raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]"
      }
    ]
  },
  {
    "sha": "197c3760ff07daeecbb726a0cfef899502520ee5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTdjMzc2MGZmMDdkYWVlY2JiNzI2YTBjZmVmODk5NTAyNTIwZWU1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-11T20:34:04Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "fix sdaftuar's nits again\n\nit boggles the mind why these nits can't be delivered on a more timely basis",
      "tree": {
        "sha": "365e72b5f19e3be40b1c1eb256336c3c7712cc55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/365e72b5f19e3be40b1c1eb256336c3c7712cc55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/197c3760ff07daeecbb726a0cfef899502520ee5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/197c3760ff07daeecbb726a0cfef899502520ee5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/197c3760ff07daeecbb726a0cfef899502520ee5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/197c3760ff07daeecbb726a0cfef899502520ee5/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a79c04af335b38afefc5c9f753ad5c32478c758",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a79c04af335b38afefc5c9f753ad5c32478c758",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a79c04af335b38afefc5c9f753ad5c32478c758"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "bdb085bbd1099b438fdac9bd6871159c8e2dc301",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/197c3760ff07daeecbb726a0cfef899502520ee5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/197c3760ff07daeecbb726a0cfef899502520ee5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=197c3760ff07daeecbb726a0cfef899502520ee5",
        "patch": "@@ -803,10 +803,10 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags)\n     index.pprev = tip;\n     // CheckSequenceLocks() uses chainActive.Height()+1 to evaluate\n     // height based locks because when SequenceLocks() is called within\n-    // CBlock::AcceptBlock(), the height of the block *being*\n-    // evaluated is what is used. Thus if we want to know if a\n-    // transaction can be part of the *next* block, we need to call\n-    // SequenceLocks() with one more than chainActive.Height().\n+    // ConnectBlock(), the height of the block *being*\n+    // evaluated is what is used.\n+    // Thus if we want to know if a transaction can be part of the\n+    // *next* block, we need to use one more than chainActive.Height()\n     index.nHeight = tip->nHeight + 1;\n \n     // pcoinsTip contains the UTXO set for chainActive.Tip()\n@@ -2221,7 +2221,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n             }\n \n             if (!SequenceLocks(tx, nLockTimeFlags, &prevheights, *pindex)) {\n-                return state.DoS(100, error(\"ConnectBlock(): contains a non-BIP68-final transaction\", __func__),\n+                return state.DoS(100, error(\"%s: contains a non-BIP68-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n             }\n "
      },
      {
        "sha": "93e58988cf0b05db118da640a7610634015eb733",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/197c3760ff07daeecbb726a0cfef899502520ee5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/197c3760ff07daeecbb726a0cfef899502520ee5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=197c3760ff07daeecbb726a0cfef899502520ee5",
        "patch": "@@ -362,7 +362,7 @@ bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeig\n /**\n  * Check if transaction will be BIP 68 final in the next block to be created.\n  *\n- * Calls SequenceLocks() with data from the tip of the current active chain.\n+ * Simulates calling SequenceLocks() with data from the tip of the current active chain.\n  *\n  * See consensus/consensus.h for flag definitions.\n  */"
      },
      {
        "sha": "aabeebb25de5e0e52b5f7af30ee14f13c0151ec0",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/197c3760ff07daeecbb726a0cfef899502520ee5/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/197c3760ff07daeecbb726a0cfef899502520ee5/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=197c3760ff07daeecbb726a0cfef899502520ee5",
        "patch": "@@ -45,7 +45,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-/** Used as the flags parameter to LockTime() in non-consensus code. */\n+/** Used as the flags parameter to sequence and nLocktime checks in non-consensus code. */\n static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n                                                            LOCKTIME_MEDIAN_TIME_PAST;\n "
      }
    ]
  },
  {
    "sha": "c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGM1ZTA5ZmUyMTY2YTBiOGVhNmZjMWYxM2UxMzFlM2JhOGRmNDc4",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-09-25T23:18:51Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "BIP112: Implement CHECKSEQUENCEVERIFY\n\n- Replace NOP3 with CHECKSEQUENCEVERIFY (BIP112)\n  <nSequence> CHECKSEQUENCEVERIFY -> <nSequence>\n- Fails if txin.nSequence < nSequence, allowing funds of a txout to be locked for a number of blocks or a duration of time after its inclusion in a block.\n- Pull most of CheckLockTime() out into VerifyLockTime(), a local function that will be reused for CheckSequence()\n- Add bitwise AND operator to CScriptNum\n- Enable CHECKSEQUENCEVERIFY as a standard script verify flag\n- Transactions that fail CSV verification will be rejected from the mempool, making it easy to test the feature. However blocks containing \"invalid\" CSV-using transactions will still be accepted; this is *not* the soft-fork required to actually enable CSV for production use.",
      "tree": {
        "sha": "79d6637196296e2ad4d02992b3976b6edc7ac1e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79d6637196296e2ad4d02992b3976b6edc7ac1e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "197c3760ff07daeecbb726a0cfef899502520ee5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/197c3760ff07daeecbb726a0cfef899502520ee5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/197c3760ff07daeecbb726a0cfef899502520ee5"
      }
    ],
    "stats": {
      "total": 256,
      "additions": 247,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4f9354e36fe710a1076889852478c544bf255218",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "patch": "@@ -40,6 +40,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n                                                          SCRIPT_VERIFY_CLEANSTACK |\n                                                          SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                         SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n                                                          SCRIPT_VERIFY_LOW_S;\n \n /** For convenience, standard but not mandatory verify flags. */"
      },
      {
        "sha": "4e87006f5783f7aeef8f712881e5569b01583a55",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 7,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "patch": "@@ -373,7 +373,44 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP3: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKSEQUENCEVERIFY:\n+                {\n+                    if (!(flags & SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {\n+                        // not enabled; treat as a NOP3\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        }\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // nSequence, like nLockTime, is a 32-bit unsigned integer\n+                    // field. See the comment in CHECKLOCKTIMEVERIFY regarding\n+                    // 5-byte numeric operands.\n+                    const CScriptNum nSequence(stacktop(-1), fRequireMinimal, 5);\n+\n+                    // In the rare event that the argument may be < 0 due to\n+                    // some arithmetic being done first, you can always use\n+                    // 0 MAX CHECKSEQUENCEVERIFY.\n+                    if (nSequence < 0)\n+                        return set_error(serror, SCRIPT_ERR_NEGATIVE_LOCKTIME);\n+\n+                    // To provide for future soft-fork extensibility, if the\n+                    // operand has the disabled lock-time flag set,\n+                    // CHECKSEQUENCEVERIFY behaves as a NOP.\n+                    if ((nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) != 0)\n+                        break;\n+\n+                    // Compare the specified sequence number with the input.\n+                    if (!checker.CheckSequence(nSequence))\n+                        return set_error(serror, SCRIPT_ERR_UNSATISFIED_LOCKTIME);\n+\n+                    break;\n+                }\n+\n+                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n                 case OP_NOP6: case OP_NOP7: case OP_NOP8: case OP_NOP9: case OP_NOP10:\n                 {\n                     if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n@@ -1120,27 +1157,33 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n-bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+static bool VerifyLockTime(int64_t txToLockTime, int64_t nThreshold, const CScriptNum& nLockTime)\n {\n     // There are two kinds of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n-    // nLockTime < LOCKTIME_THRESHOLD.\n+    // nLockTime < nThreshold (either LOCKTIME_THRESHOLD or\n+    // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG).\n     //\n     // We want to compare apples to apples, so fail the script\n     // unless the type of nLockTime being tested is the same as\n     // the nLockTime in the transaction.\n     if (!(\n-        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n-        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+        (txToLockTime <  nThreshold && nLockTime <  nThreshold) ||\n+        (txToLockTime >= nThreshold && nLockTime >= nThreshold)\n     ))\n         return false;\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one.\n-    if (nLockTime > (int64_t)txTo->nLockTime)\n+    if (nLockTime > txToLockTime)\n         return false;\n \n-    // Finally the nLockTime feature can be disabled and thus\n+    return true;\n+}\n+\n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // The nLockTime feature can be disabled and thus\n     // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n     // finalized by setting nSequence to maxint. The\n     // transaction would be allowed into the blockchain, making\n@@ -1153,6 +1196,38 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n+    if (!::VerifyLockTime((int64_t)txTo->nLockTime, LOCKTIME_THRESHOLD, nLockTime))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) const\n+{\n+    // Relative lock times are supported by comparing the passed\n+    // in operand to the sequence number of the input.\n+    const int64_t txToSequence = (int64_t)txTo->vin[nIn].nSequence;\n+\n+    // Fail if the transaction's version number is not set high\n+    // enough to trigger BIP 68 rules.\n+    if (static_cast<uint32_t>(txTo->nVersion) < 2)\n+        return false;\n+\n+    // Sequence numbers with their most significant bit set are not\n+    // consensus constrained. Testing that the transaction's sequence\n+    // number do not have this bit set prevents using this property\n+    // to get around a CHECKSEQUENCEVERIFY check.\n+    if (txToSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG)\n+        return false;\n+\n+    // Mask off any bits that do not have consensus-enforced meaning\n+    // before doing the integer comparisons of ::VerifyLockTime.\n+    const uint32_t nLockTimeMask = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\n+                                 | CTxIn::SEQUENCE_LOCKTIME_MASK;\n+\n+    if (!::VerifyLockTime(txToSequence & nLockTimeMask, CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG, nSequence & nLockTimeMask))\n+        return false;\n+\n     return true;\n }\n "
      },
      {
        "sha": "e5cb7290f2225585c94875c2fbb2084b275b3020",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "patch": "@@ -81,6 +81,11 @@ enum\n     //\n     // See BIP65 for details.\n     SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),\n+\n+    // support CHECKSEQUENCEVERIFY opcode\n+    //\n+    // See BIP112 for details\n+    SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);\n@@ -100,6 +105,11 @@ class BaseSignatureChecker\n          return false;\n     }\n \n+    virtual bool CheckSequence(const CScriptNum& nSequence) const\n+    {\n+         return false;\n+    }\n+\n     virtual ~BaseSignatureChecker() {}\n };\n \n@@ -116,6 +126,7 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n     bool CheckLockTime(const CScriptNum& nLockTime) const;\n+    bool CheckSequence(const CScriptNum& nSequence) const;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "d2a68a07ba149571fb445c2284f8fc8df4ede228",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "patch": "@@ -165,6 +165,7 @@ enum opcodetype\n     OP_CHECKLOCKTIMEVERIFY = 0xb1,\n     OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,\n     OP_NOP3 = 0xb2,\n+    OP_CHECKSEQUENCEVERIFY = OP_NOP3,\n     OP_NOP4 = 0xb3,\n     OP_NOP5 = 0xb4,\n     OP_NOP6 = 0xb5,\n@@ -259,6 +260,11 @@ class CScriptNum\n     inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }\n     inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }\n \n+    inline CScriptNum operator&(   const int64_t& rhs)    const { return CScriptNum(m_value & rhs);}\n+    inline CScriptNum operator&(   const CScriptNum& rhs) const { return operator&(rhs.m_value);   }\n+\n+    inline CScriptNum& operator&=( const CScriptNum& rhs)       { return operator&=(rhs.m_value);  }\n+\n     inline CScriptNum operator-()                         const\n     {\n         assert(m_value != std::numeric_limits<int64_t>::min());\n@@ -287,6 +293,12 @@ class CScriptNum\n         return *this;\n     }\n \n+    inline CScriptNum& operator&=( const int64_t& rhs)\n+    {\n+        m_value &= rhs;\n+        return *this;\n+    }\n+\n     int getint() const\n     {\n         if (m_value > std::numeric_limits<int>::max())"
      },
      {
        "sha": "26df33932fdd690db0122d36ca64557acff1d018",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "patch": "@@ -35,7 +35,7 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_INVALID_ALTSTACK_OPERATION,\n     SCRIPT_ERR_UNBALANCED_CONDITIONAL,\n \n-    /* OP_CHECKLOCKTIMEVERIFY */\n+    /* CHECKLOCKTIMEVERIFY and CHECKSEQUENCEVERIFY */\n     SCRIPT_ERR_NEGATIVE_LOCKTIME,\n     SCRIPT_ERR_UNSATISFIED_LOCKTIME,\n "
      },
      {
        "sha": "2d7d9b958514b244baf9c7bddc218e53cfe6fdb6",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "patch": "@@ -201,5 +201,59 @@\n [[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n \"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH,DERSIG\"],\n \n+[\"CHECKSEQUENCEVERIFY tests\"],\n+\n+[\"By-height locks, with argument just beyond txin.nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"By-time locks, with argument just beyond txin.nSequence (but within numerical boundries)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194305 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument missing\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument negative with by-blockheight txin.nSequence=0\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument negative with by-blocktime txin.nSequence=CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"-1 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument/tx height/time mismatch, both versions\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"6 byte non-minimally-encoded arguments are invalid even if their contents are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x06 0x000000000000 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff00000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Failure due to failing CHECKSEQUENCEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"02000000010001000000000000000000000000000000000000000000000000000000000000000000000251b2000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Failure due to failing CHECKSEQUENCEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7c17aff532f22beb54069942f9bf567a66133eaf EQUAL\"]],\n+\"0200000001000100000000000000000000000000000000000000000000000000000000000000000000030251b2000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Failure due to insufficient tx.nVersion (<2)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"010000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "717ad19549eb9710568dd5da0ba9ab6176dc2c4a",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "patch": "@@ -233,5 +233,89 @@\n [[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n \"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH\"],\n \n+[\"CHECKSEQUENCEVERIFY tests\"],\n+\n+[\"By-height locks, with argument == 0 and == txin.nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff00000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"65535 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"By-time locks, with argument == 0 and == txin.nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff40000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4259839 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Upper sequence with upper sequence is fine\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000800100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000800100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000feffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument 2^31 with various nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483648 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument 2^32-1 with various nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4294967295 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Argument 3<<31 with various nSequence\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"6442450944 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffbf7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"6442450944 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffff7f0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"6442450944 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"5 byte non-minimally-encoded operandss are valid\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x05 0x0000000000 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"The argument can be calculated rather than created directly by a PUSHDATA\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194303 1ADD NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"4194304 1SUB NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000ffff00000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"An ADD producing a 5-byte result that sets CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 65536 NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"2147483647 4259840 ADD NOP3 1\"]],\n+\"020000000100010000000000000000000000000000000000000000000000000000000000000000000000000040000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Valid CHECKSEQUENCEVERIFY in scriptSig\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"02000000010001000000000000000000000000000000000000000000000000000000000000000000000251b2010000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n+[\"Valid CHECKSEQUENCEVERIFY in redeemScript\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0x7c17aff532f22beb54069942f9bf567a66133eaf EQUAL\"]],\n+\"0200000001000100000000000000000000000000000000000000000000000000000000000000000000030251b2010000000100000000000000000000000000\", \"P2SH,CHECKSEQUENCEVERIFY\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "d9195bf345ca448e4d16a6fa92bf0cf005a71cbf",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "patch": "@@ -44,7 +44,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY)\n     (string(\"DISCOURAGE_UPGRADABLE_NOPS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n     (string(\"CLEANSTACK\"), (unsigned int)SCRIPT_VERIFY_CLEANSTACK)\n-    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY);\n+    (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n+    (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      }
    ]
  },
  {
    "sha": "6170506fdf920e1cb07c086be670ad624cb04241",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTcwNTA2ZmRmOTIwZTFjYjA3YzA4NmJlNjcwYWQ2MjRjYjA0MjQx",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-12T20:02:46Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "Separate CheckLockTime() and CheckSequence() logic\n\nFor the sake of a little repetition, make code more readable.",
      "tree": {
        "sha": "ffa6083f34c558611975be9637cba9c5ad1747f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffa6083f34c558611975be9637cba9c5ad1747f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6170506fdf920e1cb07c086be670ad624cb04241",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6170506fdf920e1cb07c086be670ad624cb04241",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6170506fdf920e1cb07c086be670ad624cb04241",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6170506fdf920e1cb07c086be670ad624cb04241/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0c5e09fe2166a0b8ea6fc1f13e131e3ba8df478"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 26,
      "deletions": 20
    },
    "files": [
      {
        "sha": "d4fe001d7a8fb3eea4330ae3e8940c2d48fda1ab",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 20,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6170506fdf920e1cb07c086be670ad624cb04241/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6170506fdf920e1cb07c086be670ad624cb04241/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=6170506fdf920e1cb07c086be670ad624cb04241",
        "patch": "@@ -1157,33 +1157,27 @@ bool TransactionSignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn\n     return true;\n }\n \n-static bool VerifyLockTime(int64_t txToLockTime, int64_t nThreshold, const CScriptNum& nLockTime)\n+bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n {\n     // There are two kinds of nLockTime: lock-by-blockheight\n     // and lock-by-blocktime, distinguished by whether\n-    // nLockTime < nThreshold (either LOCKTIME_THRESHOLD or\n-    // CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG).\n+    // nLockTime < LOCKTIME_THRESHOLD.\n     //\n     // We want to compare apples to apples, so fail the script\n     // unless the type of nLockTime being tested is the same as\n     // the nLockTime in the transaction.\n     if (!(\n-        (txToLockTime <  nThreshold && nLockTime <  nThreshold) ||\n-        (txToLockTime >= nThreshold && nLockTime >= nThreshold)\n+        (txTo->nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo->nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n     ))\n         return false;\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one.\n-    if (nLockTime > txToLockTime)\n+    if (nLockTime > (int64_t)txTo->nLockTime)\n         return false;\n \n-    return true;\n-}\n-\n-bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n-{\n-    // The nLockTime feature can be disabled and thus\n+    // Finally the nLockTime feature can be disabled and thus\n     // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n     // finalized by setting nSequence to maxint. The\n     // transaction would be allowed into the blockchain, making\n@@ -1196,9 +1190,6 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n-    if (!::VerifyLockTime((int64_t)txTo->nLockTime, LOCKTIME_THRESHOLD, nLockTime))\n-        return false;\n-\n     return true;\n }\n \n@@ -1221,17 +1212,32 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n         return false;\n \n     // Mask off any bits that do not have consensus-enforced meaning\n-    // before doing the integer comparisons of ::VerifyLockTime.\n-    const uint32_t nLockTimeMask = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG\n-                                 | CTxIn::SEQUENCE_LOCKTIME_MASK;\n+    // before doing the integer comparisons\n+    const uint32_t nLockTimeMask = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | CTxIn::SEQUENCE_LOCKTIME_MASK;\n+    const int64_t txToSequenceMasked = txToSequence & nLockTimeMask;\n+    const CScriptNum nSequenceMasked = nSequence & nLockTimeMask;\n+\n+    // There are two kinds of nSequence: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nSequenceMasked < CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nSequenceMasked being tested is the same as\n+    // the nSequenceMasked in the transaction.\n+    if (!(\n+        (txToSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) ||\n+        (txToSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG)\n+    ))\n+        return false;\n \n-    if (!::VerifyLockTime(txToSequence & nLockTimeMask, CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG, nSequence & nLockTimeMask))\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nSequenceMasked > txToSequenceMasked)\n         return false;\n \n     return true;\n }\n \n-\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);"
      }
    ]
  },
  {
    "sha": "c8d309e4b4d82dd233f167b4df503e6a5b4164ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGQzMDllNGI0ZDgyZGQyMzNmMTY3YjRkZjUwM2U2YTViNDE2NGVm",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T09:39:44Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "Code style fix.\n\nThis if statement is a little obtuse and using braces here\nimproves readability.",
      "tree": {
        "sha": "a40900ef2b25b3d6cb470697be51798b86866d50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a40900ef2b25b3d6cb470697be51798b86866d50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8d309e4b4d82dd233f167b4df503e6a5b4164ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8d309e4b4d82dd233f167b4df503e6a5b4164ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8d309e4b4d82dd233f167b4df503e6a5b4164ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8d309e4b4d82dd233f167b4df503e6a5b4164ef/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6170506fdf920e1cb07c086be670ad624cb04241",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6170506fdf920e1cb07c086be670ad624cb04241",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6170506fdf920e1cb07c086be670ad624cb04241"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "149a4f01563150c01d2773231e20e6e7086dea45",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8d309e4b4d82dd233f167b4df503e6a5b4164ef/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8d309e4b4d82dd233f167b4df503e6a5b4164ef/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c8d309e4b4d82dd233f167b4df503e6a5b4164ef",
        "patch": "@@ -1227,8 +1227,9 @@ bool TransactionSignatureChecker::CheckSequence(const CScriptNum& nSequence) con\n     if (!(\n         (txToSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked <  CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) ||\n         (txToSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked >= CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG)\n-    ))\n+    )) {\n         return false;\n+    }\n \n     // Now that we know we're comparing apples-to-apples, the\n     // comparison is a simple numeric one."
      }
    ]
  },
  {
    "sha": "ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGU4NWUxMjZkMWJhN2NiOTBhMzM4MmZiOGMzY2M0ZjNiODlkYzRk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-04T20:01:22Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "Add LockPoints\n\nObtain LockPoints to store in CTxMemPoolEntry and during a reorg, evaluate whether they are still valid and if not, recalculate them.",
      "tree": {
        "sha": "8977bfdb2474536bd0868e95a0bca4b0dae791db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8977bfdb2474536bd0868e95a0bca4b0dae791db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8d309e4b4d82dd233f167b4df503e6a5b4164ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8d309e4b4d82dd233f167b4df503e6a5b4164ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8d309e4b4d82dd233f167b4df503e6a5b4164ef"
      }
    ],
    "stats": {
      "total": 157,
      "additions": 131,
      "deletions": 26
    },
    "files": [
      {
        "sha": "d6eeceaaf7d782f3a711279d20e36ab344cdba34",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 19,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
        "patch": "@@ -793,7 +793,25 @@ bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeig\n     return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n }\n \n-bool CheckSequenceLocks(const CTransaction &tx, int flags)\n+bool TestLockPointValidity(const LockPoints* lp)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(lp);\n+    // If there are relative lock times then the maxInputBlock will be set\n+    // If there are no relative lock times, the LockPoints don't depend on the chain\n+    if (lp->maxInputBlock) {\n+        // Check whether chainActive is an extension of the block at which the LockPoints\n+        // calculation was valid.  If not LockPoints are no longer valid\n+        if (!chainActive.Contains(lp->maxInputBlock)) {\n+            return false;\n+        }\n+    }\n+\n+    // LockPoints still valid\n+    return true;\n+}\n+\n+bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool useExistingLockPoints)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(mempool.cs);\n@@ -809,25 +827,57 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags)\n     // *next* block, we need to use one more than chainActive.Height()\n     index.nHeight = tip->nHeight + 1;\n \n-    // pcoinsTip contains the UTXO set for chainActive.Tip()\n-    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n-    std::vector<int> prevheights;\n-    prevheights.resize(tx.vin.size());\n-    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n-        const CTxIn& txin = tx.vin[txinIndex];\n-        CCoins coins;\n-        if (!viewMemPool.GetCoins(txin.prevout.hash, coins)) {\n-            return error(\"%s: Missing input\", __func__);\n+    std::pair<int, int64_t> lockPair;\n+    if (useExistingLockPoints) {\n+        assert(lp);\n+        lockPair.first = lp->height;\n+        lockPair.second = lp->time;\n+    }\n+    else {\n+        // pcoinsTip contains the UTXO set for chainActive.Tip()\n+        CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+        std::vector<int> prevheights;\n+        prevheights.resize(tx.vin.size());\n+        for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+            const CTxIn& txin = tx.vin[txinIndex];\n+            CCoins coins;\n+            if (!viewMemPool.GetCoins(txin.prevout.hash, coins)) {\n+                return error(\"%s: Missing input\", __func__);\n+            }\n+            if (coins.nHeight == MEMPOOL_HEIGHT) {\n+                // Assume all mempool transaction confirm in the next block\n+                prevheights[txinIndex] = tip->nHeight + 1;\n+            } else {\n+                prevheights[txinIndex] = coins.nHeight;\n+            }\n         }\n-        if (coins.nHeight == MEMPOOL_HEIGHT) {\n-            // Assume all mempool transaction confirm in the next block\n-            prevheights[txinIndex] = tip->nHeight + 1;\n-        } else {\n-            prevheights[txinIndex] = coins.nHeight;\n+        lockPair = CalculateSequenceLocks(tx, flags, &prevheights, index);\n+        if (lp) {\n+            lp->height = lockPair.first;\n+            lp->time = lockPair.second;\n+            // Also store the hash of the block with the highest height of\n+            // all the blocks which have sequence locked prevouts.\n+            // This hash needs to still be on the chain\n+            // for these LockPoint calculations to be valid\n+            // Note: It is impossible to correctly calculate a maxInputBlock\n+            // if any of the sequence locked inputs depend on unconfirmed txs,\n+            // except in the special case where the relative lock time/height\n+            // is 0, which is equivalent to no sequence lock. Since we assume\n+            // input height of tip+1 for mempool txs and test the resulting\n+            // lockPair from CalculateSequenceLocks against tip+1.  We know\n+            // EvaluateSequenceLocks will fail if there was a non-zero sequence\n+            // lock on a mempool input, so we can use the return value of\n+            // CheckSequenceLocks to indicate the LockPoints validity\n+            int maxInputHeight = 0;\n+            BOOST_FOREACH(int height, prevheights) {\n+                // Can ignore mempool inputs since we'll fail if they had non-zero locks\n+                if (height != tip->nHeight+1) {\n+                    maxInputHeight = std::max(maxInputHeight, height);\n+                }\n+            }\n+            lp->maxInputBlock = tip->GetAncestor(maxInputHeight);\n         }\n     }\n-\n-    std::pair<int, int64_t> lockPair = CalculateSequenceLocks(tx, flags, &prevheights, index);\n     return EvaluateSequenceLocks(index, lockPair);\n }\n \n@@ -1016,6 +1066,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         CCoinsViewCache view(&dummy);\n \n         CAmount nValueIn = 0;\n+        LockPoints lp;\n         {\n         LOCK(pool.cs);\n         CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n@@ -1059,7 +1110,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         // be mined yet.\n         // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n         // CoinsViewCache instead of create its own\n-        if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+        if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n         }\n \n@@ -1091,7 +1142,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps);\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps, lp);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Check that the transaction doesn't have an excessive number of"
      },
      {
        "sha": "3793f55ba2e99ad5d01fcae233e0abe55c3986c9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
        "patch": "@@ -39,6 +39,7 @@ class CValidationInterface;\n class CValidationState;\n \n struct CNodeStateStats;\n+struct LockPoints;\n \n /** Default for accepting alerts from the P2P network. */\n static const bool DEFAULT_ALERTS = true;\n@@ -353,6 +354,11 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n+/**\n+ * Test whether the LockPoints height and time are still valid on the current chain\n+ */\n+bool TestLockPointValidity(const LockPoints* lp);\n+\n /**\n  * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n  * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n@@ -363,10 +369,14 @@ bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeig\n  * Check if transaction will be BIP 68 final in the next block to be created.\n  *\n  * Simulates calling SequenceLocks() with data from the tip of the current active chain.\n+ * Optionally stores in LockPoints the resulting height and time calculated and the hash\n+ * of the block needed for calculation or skips the calculation and uses the LockPoints\n+ * passed in for evaluation.\n+ * The LockPoints should not be considered valid if CheckSequenceLocks returns false.\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckSequenceLocks(const CTransaction &tx, int flags);\n+bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = NULL, bool useExistingLockPoints = false);\n \n /**\n  * Closure representing one script verification"
      },
      {
        "sha": "f278d7e3999a946300b6003f99069c6f2fe29200",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
        "patch": "@@ -150,7 +150,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCount);\n+                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCount, lp);\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "37bcb9b57c8615e662613ed0d38f3b4ec1af3083",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
        "patch": "@@ -5,6 +5,7 @@\n #include \"key.h\"\n #include \"pubkey.h\"\n #include \"txdb.h\"\n+#include \"txmempool.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n@@ -67,7 +68,8 @@ struct TestMemPoolEntryHelper\n     bool hadNoDependencies;\n     bool spendsCoinbase;\n     unsigned int sigOpCount;\n-    \n+    LockPoints lp;\n+\n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), dPriority(0.0), nHeight(1),\n         hadNoDependencies(false), spendsCoinbase(false), sigOpCount(1) { }"
      },
      {
        "sha": "5f814749b71ffe4705af8848d9abef35da0d97c8",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
        "patch": "@@ -22,10 +22,10 @@ using namespace std;\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n-                                 bool _spendsCoinbase, unsigned int _sigOps):\n+                                 bool _spendsCoinbase, unsigned int _sigOps, LockPoints lp):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n-    spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps)\n+    spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps), lockPoints(lp)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n@@ -61,6 +61,11 @@ void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n     feeDelta = newFeeDelta;\n }\n \n+void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)\n+{\n+    lockPoints = lp;\n+}\n+\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n@@ -506,7 +511,11 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(tx, flags)) {\n+        LockPoints lp = it->GetLockPoints();\n+        bool validLP =  TestLockPointValidity(&lp);\n+        if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(tx, flags, &lp, validLP)) {\n+            // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n+            // So it's critical that we remove the tx and not depend on the LockPoints.\n             transactionsToRemove.push_back(tx);\n         } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n@@ -521,6 +530,9 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n                 }\n             }\n         }\n+        if (!validLP) {\n+            mapTx.modify(it, update_lock_points(lp));\n+        }\n     }\n     BOOST_FOREACH(const CTransaction& tx, transactionsToRemove) {\n         list<CTransaction> removed;"
      },
      {
        "sha": "5997346b022bb558cc1cbf3df172a44bee22df77",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 31,
        "deletions": 1,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
        "patch": "@@ -19,6 +19,7 @@\n #include \"boost/multi_index/ordered_index.hpp\"\n \n class CAutoFile;\n+class CBlockIndex;\n \n inline double AllowFreeThreshold()\n {\n@@ -35,6 +36,21 @@ inline bool AllowFree(double dPriority)\n /** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+struct LockPoints\n+{\n+    // Will be set to the blockchain height and median time past\n+    // values that would be necessary to satisfy all relative locktime\n+    // constraints (BIP68) of this tx given our view of block chain history\n+    int height;\n+    int64_t time;\n+    // As long as the current chain descends from the highest height block\n+    // containing one of the inputs used in the calculation, then the cached\n+    // values are still valid even after a reorg.\n+    CBlockIndex* maxInputBlock;\n+\n+    LockPoints() : height(0), time(0), maxInputBlock(NULL) { }\n+};\n+\n class CTxMemPool;\n \n /** \\class CTxMemPoolEntry\n@@ -70,6 +86,7 @@ class CTxMemPoolEntry\n     bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n     unsigned int sigOpCount; //! Legacy sig ops plus P2SH sig op count\n     int64_t feeDelta; //! Used for determining the priority of the transaction for mining in a block\n+    LockPoints lockPoints; //! Track the height and time at which tx was final\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -84,7 +101,7 @@ class CTxMemPoolEntry\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                     bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase,\n-                    unsigned int nSigOps);\n+                    unsigned int nSigOps, LockPoints lp);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -101,12 +118,15 @@ class CTxMemPoolEntry\n     unsigned int GetSigOpCount() const { return sigOpCount; }\n     int64_t GetModifiedFee() const { return nFee + feeDelta; }\n     size_t DynamicMemoryUsage() const { return nUsageSize; }\n+    const LockPoints& GetLockPoints() const { return lockPoints; }\n \n     // Adjusts the descendant state, if this entry is not dirty.\n     void UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n     // Updates the fee delta used for mining priority score, and the\n     // modified fees with descendants.\n     void UpdateFeeDelta(int64_t feeDelta);\n+    // Update the LockPoints after a reorg\n+    void UpdateLockPoints(const LockPoints& lp);\n \n     /** We can set the entry to be dirty if doing the full calculation of in-\n      *  mempool descendants will be too expensive, which can potentially happen\n@@ -154,6 +174,16 @@ struct update_fee_delta\n     int64_t feeDelta;\n };\n \n+struct update_lock_points\n+{\n+    update_lock_points(const LockPoints& _lp) : lp(_lp) { }\n+\n+    void operator() (CTxMemPoolEntry &e) { e.UpdateLockPoints(lp); }\n+\n+private:\n+    const LockPoints& lp;\n+};\n+\n // extracts a TxMemPoolEntry's transaction hash\n struct mempoolentry_txid\n {"
      }
    ]
  },
  {
    "sha": "6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjgzY2YyYWRiMmZkNzNjZmVhYThlZjY3MDU0ZWE4YTBlNGVmNGRi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-15T04:13:27Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "BIP9 Implementation\n\nInspired by former implementations by Eric Lombrozo and Rusty Russell, and\nbased on code by Jorge Timon.",
      "tree": {
        "sha": "8958c2d5a7f146c560d73f1b85149a1be098647c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8958c2d5a7f146c560d73f1b85149a1be098647c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ade85e126d1ba7cb90a3382fb8c3cc4f3b89dc4d"
      }
    ],
    "stats": {
      "total": 364,
      "additions": 345,
      "deletions": 19
    },
    "files": [
      {
        "sha": "52316a9fd7b7f748c5d9a2212fd7b33cec3a1f04",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -163,6 +163,7 @@ BITCOIN_CORE_H = \\\n   utiltime.h \\\n   validationinterface.h \\\n   version.h \\\n+  versionbits.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/wallet.h \\\n@@ -214,6 +215,7 @@ libbitcoin_server_a_SOURCES = \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   validationinterface.cpp \\\n+  versionbits.cpp \\\n   $(BITCOIN_CORE_H)\n \n if ENABLE_ZMQ"
      },
      {
        "sha": "ae6c4338d6102d2ba3df209a36a197bb09953c15",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -14,8 +14,6 @@\n \n #include <vector>\n \n-#include <boost/foreach.hpp>\n-\n struct CDiskBlockPos\n {\n     int nFile;"
      },
      {
        "sha": "b911ab3f619ce5c3a4997755d15cfcb60b5f01e8",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -81,6 +81,8 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -163,6 +165,8 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = false;\n+        consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -227,6 +231,8 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n         consensus.fPowNoRetargeting = true;\n+        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n+        consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "d5039211a30bed7b9e31e7e097c8c93d0030c051",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -7,8 +7,28 @@\n #define BITCOIN_CONSENSUS_PARAMS_H\n \n #include \"uint256.h\"\n+#include <map>\n+#include <string>\n \n namespace Consensus {\n+\n+enum DeploymentPos\n+{\n+    MAX_VERSION_BITS_DEPLOYMENTS = 0,\n+};\n+\n+/**\n+ * Struct for each individual consensus rule change using BIP9.\n+ */\n+struct BIP9Deployment {\n+    /** Bit position to select the particular bit in nVersion. */\n+    int bit;\n+    /** Start MedianTime for version bits miner confirmation. Can be a date in the past */\n+    int64_t nStartTime;\n+    /** Timeout/expiry MedianTime for the deployment attempt. */\n+    int64_t nTimeout;\n+};\n+\n /**\n  * Parameters that influence chain consensus.\n  */\n@@ -22,6 +42,14 @@ struct Params {\n     /** Block height and hash at which BIP34 becomes active */\n     int BIP34Height;\n     uint256 BIP34Hash;\n+    /**\n+     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n+     * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n+     * Examples: 1916 for 95%, 1512 for testchains.\n+     */\n+    uint32_t nRuleChangeActivationThreshold;\n+    uint32_t nMinerConfirmationWindow;\n+    BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "2b7da4ee8c134990829f47ead88019fee30a4360",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -496,7 +496,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blockversion=<n>\", strprintf(\"Override block version to test forking scenarios (default: %d)\", (int)CBlock::CURRENT_VERSION));\n+        strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n \n     strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n     strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));"
      },
      {
        "sha": "542f37876a890fa158ef534ddde50dc503bcc2cb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 6,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -34,6 +34,7 @@\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n+#include \"versionbits.h\"\n \n #include <sstream>\n \n@@ -2135,6 +2136,51 @@ void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const\n     }\n }\n \n+// Protected by cs_main\n+static VersionBitsCache versionbitscache;\n+\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs_main);\n+    int32_t nVersion = VERSIONBITS_TOP_BITS;\n+\n+    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        ThresholdState state = VersionBitsState(pindexPrev, params, (Consensus::DeploymentPos)i, versionbitscache);\n+        if (state == THRESHOLD_LOCKED_IN || state == THRESHOLD_STARTED) {\n+            nVersion |= VersionBitsMask(params, (Consensus::DeploymentPos)i);\n+        }\n+    }\n+\n+    return nVersion;\n+}\n+\n+/**\n+ * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n+ */\n+class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n+{\n+private:\n+    int bit;\n+\n+public:\n+    WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n+\n+    int64_t BeginTime(const Consensus::Params& params) const { return 0; }\n+    int64_t EndTime(const Consensus::Params& params) const { return std::numeric_limits<int64_t>::max(); }\n+    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    {\n+        return ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n+               ((pindex->nVersion >> bit) & 1) != 0 &&\n+               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+    }\n+};\n+\n+// Protected by cs_main\n+static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS];\n+\n static int64_t nTimeCheck = 0;\n static int64_t nTimeForks = 0;\n static int64_t nTimeVerify = 0;\n@@ -2503,24 +2549,42 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n \n     // Check the version of the last 100 blocks to see if we need to upgrade:\n     static bool fWarned = false;\n-    if (!IsInitialBlockDownload() && !fWarned)\n+    if (!IsInitialBlockDownload())\n     {\n         int nUpgraded = 0;\n         const CBlockIndex* pindex = chainActive.Tip();\n+        for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n+            WarningBitsConditionChecker checker(bit);\n+            ThresholdState state = checker.GetStateFor(pindex, chainParams.GetConsensus(), warningcache[bit]);\n+            if (state == THRESHOLD_ACTIVE || state == THRESHOLD_LOCKED_IN) {\n+                if (state == THRESHOLD_ACTIVE) {\n+                    strMiscWarning = strprintf(_(\"Warning: unknown new rules activated (versionbit %i)\"), bit);\n+                    if (!fWarned) {\n+                        CAlert::Notify(strMiscWarning, true);\n+                        fWarned = true;\n+                    }\n+                } else {\n+                    LogPrintf(\"%s: unknown new rules are about to activate (versionbit %i)\\n\", __func__, bit);\n+                }\n+            }\n+        }\n         for (int i = 0; i < 100 && pindex != NULL; i++)\n         {\n-            if (pindex->nVersion > CBlock::CURRENT_VERSION)\n+            int32_t nExpectedVersion = ComputeBlockVersion(pindex->pprev, chainParams.GetConsensus());\n+            if (pindex->nVersion > VERSIONBITS_LAST_OLD_BLOCK_VERSION && (pindex->nVersion & ~nExpectedVersion) != 0)\n                 ++nUpgraded;\n             pindex = pindex->pprev;\n         }\n         if (nUpgraded > 0)\n-            LogPrintf(\"%s: %d of last 100 blocks above version %d\\n\", __func__, nUpgraded, (int)CBlock::CURRENT_VERSION);\n+            LogPrintf(\"%s: %d of last 100 blocks have unexpected version\\n\", __func__, nUpgraded);\n         if (nUpgraded > 100/2)\n         {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n-            strMiscWarning = _(\"Warning: This version is obsolete; upgrade required!\");\n-            CAlert::Notify(strMiscWarning, true);\n-            fWarned = true;\n+            strMiscWarning = _(\"Warning: Unknown block versions being mined! It's possible unknown rules are in effect\");\n+            if (!fWarned) {\n+                CAlert::Notify(strMiscWarning, true);\n+                fWarned = true;\n+            }\n         }\n     }\n }\n@@ -3839,6 +3903,10 @@ void UnloadBlockIndex()\n     setDirtyFileInfo.clear();\n     mapNodeState.clear();\n     recentRejects.reset(NULL);\n+    versionbitscache.Clear();\n+    for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n+        warningcache[b].clear();\n+    }\n \n     BOOST_FOREACH(BlockMap::value_type& entry, mapBlockIndex) {\n         delete entry.second;"
      },
      {
        "sha": "8c6a51cacdfaa08bd57552b7ce84126ea2f62896",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -528,6 +528,11 @@ extern CBlockTreeDB *pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n+/**\n+ * Determine what nVersion a new block should use.\n+ */\n+int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n /** Reject codes greater or equal to this can be returned by AcceptToMemPool\n  * for transactions, to signal internal conditions. They cannot and should not\n  * be sent over the P2P network."
      },
      {
        "sha": "d095d418feac707a1088335a36f9598fedc8c74b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -79,11 +79,6 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n-    // -regtest only: allow overriding block.nVersion with\n-    // -blockversion=N to test forking scenarios\n-    if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n-\n     // Create coinbase tx\n     CMutableTransaction txNew;\n     txNew.vin.resize(1);\n@@ -137,6 +132,12 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n \n+        pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+        // -regtest only: allow overriding block.nVersion with\n+        // -blockversion=N to test forking scenarios\n+        if (chainparams.MineBlocksOnDemand())\n+            pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n+\n         int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                                 ? nMedianTimePast\n                                 : pblock->GetBlockTime();"
      },
      {
        "sha": "42276b2bc26bcbdb046a0d760a51c2afff2553bf",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -21,7 +21,6 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=4;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;\n@@ -49,7 +48,7 @@ class CBlockHeader\n \n     void SetNull()\n     {\n-        nVersion = CBlockHeader::CURRENT_VERSION;\n+        nVersion = 0;\n         hashPrevBlock.SetNull();\n         hashMerkleRoot.SetNull();\n         nTime = 0;"
      },
      {
        "sha": "ab6485081ceed885a2909e3889fe90dba11a5c3d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 3,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -247,13 +247,40 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n-    chainActive.Tip()->nHeight = 209999;\n+    // Create an actual 209999-long block chain (without valid blocks).\n+    while (chainActive.Tip()->nHeight < 209999) {\n+        CBlockIndex* prev = chainActive.Tip();\n+        CBlockIndex* next = new CBlockIndex();\n+        next->phashBlock = new uint256(GetRandHash());\n+        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        next->pprev = prev;\n+        next->nHeight = prev->nHeight + 1;\n+        next->BuildSkip();\n+        chainActive.SetTip(next);\n+    }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n-    chainActive.Tip()->nHeight = 210000;\n+    // Extend to a 210000-long block chain.\n+    while (chainActive.Tip()->nHeight < 210000) {\n+        CBlockIndex* prev = chainActive.Tip();\n+        CBlockIndex* next = new CBlockIndex();\n+        next->phashBlock = new uint256(GetRandHash());\n+        pcoinsTip->SetBestBlock(next->GetBlockHash());\n+        next->pprev = prev;\n+        next->nHeight = prev->nHeight + 1;\n+        next->BuildSkip();\n+        chainActive.SetTip(next);\n+    }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n-    chainActive.Tip()->nHeight = nHeight;\n+    // Delete the dummy blocks again.\n+    while (chainActive.Tip()->nHeight > nHeight) {\n+        CBlockIndex* del = chainActive.Tip();\n+        chainActive.SetTip(del->pprev);\n+        pcoinsTip->SetBestBlock(del->pprev->GetBlockHash());\n+        delete del->phashBlock;\n+        delete del;\n+    }\n \n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);"
      },
      {
        "sha": "fbb60c0fc598eca274bed0f386f157bfacdc238e",
        "filename": "src/versionbits.cpp",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -0,0 +1,133 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"versionbits.h\"\n+\n+ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n+{\n+    int nPeriod = Period(params);\n+    int nThreshold = Threshold(params);\n+    int64_t nTimeStart = BeginTime(params);\n+    int64_t nTimeTimeout = EndTime(params);\n+\n+    // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n+    if (pindexPrev != NULL) {\n+        pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n+    }\n+\n+    // Walk backwards in steps of nPeriod to find a pindexPrev whose information is known\n+    std::vector<const CBlockIndex*> vToCompute;\n+    while (cache.count(pindexPrev) == 0) {\n+        if (pindexPrev == NULL) {\n+            // The genesis block is by definition defined.\n+            cache[pindexPrev] = THRESHOLD_DEFINED;\n+            break;\n+        }\n+        if (pindexPrev->GetMedianTimePast() < nTimeStart) {\n+            // Optimizaton: don't recompute down further, as we know every earlier block will be before the start time\n+            cache[pindexPrev] = THRESHOLD_DEFINED;\n+            break;\n+        }\n+        vToCompute.push_back(pindexPrev);\n+        pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n+    }\n+\n+    // At this point, cache[pindexPrev] is known\n+    assert(cache.count(pindexPrev));\n+    ThresholdState state = cache[pindexPrev];\n+\n+    // Now walk forward and compute the state of descendants of pindexPrev\n+    while (!vToCompute.empty()) {\n+        ThresholdState stateNext = state;\n+        pindexPrev = vToCompute.back();\n+        vToCompute.pop_back();\n+\n+        switch (state) {\n+            case THRESHOLD_DEFINED: {\n+                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n+                    stateNext = THRESHOLD_FAILED;\n+                } else if (pindexPrev->GetMedianTimePast() >= nTimeStart) {\n+                    stateNext = THRESHOLD_STARTED;\n+                }\n+                break;\n+            }\n+            case THRESHOLD_STARTED: {\n+                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n+                    stateNext = THRESHOLD_FAILED;\n+                    break;\n+                }\n+                // We need to count\n+                const CBlockIndex* pindexCount = pindexPrev;\n+                int count = 0;\n+                for (int i = 0; i < nPeriod; i++) {\n+                    if (Condition(pindexCount, params)) {\n+                        count++;\n+                    }\n+                    pindexCount = pindexCount->pprev;\n+                }\n+                if (count >= nThreshold) {\n+                    stateNext = THRESHOLD_LOCKED_IN;\n+                }\n+                break;\n+            }\n+            case THRESHOLD_LOCKED_IN: {\n+                // Always progresses into ACTIVE.\n+                stateNext = THRESHOLD_ACTIVE;\n+                break;\n+            }\n+            case THRESHOLD_FAILED:\n+            case THRESHOLD_ACTIVE: {\n+                // Nothing happens, these are terminal states.\n+                break;\n+            }\n+        }\n+        cache[pindexPrev] = state = stateNext;\n+    }\n+\n+    return state;\n+}\n+\n+namespace\n+{\n+/**\n+ * Class to implement versionbits logic.\n+ */\n+class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n+private:\n+    const Consensus::DeploymentPos id;\n+\n+protected:\n+    int64_t BeginTime(const Consensus::Params& params) const { return params.vDeployments[id].nStartTime; }\n+    int64_t EndTime(const Consensus::Params& params) const { return params.vDeployments[id].nTimeout; }\n+    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    {\n+        return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask(params)) != 0);\n+    }\n+\n+public:\n+    VersionBitsConditionChecker(Consensus::DeploymentPos id_) : id(id_) {}\n+    uint32_t Mask(const Consensus::Params& params) const { return ((uint32_t)1) << params.vDeployments[id].bit; }\n+};\n+\n+}\n+\n+ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+{\n+    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n+}\n+\n+uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    return VersionBitsConditionChecker(pos).Mask(params);\n+}\n+\n+void VersionBitsCache::Clear()\n+{\n+    for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n+        caches[d].clear();\n+    }\n+}"
      },
      {
        "sha": "04f47382727968b0014164b91f0930d4013bd7b3",
        "filename": "src/versionbits.h",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_VERSIONBITS\n+#define BITCOIN_CONSENSUS_VERSIONBITS\n+\n+#include \"chain.h\"\n+#include <map>\n+\n+/** What block version to use for new blocks (pre versionbits) */\n+static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;\n+/** What bits to set in version for versionbits blocks */\n+static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;\n+/** What bitmask determines whether versionbits is in use */\n+static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;\n+/** Total bits available for versionbits */\n+static const int32_t VERSIONBITS_NUM_BITS = 29;\n+\n+enum ThresholdState {\n+    THRESHOLD_DEFINED,\n+    THRESHOLD_STARTED,\n+    THRESHOLD_LOCKED_IN,\n+    THRESHOLD_ACTIVE,\n+    THRESHOLD_FAILED,\n+};\n+\n+// A map that gives the state for blocks whose height is a multiple of Period().\n+// The map is indexed by the block's parent, however, so all keys in the map\n+// will either be NULL or a block with (height + 1) % Period() == 0.\n+typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;\n+\n+/**\n+ * Abstract class that implements BIP9-style threshold logic, and caches results.\n+ */\n+class AbstractThresholdConditionChecker {\n+protected:\n+    virtual bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const =0;\n+    virtual int64_t BeginTime(const Consensus::Params& params) const =0;\n+    virtual int64_t EndTime(const Consensus::Params& params) const =0;\n+    virtual int Period(const Consensus::Params& params) const =0;\n+    virtual int Threshold(const Consensus::Params& params) const =0;\n+\n+public:\n+    // Note that the function below takes a pindexPrev as input: they compute information for block B based on its parent.\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n+};\n+\n+struct VersionBitsCache\n+{\n+    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+\n+    void Clear();\n+};\n+\n+ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n+uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "5f90d4e29470a8a8fa9f9580b195a0d5c23430b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjkwZDRlMjk0NzBhOGE4ZmE5Zjk1ODBiMTk1YTBkNWMyMzQzMGI3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-20T01:57:36Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "Versionbits tests",
      "tree": {
        "sha": "a7bcb49a268148afd746e051f5e7549cfcc632cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7bcb49a268148afd746e051f5e7549cfcc632cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f83cf2adb2fd73cfeaa8ef67054ea8a0e4ef4db"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 186,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e96e7bec37d5fc3e4d611aafb079a7a5f82459bf",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=5f90d4e29470a8a8fa9f9580b195a0d5c23430b7",
        "patch": "@@ -82,6 +82,7 @@ BITCOIN_TESTS =\\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\\n+  test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp"
      },
      {
        "sha": "9de8461d847be4fb1c089089bb246c115c0b1a76",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "added",
        "additions": 185,
        "deletions": 0,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=5f90d4e29470a8a8fa9f9580b195a0d5c23430b7",
        "patch": "@@ -0,0 +1,185 @@\n+// Copyright (c) 2014-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+#include \"random.h\"\n+#include \"versionbits.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+/* Define a virtual block time, one block per 10 minutes after Nov 14 2014, 0:55:36am */\n+int32_t TestTime(int nHeight) { return 1415926536 + 600 * nHeight; }\n+\n+static const Consensus::Params paramsDummy = Consensus::Params();\n+\n+class TestConditionChecker : public AbstractThresholdConditionChecker\n+{\n+private:\n+    mutable ThresholdConditionCache cache;\n+\n+public:\n+    int64_t BeginTime(const Consensus::Params& params) const { return TestTime(10000); }\n+    int64_t EndTime(const Consensus::Params& params) const { return TestTime(20000); }\n+    int Period(const Consensus::Params& params) const { return 1000; }\n+    int Threshold(const Consensus::Params& params) const { return 900; }\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n+\n+    ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n+};\n+\n+#define CHECKERS 6\n+\n+class VersionBitsTester\n+{\n+    // A fake blockchain\n+    std::vector<CBlockIndex*> vpblock;\n+\n+    // 6 independent checkers for the same bit.\n+    // The first one performs all checks, the second only 50%, the third only 25%, etc...\n+    // This is to test whether lack of cached information leads to the same results.\n+    TestConditionChecker checker[CHECKERS];\n+\n+    // Test counter (to identify failures)\n+    int num;\n+\n+public:\n+    VersionBitsTester() : num(0) {}\n+\n+    VersionBitsTester& Reset() {\n+        for (unsigned int i = 0; i < vpblock.size(); i++) {\n+            delete vpblock[i];\n+        }\n+        for (unsigned int  i = 0; i < CHECKERS; i++) {\n+            checker[i] = TestConditionChecker();\n+        }\n+        vpblock.clear();\n+        return *this;\n+    }\n+\n+    ~VersionBitsTester() {\n+         Reset();\n+    }\n+\n+    VersionBitsTester& Mine(unsigned int height, int32_t nTime, int32_t nVersion) {\n+        while (vpblock.size() < height) {\n+            CBlockIndex* pindex = new CBlockIndex();\n+            pindex->nHeight = vpblock.size();\n+            pindex->pprev = vpblock.size() > 0 ? vpblock.back() : NULL;\n+            pindex->nTime = nTime;\n+            pindex->nVersion = nVersion;\n+            pindex->BuildSkip();\n+            vpblock.push_back(pindex);\n+        }\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestDefined() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_DEFINED, strprintf(\"Test %i for DEFINED\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestStarted() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_STARTED, strprintf(\"Test %i for STARTED\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestLockedIn() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_LOCKED_IN, strprintf(\"Test %i for LOCKED_IN\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestActive() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_ACTIVE, strprintf(\"Test %i for ACTIVE\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n+    VersionBitsTester& TestFailed() {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateFor(vpblock.empty() ? NULL : vpblock.back()) == THRESHOLD_FAILED, strprintf(\"Test %i for FAILED\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(versionbits_test)\n+{\n+    for (int i = 0; i < 64; i++) {\n+        // DEFINED -> FAILED\n+        VersionBitsTester().TestDefined()\n+                           .Mine(1, TestTime(1), 0x100).TestDefined()\n+                           .Mine(11, TestTime(11), 0x100).TestDefined()\n+                           .Mine(989, TestTime(989), 0x100).TestDefined()\n+                           .Mine(999, TestTime(20000), 0x100).TestDefined()\n+                           .Mine(1000, TestTime(20000), 0x100).TestFailed()\n+                           .Mine(1999, TestTime(30001), 0x100).TestFailed()\n+                           .Mine(2000, TestTime(30002), 0x100).TestFailed()\n+                           .Mine(2001, TestTime(30003), 0x100).TestFailed()\n+                           .Mine(2999, TestTime(30004), 0x100).TestFailed()\n+                           .Mine(3000, TestTime(30005), 0x100).TestFailed()\n+\n+        // DEFINED -> STARTED -> FAILED\n+                           .Reset().TestDefined()\n+                           .Mine(1, TestTime(1), 0).TestDefined()\n+                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined() // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x100).TestStarted() // So that's what happens the next period\n+                           .Mine(2051, TestTime(10010), 0).TestStarted() // 51 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 899 new blocks\n+                           .Mine(3000, TestTime(20000), 0).TestFailed() // 50 old blocks (so 899 out of the past 1000)\n+                           .Mine(4000, TestTime(20010), 0x100).TestFailed()\n+\n+        // DEFINED -> STARTED -> FAILED while threshold reached\n+                           .Reset().TestDefined()\n+                           .Mine(1, TestTime(1), 0).TestDefined()\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n+                           .Mine(2999, TestTime(30000), 0x100).TestStarted() // 999 new blocks\n+                           .Mine(3000, TestTime(30000), 0x100).TestFailed() // 1 new block (so 1000 out of the past 1000 are new)\n+                           .Mine(3999, TestTime(30001), 0).TestFailed()\n+                           .Mine(4000, TestTime(30002), 0).TestFailed()\n+                           .Mine(14333, TestTime(30003), 0).TestFailed()\n+                           .Mine(24000, TestTime(40000), 0).TestFailed()\n+\n+        // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n+                           .Reset().TestDefined()\n+                           .Mine(1, TestTime(1), 0).TestDefined()\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n+                           .Mine(2050, TestTime(10010), 0x200).TestStarted() // 50 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 900 new blocks\n+                           .Mine(2999, TestTime(19999), 0x200).TestStarted() // 49 old blocks\n+                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn() // 1 old block (so 900 out of the past 1000)\n+                           .Mine(3999, TestTime(30001), 0).TestLockedIn()\n+                           .Mine(4000, TestTime(30002), 0).TestActive()\n+                           .Mine(14333, TestTime(30003), 0).TestActive()\n+                           .Mine(24000, TestTime(40000), 0).TestActive();\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "0bdaacd7913fd626691daa2946590547071dcf3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmRhYWNkNzkxM2ZkNjI2NjkxZGFhMjk0NjU5MDU0NzA3MWRjZjNi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-03-03T20:00:03Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:52Z"
      },
      "message": "Softfork status report in RPC",
      "tree": {
        "sha": "09af110e8aef6dc532a3bb1df5f0903409417d65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09af110e8aef6dc532a3bb1df5f0903409417d65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bdaacd7913fd626691daa2946590547071dcf3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bdaacd7913fd626691daa2946590547071dcf3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bdaacd7913fd626691daa2946590547071dcf3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bdaacd7913fd626691daa2946590547071dcf3b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f90d4e29470a8a8fa9f9580b195a0d5c23430b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f90d4e29470a8a8fa9f9580b195a0d5c23430b7"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 31,
      "deletions": 1
    },
    "files": [
      {
        "sha": "89ca99bc900b0a1edb87148e0f478ebc0d279a86",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bdaacd7913fd626691daa2946590547071dcf3b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bdaacd7913fd626691daa2946590547071dcf3b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0bdaacd7913fd626691daa2946590547071dcf3b",
        "patch": "@@ -5930,7 +5930,11 @@ bool SendMessages(CNode* pto)\n      return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast));\n  }\n \n-\n+ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    LOCK(cs_main);\n+    return VersionBitsState(chainActive.Tip(), params, pos, versionbitscache);\n+}\n \n class CMainCleanup\n {"
      },
      {
        "sha": "05ae9ea450e72f7be2aefa5d69846f1034564955",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bdaacd7913fd626691daa2946590547071dcf3b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bdaacd7913fd626691daa2946590547071dcf3b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0bdaacd7913fd626691daa2946590547071dcf3b",
        "patch": "@@ -16,6 +16,7 @@\n #include \"net.h\"\n #include \"script/script_error.h\"\n #include \"sync.h\"\n+#include \"versionbits.h\"\n \n #include <algorithm>\n #include <exception>\n@@ -275,6 +276,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n \n+/** Get the BIP9 state for a given deployment at the current tip. */\n+ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n struct CNodeStateStats {\n     int nMisbehavior;\n     int nSyncHeight;"
      },
      {
        "sha": "4fd2e6d05cda58ab518c1927fa403f45f463e790",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bdaacd7913fd626691daa2946590547071dcf3b/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bdaacd7913fd626691daa2946590547071dcf3b/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=0bdaacd7913fd626691daa2946590547071dcf3b",
        "patch": "@@ -604,6 +604,20 @@ static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex*\n     return rv;\n }\n \n+static UniValue BIP9SoftForkDesc(const std::string& name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+{\n+    UniValue rv(UniValue::VOBJ);\n+    rv.push_back(Pair(\"id\", name));\n+    switch (VersionBitsTipState(consensusParams, id)) {\n+    case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n+    case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n+    case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n+    case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n+    case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;\n+    }\n+    return rv;\n+}\n+\n UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -634,6 +648,12 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"        },\\n\"\n             \"        \\\"reject\\\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \\\"enforce\\\")\\n\"\n             \"     }, ...\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"bip9_softforks\\\": [       (array) status of BIP9 softforks in progress\\n\"\n+            \"     {\\n\"\n+            \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of the softfork\\n\"\n+            \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"lockedin\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"     }\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -657,10 +677,12 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     CBlockIndex* tip = chainActive.Tip();\n     UniValue softforks(UniValue::VARR);\n+    UniValue bip9_softforks(UniValue::VARR);\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n+    obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n \n     if (fPruneMode)\n     {"
      }
    ]
  },
  {
    "sha": "8ebc6f2aac554c08a0d83229c1043a36ef9492f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWJjNmYyYWFjNTU0YzA4YTBkODMyMjljMTA0M2EzNmVmOTQ5MmY1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-03-09T21:00:53Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:53Z"
      },
      "message": "Add testing of ComputeBlockVersion",
      "tree": {
        "sha": "729a73ac415b8b8c501ea38ff4c6b4b9785823f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/729a73ac415b8b8c501ea38ff4c6b4b9785823f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ebc6f2aac554c08a0d83229c1043a36ef9492f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ebc6f2aac554c08a0d83229c1043a36ef9492f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ebc6f2aac554c08a0d83229c1043a36ef9492f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ebc6f2aac554c08a0d83229c1043a36ef9492f5/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bdaacd7913fd626691daa2946590547071dcf3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bdaacd7913fd626691daa2946590547071dcf3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bdaacd7913fd626691daa2946590547071dcf3b"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 120,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1d3de502a1fd3ea60e20e869452f502672aea545",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebc6f2aac554c08a0d83229c1043a36ef9492f5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebc6f2aac554c08a0d83229c1043a36ef9492f5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8ebc6f2aac554c08a0d83229c1043a36ef9492f5",
        "patch": "@@ -83,6 +83,9 @@ class CMainParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -167,6 +170,9 @@ class CTestNetParams : public CChainParams {\n         consensus.fPowNoRetargeting = false;\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -233,6 +239,9 @@ class CRegTestParams : public CChainParams {\n         consensus.fPowNoRetargeting = true;\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "7c3a8e84c3d3537dd161b79db5c7be6d60a729a5",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebc6f2aac554c08a0d83229c1043a36ef9492f5/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebc6f2aac554c08a0d83229c1043a36ef9492f5/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=8ebc6f2aac554c08a0d83229c1043a36ef9492f5",
        "patch": "@@ -14,7 +14,8 @@ namespace Consensus {\n \n enum DeploymentPos\n {\n-    MAX_VERSION_BITS_DEPLOYMENTS = 0,\n+    DEPLOYMENT_TESTDUMMY,\n+    MAX_VERSION_BITS_DEPLOYMENTS\n };\n \n /**"
      },
      {
        "sha": "63dc4726bc8ea00d580943daabe1564771987295",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 0,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebc6f2aac554c08a0d83229c1043a36ef9492f5/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebc6f2aac554c08a0d83229c1043a36ef9492f5/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=8ebc6f2aac554c08a0d83229c1043a36ef9492f5",
        "patch": "@@ -6,6 +6,9 @@\n #include \"random.h\"\n #include \"versionbits.h\"\n #include \"test/test_bitcoin.h\"\n+#include \"chainparams.h\"\n+#include \"main.h\"\n+#include \"consensus/params.h\"\n \n #include <boost/test/unit_test.hpp>\n \n@@ -124,6 +127,8 @@ class VersionBitsTester\n         num++;\n         return *this;\n     }\n+\n+    CBlockIndex * Tip() { return vpblock.size() ? vpblock.back() : NULL; }\n };\n \n BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n@@ -182,4 +187,108 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n+{\n+    // Check that ComputeBlockVersion will set the appropriate bit correctly\n+    // on mainnet.\n+    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+\n+    // Use the TESTDUMMY deployment for testing purposes.\n+    int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;\n+    int64_t nStartTime = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime;\n+    int64_t nTimeout = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout;\n+\n+    assert(nStartTime < nTimeout);\n+\n+    // In the first chain, test that the bit is set by CBV until it has failed.\n+    // In the second chain, test the bit is set by CBV while STARTED and\n+    // LOCKED-IN, and then no longer set while ACTIVE.\n+    VersionBitsTester firstChain, secondChain;\n+\n+    // Start generating blocks before nStartTime\n+    int64_t nTime = nStartTime - 1;\n+\n+    // Before MedianTimePast of the chain has crossed nStartTime, the bit\n+    // should not be set.\n+    CBlockIndex *lastBlock = NULL;\n+    lastBlock = firstChain.Mine(2016, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+\n+    // Mine 2011 more blocks at the old time, and check that CBV isn't setting the bit yet.\n+    for (int i=1; i<2012; i++) {\n+        lastBlock = firstChain.Mine(2016+i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n+        // to be 4, and the bit we're testing happens to be bit 28.\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    }\n+    // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n+    // CBV should still not yet set the bit.\n+    nTime = nStartTime;\n+    for (int i=2012; i<=2016; i++) {\n+        lastBlock = firstChain.Mine(2016+i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    }\n+\n+    // Advance to the next period and transition to STARTED,\n+    lastBlock = firstChain.Mine(6048, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    // so ComputeBlockVersion should now set the bit,\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    // and should also be using the VERSIONBITS_TOP_BITS.\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+\n+    // Check that ComputeBlockVersion will set the bit until nTimeout\n+    nTime += 600;\n+    int blocksToMine = 4032; // test blocks for up to 2 time periods\n+    int nHeight = 6048;\n+    // These blocks are all before nTimeout is reached.\n+    while (nTime < nTimeout && blocksToMine > 0) {\n+        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+        blocksToMine--;\n+        nTime += 600;\n+        nHeight += 1;\n+    };\n+\n+    nTime = nTimeout;\n+    // FAILED is only triggered at the end of a period, so CBV should be setting\n+    // the bit until the period transition.\n+    for (int i=0; i<2015; i++) {\n+        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+        nHeight += 1;\n+    }\n+    // The next block should trigger no longer setting the bit.\n+    lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+\n+    // On a new chain:\n+    // verify that the bit will be set after lock-in, and then stop being set\n+    // after activation.\n+    nTime = nStartTime;\n+\n+    // Mine one period worth of blocks, and check that the bit will be on for the\n+    // next period.\n+    lastBlock = secondChain.Mine(2016, nStartTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+\n+    // Mine another period worth of blocks, signaling the new bit.\n+    lastBlock = secondChain.Mine(4032, nStartTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n+    // After one period of setting the bit on each block, it should have locked in.\n+    // We keep setting the bit for one more period though, until activation.\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+\n+    // Now check that we keep mining the block until the end of this period, and\n+    // then stop at the beginning of the next period.\n+    lastBlock = secondChain.Mine(6047, nStartTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    lastBlock = secondChain.Mine(6048, nStartTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+\n+    // Finally, verify that after a soft fork has activated, CBV no longer uses\n+    // VERSIONBITS_LAST_OLD_BLOCK_VERSION.\n+    //BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+}\n+\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "0710b303d6f1de9d8b93b637df6b5ae19c0633eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzEwYjMwM2Q2ZjFkZTlkOGI5M2I2MzdkZjZiNWFlMTljMDYzM2Vi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-03-09T14:48:20Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:53Z"
      },
      "message": "Test versionbits deployments",
      "tree": {
        "sha": "26fd950121a2b10c317d9ae03c9213eb430573a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26fd950121a2b10c317d9ae03c9213eb430573a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0710b303d6f1de9d8b93b637df6b5ae19c0633eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0710b303d6f1de9d8b93b637df6b5ae19c0633eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0710b303d6f1de9d8b93b637df6b5ae19c0633eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0710b303d6f1de9d8b93b637df6b5ae19c0633eb/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ebc6f2aac554c08a0d83229c1043a36ef9492f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ebc6f2aac554c08a0d83229c1043a36ef9492f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ebc6f2aac554c08a0d83229c1043a36ef9492f5"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1f86a06a3f7f70f0b12f0236f36635fe3d3556fb",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0710b303d6f1de9d8b93b637df6b5ae19c0633eb/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0710b303d6f1de9d8b93b637df6b5ae19c0633eb/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=0710b303d6f1de9d8b93b637df6b5ae19c0633eb",
        "patch": "@@ -185,6 +185,28 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n                            .Mine(14333, TestTime(30003), 0).TestActive()\n                            .Mine(24000, TestTime(40000), 0).TestActive();\n     }\n+\n+    // Sanity checks of version bit deployments\n+    const Consensus::Params &mainnetParams = Params(CBaseChainParams::MAIN).GetConsensus();\n+    for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        uint32_t bitmask = VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)i);\n+        // Make sure that no deployment tries to set an invalid bit.\n+        BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n+\n+        // Verify that the deployment windows of different deployment using the\n+        // same bit are disjoint.\n+        // This test may need modification at such time as a new deployment\n+        // is proposed that reuses the bit of an activated soft fork, before the\n+        // end time of that soft fork.  (Alternatively, the end time of that\n+        // activated soft fork could be later changed to be earlier to avoid\n+        // overlap.)\n+        for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n+            if (VersionBitsMask(mainnetParams, (Consensus::DeploymentPos)j) == bitmask) {\n+                BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n+                        mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n+            }\n+        }\n+    }\n }\n \n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)"
      }
    ]
  },
  {
    "sha": "6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmYwYjlmOTZlZjgzZGMxMWY3MGUxYWI2NmQ4MTVmYjZjOTcxZTYw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-03-15T16:09:16Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:14:53Z"
      },
      "message": "RPC test for BIP9 warning logic",
      "tree": {
        "sha": "4f2168721068781dc87df7c106128aa17e255ddd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f2168721068781dc87df7c106128aa17e255ddd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0710b303d6f1de9d8b93b637df6b5ae19c0633eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0710b303d6f1de9d8b93b637df6b5ae19c0633eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0710b303d6f1de9d8b93b637df6b5ae19c0633eb"
      }
    ],
    "stats": {
      "total": 161,
      "additions": 161,
      "deletions": 0
    },
    "files": [
      {
        "sha": "60f12e5147dcc0e61bc18e425aa23aa694ba12f4",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60",
        "patch": "@@ -106,6 +106,7 @@\n     'invalidblockrequest.py',\n     'invalidtxrequest.py',\n     'abandonconflict.py',\n+    'p2p-versionbits-warning.py',\n ]\n testScriptsExt = [\n     'bip65-cltv.py',"
      },
      {
        "sha": "061dcbf0e1e87e915512832cf075806970e5fc76",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "added",
        "additions": 160,
        "deletions": 0,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60",
        "patch": "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from test_framework.blocktools import create_block, create_coinbase\n+\n+'''\n+Test version bits' warning system.\n+\n+Generate chains with block versions that appear to be signalling unknown\n+soft-forks, and test that warning alerts are generated.\n+'''\n+\n+VB_PERIOD = 144 # versionbits period length for regtest\n+VB_THRESHOLD = 108 # versionbits activation threshold for regtest\n+VB_TOP_BITS = 0x20000000\n+VB_UNKNOWN_BIT = 27 # Choose a bit unassigned to any deployment\n+\n+# TestNode: bare-bones \"peer\".  Used mostly as a conduit for a test to sending\n+# p2p messages to a node, generating the messages in the main testing logic.\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def on_inv(self, conn, message):\n+        pass\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    # Sync up with the node after delivery of a block\n+    def sync_with_ping(self, timeout=30):\n+        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n+        received_pong = False\n+        sleep_time = 0.05\n+        while not received_pong and timeout > 0:\n+            time.sleep(sleep_time)\n+            timeout -= sleep_time\n+            with mininode_lock:\n+                if self.last_pong.nonce == self.ping_counter:\n+                    received_pong = True\n+        self.ping_counter += 1\n+        return received_pong\n+\n+\n+class VersionBitsWarningTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 1)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n+        # Open and close to create zero-length file\n+        with open(self.alert_filename, 'w') as f:\n+            pass\n+        self.node_options = [\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]\n+        self.nodes.append(start_node(0, self.options.tmpdir, self.node_options))\n+\n+        import re\n+        self.vb_pattern = re.compile(\"^Warning.*versionbit\")\n+\n+    # Send numblocks blocks via peer with nVersionToUse set.\n+    def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n+        tip = self.nodes[0].getbestblockhash()\n+        height = self.nodes[0].getblockcount()\n+        block_time = self.nodes[0].getblockheader(tip)[\"time\"]+1\n+        tip = int(tip, 16)\n+\n+        for i in xrange(numblocks):\n+            block = create_block(tip, create_coinbase(height+1), block_time)\n+            block.nVersion = nVersionToUse\n+            block.solve()\n+            peer.send_message(msg_block(block))\n+            block_time += 1\n+            height += 1\n+            tip = block.sha256\n+        peer.sync_with_ping()\n+\n+    def test_versionbits_in_alert_file(self):\n+        with open(self.alert_filename, 'r') as f:\n+            alert_text = f.read()\n+        assert(self.vb_pattern.match(alert_text))\n+\n+    def run_test(self):\n+        # Setup the p2p connection and start up the network thread.\n+        test_node = TestNode()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n+        test_node.add_connection(connections[0])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+        # Test logic begins here\n+        test_node.wait_for_verack()\n+\n+        # 1. Have the node mine one period worth of blocks\n+        self.nodes[0].generate(VB_PERIOD)\n+\n+        # 2. Now build one period of blocks on the tip, with < VB_THRESHOLD\n+        # blocks signaling some unknown bit.\n+        nVersion = VB_TOP_BITS | (1<<VB_UNKNOWN_BIT)\n+        self.send_blocks_with_version(test_node, VB_THRESHOLD-1, nVersion)\n+\n+        # Fill rest of period with regular version blocks\n+        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n+        # Check that we're not getting any versionbit-related errors in\n+        # getinfo()\n+        assert(not self.vb_pattern.match(self.nodes[0].getinfo()[\"errors\"]))\n+\n+        # 3. Now build one period of blocks with >= VB_THRESHOLD blocks signaling\n+        # some unknown bit\n+        self.send_blocks_with_version(test_node, VB_THRESHOLD, nVersion)\n+        self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD)\n+        # Might not get a versionbits-related alert yet, as we should\n+        # have gotten a different alert due to more than 51/100 blocks\n+        # being of unexpected version.\n+        # Check that getinfo() shows some kind of error.\n+        assert(len(self.nodes[0].getinfo()[\"errors\"]) != 0)\n+\n+        # Mine a period worth of expected blocks so the generic block-version warning\n+        # is cleared, and restart the node. This should move the versionbit state\n+        # to ACTIVE.\n+        self.nodes[0].generate(VB_PERIOD)\n+        stop_node(self.nodes[0], 0)\n+        wait_bitcoinds()\n+        # Empty out the alert file\n+        with open(self.alert_filename, 'w') as f:\n+            pass\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"])\n+\n+        # Connecting one block should be enough to generate an error.\n+        self.nodes[0].generate(1)\n+        assert(len(self.nodes[0].getinfo()[\"errors\"]) != 0)\n+        stop_node(self.nodes[0], 0)\n+        wait_bitcoinds()\n+        self.test_versionbits_in_alert_file()\n+\n+        # Test framework expects the node to still be running...\n+        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros=1\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"])\n+\n+\n+if __name__ == '__main__':\n+    VersionBitsWarningTest().main()"
      }
    ]
  },
  {
    "sha": "ee40924fef1e8835b9ef865360b126952ad8359d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTQwOTI0ZmVmMWU4ODM1YjllZjg2NTM2MGIxMjY5NTJhZDgzNTlk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-02-20T22:37:13Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:28:40Z"
      },
      "message": "Add CHECKSEQUENCEVERIFY softfork through BIP9",
      "tree": {
        "sha": "44eed691af008d103ad510a8f6b9f50295313ebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44eed691af008d103ad510a8f6b9f50295313ebe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee40924fef1e8835b9ef865360b126952ad8359d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee40924fef1e8835b9ef865360b126952ad8359d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee40924fef1e8835b9ef865360b126952ad8359d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee40924fef1e8835b9ef865360b126952ad8359d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ff0b9f96ef83dc11f70e1ab66d815fb6c971e60"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 23,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4af6f34c6209a643cb17f7d5570279dccc4d3a3a",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee40924fef1e8835b9ef865360b126952ad8359d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee40924fef1e8835b9ef865360b126952ad8359d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ee40924fef1e8835b9ef865360b126952ad8359d",
        "patch": "@@ -86,7 +86,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n-        /** \n+\n+        // Deployment of BIP68, BIP112, and BIP113.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+\n+        /**\n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n          * a large 32-bit integer with any alignment.\n@@ -173,6 +179,12 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+\n+        // Deployment of BIP68, BIP112, and BIP113.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -242,6 +254,9 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 999999999999ULL;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].bit = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 0;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 999999999999ULL;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "4f3480b89ba6979d4a5f738f5a583f35ba297e88",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee40924fef1e8835b9ef865360b126952ad8359d/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee40924fef1e8835b9ef865360b126952ad8359d/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ee40924fef1e8835b9ef865360b126952ad8359d",
        "patch": "@@ -15,6 +15,7 @@ namespace Consensus {\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n+    DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      },
      {
        "sha": "39d68af3721302b43c6df60e5fee3f12d8920496",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee40924fef1e8835b9ef865360b126952ad8359d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee40924fef1e8835b9ef865360b126952ad8359d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ee40924fef1e8835b9ef865360b126952ad8359d",
        "patch": "@@ -2277,6 +2277,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n+    // Start enforcing CHECKSEQUENCEVERIFY using versionbits logic.\n+    if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+        flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+    }\n+\n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n     LogPrint(\"bench\", \"    - Fork checks: %.2fms [%.2fs]\\n\", 0.001 * (nTime2 - nTime1), nTimeForks * 0.000001);\n "
      },
      {
        "sha": "f0bcafafe95000859c6036ccd09fe9e2356bfa64",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee40924fef1e8835b9ef865360b126952ad8359d/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee40924fef1e8835b9ef865360b126952ad8359d/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=ee40924fef1e8835b9ef865360b126952ad8359d",
        "patch": "@@ -681,6 +681,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n+    bip9_softforks.push_back(BIP9SoftForkDesc(\"csv\", consensusParams, Consensus::DEPLOYMENT_CSV));\n     obj.push_back(Pair(\"softforks\",             softforks));\n     obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n "
      }
    ]
  },
  {
    "sha": "648be9b442587cc1682052bca80625aea906a01d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDhiZTliNDQyNTg3Y2MxNjgyMDUyYmNhODA2MjVhZWE5MDZhMDFk",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:33:31Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:28:40Z"
      },
      "message": "Soft fork logic for BIP113",
      "tree": {
        "sha": "714dcff23c0ba41551d3de957eb35a8f00093c2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/714dcff23c0ba41551d3de957eb35a8f00093c2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/648be9b442587cc1682052bca80625aea906a01d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/648be9b442587cc1682052bca80625aea906a01d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/648be9b442587cc1682052bca80625aea906a01d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/648be9b442587cc1682052bca80625aea906a01d/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee40924fef1e8835b9ef865360b126952ad8359d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee40924fef1e8835b9ef865360b126952ad8359d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee40924fef1e8835b9ef865360b126952ad8359d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3035a3e5dde808c0bc6699febd1763b524b9adb1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/648be9b442587cc1682052bca80625aea906a01d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/648be9b442587cc1682052bca80625aea906a01d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=648be9b442587cc1682052bca80625aea906a01d",
        "patch": "@@ -3310,12 +3310,18 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n+    // Start enforcing BIP113 (Median Time Past) using versionbits logic.\n+    int nLockTimeFlags = 0;\n+    if (VersionBitsState(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n+        nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n+    }\n+\n+    int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                              ? pindexPrev->GetMedianTimePast()\n+                              : block.GetBlockTime();\n+\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-        int nLockTimeFlags = 0;\n-        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? pindexPrev->GetMedianTimePast()\n-                                : block.GetBlockTime();\n         if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }"
      }
    ]
  },
  {
    "sha": "9713ed3015da02b0132b665e965fd591689e6510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzEzZWQzMDE1ZGEwMmIwMTMyYjY2NWU5NjVmZDU5MTY4OWU2NTEw",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-16T16:37:43Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:28:40Z"
      },
      "message": "Soft fork logic for BIP68",
      "tree": {
        "sha": "8b58ae7903ae9159e1898f3b500d3b0df38b485a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b58ae7903ae9159e1898f3b500d3b0df38b485a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9713ed3015da02b0132b665e965fd591689e6510",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9713ed3015da02b0132b665e965fd591689e6510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9713ed3015da02b0132b665e965fd591689e6510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9713ed3015da02b0132b665e965fd591689e6510/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "648be9b442587cc1682052bca80625aea906a01d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/648be9b442587cc1682052bca80625aea906a01d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/648be9b442587cc1682052bca80625aea906a01d"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "14f70cdf5f514a5b25319f91e995d95d1b15c952",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9713ed3015da02b0132b665e965fd591689e6510/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9713ed3015da02b0132b665e965fd591689e6510/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9713ed3015da02b0132b665e965fd591689e6510",
        "patch": "@@ -2277,9 +2277,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n-    // Start enforcing CHECKSEQUENCEVERIFY using versionbits logic.\n+    // Start enforcing BIP68 (sequence locks) and BIP112 (CHECKSEQUENCEVERIFY) using versionbits logic.\n+    int nLockTimeFlags = 0;\n     if (VersionBitsState(pindex->pprev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV, versionbitscache) == THRESHOLD_ACTIVE) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n+        nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;\n@@ -2290,7 +2292,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     std::vector<int> prevheights;\n-    int nLockTimeFlags = 0;\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;"
      }
    ]
  },
  {
    "sha": "159ee3dd90490eabf6c048c17a62ffa01f6a0967",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTllZTNkZDkwNDkwZWFiZjZjMDQ4YzE3YTYyZmZhMDFmNmEwOTY3",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-19T19:52:31Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:28:41Z"
      },
      "message": "Policy: allow transaction version 2 relay policy.\n\nThis commit introduces a way to gracefully bump the default\ntransaction version in a two step process.",
      "tree": {
        "sha": "ca7dea2e042c2950f68fd0453697a96129b6234d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca7dea2e042c2950f68fd0453697a96129b6234d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/159ee3dd90490eabf6c048c17a62ffa01f6a0967",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159ee3dd90490eabf6c048c17a62ffa01f6a0967",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/159ee3dd90490eabf6c048c17a62ffa01f6a0967",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159ee3dd90490eabf6c048c17a62ffa01f6a0967/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9713ed3015da02b0132b665e965fd591689e6510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9713ed3015da02b0132b665e965fd591689e6510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9713ed3015da02b0132b665e965fd591689e6510"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "018b3d25b0b0953b0b43a2ed82b2d8c20ddf77d5",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159ee3dd90490eabf6c048c17a62ffa01f6a0967/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159ee3dd90490eabf6c048c17a62ffa01f6a0967/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=159ee3dd90490eabf6c048c17a62ffa01f6a0967",
        "patch": "@@ -58,7 +58,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n \n bool IsStandardTx(const CTransaction& tx, std::string& reason)\n {\n-    if (tx.nVersion > CTransaction::CURRENT_VERSION || tx.nVersion < 1) {\n+    if (tx.nVersion > CTransaction::MAX_STANDARD_VERSION || tx.nVersion < 1) {\n         reason = \"version\";\n         return false;\n     }"
      },
      {
        "sha": "9f7d6f394390b5cac3533c8b101c20ba03028c8a",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/159ee3dd90490eabf6c048c17a62ffa01f6a0967/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/159ee3dd90490eabf6c048c17a62ffa01f6a0967/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=159ee3dd90490eabf6c048c17a62ffa01f6a0967",
        "patch": "@@ -206,8 +206,15 @@ class CTransaction\n     void UpdateHash() const;\n \n public:\n+    // Default transaction version.\n     static const int32_t CURRENT_VERSION=1;\n \n+    // Changing the default transaction version requires a two step process: first\n+    // adapting relay policy by bumping MAX_STANDARD_VERSION, and then later date\n+    // bumping the default CURRENT_VERSION at which point both CURRENT_VERSION and\n+    // MAX_STANDARD_VERSION will be equal.\n+    static const int32_t MAX_STANDARD_VERSION=2;\n+\n     // The local variables are made const to prevent unintended modification\n     // without updating the cached hash value. However, CTransaction is not\n     // actually immutable; deserialization and assignment are implemented,"
      }
    ]
  },
  {
    "sha": "3a99feba859f39f0d61bd672b5cbb20ed31dacac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTk5ZmViYTg1OWYzOWYwZDYxYmQ2NzJiNWNiYjIwZWQzMWRhY2Fj",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-10T23:36:55Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-18T09:28:41Z"
      },
      "message": "Add RPC test for BIP 68/112/113 soft fork.\n\nThis RPC test will test both the activation mechanism of the first versionbits soft fork as well as testing many code branches of the consensus logic for BIP's 68, 112, and 113.",
      "tree": {
        "sha": "c889c3ce9de97a10216f1bf003045be1128178d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c889c3ce9de97a10216f1bf003045be1128178d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a99feba859f39f0d61bd672b5cbb20ed31dacac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a99feba859f39f0d61bd672b5cbb20ed31dacac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a99feba859f39f0d61bd672b5cbb20ed31dacac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a99feba859f39f0d61bd672b5cbb20ed31dacac/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "159ee3dd90490eabf6c048c17a62ffa01f6a0967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159ee3dd90490eabf6c048c17a62ffa01f6a0967",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/159ee3dd90490eabf6c048c17a62ffa01f6a0967"
      }
    ],
    "stats": {
      "total": 548,
      "additions": 548,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fe65b32ca70552f76aeb5380ca94b8b1adb6ba96",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a99feba859f39f0d61bd672b5cbb20ed31dacac/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a99feba859f39f0d61bd672b5cbb20ed31dacac/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=3a99feba859f39f0d61bd672b5cbb20ed31dacac",
        "patch": "@@ -74,6 +74,7 @@\n \n #Tests\n testScripts = [\n+    'bip68-112-113-p2p.py',\n     'wallet.py',\n     'listtransactions.py',\n     'receivedby.py',"
      },
      {
        "sha": "c226f4dad497646c29e6fb0d5b35f82f4b9b7ba5",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "added",
        "additions": 547,
        "deletions": 0,
        "changes": 547,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a99feba859f39f0d61bd672b5cbb20ed31dacac/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a99feba859f39f0d61bd672b5cbb20ed31dacac/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=3a99feba859f39f0d61bd672b5cbb20ed31dacac",
        "patch": "@@ -0,0 +1,547 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from binascii import unhexlify\n+import cStringIO\n+import time\n+\n+'''\n+This test is meant to exercise activation of the first version bits soft fork\n+This soft fork will activate the following BIPS:\n+BIP 68  - nSequence relative lock times\n+BIP 112 - CHECKSEQUENCEVERIFY\n+BIP 113 - MedianTimePast semantics for nLockTime\n+\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+\n+mine 82 blocks whose coinbases will be used to generate inputs for our tests\n+mine 61 blocks to transition from DEFINED to STARTED\n+mine 144 blocks only 100 of which are signaling readiness in order to fail to change state this period\n+mine 144 blocks with 108 signaling and verify STARTED->LOCKED_IN\n+mine 140 blocks and seed block chain with the 82 inputs will use for our tests at height 572\n+mine 3 blocks and verify still at LOCKED_IN and test that enforcement has not triggered\n+mine 1 block and test that enforcement has triggered (which triggers ACTIVE)\n+Test BIP 113 is enforced\n+Mine 4 blocks so next height is 580 and test BIP 68 is enforced for time and height\n+Mine 1 block so next height is 581 and test BIP 68 now passes time but not height\n+Mine 1 block so next height is 582 and test BIP 68 now passes time and height\n+Test that BIP 112 is enforced\n+\n+Various transactions will be used to test that the BIPs rules are not enforced before the soft fork activates\n+And that after the soft fork activates transactions pass and fail as they should according to the rules.\n+For each BIP, transactions of versions 1 and 2 will be tested.\n+----------------\n+BIP 113:\n+bip113tx - modify the nLocktime variable\n+\n+BIP 68:\n+bip68txs - 16 txs with nSequence relative locktime of 10 with various bits set as per the relative_locktimes below\n+\n+BIP 112:\n+bip112txs_vary_nSequence - 16 txs with nSequence relative_locktimes of 10 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_nSequence_9 - 16 txs with nSequence relative_locktimes of 9 evaluated against 10 OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n+bip112tx_special - test negative argument to OP_CSV\n+'''\n+\n+base_relative_locktime = 10\n+seq_disable_flag = 1<<31\n+seq_random_high_bit = 1<<25\n+seq_type_flag = 1<<22\n+seq_random_low_bit = 1<<18\n+\n+# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n+# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n+relative_locktimes = []\n+for b31 in xrange(2):\n+    b25times = []\n+    for b25 in xrange(2):\n+        b22times = []\n+        for b22 in xrange(2):\n+            b18times = []\n+            for b18 in xrange(2):\n+                rlt = base_relative_locktime\n+                if (b31):\n+                    rlt = rlt | seq_disable_flag\n+                if (b25):\n+                    rlt = rlt | seq_random_high_bit\n+                if (b22):\n+                    rlt = rlt | seq_type_flag\n+                if (b18):\n+                    rlt = rlt | seq_random_low_bit\n+                b18times.append(rlt)\n+            b22times.append(b18times)\n+        b25times.append(b22times)\n+    relative_locktimes.append(b25times)\n+\n+def all_rlt_txs(txarray):\n+    txs = []\n+    for b31 in xrange(2):\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    txs.append(txarray[b31][b25][b22][b18])\n+    return txs\n+\n+class BIP68_112_113Test(ComparisonTestFramework):\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=4']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def send_generic_input_tx(self, node, coinbases):\n+        amount = Decimal(\"49.99\")\n+        return node.sendrawtransaction(ToHex(self.sign_transaction(node, self.create_transaction(node, node.getblock(coinbases.pop())['tx'][0], self.nodeaddress, amount))))\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def sign_transaction(self, node, unsignedtx):\n+        rawtx = ToHex(unsignedtx)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = self.create_test_block([], version)\n+            test_blocks.append([block, True])\n+            self.last_block_time += 600\n+            self.tip = block.sha256\n+            self.tipheight += 1\n+        return test_blocks\n+\n+    def create_test_block(self, txs, version = 536870912):\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n+        block.nVersion = version\n+        block.vtx.extend(txs)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        return block\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip68inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        tx.nVersion = txversion\n+                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def create_bip112special(self, input, txversion):\n+        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n+        tx.nVersion = txversion\n+        signtx = self.sign_transaction(self.nodes[0], tx)\n+        signtx.vin[0].scriptSig = CScript([-1, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+        return signtx\n+\n+    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n+        txs = []\n+        assert(len(bip112inputs) >= 16)\n+        i = 0\n+        for b31 in xrange(2):\n+            b25txs = []\n+            for b25 in xrange(2):\n+                b22txs = []\n+                for b22 in xrange(2):\n+                    b18txs = []\n+                    for b18 in xrange(2):\n+                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n+                        i += 1\n+                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n+                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n+                        else: # vary nSequence instead, OP_CSV is fixed\n+                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n+                        tx.nVersion = txversion\n+                        signtx = self.sign_transaction(self.nodes[0], tx)\n+                        if (varyOP_CSV):\n+                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        else:\n+                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_NOP3, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n+                        b18txs.append(signtx)\n+                    b22txs.append(b18txs)\n+                b25txs.append(b22txs)\n+            txs.append(b25txs)\n+        return txs\n+\n+    def get_tests(self):\n+        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82 # height of the next block to build\n+        self.last_block_time = long_past_time\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+\n+        assert_equal(self.get_bip9_status('csv')['status'], 'defined')\n+        test_blocks = self.generate_blocks(61, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 1\n+        # Advanced from DEFINED to STARTED, height = 143\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 2\n+        # Failed to advance past STARTED, height = 287\n+        assert_equal(self.get_bip9_status('csv')['status'], 'started')\n+\n+        # 108 out of 144 signal bit 0 to achieve lock-in\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 3\n+        # Advanced from STARTED to LOCKED_IN, height = 431\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # 140 more version 4 blocks\n+        test_blocks = self.generate_blocks(140, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+\n+        ### Inputs at height = 572\n+        # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n+        # Note we reuse inputs for v1 and v2 txs so must test these separately\n+        # 16 normal inputs\n+        bip68inputs = []\n+        for i in xrange(16):\n+            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+        # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112basicinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112basicinputs.append(inputs)\n+        # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112diverseinputs = []\n+        for j in xrange(2):\n+            inputs = []\n+            for i in xrange(16):\n+                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip112diverseinputs.append(inputs)\n+        # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n+        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        # 1 normal input\n+        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+\n+        self.nodes[0].setmocktime(self.last_block_time + 600)\n+        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        self.nodes[0].setmocktime(0)\n+        self.tip = int(\"0x\" + inputblockhash + \"L\", 0)\n+        self.tipheight += 1\n+        self.last_block_time += 600\n+        assert_equal(len(self.nodes[0].getblock(inputblockhash,True)[\"tx\"]), 82+1)\n+\n+        # 2 more version 4 blocks\n+        test_blocks = self.generate_blocks(2, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 5\n+        # Not yet advanced to ACTIVE, height = 574 (will activate for block 576, not 575)\n+        assert_equal(self.get_bip9_status('csv')['status'], 'locked_in')\n+\n+        # Test both version 1 and version 2 transactions for all tests\n+        # BIP113 test transaction will be modified before each use to put in appropriate block time\n+        bip113tx_v1 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v1.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2 = self.create_transaction(self.nodes[0], bip113input, self.nodeaddress, Decimal(\"49.98\"))\n+        bip113tx_v2.vin[0].nSequence = 0xFFFFFFFE\n+        bip113tx_v2.nVersion = 2\n+\n+        # For BIP68 test all 16 relative sequence locktimes\n+        bip68txs_v1 = self.create_bip68txs(bip68inputs, 1)\n+        bip68txs_v2 = self.create_bip68txs(bip68inputs, 2)\n+\n+        # For BIP112 test:\n+        # 16 relative sequence locktimes of 10 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_v1 = self.create_bip112txs(bip112basicinputs[0], False, 1)\n+        bip112txs_vary_nSequence_v2 = self.create_bip112txs(bip112basicinputs[0], False, 2)\n+        # 16 relative sequence locktimes of 9 against 10 OP_CSV OP_DROP inputs\n+        bip112txs_vary_nSequence_9_v1 = self.create_bip112txs(bip112basicinputs[1], False, 1, -1)\n+        bip112txs_vary_nSequence_9_v2 = self.create_bip112txs(bip112basicinputs[1], False, 2, -1)\n+        # sequence lock time of 10 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_v1 = self.create_bip112txs(bip112diverseinputs[0], True, 1)\n+        bip112txs_vary_OP_CSV_v2 = self.create_bip112txs(bip112diverseinputs[0], True, 2)\n+        # sequence lock time of 9 against 16 (relative_lock_time) OP_CSV OP_DROP inputs\n+        bip112txs_vary_OP_CSV_9_v1 = self.create_bip112txs(bip112diverseinputs[1], True, 1, -1)\n+        bip112txs_vary_OP_CSV_9_v2 = self.create_bip112txs(bip112diverseinputs[1], True, 2, -1)\n+        # -1 OP_CSV OP_DROP input\n+        bip112tx_special_v1 = self.create_bip112special(bip112specialinput, 1)\n+        bip112tx_special_v2 = self.create_bip112special(bip112specialinput, 2)\n+\n+\n+        ### TESTING ###\n+        ##################################\n+        ### Before Soft Forks Activate ###\n+        ##################################\n+        # All txs should pass\n+        ### Version 1 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        success_txs.append(bip113signed1)\n+        success_txs.append(bip112tx_special_v1)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v1))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 6\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        success_txs = []\n+        # add BIP113 tx and -1 CSV tx\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        success_txs.append(bip113signed2)\n+        success_txs.append(bip112tx_special_v2)\n+        # add BIP 68 txs\n+        success_txs.extend(all_rlt_txs(bip68txs_v2))\n+        # add BIP 112 with seq=10 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_v2))\n+        # try BIP 112 with seq=9 txs\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2))\n+        success_txs.extend(all_rlt_txs(bip112txs_vary_OP_CSV_9_v2))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 7\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        # 1 more version 4 block to get us to height 575 so the fork should now be active for the next block\n+        test_blocks = self.generate_blocks(1, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 8\n+        assert_equal(self.get_bip9_status('csv')['status'], 'active')\n+\n+\n+        #################################\n+        ### After Soft Forks Activate ###\n+        #################################\n+        ### BIP 113 ###\n+        # BIP 113 tests should now fail regardless of version number if nLockTime isn't satisfied by new rules\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n+        # BIP 113 tests should now pass if the locktime is < MTP\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n+        for bip113tx in [bip113signed1, bip113signed2]:\n+            yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n+            self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Next block height = 580 after 4 blocks of random version\n+        test_blocks = self.generate_blocks(4, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 13\n+\n+        ### BIP 68 ###\n+        ### Version 1 txs ###\n+        # All still pass\n+        success_txs = []\n+        success_txs.extend(all_rlt_txs(bip68txs_v1))\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 14\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Version 2 txs ###\n+        bip68success_txs = []\n+        # All txs with SEQUENCE_LOCKTIME_DISABLE_FLAG set pass\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    bip68success_txs.append(bip68txs_v2[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 15\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        # All txs without flag fail as we are at delta height = 8 < 10 and delta time = 8 * 600 < 10 * 512\n+        bip68timetxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68timetxs.append(bip68txs_v2[0][b25][1][b18])\n+        for tx in bip68timetxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 16 - 19\n+        bip68heighttxs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                bip68heighttxs.append(bip68txs_v2[0][b25][0][b18])\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 20 - 23\n+\n+        # Advance one block to 581\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 24\n+\n+        # Height txs should fail and time txs should now pass 9 * 600 > 10 * 512\n+        bip68success_txs.extend(bip68timetxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 25\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        for tx in bip68heighttxs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 26 - 29\n+\n+        # Advance one block to 582\n+        test_blocks = self.generate_blocks(1, 1234)\n+        yield TestInstance(test_blocks, sync_every_block=False) # 30\n+\n+        # All BIP 68 txs should pass\n+        bip68success_txs.extend(bip68heighttxs)\n+        yield TestInstance([[self.create_test_block(bip68success_txs), True]]) # 31\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+\n+        ### BIP 112 ###\n+        ### Version 1 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v1]), False]]) #32\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 1 txs should still pass\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v1[1][b25][b22][b18])\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v1[1][b25][b22][b18])\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 33\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV, version 1 txs should now fail\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_v1))\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v1))\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_v1[0][b25][b22][b18])\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v1[0][b25][b22][b18])\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 34 - 81\n+\n+        ### Version 2 txs ###\n+        # -1 OP_CSV tx should fail\n+        yield TestInstance([[self.create_test_block([bip112tx_special_v2]), False]]) #82\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in argument to OP_CSV, version 2 txs should pass (all sequence locks are met)\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    success_txs.append(bip112txs_vary_OP_CSV_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV\n+                    success_txs.append(bip112txs_vary_OP_CSV_9_v2[1][b25][b22][b18]) # 8/16 of vary_OP_CSV_9\n+\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 83\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n+        # All txs with nSequence 11 should fail either due to earlier mismatch or failing the CSV check\n+        fail_txs = []\n+        fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_OP_CSV_9_v2[0][b25][b22][b18]) # 16/16 of vary_OP_CSV_9\n+\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 84 - 107\n+\n+        # If SEQUENCE_LOCKTIME_DISABLE_FLAG is set in nSequence, tx should fail\n+        fail_txs = []\n+        for b25 in xrange(2):\n+            for b22 in xrange(2):\n+                for b18 in xrange(2):\n+                    fail_txs.append(bip112txs_vary_nSequence_v2[1][b25][b22][b18]) # 8/16 of vary_nSequence\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 108-115\n+\n+        # If sequencelock types mismatch, tx should fail\n+        fail_txs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                fail_txs.append(bip112txs_vary_nSequence_v2[0][b25][1][b18]) # 12/16 of vary_nSequence\n+                fail_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][1][b18]) # 12/16 of vary_OP_CSV\n+        for tx in fail_txs:\n+            yield TestInstance([[self.create_test_block([tx]), False]]) # 116-123\n+\n+        # Remaining txs should pass, just test masking works properly\n+        success_txs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                success_txs.append(bip112txs_vary_nSequence_v2[0][b25][0][b18]) # 16/16 of vary_nSequence\n+                success_txs.append(bip112txs_vary_OP_CSV_v2[0][b25][0][b18]) # 16/16 of vary_OP_CSV\n+        yield TestInstance([[self.create_test_block(success_txs), True]]) # 124\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        # Additional test, of checking that comparison of two time types works properly\n+        time_txs = []\n+        for b25 in xrange(2):\n+            for b18 in xrange(2):\n+                tx = bip112txs_vary_OP_CSV_v2[0][b25][1][b18]\n+                tx.vin[0].nSequence = base_relative_locktime | seq_type_flag\n+                signtx = self.sign_transaction(self.nodes[0], tx)\n+                time_txs.append(signtx)\n+        yield TestInstance([[self.create_test_block(time_txs), True]]) # 125\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+\n+        ### Missing aspects of test\n+        ##  Testing empty stack fails\n+\n+\n+if __name__ == '__main__':\n+    BIP68_112_113Test().main()"
      }
    ]
  },
  {
    "sha": "26e9a05cc3192ce19b7c46043aeb12230d3207a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmU5YTA1Y2MzMTkyY2UxOWI3YzQ2MDQzYWViMTIyMzBkMzIwN2E1",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-03-16T05:30:04Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-26T04:05:42Z"
      },
      "message": "Test of BIP9 fork activation of mtp, csv, sequence_lock",
      "tree": {
        "sha": "6d2a705d819c5d095e62f04fb95b18097f81986c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d2a705d819c5d095e62f04fb95b18097f81986c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26e9a05cc3192ce19b7c46043aeb12230d3207a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26e9a05cc3192ce19b7c46043aeb12230d3207a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26e9a05cc3192ce19b7c46043aeb12230d3207a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26e9a05cc3192ce19b7c46043aeb12230d3207a5/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a99feba859f39f0d61bd672b5cbb20ed31dacac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a99feba859f39f0d61bd672b5cbb20ed31dacac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a99feba859f39f0d61bd672b5cbb20ed31dacac"
      }
    ],
    "stats": {
      "total": 225,
      "additions": 225,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f7e98dbf647a45db966272fe206e0002e4b337b1",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26e9a05cc3192ce19b7c46043aeb12230d3207a5/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26e9a05cc3192ce19b7c46043aeb12230d3207a5/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=26e9a05cc3192ce19b7c46043aeb12230d3207a5",
        "patch": "@@ -110,6 +110,7 @@\n     'p2p-versionbits-warning.py',\n ]\n testScriptsExt = [\n+    'bip9-softforks.py',\n     'bip65-cltv.py',\n     'bip65-cltv-p2p.py',\n     'bipdersig-p2p.py',"
      },
      {
        "sha": "cbb1b7d4cee89180bcc3d23a5ac0ef0d6cb20fcc",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "added",
        "additions": 220,
        "deletions": 0,
        "changes": 220,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26e9a05cc3192ce19b7c46043aeb12230d3207a5/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26e9a05cc3192ce19b7c46043aeb12230d3207a5/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=26e9a05cc3192ce19b7c46043aeb12230d3207a5",
        "patch": "@@ -0,0 +1,220 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n+from binascii import hexlify, unhexlify\n+import cStringIO\n+import time\n+import itertools\n+\n+'''\n+This test is meant to exercise BIP forks\n+Connect to a single node.\n+regtest lock-in with 108/144 block signalling\n+activation after a further 144 blocks\n+mine 2 block and save coinbases for later use\n+mine 141 blocks to transition from DEFINED to STARTED\n+mine 100 blocks signalling readiness and 44 not in order to fail to change state this period\n+mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN)\n+mine a further 143 blocks (LOCKED_IN)\n+test that enforcement has not triggered (which triggers ACTIVE)\n+test that enforcement has triggered\n+'''\n+\n+\n+\n+class BIP9SoftForksTest(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        self.test = TestManager(self, self.options.tmpdir)\n+        self.test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        self.test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(rawtx))\n+        tx.deserialize(f)\n+        tx.nVersion = 2\n+        return tx\n+\n+    def sign_transaction(self, node, tx):\n+        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def generate_blocks(self, number, version, test_blocks = []):\n+        for i in xrange(number):\n+            block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+            block.nVersion = version\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+            self.height += 1\n+        return test_blocks\n+\n+    def get_bip9_status(self, key):\n+        info = self.nodes[0].getblockchaininfo()\n+        for row in info['bip9_softforks']:\n+            if row['id'] == key:\n+                return row\n+        raise IndexError ('key:\"%s\" not found' % key)\n+\n+\n+    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n+        # generate some coins for later\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        self.height = 3  # height of the next block to build\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+\n+        # Test 1\n+        # Advance from DEFINED to STARTED\n+        test_blocks = self.generate_blocks(141, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+\n+        # Test 2\n+        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+\n+        # Test 3\n+        # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n+        # using a variety of bits to simulate multiple parallel softforks\n+        test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+\n+        # Test 4\n+        # 143 more version 536870913 blocks (waiting period-1)\n+        test_blocks = self.generate_blocks(143, 4)\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+\n+        # Test 5\n+        # Check that the new rule is enforced\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        invalidate(spendtx)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+        invalidatePostSignature(spendtx)\n+        spendtx.rehash()\n+        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+        block.nVersion = activated_version\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        self.height += 1\n+        yield TestInstance([[block, True]])\n+\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n+\n+        # Test 6\n+        # Check that the new sequence lock rules are enforced\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        invalidate(spendtx)\n+        spendtx = self.sign_transaction(self.nodes[0], spendtx)\n+        spendtx.rehash()\n+        invalidatePostSignature(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1)\n+        block.nVersion = 5\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        # Restart all\n+        stop_nodes(self.nodes)\n+        wait_bitcoinds()\n+        shutil.rmtree(self.options.tmpdir)\n+        self.setup_chain()\n+        self.setup_network()\n+        self.test.clear_all_connections()\n+        self.test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+\n+\n+\n+    def get_tests(self):\n+        for test in itertools.chain(\n+                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n+                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n+                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n+        ):\n+            yield test\n+\n+    def donothing(self, tx):\n+        return\n+\n+    def csv_invalidate(self, tx):\n+        '''Modify the signature in vin 0 of the tx to fail CSV\n+        Prepends -1 CSV DROP in the scriptSig itself.\n+        '''\n+        tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] +\n+                                      list(CScript(tx.vin[0].scriptSig)))\n+\n+    def sequence_lock_invalidate(self, tx):\n+        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n+        '''\n+        tx.vin[0].nSequence = 0x00FFFFFF\n+        tx.nLockTime = 0\n+\n+    def mtp_invalidate(self, tx):\n+        '''Modify the nLockTime to make it fails once MTP rule is activated\n+        '''\n+        # Disable Sequence lock, Activate nLockTime\n+        tx.vin[0].nSequence = 0x90FFFFFF\n+        tx.nLockTime = self.last_block_time\n+\n+if __name__ == '__main__':\n+    BIP9SoftForksTest().main()\n\\ No newline at end of file"
      },
      {
        "sha": "5443217059bda60f97e6456e5784ff57ba289e88",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26e9a05cc3192ce19b7c46043aeb12230d3207a5/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26e9a05cc3192ce19b7c46043aeb12230d3207a5/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=26e9a05cc3192ce19b7c46043aeb12230d3207a5",
        "patch": "@@ -193,6 +193,10 @@ def add_all_connections(self, nodes):\n             # associated NodeConn\n             test_node.add_connection(self.connections[-1])\n \n+    def clear_all_connections(self):\n+        self.connections    = []\n+        self.test_nodes     = []\n+\n     def wait_for_disconnections(self):\n         def disconnected():\n             return all(node.closed for node in self.test_nodes)"
      }
    ]
  },
  {
    "sha": "caf138122decac7d96b2f53c0c894277cb0f33ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWYxMzgxMjJkZWNhYzdkOTZiMmY1M2MwYzg5NDI3N2NiMGYzM2Nh",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-02-13T15:42:24Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-29T09:34:07Z"
      },
      "message": "Add bip68-sequence.py to extended rpc tests",
      "tree": {
        "sha": "77365a288be603166ff91b88bcf5a44497a1488c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77365a288be603166ff91b88bcf5a44497a1488c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caf138122decac7d96b2f53c0c894277cb0f33ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf138122decac7d96b2f53c0c894277cb0f33ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caf138122decac7d96b2f53c0c894277cb0f33ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf138122decac7d96b2f53c0c894277cb0f33ca/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26e9a05cc3192ce19b7c46043aeb12230d3207a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26e9a05cc3192ce19b7c46043aeb12230d3207a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26e9a05cc3192ce19b7c46043aeb12230d3207a5"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "37014cf76acdd4e0f67ddc83cbb49403d559264f",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf138122decac7d96b2f53c0c894277cb0f33ca/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf138122decac7d96b2f53c0c894277cb0f33ca/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=caf138122decac7d96b2f53c0c894277cb0f33ca",
        "patch": "@@ -113,6 +113,7 @@\n     'bip9-softforks.py',\n     'bip65-cltv.py',\n     'bip65-cltv-p2p.py',\n+    'bip68-sequence.py',\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n     'getblocktemplate_longpoll.py',"
      }
    ]
  },
  {
    "sha": "c270b62cc20788bdc59cd648c971523bab7ec8fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjcwYjYyY2MyMDc4OGJkYzU5Y2Q2NDhjOTcxNTIzYmFiN2VjOGZj",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-30T18:38:02Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-03-31T09:28:57Z"
      },
      "message": "Fix comments in tests",
      "tree": {
        "sha": "c4e1835a76c546c713c103823ad0ee2388948727",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4e1835a76c546c713c103823ad0ee2388948727"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c270b62cc20788bdc59cd648c971523bab7ec8fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c270b62cc20788bdc59cd648c971523bab7ec8fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c270b62cc20788bdc59cd648c971523bab7ec8fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c270b62cc20788bdc59cd648c971523bab7ec8fc/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caf138122decac7d96b2f53c0c894277cb0f33ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf138122decac7d96b2f53c0c894277cb0f33ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caf138122decac7d96b2f53c0c894277cb0f33ca"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7d3c59be3ee8fa90deab91b95cbb33cf387bf46e",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c270b62cc20788bdc59cd648c971523bab7ec8fc/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c270b62cc20788bdc59cd648c971523bab7ec8fc/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=c270b62cc20788bdc59cd648c971523bab7ec8fc",
        "patch": "@@ -383,9 +383,9 @@ def get_tests(self):\n         for bip113tx in [bip113signed1, bip113signed2]:\n             yield TestInstance([[self.create_test_block([bip113tx]), False]]) # 9,10\n         # BIP 113 tests should now pass if the locktime is < MTP\n-        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113tx_v1.nLockTime = self.last_block_time - 600 * 5 - 1 # < MTP of prior block\n         bip113signed1 = self.sign_transaction(self.nodes[0], bip113tx_v1)\n-        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # = MTP of prior block (not <) but < time put on current block\n+        bip113tx_v2.nLockTime = self.last_block_time - 600 * 5 - 1 # < MTP of prior block\n         bip113signed2 = self.sign_transaction(self.nodes[0], bip113tx_v2)\n         for bip113tx in [bip113signed1, bip113signed2]:\n             yield TestInstance([[self.create_test_block([bip113tx]), True]]) # 11,12\n@@ -490,7 +490,7 @@ def get_tests(self):\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n \n         ## SEQUENCE_LOCKTIME_DISABLE_FLAG is unset in argument to OP_CSV for all remaining txs ##\n-        # All txs with nSequence 11 should fail either due to earlier mismatch or failing the CSV check\n+        # All txs with nSequence 9 should fail either due to earlier mismatch or failing the CSV check\n         fail_txs = []\n         fail_txs.extend(all_rlt_txs(bip112txs_vary_nSequence_9_v2)) # 16/16 of vary_nSequence_9\n         for b25 in xrange(2):"
      }
    ]
  },
  {
    "sha": "640666b22fdbc6f436fbf701629b04a2367f7317",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDA2NjZiMjJmZGJjNmY0MzZmYmY3MDE2MjliMDRhMjM2N2Y3MzE3",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-04-03T17:03:53Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-04-03T17:06:06Z"
      },
      "message": "[qa] rpc-tests: Properly use integers, floats\n\npartial backport from #7778 using fa2cea1",
      "tree": {
        "sha": "d6d6a4aa01f417685a69d1a8531bd7ef61c6816a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6d6a4aa01f417685a69d1a8531bd7ef61c6816a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/640666b22fdbc6f436fbf701629b04a2367f7317",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/640666b22fdbc6f436fbf701629b04a2367f7317",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/640666b22fdbc6f436fbf701629b04a2367f7317",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/640666b22fdbc6f436fbf701629b04a2367f7317/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c270b62cc20788bdc59cd648c971523bab7ec8fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c270b62cc20788bdc59cd648c971523bab7ec8fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c270b62cc20788bdc59cd648c971523bab7ec8fc"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "40c9eff88524539fdb5665fd0b5359fc236c3ba3",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/640666b22fdbc6f436fbf701629b04a2367f7317/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/640666b22fdbc6f436fbf701629b04a2367f7317/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=640666b22fdbc6f436fbf701629b04a2367f7317",
        "patch": "@@ -62,7 +62,7 @@ def test_disable_flag(self):\n         utxo = utxos[0]\n \n         tx1 = CTransaction()\n-        value = satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN\n+        value = int(satoshi_round(utxo[\"amount\"] - self.relayfee)*COIN)\n \n         # Check that the disable flag disables relative locktime.\n         # If sequence locks were used, this would require 1 block for the\n@@ -180,8 +180,8 @@ def test_sequence_lock_confirmed_inputs(self):\n                 tx.vin.append(CTxIn(COutPoint(int(utxos[j][\"txid\"], 16), utxos[j][\"vout\"]), nSequence=sequence_value))\n                 value += utxos[j][\"amount\"]*COIN\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n-            tx_size = len(ToHex(tx))/2 + 120*num_inputs + 50\n-            tx.vout.append(CTxOut(value-self.relayfee*tx_size*COIN/1000, CScript([b'a'])))\n+            tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n+            tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), CScript([b'a'])))\n             rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n \n             try:"
      },
      {
        "sha": "97c6f3f3a76f823a1f36f3a5a3cd553ca1454098",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/640666b22fdbc6f436fbf701629b04a2367f7317/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/640666b22fdbc6f436fbf701629b04a2367f7317/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=640666b22fdbc6f436fbf701629b04a2367f7317",
        "patch": "@@ -91,7 +91,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n-        self.last_block_time = time.time()\n+        self.last_block_time = int(time.time())\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n "
      }
    ]
  }
]