[
  {
    "sha": "903f3d06275312aa4000b765d2287339210c61c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDNmM2QwNjI3NTMxMmFhNDAwMGI3NjVkMjI4NzMzOTIxMGM2MWMx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-10-26T16:27:33Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-10-26T16:37:35Z"
      },
      "message": "fuzz: Check for addrv1 compatibility before using addrv1 serializer",
      "tree": {
        "sha": "68fcdcc72095adbc1484ff3916300e9373dd28fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68fcdcc72095adbc1484ff3916300e9373dd28fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/903f3d06275312aa4000b765d2287339210c61c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/903f3d06275312aa4000b765d2287339210c61c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/903f3d06275312aa4000b765d2287339210c61c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/903f3d06275312aa4000b765d2287339210c61c1/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d67883d01e507dd22d1281f4a4860e79d6a46a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d67883d01e507dd22d1281f4a4860e79d6a46a47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d67883d01e507dd22d1281f4a4860e79d6a46a47"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "26c56fbadf048b73e243c7391e7a521297ae71d5",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/903f3d06275312aa4000b765d2287339210c61c1/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/903f3d06275312aa4000b765d2287339210c61c1/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=903f3d06275312aa4000b765d2287339210c61c1",
        "patch": "@@ -13,6 +13,7 @@\n #include <key.h>\n #include <merkleblock.h>\n #include <net.h>\n+#include <netbase.h>\n #include <node/utxo_snapshot.h>\n #include <primitives/block.h>\n #include <protocol.h>\n@@ -44,9 +45,9 @@ struct invalid_fuzzing_input_exception : public std::exception {\n };\n \n template <typename T>\n-CDataStream Serialize(const T& obj)\n+CDataStream Serialize(const T& obj, const int version = INIT_PROTO_VERSION)\n {\n-    CDataStream ds(SER_NETWORK, INIT_PROTO_VERSION);\n+    CDataStream ds(SER_NETWORK, version);\n     ds << obj;\n     return ds;\n }\n@@ -79,9 +80,9 @@ void DeserializeFromFuzzingInput(const std::vector<uint8_t>& buffer, T& obj)\n }\n \n template <typename T>\n-void AssertEqualAfterSerializeDeserialize(const T& obj)\n+void AssertEqualAfterSerializeDeserialize(const T& obj, const int version = INIT_PROTO_VERSION)\n {\n-    assert(Deserialize<T>(Serialize(obj)) == obj);\n+    assert(Deserialize<T>(Serialize(obj, version)) == obj);\n }\n \n } // namespace\n@@ -183,7 +184,10 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n #elif NETADDR_DESERIALIZE\n         CNetAddr na;\n         DeserializeFromFuzzingInput(buffer, na);\n-        AssertEqualAfterSerializeDeserialize(na);\n+        if (na.IsAddrV1Compatible()) {\n+            AssertEqualAfterSerializeDeserialize(na);\n+        }\n+        AssertEqualAfterSerializeDeserialize(na, INIT_PROTO_VERSION | ADDRV2_FORMAT);\n #elif SERVICE_DESERIALIZE\n         CService s;\n         DeserializeFromFuzzingInput(buffer, s);"
      }
    ]
  }
]