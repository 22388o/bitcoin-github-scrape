MarcoFalke,2020-10-26 16:43:28,review ACK 903f3d06275312aa4000b765d2287339210c61c1,https://github.com/bitcoin/bitcoin/pull/20247#issuecomment-716675872,716675872,
practicalswift,2020-11-01 07:23:59,"@vasild The results you're describing below were from fuzzing a version of `master` prior to the merge of this PR, right? :)\n\n> <vasild> hmm, it just occured to me (after staring at some fuzzing failure) that some CNetAddr objects do not ser+deser into the original. For example a torv3 address when serialized (as done by the fuzzer, ADDRV2_FORMAT is not set) end up with 16 zeroes.",https://github.com/bitcoin/bitcoin/pull/20247#issuecomment-720046996,720046996,
vasild,2020-11-01 13:54:53,"Yes, prior to this PR. Thanks for fixing this!\n\nACK 903f3d0",https://github.com/bitcoin/bitcoin/pull/20247#issuecomment-720092400,720092400,
sipa,2020-10-26 19:46:42,"The test would be more powerful if it permitted constructing the input using ADDRV2_FORMAT (or have the option for both), as no torv3/i2p/cjdns addresses will be construction currently.",https://github.com/bitcoin/bitcoin/pull/20247#discussion_r512224963,512224963,src/test/fuzz/deserialize.cpp
practicalswift,2020-10-26 20:49:48,"Note that the current version permits constructing the input using `ADDRV2_FORMAT` since the version is read from the input provided by the fuzzer:\n\nhttps://github.com/bitcoin/bitcoin/blob/903f3d06275312aa4000b765d2287339210c61c1/src/test/fuzz/deserialize.cpp#L64-L70\n\nIn other words torv3/i2p/cjdns addresses can be construction currently :)",https://github.com/bitcoin/bitcoin/pull/20247#discussion_r512259159,512259159,src/test/fuzz/deserialize.cpp
sipa,2020-10-26 21:00:53,"Ooh, very good. Ignore me.",https://github.com/bitcoin/bitcoin/pull/20247#discussion_r512265210,512265210,src/test/fuzz/deserialize.cpp
