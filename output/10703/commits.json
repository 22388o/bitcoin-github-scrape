[
  {
    "sha": "d64ac3f4aab13a1a4e8d320b52e7a2b934e011b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjRhYzNmNGFhYjEzYTFhNGU4ZDMyMGI1MmU3YTJiOTM0ZTAxMWIy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-20T18:56:37Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-29T13:32:30Z"
      },
      "message": "[tests] Allow tests to pass when stderr is non-empty\n\nTests which pass with non-empty stderr are reported as \"passed with\nwarnings\"",
      "tree": {
        "sha": "7a6b8584fe0c39cf4e63e05a5860afbab85767b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a6b8584fe0c39cf4e63e05a5860afbab85767b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d64ac3f4aab13a1a4e8d320b52e7a2b934e011b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d64ac3f4aab13a1a4e8d320b52e7a2b934e011b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d64ac3f4aab13a1a4e8d320b52e7a2b934e011b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d64ac3f4aab13a1a4e8d320b52e7a2b934e011b2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a002ea647dcea57a2ed4294eab77897168ba1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a002ea647dcea57a2ed4294eab77897168ba1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a002ea647dcea57a2ed4294eab77897168ba1d"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 34,
      "deletions": 17
    },
    "files": [
      {
        "sha": "82907e736a88e35b9910494dd0e226a7b654a81e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 34,
        "deletions": 17,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d64ac3f4aab13a1a4e8d320b52e7a2b934e011b2/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d64ac3f4aab13a1a4e8d320b52e7a2b934e011b2/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d64ac3f4aab13a1a4e8d320b52e7a2b934e011b2",
        "patch": "@@ -27,8 +27,7 @@\n import re\n import logging\n \n-# Formatting. Default colors to empty strings.\n-BOLD, BLUE, RED, GREY = (\"\", \"\"), (\"\", \"\"), (\"\", \"\"), (\"\", \"\")\n+# Formatting.\n try:\n     # Make sure python thinks it can write unicode to its stdout\n     \"\\u2713\".encode(\"utf_8\").decode(sys.stdout.encoding)\n@@ -40,17 +39,28 @@\n     CROSS = \"x \"\n     CIRCLE = \"o \"\n \n+# Default colors to empty strings.\n+BOLD, BLUE, RED, GREY, MAGENTA = [(\"\", \"\")] * 5\n if os.name == 'posix':\n     # primitive formatting on supported\n     # terminal via ANSI escape sequences:\n     BOLD = ('\\033[0m', '\\033[1m')\n-    BLUE = ('\\033[0m', '\\033[0;34m')\n-    RED = ('\\033[0m', '\\033[0;31m')\n     GREY = ('\\033[0m', '\\033[1;30m')\n+    RED = ('\\033[0m', '\\033[0;31m')\n+    BLUE = ('\\033[0m', '\\033[0;34m')\n+    MAGENTA = ('\\033[0m', '\\033[0;35m')\n \n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n \n+STATUS_PASSED = \"Passed\"\n+STATUS_PASSED_WITH_WARNINGS = \"Passed with warnings\"\n+STATUS_SKIPPED = \"Skipped\"\n+STATUS_FAILED = \"Failed\"\n+STATUSES = [STATUS_PASSED, STATUS_PASSED_WITH_WARNINGS, STATUS_SKIPPED, STATUS_FAILED]\n+\n+STATUS_MAX_LEN = max([len(st) for st in STATUSES])\n+\n BASE_SCRIPTS= [\n     # Scripts that are run by the travis build process.\n     # Longest test should go first, to favor running tests in parallel\n@@ -306,9 +316,11 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n         test_result, stdout, stderr = job_queue.get_next()\n         test_results.append(test_result)\n \n-        if test_result.status == \"Passed\":\n+        if test_result.status == STATUS_PASSED:\n             logging.debug(\"\\n%s%s%s passed, Duration: %s s\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n-        elif test_result.status == \"Skipped\":\n+        elif test_result.status == STATUS_PASSED_WITH_WARNINGS:\n+            logging.debug(\"\\n%s%s%s passed with warnings, Duration: %s s\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n+        elif test_result.status == STATUS_SKIPPED:\n             logging.debug(\"\\n%s%s%s skipped\" % (BOLD[1], test_result.name, BOLD[0]))\n         else:\n             print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n@@ -332,7 +344,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     sys.exit(not all_passed)\n \n def print_results(test_results, max_len_name, runtime):\n-    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS   \", \"DURATION\") + BOLD[0]\n+    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"  STATUS\".ljust(STATUS_MAX_LEN + 2), \"DURATION\") + BOLD[0]\n \n     test_results.sort(key=lambda result: result.name.lower())\n     all_passed = True\n@@ -345,7 +357,7 @@ def print_results(test_results, max_len_name, runtime):\n         results += str(test_result)\n \n     status = TICK + \"Passed\" if all_passed else CROSS + \"Failed\"\n-    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated) \\n\" % (\"ALL\".ljust(max_len_name), status.ljust(9), time_sum) + BOLD[0]\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated) \\n\" % (\"ALL\".ljust(max_len_name), status.ljust(STATUS_MAX_LEN + 2), time_sum) + BOLD[0]\n     results += \"Runtime: %s s\\n\" % (runtime)\n     print(results)\n \n@@ -403,11 +415,13 @@ def get_next(self):\n                     [stdout, stderr] = [l.read().decode('utf-8') for l in (log_out, log_err)]\n                     log_out.close(), log_err.close()\n                     if proc.returncode == TEST_EXIT_PASSED and stderr == \"\":\n-                        status = \"Passed\"\n+                        status = STATUS_PASSED\n+                    elif proc.returncode == TEST_EXIT_PASSED:\n+                        status = STATUS_PASSED_WITH_WARNINGS\n                     elif proc.returncode == TEST_EXIT_SKIPPED:\n-                        status = \"Skipped\"\n+                        status = STATUS_SKIPPED\n                     else:\n-                        status = \"Failed\"\n+                        status = STATUS_FAILED\n                     self.num_running -= 1\n                     self.jobs.remove(j)\n \n@@ -422,17 +436,20 @@ def __init__(self, name, status, time):\n         self.padding = 0\n \n     def __repr__(self):\n-        if self.status == \"Passed\":\n+        if self.status == STATUS_PASSED:\n             color = BLUE\n             glyph = TICK\n-        elif self.status == \"Failed\":\n-            color = RED\n-            glyph = CROSS\n-        elif self.status == \"Skipped\":\n+        if self.status == STATUS_PASSED_WITH_WARNINGS:\n+            color = MAGENTA\n+            glyph = TICK\n+        elif self.status == STATUS_SKIPPED:\n             color = GREY\n             glyph = CIRCLE\n+        elif self.status == STATUS_FAILED:\n+            color = RED\n+            glyph = CROSS\n \n-        return color[1] + \"%s | %s%s | %s s\\n\" % (self.name.ljust(self.padding), glyph, self.status.ljust(7), self.time) + color[0]\n+        return color[1] + \"%s | %s%s | %s s\\n\" % (self.name.ljust(self.padding), glyph, self.status.ljust(STATUS_MAX_LEN), self.time) + color[0]\n \n     @property\n     def was_successful(self):"
      }
    ]
  }
]