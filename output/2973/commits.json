[
  {
    "sha": "42018eff07d235930ca91fa9e76e7ac128183438",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjAxOGVmZjA3ZDIzNTkzMGNhOTFmYTllNzZlN2FjMTI4MTgzNDM4",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-09-04T09:52:45Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-09-06T08:32:07Z"
      },
      "message": "Bitcoin-Qt: Use qDebug() for printing to debug.log\n\n- removes all usages of PrintDebugStringF from Qt code\n- ensure same format for all debug.log messages \"functionname : Message\"",
      "tree": {
        "sha": "e90e584fb8643d63ee9c6083599b29b0ed48bded",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e90e584fb8643d63ee9c6083599b29b0ed48bded"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42018eff07d235930ca91fa9e76e7ac128183438",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42018eff07d235930ca91fa9e76e7ac128183438",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42018eff07d235930ca91fa9e76e7ac128183438",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42018eff07d235930ca91fa9e76e7ac128183438/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d22d9753cc7175a7cf0ce440b96d83277747ecb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d22d9753cc7175a7cf0ce440b96d83277747ecb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d22d9753cc7175a7cf0ce440b96d83277747ecb9"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 67,
      "deletions": 52
    },
    "files": [
      {
        "sha": "921c4443a9b6fbc18959b26a46b72cdd1462e060",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=42018eff07d235930ca91fa9e76e7ac128183438",
        "patch": "@@ -7,6 +7,7 @@\n #include \"base58.h\"\n \n #include <QFont>\n+#include <QDebug>\n \n const QString AddressTableModel::Send = \"S\";\n const QString AddressTableModel::Receive = \"R\";\n@@ -109,7 +110,7 @@ class AddressTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                OutputDebugStringF(\"Warning: AddressTablePriv::updateEntry: Got CT_NOW, but entry is already in model\\n\");\n+                qDebug() << \"AddressTablePriv::updateEntry : Warning: Got CT_NOW, but entry is already in model\";\n                 break;\n             }\n             parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex);\n@@ -119,7 +120,7 @@ class AddressTablePriv\n         case CT_UPDATED:\n             if(!inModel)\n             {\n-                OutputDebugStringF(\"Warning: AddressTablePriv::updateEntry: Got CT_UPDATED, but entry is not in model\\n\");\n+                qDebug() << \"AddressTablePriv::updateEntry : Warning: Got CT_UPDATED, but entry is not in model\";\n                 break;\n             }\n             lower->type = newEntryType;\n@@ -129,7 +130,7 @@ class AddressTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                OutputDebugStringF(\"Warning: AddressTablePriv::updateEntry: Got CT_DELETED, but entry is not in model\\n\");\n+                qDebug() << \"AddressTablePriv::updateEntry : Warning: Got CT_DELETED, but entry is not in model\";\n                 break;\n             }\n             parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);"
      },
      {
        "sha": "f7dd8adb6b71fe4a28cbf7172e54f4c05879be3c",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=42018eff07d235930ca91fa9e76e7ac128183438",
        "patch": "@@ -13,6 +13,7 @@\n \n #include <QDateTime>\n #include <QTimer>\n+#include <QDebug>\n \n static const int64 nClientStartupTime = GetTime();\n \n@@ -180,14 +181,14 @@ static void NotifyBlocksChanged(ClientModel *clientmodel)\n \n static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)\n {\n-    // Too noisy: OutputDebugStringF(\"NotifyNumConnectionsChanged %i\\n\", newNumConnections);\n+    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged : \" + QString::number(newNumConnections);\n     QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n                               Q_ARG(int, newNumConnections));\n }\n \n static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n {\n-    OutputDebugStringF(\"NotifyAlertChanged %s status=%i\\n\", hash.GetHex().c_str(), status);\n+    qDebug() << \"NotifyAlertChanged : \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n                               Q_ARG(int, status));"
      },
      {
        "sha": "15074300b46c7bf3f3da6aac94fdda44632ba27f",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=42018eff07d235930ca91fa9e76e7ac128183438",
        "patch": "@@ -60,8 +60,8 @@ class ClientModel : public QObject\n \n     int cachedNumBlocks;\n     int cachedNumBlocksOfPeers;\n-\tbool cachedReindexing;\n-\tbool cachedImporting;\n+    bool cachedReindexing;\n+    bool cachedImporting;\n \n     int numBlocksAtStartup;\n "
      },
      {
        "sha": "50fb1bd777568477cbec81fb2105e7ff45fa3c70",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=42018eff07d235930ca91fa9e76e7ac128183438",
        "patch": "@@ -24,18 +24,18 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n {\n     bool parseOK = paymentRequest.ParseFromArray(data.data(), data.size());\n     if (!parseOK) {\n-        qDebug() << \"Error parsing payment request\";\n+        qDebug() << \"PaymentRequestPlus::parse : Error parsing payment request\";\n         return false;\n     }\n     if (paymentRequest.payment_details_version() > 1) {\n-        qDebug() << \"Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n+        qDebug() << \"PaymentRequestPlus::parse : Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n         return false;\n     }\n \n     parseOK = details.ParseFromString(paymentRequest.serialized_payment_details());\n     if (!parseOK)\n     {\n-        qDebug() << \"Error parsing payment details\";\n+        qDebug() << \"PaymentRequestPlus::parse : Error parsing payment details\";\n         paymentRequest.Clear();\n         return false;\n     }\n@@ -75,17 +75,18 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         digestAlgorithm = EVP_sha1();\n     }\n     else if (paymentRequest.pki_type() == \"none\") {\n-        if (fDebug) qDebug() << \"PaymentRequest: pki_type == none\";\n+        if (fDebug)\n+            qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: pki_type == none\";\n         return false;\n     }\n     else {\n-        qDebug() << \"PaymentRequest: unknown pki_type \" << paymentRequest.pki_type().c_str();\n+        qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: unknown pki_type \" << paymentRequest.pki_type().c_str();\n         return false;\n     }\n \n     payments::X509Certificates certChain;\n     if (!certChain.ParseFromString(paymentRequest.pki_data())) {\n-        qDebug() << \"PaymentRequest: error parsing pki_data\";\n+        qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: error parsing pki_data\";\n         return false;\n     }\n \n@@ -95,12 +96,12 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         QByteArray certData(certChain.certificate(i).data(), certChain.certificate(i).size());\n         QSslCertificate qCert(certData, QSsl::Der);\n         if (currentTime < qCert.effectiveDate() || currentTime > qCert.expiryDate()) {\n-            qDebug() << \"PaymentRequest: certificate expired or not yet active: \" << qCert;\n+            qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: certificate expired or not yet active: \" << qCert;\n             return false;\n         }\n #if QT_VERSION >= 0x050000\n         if (qCert.isBlacklisted()) {\n-            qDebug() << \"PaymentRequest: certificate blacklisted: \" << qCert;\n+            qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: certificate blacklisted: \" << qCert;\n             return false;\n         }\n #endif\n@@ -110,7 +111,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             certs.push_back(cert);\n     }\n     if (certs.empty()) {\n-        qDebug() << \"PaymentRequest: empty certificate chain\";\n+        qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: empty certificate chain\";\n         return false;\n     }\n \n@@ -126,7 +127,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     // load the signing cert into it and verify.\n     X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();\n     if (!store_ctx) {\n-        qDebug() << \"PaymentRequest: error creating X509_STORE_CTX\";\n+        qDebug() << \"PaymentRequestPlus::getMerchant : Payment request: error creating X509_STORE_CTX\";\n         return false;\n     }\n \n@@ -171,14 +172,14 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             merchant = website;\n         }\n         else {\n-            throw SSLVerifyError(\"Bad certificate, missing common name\");\n+            throw SSLVerifyError(\"Bad certificate, missing common name.\");\n         }\n         // TODO: detect EV certificates and set merchant = business name instead of unfriendly NID_commonName ?\n     }\n     catch (SSLVerifyError& err)\n     {\n         fResult = false;\n-        qDebug() << \"PaymentRequestPlus::getMerchant SSL err: \" << err.what();\n+        qDebug() << \"PaymentRequestPlus::getMerchant : SSL error: \" << err.what();\n     }\n \n     if (website)"
      },
      {
        "sha": "6c10d8a04d4f2484f29cc2afd0b46ddc0700721e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 17,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=42018eff07d235930ca91fa9e76e7ac128183438",
        "patch": "@@ -89,7 +89,7 @@ static QList<QString> savedPaymentRequests;\n static void ReportInvalidCertificate(const QSslCertificate& cert)\n {\n     if (fDebug) {\n-        qDebug() << \"Invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n+        qDebug() << \"ReportInvalidCertificate : Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n     }\n }\n \n@@ -162,7 +162,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n         }\n     }\n     if (fDebug)\n-        qDebug() << \"PaymentServer: loaded \" << nRootCerts << \" root certificates\";\n+        qDebug() << \"PaymentServer::LoadRootCAs : Loaded \" << nRootCerts << \" root certificates\";\n \n     // Project for another day:\n     // Fetch certificate revocation lists, and add them to certStore.\n@@ -221,7 +221,7 @@ bool PaymentServer::ipcSendCommandLine(int argc, char* argv[])\n         }\n         else\n         {\n-            qDebug() << \"Payment request file does not exist: \" << argv[i];\n+            qDebug() << \"PaymentServer::ipcSendCommandLine : Payment request file does not exist: \" << argv[i];\n             // Printing to debug.log is about the best we can do here, the\n             // GUI hasn't started yet so we can't pop up a message box.\n         }\n@@ -271,7 +271,7 @@ PaymentServer::PaymentServer(QObject* parent,\n         uriServer = new QLocalServer(this);\n \n         if (!uriServer->listen(name))\n-            qDebug() << \"Cannot start bitcoin: click-to-pay handler\";\n+            qDebug() << \"PaymentServer::PaymentServer : Cannot start bitcoin: click-to-pay handler\";\n         else\n             connect(uriServer, SIGNAL(newConnection()), this, SLOT(handleURIConnection()));\n     }\n@@ -366,12 +366,13 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             QString decoded = QUrl::fromPercentEncoding(temp);\n             QUrl fetchUrl(decoded, QUrl::StrictMode);\n \n-            if (fDebug) qDebug() << \"PaymentServer::fetchRequest \" << fetchUrl;\n+            if (fDebug)\n+                qDebug() << \"PaymentServer::handleURIOrFile : fetchRequest(\" << fetchUrl << \")\";\n \n             if (fetchUrl.isValid())\n                 fetchRequest(fetchUrl);\n             else\n-                qDebug() << \"PaymentServer: invalid url: \" << fetchUrl;\n+                qDebug() << \"PaymentServer::handleURIOrFile : Invalid url: \" << fetchUrl;\n             return;\n         }\n \n@@ -420,13 +421,13 @@ bool PaymentServer::readPaymentRequest(const QString& filename, PaymentRequestPl\n     QFile f(filename);\n     if (!f.open(QIODevice::ReadOnly))\n     {\n-        qDebug() << \"PaymentServer::readPaymentRequest fail to open \" << filename;\n+        qDebug() << \"PaymentServer::readPaymentRequest : Failed to open \" << filename;\n         return false;\n     }\n \n     if (f.size() > MAX_PAYMENT_REQUEST_SIZE)\n     {\n-        qDebug() << \"PaymentServer::readPaymentRequest \" << filename << \" too large\";\n+        qDebug() << \"PaymentServer::readPaymentRequest : \" << filename << \" too large\";\n         return false;\n     }\n \n@@ -449,7 +450,8 @@ PaymentServer::processPaymentRequest(PaymentRequestPlus& request,\n         if (txOut.IsDust(CTransaction::nMinRelayTxFee)) {\n             QString message = QObject::tr(\"Requested payment amount (%1) too small\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second));\n-            qDebug() << message;\n+\n+            qDebug() << \"PaymentServer::processPaymentRequest : \" << message;\n             emit reportError(tr(\"Payment request error\"), message, CClientUIInterface::MODAL);\n             return false;\n         }\n@@ -462,7 +464,8 @@ PaymentServer::processPaymentRequest(PaymentRequestPlus& request,\n     if (request.getMerchant(PaymentServer::certStore, recipients[0].authenticatedMerchant)) {\n         recipients[0].paymentRequest = request;\n         recipients[0].amount = totalAmount;\n-        if (fDebug) qDebug() << \"PaymentRequest from \" << recipients[0].authenticatedMerchant;\n+        if (fDebug)\n+            qDebug() << \"PaymentServer::processPaymentRequest : Payment request from \" << recipients[0].authenticatedMerchant;\n     }\n     else {\n         recipients.clear();\n@@ -483,7 +486,8 @@ PaymentServer::processPaymentRequest(PaymentRequestPlus& request,\n                 if (i == 0) // Tie request to first pay-to, we don't want multiple ACKs\n                     recipients[i].paymentRequest = request;\n                 recipients[i].address = QString::fromStdString(CBitcoinAddress(dest).ToString());\n-                if (fDebug) qDebug() << \"PaymentRequest, insecure \" << recipients[i].address;\n+                if (fDebug)\n+                    qDebug() << \"PaymentServer::processPaymentRequest : Payment request, insecure \" << recipients[i].address;\n             }\n             else {\n                 // Insecure payments to custom bitcoin addresses are not supported\n@@ -551,7 +555,7 @@ PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipient, QB\n         else {\n             // This should never happen, because sending coins should have just unlocked the wallet\n             // and refilled the keypool\n-            qDebug() << \"Error getting refund key, refund_to not set\";\n+            qDebug() << \"PaymentServer::fetchPaymentACK : Error getting refund key, refund_to not set\";\n         }\n     }\n \n@@ -563,7 +567,7 @@ PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipient, QB\n     }\n     else {\n         // This should never happen, either:\n-        qDebug() << \"Error serializing payment message\";\n+        qDebug() << \"PaymentServer::fetchPaymentACK : Error serializing payment message\";\n     }\n }\n \n@@ -576,7 +580,7 @@ PaymentServer::netRequestFinished(QNetworkReply* reply)\n         QString message = QObject::tr(\"Error communicating with %1: %2\")\n             .arg(reply->request().url().toString())\n             .arg(reply->errorString());\n-        qDebug() << message;\n+        qDebug() << \"PaymentServer::netRequestFinished : \" << message;\n         emit reportError(tr(\"Network request error\"), message, CClientUIInterface::MODAL);\n         return;\n     }\n@@ -594,7 +598,7 @@ PaymentServer::netRequestFinished(QNetworkReply* reply)\n             }\n         }\n         else\n-            qDebug() << \"PaymentServer::netRequestFinished: error processing PaymentRequest\";\n+            qDebug() << \"PaymentServer::netRequestFinished : Error processing payment request\";\n         return;\n     }\n     else if (requestType == \"PaymentACK\")\n@@ -604,7 +608,7 @@ PaymentServer::netRequestFinished(QNetworkReply* reply)\n         {\n             QString message = QObject::tr(\"Bad response from server %1\")\n                 .arg(reply->request().url().toString());\n-            qDebug() << message;\n+            qDebug() << \"PaymentServer::netRequestFinished : \" << message;\n             emit reportError(tr(\"Network request error\"), message, CClientUIInterface::MODAL);\n         }\n         else {\n@@ -618,7 +622,7 @@ PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError> &err\n {\n     QString errString;\n     foreach (const QSslError& err, errs) {\n-        qDebug() << err;\n+        qDebug() << \"PaymentServer::reportSslErrors : \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n     emit reportError(tr(\"Network request error\"), errString, CClientUIInterface::MODAL);"
      },
      {
        "sha": "d27288b6f1258f0608a34a00c9e9f2e3f29c1af6",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=42018eff07d235930ca91fa9e76e7ac128183438",
        "patch": "@@ -17,6 +17,7 @@\n #include <QTimer>\n #include <QIcon>\n #include <QDateTime>\n+#include <QDebug>\n \n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {\n@@ -67,7 +68,7 @@ class TransactionTablePriv\n      */\n     void refreshWallet()\n     {\n-        OutputDebugStringF(\"refreshWallet\\n\");\n+        qDebug() << \"TransactionTablePriv::refreshWallet\";\n         cachedWallet.clear();\n         {\n             LOCK(wallet->cs_wallet);\n@@ -86,7 +87,7 @@ class TransactionTablePriv\n      */\n     void updateWallet(const uint256 &hash, int status)\n     {\n-        OutputDebugStringF(\"updateWallet %s %i\\n\", hash.ToString().c_str(), status);\n+        qDebug() << \"TransactionTablePriv::updateWallet : \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n         {\n             LOCK(wallet->cs_wallet);\n \n@@ -114,20 +115,21 @@ class TransactionTablePriv\n                     status = CT_DELETED; /* In model, but want to hide, treat as deleted */\n             }\n \n-            OutputDebugStringF(\"   inWallet=%i inModel=%i Index=%i-%i showTransaction=%i derivedStatus=%i\\n\",\n-                     inWallet, inModel, lowerIndex, upperIndex, showTransaction, status);\n+            qDebug() << \"   inWallet=\" + QString::number(inWallet) + \" inModel=\" + QString::number(inModel) +\n+                        \" Index=\" + QString::number(lowerIndex) + \"-\" + QString::number(upperIndex) +\n+                        \" showTransaction=\" + QString::number(showTransaction) + \" derivedStatus=\" + QString::number(status);\n \n             switch(status)\n             {\n             case CT_NEW:\n                 if(inModel)\n                 {\n-                    OutputDebugStringF(\"Warning: updateWallet: Got CT_NEW, but transaction is already in model\\n\");\n+                    qDebug() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n                     break;\n                 }\n                 if(!inWallet)\n                 {\n-                    OutputDebugStringF(\"Warning: updateWallet: Got CT_NEW, but transaction is not in wallet\\n\");\n+                    qDebug() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n                     break;\n                 }\n                 if(showTransaction)\n@@ -151,7 +153,7 @@ class TransactionTablePriv\n             case CT_DELETED:\n                 if(!inModel)\n                 {\n-                    OutputDebugStringF(\"Warning: updateWallet: Got CT_DELETED, but transaction is not in model\\n\");\n+                    qDebug() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n                     break;\n                 }\n                 // Removed -- remove entire transaction from table"
      },
      {
        "sha": "1dcecbe60b4510bd7c647005c5a96f20b8e67671",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42018eff07d235930ca91fa9e76e7ac128183438/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=42018eff07d235930ca91fa9e76e7ac128183438",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <QSet>\n #include <QTimer>\n+#include <QDebug>\n \n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n@@ -111,7 +112,7 @@ void WalletModel::updateTransaction(const QString &hash, int status)\n     }\n }\n \n-void WalletModel::updateAddressBook(const QString &address, const QString &label, \n+void WalletModel::updateAddressBook(const QString &address, const QString &label,\n         bool isMine, const QString &purpose, int status)\n {\n     if(addressTableModel)\n@@ -359,29 +360,34 @@ bool WalletModel::backupWallet(const QString &filename)\n // Handlers for core signals\n static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel, CCryptoKeyStore *wallet)\n {\n-    OutputDebugStringF(\"NotifyKeyStoreStatusChanged\\n\");\n+    qDebug() << \"NotifyKeyStoreStatusChanged\";\n     QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n }\n \n static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n         const CTxDestination &address, const std::string &label, bool isMine,\n         const std::string &purpose, ChangeType status)\n {\n-    OutputDebugStringF(\"NotifyAddressBookChanged %s %s isMine=%i purpose=%s status=%i\\n\",\n-            CBitcoinAddress(address).ToString().c_str(), label.c_str(), isMine, purpose.c_str(), status);\n+    QString strAddress = QString::fromStdString(CBitcoinAddress(address).ToString());\n+    QString strLabel = QString::fromStdString(label);\n+    QString strPurpose = QString::fromStdString(purpose);\n+\n+    qDebug() << \"NotifyAddressBookChanged : \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n-                              Q_ARG(QString, QString::fromStdString(CBitcoinAddress(address).ToString())),\n-                              Q_ARG(QString, QString::fromStdString(label)),\n+                              Q_ARG(QString, strAddress),\n+                              Q_ARG(QString, strLabel),\n                               Q_ARG(bool, isMine),\n-                              Q_ARG(QString, QString::fromStdString(purpose)),\n+                              Q_ARG(QString, strPurpose),\n                               Q_ARG(int, status));\n }\n \n static void NotifyTransactionChanged(WalletModel *walletmodel, CWallet *wallet, const uint256 &hash, ChangeType status)\n {\n-    OutputDebugStringF(\"NotifyTransactionChanged %s status=%i\\n\", hash.GetHex().c_str(), status);\n+    QString strHash = QString::fromStdString(hash.GetHex());\n+\n+    qDebug() << \"NotifyTransactionChanged : \" + strHash + \" status= \" + QString::number(status);\n     QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection,\n-                              Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n+                              Q_ARG(QString, strHash),\n                               Q_ARG(int, status));\n }\n "
      }
    ]
  }
]