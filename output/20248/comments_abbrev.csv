dgpv,2020-11-25 13:07:45,"rebased\n\nmerged checks of `sig.size() <= 70` and `sig[3] <= 32` (with added comment)\n\nmoved `BOOST_CHECK`s out of the loop\n\nfixed a comment (""less than or equal to 70"", not ""less than 70"") ",https://github.com/bitcoin/bitcoin/pull/20248#issuecomment-733695997,733695997,
laanwj,2020-12-16 18:23:01,ACK 89895773b72275a620951730aef0b52e9437bc13,https://github.com/bitcoin/bitcoin/pull/20248#issuecomment-746773041,746773041,
laanwj,2020-11-19 11:13:11,"BOOST_CHECK is fairly slow, this is likely why it is not used in the inner loop directly.",https://github.com/bitcoin/bitcoin/pull/20248#discussion_r526780576,526780576,src/test/key_tests.cpp
dgpv,2020-11-19 11:32:56,"Do you think it would be better to do\n\n```\nif( sig[3] > 0x20 ) {\n    found_big = true;\n    break;\n}\n```\n\nand then `BOOST_CHECK(!found_big)` after the loop ?\n\nAlso there is `BOOST_CHECK` for `key.Sign()` inside the loop, do you think it should be taken outside the loop, too ?",https://github.com/bitcoin/bitcoin/pull/20248#discussion_r526796937,526796937,src/test/key_tests.cpp
laanwj,2020-11-23 15:08:29,"Yes, I think it's better to keep it in a similar way as it is now, assign to a boolean then assert that after the loop.\n\n> Also there is BOOST_CHECK for key.Sign() inside the loop, do you think it should be taken outside the loop, too ?\n\nProbably!  I mean, a loop of 256 isn't that bad, I guess, but there's no reason a tl east to make things worse.",https://github.com/bitcoin/bitcoin/pull/20248#discussion_r528771238,528771238,src/test/key_tests.cpp
