promag,2018-06-18T22:51:27Z,"This is an alternative to #13492 that doesn't require bumping the minimum libevent2 version. This was submitted in a different branch to keep the other version available.\n\nTo test apply\n```diff\ndiff --git a/src/rpc/server.cpp b/src/rpc/server.cpp\nindex 10040b125..57dad383c 100644\n--- a/src/rpc/server.cpp\n+++ b/src/rpc/server.cpp\n@@ -236,6 +236,7 @@ UniValue stop(const JSONRPCReques",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-398219913,398219913,
ken2812221,2018-06-18T23:47:21Z,That `event_base_loopexit` is still requied though.,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-398229862,398229862,
promag,2018-06-19T07:35:26Z,"No, it shouldn't be. As soon as there are no more active or pending events, the event loop should exit.",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-398303872,398303872,
promag,2018-06-19T15:16:20Z,Updated.,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-398436748,398436748,
promag,2018-06-21T13:21:12Z,@ken2812221 care to review?,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-399101259,399101259,
ken2812221,2018-06-21T14:46:51Z,"Looks like shutdown would take more time, it takes 30 mins to complete tests on travis, I would rather reopen #13485",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-399129905,399129905,
promag,2018-06-23T20:37:40Z,@ken2812221 I'll try to reproduce.,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-399709249,399709249,
MarcoFalke,2018-08-08T21:52:45Z,"Going to close and reopen, to get a fresh travis run.\n\nPrevious run: https://travis-ci.org/bitcoin/bitcoin/builds/394134101",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-411564473,411564473,
MarcoFalke,2018-08-08T21:53:16Z,"New run: https://travis-ci.org/bitcoin/bitcoin/builds/413803664\n\nHmm.. Still takes longer than on master, I think",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-411564576,411564576,
promag,2018-08-08T21:59:27Z,Thanks @MarcoFalke.,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-411566191,411566191,
DrahtBot,2018-08-09T05:05:22Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-411637804,411637804,
promag,2018-08-12T00:51:13Z,Tried to change client and server timeouts and looks like it terminates earlier. This indicates that either the client or server are not terminating gracefully.,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-412310934,412310934,
promag,2018-08-17T00:36:26Z,@MarcoFalke @ken2812221 please test again. Will update OP later.,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-413723962,413723962,
promag,2018-08-17T01:48:03Z,Updated OP.,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-413733665,413733665,
ken2812221,2018-08-17T02:20:05Z,"It still shows ""EOF reached"" on bitcoin-cli when I add `MilliSleep(1000)` at https://github.com/bitcoin/bitcoin/blob/3c8d1ae15352d5c92d5903536c8fe07f771e97a0/src/rpc/server.cpp#L238-L239",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-413738236,413738236,
promag,2018-08-17T08:44:33Z,"@ken2812221 sorry, forgot to add a hunk to the commit 😕",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-413799521,413799521,
ken2812221,2018-08-21T01:01:02Z,~Tested ACK d1c35ed~,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-414514730,414514730,
ken2812221,2018-10-02T22:06:37Z,"@promag I would prefer this fix than #13485, but this seems to break things on Windows. Would you mind take a look again?",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-426446620,426446620,
promag,2018-10-04T23:11:58Z,@ken2812221 try again 🎁,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-427198221,427198221,
ken2812221,2018-10-05T16:47:06Z,tACK ee05f25eb600d8dc45d21f43dab899aacc7d6784,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-427428837,427428837,
sipa,2018-10-19T05:35:07Z,"Concept ACK f9d60febdc265824d5f183ef6e0756875869ddb0.\n\nI'm not familiar enough with libevent to judge the API calls, but the Bitcoin Core side of things looks good.\n\nA review by @laanwj would be good, I think.",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-431249981,431249981,
meshcollider,2018-11-01T19:37:09Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-435160352,435160352,
promag,2018-11-01T23:16:04Z,@ryanofsky thanks for the review.,https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-435218305,435218305,
promag,2018-11-06T15:19:41Z,"After more digging in libevent source code I've realized that sending the header `Connection: close` is the correct way to trigger the connection close. Verified that this behavior exists since `2.0.22`, see https://github.com/libevent/libevent/blob/c51b159cff9f5e86696f5b9a4c6f517276056258/http.c#L472.\n\nIt is also unnecessary to keep track of connections as `evhttp` already handles that.",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-436289865,436289865,
laanwj,2018-11-06T16:10:10Z,"> sending the header Connection: close is the correct way to trigger the connection close\n\nThat only signals to the client that the connection should be closed (e.g. no connection reuse), it doesn't actually trigger a close from our side.\n(or does it? I'm confused now; at the least it doesn't provide a guarantee that the connection will be closed any time soon, only after the request fully f",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-436309386,436309386,
promag,2018-11-06T16:26:38Z,"From testing it does, see https://github.com/libevent/libevent/blob/c51b159cff9f5e86696f5b9a4c6f517276056258/http.c#L784-L786.\n\nEven with a non-http client, like `nc`, when I send that header the server will then close the \nconnection.",https://github.com/bitcoin/bitcoin/pull/13501#issuecomment-436315625,436315625,
laanwj,2018-08-21T10:37:31Z,"wouldn't there be unprotected concurrent acceess to `g_http_connections` from multiple threads here? (the HTTP event thread as well as the thread in which `StopHTTPServer` is called)\nif so, it needs a mutex",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r211557678,211557678,src/httpserver.cpp
promag,2018-08-21T11:24:44Z,"I thought the callback would be called from the event loop thread, but looks like it's not the case. Pushed a commit that adds a mutex.",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r211568890,211568890,src/httpserver.cpp
ken2812221,2018-10-05T18:26:50Z,nit: `static std::unordered_set<evhttp_connection*> g_http_connections GUARDED_BY(g_http_connections_cs);`,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r223100273,223100273,src/httpserver.cpp
ken2812221,2018-10-05T18:31:47Z,nit: use `Mutex` and `LOCK` for easier debugging.,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r223101635,223101635,src/httpserver.cpp
laanwj,2018-10-24T16:45:48Z,unordered_set? there's no traversing here,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r227871328,227871328,src/httpserver.cpp
promag,2018-10-24T20:50:59Z,IIRC for small collections std::set is preferable. I can change if that sounds better to you.,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r227955228,227955228,src/httpserver.cpp
ryanofsky,2018-11-01T18:16:42Z,"The changes in this ` if (eventBase)` section don't seem directly related to the other changes in this PR. If I understand the eventlib documentation correctly, the behavior of the new code is identical to previous code except there is no longer a 2 second timeout.\n\nSo is the point of this change just cleanup? It seems like it might be safer to keep the 2 second timeout.",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230144852,230144852,src/httpserver.cpp
ryanofsky,2018-11-01T18:21:09Z,Is checking `bev` just defensive here? Would it ever be expected to be null? It'd be good to have a sentence or shorter comment here to suggest what this does.,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230146388,230146388,src/httpserver.cpp
ryanofsky,2018-11-01T18:22:36Z,Confused by the check. Would this ever be false? Short comment here would be helpful.,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230146825,230146825,src/httpserver.cpp
ryanofsky,2018-11-01T18:51:53Z,Maybe use suffix `_mutex` instead of `_cs`. I think people have generally moved on to calling critical sections mutexes.,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230156665,230156665,src/httpserver.cpp
ryanofsky,2018-11-01T19:01:00Z,"Can you add a comment about what the effect of disabling reading on the current connections is?\n\nIf this just disables reading and doesn't close the connections or interrupt pending writes, it seems like shutdown code could potentially get stuck forever (if a client isn't reading and there is a pending write and data is backed up).",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230159746,230159746,src/httpserver.cpp
ryanofsky,2018-11-01T19:09:48Z,"Comment above ""Re-enable reading..."" is out of date, or at least incomplete now, and would be good to update.\n\nI think I need to look more into the workaround here, but it's not clear to me why this no longer enables write events during shutdown (or what the effect of that is). Hopefully it doesn't mean that a pending writes would never complete...\n\n",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230162376,230162376,src/httpserver.cpp
promag,2018-11-01T22:49:50Z,"So the event base quits when there are no active or pending events. Writing the response is an active event which will go away at the end. Reading can be a pending event (for instance, the client sends stop RPC but keeps the connection open — which happens in the functional tests) so that will prevent the base to quit automatically.",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230224871,230224871,src/httpserver.cpp
promag,2018-11-01T22:50:40Z,One connection can carry multiple request/response pairs.,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230225032,230225032,src/httpserver.cpp
promag,2018-11-01T22:50:51Z,Done.,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230225067,230225067,src/httpserver.cpp
promag,2018-11-01T22:54:37Z,"No I don't think it can be null, but I'll check libevent code. This ""protection"" is already on master and I followed it.",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230225944,230225944,src/httpserver.cpp
promag,2018-11-01T23:02:59Z,"This is necessary in order to have a clean event loop quit, which means all active events processed and there's no pending events. In some cases (long response/slow client) the timeout can cause errors on the client side because the client receives an unexpected connection close.\n\nIdeally it would be enough:\n```cpp\n// Wait the event loop to quit\nthreadHTTP.join();\n```\nbut in windows ",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230227604,230227604,src/httpserver.cpp
promag,2018-11-01T23:05:36Z,Writes are always enabled and there is no reason to enable reading if `g_http_connections.count(conn) == 0`.,https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230228055,230228055,src/httpserver.cpp
ryanofsky,2018-11-02T16:41:31Z,"Thanks for explaining, but I keep rereading this and coming away confused, because it is leaving out a lot of specifics. I think the following would be clearer if it is accurate:\n\n```\n// Disable read events so the event loop is able to exit even if there are\n// open connections. (The preceding InterruptHTTPServer call stops accepting new\n// connections and new requests on existing connec",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230437781,230437781,src/httpserver.cpp
ryanofsky,2018-11-02T17:29:33Z,"Won't this be buggy if a client opens a connection but doesn't send a complete request before the server starts to shut down? In that case this code won't get called, so the connection pointer will never be added to `g_http_connections`, so `event_base_dispatch` would never return, and bitcoind would hang forever on shutdown.\n\nI don't see a way to be notified directly about new connections, so",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230450852,230450852,src/httpserver.cpp
ryanofsky,2018-11-02T18:21:03Z,"> This is necessary in order to have a clean event loop quit\n\nIt seems like only the part of this change needed to exit cleanly is removing the racy `event_base_loopexit` added in #11006. Aside from that, it looks like the previous code would also exit cleanly, unless it took longer than 2 seconds.\n\nIf the 2 second timeout causes problems, maybe it could be increased, but it doesn't seem l",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230465536,230465536,src/httpserver.cpp
jnewbery,2018-11-02T18:47:35Z,I believe this is the only use of `threadResult`. Can you remove it entirely (currently declared at L437 and assigned at L446),https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230473291,230473291,src/httpserver.cpp
ryanofsky,2018-11-02T18:49:09Z,"I think it would be helpful to update ""Re-enable reading"" to ""Re-enable reading (unless g_http_connections has been cleared and the server is shutting down)"", because I think it's hard to see otherwise how `g_http_connections.count` is relevant in this context.",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230473752,230473752,src/httpserver.cpp
promag,2018-11-05T12:06:40Z,"@ryanofsky tried the following:\n```\nbitcoind -regtest\nnc localhost 18443\nbitcoin-cli -regtest stop\n```\nat this point the server waits until it timeouts the request (by default 30 seconds).\n\nIf a request is sent before the timeout the result is:\n```\nPOST / HTTP/1.1\nAuthorization: Basic ...\nContent-Type: application/json\nContent-Length: 44\n\n{""jsonrpc"": ""2.0"",""method"":""h",https://github.com/bitcoin/bitcoin/pull/13501#discussion_r230726803,230726803,src/httpserver.cpp
