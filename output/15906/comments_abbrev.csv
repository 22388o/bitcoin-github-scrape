promag,2019-04-29 15:17:16,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-487621647,487621647,
jnewbery,2019-04-30 21:15:50,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-488118565,488118565,
DrahtBot,2019-05-24 08:24:39,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-495519980,495519980,
laanwj,2019-07-04 12:37:36,Concept and light code-review ACK,https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-508467676,508467676,
amitiuttarwar,2019-07-16 17:12:43,this PR has been rebased & is ready for review. ,https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-511905427,511905427,
amitiuttarwar,2019-07-16 18:20:44,"fixed a bug pointed out by @MarcoFalke (thank you!) where I forgot to set min depth on coin control from `listunspent` rpc. since it wasn't caught by tests, I'd like to add coverage in a separate commit or PR. ",https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-511929871,511929871,
MarcoFalke,2019-07-16 18:33:27,Please update OP to reflect the current state of the pull,https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-511934369,511934369,
jnewbery,2019-07-18 15:18:21,"utACK aa910716c92cfcaa88f396e42465eb1f79522a8e\n\nCode changes look good. From my reading this is a pure refactor that doesn't change behaviour.",https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-512861404,512861404,
elichai,2019-07-18 16:11:43,"utACK, read the code.  https://github.com/bitcoin/bitcoin/commit/aa910716c92cfcaa88f396e42465eb1f79522a8e\nThe only thing is maybe `m_min_depth`(0) and `m_max_depth`(9999999) could be static constants, instead of defined as default value and defined again in `AvailableCoins`",https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-512883637,512883637,
amitiuttarwar,2019-07-18 18:20:03,"good point @elichai. I'm going to leave it for now to leave the acks, but if other changes are needed I will update. thanks for reviewing :) ",https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-512929987,512929987,
jonatack,2019-07-19 13:39:36,"> fixed a bug pointed out by @MarcoFalke (thank you!) where I forgot to set min depth on coin control from `listunspent` rpc. since it wasn't caught by tests, I'd like to add coverage in a separate commit or PR.\n\nCoverage issue reproduced by removing src/wallet/rpcwallet.cpp:L2880 `cctl.m_min_depth = nMinDepth;`\n\ncompiler warns\n```\nwallet/rpcwallet.cpp: In function â€˜UniValue listunspen",https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-513232305,513232305,
jonatack,2019-07-19 14:17:15,"FWIW, same issue for src/wallet/rpcwallet.cpp:L2881 `cctl.m_max_depth = nMaxDepth;` ... compiler warning, unit tests pass, functional tests pass.",https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-513245523,513245523,
remyers,2019-07-19 16:01:28,"It looks like CCoinControl:SetNull should also reset the values of:\n m_min_depth\n m_max_depth\n\nThis is called by sendcoinsdialog.cpp (h/t @jnewbery)\n",https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-513283799,513283799,
laanwj,2019-07-31 10:02:06,ACK 80ba4241a6773590f6b2c18dae758097b5adc02e,https://github.com/bitcoin/bitcoin/pull/15906#issuecomment-516784329,516784329,
luke-jr,2019-04-27 01:58:18,"It's ugly if code calling this with `nMinDepth` (eg, other PRs or out-of-tree patches) can magically have it become `nMaxDepth` instead.\n\nMaybe `nMaxDepth` ought to be moved to `CCoinControl` also? (Or removed? Is there a use case for this?)",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r279139522,279139522,src/wallet/wallet.h
luke-jr,2019-04-27 01:59:06,"What is the rationale for making `CCoinControl` a required parameter?\n\nIf `CCoinControl` is made required, it should probably be in a separate commit, or at least the rationale documented in the commit message.",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r279139549,279139549,src/wallet/wallet.h
Empact,2019-04-27 05:27:51,"This in invalid because the var is out of scope when you dereference it below, suspect that's behind the AddressSanitizer failure on CI.\n\nThat said, I would keep `coinControl` optional, as the default value of `0` for `nMinDepth` is equivalent to the absent / null condition for `coinControl`, in that it never fails the check. Would simplify diff overall.",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r279143904,279143904,src/wallet/wallet.cpp
MarcoFalke,2019-04-27 12:53:13,It seems fragile to rely on the fact that the fallback defaults are the same if no cc is passed or a default constructed cc is passed.,https://github.com/bitcoin/bitcoin/pull/15906#discussion_r279154452,279154452,src/wallet/wallet.h
amitiuttarwar,2019-04-28 00:22:29,"> It's ugly if code calling this with nMinDepth (eg, other PRs or out-of-tree patches) can magically have it become nMaxDepth instead.\n\nagreed. \n\n> Maybe nMaxDepth ought to be moved to CCoinControl also? \n\nwas thinking the same. any suggestions on how to go about answering that? or should I just go for it and pull `nMaxDepth` out? \n\n> Or removed? Is there a use case for this?\n\n",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r279172555,279172555,src/wallet/wallet.h
amitiuttarwar,2019-04-28 01:17:40,"hm, so these are the tradeoffs I see- \n\n**optional**: closer to current function signature, less duplicated code constructing default cc, don't have [this](https://github.com/bitcoin/bitcoin/pull/15906/files#r279143904) problem with callers \n\n**required**: expectations are more explicit from the POV of a caller, not a big of deal to make the change since this function isn't invoked frequen",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r279173412,279173412,src/wallet/wallet.h
MarcoFalke,2019-04-28 13:25:52,"Oh sure, go for what luke and empact prefer. I consider it a stylistic preference.",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r279194778,279194778,src/wallet/wallet.h
MarcoFalke,2019-07-16 18:28:57,"style-nit: Add those `{}`\n\n```suggestion\n        if (nDepth < min_depth || nDepth > nMaxDepth) {\n```",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r304057544,304057544,src/wallet/wallet.cpp
MarcoFalke,2019-07-16 18:28:59,"Instead of running this once per loop, could move it to the beginning of the function (out of the loop). That would also avoid hiding the default value `0` deep in the function body.\n\n```cpp\nconst int min_depth{coinControl?coinControl->m_min_depth:0};",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r304057562,304057562,src/wallet/wallet.cpp
MarcoFalke,2019-07-16 18:32:18,">     It's ugly if code calling this with nMinDepth (eg, other PRs or out-of-tree patches) can magically have it become nMaxDepth instead.\n\nCould solve this by swapping the arguments `bool fOnlySafe` and `CCoinControl` of the function, so that all out-of-tree patches have a (silent) merge conflict and won't compile anymore?\n\nAlternative is to also pass nMaxDepth through with the coincontro",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r304058922,304058922,src/wallet/wallet.h
amitiuttarwar,2019-07-17 16:55:26,pulled onto coincontrol ,https://github.com/bitcoin/bitcoin/pull/15906#discussion_r304540234,304540234,src/wallet/wallet.h
promag,2019-07-18 22:22:21,"nit, could drop `{ }`?",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r305138292,305138292,src/wallet/wallet.cpp
MarcoFalke,2019-07-18 23:00:16,I'd rather drop the `=`. Note that the `{}` enable the `-Wnarrowing` compiler check,https://github.com/bitcoin/bitcoin/pull/15906#discussion_r305147007,305147007,src/wallet/wallet.cpp
MarcoFalke,2019-07-18 23:00:52,"Or keep it as is, since the compiler checks seems to work even with the `=`",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r305147147,305147147,src/wallet/wallet.cpp
amitiuttarwar,2019-07-19 01:25:12,"hm. In a simple example c++ program, I get a compiler error when I drop the `=`. so I added it. ",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r305172285,305172285,src/wallet/wallet.cpp
jonatack,2019-07-19 09:53:55,"Perhaps for another PR but could be nice to document the ""why"" behind the value of 9999999 and hoist it to a static constant:\n```cpp\nsrc/wallet/coincontrol.h:44:   int m_max_depth{9999999};\nsrc/wallet/rpcwallet.cpp:2822: int nMaxDepth = 9999999;\nsrc/wallet/wallet.cpp:2436:    const int max_depth = { coinControl ? coinControl->m_max_depth : 9999999 };\n```",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r305285519,305285519,src/wallet/coincontrol.h
MarcoFalke,2019-07-19 14:05:25,"Huh? Both pass for me\n\n```cpp\n$ echo 'int main(){ const int min_depth = { true ? 1 : 0 };}' | g++ -x c++ -\n$ echo 'int main(){ const int min_depth   { true ? 1 : 0 };}' | g++ -x c++ -\n",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r305372349,305372349,src/wallet/wallet.cpp
elichai,2019-07-19 14:13:20,"FYI, even without optimizations these two are equivalent https://godbolt.org/z/Q4sjcx",https://github.com/bitcoin/bitcoin/pull/15906#discussion_r305375809,305375809,src/wallet/wallet.cpp
