promag,2019-08-09 19:56:36,"> We don't want any of those built in arguments\n\nCare to explain why?",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520044459,520044459,
achow101,2019-08-09 20:03:19,"> Care to explain why?\n\nThey can do unexpected things and cause issues. Qt can also just add more arguments that do other stuff. We have a larger attack surface by allowing this.",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520046343,520046343,
promag,2019-08-09 21:02:00,"For reference see\n - https://doc.qt.io/qt-5/qapplication.html#QApplication:\n - https://doc.qt.io/qt-5/qguiapplication.html#QGuiApplication\n - https://doc.qt.io/qt-5/qcoreapplication.html#QCoreApplication",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520062389,520062389,
fanquake,2019-08-10 01:19:06,"@theuni might want to comment here, as he was asking about if the changes in #16386 would [`remove the ability to add qt-specific runtime args to bitcoin-qt ?`](https://github.com/bitcoin/bitcoin/pull/16386#discussion_r306606456).",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520106288,520106288,
laanwj,2019-08-10 11:10:53,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520140491,520140491,
laanwj,2019-08-10 11:44:54,"@hebasto that's why the variables are `static`, it holds just as true for static variables within a function scope",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520142514,520142514,
fanquake,2019-08-10 11:47:01,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520142647,520142647,
practicalswift,2019-08-10 18:13:55,Concept ACK: smaller attack surface is better.,https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520169301,520169301,
jonasschnelli,2019-08-10 19:15:47,"Concept ACK.\nCodewise, I agree with @laanwj that casting const away and passing it to QApplication seems unfortunate.",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520173059,520173059,
promag,2019-08-10 19:35:35,"How about this\n```diff\ndiff --git a/src/qt/bitcoin.cpp b/src/qt/bitcoin.cpp\nindex 5ce4f3c19..f38235b15 100644\n--- a/src/qt/bitcoin.cpp\n+++ b/src/qt/bitcoin.cpp\n@@ -169,11 +169,8 @@ void BitcoinCore::shutdown()\n     }\n }\n\n-static int qt_argc = 1;\n-static const char* qt_argv = ""bitcoin-qt"";\n-\n BitcoinApplication::BitcoinApplication(interfaces::Node& node):\n-    QApplicati",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520174280,520174280,
achow101,2019-08-10 20:08:39,"> How about this\n\nResults in a segfault.\n\n***\n\nFWIW, making the `argv` const and then casting it is how `QCoreApplication` [does it internally](https://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/kernel/qcoreapplication.cpp#n464) when you say `argc` is 0. The only reason that I did not choose to just do `QApplication(0, 0)` is because it results in the warning `QSettings::value: Emp",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-520176297,520176297,
laanwj,2019-08-14 10:48:31,"@achow101 ~~But why add the const at all if you're going to cast it away?~~\n\nEdit: oh, because of the string constant. I get it, the *string* is read-only, which is fine, Qt is not going to change the contents of arguments, but the *array* needs to be writable as it might remove arguments.\n",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-521197119,521197119,
laanwj,2019-08-14 10:51:50,ACK a2714a5c69f0b0506689af04c3e785f71ee0915d,https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-521198007,521198007,
hebasto,2019-08-14 10:54:45,"Technically, there is a [solution](https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312712522) without `const`.",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-521198868,521198868,
achow101,2019-08-14 17:46:19,"> Technically, there is a [solution](https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312712522) without `const`.\n\nI'm going to leave it as is. I feel that doing the same thing that Qt does internally is safe and there's no reason that we should not follow suit.",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-521348042,521348042,
hebasto,2019-08-14 17:55:40,"> FWIW, making the `argv` const and then casting it is how `QCoreApplication` [does it internally](https://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/kernel/qcoreapplication.cpp#n464) when you say `argc` is 0.\n\nIndeed.\n\nACK a2714a5c69f0b0506689af04c3e785f71ee0915d",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-521351542,521351542,
fanquake,2019-08-15 08:47:34,Added for backport in #16617.,https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-521565479,521565479,
luke-jr,2019-08-23 19:16:54,Some of these options are useful...,https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-524431699,524431699,
luke-jr,2019-08-23 19:28:29,"Examples of options users should be free to use/play with: \n\n* -style= style, sets the application GUI style. Possible values are motif, windows, and platinum. If you compiled Qt with additional styles or have additional styles as plugins these will be available to the -style command line option.\n* -style style, is the same as listed above.\n* -stylesheet= stylesheet, sets the application s",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-524434930,524434930,
ryanofsky,2019-09-11 20:58:27,"This change broke the ability to run GUI tests while seeing actions onscreen:\n\nhttps://github.com/bitcoin/bitcoin/blob/2324aa1dc409e9496b7083aaef5fcb20849f33c0/src/qt/test/wallettests.cpp#L126-L128\n\nWithout being able to set the platform, it's not really possible to write new interactive tests or debug existing ones. I could try to figure out a workaround, maybe using different styles of a",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-530562989,530562989,
laanwj,2019-09-12 05:45:03,"What about `QT_QPA_PLATFORM` or one of the other [environment variables](https://github.com/pyqt/python-qt5/wiki/Qt-Environment-Variable-Reference)?\n\n> the non-specific ""larger attack surface"" one cited in comments\n\nWe don't want to be too specific about this yet.",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-530674585,530674585,
Sjors,2019-10-01 17:06:46,I made an issue about the `test_bitcoin-qt -platform cocoa`: #17013. I see @ryanofsky already spotted it. A `QT_QPA_PLATFORM` environment variable works for me.,https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-537132740,537132740,
Sjors,2019-10-02 16:14:08,"This also breaks the URI handler on macOS, but _only_ when opening from the command line, not when opening from a browser. See #17025.",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-537567651,537567651,
achow101,2021-02-01 16:33:24,"Disclosure of the vulnerability this PR fixes: https://achow101.com/2021/02/0.18-uri-vuln\n\nA possible followup now that this is public would be to explicitly allow safe Qt arguments instead of flatly disabling all of them.",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-770985493,770985493,
practicalswift,2021-02-02 08:49:46,@achow101 Very nice find and thanks for sharing! Has this one been assigned a CVE yet?,https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-771473211,771473211,
hebasto,2021-03-30 22:39:47,"> Has this one been assigned a CVE yet?\n\n[CVE-2021-3401](https://cve.mitre.org/cgi-bin/cvename.cgi?name=2021-3401)",https://github.com/bitcoin/bitcoin/pull/16578#issuecomment-810625233,810625233,
laanwj,2019-08-10 11:10:45,"- these can be inside the function scope\n- if you remove the `const` here, you don't need to `const_cast` below (which is dangerous, as now this will be put in a `.rodata` section and Qt might try to write it)",https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312699493,312699493,src/qt/bitcoin.cpp
promag,2019-08-10 11:26:09,"> these can be inside the function scope\n\nWhat function? Constructor?",https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312699819,312699819,src/qt/bitcoin.cpp
promag,2019-08-10 11:28:40,My suggestion is to make the constructor private and add a `static BitcoinApplication::create()` where you could declare a ~~temporary~~ static argc and argv and the app.,https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312699873,312699873,src/qt/bitcoin.cpp
hebasto,2019-08-10 11:41:50,"Please [note](https://doc.qt.io/qt-5/qcoreapplication.html#QCoreApplication):\n> **Warning:** The data referred to by _argc_ and _argv_ must stay valid for the entire lifetime of the `QCoreApplication` object.",https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312700147,312700147,src/qt/bitcoin.cpp
achow101,2019-08-10 17:11:01,">     * if you remove the `const` here, you don't need to `const_cast` below (which is dangerous, as now this will be put in a `.rodata` section and Qt might try to write it)\n\nGCC complains if it is non const.\n\n```\nwarning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]\n```",https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312709697,312709697,src/qt/bitcoin.cpp
achow101,2019-08-10 17:39:53,"> My suggestion is to make the constructor private and add a `static BitcoinApplication::create()` where you could declare a ~temporary~ static argc and argv and the app.\n\nThat requires a copy constructor, and `QApplication` does not have one. Qt explicitly does not want things to be copied.",https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312710418,312710418,src/qt/bitcoin.cpp
hebasto,2019-08-10 19:03:56,"> GCC complains if it is non const.\n\nCould be:\n```suggestion\nstatic char qt_arg[] = ""bitcoin-qt"";\nstatic char* qt_argv = qt_arg;\n```\n?",https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312712522,312712522,src/qt/bitcoin.cpp
laanwj,2019-08-12 09:28:59,"> That requires a copy constructor, and QApplication does not have one. Qt explicitly does not want things to be copied.\n\nEh, whatever you do, please don't copy around QApplication objects, even if you could. It's a singleton.\nIt's also definitely not necessary to solve this.",https://github.com/bitcoin/bitcoin/pull/16578#discussion_r312840590,312840590,src/qt/bitcoin.cpp
