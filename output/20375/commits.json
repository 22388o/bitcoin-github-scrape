[
  {
    "sha": "3c77b8009de9457c356c0bf4362d11bb99a17bb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzc3YjgwMDlkZTk0NTdjMzU2YzBiZjQzNjJkMTFiYjk5YTE3YmI3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-11T22:21:13Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-11T22:31:40Z"
      },
      "message": "fuzz: Improve coverage for CPartialMerkleTree fuzzing harness",
      "tree": {
        "sha": "ea0fab53b3f4aa162f41f128e991414a79f46f7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea0fab53b3f4aa162f41f128e991414a79f46f7b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c77b8009de9457c356c0bf4362d11bb99a17bb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c77b8009de9457c356c0bf4362d11bb99a17bb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c77b8009de9457c356c0bf4362d11bb99a17bb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c77b8009de9457c356c0bf4362d11bb99a17bb7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9f5132736f34f31f6e7d009015f917c9dcfec00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9f5132736f34f31f6e7d009015f917c9dcfec00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9f5132736f34f31f6e7d009015f917c9dcfec00"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 29,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4710e757573e1ca70fed6bb3621387b8babd1a27",
        "filename": "src/test/fuzz/merkleblock.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 5,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c77b8009de9457c356c0bf4362d11bb99a17bb7/src/test/fuzz/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c77b8009de9457c356c0bf4362d11bb99a17bb7/src/test/fuzz/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/merkleblock.cpp?ref=3c77b8009de9457c356c0bf4362d11bb99a17bb7",
        "patch": "@@ -16,12 +16,36 @@\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n-    std::optional<CPartialMerkleTree> partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n-    if (!partial_merkle_tree) {\n-        return;\n+    CPartialMerkleTree partial_merkle_tree;\n+    switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 1)) {\n+    case 0: {\n+        const std::optional<CPartialMerkleTree> opt_partial_merkle_tree = ConsumeDeserializable<CPartialMerkleTree>(fuzzed_data_provider);\n+        if (opt_partial_merkle_tree) {\n+            partial_merkle_tree = *opt_partial_merkle_tree;\n+        }\n+        break;\n     }\n-    (void)partial_merkle_tree->GetNumTransactions();\n+    case 1: {\n+        CMerkleBlock merkle_block;\n+        const std::optional<CBlock> opt_block = ConsumeDeserializable<CBlock>(fuzzed_data_provider);\n+        CBloomFilter bloom_filter;\n+        std::set<uint256> txids;\n+        if (opt_block && !opt_block->vtx.empty()) {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                merkle_block = CMerkleBlock{*opt_block, bloom_filter};\n+            } else if (fuzzed_data_provider.ConsumeBool()) {\n+                while (fuzzed_data_provider.ConsumeBool()) {\n+                    txids.insert(ConsumeUInt256(fuzzed_data_provider));\n+                }\n+                merkle_block = CMerkleBlock{*opt_block, txids};\n+            }\n+        }\n+        partial_merkle_tree = merkle_block.txn;\n+        break;\n+    }\n+    }\n+    (void)partial_merkle_tree.GetNumTransactions();\n     std::vector<uint256> matches;\n     std::vector<unsigned int> indices;\n-    (void)partial_merkle_tree->ExtractMatches(matches, indices);\n+    (void)partial_merkle_tree.ExtractMatches(matches, indices);\n }"
      }
    ]
  }
]