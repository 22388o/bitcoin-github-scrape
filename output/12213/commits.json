[
  {
    "sha": "886a92f25f2e47a7ec9097d7c5a8d8a6173ef998",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODZhOTJmMjVmMmU0N2E3ZWM5MDk3ZDdjNWE4ZDhhNjE3M2VmOTk4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-24T14:26:41Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-24T14:45:07Z"
      },
      "message": "[rpc] Add address type option to addmultisigaddress",
      "tree": {
        "sha": "f3cca784c1c87fc7dc6552afeb9eb94966334ce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3cca784c1c87fc7dc6552afeb9eb94966334ce9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/886a92f25f2e47a7ec9097d7c5a8d8a6173ef998",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886a92f25f2e47a7ec9097d7c5a8d8a6173ef998",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/886a92f25f2e47a7ec9097d7c5a8d8a6173ef998",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886a92f25f2e47a7ec9097d7c5a8d8a6173ef998/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95941396fff81f60d75fc8cca70716b26efe820e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95941396fff81f60d75fc8cca70716b26efe820e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95941396fff81f60d75fc8cca70716b26efe820e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 14,
      "deletions": 6
    },
    "files": [
      {
        "sha": "baa64652444aae43094f14edfe78766a8634143b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/886a92f25f2e47a7ec9097d7c5a8d8a6173ef998/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/886a92f25f2e47a7ec9097d7c5a8d8a6173ef998/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=886a92f25f2e47a7ec9097d7c5a8d8a6173ef998",
        "patch": "@@ -1169,9 +1169,8 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n-    {\n-        std::string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4) {\n+        std::string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" \\\"address_type\\\" )\\n\"\n             \"\\nAdd a nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n             \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n             \"This functionality is only intended for use with non-watchonly addresses.\\n\"\n@@ -1186,6 +1185,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"       ...,\\n\"\n             \"     ]\\n\"\n             \"3. \\\"account\\\"                      (string, optional) DEPRECATED. An account to assign the addresses to.\\n\"\n+            \"4. \\\"address_type\\\"                 (string, optional) The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\". Default is set by -addresstype.\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -1224,10 +1224,18 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n         }\n     }\n \n+    OutputType output_type = g_address_type;\n+    if (!request.params[3].isNull()) {\n+        output_type = ParseOutputType(request.params[3].get_str(), output_type);\n+        if (output_type == OUTPUT_TYPE_NONE) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[3].get_str()));\n+        }\n+    }\n+\n     // Construct using pay-to-script-hash:\n     CScript inner = CreateMultisigRedeemscript(required, pubkeys);\n     pwallet->AddCScript(inner);\n-    CTxDestination dest = pwallet->AddAndGetDestinationForScript(inner, g_address_type);\n+    CTxDestination dest = pwallet->AddAndGetDestinationForScript(inner, output_type);\n     pwallet->SetAddressBook(dest, strAccount, \"send\");\n \n     // Return old style interface\n@@ -3077,7 +3085,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n                             \"3. iswitness               (boolean, optional) Whether the transaction hex is a serialized witness transaction \\n\"\n                             \"                              If iswitness is not present, heuristic tests will be used in decoding\\n\"\n-                            \n+\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -3519,7 +3527,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, {} },\n     { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n     { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },\n-    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\"} },\n+    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n     { \"hidden\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\",\"p2sh\"} },\n     { \"wallet\",             \"backupwallet\",             &backupwallet,             {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                  &bumpfee,                  {\"txid\", \"options\"} },"
      }
    ]
  },
  {
    "sha": "f523c6bec005b2c999651787d029dee0fe719eb1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTIzYzZiZWMwMDViMmM5OTk2NTE3ODdkMDI5ZGVlMGZlNzE5ZWIx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-17T23:30:56Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-24T16:23:55Z"
      },
      "message": "[qa] Use address type in addmultisigaddress to avoid addwitnessaddress",
      "tree": {
        "sha": "e04c89530caa88387c78521ec8cf2a4b956f4fe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e04c89530caa88387c78521ec8cf2a4b956f4fe2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f523c6bec005b2c999651787d029dee0fe719eb1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f523c6bec005b2c999651787d029dee0fe719eb1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f523c6bec005b2c999651787d029dee0fe719eb1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f523c6bec005b2c999651787d029dee0fe719eb1/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "886a92f25f2e47a7ec9097d7c5a8d8a6173ef998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886a92f25f2e47a7ec9097d7c5a8d8a6173ef998",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/886a92f25f2e47a7ec9097d7c5a8d8a6173ef998"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e4f413cc2a4998e9884ff76373f45d2444df1d98",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f523c6bec005b2c999651787d029dee0fe719eb1/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f523c6bec005b2c999651787d029dee0fe719eb1/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=f523c6bec005b2c999651787d029dee0fe719eb1",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         self.address = self.nodes[0].getnewaddress()\n         self.ms_address = self.nodes[0].addmultisigaddress(1,[self.address])['address']\n         self.wit_address = self.nodes[0].addwitnessaddress(self.address)\n-        self.wit_ms_address = self.nodes[0].addwitnessaddress(self.ms_address)\n+        self.wit_ms_address = self.nodes[0].addmultisigaddress(1, [self.address], '', 'p2sh-segwit')['address']\n \n         network_thread_start()\n         self.coinbase_blocks = self.nodes[0].generate(2) # Block 2"
      },
      {
        "sha": "ba6373fa3374c940eef4f28f5e69a5f5b2477357",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f523c6bec005b2c999651787d029dee0fe719eb1/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f523c6bec005b2c999651787d029dee0fe719eb1/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=f523c6bec005b2c999651787d029dee0fe719eb1",
        "patch": "@@ -95,12 +95,11 @@ def run_test(self):\n         for i in range(3):\n             newaddress = self.nodes[i].getnewaddress()\n             self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n-            multiaddress = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]])['address']\n             multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n             p2sh_addr = self.nodes[i].addwitnessaddress(newaddress)\n             bip173_addr = self.nodes[i].addwitnessaddress(newaddress, False)\n-            p2sh_ms_addr = self.nodes[i].addwitnessaddress(multiaddress)\n-            bip173_ms_addr = self.nodes[i].addwitnessaddress(multiaddress, False)\n+            p2sh_ms_addr = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]], '', 'p2sh-segwit')['address']\n+            bip173_ms_addr = self.nodes[i].addmultisigaddress(1, [self.pubkey[-1]], '', 'bech32')['address']\n             assert_equal(p2sh_addr, key_to_p2sh_p2wpkh(self.pubkey[-1]))\n             assert_equal(bip173_addr, key_to_p2wpkh(self.pubkey[-1]))\n             assert_equal(p2sh_ms_addr, script_to_p2sh_p2wsh(multiscript))"
      }
    ]
  }
]