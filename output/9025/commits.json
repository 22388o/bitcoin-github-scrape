[
  {
    "sha": "ce2bb23aa5be10232726d063bfae6063a14720b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTJiYjIzYWE1YmUxMDIzMjcyNmQwNjNiZmFlNjA2M2ExNDcyMGI5",
    "commit": {
      "author": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-10-26T12:09:54Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2016-11-22T14:37:33Z"
      },
      "message": "getrawtransaction should take a bool for verbose",
      "tree": {
        "sha": "1f357a5fa6904e5551793ccce5ca7c1f33cc8cd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f357a5fa6904e5551793ccce5ca7c1f33cc8cd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce2bb23aa5be10232726d063bfae6063a14720b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2bb23aa5be10232726d063bfae6063a14720b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce2bb23aa5be10232726d063bfae6063a14720b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2bb23aa5be10232726d063bfae6063a14720b9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 23,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0e5964474f0d9cc0998c3b2da193d09a282e10e5",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 9,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce2bb23aa5be10232726d063bfae6063a14720b9/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce2bb23aa5be10232726d063bfae6063a14720b9/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ce2bb23aa5be10232726d063bfae6063a14720b9",
        "patch": "@@ -135,17 +135,17 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             \"or there is an unspent output in the utxo for this transaction. To make it always work,\\n\"\n             \"you need to maintain a transaction index, using the -txindex command line option.\\n\"\n             \"\\nReturn the raw transaction data.\\n\"\n-            \"\\nIf verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\\n\"\n-            \"If verbose is non-zero, returns an Object with information about 'txid'.\\n\"\n+            \"\\nIf verbose is 'true', returns an Object with information about 'txid'.\\n\"\n+            \"If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"      (string, required) The transaction id\\n\"\n-            \"2. verbose       (numeric, optional, default=0) If 0, return a string, other return a json object\\n\"\n+            \"2. verbose       (bool, optional, default=false) If true, return a string, other return a json object\\n\"\n \n-            \"\\nResult (if verbose is not set or set to 0):\\n\"\n+            \"\\nResult (if verbose is not set or set to false):\\n\"\n             \"\\\"data\\\"      (string) The serialized, hex-encoded data for 'txid'\\n\"\n \n-            \"\\nResult (if verbose > 0):\\n\"\n+            \"\\nResult (if verbose is set to true):\\n\"\n             \"{\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n@@ -192,17 +192,31 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\"\")\n-            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" 1\")\n-            + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", 1\")\n+            + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true\")\n+            + HelpExampleRpc(\"getrawtransaction\", \"\\\"mytxid\\\", true\")\n         );\n \n     LOCK(cs_main);\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n+    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n     bool fVerbose = false;\n-    if (request.params.size() > 1)\n-        fVerbose = (request.params[1].get_int() != 0);\n+    if (request.params.size() > 1) {\n+        if (request.params[1].isNum()) {\n+            if (request.params[1].get_int() != 0) {\n+                fVerbose = true;\n+            }\n+        }\n+        else if(request.params[1].isBool()) {\n+            if(request.params[1].isTrue()) {\n+                fVerbose = true;\n+            }\n+        }\n+        else {\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid type provided. Verbose parameter must be a boolean.\");\n+        } \n+    }\n \n     CTransaction tx;\n     uint256 hashBlock;"
      }
    ]
  },
  {
    "sha": "240189b2c14244c3058e80b40bd4dacbd200c4c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDAxODliMmMxNDI0NGMzMDU4ZTgwYjQwYmQ0ZGFjYmQyMDBjNGM3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2016-11-22T14:37:59Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2016-11-22T14:37:59Z"
      },
      "message": "add testcases for getrawtransaction",
      "tree": {
        "sha": "6b941188c4597b0f2cedf982e010517454b51249",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b941188c4597b0f2cedf982e010517454b51249"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/240189b2c14244c3058e80b40bd4dacbd200c4c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/240189b2c14244c3058e80b40bd4dacbd200c4c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/240189b2c14244c3058e80b40bd4dacbd200c4c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/240189b2c14244c3058e80b40bd4dacbd200c4c7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce2bb23aa5be10232726d063bfae6063a14720b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce2bb23aa5be10232726d063bfae6063a14720b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce2bb23aa5be10232726d063bfae6063a14720b9"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 35,
      "deletions": 4
    },
    "files": [
      {
        "sha": "33a6f2b0ccaac665ca7001e799dc45fb25d05799",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/240189b2c14244c3058e80b40bd4dacbd200c4c7/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/240189b2c14244c3058e80b40bd4dacbd200c4c7/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=240189b2c14244c3058e80b40bd4dacbd200c4c7",
        "patch": "@@ -2,11 +2,15 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"rawtranscation RPCs QA test.\n \n-#\n-# Test re-org scenarios with a mempool that contains transactions\n-# that spend (directly or indirectly) coinbase transactions.\n-#\n+# Tests the following RPCs:\n+#    - createrawtransaction\n+#    - signrawtransaction\n+#    - sendrawtransaction\n+#    - decoderawtransaction\n+#    - getrawtransaction\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -138,6 +142,33 @@ def run_test(self):\n         self.sync_all()\n         assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n \n+        # getrawtransaction tests\n+        # 1. valid parameters - only supply txid\n+        txHash = rawTx[\"hash\"]\n+        assert_equal(self.nodes[0].getrawtransaction(txHash), rawTxSigned['hex'])\n+\n+        # 2. valid parameters - supply txid and 0 for non-verbose\n+        assert_equal(self.nodes[0].getrawtransaction(txHash, 0), rawTxSigned['hex'])\n+\n+        # 3. valid parameters - supply txid and False for non-verbose\n+        assert_equal(self.nodes[0].getrawtransaction(txHash, False), rawTxSigned['hex'])\n+\n+        # 4. valid parameters - supply txid and 1 for verbose.\n+        # We only check the \"hex\" field of the output so we don't need to update this test every time the output format changes.\n+        assert_equal(self.nodes[0].getrawtransaction(txHash, 1)[\"hex\"], rawTxSigned['hex'])\n+\n+        # 5. valid parameters - supply txid and True for non-verbose\n+        assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n+\n+        # 6. invalid parameters - supply txid and string \"Flase\"\n+        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+\n+        # 7. invalid parameters - supply txid and empty array\n+        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, [])\n+\n+        # 8. invalid parameters - supply txid and empty dict\n+        assert_raises(JSONRPCException, self.nodes[0].getrawtransaction, txHash, {})\n+\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n         rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)"
      }
    ]
  }
]