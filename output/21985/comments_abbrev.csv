jonatack,2021-05-17 18:06:34,ACK c7d461b014422f1aaa13ae978d730864616ab7bb,https://github.com/bitcoin/bitcoin/pull/21985#issuecomment-842525984,842525984,
practicalswift,2021-05-17 18:59:56,"Code looks correct, so code review ACK c7d461b014422f1aaa13ae978d730864616ab7bb\n\nAs stated in https://github.com/bitcoin/bitcoin/issues/21682#issuecomment-819897122 I have a slightly preference towards not including scope id in `CNetAddr::ToStringIP()` out. That is how Rust's `std::net::Ipv6Addr` work. That said: if others feels strongly about including scope id then I'm fine with that too. Th",https://github.com/bitcoin/bitcoin/pull/21985#issuecomment-842557098,842557098,
laanwj,2021-05-17 19:46:04,"@practicalswift Thank you for the review! I do not entirely understand your insistence on making our IPv6 formatting function the same as that of rust's IPv6 address type which is a different animal. It doesn't include a scope id, so cannot include it for formatting. In rust, the `scope_id` is part of [SocketAddrV6](https://doc.rust-lang.org/std/net/struct.SocketAddrV6.html). When formatted as str",https://github.com/bitcoin/bitcoin/pull/21985#issuecomment-842584857,842584857,
practicalswift,2021-05-17 21:01:27,"@laanwj \n\nThanks for providing the Rust `SocketAddrV6` string representation example. I see your point regarding it being different animals, and I guess this entire discussion boils down to if the expectation is that `CNetAddr::ToStringIP()` should print the IPv6 _address_ or the IPv6 _socket address_:\n* IPv6 address ([std::net::Ipv6Addr](https://doc.rust-lang.org/std/net/struct.Ipv6Addr.htm",https://github.com/bitcoin/bitcoin/pull/21985#issuecomment-842636198,842636198,
laanwj,2021-05-18 06:13:38,"For better or worse our data representation has an intermediate nesting level that doesn't neatly fit into that division.\n`CService` is the full ""socket address"" [addres + scope_id] + port, `CNetAddr` is address **+ scope_id**.\n\nAs this is our data representation I think the string representation should reflect this.",https://github.com/bitcoin/bitcoin/pull/21985#issuecomment-842876501,842876501,
laanwj,2021-05-18 19:08:46,"Updated the test for @vasild's comment.\n[c7d461b014422f1aaa13ae978d730864616ab7bb..6c280adcd865ae3da4df53d630c9bf737283a56f](https://github.com/bitcoin/bitcoin/compare/c7d461b014422f1aaa13ae978d730864616ab7bb..6c280adcd865ae3da4df53d630c9bf737283a56f)\n",https://github.com/bitcoin/bitcoin/pull/21985#issuecomment-843459637,843459637,
practicalswift,2021-05-18 21:23:48,"cr ACK 6c280adcd865ae3da4df53d630c9bf737283a56f\n\n@laanwj \n\n> > [â€¦] I guess this entire discussion boils down to if the expectation is that `CNetAddr::ToStringIP()` should print the IPv6 _address_ or the IPv6 _socket address_:\n> > * IPv6 address (std::net::Ipv6Addr): ""IPv6 addresses are defined as 128-bit integers in IETF RFC 4291. They are usually represented as eight 16-bit segments.""\",https://github.com/bitcoin/bitcoin/pull/21985#issuecomment-843573376,843573376,
jonatack,2021-05-19 07:35:47,"Post-merge ACK 6c280adcd865ae3da4df53d630c9bf737283a56f\n\n`addr.ToString()` was previously memoized because it was used twice, once for checking the behavior on most platforms and a second time for the different behavior exhibited by macOS. We now only need it once, so good idea to simplify it. \n\ngit diff c7d461b 6c280ad \n```diff\ndiff --git a/src/test/net_tests.cpp b/src/test/net_tests.",https://github.com/bitcoin/bitcoin/pull/21985#issuecomment-843831665,843831665,
jonatack,2021-05-17 15:36:47,"nit, can drop this line as we are no longer concerned about collisions with locally reserved zone ids",https://github.com/bitcoin/bitcoin/pull/21985#discussion_r633641594,633641594,src/test/net_tests.cpp
laanwj,2021-05-17 16:15:28,"I wasn't sure whether this was a problem for parsing or for formatting, that's why I kept it. But makes sense, will remove it.",https://github.com/bitcoin/bitcoin/pull/21985#discussion_r633672014,633672014,src/test/net_tests.cpp
vasild,2021-05-18 12:53:54,"`BOOST_CHECK_EQUAL()` would print both values in case of failure. The extra variable `addr_str` looks like just clutter to me.\n\n```suggestion\n    BOOST_CHECK_EQUAL(addr.ToString(), scoped_addr);\n```",https://github.com/bitcoin/bitcoin/pull/21985#discussion_r634348183,634348183,src/test/net_tests.cpp
laanwj,2021-05-18 15:50:04,"FWIW, I've simply restored this code from git history. But sure I'm fine with updating it.",https://github.com/bitcoin/bitcoin/pull/21985#discussion_r634516056,634516056,src/test/net_tests.cpp
