[
  {
    "sha": "6c280adcd865ae3da4df53d630c9bf737283a56f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzI4MGFkY2Q4NjVhZTNkYTRkZjUzZDYzMGM5YmY3MzcyODNhNTZm",
    "commit": {
      "author": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-05-17T15:01:44Z"
      },
      "committer": {
        "name": "W. J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-05-18T19:01:32Z"
      },
      "message": "net: Return IPv6 scope id in `CNetAddr::ToStringIP()`\n\nIf a scope id is provided, return it back in the string representation.\nAlso bring back the test. Closes #21982.\n\nCo-authored-by: Jon Atack <jon@atack.com>",
      "tree": {
        "sha": "6bb5471e9a3f1eb17a79353eb3b0a0317d36979e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6bb5471e9a3f1eb17a79353eb3b0a0317d36979e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c280adcd865ae3da4df53d630c9bf737283a56f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c280adcd865ae3da4df53d630c9bf737283a56f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c280adcd865ae3da4df53d630c9bf737283a56f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c280adcd865ae3da4df53d630c9bf737283a56f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d1d33d33491a98bb0dbf64ea7e4743200e71474",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d1d33d33491a98bb0dbf64ea7e4743200e71474",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d1d33d33491a98bb0dbf64ea7e4743200e71474"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "352abae298ece56bf17d74cbed21ad2cd064948b",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c280adcd865ae3da4df53d630c9bf737283a56f/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c280adcd865ae3da4df53d630c9bf737283a56f/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=6c280adcd865ae3da4df53d630c9bf737283a56f",
        "patch": "@@ -558,7 +558,7 @@ static std::string IPv4ToString(Span<const uint8_t> a)\n \n // Return an IPv6 address text representation with zero compression as described in RFC 5952\n // (\"A Recommendation for IPv6 Address Text Representation\").\n-static std::string IPv6ToString(Span<const uint8_t> a)\n+static std::string IPv6ToString(Span<const uint8_t> a, uint32_t scope_id)\n {\n     assert(a.size() == ADDR_IPV6_SIZE);\n     const std::array groups{\n@@ -606,6 +606,10 @@ static std::string IPv6ToString(Span<const uint8_t> a)\n         r += strprintf(\"%s%x\", ((!r.empty() && r.back() != ':') ? \":\" : \"\"), groups[i]);\n     }\n \n+    if (scope_id != 0) {\n+        r += strprintf(\"%%%u\", scope_id);\n+    }\n+\n     return r;\n }\n \n@@ -615,7 +619,7 @@ std::string CNetAddr::ToStringIP() const\n     case NET_IPV4:\n         return IPv4ToString(m_addr);\n     case NET_IPV6: {\n-        return IPv6ToString(m_addr);\n+        return IPv6ToString(m_addr, m_scope_id);\n     }\n     case NET_ONION:\n         switch (m_addr.size()) {\n@@ -639,7 +643,7 @@ std::string CNetAddr::ToStringIP() const\n     case NET_I2P:\n         return EncodeBase32(m_addr, false /* don't pad with = */) + \".b32.i2p\";\n     case NET_CJDNS:\n-        return IPv6ToString(m_addr);\n+        return IPv6ToString(m_addr, 0);\n     case NET_INTERNAL:\n         return EncodeBase32(m_addr) + \".internal\";\n     case NET_UNROUTABLE: // m_net is never and should not be set to NET_UNROUTABLE"
      },
      {
        "sha": "7a122bd8b08473d53d06da8fed0350a75a5ace1d",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c280adcd865ae3da4df53d630c9bf737283a56f/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c280adcd865ae3da4df53d630c9bf737283a56f/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=6c280adcd865ae3da4df53d630c9bf737283a56f",
        "patch": "@@ -300,13 +300,17 @@ BOOST_AUTO_TEST_CASE(cnetaddr_basic)\n \n     // IPv6, scoped/link-local. See https://tools.ietf.org/html/rfc4007\n     // We support non-negative decimal integers (uint32_t) as zone id indices.\n-    // Test with a fairly-high value, e.g. 32, to avoid locally reserved ids.\n+    // Normal link-local scoped address functionality is to append \"%\" plus the\n+    // zone id, for example, given a link-local address of \"fe80::1\" and a zone\n+    // id of \"32\", return the address as \"fe80::1%32\".\n     const std::string link_local{\"fe80::1\"};\n     const std::string scoped_addr{link_local + \"%32\"};\n     BOOST_REQUIRE(LookupHost(scoped_addr, addr, false));\n     BOOST_REQUIRE(addr.IsValid());\n     BOOST_REQUIRE(addr.IsIPv6());\n     BOOST_CHECK(!addr.IsBindAny());\n+    BOOST_CHECK_EQUAL(addr.ToString(), scoped_addr);\n+\n     // Test that the delimiter \"%\" and default zone id of 0 can be omitted for the default scope.\n     BOOST_REQUIRE(LookupHost(link_local + \"%0\", addr, false));\n     BOOST_REQUIRE(addr.IsValid());"
      }
    ]
  }
]