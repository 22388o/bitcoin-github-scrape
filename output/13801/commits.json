[
  {
    "sha": "87dead0999190a67bbee8337400d614ecc7857a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2RlYWQwOTk5MTkwYTY3YmJlZTgzMzc0MDBkNjE0ZWNjNzg1N2E3",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-25T07:24:11Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-26T08:40:56Z"
      },
      "message": "wallet: add -avoidreuse startup option",
      "tree": {
        "sha": "547149e7257440eed42b07dabbeac975857d6280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/547149e7257440eed42b07dabbeac975857d6280"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87dead0999190a67bbee8337400d614ecc7857a7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAltZiRgACgkQV692LbM1\nMyLNoQ/6AgCNobJzNPsakGcOX0ZD8ZUdBHVd4aZ8MCUb0tcveRHcYdQrFSSEwDLj\nweQeCXfxTfSYjLRHHHJzmqyGJaFcAxt9cP3uipZKaXf7spnuMygbUpgTtbeMV/oM\nBfJA2VUVQvjzPZ1mJdhsnrE2lnADqBZiR9Cs5d4ya3/UNx8/XfrvydJrXE32ZTaA\nmFfqkWhW+UHItBld3woL4oK1IrHSyMmlESigykS4+vL8G7I9uFqLluPq+t2kBgdJ\nKaqrfTw7wAPmnxpDMKJFaOwl0IVsJFacZp5O5YazDV9kk2TNTrjpqM0FBjhjflAx\nTVmmyNUIierZLeVGM7H7nvgTDf8/Likp3LkXE+fl1LN4robZibGk+F6ZI3bt5dVL\ncduLVAmGtpQ7O4TiYhiTkaJtBQQa7CLKQMMR+wFzFY2hYy/EbHHXVcj+/n6wL0Dk\nLHnmFMwW6ejz8cOGP5cTWmbubjh5pUyh40EGQsr/hP2bk62Ez3EssgZ5Akg3KAnI\nOg5p8b2K1+WOFZTOmHEBCK6amcnMEHNr9lcSt8a64VVgEHI6x1LVO8y5DHTnrSDK\nDShAf520+NEiq/jnZsFcDeox//wLFEvtV7y+2mD7sP8ErGT54YMyymvgOsTOJGjC\nS646v08raWr81QgbyHZ7joPUTQILe6AJkKkC3VRgsrHxdHGecZA=\n=52LO\n-----END PGP SIGNATURE-----",
        "payload": "tree 547149e7257440eed42b07dabbeac975857d6280\nparent 29b4ee64695f79511912ae127e66e0fe82f7a0d1\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532503451 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532594456 +0900\n\nwallet: add -avoidreuse startup option\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87dead0999190a67bbee8337400d614ecc7857a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87dead0999190a67bbee8337400d614ecc7857a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87dead0999190a67bbee8337400d614ecc7857a7/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29b4ee64695f79511912ae127e66e0fe82f7a0d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29b4ee64695f79511912ae127e66e0fe82f7a0d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29b4ee64695f79511912ae127e66e0fe82f7a0d1"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "493568263947c1ab6dda5f33b514196b33331f7a",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87dead0999190a67bbee8337400d614ecc7857a7/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87dead0999190a67bbee8337400d614ecc7857a7/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=87dead0999190a67bbee8337400d614ecc7857a7",
        "patch": "@@ -55,6 +55,7 @@ void WalletInit::AddWalletOptions() const\n {\n     gArgs.AddArg(\"-addresstype\", strprintf(\"What type of addresses to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default: \\\"%s\\\")\", FormatOutputType(DEFAULT_ADDRESS_TYPE)), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-avoidpartialspends\", strprintf(_(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u)\"), DEFAULT_AVOIDPARTIALSPENDS), false, OptionsCategory::WALLET);\n+    gArgs.AddArg(\"-avoidreuse\", \"Mark addresses which have been used to fund transactions in the past, and avoid reusing these in future funding, except when explicitly requested \" + strprintf(_(\"(default: %u)\"), DEFAULT_AVOIDREUSE), false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", false, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \""
      },
      {
        "sha": "1c6190de7961fc73be10341a07cbee2ecd7403e7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87dead0999190a67bbee8337400d614ecc7857a7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87dead0999190a67bbee8337400d614ecc7857a7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=87dead0999190a67bbee8337400d614ecc7857a7",
        "patch": "@@ -64,6 +64,9 @@ static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n \n+//! if set, addresses will be marked dirty once spent from, and will be excluded from future coin selects\n+static const bool DEFAULT_AVOIDREUSE = false;\n+\n class CBlockIndex;\n class CCoinControl;\n class COutput;"
      }
    ]
  },
  {
    "sha": "064e2db3d40d314e727ae47870b4206505aa113a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjRlMmRiM2Q0MGQzMTRlNzI3YWU0Nzg3MGI0MjA2NTA1YWExMTNh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T09:13:10Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T09:13:10Z"
      },
      "message": "wallet: add DestinationFilter enum and helper functions",
      "tree": {
        "sha": "780c5df2bfc123c509cd2380db5afe8d404114f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/780c5df2bfc123c509cd2380db5afe8d404114f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/064e2db3d40d314e727ae47870b4206505aa113a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlte1qYACgkQV692LbM1\nMyILrw//WQHrTT0/3JB4mrfZBDunvwL31R6R7fgQaZuitjF7p9Nq7u8M0UlfW7Ca\nCnOWAwei5dH5jr8/6LmnHHApU7OSdZcV4u8O6eG8x75g50BHssbIt9+2krFCkCP6\nuSQJv/eGqAvLaKlH+turJFse8n+cgMXndKRZCH/CGnZSMpG8gCFJYkHd2TB6Y45h\n4Cu2HrblURTBhOtjcUpdfvZldIJOiJM/uIVO/4gTY8bT5lee0HTovg6TKTN4pkXU\nMZdYIX5gjP3BLpV7f9ZujJZl8pxUxxMlZjtzSt48SV73XrfurVPe8j8mscINO/kc\ncmn6GwDqHo52poE8Q4LOpYno3NJlusthryUv0RnXsJsTqu9EqHITjSid9ZvIzKxf\nG5OmMgOWhNRxxFptqmnw1HbWqeWrAlR/nIiuryhb9pLG6YYKysj6unONr58Lh5ie\ng/mVdvPOrUv/EDncOtuOJtLP1UALhmMZk/5/0SucbC5H3twgohs9vHPTh8yJ0Dsf\n1HlQthsldUvjhJEn8kupGb5ZCQa+NXjq4/aAhH8BbW/EShhHvClj0LTNrZrEPysa\ntWPtgjrge51yg3OWXUtMnnFXC3PVJ1H/Q7XigMdRPcN/CO3R9ui2L4oycuyn8PII\nJTS8jgOBM4id+Keb5cmhSIvc/JqS51xzDvF+yBgecFsuj4CRQww=\n=uD2T\n-----END PGP SIGNATURE-----",
        "payload": "tree 780c5df2bfc123c509cd2380db5afe8d404114f6\nparent 87dead0999190a67bbee8337400d614ecc7857a7\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532941990 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532941990 +0900\n\nwallet: add DestinationFilter enum and helper functions\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/064e2db3d40d314e727ae47870b4206505aa113a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/064e2db3d40d314e727ae47870b4206505aa113a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/064e2db3d40d314e727ae47870b4206505aa113a/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87dead0999190a67bbee8337400d614ecc7857a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87dead0999190a67bbee8337400d614ecc7857a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87dead0999190a67bbee8337400d614ecc7857a7"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1ee54176641b4d6b1039892e50044defeec15745",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064e2db3d40d314e727ae47870b4206505aa113a/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064e2db3d40d314e727ae47870b4206505aa113a/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=064e2db3d40d314e727ae47870b4206505aa113a",
        "patch": "@@ -324,3 +324,26 @@ bool OutputGroup::EligibleForSpending(const CoinEligibilityFilter& eligibility_f\n         && m_ancestors <= eligibility_filter.max_ancestors\n         && m_descendants <= eligibility_filter.max_descendants;\n }\n+\n+static const std::string DESTINATION_FILTER_STRING_MIXED = \"mixed\";\n+static const std::string DESTINATION_FILTER_STRING_CLEAN = \"clean\";\n+static const std::string DESTINATION_FILTER_STRING_DIRTY = \"dirty\";\n+\n+bool ParseDestinationFilter(const std::string& type, DestinationFilter& dest_filter)\n+{\n+    if      (type == DESTINATION_FILTER_STRING_MIXED) dest_filter = DestinationFilter::DestinationMixed;\n+    else if (type == DESTINATION_FILTER_STRING_CLEAN) dest_filter = DestinationFilter::DestinationOnlyClean;\n+    else if (type == DESTINATION_FILTER_STRING_DIRTY) dest_filter = DestinationFilter::DestinationOnlyDirty;\n+    else return false;\n+    return true;\n+}\n+\n+const std::string& FormatDestinationFilter(DestinationFilter type)\n+{\n+    switch (type) {\n+    case DestinationFilter::DestinationMixed:     return DESTINATION_FILTER_STRING_MIXED;\n+    case DestinationFilter::DestinationOnlyClean: return DESTINATION_FILTER_STRING_CLEAN;\n+    case DestinationFilter::DestinationOnlyDirty: return DESTINATION_FILTER_STRING_DIRTY;\n+    default: assert(false);\n+    }\n+}"
      },
      {
        "sha": "62ac329f4048b4f8383068a98f3ea896ee260c04",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/064e2db3d40d314e727ae47870b4206505aa113a/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/064e2db3d40d314e727ae47870b4206505aa113a/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=064e2db3d40d314e727ae47870b4206505aa113a",
        "patch": "@@ -53,6 +53,21 @@ class CInputCoin {\n     }\n };\n \n+enum DestinationFilter\n+{\n+    DestinationMixed     = 0,\n+    DestinationOnlyClean = 1,\n+    DestinationOnlyDirty = 2,\n+};\n+\n+bool ParseDestinationFilter(const std::string& str, DestinationFilter& dest_filter);\n+const std::string& FormatDestinationFilter(DestinationFilter dest_filter);\n+inline bool DestinationFilterApplies(DestinationFilter dest_filter, bool is_dirty) {\n+    return\n+        (dest_filter == DestinationFilter::DestinationMixed) ||\n+        ((dest_filter == DestinationOnlyDirty) == is_dirty);\n+}\n+\n struct CoinEligibilityFilter\n {\n     const int conf_mine;"
      }
    ]
  },
  {
    "sha": "1c562043ba70c048e7385c77cb465ce974b1b011",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzU2MjA0M2JhNzBjMDQ4ZTczODVjNzdjYjQ2NWNlOTc0YjFiMDEx",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T08:22:09Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T09:14:51Z"
      },
      "message": "wallet: add m_dest_filter to coin control object",
      "tree": {
        "sha": "f0e2e4844279a4163cbf717d16a8e8697c5ef87c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0e2e4844279a4163cbf717d16a8e8697c5ef87c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c562043ba70c048e7385c77cb465ce974b1b011",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlte1wsACgkQV692LbM1\nMyL74xAAiv6AE1WEfbF7Ks01Oh+2eG+EdFhQvhEN3c9H9VpRzh64uQYTLJR03JNO\n3cYyPko8yz+pdwnlOHFIA4ePgZ50diXtn1DChZp8yfdeH3PDyWDONleu248lbI4t\nk0AjpVA/dqUoJJpjev00dcoNZTck9SEF6Px9KzYcbDTq0USbizvoIdAuCtt4MNWe\nocVucWEfyKBiQelMg2kjNZwUy+f+gXJESduTczJ7eDZSoJEWamA/kQPcgt8cdjLB\nh3dNnTyVyoUTEYt6NJ9oQFdQ0sowQp1T3uk70za6XiBV2Xslt56MPerMMs25QxYl\neF/I9pZK9zwtHB34eVTbXEw7nWhP5D9oOUHVSwhbtiqut27osXJZUXM+iWjSdBFU\n6HOtpgw/rhV8vaBMgC+EGe7BxgnKEzVgK1zDMsmPLZhtLvY5upCALzRou8H8u1t1\nEhWDr8nQ/WfhuJTyhaz0eMR72WuzM3vPub6VuHj33ktL9e0L7wXl6lUS3sByN5hX\nKcxAPpsQMVKefLPtJTUOmsb2XSfHyhvaYS9MFImy/6c+OCqaG60BNYxw8HfiQcE6\n6pKGdg8XQ+MAPuVoNDex9X22GB424xute9P304hS2mCyqv0ap6toRTCiCK4ykNlO\nnc9vc4n9qvrSBQHMIOV4sx0ufuiMuOLX2TQiRdYuv4unWjo8QgI=\n=EV3I\n-----END PGP SIGNATURE-----",
        "payload": "tree f0e2e4844279a4163cbf717d16a8e8697c5ef87c\nparent 064e2db3d40d314e727ae47870b4206505aa113a\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532938929 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532942091 +0900\n\nwallet: add m_dest_filter to coin control object\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c562043ba70c048e7385c77cb465ce974b1b011",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c562043ba70c048e7385c77cb465ce974b1b011",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c562043ba70c048e7385c77cb465ce974b1b011/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "064e2db3d40d314e727ae47870b4206505aa113a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/064e2db3d40d314e727ae47870b4206505aa113a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/064e2db3d40d314e727ae47870b4206505aa113a"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2e81d9a72c704168a188bfb05e3e9f7e011d5585",
        "filename": "src/wallet/coincontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c562043ba70c048e7385c77cb465ce974b1b011/src/wallet/coincontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c562043ba70c048e7385c77cb465ce974b1b011/src/wallet/coincontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.cpp?ref=1c562043ba70c048e7385c77cb465ce974b1b011",
        "patch": "@@ -13,11 +13,11 @@ void CCoinControl::SetNull()\n     fAllowOtherInputs = false;\n     fAllowWatchOnly = false;\n     m_avoid_partial_spends = gArgs.GetBoolArg(\"-avoidpartialspends\", DEFAULT_AVOIDPARTIALSPENDS);\n+    m_dest_filter = DeriveDestinationFilter();\n     setSelected.clear();\n     m_feerate.reset();\n     fOverrideFeeRate = false;\n     m_confirm_target.reset();\n     m_signal_bip125_rbf.reset();\n     m_fee_mode = FeeEstimateMode::UNSET;\n }\n-"
      },
      {
        "sha": "e3a0836267bdeb26577bf9a3e955c447f662207f",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c562043ba70c048e7385c77cb465ce974b1b011/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c562043ba70c048e7385c77cb465ce974b1b011/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=1c562043ba70c048e7385c77cb465ce974b1b011",
        "patch": "@@ -34,6 +34,8 @@ class CCoinControl\n     boost::optional<bool> m_signal_bip125_rbf;\n     //! Avoid partial use of funds sent to a given address\n     bool m_avoid_partial_spends;\n+    //! Destination filter (allow all, or allow only clean, or allow only dirty outputs)\n+    DestinationFilter m_dest_filter;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n     FeeEstimateMode m_fee_mode;\n "
      },
      {
        "sha": "1e3f67b599035d048e0b9b25a9e490eab12f9e3e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c562043ba70c048e7385c77cb465ce974b1b011/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c562043ba70c048e7385c77cb465ce974b1b011/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1c562043ba70c048e7385c77cb465ce974b1b011",
        "patch": "@@ -4454,3 +4454,11 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     }\n     return groups;\n }\n+\n+DestinationFilter DeriveDestinationFilter(const CCoinControl* potential_coin_control)\n+{\n+    if (potential_coin_control) return potential_coin_control->m_dest_filter;\n+    return gArgs.GetBoolArg(\"-avoidreuse\", DEFAULT_AVOIDREUSE)\n+            ? DestinationFilter::DestinationOnlyClean\n+            : DestinationFilter::DestinationMixed;\n+}"
      },
      {
        "sha": "4ab1e70aa7e10847404cc2a501abcfac928d48d3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c562043ba70c048e7385c77cb465ce974b1b011/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c562043ba70c048e7385c77cb465ce974b1b011/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1c562043ba70c048e7385c77cb465ce974b1b011",
        "patch": "@@ -78,6 +78,8 @@ class CWalletTx;\n struct FeeCalculation;\n enum class FeeEstimateMode;\n \n+DestinationFilter DeriveDestinationFilter(const CCoinControl* potential_coin_control=nullptr);\n+\n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n {"
      }
    ]
  },
  {
    "sha": "2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjBlMjY0N2IwMmM4ZDAyZWY0MWIxN2I2ZDc0MTVhOTI4ZjJkM2Q0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T08:09:09Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T09:14:51Z"
      },
      "message": "wallet: add destination filter support to wallet",
      "tree": {
        "sha": "bf449c1a4d7ac02fd9ca46edca94c94a7f54c672",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf449c1a4d7ac02fd9ca46edca94c94a7f54c672"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlte1wsACgkQV692LbM1\nMyI4Hw//ZeFxr0qN2YFTjgbDViM01MYZs8/c4v8XVBlnKkRIi3VUor6dnA3gCor0\nawxPvFVFZS2eIOXEyL4MVzlbF0AZ6sdRfOIArNhK42g5lxGTZ25o4safD9TVoab0\nEf7Kh/KtuP95hTGJnTT9myyuOaubXqzHz4LsIYuVsTnTf3jNf+aPZF+xH4/9LTy8\natEAdzhnq4KO4+zHtVlppLwCF0ePQD5FId78/262SppN2FZ+tPJeRDgFV/Jc06QZ\nhaa12Og8URcGYVyscfmFan8ylmRtcCmM4zW8vhWHJkojb50KdBco8iB/exqXStk+\nLXgZG341QhzMfb2aXDF6940aTtZiD33F3mo4oKq2u3i9cP5CwKVDMYnO70X6KsPM\ngnQFsYMbEICIRHvpYkwEiMg7s2pOUHhIaeJlA/DL3PUW8GoVRqrSVqmdf8QMrPVT\nlPeV8xeZU9iNwCHYf7h3iyOEKPdBJxSPB+eEpGkicHqnF2F410UvWewpwP63qeXW\nJINZTwPuZUrlz1+8qoN6GsAzoJXRDFCCoH92FHNd5vhSTjejai21/g+eAKTnTPPK\ndMT0/5/VPxVWLzoIDHu98Bt84GaRofsvIoUp05Esd7dr5BQkGhWedVDgu9/V1K8t\n4W0uSlSHgkg9rvh9fj+0lXX4hOzXM8Iha5QxZblK562CJFKJK6c=\n=HP1l\n-----END PGP SIGNATURE-----",
        "payload": "tree bf449c1a4d7ac02fd9ca46edca94c94a7f54c672\nparent 1c562043ba70c048e7385c77cb465ce974b1b011\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532938149 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532942091 +0900\n\nwallet: add destination filter support to wallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c562043ba70c048e7385c77cb465ce974b1b011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c562043ba70c048e7385c77cb465ce974b1b011",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c562043ba70c048e7385c77cb465ce974b1b011"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 89,
      "deletions": 25
    },
    "files": [
      {
        "sha": "f6806eb5cc0b1c75cf6b076febd99150aaa85d54",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4",
        "patch": "@@ -40,6 +40,16 @@\n \n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n \n+inline DestinationFilter DestinationFilterFromValue(const UniValue& value)\n+{\n+    DestinationFilter dest_filter;\n+    if (value.isNull()) return DeriveDestinationFilter();\n+    if (!ParseDestinationFilter(value.get_str(), dest_filter)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"dest_filter must be one of 'mixed', 'clean', or 'dirty'\");\n+    }\n+    return dest_filter;\n+}\n+\n bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string& wallet_name)\n {\n     if (request.URI.substr(0, WALLET_ENDPOINT_BASE.size()) == WALLET_ENDPOINT_BASE) {\n@@ -464,7 +474,7 @@ static UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n \n static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue, std::string fromAccount)\n {\n-    CAmount curBalance = pwallet->GetBalance();\n+    CAmount curBalance = pwallet->GetBalance(ISMINE_SPENDABLE, 0, coin_control.m_dest_filter);\n \n     // Check amount\n     if (nValue <= 0)"
      },
      {
        "sha": "e5e4731aa12cc3040c8d73c423bb5f16e9dfffc0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 12,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4",
        "patch": "@@ -922,6 +922,35 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n     return success;\n }\n \n+void CWallet::SetDirtyState(const uint256& hash, unsigned int n, bool dirty)\n+{\n+    const CWalletTx* srctx = GetWalletTx(hash);\n+    if (!srctx) return;\n+\n+    CTxDestination dst;\n+    if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n+        if (::IsMine(*this, dst)) {\n+            if (dirty && !GetDestData(dst, \"dirty\", nullptr)) {\n+                AddDestData(dst, \"dirty\", \"p\"); // p for \"present\", opposite of absent (null)\n+            } else if (!dirty && GetDestData(dst, \"dirty\", nullptr)) {\n+                EraseDestData(dst, \"dirty\");\n+            }\n+        }\n+    }\n+}\n+\n+bool CWallet::IsDirty(const uint256& hash, unsigned int n) const\n+{\n+    const CWalletTx* srctx = GetWalletTx(hash);\n+    if (srctx) {\n+        CTxDestination dst;\n+        if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n+            return ::IsMine(*this, dst) && GetDestData(dst, \"dirty\", nullptr);\n+        }\n+    }\n+    return false;\n+}\n+\n bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n {\n     LOCK(cs_wallet);\n@@ -930,6 +959,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n \n     uint256 hash = wtxIn.GetHash();\n \n+    if (gArgs.GetBoolArg(\"-avoidreuse\", DEFAULT_AVOIDREUSE)) {\n+        // Mark used destinations as dirty\n+        for (const CTxIn& txin : wtxIn.tx->vin) {\n+            const COutPoint& op = txin.prevout;\n+            SetDirtyState(op.hash, op.n, true);\n+        }\n+    }\n+\n     // Inserts only if not already there, returns tx inserted or tx found\n     std::pair<std::map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(std::make_pair(hash, wtxIn));\n     CWalletTx& wtx = (*ret.first).second;\n@@ -1938,7 +1975,7 @@ CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const\n     return 0;\n }\n \n-CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter) const\n+CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter, DestinationFilter dest_filter) const\n {\n     if (pwallet == nullptr)\n         return 0;\n@@ -1949,14 +1986,8 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter\n \n     CAmount* cache = nullptr;\n     bool* cache_used = nullptr;\n-\n-    if (filter == ISMINE_SPENDABLE) {\n-        cache = &nAvailableCreditCached;\n-        cache_used = &fAvailableCreditCached;\n-    } else if (filter == ISMINE_WATCH_ONLY) {\n-        cache = &nAvailableWatchCreditCached;\n-        cache_used = &fAvailableWatchCreditCached;\n-    }\n+    if      (filter == ISMINE_SPENDABLE)  available_credit.Select(dest_filter, &cache_used, &cache);\n+    else if (filter == ISMINE_WATCH_ONLY) available_watch_credit.Select(dest_filter, &cache_used, &cache);\n \n     if (fUseCache && cache_used && *cache_used) {\n         return *cache;\n@@ -1966,7 +1997,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter\n     uint256 hashTx = GetHash();\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n-        if (!pwallet->IsSpent(hashTx, i))\n+        if (!pwallet->IsSpent(hashTx, i) && DestinationFilterApplies(dest_filter, pwallet->IsDirty(hashTx, i)))\n         {\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, filter);\n@@ -2110,7 +2141,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman\n  */\n \n \n-CAmount CWallet::GetBalance(const isminefilter& filter, const int min_depth) const\n+CAmount CWallet::GetBalance(const isminefilter& filter, const int min_depth, DestinationFilter dest_filter) const\n {\n     CAmount nTotal = 0;\n     {\n@@ -2119,7 +2150,7 @@ CAmount CWallet::GetBalance(const isminefilter& filter, const int min_depth) con\n         {\n             const CWalletTx* pcoin = &entry.second;\n             if (pcoin->IsTrusted() && pcoin->GetDepthInMainChain() >= min_depth) {\n-                nTotal += pcoin->GetAvailableCredit(true, filter);\n+                nTotal += pcoin->GetAvailableCredit(true, filter, dest_filter);\n             }\n         }\n     }\n@@ -2250,6 +2281,7 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n \n     vCoins.clear();\n     CAmount nTotal = 0;\n+    DestinationFilter dest_filter = DeriveDestinationFilter(coinControl);\n \n     for (const auto& entry : mapWallet)\n     {\n@@ -2330,6 +2362,10 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n                 continue;\n             }\n \n+            if (!DestinationFilterApplies(dest_filter, IsDirty(wtxid, i))) {\n+                continue;\n+            }\n+\n             bool solvable = IsSolvable(*this, pcoin->tx->vout[i].scriptPubKey);\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n "
      },
      {
        "sha": "2627c305c184785743968ce5a7106784e4c4fdfb",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 30,
        "deletions": 12,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4",
        "patch": "@@ -283,6 +283,25 @@ class CMerkleTx\n //Get the marginal bytes of spending the specified output\n int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* pwallet);\n \n+/**\n+ * A cached balance entry, for the three cases\n+ * (1) mixed clean and dirty outputs,\n+ * (2) clean outputs only,\n+ * (3) dirty outputs only.\n+ */\n+struct CachedBalance {\n+    bool valid[3]; ///< whether the cached value is applicable\n+    CAmount value[3];\n+    CachedBalance() : valid{false, false, false} {}\n+    inline void Select(DestinationFilter dest_filter, bool** valid_ptr, CAmount** value_ptr) const {\n+        *valid_ptr = const_cast<bool*>(&valid[dest_filter]);\n+        *value_ptr = const_cast<CAmount*>(&value[dest_filter]);\n+    }\n+    inline void Reset() {\n+        memset(valid, 0, sizeof(valid));\n+    }\n+};\n+\n /**\n  * A transaction with a bunch of additional info that only the owner cares about.\n  * It includes any unrecorded transactions needed to link it back to the block chain.\n@@ -346,21 +365,19 @@ class CWalletTx : public CMerkleTx\n     mutable bool fDebitCached;\n     mutable bool fCreditCached;\n     mutable bool fImmatureCreditCached;\n-    mutable bool fAvailableCreditCached;\n+    CachedBalance available_credit;\n+    CachedBalance available_watch_credit;\n     mutable bool fWatchDebitCached;\n     mutable bool fWatchCreditCached;\n     mutable bool fImmatureWatchCreditCached;\n-    mutable bool fAvailableWatchCreditCached;\n     mutable bool fChangeCached;\n     mutable bool fInMempool;\n     mutable CAmount nDebitCached;\n     mutable CAmount nCreditCached;\n     mutable CAmount nImmatureCreditCached;\n-    mutable CAmount nAvailableCreditCached;\n     mutable CAmount nWatchDebitCached;\n     mutable CAmount nWatchCreditCached;\n     mutable CAmount nImmatureWatchCreditCached;\n-    mutable CAmount nAvailableWatchCreditCached;\n     mutable CAmount nChangeCached;\n \n     CWalletTx(const CWallet* pwalletIn, CTransactionRef arg) : CMerkleTx(std::move(arg))\n@@ -381,23 +398,21 @@ class CWalletTx : public CMerkleTx\n         fDebitCached = false;\n         fCreditCached = false;\n         fImmatureCreditCached = false;\n-        fAvailableCreditCached = false;\n         fWatchDebitCached = false;\n         fWatchCreditCached = false;\n         fImmatureWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n         fChangeCached = false;\n         fInMempool = false;\n         nDebitCached = 0;\n         nCreditCached = 0;\n         nImmatureCreditCached = 0;\n-        nAvailableCreditCached = 0;\n         nWatchDebitCached = 0;\n         nWatchCreditCached = 0;\n-        nAvailableWatchCreditCached = 0;\n         nImmatureWatchCreditCached = 0;\n         nChangeCached = 0;\n         nOrderPos = -1;\n+        available_credit.Reset();\n+        available_watch_credit.Reset();\n     }\n \n     template<typename Stream>\n@@ -441,14 +456,14 @@ class CWalletTx : public CMerkleTx\n     void MarkDirty()\n     {\n         fCreditCached = false;\n-        fAvailableCreditCached = false;\n         fImmatureCreditCached = false;\n         fWatchDebitCached = false;\n         fWatchCreditCached = false;\n-        fAvailableWatchCreditCached = false;\n         fImmatureWatchCreditCached = false;\n         fDebitCached = false;\n         fChangeCached = false;\n+        available_credit.Reset();\n+        available_watch_credit.Reset();\n     }\n \n     void BindWallet(CWallet *pwalletIn)\n@@ -461,7 +476,7 @@ class CWalletTx : public CMerkleTx\n     CAmount GetDebit(const isminefilter& filter) const;\n     CAmount GetCredit(const isminefilter& filter) const;\n     CAmount GetImmatureCredit(bool fUseCache=true) const;\n-    CAmount GetAvailableCredit(bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const;\n+    CAmount GetAvailableCredit(bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE, DestinationFilter dest_filter=DeriveDestinationFilter()) const;\n     CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n     CAmount GetChange() const;\n \n@@ -864,6 +879,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n+    bool IsDirty(const uint256& hash, unsigned int n) const;\n+    void SetDirtyState(const uint256& hash, unsigned int n, bool dirty);\n+\n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -952,7 +970,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n-    CAmount GetBalance(const isminefilter& filter=ISMINE_SPENDABLE, const int min_depth=0) const;\n+    CAmount GetBalance(const isminefilter& filter=ISMINE_SPENDABLE, const int min_depth=0, DestinationFilter dest_filter=DeriveDestinationFilter()) const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;"
      }
    ]
  },
  {
    "sha": "1135a7d51cff9218326c3b2ebd21ed672b9ba9f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTM1YTdkNTFjZmY5MjE4MzI2YzNiMmViZDIxZWQ2NzJiOWJhOWYw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T08:25:30Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T09:14:51Z"
      },
      "message": "wallet/rpc: add dest_filter to getbalance command",
      "tree": {
        "sha": "5cc5cc5428a25124514558099874e5026dcfb70d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cc5cc5428a25124514558099874e5026dcfb70d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1135a7d51cff9218326c3b2ebd21ed672b9ba9f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlte1wsACgkQV692LbM1\nMyKwTA//TW+QdHJKgDoPRzyBQqHHH2s5mr9c3hu9GerVgzgbjWBG0a0ZKPQKZ0No\nPXU1vZ0BQ89RDex+WTWm1ytkWluTLLilLFExN3H6Ads8cFMMetWaK8M5A/zxpwRa\nWVUl1TS52/dkScJzQNTzopuK2Zc+/cWe/abb1jVtdX1VCKIOvx5k4R0bfeLiYq8i\nukGwGWkztm2MgivGdXNhrx8b019lqaD3t1YcG0NG3wjDNZZx5hga92kxfuu9wUjv\nzk3/LOPmmiK5lomsIJ4hxdoUdTBU8ZNFBk4OOHc6D6ThVuB0ifQ5YoyVTh8TEeaI\nJTDNB30pflbxMSeoW7NbNspNFSZq2DWzXR7AvvdKP1PVDw4hzOJMH8jtGO1P5EXU\nt0WeIGVW6PkA7f5eu5gVfPGY3biyPqr7hUpGoJ7hYO+YHSyLQBGZSLpmdx8WH8Qw\n9ZXWnrj0PTrXJqdNyIDYMa0Jz2GXDexJKVMmT7Oj2kP4KO5gSfZUSnr0v4IpsobI\nS5SzB0DchndeWD2nZkiNIH76Js6HYBLzY7Hgi//seRc6WnFr3xUXQ5vasbofbCnw\nFGkbkv0AUf6JBU5ztOMI0W65bvNdrJanKnmSMREP9GrKOURNaGpmgMS8KlHcAdzY\nv4MZC6dydE+sBRbcw5yfe4PkN1SVHVC+eP/+dJNdjX/Yd3ch918=\n=Dv2q\n-----END PGP SIGNATURE-----",
        "payload": "tree 5cc5cc5428a25124514558099874e5026dcfb70d\nparent 2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532939130 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532942091 +0900\n\nwallet/rpc: add dest_filter to getbalance command\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1135a7d51cff9218326c3b2ebd21ed672b9ba9f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1135a7d51cff9218326c3b2ebd21ed672b9ba9f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1135a7d51cff9218326c3b2ebd21ed672b9ba9f0/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0e2647b02c8d02ef41b17b6d7415a928f2d3d4"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 10,
      "deletions": 4
    },
    "files": [
      {
        "sha": "18d7c5ec4e6e5970479675b1dd20d4901fa7b991",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1135a7d51cff9218326c3b2ebd21ed672b9ba9f0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1135a7d51cff9218326c3b2ebd21ed672b9ba9f0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1135a7d51cff9218326c3b2ebd21ed672b9ba9f0",
        "patch": "@@ -871,10 +871,10 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || (request.params.size() > 3 ))\n+    if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n            (IsDeprecatedRPCEnabled(\"accounts\") ? std::string(\n-            \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n+            \"getbalance ( \\\"account\\\" minconf include_watchonly dest_filter )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n             \"The available balance is what the wallet considers currently spendable, and is\\n\"\n             \"thus affected by options which limit spendability such as -spendzeroconfchange.\\n\"\n@@ -906,6 +906,10 @@ static UniValue getbalance(const JSONRPCRequest& request)\n             \"1. (dummy)           (string, optional) Remains for backward compatibility. Must be excluded or set to \\\"*\\\".\\n\"\n             \"2. minconf           (numeric, optional, default=0) Only include transactions confirmed at least this many times.\\n\")) +\n             \"3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')\\n\"\n+            \"4. dest_filter       (string, optional) Destination filter (only applicable if -avoidreuse is enabled), one of 'mixed', 'clean', or 'dirty'\\n\"\n+            \"                     'mixed' will show balance for both clean and dirty outputs (default if -avoidreuse=false)\\n\"\n+            \"                     'clean' will show balance for clean outputs only (default if -avoidreuse=true)\\n\"\n+            \"                     'dirty' will show balance for dirty outputs only\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n@@ -939,6 +943,8 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         filter = filter | ISMINE_WATCH_ONLY;\n     }\n \n+    DestinationFilter dest_filter = DestinationFilterFromValue(request.params[3]);\n+\n     if (!account_value.isNull()) {\n \n         const std::string& account_param = account_value.get_str();\n@@ -951,7 +957,7 @@ static UniValue getbalance(const JSONRPCRequest& request)\n         }\n     }\n \n-    return ValueFromAmount(pwallet->GetBalance(filter, min_depth));\n+    return ValueFromAmount(pwallet->GetBalance(filter, min_depth, dest_filter));\n }\n \n static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n@@ -4791,7 +4797,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n     { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n-    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account|dummy\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account|dummy\",\"minconf\",\"include_watchonly\",\"dest_filter\"} },\n     { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"label|account\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n     { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },"
      }
    ]
  },
  {
    "sha": "51e804bb3f1d11b900b3c1bf6843a011a0c13589",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWU4MDRiYjNmMWQxMWI5MDBiM2MxYmY2ODQzYTAxMWEwYzEzNTg5",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T08:14:39Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T09:20:07Z"
      },
      "message": "wallet/rpc: add dest_filter to sendtoaddress",
      "tree": {
        "sha": "9b258f0ffbac4102265d98adcb9f478ffa60420e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b258f0ffbac4102265d98adcb9f478ffa60420e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51e804bb3f1d11b900b3c1bf6843a011a0c13589",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlte2EcACgkQV692LbM1\nMyKJZQ//Uo4BCWpgo8jl+R55Jq8OI9w6dSzGDVzoI0yZ/yKSai6QDFjAOCQqOfpv\nH0mYD9ODNYepfGyg5mH1dGGCvXaKKLGBF/BHcJN5yRIafjfbNu1uPxCfNkqNOjRc\n8J9KqnKRrJodBmnZKmAD6ios+yBFXH1JyrkyJQvQhIDzhUrazpZZq8DVTTbTvmhP\nsZGmCQnOawLzXIcPwkjnKK2ulbKB1J+xCqjf6hS7+wDsbB/kjUT4+sKYxNkvmjgV\nINENcmuy09nqcmkoRRROaFm1sQfjqgzpBwAErckGtR9gLpHIvoBAkcYCcGnVze+F\nNffJ3N4OTPaE8HKp9Nz3O3TyigXRX/TZfAiRoawyXYzHXTZS44TqBahCVKyXunf0\nrh0anbIiYvdV8L36MWpcmcAEAwL7A4I/e/GKoqDDHpMfo6ySGG7InOu6I3AMj2/X\nrlalvQ0UYl+x+dBS7HXnoo6fSxMoYgwB7/DssjgbXxf4dFtFl2QlJqr9IPn7zyvf\nlIwEMzm75lQq+IEe40ENplz11NoZ05xQv6yehbpInda/ZRlxGRkFGXj2fF5Rc1YW\ncpAtdCdx998uDKLEHhPN4PByeHE60d8kSTaD3fKegHHlzhdzVoszIfw7/qW5djRj\nBEe6/F3RL7NZIJc4AE4884pDQdrOoQEE5sWL0dxZCYE6ZVJAdyI=\n=ovQK\n-----END PGP SIGNATURE-----",
        "payload": "tree 9b258f0ffbac4102265d98adcb9f478ffa60420e\nparent 1135a7d51cff9218326c3b2ebd21ed672b9ba9f0\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532938479 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532942407 +0900\n\nwallet/rpc: add dest_filter to sendtoaddress\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51e804bb3f1d11b900b3c1bf6843a011a0c13589",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51e804bb3f1d11b900b3c1bf6843a011a0c13589",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51e804bb3f1d11b900b3c1bf6843a011a0c13589/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1135a7d51cff9218326c3b2ebd21ed672b9ba9f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1135a7d51cff9218326c3b2ebd21ed672b9ba9f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1135a7d51cff9218326c3b2ebd21ed672b9ba9f0"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "21347ba06caffa1957a464453ca64264b467b32d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51e804bb3f1d11b900b3c1bf6843a011a0c13589/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51e804bb3f1d11b900b3c1bf6843a011a0c13589/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=51e804bb3f1d11b900b3c1bf6843a011a0c13589",
        "patch": "@@ -521,9 +521,9 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 8)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 9)\n         throw std::runtime_error(\n-            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount replaceable conf_target \\\"estimate_mode\\\")\\n\"\n+            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount replaceable conf_target \\\"estimate_mode\\\" dest_filter )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase(pwallet) +\n             \"\\nArguments:\\n\"\n@@ -542,12 +542,17 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"       \\\"UNSET\\\"\\n\"\n             \"       \\\"ECONOMICAL\\\"\\n\"\n             \"       \\\"CONSERVATIVE\\\"\\n\"\n+            \"9. dest_filter              (string, optional) Destination filter (only applicable if -avoidreuse is enabled), one of 'mixed', 'clean', or 'dirty'\\n\"\n+            \"                            'mixed' will include both clean and dirty outputs (default if -avoidreuse=false)\\n\"\n+            \"                            'clean' will include clean outputs only (default if -avoidreuse=true)\\n\"\n+            \"                            'dirty' will include dirty outputs only\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1\")\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"donation\\\" \\\"seans outpost\\\"\")\n             + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"\\\" \\\"\\\" true\")\n+            + HelpExampleCli(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\" 0.1 \\\"\\\" \\\"\\\" false true 0 UNSET dirty\")\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n@@ -594,6 +599,7 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n         }\n     }\n \n+    if (!request.params[8].isNull()) coin_control.m_dest_filter = DestinationFilterFromValue(request.params[8]);\n \n     EnsureWalletIsUnlocked(pwallet);\n \n@@ -4821,7 +4827,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"loadwallet\",                       &loadwallet,                    {\"filename\"} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n     { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount|dummy\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\",\"dest_filter\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },"
      }
    ]
  },
  {
    "sha": "bcb181caead34eeb0cdf349b960787c92ed02aed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2IxODFjYWVhZDM0ZWViMGNkZjM0OWI5NjA3ODdjOTJlZDAyYWVk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T08:19:03Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-07-30T09:20:07Z"
      },
      "message": "test: add test for avoidreuse feature",
      "tree": {
        "sha": "7913edab3e778535ffadb3f5071b085c645584f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7913edab3e778535ffadb3f5071b085c645584f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcb181caead34eeb0cdf349b960787c92ed02aed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlte2EcACgkQV692LbM1\nMyJMtRAAmyv8KL3WNQW2w03+dZ+oE8KfWFsFVDAWAG+HsgRP8yekRoyUb4Oq/Cxc\n9k7484CHFPXYeRkGf7RmpfZR0YDRh3/9AbE22IQ2QUkqvqdN/BqMT1G6Kk7x7614\n4gw7/gvuoFIQrwY3WjxhSNYiICqQwzstvJcZfLyALPhh1cTMenW8b+CHugYUd1Bd\nhzfRfTtH4YI7ym0fCNrSVydaqYt5jfuwdbI8VbY098YaHG/pOlYaW2w/XC8+cn1o\nYBaT617xrifSFFYQo582ON/Z4IMTWHSMlkhbQqJHq3HRYHlK5meAtsP3NVyaJXtm\nP2bSYCwykgfYGLpNytIIkQyd86oUNsJxGiw+jBGrDRMIGiZcbEFk57ERo1110+vY\nCOwG6uR0Ac1s0JT3oKck3/wWePCieEGjQGO86q3VhKXhDaSjucQIVMIzwOqaKORN\nnkYAGPZA1xWW0d2s4iurlGVMi9hjz6EzYDwaNUweBLSr2+4A5K7Q8RFDlAluv48v\nn7A80cyVXd9pVfcrBN6SitgGJN6sEytEXnnhsI90bD6ygmetnvktozsPnP4E4RLB\nDJDUJX1n4vwQiJefKosIpP7AYl5NDsTsmd48xjdqBxo/2ZbKOIBRV+c88iQlsaoH\nrUiS5uAdD8ri4RiYQwEkmTSNF5FIkRoyOWKKAZxz+byXJVamrM0=\n=i7He\n-----END PGP SIGNATURE-----",
        "payload": "tree 7913edab3e778535ffadb3f5071b085c645584f1\nparent 51e804bb3f1d11b900b3c1bf6843a011a0c13589\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532938743 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1532942407 +0900\n\ntest: add test for avoidreuse feature\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcb181caead34eeb0cdf349b960787c92ed02aed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcb181caead34eeb0cdf349b960787c92ed02aed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcb181caead34eeb0cdf349b960787c92ed02aed/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51e804bb3f1d11b900b3c1bf6843a011a0c13589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51e804bb3f1d11b900b3c1bf6843a011a0c13589",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51e804bb3f1d11b900b3c1bf6843a011a0c13589"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 102,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bc09fc19b222d71783b05194e12600b90ede799c",
        "filename": "test/functional/feature_avoidreuse.py",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcb181caead34eeb0cdf349b960787c92ed02aed/test/functional/feature_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcb181caead34eeb0cdf349b960787c92ed02aed/test/functional/feature_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_avoidreuse.py?ref=bcb181caead34eeb0cdf349b960787c92ed02aed",
        "patch": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the -avoidreuse config option.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error\n+\n+# TODO: Copied from wallet_groups.py -- should perhaps move into util.py\n+def assert_approx(v, vexp, vspan=0.00001):\n+    if v < vexp - vspan:\n+        raise AssertionError(\"%s < [%s..%s]\" % (str(v), str(vexp - vspan), str(vexp + vspan)))\n+    if v > vexp + vspan:\n+        raise AssertionError(\"%s > [%s..%s]\" % (str(v), str(vexp - vspan), str(vexp + vspan)))\n+\n+class AvoidReuseTest(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 2\n+        self.extra_args = [[], ['-avoidreuse=1']]\n+\n+    def reset_balance(self, node, discardaddr):\n+        '''\n+        Throw away all owned coins by the node so it gets a balance of 0.\n+        '''\n+        balance = node.getbalance(dest_filter='mixed')\n+        if balance > 0.5:\n+            node.sendtoaddress(address=discardaddr, amount=balance, subtractfeefromamount=True, dest_filter='mixed')\n+\n+    def run_test(self):\n+        '''\n+        Set up initial chain and run tests defined below\n+        '''\n+\n+        self.nodes[0].generate(110)\n+        self.sync_all()\n+        self.reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_fund_send_fund_send()\n+        self.reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_fund_send_fund_senddirty()\n+\n+    def test_fund_send_fund_send(self):\n+        '''\n+        Test the simple case where [1] generates a new address A, then\n+        [0] sends 10 BTC to A.\n+        [1] spends 5 BTC from A. (leaving roughly 4 BTC useable)\n+        [0] sends 10 BTC to A again.\n+        [1] tries to spend 10 BTC (fails; dirty).\n+        [1] tries to spend 4 BTC (succeeds; change address sufficient)\n+        '''\n+\n+        fundaddr = self.nodes[1].getnewaddress()\n+        retaddr = self.nodes[0].getnewaddress()\n+\n+        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        self.nodes[1].sendtoaddress(retaddr, 5)\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+\n+        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+\n+        # node 1 should now have a balance of 5 (no dirty) or 15 (including dirty)\n+        assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n+        assert_approx(self.nodes[1].getbalance(dest_filter='mixed'), 15, 0.001)\n+\n+        assert_raises_rpc_error(-6, \"Insufficient funds\", self.nodes[1].sendtoaddress, retaddr, 10)\n+\n+        self.nodes[1].sendtoaddress(retaddr, 4)\n+\n+    def test_fund_send_fund_senddirty(self):\n+        '''\n+        Test the same as above, except send the 10 BTC with the allow_dirty flag\n+        set. This means the 10 BTC send should succeed, where it fails above.\n+        '''\n+\n+        fundaddr = self.nodes[1].getnewaddress()\n+        retaddr = self.nodes[0].getnewaddress()\n+\n+        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        self.nodes[1].sendtoaddress(retaddr, 5)\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+\n+        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        self.sync_all()\n+        self.nodes[0].generate(1)\n+\n+        self.nodes[1].sendtoaddress(address=retaddr, amount=10, dest_filter='mixed')\n+\n+if __name__ == '__main__':\n+    AvoidReuseTest().main()"
      },
      {
        "sha": "5caa4df80422e6dab3bc4a5780d15a8a891660da",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcb181caead34eeb0cdf349b960787c92ed02aed/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcb181caead34eeb0cdf349b960787c92ed02aed/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=bcb181caead34eeb0cdf349b960787c92ed02aed",
        "patch": "@@ -94,6 +94,7 @@\n     'rpc_getchaintips.py',\n     'interface_rest.py',\n     'mempool_spend_coinbase.py',\n+    'feature_avoidreuse.py',\n     'mempool_reorg.py',\n     'mempool_persist.py',\n     'wallet_multiwallet.py',"
      }
    ]
  }
]