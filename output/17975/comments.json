[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/576778692",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#issuecomment-576778692",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975",
    "id": 576778692,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3Njc3ODY5Mg==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-21T17:01:33Z",
    "updated_at": "2020-01-21T17:01:33Z",
    "author_association": "MEMBER",
    "body": "@sanket1729 @apoelstra may be interested too",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/576778692/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577095603",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#issuecomment-577095603",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975",
    "id": 577095603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzA5NTYwMw==",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-22T09:41:13Z",
    "updated_at": "2020-01-22T09:41:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "This looks great. To get the concept ACK I'm wondering what the arguments against are. I think (I may be mistaken) these are broadly long term motivations and sketched out roadmap-like issues.\r\n\r\n1) Does Bitcoin Core *need* to be able to recognize Miniscript in the future? Are the future upsides sufficiently material to introduce it? Presumably Miniscript could always be translated to Script externally to Core at little cost?\r\n\r\n2) Is this a stepping stone towards greater support for Miniscript (and possibly a policy language too) in Core? What impact does this have on the use and ongoing development of external libraries like the [Rust Miniscript library](https://github.com/apoelstra/rust-miniscript)?\r\n\r\n3) I'm not convinced of the rationale \"entry point for developers\" as a motivation. Does Miniscript support in the test framework provide any material assistance/assurance to external wallet developers? \r\n\r\nI'm excited by the potential of Miniscript and look forward to following future work on this.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577095603/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577185437",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#issuecomment-577185437",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975",
    "id": 577185437,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzE4NTQzNw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-22T13:38:13Z",
    "updated_at": "2020-01-22T13:38:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jachiang\r\n\r\nVery nice to see another Miniscript implementation! I love Miniscript! :)\r\n\r\nYou might want to check your Python implementation for the following issues I've reported in the C++ and Rust implementations:\r\n* [Issues reported in the C++ implementation (7 of which I would consider bugs)](https://github.com/sipa/miniscript/issues?utf8=%E2%9C%93&q=is%3Aissue+author%3Apracticalswift+)\r\n* [Issues reported in the Rust implementation (8 of which I would consider bugs)](https://github.com/apoelstra/rust-miniscript/issues?utf8=%E2%9C%93&q=is%3Aissue+author%3Apracticalswift+)\r\n\r\nThe bugs are somewhat overlapping across implementations.\r\n\r\nAs you can see six of the seven bugs in the Rust implementation have been resolved, and hopefully the eight bugs in the C++ implementation will be resolved soon :)\r\n\r\nOf the eight bugs in the C++ implementation only one bug affects the initial Bitcoin Core Miniscript PR #16800 (\"Basic Miniscript support in output descriptors\"). That is a heap out-of-bounds read in `Node::CalcOps` (called indirectly from `miniscript::FromScript`) which I reported in https://github.com/bitcoin/bitcoin/pull/16800#issuecomment-530808234 and suggested a solution for in https://github.com/sipa/miniscript/pull/18 (\"Avoid heap out-of-bounds read in Node::CalcOps (test case: OP_0 OP_2 OP_EQUAL) and assertion failure in ComputeType (test case: OP_0 OP_0 OP_EQUAL)\").",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/577185437/reactions",
      "total_count": 4,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580730613",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#issuecomment-580730613",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975",
    "id": 580730613,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDczMDYxMw==",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-01-31T13:21:21Z",
    "updated_at": "2020-01-31T13:21:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK. Moving these high level questions to a RFC (#18040) so as not to hold up review of the details of this PR. https://github.com/bitcoin/bitcoin/pull/17975#issuecomment-577095603",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580730613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/582419401",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#issuecomment-582419401",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975",
    "id": 582419401,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MjQxOTQwMQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-02-05T13:57:37Z",
    "updated_at": "2020-02-05T13:57:37Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/582419401/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599064494",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#issuecomment-599064494",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975",
    "id": 599064494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU5OTA2NDQ5NA==",
    "user": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?u=01464992780ae2798a0e81c78b5503cb81fe8b9b&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-14T13:56:12Z",
    "updated_at": "2020-03-14T13:56:12Z",
    "author_association": "CONTRIBUTOR",
    "body": "Apologies for the delay updating this PR. \r\n\r\nf8a30b4c7 includes rebase and changes suggested by reviewers so far. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599064494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894352293",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#issuecomment-894352293",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975",
    "id": 894352293,
    "node_id": "IC_kwDOABII5841Trul",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-06T15:51:38Z",
    "updated_at": "2021-08-06T15:52:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another option here which might not be too bad in the scheme of things would be to check in a WASM blob that is gitian built of e.g. rust miniscript, and then call it using a wasm runtime https://github.com/wasmerio/wasmer-python\r\n\r\nthe main benefit being we don't have to check in yet another implementation of miniscript to maintain as miniscript evolves, we can use the rust or c++ one today, and when the C++ becomes merged & available as an RPC we can drop it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894352293/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894657750",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#issuecomment-894657750",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17975",
    "id": 894657750,
    "node_id": "IC_kwDOABII5841U2TW",
    "user": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?u=01464992780ae2798a0e81c78b5503cb81fe8b9b&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-07T13:51:47Z",
    "updated_at": "2021-08-07T13:52:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "> the main benefit being we don't have to check in yet another implementation of miniscript to maintain as miniscript evolves, we can use the rust or c++ one today, and when the C++ becomes merged & available as an RPC we can drop it.\r\n\r\nIn the absence of a formal, (mechanizable) specification of Miniscript (MS), separate implementations have higher chances of finding bugs or problems than a single, canonical one. I think this should be a goal of the test-framework. Having said that, I believe the biggest challenge here is the lack of a formal specification of MS and by extension, Script itself, without which, the correctness of the MS type-system is impossible to verify. One must assume the MS authors are working on this.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894657750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369175249",
    "pull_request_review_id": 346103997,
    "id": 369175249,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3NTI0OQ==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_i_sat, self._or_i_dsat,\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_y.p.f and (child_x.p.f or child_z.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        self._andor_sat, self._andor_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if Node._is_wrapper(child_x) else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._a_sat, self._a_dsat,\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if Node._is_wrapper(child_x) else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._s_sat, self._s_dsat,\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if Node._is_wrapper(child_x) else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._c_sat, self._c_dsat,\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if Node._is_wrapper(child_x) else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._t_sat, self._t_dsat,\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert(child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if Node._is_wrapper(child_x) else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._d_sat, self._d_dsat,\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if Node._is_wrapper(child_x) else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._v_sat, self._v_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert(child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if Node._is_wrapper(child_x) else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._j_sat, self._j_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"n\" if Node._is_wrapper(child_x) else \"n:\"\n+        self._construct(NodeType.WRAP_N, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._n_sat, self._n_dsat,\n+                        child_x._script+[OP_0NOTEQUAL], tag+child_x.desc)\n+        return self\n+\n+    def construct_l(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"l\" if Node._is_wrapper(child_x) else \"l:\"\n+        script = [OP_IF, 0, OP_ELSE]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_L, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._l_sat, self._l_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_u(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"u\" if Node._is_wrapper(child_x) else \"u:\"\n+        script = [OP_IF]+child_x._script+[OP_ELSE, 0, OP_ENDIF]\n+        self._construct(NodeType.WRAP_U, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._u_sat, self._u_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_thresh(self, k, children_n):\n+        n = len(children_n)\n+        assert n > k > 1\n+        child_is_z_count = 0\n+        child_is_o_count = 0\n+        child_is_s_count = 0\n+        child_is_e = True\n+        child_is_m = True\n+        for idx, child in enumerate(children_n):\n+            assert child.p.d and child.p.u\n+            child_is_z_count += 1 if child.p.z else 0\n+            child_is_o_count += 1 if child.p.o else 0\n+            child_is_s_count += 1 if child.p.s else 0\n+            child_is_e += child_is_e and child.p.e\n+            child_is_m += child_is_m and child.p.m",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 1301,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "dgpv",
      "id": 43240089,
      "node_id": "MDQ6VXNlcjQzMjQwMDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgpv",
      "html_url": "https://github.com/dgpv",
      "followers_url": "https://api.github.com/users/dgpv/followers",
      "following_url": "https://api.github.com/users/dgpv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgpv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgpv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
      "organizations_url": "https://api.github.com/users/dgpv/orgs",
      "repos_url": "https://api.github.com/users/dgpv/repos",
      "events_url": "https://api.github.com/users/dgpv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgpv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "should be `=` rather than `+=` in two lines above, otherwise `child_is_e` will be converted to int and will always be `>= 1`",
    "created_at": "2020-01-21T18:41:15Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369175249",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369175249"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369175249"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369175249/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1301,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369181782",
    "pull_request_review_id": 346112175,
    "id": 369181782,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE4MTc4Mg==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_i_sat, self._or_i_dsat,\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_y.p.f and (child_x.p.f or child_z.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        self._andor_sat, self._andor_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if Node._is_wrapper(child_x) else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._a_sat, self._a_dsat,\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if Node._is_wrapper(child_x) else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._s_sat, self._s_dsat,\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if Node._is_wrapper(child_x) else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._c_sat, self._c_dsat,\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if Node._is_wrapper(child_x) else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._t_sat, self._t_dsat,\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert(child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if Node._is_wrapper(child_x) else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._d_sat, self._d_dsat,\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if Node._is_wrapper(child_x) else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._v_sat, self._v_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert(child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if Node._is_wrapper(child_x) else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._j_sat, self._j_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"n\" if Node._is_wrapper(child_x) else \"n:\"\n+        self._construct(NodeType.WRAP_N, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._n_sat, self._n_dsat,\n+                        child_x._script+[OP_0NOTEQUAL], tag+child_x.desc)\n+        return self\n+\n+    def construct_l(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"l\" if Node._is_wrapper(child_x) else \"l:\"\n+        script = [OP_IF, 0, OP_ELSE]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_L, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._l_sat, self._l_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_u(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"u\" if Node._is_wrapper(child_x) else \"u:\"\n+        script = [OP_IF]+child_x._script+[OP_ELSE, 0, OP_ENDIF]\n+        self._construct(NodeType.WRAP_U, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._u_sat, self._u_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_thresh(self, k, children_n):\n+        n = len(children_n)\n+        assert n > k > 1\n+        child_is_z_count = 0\n+        child_is_o_count = 0\n+        child_is_s_count = 0\n+        child_is_e = True\n+        child_is_m = True\n+        for idx, child in enumerate(children_n):\n+            assert child.p.d and child.p.u\n+            child_is_z_count += 1 if child.p.z else 0\n+            child_is_o_count += 1 if child.p.o else 0\n+            child_is_s_count += 1 if child.p.s else 0\n+            child_is_e += child_is_e and child.p.e\n+            child_is_m += child_is_m and child.p.m\n+            if idx == 0:\n+                is_B = child.p.B\n+            else:\n+                is_B = is_B and child.p.W\n+        prop_str = \"Wdu\" if not is_B else \"Bdu\"\n+        if child_is_z_count == n:\n+            prop_str += \"z\"\n+        elif (child_is_z_count == n-1) and (child_is_o_count == 1):\n+            prop_str += \"o\"\n+        if child_is_e and (child_is_s_count is n):\n+            prop_str += \"e\"\n+        if child_is_e and child_is_m and child_is_s_count >= (n-k):\n+            prop_str += \"m\"\n+        if child_is_s_count >= (n-k+1):\n+            prop_str += \"s\"\n+        script = []\n+        script.extend(children_n[0]._script)\n+        for child in children_n[1:]:\n+            script.extend(child._script+[OP_ADD])\n+        script.extend([k] + [OP_EQUAL])\n+        self._k = k\n+\n+        desc = \"thresh(\"+str(k)+\",\"\n+        for idx, child in enumerate(children_n):\n+            desc += child.desc\n+            desc += \",\" if idx != (n-1) else \")\"\n+\n+        self._construct(NodeType.THRESH, Property().from_string(prop_str),\n+                        children_n,\n+                        self._thresh_sat, self._thresh_dsat,\n+                        script, desc\n+                        )\n+        return self\n+\n+    def _construct(self,\n+                   node_type, node_prop,\n+                   children,\n+                   sat, dsat,\n+                   script, desc):\n+        self.t = node_type\n+        self.p = node_prop\n+        self.children = children\n+        self._sat = sat\n+        self._dsat = dsat\n+        self.sat = self._lift_sat()\n+        self.dsat = self._lift_dsat()\n+        self._sat_ncan = self._lift_sat_ncan()\n+        self._dsat_ncan = self._lift_dsat_ncan()\n+        self._script = script\n+        self.desc = desc\n+\n+    # sat/dsat methods for terminal node types:\n+    def _just_1_sat(self):\n+        return [[]]\n+\n+    def _just_1_dsat(self):\n+        return [[]]\n+\n+    def _just_0_sat(self):\n+        return [[]]\n+\n+    def _just_0_dsat(self):\n+        return [[]]\n+\n+    def _pk_sat(self):\n+        # Returns (SIGNATURE, 33B_PK) tuple.\n+        return [[(SatType.SIGNATURE, self._pk[0])]]\n+\n+    def _pk_dsat(self):\n+        return [[(SatType.DATA, b'')]]\n+\n+    def _pk_h_sat(self):\n+        # Returns (SIGNATURE, 32B_PK_HASH) tuple.\n+        return [[(SatType.SIGNATURE, self._pk_h),\n+                 (SatType.KEY_AND_HASH160_PREIMAGE, self._pk_h)]]\n+\n+    def _pk_h_dsat(self):\n+        return [[(SatType.DATA, b''),\n+                (SatType.KEY_AND_HASH160_PREIMAGE, self._pk_h)]]\n+\n+    def _older_sat(self):\n+        return [[(SatType.OLDER, self._delay)]]\n+\n+    def _older_dsat(self):\n+        return [[]]\n+\n+    def _after_sat(self):\n+        return [[(SatType.AFTER, self._time)]]\n+\n+    def _after_dsat(self):\n+        return [[]]\n+\n+    def _sha256_sat(self):\n+        return [[(SatType.SHA256_PREIMAGE, self._sha256)]]\n+\n+    def _sha256_dsat(self):\n+        return [[(SatType.DATA, bytes(32))]]\n+\n+    def _hash256_sat(self):\n+        return [[(SatType.HASH256_PREIMAGE, self._hash256)]]\n+\n+    def _hash256_dsat(self):\n+        return [[(SatType.DATA, bytes(32))]]\n+\n+    def _ripemd160_sat(self):\n+        return [[(SatType.RIPEMD160_PREIMAGE, self._ripemd160)]]\n+\n+    def _ripemd160_dsat(self):\n+        return [[(SatType.DATA, bytes(32))]]\n+\n+    def _hash160_sat(self):\n+        return [[(SatType.HASH160_PREIMAGE, self._hash160)]]\n+\n+    def _hash160_dsat(self):\n+        return [[(SatType.DATA, bytes(32))]]\n+\n+    def _thresh_m_sat(self):\n+        thresh_m_sat_ls = []\n+        n = len(self._pk_n)\n+        for i in range(2**n):\n+            if bin(i).count(\"1\") == self._k:\n+                sat = [(SatType.DATA, b'')]\n+                for j in range(n):\n+                    if ((1 << j) & i) != 0:\n+                        sat.append((SatType.SIGNATURE, self._pk_n[j]))\n+                thresh_m_sat_ls.append(sat)\n+        return thresh_m_sat_ls\n+\n+    def _thresh_m_dsat(self):\n+        return [[(SatType.DATA, b'')]*(self._k+1)]\n+\n+    # sat/dsat methods for node types with children:\n+        # sat must return list of possible satisfying witnesses.\n+        # dsat must return (unique) non-satisfying witness if available.\n+\n+    # child_sat_set: [child_x_sat, child_y_dsat, ...]\n+    # dsat child_dsat_set: [child_x_dsat, child_y_dsat, ...]\n+\n+    def _and_v_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[1]+child_sat_set[0]]\n+\n+    def _and_v_dsat(self, child_sat_set, child_dsat_set):\n+        return [[]]\n+\n+    def _and_b_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[1]+child_sat_set[0]]\n+\n+    def _and_b_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[1]+child_dsat_set[0]]\n+\n+    def _and_n_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[1]+child_sat_set[0]]\n+\n+    def _and_n_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _or_b_sat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[1]+child_sat_set[0],\n+                child_sat_set[1]+child_dsat_set[0]]\n+\n+    def _or_b_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[1]+child_dsat_set[0]]\n+\n+    def _or_d_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0],\n+                child_sat_set[1]+child_dsat_set[0]]\n+\n+    def _or_d_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[1]+child_dsat_set[0]]\n+\n+    def _or_c_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0],\n+                child_sat_set[1]+child_dsat_set[0]]\n+\n+    def _or_c_dsat(self, child_sat_set, child_dsat_set):\n+        return [[]]\n+\n+    def _or_i_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]+[(SatType.DATA, b'\\x01')],\n+                child_sat_set[1]+[(SatType.DATA, b'')]]\n+\n+    def _or_i_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'\\x01')]+child_dsat_set[1] + [\n+                (SatType.DATA, b'')]]\n+\n+    def _andor_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[1]+child_sat_set[0],\n+                child_sat_set[2]+child_dsat_set[0]]\n+\n+    def _andor_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[2]+child_dsat_set[0]]\n+\n+    def _a_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _a_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _s_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _s_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _c_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _c_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _t_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _t_dsat(self, child_sat_set, child_dsat_set):\n+        return [[]]\n+\n+    def _d_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]+[(SatType.DATA, b'\\x01')]]\n+\n+    def _d_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'')]]\n+\n+    def _v_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _v_dsat(self, child_sat_set, child_dsat_set):\n+        return [[]]\n+\n+    def _j_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _j_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'')]]\n+\n+    def _n_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _n_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _l_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]+[(SatType.DATA, b'')]]\n+\n+    def _l_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'\\x01')]]\n+\n+    def _u_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]+[(SatType.DATA, b'\\x01')]]\n+\n+    def _u_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'')]]\n+\n+    def _thresh_sat(self, child_sat_set, child_dsat_set):\n+        thresh_sat_ls = []\n+        n = len(self.children)\n+        for i in range(2**n):\n+            if bin(i).co",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 1697,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "dgpv",
      "id": 43240089,
      "node_id": "MDQ6VXNlcjQzMjQwMDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgpv",
      "html_url": "https://github.com/dgpv",
      "followers_url": "https://api.github.com/users/dgpv/followers",
      "following_url": "https://api.github.com/users/dgpv/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgpv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgpv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
      "organizations_url": "https://api.github.com/users/dgpv/orgs",
      "repos_url": "https://api.github.com/users/dgpv/repos",
      "events_url": "https://api.github.com/users/dgpv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgpv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why not `child.t.name.startswith('WRAP_')` ?",
    "created_at": "2020-01-21T18:54:09Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369181782",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369181782"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369181782"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369181782/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1697,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369203105",
    "pull_request_review_id": 346139623,
    "id": 369203105,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwMzEwNQ==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_i_sat, self._or_i_dsat,\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_y.p.f and (child_x.p.f or child_z.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        self._andor_sat, self._andor_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if Node._is_wrapper(child_x) else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._a_sat, self._a_dsat,\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if Node._is_wrapper(child_x) else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._s_sat, self._s_dsat,\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if Node._is_wrapper(child_x) else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._c_sat, self._c_dsat,\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if Node._is_wrapper(child_x) else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._t_sat, self._t_dsat,\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert(child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if Node._is_wrapper(child_x) else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._d_sat, self._d_dsat,\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if Node._is_wrapper(child_x) else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._v_sat, self._v_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert(child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if Node._is_wrapper(child_x) else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._j_sat, self._j_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"n\" if Node._is_wrapper(child_x) else \"n:\"\n+        self._construct(NodeType.WRAP_N, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._n_sat, self._n_dsat,\n+                        child_x._script+[OP_0NOTEQUAL], tag+child_x.desc)\n+        return self\n+\n+    def construct_l(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"l\" if Node._is_wrapper(child_x) else \"l:\"\n+        script = [OP_IF, 0, OP_ELSE]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_L, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._l_sat, self._l_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_u(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"u\" if Node._is_wrapper(child_x) else \"u:\"\n+        script = [OP_IF]+child_x._script+[OP_ELSE, 0, OP_ENDIF]\n+        self._construct(NodeType.WRAP_U, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._u_sat, self._u_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_thresh(self, k, children_n):\n+        n = len(children_n)\n+        assert n > k > 1\n+        child_is_z_count = 0\n+        child_is_o_count = 0\n+        child_is_s_count = 0\n+        child_is_e = True\n+        child_is_m = True\n+        for idx, child in enumerate(children_n):\n+            assert child.p.d and child.p.u\n+            child_is_z_count += 1 if child.p.z else 0\n+            child_is_o_count += 1 if child.p.o else 0\n+            child_is_s_count += 1 if child.p.s else 0\n+            child_is_e += child_is_e and child.p.e\n+            child_is_m += child_is_m and child.p.m\n+            if idx == 0:\n+                is_B = child.p.B\n+            else:\n+                is_B = is_B and child.p.W\n+        prop_str = \"Wdu\" if not is_B else \"Bdu\"\n+        if child_is_z_count == n:\n+            prop_str += \"z\"\n+        elif (child_is_z_count == n-1) and (child_is_o_count == 1):\n+            prop_str += \"o\"\n+        if child_is_e and (child_is_s_count is n):\n+            prop_str += \"e\"\n+        if child_is_e and child_is_m and child_is_s_count >= (n-k):\n+            prop_str += \"m\"\n+        if child_is_s_count >= (n-k+1):\n+            prop_str += \"s\"\n+        script = []\n+        script.extend(children_n[0]._script)\n+        for child in children_n[1:]:\n+            script.extend(child._script+[OP_ADD])\n+        script.extend([k] + [OP_EQUAL])\n+        self._k = k\n+\n+        desc = \"thresh(\"+str(k)+\",\"\n+        for idx, child in enumerate(children_n):\n+            desc += child.desc\n+            desc += \",\" if idx != (n-1) else \")\"\n+\n+        self._construct(NodeType.THRESH, Property().from_string(prop_str),\n+                        children_n,\n+                        self._thresh_sat, self._thresh_dsat,\n+                        script, desc\n+                        )\n+        return self\n+\n+    def _construct(self,\n+                   node_type, node_prop,\n+                   children,\n+                   sat, dsat,\n+                   script, desc):\n+        self.t = node_type\n+        self.p = node_prop\n+        self.children = children\n+        self._sat = sat\n+        self._dsat = dsat\n+        self.sat = self._lift_sat()\n+        self.dsat = self._lift_dsat()\n+        self._sat_ncan = self._lift_sat_ncan()\n+        self._dsat_ncan = self._lift_dsat_ncan()\n+        self._script = script\n+        self.desc = desc\n+\n+    # sat/dsat methods for terminal node types:\n+    def _just_1_sat(self):\n+        return [[]]\n+\n+    def _just_1_dsat(self):\n+        return [[]]\n+\n+    def _just_0_sat(self):\n+        return [[]]\n+\n+    def _just_0_dsat(self):\n+        return [[]]\n+\n+    def _pk_sat(self):\n+        # Returns (SIGNATURE, 33B_PK) tuple.\n+        return [[(SatType.SIGNATURE, self._pk[0])]]\n+\n+    def _pk_dsat(self):\n+        return [[(SatType.DATA, b'')]]\n+\n+    def _pk_h_sat(self):\n+        # Returns (SIGNATURE, 32B_PK_HASH) tuple.\n+        return [[(SatType.SIGNATURE, self._pk_h),\n+                 (SatType.KEY_AND_HASH160_PREIMAGE, self._pk_h)]]\n+\n+    def _pk_h_dsat(self):\n+        return [[(SatType.DATA, b''),\n+                (SatType.KEY_AND_HASH160_PREIMAGE, self._pk_h)]]\n+\n+    def _older_sat(self):\n+        return [[(SatType.OLDER, self._delay)]]\n+\n+    def _older_dsat(self):\n+        return [[]]\n+\n+    def _after_sat(self):\n+        return [[(SatType.AFTER, self._time)]]\n+\n+    def _after_dsat(self):\n+        return [[]]\n+\n+    def _sha256_sat(self):\n+        return [[(SatType.SHA256_PREIMAGE, self._sha256)]]\n+\n+    def _sha256_dsat(self):\n+        return [[(SatType.DATA, bytes(32))]]\n+\n+    def _hash256_sat(self):\n+        return [[(SatType.HASH256_PREIMAGE, self._hash256)]]\n+\n+    def _hash256_dsat(self):\n+        return [[(SatType.DATA, bytes(32))]]\n+\n+    def _ripemd160_sat(self):\n+        return [[(SatType.RIPEMD160_PREIMAGE, self._ripemd160)]]\n+\n+    def _ripemd160_dsat(self):\n+        return [[(SatType.DATA, bytes(32))]]\n+\n+    def _hash160_sat(self):\n+        return [[(SatType.HASH160_PREIMAGE, self._hash160)]]\n+\n+    def _hash160_dsat(self):\n+        return [[(SatType.DATA, bytes(32))]]\n+\n+    def _thresh_m_sat(self):\n+        thresh_m_sat_ls = []\n+        n = len(self._pk_n)\n+        for i in range(2**n):\n+            if bin(i).count(\"1\") == self._k:\n+                sat = [(SatType.DATA, b'')]\n+                for j in range(n):\n+                    if ((1 << j) & i) != 0:\n+                        sat.append((SatType.SIGNATURE, self._pk_n[j]))\n+                thresh_m_sat_ls.append(sat)\n+        return thresh_m_sat_ls\n+\n+    def _thresh_m_dsat(self):\n+        return [[(SatType.DATA, b'')]*(self._k+1)]\n+\n+    # sat/dsat methods for node types with children:\n+        # sat must return list of possible satisfying witnesses.\n+        # dsat must return (unique) non-satisfying witness if available.\n+\n+    # child_sat_set: [child_x_sat, child_y_dsat, ...]\n+    # dsat child_dsat_set: [child_x_dsat, child_y_dsat, ...]\n+\n+    def _and_v_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[1]+child_sat_set[0]]\n+\n+    def _and_v_dsat(self, child_sat_set, child_dsat_set):\n+        return [[]]\n+\n+    def _and_b_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[1]+child_sat_set[0]]\n+\n+    def _and_b_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[1]+child_dsat_set[0]]\n+\n+    def _and_n_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[1]+child_sat_set[0]]\n+\n+    def _and_n_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _or_b_sat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[1]+child_sat_set[0],\n+                child_sat_set[1]+child_dsat_set[0]]\n+\n+    def _or_b_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[1]+child_dsat_set[0]]\n+\n+    def _or_d_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0],\n+                child_sat_set[1]+child_dsat_set[0]]\n+\n+    def _or_d_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[1]+child_dsat_set[0]]\n+\n+    def _or_c_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0],\n+                child_sat_set[1]+child_dsat_set[0]]\n+\n+    def _or_c_dsat(self, child_sat_set, child_dsat_set):\n+        return [[]]\n+\n+    def _or_i_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]+[(SatType.DATA, b'\\x01')],\n+                child_sat_set[1]+[(SatType.DATA, b'')]]\n+\n+    def _or_i_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'\\x01')]+child_dsat_set[1] + [\n+                (SatType.DATA, b'')]]\n+\n+    def _andor_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[1]+child_sat_set[0],\n+                child_sat_set[2]+child_dsat_set[0]]\n+\n+    def _andor_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[2]+child_dsat_set[0]]\n+\n+    def _a_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _a_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _s_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _s_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _c_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _c_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _t_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _t_dsat(self, child_sat_set, child_dsat_set):\n+        return [[]]\n+\n+    def _d_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]+[(SatType.DATA, b'\\x01')]]\n+\n+    def _d_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'')]]\n+\n+    def _v_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _v_dsat(self, child_sat_set, child_dsat_set):\n+        return [[]]\n+\n+    def _j_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _j_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'')]]\n+\n+    def _n_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]]\n+\n+    def _n_dsat(self, child_sat_set, child_dsat_set):\n+        return [child_dsat_set[0]]\n+\n+    def _l_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]+[(SatType.DATA, b'')]]\n+\n+    def _l_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'\\x01')]]\n+\n+    def _u_sat(self, child_sat_set, child_dsat_set):\n+        return [child_sat_set[0]+[(SatType.DATA, b'\\x01')]]\n+\n+    def _u_dsat(self, child_sat_set, child_dsat_set):\n+        return [[(SatType.DATA, b'')]]\n+\n+    def _thresh_sat(self, child_sat_set, child_dsat_set):\n+        thresh_sat_ls = []\n+        n = len(self.children)\n+        for i in range(2**n):\n+            if bin(i).co",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 1697,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That's much better. Thx.",
    "created_at": "2020-01-21T19:38:32Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369203105",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369203105"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369203105"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369203105/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1697,
    "side": "RIGHT",
    "in_reply_to_id": 369181782
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369204453",
    "pull_request_review_id": 346141375,
    "id": 369204453,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwNDQ1Mw==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_i_sat, self._or_i_dsat,\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_y.p.f and (child_x.p.f or child_z.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        self._andor_sat, self._andor_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if Node._is_wrapper(child_x) else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._a_sat, self._a_dsat,\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if Node._is_wrapper(child_x) else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._s_sat, self._s_dsat,\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if Node._is_wrapper(child_x) else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._c_sat, self._c_dsat,\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if Node._is_wrapper(child_x) else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._t_sat, self._t_dsat,\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert(child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if Node._is_wrapper(child_x) else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._d_sat, self._d_dsat,\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if Node._is_wrapper(child_x) else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._v_sat, self._v_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert(child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if Node._is_wrapper(child_x) else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._j_sat, self._j_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"n\" if Node._is_wrapper(child_x) else \"n:\"\n+        self._construct(NodeType.WRAP_N, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._n_sat, self._n_dsat,\n+                        child_x._script+[OP_0NOTEQUAL], tag+child_x.desc)\n+        return self\n+\n+    def construct_l(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"l\" if Node._is_wrapper(child_x) else \"l:\"\n+        script = [OP_IF, 0, OP_ELSE]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_L, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._l_sat, self._l_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_u(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"u\" if Node._is_wrapper(child_x) else \"u:\"\n+        script = [OP_IF]+child_x._script+[OP_ELSE, 0, OP_ENDIF]\n+        self._construct(NodeType.WRAP_U, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._u_sat, self._u_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_thresh(self, k, children_n):\n+        n = len(children_n)\n+        assert n > k > 1\n+        child_is_z_count = 0\n+        child_is_o_count = 0\n+        child_is_s_count = 0\n+        child_is_e = True\n+        child_is_m = True\n+        for idx, child in enumerate(children_n):\n+            assert child.p.d and child.p.u\n+            child_is_z_count += 1 if child.p.z else 0\n+            child_is_o_count += 1 if child.p.o else 0\n+            child_is_s_count += 1 if child.p.s else 0\n+            child_is_e += child_is_e and child.p.e\n+            child_is_m += child_is_m and child.p.m",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 1301,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Excellent catch. Thank you for review.",
    "created_at": "2020-01-21T19:41:32Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369204453",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369204453"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369204453"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369204453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1301,
    "side": "RIGHT",
    "in_reply_to_id": 369175249
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369540740",
    "pull_request_review_id": 346562311,
    "id": 369540740,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0MDc0MA==",
    "diff_hunk": "@@ -0,0 +1,433 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang",
    "path": "test/functional/feature_miniscript.py",
    "position": null,
    "original_position": 2,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please change this to \"The Bitcoin Core developers\" or add your name on line 105 in https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/copyright_header.py\r\n\r\nOtherwise it will get overridden by the copyright-headers script",
    "created_at": "2020-01-22T12:51:08Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369540740",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369540740"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369540740"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369540740/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369549291",
    "pull_request_review_id": 346573444,
    "id": 369549291,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU0OTI5MQ==",
    "diff_hunk": "@@ -0,0 +1,433 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang",
    "path": "test/functional/feature_miniscript.py",
    "position": null,
    "original_position": 2,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thank you for the review and tip, will gladly amend copyright header as you suggested!",
    "created_at": "2020-01-22T13:10:34Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369549291",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369549291"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r369549291"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/369549291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2,
    "side": "RIGHT",
    "in_reply_to_id": 369540740
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373809703",
    "pull_request_review_id": 351911145,
    "id": 373809703,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwOTcwMw==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 943,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this should be ` prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\" ` . Since the left child must have a base type`V`, it always has malleability property `f`. The above statement will make all `and_v` has property `f`. \r\nThere is only one possible non-canonical dissat being [sat(X), dissat(Y)] which gives us self.f = `sx or fy`. \r\n\r\nOne valid miniscript counter-example: `and_v(vc:pk(A),and_v(v:after(10),sha256(H)))` where right branch of first `and_v` is not an `f`.",
    "created_at": "2020-02-02T00:07:28Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373809703",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373809703"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373809703"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373809703/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 943,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373816993",
    "pull_request_review_id": 351917030,
    "id": 373816993,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxNjk5Mw==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 962,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should be `f=fxfy or sxfx or syfy`",
    "created_at": "2020-02-02T03:47:30Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373816993",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373816993"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373816993"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373816993/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 962,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373819067",
    "pull_request_review_id": 351917030,
    "id": 373819067,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxOTA2Nw==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 982,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: Always `d`",
    "created_at": "2020-02-02T04:48:41Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373819067",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373819067"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373819067"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373819067/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 982,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373819524",
    "pull_request_review_id": 351917030,
    "id": 373819524,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxOTUyNA==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 983,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: Can never be f. Convert to an assertion?",
    "created_at": "2020-02-02T05:00:18Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373819524",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373819524"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373819524"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373819524/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 983,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373820402",
    "pull_request_review_id": 351917030,
    "id": 373820402,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMDQwMg==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 988,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this should be `or` instead of `and`?",
    "created_at": "2020-02-02T05:23:56Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373820402",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373820402"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373820402"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373820402/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 988,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373820482",
    "pull_request_review_id": 351917030,
    "id": 373820482,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMDQ4Mg==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 1005,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "unnecessary since it's already added at the start of function",
    "created_at": "2020-02-02T05:26:40Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373820482",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373820482"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373820482"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373820482/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1005,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373820527",
    "pull_request_review_id": 351917030,
    "id": 373820527,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMDUyNw==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 1006,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should never happen. Maybe replace it with an assertion?",
    "created_at": "2020-02-02T05:28:17Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373820527",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373820527"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373820527"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373820527/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1006,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373821064",
    "pull_request_review_id": 351917030,
    "id": 373821064,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMTA2NA==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1064,
    "original_position": 1064,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing both V condition",
    "created_at": "2020-02-02T05:46:31Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373821064",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373821064"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373821064"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373821064/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1063,
    "original_start_line": 1063,
    "start_side": "RIGHT",
    "line": 1064,
    "original_line": 1064,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373821331",
    "pull_request_review_id": 351917030,
    "id": 373821331,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMTMzMQ==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_i_sat, self._or_i_dsat,\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_y.p.f and (child_x.p.f or child_z.p.f) else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 1094,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "f = fz and (sx or fy)",
    "created_at": "2020-02-02T05:52:16Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373821331",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373821331"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373821331"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373821331/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1094,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373822958",
    "pull_request_review_id": 351917030,
    "id": 373822958,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyMjk1OA==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_i_sat, self._or_i_dsat,\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_y.p.f and (child_x.p.f or child_z.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        self._andor_sat, self._andor_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if Node._is_wrapper(child_x) else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._a_sat, self._a_dsat,\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if Node._is_wrapper(child_x) else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._s_sat, self._s_dsat,\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if Node._is_wrapper(child_x) else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._c_sat, self._c_dsat,\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if Node._is_wrapper(child_x) else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._t_sat, self._t_dsat,\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert(child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if Node._is_wrapper(child_x) else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._d_sat, self._d_dsat,\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if Node._is_wrapper(child_x) else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._v_sat, self._v_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert(child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if Node._is_wrapper(child_x) else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._j_sat, self._j_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"n\" if Node._is_wrapper(child_x) else \"n:\"\n+        self._construct(NodeType.WRAP_N, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._n_sat, self._n_dsat,\n+                        child_x._script+[OP_0NOTEQUAL], tag+child_x.desc)\n+        return self\n+\n+    def construct_l(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"l\" if Node._is_wrapper(child_x) else \"l:\"\n+        script = [OP_IF, 0, OP_ELSE]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_L, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._l_sat, self._l_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_u(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"u\" if Node._is_wrapper(child_x) else \"u:\"\n+        script = [OP_IF]+child_x._script+[OP_ELSE, 0, OP_ENDIF]\n+        self._construct(NodeType.WRAP_U, Property().from_string(prop_str),\n+                        [child_x],\n+                        self._u_sat, self._u_dsat,\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_thresh(self, k, children_n):\n+        n = len(children_n)\n+        assert n > k > 1\n+        child_is_z_count = 0\n+        child_is_o_count = 0\n+        child_is_s_count = 0\n+        child_is_e = True\n+        child_is_m = True\n+        for idx, child in enumerate(children_n):\n+            assert child.p.d and child.p.u\n+            child_is_z_count += 1 if child.p.z else 0\n+            child_is_o_count += 1 if child.p.o else 0\n+            child_is_s_count += 1 if child.p.s else 0\n+            child_is_e += child_is_e and child.p.e\n+            child_is_m += child_is_m and child.p.m\n+            if idx == 0:\n+                is_B = child.p.B\n+            else:\n+                is_B = is_B and child.p.W\n+        prop_str = \"Wdu\" if not is_B else \"Bdu\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 1306,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "sanket1729",
      "id": 6881849,
      "node_id": "MDQ6VXNlcjY4ODE4NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanket1729",
      "html_url": "https://github.com/sanket1729",
      "followers_url": "https://api.github.com/users/sanket1729/followers",
      "following_url": "https://api.github.com/users/sanket1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanket1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
      "organizations_url": "https://api.github.com/users/sanket1729/orgs",
      "repos_url": "https://api.github.com/users/sanket1729/repos",
      "events_url": "https://api.github.com/users/sanket1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanket1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should be if \"Bdu\" if is_B, otherwise \"\"",
    "created_at": "2020-02-02T06:31:47Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373822958",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373822958"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373822958"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373822958/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1306,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829160",
    "pull_request_review_id": 351927150,
    "id": 373829160,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTE2MA==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 988,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes absolutely! Thanks for the correction!",
    "created_at": "2020-02-02T08:40:08Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373829160",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829160"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373829160"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 988,
    "side": "RIGHT",
    "in_reply_to_id": 373820402
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829295",
    "pull_request_review_id": 351927243,
    "id": 373829295,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTI5NQ==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1064,
    "original_position": 1064,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah yes, both V are from revised rules.",
    "created_at": "2020-02-02T08:42:29Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373829295",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829295"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373829295"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1063,
    "original_start_line": 1063,
    "start_side": "RIGHT",
    "line": 1064,
    "original_line": 1064,
    "side": "RIGHT",
    "in_reply_to_id": 373821064
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829390",
    "pull_request_review_id": 351927315,
    "id": 373829390,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTM5MA==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_y.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert(child_x.p.d and child_z.p.d)\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_i_sat, self._or_i_dsat,\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert(child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_y.p.f and (child_x.p.f or child_z.p.f) else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 1094,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Got it, revised rules again :)",
    "created_at": "2020-02-02T08:44:16Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373829390",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829390"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373829390"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829390/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1094,
    "side": "RIGHT",
    "in_reply_to_id": 373821331
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829712",
    "pull_request_review_id": 351927610,
    "id": 373829712,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyOTcxMg==",
    "diff_hunk": "@@ -0,0 +1,1709 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 James Chiang\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_y.p.f else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 943,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "5d31fb46b621a4cd9c17987df7541f2637baa529",
    "user": {
      "login": "jachiang",
      "id": 26572234,
      "node_id": "MDQ6VXNlcjI2NTcyMjM0",
      "avatar_url": "https://avatars.githubusercontent.com/u/26572234?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jachiang",
      "html_url": "https://github.com/jachiang",
      "followers_url": "https://api.github.com/users/jachiang/followers",
      "following_url": "https://api.github.com/users/jachiang/following{/other_user}",
      "gists_url": "https://api.github.com/users/jachiang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jachiang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jachiang/subscriptions",
      "organizations_url": "https://api.github.com/users/jachiang/orgs",
      "repos_url": "https://api.github.com/users/jachiang/repos",
      "events_url": "https://api.github.com/users/jachiang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jachiang/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This was a mistake in encoding the property rules, thank you.",
    "created_at": "2020-02-02T08:50:02Z",
    "updated_at": "2020-03-14T13:52:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373829712",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829712"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r373829712"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/373829712/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 943,
    "side": "RIGHT",
    "in_reply_to_id": 373809703
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449902553",
    "pull_request_review_id": 442695452,
    "id": 449902553,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjU1Mw==",
    "diff_hunk": "@@ -0,0 +1,1694 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+from enum import Enum\n+from itertools import product\n+\n+from .key import ECPubKey\n+from .script import CScript, OP_ADD, OP_BOOLAND, OP_BOOLOR, OP_DUP, OP_ELSE, \\\n+    OP_ENDIF, OP_EQUAL, OP_EQUALVERIFY, OP_FROMALTSTACK, OP_IFDUP, OP_IF, \\\n+    OP_CHECKLOCKTIMEVERIFY, OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY, \\\n+    OP_CHECKSEQUENCEVERIFY, OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_HASH160, \\\n+    OP_HASH256, OP_NOTIF, OP_RIPEMD160, OP_SHA256, OP_SIZE, OP_SWAP, \\\n+    OP_TOALTSTACK, OP_VERIFY, OP_0NOTEQUAL\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert (hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29\n+\n+\n+class SatType(Enum):\n+    # SatType Class provides information on how to construct satisfying or\n+    # non-satisfying witnesses. sat/dsat methods return list of tuples:\n+    # [(SatType, Value), (SatType, Value), ...]\n+    # The value provides a hint how to construct the resp. witness element.\n+    OLDER = 0                       # Value: Delay\n+    AFTER = 1                       # Value: Time\n+    SIGNATURE = 2                   # Value: 33B Key/20B HASH160 Digest\n+    KEY_AND_HASH160_PREIMAGE = 3    # Value: 20B HASH160 Digest\n+    SHA256_PREIMAGE = 4             # Value: 32B SHA256 Digest\n+    HASH256_PREIMAGE = 5            # Value: 32B HASH256 Digest\n+    RIPEMD160_PREIMAGE = 6          # Value: 20B RIPEMD160 Digest\n+    HASH160_PREIMAGE = 7            # Value: 20B HASH160 Digest\n+    DATA = 8                        # Value: Bytes\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+\n+        # Right - to - left parsing.\n+            # Note: Parsing from script is ambiguous:\n+            # r-to-l:\n+            #    and_v(vc:pk_h(KEY),c:pk_h(KEY))\n+            # l-to-r:\n+            #   c:and_v(vc:pk_h(KEY),pk_h(KEY))\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # 2 element expressions.\n+            if expr_list_len-idx >= 2:\n+\n+                # Match against and_v.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node):\n+                    try:\n+                        node = Node().construct_and_v(\n+                            expr_list[idx], expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against c wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_CHECKSIG:\n+                    try:\n+                        # Construct AST tree node.\n+                        node = Node().construct_c(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        # Recursive parse of remaining top-level nodes.\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against t wrapper.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_1:\n+                    try:\n+                        node = Node().construct_t(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against v wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_VERIFY:\n+                    try:\n+                        node = Node().construct_v(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against s wrapper.\n+                elif isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx] == OP_SWAP:\n+                    try:\n+                        node = Node().construct_s(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against n wrapper.\n+                elif isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_0NOTEQUAL:\n+                    try:\n+                        node = Node().construct_n(expr_list[idx])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 3 element expressions.\n+            if expr_list_len-idx >= 3:\n+\n+                # Match against and_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLAND:\n+                    try:\n+                        node = Node().construct_and_b(expr_list[idx],\n+                                                      expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_b.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_BOOLOR:\n+                    try:\n+                        node = Node().construct_or_b(expr_list[idx],\n+                                                     expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against a wrapper.\n+                if expr_list[idx] == OP_TOALTSTACK and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_FROMALTSTACK:\n+                    try:\n+                        node = Node().construct_a(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+3:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 4 element expressions.\n+            if expr_list_len-idx >= 4:\n+\n+                # Match against or_c.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_c(expr_list[idx],\n+                                                     expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against d wrapper.\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_IF] and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_d(expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+4:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 5 element expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against or_d.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1:idx+3] == [OP_IFDUP, OP_NOTIF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_d(expr_list[idx],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against or_i.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_or_i(expr_list[idx+1],\n+                                                     expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against j wrapper.\n+                if expr_list[idx:idx+3] == [OP_SIZE, OP_0NOTEQUAL, OP_IF] and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_j(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against l wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+1].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+2] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+3], Node) and \\\n+                        expr_list[idx+4] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_l(expr_list[idx+3])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against u wrapper.\n+                if expr_list[idx] == OP_IF and \\\n+                        isinstance(expr_list[idx+1], Node) and \\\n+                        expr_list[idx+2:idx+5] == [OP_ELSE, 0, OP_ENDIF]:\n+                    try:\n+                        node = Node().construct_u(expr_list[idx+1])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # 6 element expressions.\n+            if expr_list_len-idx >= 6:\n+\n+                # Match against and_n.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+2].t == NodeType.JUST_0 and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_and_n(expr_list[idx],\n+                                                      expr_list[idx+4])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+                # Match against andor.\n+                if isinstance(expr_list[idx], Node) and \\\n+                        expr_list[idx+1] == OP_NOTIF and \\\n+                        isinstance(expr_list[idx+2], Node) and \\\n+                        expr_list[idx+3] == OP_ELSE and \\\n+                        isinstance(expr_list[idx+4], Node) and \\\n+                        expr_list[idx+5] == OP_ENDIF:\n+                    try:\n+                        node = Node().construct_andor(expr_list[idx],\n+                                                      expr_list[idx+4],\n+                                                      expr_list[idx+2])\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+6:]\n+                        return Node._parse_expr_list(expr_list)\n+                    except Exception:\n+                        pass\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Match against thresh.\n+            if expr_list_len-idx >= 7:\n+                # Permissible values for n:\n+                # (len(list)-1)/2 >= n >= 3:\n+                for n in range(3, int((expr_list_len-1)/2)+1):\n+                    # Length of k-of-n thresh expression.\n+                    thresh_expr_len = 1+2*n\n+                    # Match (<expr> <OP_ADD>)*(n-1)\n+                    match = True\n+                    children = []\n+                    for i in range(n-1):\n+                        if not isinstance(expr_list[i*2+1], Node) or \\\n+                                expr_list[i*2+2] != OP_ADD:\n+                            match = False\n+                            break\n+                        else:\n+                            children.append(expr_list[i*2+1])\n+                    # Match <expr> ... <k> <OP_EQUAL>\n+                    if match is True:\n+                        k = Node._coerce_to_int(expr_list[thresh_expr_len-2])\n+                        if isinstance(expr_list[idx], Node) and \\\n+                            isinstance(k, int) and \\\n+                                expr_list[thresh_expr_len-1] == OP_EQUAL:\n+                            try:\n+                                k = expr_list[thresh_expr_len-2]\n+                                children = [expr_list[idx]] + children\n+                                node = Node().construct_thresh(k, children)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+thresh_expr_len:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def _lift_sat(self):\n+        # Return satisfying witnesses if terminal node.\n+        if not self.children:\n+            return self._sat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._sat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_dsat(self):\n+        # Return non-satisfying witness if terminal node.\n+        if not self.children:\n+            return self._dsat()\n+        child_sat_set_ls, child_dsat_set_ls = self._generate_child_sat_dsat()\n+        return self._lift_function(self._dsat, child_sat_set_ls, child_dsat_set_ls)\n+\n+    def _lift_function(self, function, child_sat_set_ls, child_dsat_set_ls):\n+        # Applies (d)sat function on all child_sat_set x child_dsat_set\n+        # permutations. Returns list of unique (dis)satisfying witnesses.\n+        ret_ls = []\n+        for child_sat_set in child_sat_set_ls:\n+            for child_dsat_set in child_dsat_set_ls:\n+                for ret in function(child_sat_set, child_dsat_set):\n+                    if ret not in ret_ls:\n+                        # Order (d)sat elements with OLDER/AFTER\n+                        # SatType elements at beginning.\n+                        ret_older = []\n+                        ret_after = []\n+                        ret_ordered = []\n+                        valid = True\n+                        for element in ret:\n+                            # Handle None element from children,\n+                            # which represents lack of non-cannonical (d)sat.\n+                            if element is None:\n+                                valid = False\n+                                break\n+                            else:\n+                                if element[0] == SatType.OLDER:\n+                                    ret_older.append(element)\n+                                elif element[0] == SatType.AFTER:\n+                                    ret_after.append(element)\n+                                else:\n+                                    ret_ordered.append(element)\n+                        if valid is True:\n+                            ret_ordered = ret_older+ret_after+ret_ordered\n+                            # Append ordered (d)sat.\n+                            ret_ls.append(ret_ordered)\n+        return ret_ls\n+\n+    def _generate_child_sat_dsat(self):\n+        # Create list of lists of unique satisfying witnesses for each child.\n+        # [\n+        # [satx', satx'', satx'''],\n+        # [saty', saty'', saty'''],\n+        # [satz', satz'', satz''']\n+        # ]\n+        child_sat_var_ls = []\n+        child_dsat_var_ls = []\n+        for child in self.children:\n+            child_sat_var_ls.append(child.sat) # what if multiple are returned?\n+            child_dsat_var_ls.append(child.dsat)\n+\n+        # Generate all permutations of sets each containing a single satisfying\n+        # witness element from each child.\n+        # [\n+        # [satx', saty', satz'],\n+        # [satx', saty', satz''],\n+        # [satx', saty'', satz''],\n+        # [satx'', saty'', satz''],\n+        # [satx'', saty'', satz'],\n+        # [satx'', saty', satz'], ...\n+        # ]\n+\n+        # List iterators are reusable.\n+        child_sat_set_ls = list(product(*child_sat_var_ls))\n+        child_dsat_set_ls = list(product(*child_dsat_var_ls))\n+        return child_sat_set_ls, child_dsat_set_ls\n+\n+    @property\n+    def sat_ncan(self):\n+        \"\"\"Retrieve non-canonical satisfactions of miniscript object\"\"\"\n+        if self._sat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._sat_ncan\n+\n+    @property\n+    def dsat_ncan(self):\n+        \"\"\"Retrieve non-canonical dissatisfactions of miniscript object\"\"\"\n+        if self._dsat_ncan == [[None]]:\n+            return []\n+        else:\n+            return self._dsat_ncan\n+\n+    def _lift_sat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        sat_ncan_ls = self._lift_function(\n+            self._sat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        sat_ncan_ls += self._lift_function(\n+            self._sat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in sat_can\n+        sat__ncan_ls_ret = []\n+        for sat_ncan in sat_ncan_ls:\n+            if sat_ncan not in self.sat:\n+                sat__ncan_ls_ret.append(sat_ncan)\n+        if len(sat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return sat__ncan_ls_ret\n+\n+    def _lift_dsat_ncan(self):\n+        if not self.children:\n+            return [[None]]\n+\n+        (child_sat_n_can_set_ls,\n+         child_dsat_n_can_set_ls) = self._generate_child_sat_dsat_ncan()\n+\n+        dsat_ncan_ls = self._lift_function(\n+            self._dsat, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+        dsat_ncan_ls += self._lift_function(\n+            self._dsat_ncan, child_sat_n_can_set_ls, child_dsat_n_can_set_ls)\n+\n+        # Check if already in dsat_can\n+        dsat__ncan_ls_ret = []\n+        for dsat_ncan in dsat_ncan_ls:\n+            if dsat_ncan not in self.dsat:\n+                dsat__ncan_ls_ret.append(dsat_ncan)\n+        if len(dsat__ncan_ls_ret) == 0:\n+            return [[None]]\n+        else:\n+            return dsat__ncan_ls_ret\n+\n+    def _generate_child_sat_dsat_ncan(self):\n+        child_sat_n_can_var_ls = []\n+        child_dsat_n_can_var_ls = []\n+\n+        for child in self.children:\n+            child_sat_n_can_var_ls.append(child.sat+child._sat_ncan)\n+            child_dsat_n_can_var_ls.append(child.dsat+child._dsat_ncan)\n+\n+        # List iterators are reusable.\n+        child_sat_n_can_set_ls = list(product(*child_sat_n_can_var_ls))\n+        child_dsat_n_can_set_ls = list(product(*child_dsat_n_can_var_ls))\n+\n+        return (child_sat_n_can_set_ls,\n+                child_dsat_n_can_set_ls)\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        self._just_1_sat, self._just_1_dsat,\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        self._just_0_sat, self._just_0_dsat,\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        self._pk_sat, self._pk_dsat,\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        self._pk_h_sat, self._pk_h_dsat,\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._older_sat, self._older_dsat,\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        self._after_sat, self._after_dsat,\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._sha256_sat, self._sha256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash256_sat, self._hash256_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._ripemd160_sat, self._ripemd160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        self._hash160_sat, self._hash160_dsat,\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        self._thresh_m_sat, self._thresh_m_dsat,\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_v_sat, self._and_v_dsat,\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_b_sat, self._and_b_dsat,\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        self._and_n_sat, self._and_n_dsat,\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_b_sat, self._or_b_dsat,\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_d_sat, self._or_d_dsat,\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        self._or_c_sat, self._or_c_dsat,\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1065,
    "original_position": 1065,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should be type \"V\" if both \"V\".",
    "created_at": "2020-07-05T17:54:07Z",
    "updated_at": "2020-07-05T17:54:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r449902553",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449902553"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r449902553"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/449902553/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1065,
    "original_line": 1065,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680558400",
    "pull_request_review_id": 719693098,
    "id": 680558400,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDU1ODQwMA==",
    "diff_hunk": "@@ -0,0 +1,68 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 63,
    "original_position": 53,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "af8ed9a0e8665d0e15c37e30e7533f9b88b999f9",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: since we are returning `False` on invalid by conflicts below, let's just return `False` here too?",
    "created_at": "2021-08-01T19:57:47Z",
    "updated_at": "2021-08-06T14:59:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r680558400",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680558400"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r680558400"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680558400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 63,
    "original_line": 53,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680561414",
    "pull_request_review_id": 719693098,
    "id": 680561414,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDU2MTQxNA==",
    "diff_hunk": "@@ -0,0 +1,68 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str\n+\n+    def is_valid(self):\n+        # Can only be of a single type.\n+        num_types = 0\n+        for typ in self.types:\n+            if getattr(self, typ):\n+                num_types += 1\n+        assert num_types == 1\n+\n+        # Check for conflicts in type & properties.\n+        return \\\n+            (not self.z or not self.o) and \\\n+            (not self.n or not self.z) and \\\n+            (not self.V or not self.d) and \\\n+            (not self.K or self.u) and \\\n+            (not self.V or not self.u) and \\\n+            (not self.e or not self.f) and \\\n+            (not self.e or self.d) and \\\n+            (not self.V or not self.e) and \\\n+            (not self.d or not self.f) and \\\n+            (not self.V or self.f) and \\\n+            (not self.K or self.s) and \\\n+            (not self.z or self.m)",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 78,
    "original_position": 68,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "af8ed9a0e8665d0e15c37e30e7533f9b88b999f9",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`W`\u00a0conflicts with `n`, too.",
    "created_at": "2021-08-01T20:24:56Z",
    "updated_at": "2021-08-06T14:59:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r680561414",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680561414"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r680561414"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680561414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 66,
    "original_start_line": 56,
    "start_side": "RIGHT",
    "line": 78,
    "original_line": 68,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680699193",
    "pull_request_review_id": 719693098,
    "id": 680699193,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDY5OTE5Mw==",
    "diff_hunk": "@@ -66,3 +68,36 @@ def is_valid(self):\n             (not self.V or self.f) and \\\n             (not self.K or self.s) and \\\n             (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 84,
    "original_position": 18,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "63197b30175885f4286c77e181606255d5ae816e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It was renamed to `PK_K`",
    "created_at": "2021-08-02T06:55:29Z",
    "updated_at": "2021-08-06T14:59:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r680699193",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680699193"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r680699193"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680699193/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 84,
    "original_line": 76,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680699345",
    "pull_request_review_id": 719693098,
    "id": 680699345,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MDY5OTM0NQ==",
    "diff_hunk": "@@ -66,3 +68,36 @@ def is_valid(self):\n             (not self.V or self.f) and \\\n             (not self.K or self.s) and \\\n             (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2\n+    PK_H = 3\n+    OLDER = 4\n+    AFTER = 5\n+    SHA256 = 6\n+    HASH256 = 7\n+    RIPEMD160 = 8\n+    HASH160 = 9\n+    WRAP_A = 10\n+    WRAP_S = 11\n+    WRAP_C = 12\n+    WRAP_T = 13\n+    WRAP_D = 14\n+    WRAP_V = 15\n+    WRAP_J = 16\n+    WRAP_N = 17\n+    WRAP_U = 18\n+    WRAP_L = 19\n+    AND_V = 20\n+    AND_B = 21\n+    AND_N = 22\n+    OR_B = 23\n+    OR_C = 24\n+    OR_D = 25\n+    OR_I = 26\n+    ANDOR = 27\n+    THRESH = 28\n+    THRESH_M = 29",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 111,
    "original_position": 45,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "63197b30175885f4286c77e181606255d5ae816e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Now renamed to `MULTI`",
    "created_at": "2021-08-02T06:55:45Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r680699345",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680699345"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r680699345"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/680699345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 111,
    "original_line": 103,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681042120",
    "pull_request_review_id": 719693098,
    "id": 681042120,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA0MjEyMA==",
    "diff_hunk": "@@ -66,3 +68,36 @@ def is_valid(self):\n             (not self.V or self.f) and \\\n             (not self.K or self.s) and \\\n             (not self.z or self.m)\n+\n+\n+class NodeType(Enum):\n+    JUST_0 = 0\n+    JUST_1 = 1\n+    PK = 2",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 84,
    "original_position": 18,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "63197b30175885f4286c77e181606255d5ae816e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(and `pk()` is now an alias for `c:pk_k()`)",
    "created_at": "2021-08-02T14:55:51Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681042120",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681042120"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681042120"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681042120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 84,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 680699193
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681049641",
    "pull_request_review_id": 719693098,
    "id": 681049641,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA0OTY0MQ==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 828,
    "original_position": 290,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`pk` is `x`",
    "created_at": "2021-08-02T15:05:04Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681049641",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681049641"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681049641"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681049641/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 828,
    "original_line": 383,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681049885",
    "pull_request_review_id": 719693098,
    "id": 681049885,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA0OTg4NQ==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 838,
    "original_position": 299,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`pk_h` is `x` too",
    "created_at": "2021-08-02T15:05:23Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681049885",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681049885"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681049885"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681049885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 838,
    "original_line": 392,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681071269",
    "pull_request_review_id": 719693098,
    "id": 681071269,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3MTI2OQ==",
    "diff_hunk": "@@ -0,0 +1,68 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 33,
    "original_position": 23,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "af8ed9a0e8665d0e15c37e30e7533f9b88b999f9",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The `x` property isn't part of Miniscript itself and is an implementation detail of the C++ implem so i wonder if it's not clearer here to just use a boolean member to the `Node` class instead.",
    "created_at": "2021-08-02T15:32:12Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681071269",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681071269"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681071269"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681071269/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 33,
    "original_line": 23,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681071699",
    "pull_request_review_id": 719693098,
    "id": 681071699,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3MTY5OQ==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 319,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`after` and `older` are `x`",
    "created_at": "2021-08-02T15:32:42Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681071699",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681071699"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681071699"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681071699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 399,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 412,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681074508",
    "pull_request_review_id": 719693098,
    "id": 681074508,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3NDUwOA==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 945,
    "original_position": 337,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`and_v` should inherit `x` from `y` too",
    "created_at": "2021-08-02T15:36:27Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681074508",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681074508"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681074508"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681074508/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 933,
    "original_start_line": 756,
    "start_side": "RIGHT",
    "line": 945,
    "original_line": 768,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681074836",
    "pull_request_review_id": 719693098,
    "id": 681074836,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3NDgzNg==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 955,
    "original_position": 346,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`and_b` is `x`",
    "created_at": "2021-08-02T15:36:49Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681074836",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681074836"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681074836"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681074836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 955,
    "original_line": 777,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681075817",
    "pull_request_review_id": 719693098,
    "id": 681075817,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3NTgxNw==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 980,
    "original_position": 370,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`and_n` (like `and_or`) is `x` too",
    "created_at": "2021-08-02T15:38:03Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681075817",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681075817"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681075817"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681075817/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 980,
    "original_line": 801,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076207",
    "pull_request_review_id": 719693098,
    "id": 681076207,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3NjIwNw==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1002,
    "original_position": 391,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`or_b` is `x` too",
    "created_at": "2021-08-02T15:38:31Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076207",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076207"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076207"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076207/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1002,
    "original_line": 822,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076367",
    "pull_request_review_id": 719693098,
    "id": 681076367,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3NjM2Nw==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1022,
    "original_position": 410,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`or_d` is `x` too",
    "created_at": "2021-08-02T15:38:45Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076367",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076367"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076367"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1022,
    "original_line": 841,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076526",
    "pull_request_review_id": 719693098,
    "id": 681076526,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3NjUyNg==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1045,
    "original_position": 432,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`or_c` is `x`",
    "created_at": "2021-08-02T15:38:59Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076526",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076526"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076526"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076526/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1045,
    "original_line": 863,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076774",
    "pull_request_review_id": 719693098,
    "id": 681076774,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3Njc3NA==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1062,
    "original_position": 448,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`or_i` is `x`",
    "created_at": "2021-08-02T15:39:21Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076774",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076774"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076774"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076774/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1062,
    "original_line": 879,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076986",
    "pull_request_review_id": 719693098,
    "id": 681076986,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA3Njk4Ng==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1086,
    "original_position": 471,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`and_or` is `x`",
    "created_at": "2021-08-02T15:39:40Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076986",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076986"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681076986"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681076986/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1086,
    "original_line": 902,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681086702",
    "pull_request_review_id": 719693098,
    "id": 681086702,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA4NjcwMg==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1112,
    "original_position": 496,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`a:` is `x`",
    "created_at": "2021-08-02T15:52:15Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681086702",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681086702"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681086702"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681086702/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1112,
    "original_line": 927,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681087735",
    "pull_request_review_id": 719693098,
    "id": 681087735,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA4NzczNQ==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1138,
    "original_position": 521,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should inherit `x` too",
    "created_at": "2021-08-02T15:53:41Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681087735",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681087735"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681087735"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681087735/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1137,
    "original_start_line": 951,
    "start_side": "RIGHT",
    "line": 1138,
    "original_line": 952,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681088825",
    "pull_request_review_id": 719693098,
    "id": 681088825,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA4ODgyNQ==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1164,
    "original_position": 545,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think `t:` is `x` since it's `and_v(X, 1)` and `1`\u00a0is `x`.",
    "created_at": "2021-08-02T15:55:05Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681088825",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681088825"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681088825"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681088825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1164,
    "original_line": 976,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681089205",
    "pull_request_review_id": 719693098,
    "id": 681089205,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA4OTIwNQ==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if child_x.t.name.startswith('WRAP_') else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert (child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if child_x.t.name.startswith('WRAP_') else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 577,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`d:` and `v:` are `x`",
    "created_at": "2021-08-02T15:55:37Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681089205",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681089205"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681089205"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681089205/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 992,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1008,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681089414",
    "pull_request_review_id": 719693098,
    "id": 681089414,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA4OTQxNA==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if child_x.t.name.startswith('WRAP_') else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert (child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if child_x.t.name.startswith('WRAP_') else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if child_x.t.name.startswith('WRAP_') else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert (child_x.p.n)\n+        prop_str = \"nd\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1223,
    "original_position": 601,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`j:` is `x`",
    "created_at": "2021-08-02T15:55:55Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681089414",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681089414"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681089414"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681089414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1223,
    "original_line": 1032,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681089950",
    "pull_request_review_id": 719693098,
    "id": 681089950,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA4OTk1MA==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if child_x.t.name.startswith('WRAP_') else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert (child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if child_x.t.name.startswith('WRAP_') else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if child_x.t.name.startswith('WRAP_') else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert (child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if child_x.t.name.startswith('WRAP_') else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):\n+        prop_str = \"u\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1239,
    "original_position": 616,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`n` is `x` too",
    "created_at": "2021-08-02T15:56:38Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681089950",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681089950"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681089950"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681089950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1239,
    "original_line": 1047,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681090584",
    "pull_request_review_id": 719693098,
    "id": 681090584,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTA5MDU4NA==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if child_x.t.name.startswith('WRAP_') else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert (child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if child_x.t.name.startswith('WRAP_') else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if child_x.t.name.startswith('WRAP_') else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert (child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if child_x.t.name.startswith('WRAP_') else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"n\" if child_x.t.name.startswith('WRAP_') else \"n:\"\n+        self._construct(NodeType.WRAP_N, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_0NOTEQUAL], tag+child_x.desc)\n+        return self\n+\n+    def construct_l(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"l\" if child_x.t.name.startswith('WRAP_') else \"l:\"\n+        script = [OP_IF, 0, OP_ELSE]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_L, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_u(self, child_x):\n+        prop_str = \"d\"",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 648,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`l:`\u00a0and `u:` should be `x` since `or_i()` is",
    "created_at": "2021-08-02T15:57:37Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681090584",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681090584"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681090584"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681090584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 1064,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 1079,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681104862",
    "pull_request_review_id": 719693098,
    "id": 681104862,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTEwNDg2Mg==",
    "diff_hunk": "@@ -0,0 +1,68 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 33,
    "original_position": 23,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "af8ed9a0e8665d0e15c37e30e7533f9b88b999f9",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You don't even actually use it actually (you match against `child_script[-1]` to check if you need to append `VERIFY`), so i'd say it's better to not have it at all (and therefore to ignore my comments regarding missing `x`s in the following commits).",
    "created_at": "2021-08-02T16:18:27Z",
    "updated_at": "2021-08-06T14:59:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681104862",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681104862"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681104862"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681104862/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 33,
    "original_line": 23,
    "side": "RIGHT",
    "in_reply_to_id": 681071269
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681109249",
    "pull_request_review_id": 719693098,
    "id": 681109249,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTEwOTI0OQ==",
    "diff_hunk": "@@ -0,0 +1,68 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Classes and methods to encode and decode miniscripts\"\"\"\n+\n+\n+class Property:\n+    \"\"\"Miniscript expression property\"\"\"\n+    # \"B\": Base type\n+    # \"V\": Verify type\n+    # \"K\": Key type\n+    # \"W\": Wrapped type\n+    # \"z\": Zero-arg property\n+    # \"o\": One-arg property\n+    # \"n\": Nonzero arg property\n+    # \"d\": Dissatisfiable property\n+    # \"u\": Unit property\n+    # \"e\": Expression property\n+    # \"f\": Forced property\n+    # \"s\": Safe property\n+    # \"m\": Nonmalleable property\n+    # \"x\": Expensive verify\n+    types = \"BVKW\"\n+    props = \"zonduefsmx\"\n+\n+    def __init__(self):\n+        for literal in self.types+self.props:\n+            setattr(self, literal, False)\n+\n+    def from_string(self, property_str):\n+        \"\"\"Construct property from string of valid property and types\"\"\"\n+        for char in property_str:\n+            assert(hasattr(self, char))\n+            setattr(self, char, True)\n+        assert self.is_valid()\n+        return self\n+\n+    def to_string(self):\n+        \"\"\"Generate string representation of property\"\"\"\n+        property_str = \"\"\n+        for char in self.types+self.props:\n+            if getattr(self, char):\n+                property_str += char\n+        return property_str",
    "path": "test/functional/test_framework/miniscript.py",
    "position": null,
    "original_position": 45,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "af8ed9a0e8665d0e15c37e30e7533f9b88b999f9",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That's super nit but i find it nicer to have an optional argument to the constructor instead of `from_string()` and use `__repr__` instead of `to_string()`",
    "created_at": "2021-08-02T16:25:12Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681109249",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681109249"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681109249"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681109249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 27,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 45,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681114469",
    "pull_request_review_id": 719693098,
    "id": 681114469,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTExNDQ2OQ==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 159,
    "original_position": 49,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In addition to `pk` being renamed to `pk_k`, `pk` is now an alias for `c:pk_k` (so we need to keep matching this tag)",
    "created_at": "2021-08-02T16:33:04Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681114469",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681114469"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681114469"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681114469/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 159,
    "original_line": 142,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681116827",
    "pull_request_review_id": 719693098,
    "id": 681116827,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTExNjgyNw==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 192,
    "original_position": 82,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This function doesn't exist as of this commit.",
    "created_at": "2021-08-02T16:36:27Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681116827",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681116827"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681116827"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681116827/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 192,
    "original_line": 175,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681117333",
    "pull_request_review_id": 719693098,
    "id": 681117333,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTExNzMzMw==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if child_x.t.name.startswith('WRAP_') else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert (child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if child_x.t.name.startswith('WRAP_') else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if child_x.t.name.startswith('WRAP_') else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert (child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if child_x.t.name.startswith('WRAP_') else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"n\" if child_x.t.name.startswith('WRAP_') else \"n:\"\n+        self._construct(NodeType.WRAP_N, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_0NOTEQUAL], tag+child_x.desc)\n+        return self\n+\n+    def construct_l(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"l\" if child_x.t.name.startswith('WRAP_') else \"l:\"\n+        script = [OP_IF, 0, OP_ELSE]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_L, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_u(self, child_x):\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"u\" if child_x.t.name.startswith('WRAP_') else \"u:\"\n+        script = [OP_IF]+child_x._script+[OP_ELSE, 0, OP_ENDIF]\n+        self._construct(NodeType.WRAP_U, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_thresh(self, k, children_n):\n+        n = len(children_n)\n+        assert n > k > 1",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1290,
    "original_position": 664,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`thresh`\u00a0now supports `k == 1`\u00a0or `k == n`.",
    "created_at": "2021-08-02T16:37:17Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681117333",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681117333"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681117333"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681117333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1290,
    "original_line": 1095,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681523358",
    "pull_request_review_id": 719693098,
    "id": 681523358,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTUyMzM1OA==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 584,
    "original_position": 232,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why `5`? It wouldn't match `1 <pk> 1 CMS`?",
    "created_at": "2021-08-03T07:53:42Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681523358",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681523358"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681523358"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681523358/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 584,
    "original_line": 325,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681532313",
    "pull_request_review_id": 719693098,
    "id": 681532313,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTUzMjMxMw==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 595,
    "original_position": 243,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why `k`? I think you rather want to iterate from `idx` to `expr_list_len-2` here?",
    "created_at": "2021-08-03T08:06:52Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681532313",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681532313"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681532313"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681532313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 592,
    "original_start_line": 333,
    "start_side": "RIGHT",
    "line": 595,
    "original_line": 336,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681802030",
    "pull_request_review_id": 719693098,
    "id": 681802030,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTgwMjAzMA==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 933,
    "original_position": 325,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should check that `child_x` is `V` and y is `B`, `K` or `V`",
    "created_at": "2021-08-03T14:15:52Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681802030",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681802030"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r681802030"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681802030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 933,
    "original_line": 756,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682402887",
    "pull_request_review_id": 719693098,
    "id": 682402887,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjQwMjg4Nw==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1163,
    "original_position": 544,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This needs to check that `child_x` is `V`",
    "created_at": "2021-08-04T08:28:42Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682402887",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682402887"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682402887"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682402887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1163,
    "original_line": 975,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682497072",
    "pull_request_review_id": 719693098,
    "id": 682497072,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjQ5NzA3Mg==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 165,
    "original_position": 55,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Similarly as for `pk()`, `pkh()` is now an alias for `c:pk_h()`.",
    "created_at": "2021-08-04T10:38:12Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682497072",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682497072"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682497072"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682497072/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 165,
    "original_line": 148,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682518289",
    "pull_request_review_id": 719693098,
    "id": 682518289,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjUxODI4OQ==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 847,
    "original_position": 307,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should also check the other boundary imo:\r\n```python\r\nassert delay > 0 and delay < 2**31\r\n```",
    "created_at": "2021-08-04T11:11:22Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682518289",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682518289"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682518289"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682518289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 847,
    "original_line": 400,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682523060",
    "pull_request_review_id": 719693098,
    "id": 682523060,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjUyMzA2MA==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1084,
    "original_position": 469,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This should check `Bdu`\u00a0for `x` and either `B`, `K` or `V`\u00a0for both y and z.\r\n```python\r\n        # X is Bdu; Y and Z are both B, K, or V\r\n        assert all([getattr(child_x.p, pt) for pt in \"Bdu\"])\r\n        for child in child_y, child_z:\r\n            assert any([getattr(child.p, t) for t in \"BKV\"])\r\n```",
    "created_at": "2021-08-04T11:19:50Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682523060",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682523060"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682523060"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682523060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1084,
    "original_line": 900,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682525185",
    "pull_request_review_id": 719693098,
    "id": 682525185,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjUyNTE4NQ==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 954,
    "original_position": 345,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`x` must be `B` and `y` must be `W`..",
    "created_at": "2021-08-04T11:23:08Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682525185",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682525185"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682525185"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682525185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 954,
    "original_line": 776,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682529133",
    "pull_request_review_id": 719693098,
    "id": 682529133,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjUyOTEzMw==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 999,
    "original_position": 388,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "or_b(X,Z) | X is Bd; Z is Wd",
    "created_at": "2021-08-04T11:29:15Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682529133",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682529133"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682529133"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682529133/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 999,
    "original_line": 819,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682529339",
    "pull_request_review_id": 719693098,
    "id": 682529339,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjUyOTMzOQ==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1020,
    "original_position": 408,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "or_d(X,Z) | X is Bdu; Z is B",
    "created_at": "2021-08-04T11:29:34Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682529339",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682529339"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682529339"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682529339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1020,
    "original_line": 839,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682529925",
    "pull_request_review_id": 719693098,
    "id": 682529925,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjUyOTkyNQ==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1061,
    "original_position": 447,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "or_i(X,Z) | both are B, K, or V",
    "created_at": "2021-08-04T11:30:32Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682529925",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682529925"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682529925"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682529925/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1061,
    "original_line": 878,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682707659",
    "pull_request_review_id": 719693098,
    "id": 682707659,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcwNzY1OQ==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 836,
    "original_position": 297,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`pk_h` is defined as taking a key, not a key hash. Different implementors have different opinions on this but we need to at least be able to parse pk_h() nodes with keys.",
    "created_at": "2021-08-04T15:08:34Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682707659",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682707659"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r682707659"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/682707659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 835,
    "original_start_line": 389,
    "start_side": "RIGHT",
    "line": 836,
    "original_line": 390,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683353332",
    "pull_request_review_id": 719693098,
    "id": 683353332,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MzM1MzMzMg==",
    "diff_hunk": "@@ -101,3 +108,467 @@ class NodeType(Enum):\n     ANDOR = 27\n     THRESH = 28\n     THRESH_M = 29\n+\n+\n+class Node:\n+    \"\"\"Miniscript expression class\n+\n+    Provides methods to instantiate a miniscript node from a string descriptor\n+    or script. Node.sat, Node.dsat, Node.sat_ncan and Node.dsat_ncan return a\n+    list of tuples which encode the (dis)satisfying witness stack.\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.desc = ''\n+        self.children = None\n+        self.t = None\n+        self._sat = None\n+        self._k = None\n+        self._pk = []\n+        self._pk_h = None\n+\n+    @staticmethod\n+    def from_desc(string):\n+        \"\"\"Construct miniscript node from string descriptor\"\"\"\n+        tag, child_exprs = Node._parse_string(string)\n+        k = None\n+\n+        if tag == '0':\n+            return Node().construct_just_0()\n+\n+        if tag == '1':\n+            return Node().construct_just_1()\n+\n+        if tag == 'pk':\n+            key_b = bytes.fromhex(child_exprs[0])\n+            key_obj = ECPubKey()\n+            key_obj.set(key_b)\n+            return Node().construct_pk(key_obj)\n+\n+        if tag == 'pk_h':\n+            keyhash_b = bytes.fromhex(child_exprs[0])\n+            return Node().construct_pk_h(keyhash_b)\n+\n+        if tag == \"older\":\n+            n = int(child_exprs[0])\n+            return Node().construct_older(n)\n+\n+        if tag == \"after\":\n+            time = int(child_exprs[0])\n+            return Node().construct_after(time)\n+\n+        if tag in [\"sha256\", \"hash256\", \"ripemd160\", \"hash160\"]:\n+            hash_b = bytes.fromhex(child_exprs[0])\n+            return getattr(Node(), \"construct_\"+tag)(hash_b)\n+\n+        if tag == 'thresh_m':\n+            k = int(child_exprs.pop(0))\n+            key_n = []\n+            for child_expr in child_exprs:\n+                key_obj = ECPubKey()\n+                key_obj.set(bytes.fromhex(child_expr))\n+                key_n.append(key_obj)\n+            return Node().construct_thresh_m(k, key_n)\n+\n+        if tag == 'thresh':\n+            k = int(child_exprs.pop(0))\n+            return Node().construct_thresh(\n+                k, Node._parse_child_strings(child_exprs))\n+\n+        # Standard node constructor forms:\n+        # construct_tag(node_x, node_y, ...):\n+        return getattr(Node(), \"construct_\"+tag)(\n+                *Node._parse_child_strings(child_exprs))\n+\n+    @property\n+    def script(self):\n+        return CScript(Node._collapse_script(self._script))\n+\n+    @staticmethod\n+    def from_script(c_script):\n+        \"\"\"Construct miniscript node from script\"\"\"\n+        expr_list = []\n+        for op in c_script:\n+            # Encode 0, 20, 32 as int.\n+            # Other values are coerced to int types with Node._coerce_to_int()\n+            if op in [b'', b'\\x14', b'\\x20']:\n+                op_int = int.from_bytes(op, byteorder='big')\n+                expr_list.append(op_int)\n+            else:\n+                expr_list.append(op)\n+\n+        # Decompose script:\n+        # OP_CHECKSIGVERIFY > OP_CHECKSIG + OP_VERIFY\n+        # OP_CHECKMULTISIGVERIFY > OP_CHECKMULTISIG + OP_VERIFY\n+        # OP_EQUALVERIFY > OP_EQUAL + OP_VERIFY\n+        expr_list = Node._decompose_script(expr_list)\n+        expr_list_len = len(expr_list)\n+\n+        # Parse for terminal expressions.\n+        idx = 0\n+        while idx < expr_list_len:\n+\n+            # Match against pk(key).\n+            if isinstance(expr_list[idx], bytes) and \\\n+                    len(expr_list[idx]) == 33 and \\\n+                    expr_list[idx][0] in [2, 3]:\n+                key = ECPubKey()\n+                key.set(expr_list[idx])\n+                expr_list[idx] = Node().construct_pk(key)\n+\n+            # Match against just1.\n+            if expr_list[idx] == 1:\n+                expr_list[idx] = Node().construct_just_1()\n+\n+            # Match against just0.\n+            if expr_list[idx] == 0:\n+                expr_list[idx] = Node().construct_just_0()\n+\n+            # 2 element terminal expressions.\n+            if expr_list_len-idx >= 2:\n+                try:\n+                    # Timelock encoding n.\n+                    n_int = Node._coerce_to_int(expr_list[idx])\n+                    # Match against older.\n+                    if n_int >= 1 and \\\n+                            expr_list[idx+1] == OP_CHECKSEQUENCEVERIFY:\n+                        node = Node().construct_older(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                    # Match against after.\n+                    elif n_int >= 1 and n_int <= 2**32 and \\\n+                            expr_list[idx+1] == OP_CHECKLOCKTIMEVERIFY:\n+                        node = Node().construct_after(n_int)\n+                        expr_list = expr_list[:idx]+[node]+expr_list[idx+2:]\n+                        expr_list_len -= 1\n+                except Exception:\n+                    pass\n+\n+            # 4 element terminal expressions.\n+            if expr_list_len-idx >= 5:\n+\n+                # Match against pk_h(pkhash).\n+                if expr_list[idx:idx+2] == [OP_DUP, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+2], bytes) and \\\n+                        len(expr_list[idx+2]) == 20 and \\\n+                        expr_list[idx+3:idx+5] == [OP_EQUAL, OP_VERIFY]:\n+                    node = Node().construct_pk_h(expr_list[idx+2])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+5:]\n+                    # Reduce length of list after node construction.\n+                    expr_list_len -= 4\n+\n+            # 6 element terminal expressions.\n+            if expr_list_len-idx >= 7:\n+\n+                # Match against sha256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_SHA256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_sha256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash256.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH256] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 32 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash256(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against ripemd160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_RIPEMD160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_ripemd160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+                # Match against hash160.\n+                if expr_list[idx:idx+5] == [OP_SIZE, 32, OP_EQUAL,\n+                                            OP_VERIFY, OP_HASH160] and \\\n+                        isinstance(expr_list[idx+5], bytes) and \\\n+                        len(expr_list[idx+5]) == 20 and \\\n+                        expr_list[idx+6] == OP_EQUAL:\n+                    node = Node().construct_hash160(expr_list[idx+5])\n+                    expr_list = expr_list[:idx]+[node]+expr_list[idx+7:]\n+                    expr_list_len -= 6\n+\n+            # Increment index.\n+            idx += 1\n+\n+        # Construct AST recursively.\n+        return Node._parse_expr_list(expr_list)\n+\n+    @staticmethod\n+    def _parse_expr_list(expr_list):\n+        # Every recursive call must progress the AST construction,\n+        # until it is complete (single root node remains).\n+        expr_list_len = len(expr_list)\n+\n+        # Root node reached.\n+        if expr_list_len == 1 and isinstance(expr_list[0], Node):\n+            return expr_list[0]\n+\n+        # Step through each list index and match against templates.\n+        idx = expr_list_len - 1\n+        while idx >= 0:\n+\n+            # Match against thresh_m.\n+            # Termainal expression, but k and n values can be Nodes (JUST_0/1)\n+            if expr_list_len-idx >= 5 and \\\n+                    ((\n+                    isinstance(expr_list[idx], int) and\n+                    expr_list_len-idx-3 >= expr_list[idx] >= 1\n+                    ) or (\n+                    isinstance(expr_list[idx], Node) and\n+                    expr_list[idx].t == NodeType.JUST_1\n+                    )):\n+                k = Node._coerce_to_int(expr_list[idx])\n+                # Permissible values for n:\n+                # len(expr)-3 >= n >= 1\n+                for n in range(k, expr_list_len-2):\n+                    # Match ... <PK>*n ...\n+                    match, pk_m = True, []\n+                    for i in range(n):\n+                        if not (isinstance(expr_list[idx+1+i], Node) and\n+                                expr_list[idx+1+i].t == NodeType.PK):\n+                            match = False\n+                            break\n+                        else:\n+                            key = ECPubKey()\n+                            key.set(expr_list[idx+1+i]._pk[0])\n+                            pk_m.append(key)\n+                    # Match ... <m> <OP_CHECKMULTISIG>\n+                    if match is True:\n+                        m = Node._coerce_to_int(expr_list[idx+n+1])\n+                        if isinstance(m, int) and m == len(pk_m) and \\\n+                                expr_list[idx+n+2] == OP_CHECKMULTISIG:\n+                            try:\n+                                node = Node().construct_thresh_m(k, pk_m)\n+                                expr_list = expr_list[:idx] + [node] + \\\n+                                    expr_list[idx+n+3:]\n+                                return Node._parse_expr_list(expr_list)\n+                            except Exception:\n+                                pass\n+\n+            # Right-to-left parsing.\n+            # Step one position left.\n+            idx -= 1\n+\n+        # No match found.\n+        raise Exception(\"Malformed miniscript\")\n+\n+    def construct_just_1(self):\n+        self._construct(NodeType.JUST_1, Property().from_string(\"Bzufm\"),\n+                        [],\n+                        [1], '1')\n+        return self\n+\n+    def construct_just_0(self):\n+        self._construct(NodeType.JUST_0, Property().from_string(\"Bzudems\"),\n+                        [],\n+                        [0], '0')\n+        return self\n+\n+    def construct_pk(self, pubkey):\n+        assert isinstance(pubkey, ECPubKey) and pubkey.is_valid\n+        self._pk = [pubkey.get_bytes()]\n+        self._construct(NodeType.PK, Property().from_string(\"Konudems\"),\n+                        [],\n+                        [pubkey.get_bytes()], 'pk('+self._pk[0].hex()+')'\n+                        )\n+        return self\n+\n+    def construct_pk_h(self, pk_hash_digest):\n+        assert isinstance(pk_hash_digest, bytes) and len(pk_hash_digest) == 20\n+        self._pk_h = pk_hash_digest\n+        self._construct(NodeType.PK_H, Property().from_string(\"Knudems\"),\n+                        [],\n+                        [OP_DUP, OP_HASH160, pk_hash_digest, OP_EQUALVERIFY],\n+                        'pk_h('+pk_hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_older(self, delay):\n+        assert delay >= 1\n+        self._delay = delay\n+        self._construct(NodeType.OLDER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        [delay, OP_CHECKSEQUENCEVERIFY],\n+                        'older('+str(delay)+')'\n+                        )\n+        return self\n+\n+    def construct_after(self, time):\n+        assert time >= 1 and time < 2**31\n+        self._time = time\n+        self._construct(NodeType.AFTER, Property().from_string(\"Bzfm\"),\n+                        [],\n+                        [time, OP_CHECKLOCKTIMEVERIFY],\n+                        'after('+str(time)+')'\n+                        )\n+        return self\n+\n+    def construct_sha256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._sha256 = hash_digest\n+        self._construct(NodeType.SHA256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_SHA256, hash_digest, OP_EQUAL],\n+                        'sha256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash256(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 32\n+        self._hash256 = hash_digest\n+        self._construct(NodeType.HASH256, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH256, hash_digest, OP_EQUAL],\n+                        'hash256('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_ripemd160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._ripemd160 = hash_digest\n+        self._construct(NodeType.RIPEMD160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_RIPEMD160, hash_digest, OP_EQUAL],\n+                        'ripemd160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_hash160(self, hash_digest):\n+        assert isinstance(hash_digest, bytes) and len(hash_digest) == 20\n+        self._hash160 = hash_digest\n+        self._construct(NodeType.HASH160, Property().from_string(\"Bonudm\"),\n+                        [],\n+                        [OP_SIZE, 32, OP_EQUALVERIFY,\n+                         OP_HASH160, hash_digest, OP_EQUAL],\n+                        'hash160('+hash_digest.hex()+')'\n+                        )\n+        return self\n+\n+    def construct_thresh_m(self, k, keys_n):\n+        self._k = k\n+        n = len(keys_n)\n+        assert n >= k >= 1\n+        prop_str = \"Bnudems\"\n+        self._pk_n = [key.get_bytes() for key in keys_n]\n+        desc = \"thresh_m(\"+str(k)+\",\"\n+        for idx, key_b in enumerate(self._pk_n):\n+            desc += key_b.hex()\n+            desc += \",\" if idx != (n-1) else \")\"\n+        self._construct(NodeType.THRESH_M, Property().from_string(prop_str),\n+                        [],\n+                        [k, *self._pk_n, n, OP_CHECKMULTISIG], desc\n+                        )\n+        return self\n+\n+    def _construct(self,\n+                   node_type, node_prop,\n+                   children,\n+                   script, desc):\n+        self.t = node_type\n+        self.p = node_prop\n+        self.children = children\n+        self._script = script\n+        self.desc = desc\n+\n+    # Utility methods.\n+    @staticmethod\n+    def _coerce_to_int(expr):\n+        # Coerce expression to int when iterating through CScript expressions\n+        # after terminal expressions have been parsed.\n+        if isinstance(expr, bytes):\n+            op_int = int.from_bytes(expr, byteorder=\"big\")",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1615,
    "original_position": 402,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a62393ad15103f9d5824d41fb2eed392a84dd66b",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Script Numbers are little endian. Also, you don't check if the sign bit is set. Consider something like so (what i'm using for python-miniscript):\r\n```python\r\nclass ScriptNumError(ValueError):\r\n    def __init__(self, message):\r\n        self.message = message\r\n\r\n\r\ndef read_script_number(data):\r\n    \"\"\"Read a Script number from {data} bytes\"\"\"\r\n    size = len(data)\r\n    if size > 4:\r\n        raise ScriptNumError(\"Too large push\")\r\n\r\n    if size == 0:\r\n        return 0\r\n\r\n    # We always check for minimal encoding\r\n    if (data[size - 1] & 0x7f) == 0:\r\n        if size == 1 or (data[size - 2] & 0x80) == 0:\r\n            raise ScriptNumError(\"Non minimal encoding\")\r\n\r\n    res = int.from_bytes(data, byteorder=\"little\")\r\n\r\n    # Remove the sign bit if set, and negate the result\r\n    if data[size - 1] & 0x80:\r\n        return -(res & ~(0x80 << (size - 1)))\r\n    return res\r\n```",
    "created_at": "2021-08-05T11:05:13Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r683353332",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683353332"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r683353332"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/683353332/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1610,
    "original_start_line": 490,
    "start_side": "RIGHT",
    "line": 1615,
    "original_line": 495,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684013210",
    "pull_request_review_id": 719693098,
    "id": 684013210,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDAxMzIxMA==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if child_x.t.name.startswith('WRAP_') else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert (child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if child_x.t.name.startswith('WRAP_') else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if child_x.t.name.startswith('WRAP_') else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert (child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if child_x.t.name.startswith('WRAP_') else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1238,
    "original_position": 615,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`X` must be `B`",
    "created_at": "2021-08-06T07:30:39Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684013210",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684013210"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684013210"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684013210/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1238,
    "original_line": 1046,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684064607",
    "pull_request_review_id": 719693098,
    "id": 684064607,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDA2NDYwNw==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1044,
    "original_position": 431,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "X is Bdu; Z is V",
    "created_at": "2021-08-06T08:45:55Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684064607",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684064607"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684064607"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684064607/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1044,
    "original_line": 862,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684064998",
    "pull_request_review_id": 719693098,
    "id": 684064998,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDA2NDk5OA==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if child_x.t.name.startswith('WRAP_') else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert (child_x.p.z)",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1180,
    "original_position": 560,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "X is Vz",
    "created_at": "2021-08-06T08:46:33Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684064998",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684064998"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684064998"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684064998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1179,
    "original_start_line": 990,
    "start_side": "RIGHT",
    "line": 1180,
    "original_line": 991,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684075249",
    "pull_request_review_id": 719693098,
    "id": 684075249,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDA3NTI0OQ==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if child_x.t.name.startswith('WRAP_') else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert (child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if child_x.t.name.startswith('WRAP_') else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if child_x.t.name.startswith('WRAP_') else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert (child_x.p.n)",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1222,
    "original_position": 600,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "X is Bn",
    "created_at": "2021-08-06T09:01:31Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684075249",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684075249"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684075249"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684075249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 1221,
    "original_start_line": 1030,
    "start_side": "RIGHT",
    "line": 1222,
    "original_line": 1031,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684077295",
    "pull_request_review_id": 719693098,
    "id": 684077295,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDA3NzI5NQ==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False\n+        prop_str = \"d\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_y.p.z else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and \\\n+            child_x.p.e else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_N, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+[OP_NOTIF, 0, OP_ELSE]+child_y._script+[\n+                            OP_ENDIF],\n+                        \"and_n(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_b(self, child_x, child_z):\n+        assert (child_x.p.d and child_z.p.d)\n+        assert (child_x.p.f or child_z.p.f) is False\n+        prop_str = \"du\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_z.p.o) or \\\n+            (child_x.p.o and child_z.p.z) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_B, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+child_z._script+[OP_BOOLOR],\n+                        \"or_b(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_d(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"u\" if child_x.p.u and \\\n+            (child_x.p.f or child_z.p.u) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_D, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_IFDUP, OP_NOTIF]+child_z._script+[\n+                            OP_ENDIF],\n+                        \"or_d(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_c(self, child_x, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"V\" if child_x.p.B and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o and child_z.p.z else \"\"\n+        prop_str += \"f\" if child_x.p.f or child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_C, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[OP_ENDIF],\n+                        \"or_c(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_or_i(self, child_x, child_z):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.K and child_z.p.K else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_z.p.V else \"\"\n+        prop_str += \"u\" if child_x.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d or child_z.p.d else \"\"\n+        prop_str += \"o\" if child_x.p.z and child_z.p.z else \"\"\n+        prop_str += \"e\" if (child_x.p.e and child_z.p.f) or \\\n+            (child_x.p.f and child_z.p.e) else \"\"\n+        prop_str += \"f\" if child_x.p.f and child_z.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_z.p.m and \\\n+            (child_x.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_x.p.s and child_z.p.s else \"\"\n+        self._construct(NodeType.OR_I, Property().from_string(prop_str),\n+                        [child_x, child_z],\n+                        [OP_IF]+child_x._script+[OP_ELSE]+child_z._script+[\n+                        OP_ENDIF],\n+                        \"or_i(\"+child_x.desc+\",\"+child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_andor(self, child_x, child_y, child_z):\n+        assert (child_x.p.d and child_x.p.u)\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.B and child_z.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.B and child_y.p.K and child_z.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.B and child_y.p.V and child_z.p.V else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z and child_z.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o and child_z.p.o) or \\\n+            (child_x.p.o and child_y.p.z and child_z.p.z) else \"\"\n+        prop_str += \"u\" if child_y.p.u and child_z.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_z.p.d else \"\"\n+        prop_str += \"f\" if child_z.p.f and (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_z.p.e and \\\n+            (child_x.p.s or child_y.p.f) else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m and child_z.p.m and \\\n+            child_x.p.e and (child_x.p.s or child_y.p.s or child_z.p.s) else \"\"\n+        prop_str += \"s\" if child_z.p.s and (child_x.p.s or child_y.p.s) else \"\"\n+        self._construct(NodeType.ANDOR, Property().from_string(prop_str),\n+                        [child_x, child_y, child_z],\n+                        child_x._script+[OP_NOTIF]+child_z._script+[\n+                        OP_ELSE]+child_y._script+[OP_ENDIF],\n+                        \"andor(\"+child_x.desc+\",\"+child_y.desc+\",\"\n+                        + child_z.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_a(self, child_x):\n+        prop_str = \"\"\n+        prop_str += \"W\" if child_x.p.B else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"a\" if child_x.t.name.startswith('WRAP_') else \"a:\"\n+        self._construct(NodeType.WRAP_A, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_TOALTSTACK]+child_x._script+[OP_FROMALTSTACK],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_s(self, child_x):\n+        assert (child_x.p.B and child_x.p.o)\n+        prop_str = \"W\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"s\" if child_x.t.name.startswith('WRAP_') else \"s:\"\n+        self._construct(NodeType.WRAP_S, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_SWAP]+child_x._script, tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_c(self, child_x):\n+        assert child_x.p.K\n+        prop_str = \"Bu\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"c\" if child_x.t.name.startswith('WRAP_') else \"c:\"\n+        self._construct(NodeType.WRAP_C, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_CHECKSIG], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_t(self, child_x):\n+        prop_str = \"uf\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"t\" if child_x.t.name.startswith('WRAP_') else \"t:\"\n+        self._construct(NodeType.WRAP_T, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[1], tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_d(self, child_x):\n+        assert (child_x.p.z)\n+        prop_str = \"nud\"\n+        prop_str += \"B\" if child_x.p.V else \"\"\n+        prop_str += \"o\" if child_x.p.z else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"d\" if child_x.t.name.startswith('WRAP_') else \"d:\"\n+        self._construct(NodeType.WRAP_D, Property().from_string(prop_str),\n+                        [child_x],\n+                        [OP_DUP, OP_IF]+child_x._script+[OP_ENDIF],\n+                        tag+child_x.desc\n+                        )\n+        return self\n+\n+    def construct_v(self, child_x):\n+        assert child_x.p.B\n+        prop_str = \"V\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"f\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"v\" if child_x.t.name.startswith('WRAP_') else \"v:\"\n+        # Combine OP_CHECKSIG/OP_CHECKMULTISIG/OP_EQUAL with OP_VERIFY.\n+        if child_x._script[-1] == OP_CHECKSIG:\n+            script = child_x._script[:-1]+[OP_CHECKSIGVERIFY]\n+        elif child_x._script[-1] == OP_CHECKMULTISIG:\n+            script = child_x._script[:-1]+[OP_CHECKMULTISIGVERIFY]\n+        elif child_x._script[-1] == OP_EQUAL:\n+            script = child_x._script[:-1]+[OP_EQUALVERIFY]\n+        else:\n+            script = child_x._script+[OP_VERIFY]\n+        self._construct(NodeType.WRAP_V, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_j(self, child_x):\n+        assert (child_x.p.n)\n+        prop_str = \"nd\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"u\" if child_x.p.u else \"\"\n+        prop_str += \"e\" if child_x.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"j\" if child_x.t.name.startswith('WRAP_') else \"j:\"\n+        script = [OP_SIZE, OP_0NOTEQUAL, OP_IF]+child_x._script+[OP_ENDIF]\n+        self._construct(NodeType.WRAP_J, Property().from_string(prop_str),\n+                        [child_x],\n+                        script, tag+child_x.desc)\n+        return self\n+\n+    def construct_n(self, child_x):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B else \"\"\n+        prop_str += \"z\" if child_x.p.z else \"\"\n+        prop_str += \"o\" if child_x.p.o else \"\"\n+        prop_str += \"n\" if child_x.p.n else \"\"\n+        prop_str += \"d\" if child_x.p.d else \"\"\n+        prop_str += \"f\" if child_x.p.f else \"\"\n+        prop_str += \"e\" if child_x.p.e else \"\"\n+        prop_str += \"m\" if child_x.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s else \"\"\n+        tag = \"n\" if child_x.t.name.startswith('WRAP_') else \"n:\"\n+        self._construct(NodeType.WRAP_N, Property().from_string(prop_str),\n+                        [child_x],\n+                        child_x._script+[OP_0NOTEQUAL], tag+child_x.desc)\n+        return self\n+\n+    def construct_l(self, child_x):",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 1256,
    "original_position": 632,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "X must be B, K or V",
    "created_at": "2021-08-06T09:04:39Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684077295",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684077295"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684077295"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684077295/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1256,
    "original_line": 1063,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684085045",
    "pull_request_review_id": 719693098,
    "id": 684085045,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDA4NTA0NQ==",
    "diff_hunk": "@@ -476,6 +752,392 @@ def construct_thresh_m(self, k, keys_n):\n                         )\n         return self\n \n+\n+    def construct_and_v(self, child_x, child_y):\n+        prop_str = \"\"\n+        prop_str += \"B\" if child_x.p.V and child_y.p.B else \"\"\n+        prop_str += \"K\" if child_x.p.V and child_y.p.K else \"\"\n+        prop_str += \"V\" if child_x.p.V and child_y.p.V else \"\"\n+        prop_str += \"u\" if child_y.p.u else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"f\" if child_x.p.s or child_y.p.f else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_V, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script,\n+                        \"and_v(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_b(self, child_x, child_y):\n+        prop_str = \"u\"\n+        prop_str += \"B\" if child_x.p.B and child_y.p.W else \"\"\n+        prop_str += \"z\" if child_x.p.z and child_y.p.z else \"\"\n+        prop_str += \"o\" if (child_x.p.z and child_y.p.o) or \\\n+            (child_x.p.o and child_y.p.z) else \"\"\n+        prop_str += \"n\" if child_x.p.n or (child_x.p.z and child_y.p.n) else \"\"\n+        prop_str += \"d\" if child_x.p.d and child_y.p.d else \"\"\n+        prop_str += \"f\" if (child_x.p.f and child_y.p.f) or \\\n+            (child_x.p.s and child_x.p.f) or \\\n+            (child_y.p.s and child_y.p.f) else \"\"\n+        prop_str += \"e\" if child_x.p.e and child_y.p.e and \\\n+            child_x.p.s and child_y.p.s else \"\"\n+        prop_str += \"m\" if child_x.p.m and child_y.p.m else \"\"\n+        prop_str += \"s\" if child_x.p.s or child_y.p.s else \"\"\n+        self._construct(NodeType.AND_B, Property().from_string(prop_str),\n+                        [child_x, child_y],\n+                        child_x._script+child_y._script+[OP_BOOLAND],\n+                        \"and_b(\"+child_x.desc+\",\"+child_y.desc+\")\"\n+                        )\n+        return self\n+\n+    def construct_and_n(self, child_x, child_y):\n+        assert (child_x.p.d and child_x.p.u)\n+        assert (child_x.p.f and child_y.p.f) is False",
    "path": "test/functional/test_framework/miniscript.py",
    "position": 979,
    "original_position": 369,
    "commit_id": "f8a30b4c76f32ffe7d313ecbcdea18d900ef4d52",
    "original_commit_id": "a85d9c9b74af95da6a8f63e3ed15c3b6fd284c2e",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "X is Bdu; Y and Z are both B, K, or V",
    "created_at": "2021-08-06T09:16:37Z",
    "updated_at": "2021-08-06T14:59:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684085045",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684085045"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17975#discussion_r684085045"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17975"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684085045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 977,
    "original_start_line": 798,
    "start_side": "RIGHT",
    "line": 979,
    "original_line": 800,
    "side": "RIGHT"
  }
]