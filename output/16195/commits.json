[
  {
    "sha": "f36d1d5b8934aac60d3097047ecedeb58bae2185",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzZkMWQ1Yjg5MzRhYWM2MGQzMDk3MDQ3ZWNlZGViNThiYWUyMTg1",
    "commit": {
      "author": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-06-05T22:54:11Z"
      },
      "committer": {
        "name": "Jeffrey Czyz",
        "email": "jkczyz@gmail.com",
        "date": "2019-11-21T02:19:13Z"
      },
      "message": "Use void* throughout support/lockedpool.h\n\nReplace uses of char* with void* in Arena's member variables. Instead,\ncast to char* where needed in the implementation.\n\nCertain compiler environments disallow std::hash<char*> specializations\nto prevent hashing the pointer's value instead of the string contents.\nThus, compilation fails when std::unordered_map is keyed by char*.\n\nExplicitly using void* is a workaround in such environments. For\nconsistency, void* is used throughout all member variables similarly to\nthe public interface.",
      "tree": {
        "sha": "695a8cf90b7c655717b0f7f572285d643793ae27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/695a8cf90b7c655717b0f7f572285d643793ae27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f36d1d5b8934aac60d3097047ecedeb58bae2185",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f36d1d5b8934aac60d3097047ecedeb58bae2185",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f36d1d5b8934aac60d3097047ecedeb58bae2185",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f36d1d5b8934aac60d3097047ecedeb58bae2185/comments",
    "author": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jkczyz",
      "id": 4015903,
      "node_id": "MDQ6VXNlcjQwMTU5MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4015903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jkczyz",
      "html_url": "https://github.com/jkczyz",
      "followers_url": "https://api.github.com/users/jkczyz/followers",
      "following_url": "https://api.github.com/users/jkczyz/following{/other_user}",
      "gists_url": "https://api.github.com/users/jkczyz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jkczyz/subscriptions",
      "organizations_url": "https://api.github.com/users/jkczyz/orgs",
      "repos_url": "https://api.github.com/users/jkczyz/repos",
      "events_url": "https://api.github.com/users/jkczyz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jkczyz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7bc9b8330096d1f4f1fa563b855b88da425226e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7bc9b8330096d1f4f1fa563b855b88da425226e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7bc9b8330096d1f4f1fa563b855b88da425226e"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 15,
      "deletions": 13
    },
    "files": [
      {
        "sha": "6d767ca210638c93828a150404411a15db44b90e",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36d1d5b8934aac60d3097047ecedeb58bae2185/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36d1d5b8934aac60d3097047ecedeb58bae2185/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=f36d1d5b8934aac60d3097047ecedeb58bae2185",
        "patch": "@@ -27,6 +27,7 @@\n #include <iomanip>\n #include <iostream>\n #endif\n+#include <utility>\n \n LockedPoolManager* LockedPoolManager::_instance = nullptr;\n std::once_flag LockedPoolManager::init_flag;\n@@ -44,12 +45,12 @@ static inline size_t align_up(size_t x, size_t align)\n // Implementation: Arena\n \n Arena::Arena(void *base_in, size_t size_in, size_t alignment_in):\n-    base(static_cast<char*>(base_in)), end(static_cast<char*>(base_in) + size_in), alignment(alignment_in)\n+    base(base_in), end(static_cast<char*>(base_in) + size_in), alignment(alignment_in)\n {\n     // Start with one free chunk that covers the entire arena\n     auto it = size_to_free_chunk.emplace(size_in, base);\n     chunks_free.emplace(base, it);\n-    chunks_free_end.emplace(base + size_in, it);\n+    chunks_free_end.emplace(static_cast<char*>(base) + size_in, it);\n }\n \n Arena::~Arena()\n@@ -75,20 +76,21 @@ void* Arena::alloc(size_t size)\n \n     // Create the used-chunk, taking its space from the end of the free-chunk\n     const size_t size_remaining = size_ptr_it->first - size;\n-    auto allocated = chunks_used.emplace(size_ptr_it->second + size_remaining, size).first;\n-    chunks_free_end.erase(size_ptr_it->second + size_ptr_it->first);\n+    char* const free_chunk = static_cast<char*>(size_ptr_it->second);\n+    auto allocated = chunks_used.emplace(free_chunk + size_remaining, size).first;\n+    chunks_free_end.erase(free_chunk + size_ptr_it->first);\n     if (size_ptr_it->first == size) {\n         // whole chunk is used up\n         chunks_free.erase(size_ptr_it->second);\n     } else {\n         // still some memory left in the chunk\n         auto it_remaining = size_to_free_chunk.emplace(size_remaining, size_ptr_it->second);\n         chunks_free[size_ptr_it->second] = it_remaining;\n-        chunks_free_end.emplace(size_ptr_it->second + size_remaining, it_remaining);\n+        chunks_free_end.emplace(free_chunk + size_remaining, it_remaining);\n     }\n     size_to_free_chunk.erase(size_ptr_it);\n \n-    return reinterpret_cast<void*>(allocated->first);\n+    return allocated->first;\n }\n \n void Arena::free(void *ptr)\n@@ -99,11 +101,11 @@ void Arena::free(void *ptr)\n     }\n \n     // Remove chunk from used map\n-    auto i = chunks_used.find(static_cast<char*>(ptr));\n+    auto i = chunks_used.find(ptr);\n     if (i == chunks_used.end()) {\n         throw std::runtime_error(\"Arena: invalid or double free\");\n     }\n-    std::pair<char*, size_t> freed = *i;\n+    auto freed = std::make_pair(static_cast<char*>(i->first), i->second);\n     chunks_used.erase(i);\n \n     // coalesce freed with previous chunk"
      },
      {
        "sha": "ce6fedc8e8bf5e1f7989614d9644c232f9bc85b0",
        "filename": "src/support/lockedpool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f36d1d5b8934aac60d3097047ecedeb58bae2185/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f36d1d5b8934aac60d3097047ecedeb58bae2185/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=f36d1d5b8934aac60d3097047ecedeb58bae2185",
        "patch": "@@ -89,23 +89,23 @@ class Arena\n      */\n     bool addressInArena(void *ptr) const { return ptr >= base && ptr < end; }\n private:\n-    typedef std::multimap<size_t, char*> SizeToChunkSortedMap;\n+    typedef std::multimap<size_t, void*> SizeToChunkSortedMap;\n     /** Map to enable O(log(n)) best-fit allocation, as it's sorted by size */\n     SizeToChunkSortedMap size_to_free_chunk;\n \n-    typedef std::unordered_map<char*, SizeToChunkSortedMap::const_iterator> ChunkToSizeMap;\n+    typedef std::unordered_map<void*, SizeToChunkSortedMap::const_iterator> ChunkToSizeMap;\n     /** Map from begin of free chunk to its node in size_to_free_chunk */\n     ChunkToSizeMap chunks_free;\n     /** Map from end of free chunk to its node in size_to_free_chunk */\n     ChunkToSizeMap chunks_free_end;\n \n     /** Map from begin of used chunk to its size */\n-    std::unordered_map<char*, size_t> chunks_used;\n+    std::unordered_map<void*, size_t> chunks_used;\n \n     /** Base address of arena */\n-    char* base;\n+    void* base;\n     /** End address of arena */\n-    char* end;\n+    void* end;\n     /** Minimum chunk alignment */\n     size_t alignment;\n };"
      }
    ]
  }
]