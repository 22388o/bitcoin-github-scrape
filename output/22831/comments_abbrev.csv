DrahtBot,2021-08-30 00:18:12,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22087](https://github.com/bitcoin/bitcoin/pull/22087) (Validate port numbers by amadeuszpawlik)\n\nIf you consider this ",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-907908544,907908544,
jonatack,2021-08-30 10:44:31,"Re-pushed with a 20x smaller `peers.dat` containing 95 new and 3 tried entries (we need a few entries in the tried table for the asmap/addrman regression test) along with some docs per `git diff c8a6035 792c9c2`.\n",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-908238584,908238584,
MarcoFalke,2021-08-30 13:03:51,"Maybe still include docs on how to generate the file? (See also https://github.com/bitcoin/bitcoin/pull/16796#pullrequestreview-285574484)\nCan be in the commit message or a separate file.",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-908323916,908323916,
jonatack,2021-08-30 18:41:51,"> Maybe still include docs on how to generate the file? (See also [#16796 (review)](https://github.com/bitcoin/bitcoin/pull/16796#pullrequestreview-285574484))\n> Can be in the commit message or a separate file.\n\nGood idea. Done in the commit message.",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-908591411,908591411,
amitiuttarwar,2021-08-31 20:52:51,"concept ACK, thanks for adding tests. I think squashing cf90c5a7d5116468d42a812d5eed93a2ac56a248 & 80dbd9b0f46f2b12a9e6359e1aaf4c706b57f20b would make sense, because the functional test seems like the easiest way to verify the contents of the `peers.dat` file. ",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-909627569,909627569,
jonatack,2021-09-03 15:08:16,"> I think squashing [cf90c5a](https://github.com/bitcoin/bitcoin/commit/cf90c5a7d5116468d42a812d5eed93a2ac56a248) & [80dbd9b](https://github.com/bitcoin/bitcoin/commit/80dbd9b0f46f2b12a9e6359e1aaf4c706b57f20b) would make sense, because the functional test seems like the easiest way to verify the contents of the `peers.dat` file.\n\nThey began as the same commit together, then I realized that it ",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-912608978,912608978,
jonatack,2021-09-06 12:42:54,"Rebased, improved the commit messages, added additional test coverage, and renamed the test file to `feature_addrman_asmap.py`. Updated the PR title and description.",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-913619889,913619889,
jonatack,2021-09-08 15:11:40,Rebased and merged the addrman and asmap tests into one test file.,https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-915326635,915326635,
MarcoFalke,2021-09-10 09:45:37,"Sorry, needs rebase again. Maybe split out the merge of the two files into a separate pull, or at least the first commit? Review of the later commits will be easier after getting the full picture first.",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-916776358,916776358,
jonatack,2021-09-10 10:37:57,"> Sorry, needs rebase again.\n\nIt's all good, this was the merge order that made sense to me.",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-916806485,916806485,
jnewbery,2021-09-10 13:24:41,">> Rebased and merged the addrman and asmap tests into one test file.\n\n> Why? We are actively untangling addrman and asmap functionality, so I'm not sure why it now makes sense to combine the addrman and asmap functional tests into one place. This seems like the opposite of what we should be doing. cc @jnewbery.\n\nI agree. The main benefit of modularizing our components is the ability to th",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-916902316,916902316,
jonatack,2021-09-10 13:34:30,"> > > Rebased and merged the addrman and asmap tests into one test file.\n> \n> > Why? We are actively untangling addrman and asmap functionality, so I'm not sure why it now makes sense to combine the addrman and asmap functional tests into one place. This seems like the opposite of what we should be doing. cc @jnewbery.\n> \n> I agree. The main benefit of modularizing our components is the ab",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-916908896,916908896,
MarcoFalke,2021-09-10 13:48:11,"If people don't like merging the two files, but you need access to addrman mocking, one solution would be to import the `write_addrman` helper into the asmap test.",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-916918240,916918240,
jamesob,2021-09-10 14:27:19,"Concept ACK - I'm surprised and disconcerted that some minimal version of this wasn't packaged with #22791, which would've allowed unambiguous demonstration of the fix.",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-916947058,916947058,
jonatack,2021-09-10 14:36:33,"> Concept ACK - I'm surprised and disconcerted that some minimal version of this wasn't packaged with #22791, which would've allowed unambiguous demonstration of the fix.\n\nI agree. Writing a regression test is the first step to take after finding and reproducing a severe bug.\n\nSlimmed this pull down to the original two commits that focus on regression test coverage for the issue. The addit",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-916953660,916953660,
jamesob,2021-09-10 16:34:18,"ACK 22a17be0b9b56e0b35cfc5d1376e51b1e6dc0ed6 ([`jamesob/ackr/22831.1.jonatack.test_bugfix_addrman_trie`](https://github.com/jamesob/bitcoin/tree/ackr/22831.1.jonatack.test_bugfix_addrman_trie))\n\nChangeset looks like a minimal way to distinguish that the bug fixed in #22791 is actually fixed. I\n\n- `git checkout 181a1207; make ...; git checkout 22a17be0b9b56e0b35cfc5d1376e51b1e6dc0ed6`\n- `",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-917042685,917042685,
mzumsande,2021-09-10 22:07:11,"> looks like a **minimal** way to distinguish that the bug fixed in #22791 is actually fixed\n\nShouldn't a single address in Tried in an otherwise empty addrman be the minimal way to test this? (instead of 96 addresses in new and 3 in tried)",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-917241738,917241738,
ben-kaufman,2021-09-12 16:32:38,"tACK 22a17be0b9b56e0b35cfc5d1376e51b1e6dc0ed6\n\nTested against `master`and this PR - passing as expected\nTested against 181a1207ba6bd179d181f3e2534ef8676565ce72 - failing with the expected error",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-917667967,917667967,
fanquake,2021-09-13 03:51:35,"I've seen multiple mentions that the bug this PR is providing regression testing for is ""critical"", ""severe"" and ""(one of the) most critical bugs we've seen in a good while"". I just want to provide some perspective. When considering the severity of bugs I'm generally taking two things into account. The impact: what does it cause & how bad is it, and the scope: how many users does it effect. There ",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-917815184,917815184,
jarolrod,2021-09-13 09:02:04,"ACK 22a17be\n\nI mainly tested that the tests introduced here are actually effective. Checked that it would fail on the mentioned commit hash in PR description and passes on master. The mentioned testing steps were quite helpful.\n\nI've read up on the contexts of the mentioned PRs and the mentioned issue. I have no opinion on the severity of this bug, especially since it's been patched. As me",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-917985286,917985286,
mzumsande,2021-09-13 09:47:50,"Two points:\nI don't think that the bug specifically corrupts the tried tables: when peers.dat is deserialized without an asmap, and only later an asmap is loaded,  both entries from new and tried will be in incorrect buckets with respect to that asmap. It just so happens that `CAddrman::Check_()` checks whether tried entries are in their appropiate bucket, while it doesn't do the same for new.\",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-918021820,918021820,
jnewbery,2021-09-13 11:18:14,"> The addrman/asmap initialisation order bug fixed by #22791, is, in my opinion, not only low impact, but also low in scope.\n\nI totally agree @fanquake's assessment. I obviously can't be totally unbiased since I introduced the initialization order bug in #22697. However, I have discovered/fixed/reviewed fixes for bugs of the type that @fanquake mentions (DDoS, remote crashing, funds loss, etc)",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-918092775,918092775,
laanwj,2021-09-13 11:25:44,"Code review ACK 22a17be0b9b56e0b35cfc5d1376e51b1e6dc0ed6\nIt tests what it needs to test. I think it's good to have a test here. Would have been good to have it part of the original fix.\n\nI agree with @fanquake's remark about the criticality of this issue being somewhat overstated. This needs to be fixed, for sure, but losing peers.dat is not the end of the world. It's not a ""everyone needs t",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-918098033,918098033,
MarcoFalke,2021-09-13 11:29:21,"If this will be merged, it would be good to update the title first, which mentions ""bugfix"", but the code changes are adding a test.\n\nAlso the description could be shortened to not explain what the fix in anther pull did.",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-918100552,918100552,
jonatack,2021-09-14 09:18:34,"""You say it, you own it"" is an expression that comes up time after time over the decades and why, when no test seemed forthcoming after my review feedback, I proposed one. It's as simple as that. If other people owning their suggestions leads to improvement, that's great! This is about Bitcoin; ""do no harm"" and collaborating to strengthen its robustness is the goal. I'll try these ideas, thank you",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-918971146,918971146,
jonatack,2021-09-14 12:40:18,"Thank you very much to @jamesob, @rajarshimaitra, @benthecarman, @ben-kaufman, @jarolrod, @laanwj, and @vasild for the tested review ACKs.  Updated the approach and pull title/description per review feedback.",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-919111191,919111191,
mzumsande,2021-09-15 12:34:43,"Tested ACK d58681743a3ea99814c2c77ad8b7a4ea6ca3e14b\n\nI verified that `peers.dat`, which is now created at runtime, leads to `Check()` errors in 181a1207ba6bd179d181f3e2534ef8676565ce72 with the toy asmap `ip_asn.map`. ",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-919978968,919978968,
jonatack,2021-09-15 14:43:21,"Very good suggestions (thanks!) Updated per `git diff d586817 cdaab90` along with further test improvements.\n\n<details><summary>diff</summary><p>\n\n```diff\ndiff --git a/src/rpc/net.cpp b/src/rpc/net.cpp\nindex f7b6a2a333..227eec722f 100644\n--- a/src/rpc/net.cpp\n+++ b/src/rpc/net.cpp\n@@ -956,7 +956,7 @@ static RPCHelpMan addpeeraddress()\n         if (node.addrman->Add({address}, a",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-920084245,920084245,
jnewbery,2021-09-15 16:57:07,"utACK cdaab90662a54e331de0e49a89596bbb94a8ac45\n\nThis isn't a blocker, but I've never liked relying too heavily on the `assert_debug_log()` pattern in the functional tests. It's essentially asserting that a specific line of code is hit, which couples the functional tests very closely with the implementation. Ideally, the functional tests would test the functionality, and the implementation coul",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-920199755,920199755,
jonatack,2021-09-15 17:18:40,@jnewbery Agree--that sounds like a good idea for a possible follow-up.  Edit: proposed in #23035.,https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-920214881,920214881,
jamesob,2021-09-20 16:24:45,This seems ready for merge.,https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-923081352,923081352,
mzumsande,2021-09-20 17:19:12,re-ACK cdaab90662a54e331de0e49a89596bbb94a8ac45 (based on code review of diff to d586817),https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-923124016,923124016,
jamesob,2021-09-20 19:16:30,"> Therefore, #22791 fixed not just the proximal cause of the bug (initialization order), but also the ultimate cause (bad encapsulation and partially-initalized objects) by making that member const and private. Just changing the initialization order would be a partial fix, rather than eliminating a whole class of bugs.\n\nI don't want to belabor drama here, but there is a categorical difference ",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-923207453,923207453,
MarcoFalke,2021-09-21 07:34:13,"Thanks for adjusting this to use `addpeeraddress` (and hashing out the non-determinism issues that came with it).\n\nConcept ACK (didn't re-review)",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-923717891,923717891,
jnewbery,2021-09-21 08:25:06,"@jamesob - I'm not going to continue the discussion of process in this PR, since I think we're basically going in circles at this point. However, I do want to respond to your final point:\n\n> we should certainly not be gunshy about adding test coverage, whether or not its implementation is ideal.\n\nI totally disagree with this. Our standards for test code should be as high as for code in the",https://github.com/bitcoin/bitcoin/pull/22831#issuecomment-923753972,923753972,
MarcoFalke,2021-08-30 06:45:27,"The file is .2 MB, so I am wondering if there is a way to generate it with a few lines of python? Can `addpeeraddress` fill the tried table?",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r698233066,698233066,test/functional/feature_asmap.py
jonatack,2021-08-30 06:50:22,Didn't immediately see how to add tried entries programmatically but I think the file can be much smaller if concept ack.,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r698235542,698235542,test/functional/feature_asmap.py
MarcoFalke,2021-08-30 07:36:54,"An alternative is always to add the data to https://github.com/bitcoin-core/qa-assets, which doesn't slow down the main repo clone at all.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r698262027,698262027,test/functional/feature_asmap.py
jonatack,2021-08-30 09:01:19,"Reduced the `peers.dat` size 20x while still ensuring the test passes/fails\n\nbefore\n```\n236 KB\nAddrman checks started: new 3157, tried 96, total 3253\n```\nafter\n```\n11.9 KB\nAddrman checks started: new 95, tried 3, total 98\n```\n\nFiles in `test/functional/data` for me locally\n```\n$ ls -l test/functional/data\n-rw-r--r-- 1 88238 Jun  5 16:07 blockheader_testnet3.hex\n-r",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r698317771,698317771,test/functional/feature_asmap.py
jonatack,2021-08-30 09:02:58,(The new -checkaddrman option and logging is super helpful :),https://github.com/bitcoin/bitcoin/pull/22831#discussion_r698318885,698318885,test/functional/feature_asmap.py
naumenkogs,2021-09-03 13:33:51,Why making this assignment twice? The line `node.addrman->m_asmap = asmap;` is literally repeated? I think it could be done afterwards?,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r701895523,701895523,src/init.cpp
naumenkogs,2021-09-03 13:35:14,"Ah, I realized that's the whole point of this commit.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r701896544,701896544,src/init.cpp
MarcoFalke,2021-09-08 15:48:01,An alternative to adding a binary file would be to hack something together with the `serialize_addrman` function in this file,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r704550576,704550576,test/functional/feature_addrman_asmap.py
jonatack,2021-09-09 08:01:33,"I agree, it would be a logical next step if this is merged but this can do the job for now.\n\n(For now I think it's fundamental to have these regression tests in place quickly, given the number of recent bugs that escaped review, the reproducible criticality of the last bug that this adds a test for, and the addrman/asmap refactoring taking place.)",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r705086054,705086054,test/functional/feature_addrman_asmap.py
fanquake,2021-09-10 12:50:20,"I'm not sure mentioning initialization order here is needed/wanted, as `-checkaddrman` is just a generic check for corruption. I also don't think we should leak implementation details like `CAddrman::Check()`. Naming the function doesn't add value, and it's the kind of thing that just becomes outdated / needs changing again in a change like #22872.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706154132,706154132,test/functional/feature_asmap.py
fanquake,2021-09-10 13:09:31,"In 0ab75d87b7ff1cb6ebb69ffe68342b88403230b9: This commit is confusing because it adds an addrman test to `feature_asmap.py`, which from what I can see is basically the same test that is [already in feature_addrman.py](https://github.com/bitcoin/bitcoin/blob/053a5fc7d912d597cd6dc7376b479420d1eae1c0/test/functional/feature_addrman.py#L82), with the addition of `-checkaddrman`, so isn't actually asma",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706167603,706167603,test/functional/feature_asmap.py
jonatack,2021-09-10 13:31:27,"This commit was earlier.\n\nThe goal was to have minimum regression tests in place before the fix, or all the refactoring, or at least as soon as possible, to reduce the chance of accidentally adding more critical bugs.\n\nI'm trying to catch up to a moving target and may slim this back down to just the first regression test.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706184008,706184008,test/functional/feature_asmap.py
jonatack,2021-09-10 13:40:37,"I agree, and all this is removed in the commit that consolidates the tests.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706190957,706190957,test/functional/feature_asmap.py
jonatack,2021-09-10 14:29:49,"Done, slimmed down the doc.\n\n```diff\n 4. `bitcoind -asmap/-asmap=` with no file specified, using the default asmap\n+    combined with `-checkaddrman=1`\n```\n",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706229663,706229663,test/functional/feature_asmap.py
jonatack,2021-09-10 14:30:04,Dropped,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706229906,706229906,test/functional/feature_asmap.py
MarcoFalke,2021-09-10 15:10:57,"Obviously not a blocker, but if the file is removed after this is merged, then it would be better to not commit it in the first place and use `serialize_addrman` (or similar) from the beginning.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706261953,706261953,test/functional/feature_addrman_asmap.py
amitiuttarwar,2021-09-10 15:24:42,+1 to approach of `serialize_addrman` function.,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706272259,706272259,test/functional/feature_addrman_asmap.py
jonatack,2021-09-10 15:39:27,"Happy to look at it as a follow-up (or leave it for someone), but this does the job and by common sense ought to have been the first step in a responsible fix (or at least part of it), rather than ignored after https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-907856179 while embarking on many refactoring and changes, no matter how desirable they may have been. Foot-dragging and bikeshedd",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706283142,706283142,test/functional/feature_addrman_asmap.py
MarcoFalke,2021-09-10 16:02:41,"> Happy to look at it as a follow-up (or leave it for someone)\n\nHappy to propose an alternative that uses `serialize_addrman`, if you don't want to do it here. I just think that we shouldn't be adding binary files to the git repo, especially short-lived ones, when it can be avoided. Personally I'd like to see both approaches, so that they can be compared and the best one be picked. Though, aga",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706299669,706299669,test/functional/feature_addrman_asmap.py
jamesob,2021-09-10 16:23:21,"> I am not aware of any refactoring changes that have been merged in the meantime after the bug was discovered.\n\nInstead of a straight revert, or simple reordering, #22791 was a larger than necessary diff with no accompanying tests.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r706313089,706313089,test/functional/feature_addrman_asmap.py
MarcoFalke,2021-09-14 13:13:45,"nit in the second commit:\n\nMaybe assert on the longer string ""Addrman checks started: new 1, tried 1, total 2"" to clarify that this is triggered by the addrman check? Either in addition or as replacement for the comment below, which is not verified by the test itself.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708255435,708255435,test/functional/rpc_net.py
MarcoFalke,2021-09-14 13:16:40,"nit in the last commit:\n\nMaybe the same here with ""Addrman checks started: new 2, tried 2, total 4""",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708257988,708257988,test/functional/feature_asmap.py
jonatack,2021-09-14 13:21:03,"I held off because that aspect of the logging may change in #22872, but that pull can update the test too, so ok taking your feedback.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708262037,708262037,test/functional/rpc_net.py
jnewbery,2021-09-14 13:28:41,"Nit: there's nothing wrong with declaring and setting a local `tried` variable at the top of the function, but standard best practice would be to declare the variable where it's needed (https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-introduce / https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rnr-top), or better yet, don't even use a local variable and just test `requ",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708269446,708269446,src/rpc/net.cpp
jonatack,2021-09-14 13:32:25,done,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708273009,708273009,test/functional/feature_asmap.py
jonatack,2021-09-14 13:32:33,done,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708273165,708273165,test/functional/rpc_net.py
jnewbery,2021-09-14 13:37:00,"Note that the addresses will get added to the new/tried table according to the asmap that was loaded in the previous subtest, which is currently `test_default_asmap()`. If the ordering of the tests changes, then the asmap used for the previous test may be different from this, and the addresses wouldn't necessarily be rebucketed in the same locations.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708277493,708277493,test/functional/feature_asmap.py
jonatack,2021-09-14 13:43:59,"Good point. Do you think this would be worthwhile?\n```diff\n     def test_asmap_interaction_with_addrman_containing_entries(self):\n         self.log.info(""Test bitcoind -asmap with an addrman containing new and tried entries"")\n-        self.fill_addrman(node_id=0)\n         self.stop_node(0)\n         shutil.copyfile(self.asmap_raw, self.default_asmap)\n         self.start_node(0, [""-asm",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708284288,708284288,test/functional/feature_asmap.py
jonatack,2021-09-14 13:49:30,"That's true. It's subjective, but giving each of the params a name together in one place seems to make the code easier to understand in this case.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708289804,708289804,src/rpc/net.cpp
jonatack,2021-09-14 14:02:11,"I'm mildly worried this assert could be racy. Saw it fail once with 2 != 1 today. At the same time, it would be nice to assert on something in addition to the logging.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708302639,708302639,test/functional/rpc_net.py
jonatack,2021-09-14 14:30:38,updated,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708331770,708331770,test/functional/feature_asmap.py
jnewbery,2021-09-14 14:42:17,Sure. It's a style nit. Feel free to ignore.,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708343343,708343343,src/rpc/net.cpp
jnewbery,2021-09-14 14:42:59,:+1: that would make the subtests independent,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708344003,708344003,test/functional/feature_asmap.py
jnewbery,2021-09-14 14:51:16,"`1.2.3.0` is the same /16 as `1.2.3.4`, and when using `addpeeraddress()`, the source address is set to the destination address. That means that `1.2.3.0` will be placed in the same new bucket as `1.2.3.4`, and has a 1/64 chance of the bucket position colliding (depending on what addrman's nKey has been set to). If that happens, then `1.2.3.0` won't be added to addrman.\n\nYou can reduce the cha",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708352287,708352287,test/functional/rpc_net.py
jonatack,2021-09-14 14:54:47,"Excellent, thank you! Updating.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708355795,708355795,test/functional/rpc_net.py
amitiuttarwar,2021-09-14 23:58:53,"just a suggestion, the first part of the comment doesn't add much\n\n```suggestion\n                // Attempt to move the address to the ""tried"" table.\n```",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708739832,708739832,src/rpc/net.cpp
amitiuttarwar,2021-09-15 00:12:48,could be nice to pull out the `(with a different /16)` from the log & add a comment with the reasoning of why (so it maps to a different bucket) as described in https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708352287,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r708744420,708744420,test/functional/rpc_net.py
jnewbery,2021-09-15 12:40:32,I think this may still fail with a probability of 1/2^16 = 1/65536 since there could still be bucket/position collisions.,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709144653,709144653,test/functional/rpc_net.py
jonatack,2021-09-15 13:12:01,"Sounds good. WDYT:\n```diff\ndiff --git a/src/rpc/net.cpp b/src/rpc/net.cpp\nindex f7b6a2a333..227eec722f 100644\n--- a/src/rpc/net.cpp\n+++ b/src/rpc/net.cpp\n@@ -956,7 +956,7 @@ static RPCHelpMan addpeeraddress()\n         if (node.addrman->Add({address}, address)) {\n             success = true;\n             if (tried) {\n-                // Mark entry as good and possibly move it to",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709171663,709171663,test/functional/rpc_net.py
jonatack,2021-09-15 13:14:43,"Oops, meant to post it here. SGTM, what do you think: https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709171663",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709174093,709174093,test/functional/rpc_net.py
jonatack,2021-09-15 13:15:07,"thanks for the feedback, done",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709174486,709174486,src/rpc/net.cpp
jonatack,2021-09-15 13:16:39,"(an alternative could be to merge the first valid address test with the ""tried"" test) ",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709175866,709175866,test/functional/rpc_net.py
mzumsande,2021-09-15 13:16:47,"or maybe first add an addr to tried, and the next one to new - then new collisions wouldn't be an issue.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709175988,709175988,test/functional/rpc_net.py
jonatack,2021-09-15 13:25:19,@mzumsande done,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709183857,709183857,test/functional/rpc_net.py
mzumsande,2021-09-15 13:56:56,"Hmm, unfortunately this issue also seems to be possible in the regression test commit where 4 addrs are added. ",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709214655,709214655,test/functional/rpc_net.py
jonatack,2021-09-15 14:39:21,Good catch -- inversed the order.,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709256205,709256205,test/functional/rpc_net.py
jonatack,2021-09-15 14:43:42,done!,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r709260434,709260434,test/functional/rpc_net.py
vasild,2021-09-17 09:17:55,"If this nondeterminism turns out to be a problem also in other cases, then I guess a new option `bitcoind -addrmandeterministic` could be introduced which creates a deterministic addrman.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r710894714,710894714,test/functional/rpc_net.py
vasild,2021-09-17 09:24:15,"We don't check the contents of `addrs[]` here, but checked it above. If the reason for this is that the order is undeterministic, then I guess it can be sorted and then checked that it contains `1.2.3.4` and `2.0.0.0`.",https://github.com/bitcoin/bitcoin/pull/22831#discussion_r710899130,710899130,test/functional/rpc_net.py
jonatack,2021-09-19 14:39:46,Done in #23035.,https://github.com/bitcoin/bitcoin/pull/22831#discussion_r711755108,711755108,test/functional/rpc_net.py
