[
  {
    "sha": "ef99d03c2bbb6b5fa5ff3d3d3cb9c5da7d471133",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjk5ZDAzYzJiYmI2YjVmYTVmZjNkM2QzY2I5YzVkYTdkNDcxMTMz",
    "commit": {
      "author": {
        "name": "bruno",
        "email": "brunoely.gc@gmail.com",
        "date": "2021-05-28T19:50:07Z"
      },
      "committer": {
        "name": "bruno",
        "email": "brunoely.gc@gmail.com",
        "date": "2021-05-28T19:50:07Z"
      },
      "message": "test: check anchors.dat when node starts for the first time",
      "tree": {
        "sha": "66e1e8fb4335ba2843e7668bd38fd4381a5c1906",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66e1e8fb4335ba2843e7668bd38fd4381a5c1906"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef99d03c2bbb6b5fa5ff3d3d3cb9c5da7d471133",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef99d03c2bbb6b5fa5ff3d3d3cb9c5da7d471133",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef99d03c2bbb6b5fa5ff3d3d3cb9c5da7d471133",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef99d03c2bbb6b5fa5ff3d3d3cb9c5da7d471133/comments",
    "author": {
      "login": "brunoerg",
      "id": 19480819,
      "node_id": "MDQ6VXNlcjE5NDgwODE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brunoerg",
      "html_url": "https://github.com/brunoerg",
      "followers_url": "https://api.github.com/users/brunoerg/followers",
      "following_url": "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
      "organizations_url": "https://api.github.com/users/brunoerg/orgs",
      "repos_url": "https://api.github.com/users/brunoerg/repos",
      "events_url": "https://api.github.com/users/brunoerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brunoerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brunoerg",
      "id": 19480819,
      "node_id": "MDQ6VXNlcjE5NDgwODE5",
      "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brunoerg",
      "html_url": "https://github.com/brunoerg",
      "followers_url": "https://api.github.com/users/brunoerg/followers",
      "following_url": "https://api.github.com/users/brunoerg/following{/other_user}",
      "gists_url": "https://api.github.com/users/brunoerg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
      "organizations_url": "https://api.github.com/users/brunoerg/orgs",
      "repos_url": "https://api.github.com/users/brunoerg/repos",
      "events_url": "https://api.github.com/users/brunoerg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brunoerg/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "123b401e0acf3b26f149711bdf06d7f6eced1968",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/123b401e0acf3b26f149711bdf06d7f6eced1968",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/123b401e0acf3b26f149711bdf06d7f6eced1968"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 19,
      "deletions": 13
    },
    "files": [
      {
        "sha": "24bb02bc908f471181c1d0d0ef51cc74e26d3290",
        "filename": "test/functional/feature_anchors.py",
        "status": "modified",
        "additions": 19,
        "deletions": 13,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef99d03c2bbb6b5fa5ff3d3d3cb9c5da7d471133/test/functional/feature_anchors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef99d03c2bbb6b5fa5ff3d3d3cb9c5da7d471133/test/functional/feature_anchors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_anchors.py?ref=ef99d03c2bbb6b5fa5ff3d3d3cb9c5da7d471133",
        "patch": "@@ -2,14 +2,17 @@\n # Copyright (c) 2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test Anchors functionality\"\"\"\n+\"\"\"Test block-relay-only anchors functionality\"\"\"\n \n import os\n \n from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n+INBOUND_CONNECTIONS = 5\n+BLOCK_RELAY_CONNECTIONS = 2\n+\n \n def check_node_connections(*, node, num_in, num_out):\n     info = node.getnetworkinfo()\n@@ -25,19 +28,26 @@ def setup_network(self):\n         self.setup_nodes()\n \n     def run_test(self):\n-        self.log.info(\"Add 2 block-relay-only connections to node 0\")\n-        for i in range(2):\n+        node_anchors_path = os.path.join(\n+            self.nodes[0].datadir, \"regtest\", \"anchors.dat\"\n+        )\n+\n+        self.log.info(\"When node starts, check if anchors.dat doesn't exist\")\n+        assert not os.path.exists(node_anchors_path)\n+\n+        self.log.info(f\"Add {BLOCK_RELAY_CONNECTIONS} block-relay-only connections to node\")\n+        for i in range(BLOCK_RELAY_CONNECTIONS):\n             self.log.debug(f\"block-relay-only: {i}\")\n             self.nodes[0].add_outbound_p2p_connection(\n                 P2PInterface(), p2p_idx=i, connection_type=\"block-relay-only\"\n             )\n \n-        self.log.info(\"Add 5 inbound connections to node 0\")\n-        for i in range(5):\n+        self.log.info(f\"Add {INBOUND_CONNECTIONS} inbound connections to node\")\n+        for i in range(INBOUND_CONNECTIONS):\n             self.log.debug(f\"inbound: {i}\")\n             self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        self.log.info(\"Check node 0 connections\")\n+        self.log.info(\"Check node connections\")\n         check_node_connections(node=self.nodes[0], num_in=5, num_out=2)\n \n         # 127.0.0.1\n@@ -57,14 +67,10 @@ def run_test(self):\n         self.log.info(\"Stop node 0\")\n         self.stop_node(0)\n \n-        node0_anchors_path = os.path.join(\n-            self.nodes[0].datadir, \"regtest\", \"anchors.dat\"\n-        )\n-\n         # It should contain only the block-relay-only addresses\n         self.log.info(\"Check the addresses in anchors.dat\")\n \n-        with open(node0_anchors_path, \"rb\") as file_handler:\n+        with open(node_anchors_path, \"rb\") as file_handler:\n             anchors = file_handler.read().hex()\n \n         for port in block_relay_nodes_port:\n@@ -74,11 +80,11 @@ def run_test(self):\n             ip_port = ip + port\n             assert ip_port not in anchors\n \n-        self.log.info(\"Start node 0\")\n+        self.log.info(\"Start node\")\n         self.start_node(0)\n \n         self.log.info(\"When node starts, check if anchors.dat doesn't exist anymore\")\n-        assert not os.path.exists(node0_anchors_path)\n+        assert not os.path.exists(node_anchors_path)\n \n \n if __name__ == \"__main__\":"
      }
    ]
  }
]