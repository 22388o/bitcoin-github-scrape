[
  {
    "sha": "eaf4f887348a08c620732125ad4430e1a133d434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWY0Zjg4NzM0OGEwOGM2MjA3MzIxMjVhZDQ0MzBlMWExMzNkNDM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-16T22:18:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-05-10T21:22:33Z"
      },
      "message": "Abstract out IsSegWitOutput from utxoupdatepsbt\n\nThis is not a pure refactor; additional functionality is added in\nIsSegWitOutput which lets it recurse into P2SH when a\nSigningProvider is provided that knows about the inner script.",
      "tree": {
        "sha": "81dcc32ec90bd4c5ea8b0ada61e348cfd6b4b0d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81dcc32ec90bd4c5ea8b0ada61e348cfd6b4b0d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaf4f887348a08c620732125ad4430e1a133d434",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaf4f887348a08c620732125ad4430e1a133d434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaf4f887348a08c620732125ad4430e1a133d434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaf4f887348a08c620732125ad4430e1a133d434/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e79bbb73e08e3f191e97d3b67a2fbb510c5545ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e79bbb73e08e3f191e97d3b67a2fbb510c5545ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e79bbb73e08e3f191e97d3b67a2fbb510c5545ff"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 20,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7675ad0109070ede5b33673a8603b360000764e1",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaf4f887348a08c620732125ad4430e1a133d434/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaf4f887348a08c620732125ad4430e1a133d434/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=eaf4f887348a08c620732125ad4430e1a133d434",
        "patch": "@@ -1540,9 +1540,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n \n         const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n \n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        txnouttype which_type = Solver(coin.out.scriptPubKey, solutions_data);\n-        if (which_type == TX_WITNESS_V0_SCRIPTHASH || which_type == TX_WITNESS_V0_KEYHASH || which_type == TX_WITNESS_UNKNOWN) {\n+        if (IsSegWitOutput(DUMMY_SIGNING_PROVIDER, coin.out.scriptPubKey)) {\n             input.witness_utxo = coin.out;\n         }\n     }"
      },
      {
        "sha": "5320dc08766c198e43c637299dd14d6c382e1b4a",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaf4f887348a08c620732125ad4430e1a133d434/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaf4f887348a08c620732125ad4430e1a133d434/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=eaf4f887348a08c620732125ad4430e1a133d434",
        "patch": "@@ -505,3 +505,19 @@ FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvide\n     ret.origins.insert(b.origins.begin(), b.origins.end());\n     return ret;\n }\n+\n+bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n+{\n+    std::vector<valtype> solutions;\n+    auto whichtype = Solver(script, solutions);\n+    if (whichtype == TX_WITNESS_V0_SCRIPTHASH || whichtype == TX_WITNESS_V0_KEYHASH || whichtype == TX_WITNESS_UNKNOWN) return true;\n+    if (whichtype == TX_SCRIPTHASH) {\n+        auto h160 = uint160(solutions[0]);\n+        CScript subscript;\n+        if (provider.GetCScript(h160, subscript)) {\n+            whichtype = Solver(subscript, solutions);\n+            if (whichtype == TX_WITNESS_V0_SCRIPTHASH || whichtype == TX_WITNESS_V0_KEYHASH || whichtype == TX_WITNESS_UNKNOWN) return true;\n+        }\n+    }\n+    return false;\n+}"
      },
      {
        "sha": "e5c0329a610952bfd94a2d025db480285f280f03",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaf4f887348a08c620732125ad4430e1a133d434/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaf4f887348a08c620732125ad4430e1a133d434/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=eaf4f887348a08c620732125ad4430e1a133d434",
        "patch": "@@ -232,4 +232,7 @@ void UpdateInput(CTxIn& input, const SignatureData& data);\n  * Solvability is unrelated to whether we consider this output to be ours. */\n bool IsSolvable(const SigningProvider& provider, const CScript& script);\n \n+/** Check whether a scriptPubKey is known to be segwit. */\n+bool IsSegWitOutput(const SigningProvider& provider, const CScript& script);\n+\n #endif // BITCOIN_SCRIPT_SIGN_H"
      }
    ]
  },
  {
    "sha": "fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjkwZWMzYzMzZTgyNGY1YWJiNmE2ODQ1MmM2ODNkNmNlOGIzZTRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-16T23:24:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-05-10T21:31:21Z"
      },
      "message": "Abstract out EvalDescriptorStringOrObject from scantxoutset",
      "tree": {
        "sha": "a03bedacd78630ec669ccefbe445ee971c1e4184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a03bedacd78630ec669ccefbe445ee971c1e4184"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eaf4f887348a08c620732125ad4430e1a133d434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaf4f887348a08c620732125ad4430e1a133d434",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eaf4f887348a08c620732125ad4430e1a133d434"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 48,
      "deletions": 34
    },
    "files": [
      {
        "sha": "01c32656566b0a3890d183d2e8560bae386afc01",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 34,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a",
        "patch": "@@ -2241,41 +2241,12 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n-            std::string desc_str;\n-            std::pair<int64_t, int64_t> range = {0, 1000};\n-            if (scanobject.isStr()) {\n-                desc_str = scanobject.get_str();\n-            } else if (scanobject.isObject()) {\n-                UniValue desc_uni = find_value(scanobject, \"desc\");\n-                if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n-                desc_str = desc_uni.get_str();\n-                UniValue range_uni = find_value(scanobject, \"range\");\n-                if (!range_uni.isNull()) {\n-                    range = ParseDescriptorRange(range_uni);\n-                }\n-            } else {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n-            }\n-\n             FlatSigningProvider provider;\n-            auto desc = Parse(desc_str, provider);\n-            if (!desc) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor '%s'\", desc_str));\n-            }\n-            if (!desc->IsRange()) {\n-                range.first = 0;\n-                range.second = 0;\n-            }\n-            for (int i = range.first; i <= range.second; ++i) {\n-                std::vector<CScript> scripts;\n-                if (!desc->Expand(i, provider, scripts, provider)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n-                }\n-                for (const auto& script : scripts) {\n-                    std::string inferred = InferDescriptor(script, provider)->ToString();\n-                    needles.emplace(script);\n-                    descriptors.emplace(std::move(script), std::move(inferred));\n-                }\n+            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            for (const auto& script : scripts) {\n+                std::string inferred = InferDescriptor(script, provider)->ToString();\n+                needles.emplace(script);\n+                descriptors.emplace(std::move(script), std::move(inferred));\n             }\n         }\n "
      },
      {
        "sha": "7a9312aa03729838df3ced08127a49ce7d198f0e",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a",
        "patch": "@@ -5,6 +5,7 @@\n #include <key_io.h>\n #include <keystore.h>\n #include <rpc/util.h>\n+#include <script/descriptor.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n \n@@ -685,3 +686,40 @@ std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value)\n     }\n     return {low, high};\n }\n+\n+std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, FlatSigningProvider& provider)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor '%s'\", desc_str));\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}"
      },
      {
        "sha": "ce485a2095f8d5a2b6c3c0b89781fa9bf7510265",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a",
        "patch": "@@ -8,6 +8,8 @@\n #include <node/transaction.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n #include <script/standard.h>\n #include <univalue.h>\n \n@@ -83,6 +85,9 @@ UniValue JSONRPCTransactionError(TransactionError terr, const std::string& err_s\n //! Parse a JSON range specified as int64, or [int64, int64]\n std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value);\n \n+/** Evaluate a descriptor given as a string, or as a {\"desc\":...,\"range\":...} object, with default range of 1000. */\n+std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, FlatSigningProvider& provider);\n+\n struct RPCArg {\n     enum class Type {\n         OBJ,"
      }
    ]
  },
  {
    "sha": "3135c1a2d2e2fb31bc362c848bd2456d576e408b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTM1YzFhMmQyZTJmYjMxYmMzNjJjODQ4YmQyNDU2ZDU3NmU0MDhi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-16T23:49:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-05-10T21:31:22Z"
      },
      "message": "Abstract out UpdatePSBTOutput from FillPSBT",
      "tree": {
        "sha": "7208865e9fd0c744e70e6c30b4bffa9519b81e96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7208865e9fd0c744e70e6c30b4bffa9519b81e96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3135c1a2d2e2fb31bc362c848bd2456d576e408b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3135c1a2d2e2fb31bc362c848bd2456d576e408b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3135c1a2d2e2fb31bc362c848bd2456d576e408b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3135c1a2d2e2fb31bc362c848bd2456d576e408b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb90ec3c33e824f5abb6a68452c683d6ce8b3e4a"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 26,
      "deletions": 10
    },
    "files": [
      {
        "sha": "2362d4d497445879b0311f7d3fe12e02fae5f65c",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3135c1a2d2e2fb31bc362c848bd2456d576e408b/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3135c1a2d2e2fb31bc362c848bd2456d576e408b/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=3135c1a2d2e2fb31bc362c848bd2456d576e408b",
        "patch": "@@ -215,6 +215,25 @@ bool PSBTInputSigned(const PSBTInput& input)\n     return !input.final_script_sig.empty() || !input.final_script_witness.IsNull();\n }\n \n+void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index)\n+{\n+    const CTxOut& out = psbt.tx->vout.at(index);\n+    PSBTOutput& psbt_out = psbt.outputs.at(index);\n+\n+    // Fill a SignatureData with output info\n+    SignatureData sigdata;\n+    psbt_out.FillSignatureData(sigdata);\n+\n+    // Construct a would-be spend of this output, to update sigdata with.\n+    // Note that ProduceSignature is used to fill in metadata (not actual signatures),\n+    // so provider does not need to provide any private keys (it can be a HidingSigningProvider).\n+    MutableTransactionSignatureCreator creator(psbt.tx.get_ptr(), /* index */ 0, out.nValue, SIGHASH_ALL);\n+    ProduceSignature(provider, creator, out.scriptPubKey, sigdata);\n+\n+    // Put redeem_script, witness_script, key paths, into PSBTOutput.\n+    psbt_out.FromSignatureData(sigdata);\n+}\n+\n bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash, SignatureData* out_sigdata, bool use_dummy)\n {\n     PSBTInput& input = psbt.inputs.at(index);"
      },
      {
        "sha": "f3840b9ed3d69d3040f4a73679b92cd4b919daf4",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3135c1a2d2e2fb31bc362c848bd2456d576e408b/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3135c1a2d2e2fb31bc362c848bd2456d576e408b/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=3135c1a2d2e2fb31bc362c848bd2456d576e408b",
        "patch": "@@ -565,6 +565,12 @@ bool PSBTInputSigned(const PSBTInput& input);\n /** Signs a PSBTInput, verifying that all provided data matches what is being signed. */\n bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool use_dummy = false);\n \n+/** Updates a PSBTOutput with information from provider.\n+ *\n+ * This fills in the redeem_script, witness_script, and hd_keypaths where possible.\n+ */\n+void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index);\n+\n /**\n  * Finalizes a PSBT if possible, combining partial signatures.\n  *"
      },
      {
        "sha": "ebc48795a0deb48c251159430423a46b3d30c951",
        "filename": "src/wallet/psbtwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3135c1a2d2e2fb31bc362c848bd2456d576e408b/src/wallet/psbtwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3135c1a2d2e2fb31bc362c848bd2456d576e408b/src/wallet/psbtwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.cpp?ref=3135c1a2d2e2fb31bc362c848bd2456d576e408b",
        "patch": "@@ -44,16 +44,7 @@ TransactionError FillPSBT(const CWallet* pwallet, PartiallySignedTransaction& ps\n \n     // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n     for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        const CTxOut& out = psbtx.tx->vout.at(i);\n-        PSBTOutput& psbt_out = psbtx.outputs.at(i);\n-\n-        // Fill a SignatureData with output info\n-        SignatureData sigdata;\n-        psbt_out.FillSignatureData(sigdata);\n-\n-        MutableTransactionSignatureCreator creator(psbtx.tx.get_ptr(), 0, out.nValue, 1);\n-        ProduceSignature(HidingSigningProvider(pwallet, true, !bip32derivs), creator, out.scriptPubKey, sigdata);\n-        psbt_out.FromSignatureData(sigdata);\n+        UpdatePSBTOutput(HidingSigningProvider(pwallet, true, !bip32derivs), psbtx, i);\n     }\n \n     return TransactionError::OK;"
      }
    ]
  },
  {
    "sha": "26fe9b990995f9cb5eee21d40b4daaad19f7181f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmZlOWI5OTA5OTVmOWNiNWVlZTIxZDQwYjRkYWFhZDE5ZjcxODFm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-16T22:59:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-05-10T21:36:58Z"
      },
      "message": "Add support for descriptors to utxoupdatepsbt\n\nThis adds a descriptors argument to the utxoupdatepsbt RPC. This means:\n* Input and output scripts and keys will be filled in when known\n* P2SH-witness outputs will be filled in from the UTXO set when a descriptor\n  is provided to show they're segwit outputs.",
      "tree": {
        "sha": "e6969f6f8238d61835c1612e374267a022638c2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6969f6f8238d61835c1612e374267a022638c2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26fe9b990995f9cb5eee21d40b4daaad19f7181f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26fe9b990995f9cb5eee21d40b4daaad19f7181f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26fe9b990995f9cb5eee21d40b4daaad19f7181f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26fe9b990995f9cb5eee21d40b4daaad19f7181f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3135c1a2d2e2fb31bc362c848bd2456d576e408b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3135c1a2d2e2fb31bc362c848bd2456d576e408b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3135c1a2d2e2fb31bc362c848bd2456d576e408b"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 55,
      "deletions": 13
    },
    "files": [
      {
        "sha": "eabf89bdbaa15c0c488fe65d78d151e3371109b6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 5,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26fe9b990995f9cb5eee21d40b4daaad19f7181f/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26fe9b990995f9cb5eee21d40b4daaad19f7181f/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=26fe9b990995f9cb5eee21d40b4daaad19f7181f",
        "patch": "@@ -1490,12 +1490,19 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n \n UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw std::runtime_error(\n             RPCHelpMan{\"utxoupdatepsbt\",\n-            \"\\nUpdates a PSBT with witness UTXOs retrieved from the UTXO set or the mempool.\\n\",\n+            \"\\nUpdates all segwit inputs and outputs in a PSBT with data from output descriptors, the UTXO set or the mempool.\\n\",\n             {\n-                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"}\n+                {\"psbt\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A base64 string of a PSBT\"},\n+                {\"descriptors\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"An array of either strings or objects\", {\n+                    {\"\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"An output descriptor\"},\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"An object with an output descriptor and extra information\", {\n+                         {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"An output descriptor\"},\n+                         {\"range\", RPCArg::Type::RANGE, \"1000\", \"Up to what index HD chains should be explored (either end or [begin,end])\"},\n+                    }},\n+                }},\n             },\n             RPCResult {\n                 \"  \\\"psbt\\\"          (string) The base64-encoded partially signed transaction with inputs updated\\n\"\n@@ -1505,7 +1512,7 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n             }}.ToString());\n     }\n \n-    RPCTypeCheck(request.params, {UniValue::VSTR}, true);\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR}, true);\n \n     // Unserialize the transactions\n     PartiallySignedTransaction psbtx;\n@@ -1514,6 +1521,17 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed %s\", error));\n     }\n \n+    // Parse descriptors, if any.\n+    FlatSigningProvider provider;\n+    if (!request.params[1].isNull()) {\n+        auto descs = request.params[1].get_array();\n+        for (size_t i = 0; i < descs.size(); ++i) {\n+            EvalDescriptorStringOrObject(descs[i], provider);\n+        }\n+    }\n+    // We don't actually need private keys further on; hide them as a precaution.\n+    HidingSigningProvider public_provider(&provider, /* nosign */ true, /* nobip32derivs */ false);\n+\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n@@ -1540,9 +1558,19 @@ UniValue utxoupdatepsbt(const JSONRPCRequest& request)\n \n         const Coin& coin = view.AccessCoin(psbtx.tx->vin[i].prevout);\n \n-        if (IsSegWitOutput(DUMMY_SIGNING_PROVIDER, coin.out.scriptPubKey)) {\n+        if (IsSegWitOutput(provider, coin.out.scriptPubKey)) {\n             input.witness_utxo = coin.out;\n         }\n+\n+        // Update script/keypath information using descriptor data.\n+        // Note that SignPSBTInput does a lot more than just constructing ECDSA signatures\n+        // we don't actually care about those here, in fact.\n+        SignPSBTInput(public_provider, psbtx, i, /* sighash_type */ 1);\n+    }\n+\n+    // Update script/keypath information using descriptor data.\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        UpdatePSBTOutput(public_provider, psbtx, i);\n     }\n \n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "a63b52c59e0a16151655f2e593373f5991b4e75b",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26fe9b990995f9cb5eee21d40b4daaad19f7181f/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26fe9b990995f9cb5eee21d40b4daaad19f7181f/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=26fe9b990995f9cb5eee21d40b4daaad19f7181f",
        "patch": "@@ -314,18 +314,32 @@ def run_test(self):\n         vout3 = find_output(self.nodes[0], txid3, 11)\n         self.sync_all()\n \n-        # Update a PSBT with UTXOs from the node\n-        # Bech32 inputs should be filled with witness UTXO. Other inputs should not be filled because they are non-witness\n+        def test_psbt_input_keys(psbt_input, keys):\n+            \"\"\"Check that the psbt input has only the expected keys.\"\"\"\n+            assert_equal(set(keys), set(psbt_input.keys()))\n+\n+        # Create a PSBT. None of the inputs are filled initially\n         psbt = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1},{\"txid\":txid2, \"vout\":vout2},{\"txid\":txid3, \"vout\":vout3}], {self.nodes[0].getnewaddress():32.999})\n         decoded = self.nodes[1].decodepsbt(psbt)\n-        assert \"witness_utxo\" not in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n-        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n-        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+        test_psbt_input_keys(decoded['inputs'][0], [])\n+        test_psbt_input_keys(decoded['inputs'][1], [])\n+        test_psbt_input_keys(decoded['inputs'][2], [])\n+\n+        # Update a PSBT with UTXOs from the node\n+        # Bech32 inputs should be filled with witness UTXO. Other inputs should not be filled because they are non-witness\n         updated = self.nodes[1].utxoupdatepsbt(psbt)\n         decoded = self.nodes[1].decodepsbt(updated)\n-        assert \"witness_utxo\" in decoded['inputs'][0] and \"non_witness_utxo\" not in decoded['inputs'][0]\n-        assert \"witness_utxo\" not in decoded['inputs'][1] and \"non_witness_utxo\" not in decoded['inputs'][1]\n-        assert \"witness_utxo\" not in decoded['inputs'][2] and \"non_witness_utxo\" not in decoded['inputs'][2]\n+        test_psbt_input_keys(decoded['inputs'][0], ['witness_utxo'])\n+        test_psbt_input_keys(decoded['inputs'][1], [])\n+        test_psbt_input_keys(decoded['inputs'][2], [])\n+\n+        # Try again, now while providing descriptors, making P2SH-segwit work, and causing bip32_derivs and redeem_script to be filled in\n+        descs = [self.nodes[1].getaddressinfo(addr)['desc'] for addr in [addr1,addr2,addr3]]\n+        updated = self.nodes[1].utxoupdatepsbt(psbt, descs)\n+        decoded = self.nodes[1].decodepsbt(updated)\n+        test_psbt_input_keys(decoded['inputs'][0], ['witness_utxo', 'bip32_derivs'])\n+        test_psbt_input_keys(decoded['inputs'][1], [])\n+        test_psbt_input_keys(decoded['inputs'][2], ['witness_utxo', 'bip32_derivs', 'redeem_script'])\n \n         # Two PSBTs with a common input should not be joinable\n         psbt1 = self.nodes[1].createpsbt([{\"txid\":txid1, \"vout\":vout1}], {self.nodes[0].getnewaddress():Decimal('10.999')})"
      }
    ]
  }
]