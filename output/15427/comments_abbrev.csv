sipa,2019-02-17T00:53:51Z,@achow101 @gwillen You may be interested in this.,https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-464403922,464403922,
DrahtBot,2019-02-18T13:26:48Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16240](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16240.html) (JSONRPCRequest-aware RPCHelpMan by kallewoo",https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-464730922,464730922,
sipa,2019-02-24T22:58:13Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-466826922,466826922,
sipa,2019-03-02T21:27:03Z,Rebased after merge of #15497.,https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-468961909,468961909,
meshcollider,2019-04-14T04:11:51Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-482918298,482918298,
sipa,2019-05-10T21:46:58Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-491439623,491439623,
jnewbery,2019-05-10T22:19:25Z,utACK 26fe9b990995f9cb5eee21d40b4daaad19f7181f,https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-491446139,491446139,
laanwj,2019-05-20T14:29:27Z,utACK 26fe9b990995f9cb5eee21d40b4daaad19f7181f (will hold merging until response to promag's comments),https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-494011526,494011526,
moneyball,2019-06-06T21:45:21Z,"It seems like next steps for this PR are for @sipa to respond to @promag and @ariard comments, then probably back to @laanwj for merge consideration.",https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-499679577,499679577,
promag,2019-06-11T13:58:30Z,My comments aren't blocking FWIW.,https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-500853862,500853862,
promag,2019-06-12T21:20:36Z,"@sipa my suggestions are in fb3540a87, and rebased here d7a8cf21f.",https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-501459741,501459741,
promag,2019-06-12T21:23:15Z,"ACK 26fe9b9, checked refactors and tests look comprehensive. Still missing a release note but can be added later.",https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-501460523,501460523,
laanwj,2019-07-02T14:54:51Z,"Going to merge this, I think the comments are minor enough to be addressable afterward and don't really need to block the merge.",https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-507713600,507713600,
jnewbery,2019-07-02T16:57:16Z,"It's a shame that this got merged without a bunch of review comments being addressed. It seems to me that this: https://github.com/bitcoin/bitcoin/pull/15427#pullrequestreview-239730895 is a bug, and that the new functionality won't work with bitcoin-cli or using named arguments.",https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-507761329,507761329,
jnewbery,2019-07-02T17:45:58Z,Fixed here: #16326,https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-507778796,507778796,
MarcoFalke,2019-07-02T20:37:07Z,"This had 3 ACKs. `master` is always expected to have bugs and if they are trivially fixed in a follow-up, why not?",https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-507835187,507835187,
fanquake,2019-07-05T02:03:13Z,Release notes for this are being added as part of #16326.,https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-508605736,508605736,
jnewbery,2019-07-05T09:45:20Z,"> This had 3 ACKs. master is always expected to have bugs and if they are trivially fixed in a follow-up, why not?\n\nBecause comments should at least be acknowledged by the author, even if that's just to say ""This can be addressed in a follow-up PR"".",https://github.com/bitcoin/bitcoin/pull/15427#issuecomment-508701051,508701051,
promag,2019-02-18T18:26:41Z,"Commit cb085728f64a76fec48dee4e6432c199aa69a62a\n\nIsn't this new code?",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r257794269,257794269,src/script/sign.cpp
achow101,2019-02-18T18:33:05Z,"Instead of a single range value, this could be the start and end values of the range like what `importmulti` does?",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r257795719,257795719,src/rpc/rawtransaction.cpp
sipa,2019-02-18T19:01:57Z,Yes?,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r257801740,257801740,src/script/sign.cpp
promag,2019-02-18T19:28:22Z,"That's fine, just that after reading commit message I thought this was move only commit.",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r257807360,257807360,src/script/sign.cpp
sipa,2019-02-20T15:46:39Z,"Ah, good point. I'll clarify in the commit message.",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r258543947,258543947,src/script/sign.cpp
sipa,2019-02-24T22:52:17Z,"I'm copying the behavior of `scantxoutset` here. Maybe it makes sense to merge the two afterwards, and have all three (scantxoutset, utxoupdatepsbt, importmulti) support both start+end and range?",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r259645891,259645891,src/rpc/rawtransaction.cpp
sipa,2019-02-24T22:58:05Z,Done.,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r259646155,259646155,src/script/sign.cpp
sipa,2019-03-02T21:27:30Z,This is now fixed by using the same parameter style as all through #15497.,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r261842822,261842822,src/rpc/rawtransaction.cpp
jnewbery,2019-05-02T17:57:29Z,"I think this could comment could be a bit more detailed. How is the PSBTOutput updated? (Answer: the `redeem_script`, `witness_script` and `hd_keypaths` are filled in)",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r280532024,280532024,src/psbt.h
jnewbery,2019-05-02T18:00:49Z,"I know this is move-only, but I found this functionality pretty inscrutable, and think it could do with some additional commenting. Things that would be helpful:\n\n- explain why the caller is instantiating a `HidingSigningProvider` with `nosign` set to true\n- explain what the magic `0` and `1` values are in the call to `ProduceSignature()` \n- explain that `ProduceSignature()` isn't really s",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r280533307,280533307,src/psbt.cpp
jnewbery,2019-05-02T18:13:35Z,"The parentheses here are ambiguous - they could be interpreted as modifying the entire sentence or just the mempool part. Consider changing this to:\n\n```\n""\nUpdates all segwit inputs and outputs in a PSBT with data from descriptors, the UTXO set or the mempool.\n"",\n```",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r280537878,280537878,src/rpc/rawtransaction.cpp
jnewbery,2019-05-02T18:14:15Z,"Comment could be expanded to say what is being updated (redeem_script, witness_script and hd_keypaths are being filled)",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r280538090,280538090,src/rpc/rawtransaction.cpp
jnewbery,2019-05-02T18:14:20Z,"Comment could be expanded to say what is being updated (redeem_script, witness_script and hd_keypaths are being filled)",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r280538125,280538125,src/rpc/rawtransaction.cpp
jnewbery,2019-05-02T18:15:32Z,"I found using `SignPSBTInput()` a bit jarring here, since nothing is actually being signed. Can you add a comment to say that `SignPSBTInput()` won't actually sign when provided with a `HidingSigningProvider` where `nosign` is true?",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r280538596,280538596,src/rpc/rawtransaction.cpp
jnewbery,2019-05-02T18:16:12Z,"Is there a reason not to create one `HidingSigningProvider()` for the entire function, rather than instantiate one for each call to `SignPSBTInput()` and `UpdatePSBTOutput()`",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r280538837,280538837,src/rpc/rawtransaction.cpp
jnewbery,2019-05-02T18:49:00Z,"These lines are pretty hard to read, and don't give very useful output if they fail. Consider refactoring as follows:\n\n```diff\ndiff --git a/test/functional/rpc_psbt.py b/test/functional/rpc_psbt.py\nindex 20261f7b7..9b00fc767 100755\n--- a/test/functional/rpc_psbt.py\n+++ b/test/functional/rpc_psbt.py\n@@ -307,25 +307,32 @@ class PSBTTest(BitcoinTestFramework):\n         vout3 = find_ou",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r280550604,280550604,test/functional/rpc_psbt.py
sipa,2019-05-09T22:39:35Z,Done.,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r282692152,282692152,src/psbt.h
sipa,2019-05-09T22:39:52Z,Added a bunch of comments. Better?,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r282692206,282692206,src/psbt.cpp
sipa,2019-05-09T22:40:01Z,Done.,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r282692235,282692235,src/rpc/rawtransaction.cpp
sipa,2019-05-09T22:40:19Z,"I'd rather not be specific here, as it may change over time.",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r282692305,282692305,src/rpc/rawtransaction.cpp
sipa,2019-05-09T22:41:31Z,Added some comments.,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r282692554,282692554,src/rpc/rawtransaction.cpp
sipa,2019-05-09T22:41:44Z,"Nope. Done that, that's much more readable.",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r282692611,282692611,src/rpc/rawtransaction.cpp
sipa,2019-05-09T22:41:51Z,Applied.,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r282692640,282692640,test/functional/rpc_psbt.py
jnewbery,2019-05-10T19:21:07Z,"I believe this needs to be a range type and have the description updated. You should just be able to copy it from the `scantxoutset` help text.\n\nAlso consider refering to `descriptors` as `output descriptors` throughout, for consistency with other RPCs.",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r283012878,283012878,src/rpc/rawtransaction.cpp
sipa,2019-05-10T21:46:52Z,Done.,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r283052336,283052336,src/rpc/rawtransaction.cpp
promag,2019-05-13T17:45:21Z,"Use range loop\n```cpp\nfor (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n```\nLike [here](https://github.com/bitcoin/bitcoin/pull/15427/files#diff-a0c8f511d90e83aa9b5857e819ced344R2243).",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r283460009,283460009,src/rpc/rawtransaction.cpp
promag,2019-05-13T17:55:17Z,Makes sense to instantiate `HidingSigningProvider` before the loop?,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r283463922,283463922,src/wallet/psbtwallet.cpp
promag,2019-05-13T17:57:55Z,"nit, spaces after `,` - `[addr1, addr2, addr3]`.",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r283465008,283465008,test/functional/rpc_psbt.py
promag,2019-05-13T18:00:34Z,Could name this `UpdatePSBT()` and iterate outputs here? - which is what both callers do.,https://github.com/bitcoin/bitcoin/pull/15427#discussion_r283466106,283466106,src/psbt.cpp
ariard,2019-05-20T21:26:00Z,"nit: ""native segwit or nested-segwit""?",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r285774570,285774570,src/script/sign.h
ariard,2019-05-20T21:26:47Z,"nit: ""with inputs and outputs updated""",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r285774802,285774802,src/rpc/rawtransaction.cpp
Empact,2019-05-29T04:19:42Z,"Alternatively, seems this could be appropriate as `PartiallySignedTransaction::UpdateOutput`",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r288387883,288387883,src/psbt.cpp
promag,2019-06-02T20:39:57Z,"26fe9b990995f9cb5eee21d40b4daaad19f7181f\n\nnit, could use the ""new"" way:\n```cpp\n    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n        throw std::runtime_error(help.ToString());\n    }\n```",https://github.com/bitcoin/bitcoin/pull/15427#discussion_r289657124,289657124,src/rpc/rawtransaction.cpp
