[
  {
    "sha": "1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTgxZWNiYzMzZWRkOWQ2MjU3ZTUwYjExZDg4NTRmYmNjYWY4YWQ4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-30T22:57:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-01T02:03:14Z"
      },
      "message": "Use configparser in rpc-tests.py\n\nRemove the use of wildcard imports in rpc-tests.py and replace with\nconfigparser.",
      "tree": {
        "sha": "630822a42a8ccb6798efed9e3beeca675e265ba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630822a42a8ccb6798efed9e3beeca675e265ba9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 41,
      "deletions": 36
    },
    "files": [
      {
        "sha": "1ee2dfb734ede01f76a6f192be0441a372bea756",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -227,9 +227,6 @@ EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n-# This file is problematic for out-of-tree builds if it exists.\n-DISTCLEANFILES = qa/pull-tester/tests_config.pyc\n-\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n DISTCHECK_CONFIGURE_FLAGS = --enable-man"
      },
      {
        "sha": "1452ff74c0c644e1d7ac52209cf1cbbc5d7a8d16",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -1087,7 +1087,7 @@ AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n-AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n+AC_CONFIG_FILES([qa/pull-tester/tests_config.ini],[chmod +x qa/pull-tester/tests_config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_LINKS([qa/pull-tester/rpc-tests.py:qa/pull-tester/rpc-tests.py])\n "
      },
      {
        "sha": "52157474074cbbfb8a75dea870304a7cf5f9fbe1",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -21,6 +21,7 @@\n \n \"\"\"\n \n+import configparser\n import os\n import time\n import shutil\n@@ -29,26 +30,22 @@\n import tempfile\n import re\n \n-sys.path.append(\"qa/pull-tester/\")\n-from tests_config import *\n-\n BOLD = (\"\",\"\")\n if os.name == 'posix':\n     # primitive formatting on supported\n     # terminal via ANSI escape sequences:\n     BOLD = ('\\033[0m', '\\033[1m')\n \n-RPC_TESTS_DIR = SRCDIR + '/qa/rpc-tests/'\n+# Read config generated by configure.\n+config = configparser.ConfigParser()\n+config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n+\n+ENABLE_WALLET = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n+ENABLE_UTILS = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n+ENABLE_BITCOIND = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n+ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\"\n \n-#If imported values are not defined then set to zero (or disabled)\n-if 'ENABLE_WALLET' not in vars():\n-    ENABLE_WALLET=0\n-if 'ENABLE_BITCOIND' not in vars():\n-    ENABLE_BITCOIND=0\n-if 'ENABLE_UTILS' not in vars():\n-    ENABLE_UTILS=0\n-if 'ENABLE_ZMQ' not in vars():\n-    ENABLE_ZMQ=0\n+RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n \n ENABLE_COVERAGE=0\n \n@@ -76,15 +73,15 @@\n \n #Set env vars\n if \"BITCOIND\" not in os.environ:\n-    os.environ[\"BITCOIND\"] = BUILDDIR + '/src/bitcoind' + EXEEXT\n+    os.environ[\"BITCOIND\"] = config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"]\n \n-if EXEEXT == \".exe\" and \"-win\" not in opts:\n+if config[\"environment\"][\"EXEEXT\"] == \".exe\" and \"-win\" not in opts:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n     print(\"Win tests currently disabled by default.  Use -win option to enable\")\n     sys.exit(0)\n \n-if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n+if not (ENABLE_WALLET and ENABLE_UTILS and ENABLE_BITCOIND):\n     print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n     sys.exit(0)\n \n@@ -209,8 +206,8 @@ def runtests():\n     if ENABLE_COVERAGE:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n-    flags = [\"--srcdir=%s/src\" % BUILDDIR] + passon_args\n-    flags.append(\"--cachedir=%s/qa/cache\" % BUILDDIR)\n+    flags = [\"--srcdir=%s/src\" % config[\"environment\"][\"BUILDDIR\"]] + passon_args\n+    flags.append(\"--cachedir=%s/qa/cache\" % config[\"environment\"][\"BUILDDIR\"])\n     if coverage:\n         flags.append(coverage.flag)\n "
      },
      {
        "sha": "8317caaeb514a3ad47d0e238a05a4773d92173aa",
        "filename": "qa/pull-tester/tests_config.ini.in",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/tests_config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/tests_config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.ini.in?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -0,0 +1,25 @@\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# These environment variables are set by the build process and read by\n+# rpc-tests.py\n+\n+[DEFAULT]\n+# Provides default values for whether different components are enabled\n+ENABLE_WALLET=False\n+ENABLE_UTILS=False\n+ENABLE_BITCOIND=False\n+ENABLE_ZMQ=False\n+\n+[environment]\n+SRCDIR=@abs_top_srcdir@\n+BUILDDIR=@abs_top_builddir@\n+EXEEXT=@EXEEXT@\n+\n+[components]\n+# Which components are enabled. These are commented out by `configure` if they were disabled when running config.\n+@ENABLE_WALLET_TRUE@ENABLE_WALLET=True\n+@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=True\n+@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=True\n+@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=True"
      },
      {
        "sha": "a0d0a3d98a86becd64c699fa8bb67bb2ae79629c",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "patch": "@@ -1,14 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-SRCDIR=\"@abs_top_srcdir@\"\n-BUILDDIR=\"@abs_top_builddir@\"\n-EXEEXT=\"@EXEEXT@\"\n-\n-# These will turn into comments if they were disabled when configuring.\n-@ENABLE_WALLET_TRUE@ENABLE_WALLET=1\n-@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=1\n-@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n-@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1"
      }
    ]
  },
  {
    "sha": "91bfffff5d1de034661e7fd6b319447b47ae6e33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWJmZmZmZjVkMWRlMDM0NjYxZTdmZDZiMzE5NDQ3YjQ3YWU2ZTMz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-31T18:15:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T13:51:27Z"
      },
      "message": "Use argparse in rpc_tests.py\n\nThis commit replaces the roll-your-own argument parsing in rpc_tests.py\nwith Python's standard library argparse.",
      "tree": {
        "sha": "88b40a8e9353f40181f692f4e6e86676da157a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88b40a8e9353f40181f692f4e6e86676da157a58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91bfffff5d1de034661e7fd6b319447b47ae6e33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 44,
      "deletions": 39
    },
    "files": [
      {
        "sha": "862859919ae0c42935d4bac173222a503a368836",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 44,
        "deletions": 39,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91bfffff5d1de034661e7fd6b319447b47ae6e33/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91bfffff5d1de034661e7fd6b319447b47ae6e33/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=91bfffff5d1de034661e7fd6b319447b47ae6e33",
        "patch": "@@ -21,6 +21,7 @@\n \n \"\"\"\n \n+import argparse\n import configparser\n import os\n import time\n@@ -30,6 +31,19 @@\n import tempfile\n import re\n \n+# Parse arguments and pass through unrecognised args\n+parser = argparse.ArgumentParser(add_help=False)\n+parser.add_argument('--coverage', action='store_true')\n+parser.add_argument('-extended', action='store_true')\n+parser.add_argument('--help', '-h', '-?', action='store_true')\n+parser.add_argument('--parallel', type=int, default=4)\n+parser.add_argument('-win', action='store_true')\n+(args, unknown_args) = parser.parse_known_args()\n+\n+#Create a set to store arguments and create the passon string\n+tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n+passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n+\n BOLD = (\"\",\"\")\n if os.name == 'posix':\n     # primitive formatting on supported\n@@ -47,35 +61,14 @@\n \n RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n \n-ENABLE_COVERAGE=0\n-\n-#Create a set to store arguments and create the passon string\n-opts = set()\n-passon_args = []\n-PASSON_REGEX = re.compile(\"^--\")\n-PARALLEL_REGEX = re.compile('^-parallel=')\n-\n-print_help = False\n-run_parallel = 4\n-\n-for arg in sys.argv[1:]:\n-    if arg == \"--help\" or arg == \"-h\" or arg == \"-?\":\n-        print_help = True\n-        break\n-    if arg == '--coverage':\n-        ENABLE_COVERAGE = 1\n-    elif PASSON_REGEX.match(arg):\n-        passon_args.append(arg)\n-    elif PARALLEL_REGEX.match(arg):\n-        run_parallel = int(arg.split(sep='=', maxsplit=1)[1])\n-    else:\n-        opts.add(arg)\n+print_help = args.help\n+run_parallel = args.parallel\n \n #Set env vars\n if \"BITCOIND\" not in os.environ:\n     os.environ[\"BITCOIND\"] = config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"]\n \n-if config[\"environment\"][\"EXEEXT\"] == \".exe\" and \"-win\" not in opts:\n+if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n     print(\"Win tests currently disabled by default.  Use -win option to enable\")\n@@ -95,7 +88,7 @@\n         # ENABLE_ZMQ=0\n         raise\n \n-testScripts = [\n+BASE_SCRIPTS= [\n     # longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n@@ -152,10 +145,9 @@\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n ]\n-if ENABLE_ZMQ:\n-    testScripts.append('zmq_test.py')\n+ZMQ_SCRIPTS = [\"zmq_test.py\"]\n \n-testScriptsExt = [\n+EXTENDED_SCRIPTS = [\n     'pruning.py',\n     # vv Tests less than 20m vv\n     'smartfees.py',\n@@ -184,26 +176,39 @@\n     'replace-by-fee.py',\n ]\n \n+ALL_SCRIPTS = BASE_SCRIPTS + ZMQ_SCRIPTS + EXTENDED_SCRIPTS\n \n def runtests():\n-    test_list = []\n-    if '-extended' in opts:\n-        test_list = testScripts + testScriptsExt\n-    elif len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts):\n-        test_list = testScripts\n+    # Build list of tests\n+    if len(tests) != 0:\n+        # Individual tests have been specified. Run specified tests that exist\n+        # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n+        test_list = [t for t in ALL_SCRIPTS if\n+                (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n+        if len(test_list) == 0:\n+            print(\"No valid test scripts specified. Check that your test is in one \"\n+                  \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n+            sys.exit(0)\n     else:\n-        for t in testScripts + testScriptsExt:\n-            if t in opts or re.sub(\".py$\", \"\", t) in opts:\n-                test_list.append(t)\n-\n-    if print_help:\n+        # No individual tests have been specified. Run base tests, and\n+        # optionally ZMQ tests and extended tests.\n+        test_list = BASE_SCRIPTS\n+        if ENABLE_ZMQ:\n+            test_list += ZMQ_SCRIPTS\n+        if args.extended:\n+            test_list += EXTENDED_SCRIPTS\n+            # TODO: BASE_SCRIPTS and EXTENDED_SCRIPTS are sorted by runtime\n+            # (for parallel running efficiency). This combined list will is no\n+            # longer sorted.\n+\n+    if args.help:\n         # Only print help of the first script and exit\n         subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n     coverage = None\n \n-    if ENABLE_COVERAGE:\n+    if args.coverage:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n     flags = [\"--srcdir=%s/src\" % config[\"environment\"][\"BUILDDIR\"]] + passon_args"
      }
    ]
  },
  {
    "sha": "afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmQzOGU3Y2M4NzVlNzlmMjgyZWJmMWM2M2ZhMTBiZjJkMmFmOGQy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-31T19:32:49Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T13:55:16Z"
      },
      "message": "Improve rpc-tests.py arguments\n\nA few miscellaneous improvements to rpc-tests.py command line arguments:\n\n - make all arguments start with double dash for consistency\n - improve help text and output\n - add nozmq argument to explicitly exclude the ZMQ tests\n - change 'parallel' to 'jobs'",
      "tree": {
        "sha": "d20eed45965e575aba67357b36daaa91ddd5bc2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d20eed45965e575aba67357b36daaa91ddd5bc2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91bfffff5d1de034661e7fd6b319447b47ae6e33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91bfffff5d1de034661e7fd6b319447b47ae6e33"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 23,
      "deletions": 25
    },
    "files": [
      {
        "sha": "637999ae48ada7fe3f5a2c13242bb0c59f1446d1",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 23,
        "deletions": 25,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
        "patch": "@@ -2,19 +2,11 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n \"\"\"\n-Run Regression Test Suite\n+rpc-tests.py - run regression test suite\n \n This module calls down into individual test cases via subprocess. It will\n-forward all unrecognized arguments onto the individual test scripts, other\n-than:\n-\n-    - `-extended`: run the \"extended\" test suite in addition to the basic one.\n-    - `-win`: signal that this is running in a Windows environment, and we\n-      should run the tests.\n-    - `--coverage`: this generates a basic coverage report for the RPC\n-      interface.\n+forward all unrecognized arguments onto the individual test scripts.\n \n For a description of arguments recognized by test scripts, see\n `qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n@@ -32,12 +24,18 @@\n import re\n \n # Parse arguments and pass through unrecognised args\n-parser = argparse.ArgumentParser(add_help=False)\n-parser.add_argument('--coverage', action='store_true')\n-parser.add_argument('-extended', action='store_true')\n-parser.add_argument('--help', '-h', '-?', action='store_true')\n-parser.add_argument('--parallel', type=int, default=4)\n-parser.add_argument('-win', action='store_true')\n+parser = argparse.ArgumentParser(add_help=False,\n+                                 usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n+                                 description=__doc__,\n+                                 epilog='''\n+Help text and arguments for individual test script:''',\n+                                 formatter_class=argparse.RawTextHelpFormatter)\n+parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n+parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n+parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n (args, unknown_args) = parser.parse_known_args()\n \n #Create a set to store arguments and create the passon string\n@@ -57,12 +55,12 @@\n ENABLE_WALLET = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n ENABLE_UTILS = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n ENABLE_BITCOIND = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n-ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\"\n+ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n \n RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n \n print_help = args.help\n-run_parallel = args.parallel\n+jobs = args.jobs\n \n #Set env vars\n if \"BITCOIND\" not in os.environ:\n@@ -71,7 +69,7 @@\n if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print(\"Win tests currently disabled by default.  Use -win option to enable\")\n+    print(\"Win tests currently disabled by default.  Use --win option to enable\")\n     sys.exit(0)\n \n if not (ENABLE_WALLET and ENABLE_UTILS and ENABLE_BITCOIND):\n@@ -83,9 +81,8 @@\n     try:\n         import zmq\n     except ImportError:\n-        print(\"ERROR: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \"\n-              \"to run zmq tests, see dependency info in /qa/README.md.\")\n-        # ENABLE_ZMQ=0\n+        print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n+              \"To run zmq tests, see dependency info in /qa/README.md.\")\n         raise\n \n BASE_SCRIPTS= [\n@@ -202,7 +199,8 @@ def runtests():\n             # longer sorted.\n \n     if args.help:\n-        # Only print help of the first script and exit\n+        # Print help for rpc-tests.py, then print help of the first script and exit.\n+        parser.print_help()\n         subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n@@ -216,15 +214,15 @@ def runtests():\n     if coverage:\n         flags.append(coverage.flag)\n \n-    if len(test_list) > 1 and run_parallel > 1:\n+    if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n         subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n \n     #Run Tests\n     max_len_name = len(max(test_list, key=len))\n     time_sum = 0\n     time0 = time.time()\n-    job_queue = RPCTestHandler(run_parallel, test_list, flags)\n+    job_queue = RPCTestHandler(jobs, test_list, flags)\n     results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n     all_passed = True\n     for _ in range(len(test_list)):"
      }
    ]
  },
  {
    "sha": "3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGUzY2NkZmFhYTVlZGNmNGUwOTI0ODYwZDk2MGU3ZTBkYjVhOWI5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T14:07:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T14:07:14Z"
      },
      "message": "Refactor rpc-tests.py\n\n- add main()\n- remove global variables",
      "tree": {
        "sha": "ef9ac5296e1beaa04f5eaf77214f2c660410a705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef9ac5296e1beaa04f5eaf77214f2c660410a705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 100,
      "deletions": 85
    },
    "files": [
      {
        "sha": "1b4c905641170ed7fa708f4e2e6ec2e75a79f22f",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 100,
        "deletions": 85,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
        "patch": "@@ -23,69 +23,8 @@\n import tempfile\n import re\n \n-# Parse arguments and pass through unrecognised args\n-parser = argparse.ArgumentParser(add_help=False,\n-                                 usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n-                                 description=__doc__,\n-                                 epilog='''\n-Help text and arguments for individual test script:''',\n-                                 formatter_class=argparse.RawTextHelpFormatter)\n-parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n-parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n-parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n-parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n-parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n-parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n-(args, unknown_args) = parser.parse_known_args()\n-\n-#Create a set to store arguments and create the passon string\n-tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n-passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n-\n-BOLD = (\"\",\"\")\n-if os.name == 'posix':\n-    # primitive formatting on supported\n-    # terminal via ANSI escape sequences:\n-    BOLD = ('\\033[0m', '\\033[1m')\n-\n-# Read config generated by configure.\n-config = configparser.ConfigParser()\n-config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n-\n-ENABLE_WALLET = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n-ENABLE_UTILS = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n-ENABLE_BITCOIND = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n-ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n-\n-RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n-\n-print_help = args.help\n-jobs = args.jobs\n-\n-#Set env vars\n-if \"BITCOIND\" not in os.environ:\n-    os.environ[\"BITCOIND\"] = config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"]\n-\n-if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n-    # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n-    # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print(\"Win tests currently disabled by default.  Use --win option to enable\")\n-    sys.exit(0)\n-\n-if not (ENABLE_WALLET and ENABLE_UTILS and ENABLE_BITCOIND):\n-    print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-    sys.exit(0)\n-\n-# python3-zmq may not be installed. Handle this gracefully and with some helpful info\n-if ENABLE_ZMQ:\n-    try:\n-        import zmq\n-    except ImportError:\n-        print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n-              \"To run zmq tests, see dependency info in /qa/README.md.\")\n-        raise\n-\n BASE_SCRIPTS= [\n+    # Scripts that are run by the travis build process\n     # longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n@@ -142,9 +81,15 @@\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n ]\n-ZMQ_SCRIPTS = [\"zmq_test.py\"]\n+\n+ZMQ_SCRIPTS = [\n+    # ZMQ test can only be run if bitcoin was built with zmq-enabled.\n+    # call rpc_tests.py with -nozmq to explicitly exclude these tests.\n+    \"zmq_test.py\"]\n \n EXTENDED_SCRIPTS = [\n+    # These tests are not run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'pruning.py',\n     # vv Tests less than 20m vv\n     'smartfees.py',\n@@ -175,7 +120,55 @@\n \n ALL_SCRIPTS = BASE_SCRIPTS + ZMQ_SCRIPTS + EXTENDED_SCRIPTS\n \n-def runtests():\n+def main():\n+    # Parse arguments and pass through unrecognised args\n+    parser = argparse.ArgumentParser(add_help=False,\n+                                     usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n+                                     description=__doc__,\n+                                     epilog='''\n+    Help text and arguments for individual test script:''',\n+                                     formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+    parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+    parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n+    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+    parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n+    parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n+    (args, unknown_args) = parser.parse_known_args()\n+\n+    # Create a set to store arguments and create the passon string\n+    tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n+    passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n+\n+    # Read config generated by configure.\n+    config = configparser.ConfigParser()\n+    config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n+\n+    enable_wallet = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n+    enable_utils = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n+    enable_bitcoind = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n+    enable_zmq = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n+\n+    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n+        # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n+        # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n+        print(\"Win tests currently disabled by default.  Use --win option to enable\")\n+        sys.exit(0)\n+\n+    if not (enable_wallet and enable_utils and enable_bitcoind):\n+        print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n+        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+        sys.exit(0)\n+\n+    # python3-zmq may not be installed. Handle this gracefully and with some helpful info\n+    if enable_zmq:\n+        try:\n+            import zmq\n+        except ImportError:\n+            print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n+                  \"To run zmq tests, see dependency info in /qa/README.md.\")\n+            raise\n+\n     # Build list of tests\n     if len(tests) != 0:\n         # Individual tests have been specified. Run specified tests that exist\n@@ -185,12 +178,15 @@ def runtests():\n         if len(test_list) == 0:\n             print(\"No valid test scripts specified. Check that your test is in one \"\n                   \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n+            print(\"Scripts not found:\")\n+            print(tests)\n             sys.exit(0)\n+\n     else:\n         # No individual tests have been specified. Run base tests, and\n         # optionally ZMQ tests and extended tests.\n         test_list = BASE_SCRIPTS\n-        if ENABLE_ZMQ:\n+        if enable_zmq:\n             test_list += ZMQ_SCRIPTS\n         if args.extended:\n             test_list += EXTENDED_SCRIPTS\n@@ -201,30 +197,47 @@ def runtests():\n     if args.help:\n         # Print help for rpc-tests.py, then print help of the first script and exit.\n         parser.print_help()\n-        subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n+        subprocess.check_call((config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/' + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n-    coverage = None\n+    runtests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n+\n+def runtests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n+    BOLD = (\"\",\"\")\n+    if os.name == 'posix':\n+        # primitive formatting on supported\n+        # terminal via ANSI escape sequences:\n+        BOLD = ('\\033[0m', '\\033[1m')\n+\n+    #Set env vars\n+    if \"BITCOIND\" not in os.environ:\n+        os.environ[\"BITCOIND\"] = build_dir + '/src/bitcoind' + exeext\n+\n+    tests_dir = src_dir + '/qa/rpc-tests/'\n \n-    if args.coverage:\n+    flags = [\"--srcdir=\" + src_dir] + args\n+    flags.append(\"--cachedir=%s/qa/cache\" % build_dir)\n+\n+    if enable_coverage:\n         coverage = RPCCoverage()\n-        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n-    flags = [\"--srcdir=%s/src\" % config[\"environment\"][\"BUILDDIR\"]] + passon_args\n-    flags.append(\"--cachedir=%s/qa/cache\" % config[\"environment\"][\"BUILDDIR\"])\n-    if coverage:\n         flags.append(coverage.flag)\n+        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n+    else:\n+        coverage = None\n \n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n-        subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n+        subprocess.check_output([tests_dir + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    max_len_name = len(max(test_list, key=len))\n+    all_passed = True\n     time_sum = 0\n     time0 = time.time()\n-    job_queue = RPCTestHandler(jobs, test_list, flags)\n+\n+    job_queue = RPCTestHandler(jobs, tests_dir, test_list, flags)\n+\n+    max_len_name = len(max(test_list, key=len))\n     results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n-    all_passed = True\n     for _ in range(len(test_list)):\n         (name, stdout, stderr, passed, duration) = job_queue.get_next()\n         all_passed = all_passed and passed\n@@ -233,8 +246,10 @@ def runtests():\n         print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n         print('' if passed else stdout + '\\n', end='')\n         print('' if stderr == '' else 'stderr:\\n' + stderr + '\\n', end='')\n-        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n         print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+\n     results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n     print(results)\n     print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n@@ -247,15 +262,15 @@ def runtests():\n \n     sys.exit(not all_passed)\n \n-\n class RPCTestHandler:\n     \"\"\"\n     Trigger the testscrips passed in via the list.\n     \"\"\"\n \n-    def __init__(self, num_tests_parallel, test_list=None, flags=None):\n+    def __init__(self, num_tests_parallel, tests_dir, test_list=None, flags=None):\n         assert(num_tests_parallel >= 1)\n         self.num_jobs = num_tests_parallel\n+        self.tests_dir = tests_dir\n         self.test_list = test_list\n         self.flags = flags\n         self.num_running = 0\n@@ -275,7 +290,7 @@ def get_next(self):\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n+                              subprocess.Popen((self.tests_dir + t).split() + self.flags + port_seed,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),\n@@ -340,10 +355,10 @@ def _get_uncovered_rpc_commands(self):\n \n         \"\"\"\n         # This is shared from `qa/rpc-tests/test-framework/coverage.py`\n-        REFERENCE_FILENAME = 'rpc_interface.txt'\n-        COVERAGE_FILE_PREFIX = 'coverage.'\n+        reference_filename = 'rpc_interface.txt'\n+        coverage_file_prefix = 'coverage.'\n \n-        coverage_ref_filename = os.path.join(self.dir, REFERENCE_FILENAME)\n+        coverage_ref_filename = os.path.join(self.dir, reference_filename)\n         coverage_filenames = set()\n         all_cmds = set()\n         covered_cmds = set()\n@@ -356,7 +371,7 @@ def _get_uncovered_rpc_commands(self):\n \n         for root, dirs, files in os.walk(self.dir):\n             for filename in files:\n-                if filename.startswith(COVERAGE_FILE_PREFIX):\n+                if filename.startswith(coverage_file_prefix):\n                     coverage_filenames.add(os.path.join(root, filename))\n \n         for filename in coverage_filenames:\n@@ -367,4 +382,4 @@ def _get_uncovered_rpc_commands(self):\n \n \n if __name__ == '__main__':\n-    runtests()\n+    main()"
      }
    ]
  },
  {
    "sha": "a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmEzZTU4YzQ4MzcwMGJkNWYyYmM3ZDExN2E2MjFlMGM0YWY2MGUz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-17T19:22:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-17T19:22:56Z"
      },
      "message": "Various review markups for rpc-tests.py improvements",
      "tree": {
        "sha": "6e4cf1bfe8691b5f68fa3911dd17edf2f37c6245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e4cf1bfe8691b5f68fa3911dd17edf2f37c6245"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 21,
      "deletions": 26
    },
    "files": [
      {
        "sha": "18e08f06c40196b5f897e24a33f90247a7fef1bc",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "patch": "@@ -8,6 +8,8 @@\n This module calls down into individual test cases via subprocess. It will\n forward all unrecognized arguments onto the individual test scripts.\n \n+RPC tests are disabled on Windows by default. Use --force to run them anyway.\n+\n For a description of arguments recognized by test scripts, see\n `qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n \n@@ -24,8 +26,8 @@\n import re\n \n BASE_SCRIPTS= [\n-    # Scripts that are run by the travis build process\n-    # longest test should go first, to favor running tests in parallel\n+    # Scripts that are run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n     # vv Tests less than 5m vv\n@@ -130,11 +132,11 @@ def main():\n                                      formatter_class=argparse.RawTextHelpFormatter)\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+    parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n-    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n     parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n-    parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n-    (args, unknown_args) = parser.parse_known_args()\n+    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+    args, unknown_args = parser.parse_known_args()\n \n     # Create a set to store arguments and create the passon string\n     tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n@@ -144,15 +146,15 @@ def main():\n     config = configparser.ConfigParser()\n     config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n \n-    enable_wallet = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n-    enable_utils = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n-    enable_bitcoind = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n-    enable_zmq = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n+    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n+    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n+    enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n+    enable_zmq = config[\"components\"].getboolean(\"ENABLE_ZMQ\") and not args.nozmq\n \n-    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n+    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n         # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n         # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-        print(\"Win tests currently disabled by default.  Use --win option to enable\")\n+        print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n         sys.exit(0)\n \n     if not (enable_wallet and enable_utils and enable_bitcoind):\n@@ -170,12 +172,12 @@ def main():\n             raise\n \n     # Build list of tests\n-    if len(tests) != 0:\n+    if tests:\n         # Individual tests have been specified. Run specified tests that exist\n         # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n         test_list = [t for t in ALL_SCRIPTS if\n                 (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n-        if len(test_list) == 0:\n+        if not test_list:\n             print(\"No valid test scripts specified. Check that your test is in one \"\n                   \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n             print(\"Scripts not found:\")\n@@ -200,9 +202,9 @@ def main():\n         subprocess.check_call((config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/' + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n-    runtests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n \n-def runtests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n+def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n     BOLD = (\"\",\"\")\n     if os.name == 'posix':\n         # primitive formatting on supported"
      },
      {
        "sha": "e3e457d0b1d120c13036c5cbfb84004b7168a361",
        "filename": "qa/pull-tester/tests_config.ini.in",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/tests_config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/tests_config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.ini.in?ref=a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "patch": "@@ -5,21 +5,14 @@\n # These environment variables are set by the build process and read by\n # rpc-tests.py\n \n-[DEFAULT]\n-# Provides default values for whether different components are enabled\n-ENABLE_WALLET=False\n-ENABLE_UTILS=False\n-ENABLE_BITCOIND=False\n-ENABLE_ZMQ=False\n-\n [environment]\n SRCDIR=@abs_top_srcdir@\n BUILDDIR=@abs_top_builddir@\n EXEEXT=@EXEEXT@\n \n [components]\n # Which components are enabled. These are commented out by `configure` if they were disabled when running config.\n-@ENABLE_WALLET_TRUE@ENABLE_WALLET=True\n-@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=True\n-@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=True\n-@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=True\n+@ENABLE_WALLET_TRUE@ENABLE_WALLET=true\n+@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=true\n+@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n+@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true"
      }
    ]
  }
]