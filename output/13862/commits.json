[
  {
    "sha": "1661a472b8245eb4588fedbf19c9ed07a41e7602",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjYxYTQ3MmI4MjQ1ZWI0NTg4ZmVkYmYxOWM5ZWQwN2E0MWU3NjAy",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-25T09:33:22Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-08-27T16:55:13Z"
      },
      "message": "add unicode compatible file_lock for Windows\n\nboost::interprocess::file_lock cannot open the files that contain characters which cannot be parsed by the user's code page on Windows.\nThis commit add a new class to handle those specific file for Windows.",
      "tree": {
        "sha": "6a9c19af730f79a66e4ba3524dbec5514353cb48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a9c19af730f79a66e4ba3524dbec5514353cb48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1661a472b8245eb4588fedbf19c9ed07a41e7602",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1661a472b8245eb4588fedbf19c9ed07a41e7602",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1661a472b8245eb4588fedbf19c9ed07a41e7602",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1661a472b8245eb4588fedbf19c9ed07a41e7602/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f180e81d5780805a28bcc71c2bb6b16076336c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f180e81d5780805a28bcc71c2bb6b16076336c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f180e81d5780805a28bcc71c2bb6b16076336c3c"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 114,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e7d06e45ab1cdadf37fdee86a4899dd1e5ce0b64",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1661a472b8245eb4588fedbf19c9ed07a41e7602/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1661a472b8245eb4588fedbf19c9ed07a41e7602/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=1661a472b8245eb4588fedbf19c9ed07a41e7602",
        "patch": "@@ -1,5 +1,12 @@\n #include <fs.h>\n \n+#ifndef WIN32\n+#include <fcntl.h>\n+#else\n+#include <codecvt>\n+#include <windows.h>\n+#endif\n+\n namespace fsbridge {\n \n FILE *fopen(const fs::path& p, const char *mode)\n@@ -12,4 +19,82 @@ FILE *freopen(const fs::path& p, const char *mode, FILE *stream)\n     return ::freopen(p.string().c_str(), mode, stream);\n }\n \n+#ifndef WIN32\n+\n+static std::string GetErrorReason() {\n+    return std::strerror(errno);\n+}\n+\n+FileLock::FileLock(const fs::path& file)\n+{\n+    fd = open(file.string().c_str(), O_RDWR);\n+    if (fd == -1) {\n+        reason = GetErrorReason();\n+    }\n+}\n+\n+FileLock::~FileLock()\n+{\n+    if (fd != -1) {\n+        close(fd);\n+    }\n+}\n+\n+bool FileLock::TryLock()\n+{\n+    if (fd == -1) {\n+        return false;\n+    }\n+    struct flock lock;\n+    lock.l_type = F_WRLCK;\n+    lock.l_whence = SEEK_SET;\n+    lock.l_start = 0;\n+    lock.l_len = 0;\n+    if (fcntl(fd, F_SETLK, &lock) == -1) {\n+        reason = GetErrorReason();\n+        return false;\n+    }\n+    return true;\n+}\n+#else\n+\n+static std::string GetErrorReason() {\n+    wchar_t* err;\n+    FormatMessageW(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,\n+        nullptr, GetLastError(), MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), reinterpret_cast<WCHAR*>(&err), 0, nullptr);\n+    std::wstring err_str(err);\n+    LocalFree(err);\n+    return std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>>().to_bytes(err_str);\n+}\n+\n+FileLock::FileLock(const fs::path& file)\n+{\n+    hFile = CreateFileW(file.wstring().c_str(),  GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,\n+        nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, nullptr);\n+    if (hFile == INVALID_HANDLE_VALUE) {\n+        reason = GetErrorReason();\n+    }\n+}\n+\n+FileLock::~FileLock()\n+{\n+    if (hFile != INVALID_HANDLE_VALUE) {\n+        CloseHandle(hFile);\n+    }\n+}\n+\n+bool FileLock::TryLock()\n+{\n+    if (hFile == INVALID_HANDLE_VALUE) {\n+        return false;\n+    }\n+    _OVERLAPPED overlapped = {0};\n+    if (!LockFileEx(hFile, LOCKFILE_EXCLUSIVE_LOCK | LOCKFILE_FAIL_IMMEDIATELY, 0, 0, 0, &overlapped)) {\n+        reason = GetErrorReason();\n+        return false;\n+    }\n+    return true;\n+}\n+#endif\n+\n } // fsbridge"
      },
      {
        "sha": "e3ff51604d921a93b67683c034c41b3f12f83672",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1661a472b8245eb4588fedbf19c9ed07a41e7602/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1661a472b8245eb4588fedbf19c9ed07a41e7602/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=1661a472b8245eb4588fedbf19c9ed07a41e7602",
        "patch": "@@ -19,6 +19,26 @@ namespace fs = boost::filesystem;\n namespace fsbridge {\n     FILE *fopen(const fs::path& p, const char *mode);\n     FILE *freopen(const fs::path& p, const char *mode, FILE *stream);\n+\n+    class FileLock\n+    {\n+    public:\n+        FileLock() = delete;\n+        FileLock(const FileLock&) = delete;\n+        FileLock(FileLock&&) = delete;\n+        explicit FileLock(const fs::path& file);\n+        ~FileLock();\n+        bool TryLock();\n+        std::string GetReason() { return reason; }\n+\n+    private:\n+        std::string reason;\n+#ifndef WIN32\n+        int fd = -1;\n+#else\n+        void* hFile = (void*)-1; // INVALID_HANDLE_VALUE\n+#endif\n+    };\n };\n \n #endif // BITCOIN_FS_H"
      },
      {
        "sha": "bd330459f6be9a0f1df1b77b4dea8d2c14a49a3d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1661a472b8245eb4588fedbf19c9ed07a41e7602/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1661a472b8245eb4588fedbf19c9ed07a41e7602/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1661a472b8245eb4588fedbf19c9ed07a41e7602",
        "patch": "@@ -51,13 +51,13 @@\n \n #ifndef WIN32\n #include <signal.h>\n+#include <sys/stat.h>\n #endif\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/bind.hpp>\n-#include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n "
      },
      {
        "sha": "55b09dcff8e11a2c2bb482b3ab2232ab0746242d",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 14,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1661a472b8245eb4588fedbf19c9ed07a41e7602/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1661a472b8245eb4588fedbf19c9ed07a41e7602/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1661a472b8245eb4588fedbf19c9ed07a41e7602",
        "patch": "@@ -71,7 +71,6 @@\n #include <malloc.h>\n #endif\n \n-#include <boost/interprocess/sync/file_lock.hpp>\n #include <boost/thread.hpp>\n #include <openssl/crypto.h>\n #include <openssl/rand.h>\n@@ -139,7 +138,7 @@ instance_of_cinit;\n  * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n  * is called.\n  */\n-static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+static std::map<std::string, std::unique_ptr<fsbridge::FileLock>> dir_locks;\n /** Mutex to protect dir_locks. */\n static std::mutex cs_dir_locks;\n \n@@ -156,18 +155,13 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n     // Create empty lock file if it doesn't exist.\n     FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n-\n-    try {\n-        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n-        if (!lock->try_lock()) {\n-            return false;\n-        }\n-        if (!probe_only) {\n-            // Lock successful and we're not just probing, put it into the map\n-            dir_locks.emplace(pathLockFile.string(), std::move(lock));\n-        }\n-    } catch (const boost::interprocess::interprocess_exception& e) {\n-        return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());\n+    auto lock = MakeUnique<fsbridge::FileLock>(pathLockFile);\n+    if (!lock->TryLock()) {\n+        return error(\"Error while attempting to lock directory %s: %s\", directory.string(), lock->GetReason());\n+    }\n+    if (!probe_only) {\n+        // Lock successful and we're not just probing, put it into the map\n+        dir_locks.emplace(pathLockFile.string(), std::move(lock));\n     }\n     return true;\n }"
      },
      {
        "sha": "a38ce6f4cfcc505c62ee0822a2e3edd193bac30a",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1661a472b8245eb4588fedbf19c9ed07a41e7602/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1661a472b8245eb4588fedbf19c9ed07a41e7602/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=1661a472b8245eb4588fedbf19c9ed07a41e7602",
        "patch": "@@ -57,7 +57,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/filesystem.hpp\n     boost/filesystem/detail/utf8_codecvt_facet.hpp\n     boost/filesystem/fstream.hpp\n-    boost/interprocess/sync/file_lock.hpp\n     boost/multi_index/hashed_index.hpp\n     boost/multi_index/ordered_index.hpp\n     boost/multi_index/sequenced_index.hpp"
      }
    ]
  }
]