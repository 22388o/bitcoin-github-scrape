[
  {
    "sha": "98416d6462047227953fa6c9373d3f10d6fa009c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODQxNmQ2NDYyMDQ3MjI3OTUzZmE2YzkzNzNkM2YxMGQ2ZmEwMDlj",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-09-18T17:47:02Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-12-22T04:03:45Z"
      },
      "message": "Add constant scriptCode policy in non-segwit scripts\n\nThis disables OP_CODESEPARATOR in non-segwit scripts (even in an unexecuted branch), and makes a positive FindAndDelete result invalid. This ensures that the scriptCode serialized in SignatureHash is always the same as the script passing to the EvalScript.",
      "tree": {
        "sha": "799edd4b20dee2e2452df8ec946d6d240a0d6fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/799edd4b20dee2e2452df8ec946d6d240a0d6fc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98416d6462047227953fa6c9373d3f10d6fa009c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98416d6462047227953fa6c9373d3f10d6fa009c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98416d6462047227953fa6c9373d3f10d6fa009c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98416d6462047227953fa6c9373d3f10d6fa009c/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8cfe1ee2d01c493b758a67ad14707dca15792ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8cfe1ee2d01c493b758a67ad14707dca15792ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8cfe1ee2d01c493b758a67ad14707dca15792ea"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 26,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1425ee2c14d74f004c9bc11a33962023de542f46",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98416d6462047227953fa6c9373d3f10d6fa009c/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98416d6462047227953fa6c9373d3f10d6fa009c/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=98416d6462047227953fa6c9373d3f10d6fa009c",
        "patch": "@@ -55,7 +55,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_LOW_S |\n                                                          SCRIPT_VERIFY_WITNESS |\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n-                                                         SCRIPT_VERIFY_WITNESS_PUBKEYTYPE;\n+                                                         SCRIPT_VERIFY_WITNESS_PUBKEYTYPE |\n+                                                         SCRIPT_VERIFY_CONST_SCRIPTCODE;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "d192626b17346ae8d5b7f5ceca46f4de38b6102a",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98416d6462047227953fa6c9373d3f10d6fa009c/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98416d6462047227953fa6c9373d3f10d6fa009c/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=98416d6462047227953fa6c9373d3f10d6fa009c",
        "patch": "@@ -303,6 +303,10 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 opcode == OP_RSHIFT)\n                 return set_error(serror, SCRIPT_ERR_DISABLED_OPCODE); // Disabled opcodes.\n \n+            // OP_CODESEPARATOR in non-segwit transaction is invalid even in an unexecuted branch\n+            if (opcode == OP_CODESEPARATOR && sigversion == SIGVERSION_BASE && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n+                return set_error(serror, SCRIPT_ERR_OP_CODESEPARATOR);\n+\n             if (fExec && 0 <= opcode && opcode <= OP_PUSHDATA4) {\n                 if (fRequireMinimal && !CheckMinimalPush(vchPushValue, opcode)) {\n                     return set_error(serror, SCRIPT_ERR_MINIMALDATA);\n@@ -892,7 +896,9 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n \n                     // Drop the signature in pre-segwit scripts but not segwit scripts\n                     if (sigversion == SIGVERSION_BASE) {\n-                        scriptCode.FindAndDelete(CScript(vchSig));\n+                        int found = scriptCode.FindAndDelete(CScript(vchSig));\n+                        if (found && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n+                            return set_error(serror, SCRIPT_ERR_SIG_FINDANDDELETE);\n                     }\n \n                     if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n@@ -956,7 +962,9 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     {\n                         valtype& vchSig = stacktop(-isig-k);\n                         if (sigversion == SIGVERSION_BASE) {\n-                            scriptCode.FindAndDelete(CScript(vchSig));\n+                            int found = scriptCode.FindAndDelete(CScript(vchSig));\n+                            if (found && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n+                                return set_error(serror, SCRIPT_ERR_SIG_FINDANDDELETE);\n                         }\n                     }\n "
      },
      {
        "sha": "9834c407856e89166d18b4f6d7c12c3c6219cc28",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98416d6462047227953fa6c9373d3f10d6fa009c/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98416d6462047227953fa6c9373d3f10d6fa009c/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=98416d6462047227953fa6c9373d3f10d6fa009c",
        "patch": "@@ -106,6 +106,10 @@ enum\n     // Public keys in segregated witness scripts must be compressed\n     //\n     SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),\n+\n+    // Making OP_CODESEPARATOR and FindAndDelete non-standard in non-segwit scripts\n+    //\n+    SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);"
      },
      {
        "sha": "a45c1de7db2f22817c509727ef7a0389bde223ce",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98416d6462047227953fa6c9373d3f10d6fa009c/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98416d6462047227953fa6c9373d3f10d6fa009c/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=98416d6462047227953fa6c9373d3f10d6fa009c",
        "patch": "@@ -87,6 +87,10 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"Witness provided for non-witness script\";\n         case SCRIPT_ERR_WITNESS_PUBKEYTYPE:\n             return \"Using non-compressed keys in segwit\";\n+        case SCRIPT_ERR_OP_CODESEPARATOR:\n+            return \"Using OP_CODESEPARATOR in non-witness script\";\n+        case SCRIPT_ERR_SIG_FINDANDDELETE:\n+            return \"Signature is found in scriptCode\";\n         case SCRIPT_ERR_UNKNOWN_ERROR:\n         case SCRIPT_ERR_ERROR_COUNT:\n         default: break;"
      },
      {
        "sha": "17397cea2120e3a8ef2be4876550613b0bbd0f68",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98416d6462047227953fa6c9373d3f10d6fa009c/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98416d6462047227953fa6c9373d3f10d6fa009c/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=98416d6462047227953fa6c9373d3f10d6fa009c",
        "patch": "@@ -64,6 +64,10 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_WITNESS_UNEXPECTED,\n     SCRIPT_ERR_WITNESS_PUBKEYTYPE,\n \n+    /* Constant scriptCode */\n+    SCRIPT_ERR_OP_CODESEPARATOR,\n+    SCRIPT_ERR_SIG_FINDANDDELETE,\n+\n     SCRIPT_ERR_ERROR_COUNT\n } ScriptError;\n "
      },
      {
        "sha": "16a218242a34dfb1693b0ca162c1f6a0f13e462c",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98416d6462047227953fa6c9373d3f10d6fa009c/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98416d6462047227953fa6c9373d3f10d6fa009c/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=98416d6462047227953fa6c9373d3f10d6fa009c",
        "patch": "@@ -100,6 +100,8 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_WITNESS_MALLEATED_P2SH, \"WITNESS_MALLEATED_P2SH\"},\n     {SCRIPT_ERR_WITNESS_UNEXPECTED, \"WITNESS_UNEXPECTED\"},\n     {SCRIPT_ERR_WITNESS_PUBKEYTYPE, \"WITNESS_PUBKEYTYPE\"},\n+    {SCRIPT_ERR_OP_CODESEPARATOR, \"OP_CODESEPARATOR\"},\n+    {SCRIPT_ERR_SIG_FINDANDDELETE, \"SIG_FINDANDDELETE\"},\n };\n \n const char *FormatScriptError(ScriptError_t err)"
      }
    ]
  },
  {
    "sha": "e81ecd2ebe502ac932a915093115c97a9c3be1b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODFlY2QyZWJlNTAyYWM5MzJhOTE1MDkzMTE1Yzk3YTljM2JlMWI2",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-27T17:11:59Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-12-22T04:03:46Z"
      },
      "message": "Add sighash limitation policy\n\nThis implements a static estimation of sighash size for a transaction. A transaction with more than 90bytes of sighash per weight is non-standard. This is equivalent to 36MB for an 100kB non-segwit transaction, or 360MB for a block in the worst case. All transactions below 100kB with legitimate use of CHECK(MULTI)SIG should remain standard with this limit.",
      "tree": {
        "sha": "0abcf6c3c24676dc7db01f12f8d729e4171907c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0abcf6c3c24676dc7db01f12f8d729e4171907c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e81ecd2ebe502ac932a915093115c97a9c3be1b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e81ecd2ebe502ac932a915093115c97a9c3be1b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e81ecd2ebe502ac932a915093115c97a9c3be1b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e81ecd2ebe502ac932a915093115c97a9c3be1b6/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98416d6462047227953fa6c9373d3f10d6fa009c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98416d6462047227953fa6c9373d3f10d6fa009c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98416d6462047227953fa6c9373d3f10d6fa009c"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 147,
      "deletions": 0
    },
    "files": [
      {
        "sha": "493942cfdfd5ed1cd08f921c00ea7e6e12ec3fc5",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=e81ecd2ebe502ac932a915093115c97a9c3be1b6",
        "patch": "@@ -36,6 +36,12 @@ static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n /** The maximum size of a standard witnessScript */\n static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n+/**\n+ *  Maximum standard signature hashing per transaction weight (byte hashed per weight)\n+ *  This is equivalent to 36MB for an 100kB non-segwit transaction.\n+ *  All transactions below 100kB with legitimate use of CHECK(MULTI)SIG should remain standard with this limit.\n+ */\n+static const unsigned int MAX_STANDARD_HASH_PER_WEIGHT = 90;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid"
      },
      {
        "sha": "dfce1122a891a90e8c5700220e6c99505c2990c0",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=e81ecd2ebe502ac932a915093115c97a9c3be1b6",
        "patch": "@@ -142,3 +142,21 @@ int64_t GetTransactionWeight(const CTransaction& tx)\n {\n     return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }\n+\n+int64_t GetTransactionHashableSize(const CTransaction& tx)\n+{\n+    int64_t size = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        int64_t scriptSigSize = tx.vin[i].scriptSig.size();\n+        size -= scriptSigSize;\n+        // If the scriptSig size is larger than 252, 2 bytes compactSize encoding is deducted.\n+        if (scriptSigSize > 252)\n+            size -= 2;\n+        /*\n+         * Theoretically, 4 bytes should be deducted if the scriptSig is larger than 65535 bytes,\n+         * and 8 bytes should be deducted if it is larger than 4294967295 bytes.\n+         * However, scriptSig larger than 10000 bytes is invalid so it is not needed.\n+         */\n+    }\n+    return size;\n+}"
      },
      {
        "sha": "542a0a8291725268f04b2d701c516fd2159d93f6",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=e81ecd2ebe502ac932a915093115c97a9c3be1b6",
        "patch": "@@ -459,4 +459,7 @@ static inline CTransactionRef MakeTransactionRef(CTransactionRef&& txIn) { retur\n /** Compute the weight of a transaction, as defined by BIP 141 */\n int64_t GetTransactionWeight(const CTransaction &tx);\n \n+/** Compute the transaction hashable size = transaction size - scriptSig size */\n+int64_t GetTransactionHashableSize(const CTransaction& tx);\n+\n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "2c0cd64d34b1d3b5e60c4b3419e28cfaff5b27b1",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=e81ecd2ebe502ac932a915093115c97a9c3be1b6",
        "patch": "@@ -201,6 +201,75 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+unsigned int CScript::GetSigHashOpCount() const\n+{\n+    unsigned int n = 0;\n+    const_iterator pc = begin();\n+    std::vector<opcodetype> pushOpcodes;\n+    while (pc < end())\n+    {\n+        opcodetype opcode;\n+        if (!GetOp(pc, opcode))\n+            break; // The script is invalid anyway so we just return the current value\n+        if (opcode == OP_CHECKSIG || opcode == OP_CHECKSIGVERIFY)\n+            n++;\n+        else if (opcode == OP_CHECKMULTISIG || opcode == OP_CHECKMULTISIGVERIFY) {\n+            // The number of keys must be k = 1 to 16 denoted by OP_k\n+            if (!pushOpcodes.empty() && pushOpcodes.back() >= OP_1 && pushOpcodes.back() <= OP_16) {\n+                unsigned int nKeys = DecodeOP_N(pushOpcodes.back());\n+                // We assume sigHashOp is k, unless the the number of signature is canonical\n+                n += nKeys;\n+                // If all the k + 2 opcodes before the CHECKMULTISIG are push only, and the number of signature\n+                // is denoted as OP_s with s = 1 to 16, and s < k, we count it as s sigHashOp\n+                if (pushOpcodes.size() >= nKeys + 2) {\n+                    opcodetype nSigsCode = pushOpcodes.at(pushOpcodes.size() - nKeys - 2);\n+                    if (nSigsCode >= OP_1 && nSigsCode <= OP_16) {\n+                        unsigned int nSigs = DecodeOP_N(nSigsCode);\n+                        if (nSigs < nKeys)\n+                            n = n - nKeys + nSigs;\n+                    }\n+                }\n+            }\n+            // If key count is not canonical, we assume it has 3 sigHashOp\n+            else\n+                return 3;\n+        }\n+        // It can't be more than 3 in total\n+        if (n >= 3)\n+            return 3;\n+\n+        if (opcode <= OP_16)\n+            pushOpcodes.push_back(opcode);\n+        else\n+            pushOpcodes.clear();\n+    }\n+    return n;\n+}\n+\n+unsigned int CScript::GetSigHashOpCount(const CScript& scriptSig) const\n+{\n+    if (!IsPayToScriptHash())\n+        return GetSigHashOpCount();\n+\n+    // This is a pay-to-script-hash scriptPubKey;\n+    // get the last item that the scriptSig\n+    // pushes onto the stack:\n+    const_iterator pc = scriptSig.begin();\n+    vector<unsigned char> data;\n+    while (pc < scriptSig.end())\n+    {\n+        opcodetype opcode;\n+        if (!scriptSig.GetOp(pc, opcode, data))\n+            return 0;\n+        if (opcode > OP_16)\n+            return 0;\n+    }\n+\n+    /// ... and return its hash opcount:\n+    CScript subscript(data.begin(), data.end());\n+    return subscript.GetSigHashOpCount();\n+}\n+\n bool CScript::IsPayToScriptHash() const\n {\n     // Extra-fast test for pay-to-script-hash CScripts:"
      },
      {
        "sha": "12a1dc1bf80b0ec2aa2d82d52597ff641136a6b9",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=e81ecd2ebe502ac932a915093115c97a9c3be1b6",
        "patch": "@@ -620,6 +620,29 @@ class CScript : public CScriptBase\n      */\n     unsigned int GetSigOpCount(const CScript& scriptSig) const;\n \n+    /**\n+     * Count the maximum number of sighashing-equivalent operations in a non-witness script.\n+     * It assumes that\n+     *      a. OP_CODESEPARATOR and FindAndDelete are disabled by SCRIPT_VERIFY_CONST_SCRIPTCODE.\n+     *      b. SignatureHash is performed once only for each SIGHASH type.\n+     *      c. Only 6 sighash types are allowed: 1, 2, 3, 0x81, 0x82, 0x83\n+     * Different SIGHASH type has different level of hashing.\n+     * Type 1 (ALL) hashes all vin and vout\n+     * Type 2 (NONE) hashes all vin. No vout is hashed at all\n+     * Type 3 (SINGLE) hashes all vin. Only 1 vout is hashed, but it also hashes lower index vouts with empty\n+     *   scriptPubKey. On average, it hashes 50% of all vout in the worst case.\n+     * Type 0x80 (ANYONECANPAY) hashes only 1 vin, which is O(n) and negligible, therefore,\n+     * Type 0x81 hashes all vout;\n+     * Type 0x82 is negligible;\n+     * Type 0x83 hashes 50% of all vout on average (worst case estimation).\n+     * The worst case would be using 6 different SIGHASH types in the same script. Total estimated hashing is:\n+     *   (vin + vout) + vin + (vin + 0.5vout) + vout + 0.5vout = 3vin + 3vout\n+     * Therefore, in the lifetime of an EvalScript, a transaction must not be hashed more than 3 times, plus\n+     * negligible O(n) overhead including nVersion, nLockTime, scriptCode, etc.\n+     */\n+    unsigned int GetSigHashOpCount() const;\n+    unsigned int GetSigHashOpCount(const CScript& scriptSig) const;\n+\n     bool IsPayToScriptHash() const;\n     bool IsPayToWitnessScriptHash() const;\n     bool IsWitnessProgram(int& version, std::vector<unsigned char>& program) const;"
      },
      {
        "sha": "d57ac4c719d5ac474a5d70e059c65374f29309b9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e81ecd2ebe502ac932a915093115c97a9c3be1b6",
        "patch": "@@ -452,8 +452,23 @@ int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& i\n     return nSigOps;\n }\n \n+int GetTransactionBaseSigHashOpCount(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)\n+{\n+    int nSigHashOps = 0;\n+\n+    if (tx.IsCoinBase())\n+        return nSigHashOps;\n \n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        nSigHashOps += tx.vin[i].scriptSig.GetSigHashOpCount();\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        nSigHashOps += prevout.scriptPubKey.GetSigHashOpCount();\n+        if (prevout.scriptPubKey.IsPayToScriptHash() && (flags & SCRIPT_VERIFY_P2SH))\n+            nSigHashOps += prevout.scriptPubKey.GetSigHashOpCount(tx.vin[i].scriptSig);\n+    }\n \n+    return nSigHashOps;\n+}\n \n \n bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)\n@@ -668,6 +683,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (tx.HasWitness() && fRequireStandard && !IsWitnessStandard(tx, view))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n \n+        // Check for excessive SignatureHash operation\n+        if (fRequireStandard) {\n+            int64_t hashsize = GetTransactionHashableSize(tx) * GetTransactionBaseSigHashOpCount(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n+            if (hashsize > MAX_STANDARD_HASH_PER_WEIGHT * GetTransactionWeight(tx))\n+                return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-too-much-sighashing\");\n+        }\n+\n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n         CAmount nValueOut = tx.GetValueOut();"
      },
      {
        "sha": "4efc46e938cc6cd89bf789383d3f537d46a00162",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81ecd2ebe502ac932a915093115c97a9c3be1b6/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e81ecd2ebe502ac932a915093115c97a9c3be1b6",
        "patch": "@@ -350,6 +350,12 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& ma\n  */\n int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags);\n \n+/**\n+ * Compute total signature hashing operation of a transaction.\n+ * Parameters same as GetTransactionSigOpCost\n+ */\n+int GetTransactionBaseSigHashOpCount(const CTransaction& tx, const CCoinsViewCache& inputs, int flags);\n+\n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n  * This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it"
      }
    ]
  },
  {
    "sha": "67f4eba3ecea10feb3d762fc989b89b1e7c72e44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2Y0ZWJhM2VjZWExMGZlYjNkNzYyZmM5ODliODliMWU3YzcyZTQ0",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-09-23T02:55:22Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-12-22T04:03:46Z"
      },
      "message": "Add transaction tests for constant scriptCode",
      "tree": {
        "sha": "7fdb817cfffcf99e77197c5c1f00f071eae0d78a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fdb817cfffcf99e77197c5c1f00f071eae0d78a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67f4eba3ecea10feb3d762fc989b89b1e7c72e44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67f4eba3ecea10feb3d762fc989b89b1e7c72e44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67f4eba3ecea10feb3d762fc989b89b1e7c72e44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67f4eba3ecea10feb3d762fc989b89b1e7c72e44/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e81ecd2ebe502ac932a915093115c97a9c3be1b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e81ecd2ebe502ac932a915093115c97a9c3be1b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e81ecd2ebe502ac932a915093115c97a9c3be1b6"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 61,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9da503a67a06b5b5acee54280983efc515000fb5",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f4eba3ecea10feb3d762fc989b89b1e7c72e44/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f4eba3ecea10feb3d762fc989b89b1e7c72e44/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=67f4eba3ecea10feb3d762fc989b89b1e7c72e44",
        "patch": "@@ -340,5 +340,53 @@\n [[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n \"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c03959601010221023cb6055f4b57a1580c5a753e19610cafaedf7e0ff377731c77837fd666eae1712102c1b1db303ac232ffa8e5e7cc2cf5f96c6e40d3e6914061204c0541cb2043a0969552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n \n+[\"SCRIPT_VERIFY_CONST_SCRIPTCODE tests\"],\n+[\"All transactions are copied from OP_CODESEPARATOR tests in tx_valid.json\"],\n+\n+[[[\"bc7fd132fcf817918334822ee6d9bd95c889099c96e07ca2c1eb2cc70db63224\", 0, \"CODESEPARATOR 0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CHECKSIG\"]],\n+  \"01000000012432b60dc72cebc1a27ce0969c0989c895bdd9e62e8234839117f8fc32d17fbc000000004a493046022100a576b52051962c25e642c0fd3d77ee6c92487048e5d90818bcf5b51abaccd7900221008204f8fb121be4ec3b24483b1f92d89b1b0548513a134e345c5442e86e8617a501ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+[[[\"83e194f90b6ef21fa2e3a365b63794fb5daa844bdc9b25de30899fcfe7b01047\", 0, \"CODESEPARATOR CODESEPARATOR 0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CHECKSIG\"]],\n+  \"01000000014710b0e7cf9f8930de259bdc4b84aa5dfb9437b665a3e3a21ff26e0bf994e183000000004a493046022100a166121a61b4eeb19d8f922b978ff6ab58ead8a5a5552bf9be73dc9c156873ea02210092ad9bc43ee647da4f6652c320800debcf08ec20a094a0aaf085f63ecb37a17201ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[[[\"326882a7f22b5191f1a0cc9962ca4b878cd969cf3b3a70887aece4d801a0ba5e\", 0, \"0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CODESEPARATOR CHECKSIG\"]],\n+  \"01000000015ebaa001d8e4ec7a88703a3bcf69d98c874bca6299cca0f191512bf2a7826832000000004948304502203bf754d1c6732fbf87c5dcd81258aefd30f2060d7bd8ac4a5696f7927091dad1022100f5bcb726c4cf5ed0ed34cc13dadeedf628ae1045b7cb34421bc60b89f4cecae701ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CHECKSIGVERIFY CODESEPARATOR 0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n+  \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a900000000924830450221009c0a27f886a1d8cb87f6f595fbc3163d28f7a81ec3c4b252ee7f3ac77fd13ffa02203caa8dfa09713c8c4d7ef575c75ed97812072405d932bd11e6a1593a98b679370148304502201e3861ef39a526406bad1e20ecad06be7375ad40ddb582c9be42d26c3a0d7b240221009d0a3985e96522e59635d19cc4448547477396ce0ef17a58e7d74c3ef464292301ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"CODESEPARATOR in an unexecuted IF block is still invalid\"],\n+[[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"IF CODESEPARATOR ENDIF 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n+  \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a9000000004a48304502207a6974a77c591fa13dff60cabbb85a0de9e025c09c65a4b2285e47ce8e22f761022100f0efaac9ff8ac36b10721e0aae1fb975c90500b50c56e8a0cc52b0403f0425dd0100ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"CODESEPARATOR in an executed IF block is invalid\"],\n+[[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"IF CODESEPARATOR ENDIF 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n+  \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a9000000004a483045022100fa4a74ba9fd59c59f46c3960cf90cbe0d2b743c471d24a3d5d6db6002af5eebb02204d70ec490fd0f7055a7c45f86514336e3a7f03503dacecabb247fc23f15c83510151ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+\n+[\"Using CHECKSIG with singatures in scriptSigs will trigger FindAndDelete, which is invalid\"],\n+[[[\"ccf7f4053a02e653c36ac75c891b7496d0dc5ce5214f6c913d9cf8f1329ebee0\", 0, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n+  \"0100000001e0be9e32f1f89c3d916c4f21e55cdcd096741b895cc76ac353e6023a05f4f7cc00000000d86149304602210086e5f736a2c3622ebb62bd9d93d8e5d76508b98be922b97160edc3dcca6d8c47022100b23c312ac232a4473f19d2aeb95ab7bdf2b65518911a0d72d50e38b5dd31dc820121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ac4730440220508fa761865c8abd81244a168392876ee1d94e8ed83897066b5e2df2400dad24022043f5ee7538e87e9c6aef7ef55133d3e51da7cc522830a9c4d736977a76ef755c0121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"OP_CODESEPARATOR in scriptSig is invalid\"],\n+[[[\"10c9f0effe83e97f80f067de2b11c6a00c3088a4bce42c5ae761519af9306f3c\", 1, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n+  \"01000000013c6f30f99a5161e75a2ce4bca488300ca0c6112bde67f0807fe983feeff0c91001000000e608646561646265656675ab61493046022100ce18d384221a731c993939015e3d1bcebafb16e8c0b5b5d14097ec8177ae6f28022100bcab227af90bab33c3fe0a9abfee03ba976ee25dc6ce542526e9b2e56e14b7f10121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ac493046022100c3b93edcc0fd6250eb32f2dd8a0bba1754b0f6c3be8ed4100ed582f3db73eba2022100bf75b5bd2eff4d6bf2bda2e34a40fcc07d4aa3cf862ceaa77b47b81eff829f9a01ab21038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"Again, FindAndDelete() in scriptSig\"],\n+[[[\"6056ebd549003b10cbbd915cea0d82209fe40b8617104be917a26fa92cbe3d6f\", 0, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n+  \"01000000016f3dbe2ca96fa217e94b1017860be49f20820dea5c91bdcb103b0049d5eb566000000000fd1d0147304402203989ac8f9ad36b5d0919d97fa0a7f70c5272abee3b14477dc646288a8b976df5022027d19da84a066af9053ad3d1d7459d171b7e3a80bc6c4ef7a330677a6be548140147304402203989ac8f9ad36b5d0919d97fa0a7f70c5272abee3b14477dc646288a8b976df5022027d19da84a066af9053ad3d1d7459d171b7e3a80bc6c4ef7a330677a6be548140121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ac47304402203757e937ba807e4a5da8534c17f9d121176056406a6465054bdd260457515c1a02200f02eccf1bec0f3a0d65df37889143c2e88ab7acec61a7b6f5aa264139141a2b0121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[[[\"5a6b0021a6042a686b6b94abc36b387bef9109847774e8b1e51eb8cc55c53921\", 1, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n+  \"01000000012139c555ccb81ee5b1e87477840991ef7b386bc3ab946b6b682a04a621006b5a01000000fdb40148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f2204148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390175ac4830450220646b72c35beeec51f4d5bc1cbae01863825750d7f490864af354e6ea4f625e9c022100f04b98432df3a9641719dbced53393022e7249fb59db993af1118539830aab870148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a580039017521038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"FindAndDelete() in redeemScript\"],\n+[[[\"b5b598de91787439afd5938116654e0b16b7a0d0f82742ba37564219c5afcbf9\", 0, \"DUP HASH160 0x14 0xf6f365c40f0739b61de827a44751e5e99032ed8f EQUALVERIFY CHECKSIG\"],\n+  [\"ab9805c6d57d7070d9a42c5176e47bb705023e6b67249fb6760880548298e742\", 0, \"HASH160 0x14 0xd8dacdadb7462ae15cd906f1878706d0da8660e6 EQUAL\"]],\n+  \"0100000002f9cbafc519425637ba4227f8d0a0b7160b4e65168193d5af39747891de98b5b5000000006b4830450221008dd619c563e527c47d9bd53534a770b102e40faa87f61433580e04e271ef2f960220029886434e18122b53d5decd25f1f4acb2480659fea20aabd856987ba3c3907e0121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffff42e7988254800876b69f24676b3e0205b77be476512ca4d970707dd5c60598ab00000000fd260100483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a53034930460221008431bdfa72bc67f9d41fe72e94c88fb8f359ffa30b33c72c121c5a877d922e1002210089ef5fc22dd8bfc6bf9ffdb01a9862d27687d424d1fefbab9e9c7176844a187a014c9052483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303210378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71210378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c7153aeffffffff01a08601000000000017a914d8dacdadb7462ae15cd906f1878706d0da8660e68700000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"FindAndDelete() in bare CHECKMULTISIG\"],\n+[[[\"ceafe58e0f6e7d67c0409fbbf673c84c166e3c5d3c24af58f7175b18df3bb3db\", 0, \"DUP HASH160 0x14 0xf6f365c40f0739b61de827a44751e5e99032ed8f EQUALVERIFY CHECKSIG\"],\n+  [\"ceafe58e0f6e7d67c0409fbbf673c84c166e3c5d3c24af58f7175b18df3bb3db\", 1, \"2 0x48 0x3045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 3 CHECKMULTISIG\"]],\n+  \"0100000002dbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce000000006b4830450221009627444320dc5ef8d7f68f35010b4c050a6ed0d96b67a84db99fda9c9de58b1e02203e4b4aaa019e012e65d69b487fdf8719df72f488fa91506a80c49a33929f1fd50121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffffdbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce010000009300483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303ffffffff01a0860100000000001976a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "3abf382f8cf241a8a4527eedbc8afddf4d16a064",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f4eba3ecea10feb3d762fc989b89b1e7c72e44/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f4eba3ecea10feb3d762fc989b89b1e7c72e44/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=67f4eba3ecea10feb3d762fc989b89b1e7c72e44",
        "patch": "@@ -510,5 +510,16 @@\n [[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n \"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960101022102966f109c54e85d3aee8321301136cedeb9fc710fdef58a9de8a73942f8e567c021034ffc99dd9a79dd3cb31e2ab3e0b09e0e67db41ac068c625cd1f491576016c84e9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n \n+[\"CONST_SCRIPTCODE does not affect segwit transactions\"],\n+[\"BIP143 example: P2WSH with OP_CODESEPARATOR and out-of-range SIGHASH_SINGLE.\"],\n+[[[\"6eb316926b1c5d567cd6f5e6a84fec606fc53d7b474526d1fff3948020c93dfe\", 0, \"0x21 0x036d5c20fa14fb2f635474c1dc4ef5909d4568e5569b79fc94d3448486e14685f8 CHECKSIG\", 156250000],\n+[\"f825690aee1b3dc247da796cacb12687a5e802429fd291cfd63e010f02cf1508\", 0, \"0x00 0x20 0x5d1b56b63d714eebe542309525f484b7e9d6f686b3781b6f61ef925d66d6f6a0\", 4900000000]],\n+\"01000000000102fe3dc9208094f3ffd12645477b3dc56f60ec4fa8e6f5d67c565d1c6b9216b36e000000004847304402200af4e47c9b9629dbecc21f73af989bdaa911f7e6f6c2e9394588a3aa68f81e9902204f3fcf6ade7e5abb1295b6774c8e0abd94ae62217367096bc02ee5e435b67da201ffffffff0815cf020f013ed6cf91d29f4202e8a58726b1ac6c79da47c23d1bee0a6925f80000000000ffffffff0100f2052a010000001976a914a30741f8145e5acadf23f751864167f32e0963f788ac000347304402200de66acf4527789bfda55fc5459e214fa6083f936b430a762c629656216805ac0220396f550692cd347171cbc1ef1f51e15282e837bb2b30860dc77c8f78bc8501e503473044022027dc95ad6b740fe5129e7e62a75dd00f291a2aeb1200b84b09d9e3789406b6c002201a9ecd315dd6a0e632ab20bbb98948bc0c6fb204f2c286963bb48517a7058e27034721026dccc749adc2a9d0d89497ac511f760f45c47dc5ed9cf352a58ac706453880aeadab210255a9626aebf5e29c0e6538428ba0d1dcf6ca98ffdf086aa8ced5e0d0215ea465ac00000000\", \"P2SH,WITNESS,CONST_SCRIPTCODE\"],\n+\n+[\"BIP143 example: P2WSH with unexecuted OP_CODESEPARATOR and SINGLE|ANYONECANPAY\"],\n+[[[\"01c0cf7fba650638e55eb91261b183251fbb466f90dff17f10086817c542b5e9\", 0, \"0x00 0x20 0xba468eea561b26301e4cf69fa34bde4ad60c81e70f059f045ca9a79931004a4d\", 16777215],\n+[\"1b2a9a426ba603ba357ce7773cb5805cb9c7c2b386d100d1fc9263513188e680\", 0, \"0x00 0x20 0xd9bbfbe56af7c4b7f960a70d7ea107156913d9e5a26b0a71429df5e097ca6537\", 16777215]],\n+\"01000000000102e9b542c5176808107ff1df906f46bb1f2583b16112b95ee5380665ba7fcfc0010000000000ffffffff80e68831516392fcd100d186b3c2c7b95c80b53c77e77c35ba03a66b429a2a1b0000000000ffffffff0280969800000000001976a914de4b231626ef508c9a74a8517e6783c0546d6b2888ac80969800000000001976a9146648a8cd4531e1ec47f35916de8e259237294d1e88ac02483045022100f6a10b8604e6dc910194b79ccfc93e1bc0ec7c03453caaa8987f7d6c3413566002206216229ede9b4d6ec2d325be245c5b508ff0339bf1794078e20bfe0babc7ffe683270063ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac024730440220032521802a76ad7bf74d0e2c218b72cf0cbc867066e2e53db905ba37f130397e02207709e2188ed7f08f4c952d9d13986da504502b8c3be59617e043552f506c46ff83275163ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac00000000\", \"P2SH,WITNESS,CONST_SCRIPTCODE\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "4c3d54d324d1091f1529a5651c78ce0b118ad578",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67f4eba3ecea10feb3d762fc989b89b1e7c72e44/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67f4eba3ecea10feb3d762fc989b89b1e7c72e44/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=67f4eba3ecea10feb3d762fc989b89b1e7c72e44",
        "patch": "@@ -56,7 +56,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)\n     (string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS)\n     (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\n-    (string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE);\n+    (string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE)\n+    (string(\"CONST_SCRIPTCODE\"), (unsigned int)SCRIPT_VERIFY_CONST_SCRIPTCODE);\n \n unsigned int ParseScriptFlags(string strFlags)\n {"
      }
    ]
  },
  {
    "sha": "aa8c27515c3a2d2edfd8cdeae629a55397d6654a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYThjMjc1MTVjM2EyZDJlZGZkOGNkZWFlNjI5YTU1Mzk3ZDY2NTRh",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-27T17:13:52Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-12-22T05:39:32Z"
      },
      "message": "Test sighash limit policy",
      "tree": {
        "sha": "a381ff351db70ac887d2aeb059e5409b3bb6c642",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a381ff351db70ac887d2aeb059e5409b3bb6c642"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa8c27515c3a2d2edfd8cdeae629a55397d6654a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa8c27515c3a2d2edfd8cdeae629a55397d6654a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa8c27515c3a2d2edfd8cdeae629a55397d6654a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67f4eba3ecea10feb3d762fc989b89b1e7c72e44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67f4eba3ecea10feb3d762fc989b89b1e7c72e44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67f4eba3ecea10feb3d762fc989b89b1e7c72e44"
      }
    ],
    "stats": {
      "total": 343,
      "additions": 340,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5eca81fa0b2caf799a9e6b244f19090d8bd8dfc6",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=aa8c27515c3a2d2edfd8cdeae629a55397d6654a",
        "patch": "@@ -113,6 +113,7 @@\n     'p2p-segwit.py',\n     'wallet-dump.py',\n     'listtransactions.py',\n+    'sighashlimit.py',\n     # vv Tests less than 60s vv\n     'sendheaders.py',\n     'zapwallettxes.py',"
      },
      {
        "sha": "9d01a7dbdb62e2152bea2f4b4bea29fcf83ce3cf",
        "filename": "qa/rpc-tests/sighashlimit.py",
        "status": "added",
        "additions": 156,
        "deletions": 0,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/qa/rpc-tests/sighashlimit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/qa/rpc-tests/sighashlimit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sighashlimit.py?ref=aa8c27515c3a2d2edfd8cdeae629a55397d6654a",
        "patch": "@@ -0,0 +1,156 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.mininode import CTransaction, CTxOut, CTxIn, COutPoint, CTxInWitness\n+from test_framework.util import *\n+from test_framework.script import CScript, OP_0, OP_1, OP_3, OP_CHECKMULTISIG, OP_HASH160, OP_EQUAL, hash160, sha256\n+\n+# This is to test the sighash limit policy\n+\n+class SigHashLimitTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self):\n+        # Create 2 nodes. One enforces standardness rules and one does not.\n+        self.nodes = [start_node(0, self.options.tmpdir, [\"-acceptnonstdtxn=0\"])]\n+        self.nodes.append(start_node(1, self.options.tmpdir))\n+        connect_nodes(self.nodes[0], 1)\n+\n+    def test_preparation(self):\n+        print (\"Testing sighash limit policy\")\n+        # Generate a block and get the coinbase txid.\n+        self.coinbase_blocks = self.nodes[1].generate(1)\n+        coinbase_txid = int(\"0x\" + self.nodes[1].getblock(self.coinbase_blocks[0])['tx'][0], 0)\n+        self.nodes[1].generate(100)\n+\n+        '''\n+        # By design, it is impossible to create a normal transaction below 400,000 weight,\n+        # while having excessive SigHash size.\n+        #\n+        # Here it creates a 0-of-3 multisig script, which is counted as 3 SigHashOp in P2SH.\n+        # Also create a witness program, which should be ignored in SigHashOp counting.\n+        '''\n+        self.script = CScript([OP_0, OP_0, OP_0, OP_0, OP_0, OP_3, OP_CHECKMULTISIG])\n+        self.p2sh = CScript([OP_HASH160, hash160(self.script), OP_EQUAL])\n+        self.p2wsh = CScript([OP_0, sha256(self.script)])\n+\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(coinbase_txid)))\n+        for i in range(1000):\n+            tx.vout.append(CTxOut(4500000, self.p2sh))\n+        for i in range(100):\n+            tx.vout.append(CTxOut(4500000, self.p2wsh))\n+\n+        tx.rehash()\n+        signresults = self.nodes[1].signrawtransaction(bytes_to_hex_str(tx.serialize_with_witness()))['hex']\n+        self.txid = int(\"0x\" + self.nodes[1].sendrawtransaction(signresults, True), 0)\n+        self.nodes[1].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        self.p2shcount = 0      # P2SH outputs start from 0\n+        self.p2wshcount = 1000   # P2WSH outputs start from 500\n+\n+    def non_segwit_test(self):\n+        '''\n+        tx1:\n+            Size = 4 + 1 + 49 * 122 + 3 + 1674 * 32 + 4 = 59558\n+            Weight = 59558 * 4 = 238232\n+            Hashable size = 59558 - 8 * 122 = 58582\n+            SigHashOp = 3 * 122 = 366\n+            SigHashSize = 366 * 58582 = 21441012\n+            SigHashSize per Weight = 21441012 / 238232 = 90.0006\n+\n+        tx2:\n+            Size = 4 + 1 + 49 * 122 + 3 + 1673 * 32 + 4 = 59526\n+            Weight = 59526 * 4 = 238104\n+            Hashable size = 59526 - 8 * 122 = 58550\n+            SigHashOp = 3 * 122 = 366\n+            SigHashSize = 366 * 58550 = 21429300\n+            SigHashSize per Weight = 21429300 / 238104 = 89.9997\n+        '''\n+        tx1 = CTransaction()\n+        tx2 = CTransaction()\n+        for i in range(122):\n+            tx1.vin.append(CTxIn(COutPoint(self.txid,self.p2shcount),CScript([self.script])))\n+            tx2.vin.append(CTxIn(COutPoint(self.txid,self.p2shcount + 1),CScript([self.script])))\n+            self.p2shcount += 2\n+        for i in range(1673):\n+            tx1.vout.append(CTxOut(1000, self.p2sh))\n+            tx2.vout.append(CTxOut(1000, self.p2sh))\n+        tx1.vout.append(CTxOut(1000, self.p2sh))    # Add one more output to tx1\n+        tx1.rehash()\n+        tx2.rehash()\n+        self.submit_pair(tx1, tx2)\n+\n+    def segwit_test(self):\n+        '''\n+        tx1:\n+            Witness-stripped size = 4 + 1 + 49 * 122 + 41 * 20 + 3 + 1791 * 32 + 4 = 64122\n+            Witness size = 2 + 1 * 122 + 9 * 20 = 304\n+            Weight = 64122 * 4 + 304 = 256792\n+            Hashable size = 64122 - 8 * 122 = 63146\n+            SigHashOp = 3 * 122 = 366\n+            SigHashSize = 366 * 63146 = 23111436\n+            SigHashSize per Weight = 23111436 / 256792 = 90.0006\n+\n+        tx2:\n+            Witness-stripped size = 4 + 1 + 49 * 122 + 41 * 20 + 3 + 1790 * 32 + 4 = 64090\n+            Witness size = 2 + 1 * 122 + 9 * 20 = 304\n+            Weight = 64090 * 4 + 304 = 256664\n+            Hashable size = 64090 - 8 * 122 = 63114\n+            SigHashOp = 3 * 122 = 366\n+            SigHashSize = 366 * 63114 = 23099724\n+            SigHashSize per Weight = 23099724 / 256664 = 89.9999\n+        '''\n+        tx1 = CTransaction()\n+        tx2 = CTransaction()\n+        for i in range(20):\n+            tx1.vin.append(CTxIn(COutPoint(self.txid,self.p2wshcount)))\n+            tx1.wit.vtxinwit.append(CTxInWitness())\n+            tx1.wit.vtxinwit[i].scriptWitness.stack = [self.script]\n+            tx2.vin.append(CTxIn(COutPoint(self.txid,self.p2wshcount + 1)))\n+            tx2.wit.vtxinwit.append(CTxInWitness())\n+            tx2.wit.vtxinwit[i].scriptWitness.stack = [self.script]\n+            self.p2wshcount += 2\n+        for i in range(122):\n+            tx1.vin.append(CTxIn(COutPoint(self.txid,self.p2shcount),CScript([self.script])))\n+            tx2.vin.append(CTxIn(COutPoint(self.txid,self.p2shcount + 1),CScript([self.script])))\n+            self.p2shcount += 2\n+        for i in range(1790):\n+            tx1.vout.append(CTxOut(1000, self.p2sh))\n+            tx2.vout.append(CTxOut(1000, self.p2sh))\n+        tx1.vout.append(CTxOut(1000, self.p2sh))    # Add one more output to tx1\n+        tx1.rehash()\n+        tx2.rehash()\n+        self.submit_pair(tx1, tx2)\n+\n+    def submit_pair(self, tx1, tx2):\n+        # Non-standard node should accept both tx1 and tx2. Standard node should accept only tx2\n+        try:\n+            self.nodes[0].sendrawtransaction(bytes_to_hex_str(tx1.serialize_with_witness()), True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], \"64: bad-txns-nonstandard-too-much-sighashing\")\n+        else:\n+            assert(False)\n+        self.nodes[1].sendrawtransaction(bytes_to_hex_str(tx1.serialize_with_witness()), True)\n+        self.nodes[0].sendrawtransaction(bytes_to_hex_str(tx2.serialize_with_witness()), True)\n+        self.nodes[1].sendrawtransaction(bytes_to_hex_str(tx2.serialize_with_witness()), True)\n+        self.nodes[1].generate(1)\n+        sync_blocks(self.nodes)\n+\n+    def run_test(self):\n+        self.test_preparation()\n+        self.non_segwit_test()          # Test non-segwit P2SH before segwit activation\n+        self.nodes[0].generate(400)     # Activate segwit\n+        sync_blocks(self.nodes)\n+        self.non_segwit_test()          # Test non-segwit P2SH after segwit activation\n+        self.segwit_test()              # Test non-segwit P2SH mixed with P2WSH\n+\n+if __name__ == '__main__':\n+    SigHashLimitTest().main()\n\\ No newline at end of file"
      },
      {
        "sha": "b308c49d92d9ba26b4bc350869415e1c2ea668b5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 109,
        "deletions": 2,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=aa8c27515c3a2d2edfd8cdeae629a55397d6654a",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2015 The Bitcoin Core developers\n+// Copyright (c) 2011-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -19,6 +19,7 @@\n #include \"script/bitcoinconsensus.h\"\n #endif\n \n+#include <algorithm>\n #include <fstream>\n #include <stdint.h>\n #include <string>\n@@ -1337,7 +1338,6 @@ ScriptFromHex(const char* hex)\n     return CScript(data.begin(), data.end());\n }\n \n-\n BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n {\n     // Exercise the FindAndDelete functionality\n@@ -1447,4 +1447,111 @@ BOOST_AUTO_TEST_CASE(script_FindAndDelete)\n     BOOST_CHECK(s == expect);\n }\n \n+BOOST_AUTO_TEST_CASE(script_SigHashOp)\n+{\n+    CScript s;\n+    CKey key;\n+    key.MakeNewKey(true);\n+    std::vector<unsigned char> pubkey = ToByteVector(key.GetPubKey());\n+\n+    // Empty script\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 0);\n+\n+    // Maximum count is 3\n+    for (int i = 1; i < 10; i++) {\n+        s << OP_CHECKSIG;\n+        BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), std::min(3,i));\n+    }\n+    s = CScript();\n+    for (int i = 1; i < 10; i++) {\n+        s << OP_CHECKMULTISIG;\n+        BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), std::min(3,3*i));\n+    }\n+    s = CScript();\n+    for (int i = 1; i < 10; i++) {\n+        s << OP_1 << pubkey << pubkey << OP_2 << OP_CHECKMULTISIG;\n+        BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), std::min(3,i));\n+    }\n+    s = CScript();\n+    for (int i = 1; i < 10; i++) {\n+        s << OP_2 << pubkey << pubkey << OP_2 << OP_CHECKMULTISIG;\n+        BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), std::min(3,2*i));\n+    }\n+    s = CScript();\n+    for (int i = 1; i < 10; i++) {\n+        s << pubkey << OP_1 << OP_CHECKMULTISIG;\n+        BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), std::min(3,i));\n+    }\n+    s = CScript();\n+    for (int i = 1; i < 10; i++) {\n+        s << pubkey << pubkey << OP_2 << OP_CHECKMULTISIG;\n+        BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), std::min(3,2*i));\n+    }\n+\n+    // Mixing CHECKSIG and CHECKMULTISIG\n+    s = CScript() << OP_CHECKSIGVERIFY << OP_1 << pubkey << pubkey << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 2);\n+    s = CScript() << OP_1 << pubkey << pubkey << OP_2 << OP_CHECKMULTISIGVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 2);\n+\n+    // OP_RESERVED is considered as a push code. It doesn't matter since the script must fail before CHECKMULTISIG is run.\n+    s = CScript() << OP_1 << OP_RESERVED << OP_0 << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 1);\n+\n+    // Using OP_RESERVED as number of signature is non-canonical\n+    s = CScript() << OP_RESERVED << OP_RESERVED << OP_0 << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 2);\n+\n+    // Using non-push code before number of signature or after OP_CHECKMULTISIG is ok\n+    s = CScript() << OP_NOP << OP_1 << pubkey << pubkey << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 1);\n+    s = CScript() << OP_1 << pubkey << pubkey << OP_2 << OP_CHECKMULTISIG << OP_NOP;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 1);\n+    // But not ok if it's used in between\n+    s = CScript() << OP_1 << OP_NOP << pubkey << pubkey << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 2);\n+    s = CScript() << OP_1 << pubkey << OP_NOP << pubkey << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 2);\n+    s = CScript() << OP_1 << pubkey << pubkey << OP_NOP << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 2);\n+    s = CScript() << OP_1 << pubkey << pubkey << OP_2 << OP_NOP << OP_CHECKMULTISIG;\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 3);\n+\n+    // Test 17 * 18 combinations of nKey and nSig in OP_CHECKMULTISIG\n+    static const opcodetype pushOps[] = {OP_0, OP_1, OP_2, OP_3, OP_4, OP_5, OP_6, OP_7, OP_8, OP_9, OP_10, OP_11, OP_12, OP_13, OP_14, OP_15, OP_16};\n+    for (int nKey = 0; nKey <= 16; nKey++) {\n+        for (int nSig = -1; nSig <= 16; nSig++) {\n+            s = CScript();\n+            if (nSig >= 0)\n+                s << pushOps[nSig];\n+            for (int i = 0; i < nKey; i++)\n+                s << pubkey;\n+            s << pushOps[nKey] << OP_CHECKMULTISIG;\n+            if (nKey == 0)\n+                BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 3); // This is non-canonical\n+            else if (nSig <= 0)\n+                BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), std::min(nKey, 3)); // nSig is missing or non-canonical\n+            else\n+                BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), std::min(std::min(nKey, nSig), 3));\n+        }\n+    }\n+\n+    // Non-canonical push for nKey or nSig\n+    s = ScriptFromHex(\"5151510102ae\");\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 3);\n+    s = ScriptFromHex(\"0101515152ae\");\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 2);\n+\n+    // Non-canonical push for pubkey is ok\n+    // OP_2 0x0101 OP_PUSHDATA1(01) OP_PUSHDATA2(01) OP_PUSHDATA4(01) OP_1 OP_RESERVED OP_6 OP_CHECKMULTISIG\n+    s = ScriptFromHex(\"5201014c01014d0100014e0100000001515056ae\");\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 2);\n+\n+    // Truncated scripts are invalid and the last known SigHashOp is returned\n+    s = ScriptFromHex(\"ac05acadaeaf\");\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 1);\n+    s = ScriptFromHex(\"5200000053ae05acadaeaf\");\n+    BOOST_CHECK_EQUAL(s.GetSigHashOpCount(), 2);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "761619bb20f58a699459d465c015675fca5e5746",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 1,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=aa8c27515c3a2d2edfd8cdeae629a55397d6654a",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2012-2015 The Bitcoin Core developers\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -141,6 +141,32 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         assert(GetTransactionSigOpCost(CTransaction(creationTx), coins, flags) == MAX_PUBKEYS_PER_MULTISIG * WITNESS_SCALE_FACTOR);\n         // Sanity check: script verification fails because of an invalid signature.\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n+        // SigHashOp in spending scriptPubKey is counted as the number of signature\n+        assert(GetTransactionBaseSigHashOpCount(CTransaction(spendingTx), coins, flags) == 1);\n+        // SigOp in output scriptPubKey is not counted as SigHashOp\n+        assert(GetTransactionBaseSigHashOpCount(CTransaction(creationTx), coins, flags) == 0);\n+    }\n+\n+    // Multisig in scriptSig (legacy counting)\n+    {\n+        CScript scriptPubKey = CScript();\n+        // Do not use a valid signature to avoid using wallet operations.\n+        CScript scriptSig = CScript() << OP_0 << OP_0 << 1 << ToByteVector(pubkey) << ToByteVector(pubkey) << 2 << OP_CHECKMULTISIGVERIFY;\n+\n+        BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CScriptWitness());\n+        // creationTx contains two signature operations in its scriptSig, but legacy counting\n+        // is not accurate.\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == MAX_PUBKEYS_PER_MULTISIG * WITNESS_SCALE_FACTOR);\n+        // Sanity check: script verification fails because of an invalid signature.\n+        assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n+        // SigHashOp in scriptSig is counted as the number of signature\n+        assert(GetTransactionBaseSigHashOpCount(CTransaction(spendingTx), coins, flags) == 1);\n+\n+        // SigOp in coinbase scriptSig is counted\n+        spendingTx.vin[0].prevout.SetNull();\n+        assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == MAX_PUBKEYS_PER_MULTISIG * WITNESS_SCALE_FACTOR);\n+        // SigHashOp in coinbase scriptSig is not counted\n+        assert(GetTransactionBaseSigHashOpCount(CTransaction(spendingTx), coins, flags) == 0);\n     }\n \n     // Multisig nested in P2SH\n@@ -152,6 +178,8 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, CScriptWitness());\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2 * WITNESS_SCALE_FACTOR);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n+        // SigHashOp in redeemScript is counted as the number of signature\n+        assert(GetTransactionBaseSigHashOpCount(CTransaction(spendingTx), coins, flags) == 1);\n     }\n \n     // P2WPKH witness program\n@@ -169,6 +197,8 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         // No signature operations if we don't verify the witness.\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags & ~SCRIPT_VERIFY_WITNESS) == 0);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_EQUALVERIFY);\n+        // SigOp in witness is not counted as SigHashOp\n+        assert(GetTransactionBaseSigHashOpCount(CTransaction(spendingTx), coins, flags) == 0);\n \n         // The sig op cost for witness version != 0 is zero.\n         assert(scriptPubKey[0] == 0x00);\n@@ -196,6 +226,8 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 1);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_EQUALVERIFY);\n+        // SigOp in witness is not counted as SigHashOp\n+        assert(GetTransactionBaseSigHashOpCount(CTransaction(spendingTx), coins, flags) == 0);\n     }\n \n     // P2WSH witness program\n@@ -212,6 +244,8 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags & ~SCRIPT_VERIFY_WITNESS) == 0);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n+        // SigOp in witness is not counted as SigHashOp\n+        assert(GetTransactionBaseSigHashOpCount(CTransaction(spendingTx), coins, flags) == 0);\n     }\n \n     // P2WSH nested in P2SH\n@@ -228,6 +262,8 @@ BOOST_AUTO_TEST_CASE(GetTxSigOpCost)\n         BuildTxs(spendingTx, coins, creationTx, scriptPubKey, scriptSig, scriptWitness);\n         assert(GetTransactionSigOpCost(CTransaction(spendingTx), coins, flags) == 2);\n         assert(VerifyWithFlag(creationTx, spendingTx, flags) == SCRIPT_ERR_CHECKMULTISIGVERIFY);\n+        // SigOp in witness is not counted as SigHashOp\n+        assert(GetTransactionBaseSigHashOpCount(CTransaction(spendingTx), coins, flags) == 0);\n     }\n }\n "
      },
      {
        "sha": "ff23c7ba458fc517ca9bf94e0f92a0669879a542",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa8c27515c3a2d2edfd8cdeae629a55397d6654a/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=aa8c27515c3a2d2edfd8cdeae629a55397d6654a",
        "patch": "@@ -19,6 +19,7 @@\n #include \"script/script_error.h\"\n #include \"script/standard.h\"\n #include \"utilstrencodings.h\"\n+#include \"test_random.h\"\n \n #include <map>\n #include <string>\n@@ -761,4 +762,40 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(!IsStandardTx(t, reason));\n }\n \n+BOOST_AUTO_TEST_CASE(test_transaction_hashable_size)\n+{\n+    /*\n+     * Generate 500 random transactions, with 1-100 inputs and 1-100 outputs.\n+     * Some have witness, some do not.\n+     * Random size for scriptSig and scriptPubKey from 0 to 499\n+     * sz1 is the witness-stripped and scriptSig-stripped size, should be equal to the result of GetTransactionHashableSize\n+     */\n+    for (int i = 0; i < 500; i++) {\n+        int nIn = 1 + insecure_rand() % 100;\n+        int nOut = 1 + insecure_rand() % 100;\n+        bool wit = insecure_rand() % 2;\n+        CMutableTransaction mtx;\n+        mtx.vin.resize(nIn);\n+        mtx.vout.resize(nOut);\n+        for (int j = 0; j < nOut; j++) {\n+            int sizeScript = insecure_rand() % 500;\n+            for (int k = 0; k < sizeScript; k++)\n+                mtx.vout[j].scriptPubKey << OP_0;\n+        }\n+        if (wit) {\n+            for (int j = 0; j < nIn; j++) {\n+                int sizeWitness = insecure_rand() % 500;\n+                mtx.vin[j].scriptWitness.stack.resize(sizeWitness);\n+            }\n+        }\n+        int64_t sz1 = ::GetSerializeSize(mtx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n+        for (int j = 0; j < nIn; j++) {\n+            int sizeScript = insecure_rand() % 500;\n+            for (int k = 0; k < sizeScript; k++)\n+                mtx.vin[j].scriptSig << OP_0;\n+        }\n+        BOOST_CHECK_EQUAL(sz1, GetTransactionHashableSize(mtx));\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]