[
  {
    "sha": "131a2f0337f5c396739a47b60bb856ed84ec8937",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzFhMmYwMzM3ZjVjMzk2NzM5YTQ3YjYwYmI4NTZlZDg0ZWM4OTM3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-18T21:10:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:57:09Z"
      },
      "message": "scripted-diff: rename base_blob::data to m_data\n\nThis is in preparation for exposing a ::data member function.\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/\\([^.]\\|other.\\)data/\\1m_data/g\" src/uint256.h src/uint256.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "53b9964ab08ac4e7ff05f5d0f47302d8a711965f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53b9964ab08ac4e7ff05f5d0f47302d8a711965f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/131a2f0337f5c396739a47b60bb856ed84ec8937",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/131a2f0337f5c396739a47b60bb856ed84ec8937",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/131a2f0337f5c396739a47b60bb856ed84ec8937",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/131a2f0337f5c396739a47b60bb856ed84ec8937/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edec7f7c254294cd5c46ae5cf304353d458bb852",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edec7f7c254294cd5c46ae5cf304353d458bb852",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edec7f7c254294cd5c46ae5cf304353d458bb852"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "a5dfba41e25379d73e60d2b44d666894fc1c739f",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131a2f0337f5c396739a47b60bb856ed84ec8937/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131a2f0337f5c396739a47b60bb856ed84ec8937/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=131a2f0337f5c396739a47b60bb856ed84ec8937",
        "patch": "@@ -12,20 +12,20 @@\n template <unsigned int BITS>\n base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n {\n-    assert(vch.size() == sizeof(data));\n-    memcpy(data, vch.data(), sizeof(data));\n+    assert(vch.size() == sizeof(m_data));\n+    memcpy(m_data, vch.data(), sizeof(m_data));\n }\n \n template <unsigned int BITS>\n std::string base_blob<BITS>::GetHex() const\n {\n-    return HexStr(std::reverse_iterator<const uint8_t*>(data + sizeof(data)), std::reverse_iterator<const uint8_t*>(data));\n+    return HexStr(std::reverse_iterator<const uint8_t*>(m_data + sizeof(m_data)), std::reverse_iterator<const uint8_t*>(m_data));\n }\n \n template <unsigned int BITS>\n void base_blob<BITS>::SetHex(const char* psz)\n {\n-    memset(data, 0, sizeof(data));\n+    memset(m_data, 0, sizeof(m_data));\n \n     // skip leading spaces\n     while (IsSpace(*psz))\n@@ -39,7 +39,7 @@ void base_blob<BITS>::SetHex(const char* psz)\n     size_t digits = 0;\n     while (::HexDigit(psz[digits]) != -1)\n         digits++;\n-    unsigned char* p1 = (unsigned char*)data;\n+    unsigned char* p1 = (unsigned char*)m_data;\n     unsigned char* pend = p1 + WIDTH;\n     while (digits > 0 && p1 < pend) {\n         *p1 = ::HexDigit(psz[--digits]);"
      },
      {
        "sha": "0e0473a3008919dd913d52a0171ecb1a7a33d3e4",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/131a2f0337f5c396739a47b60bb856ed84ec8937/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/131a2f0337f5c396739a47b60bb856ed84ec8937/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=131a2f0337f5c396739a47b60bb856ed84ec8937",
        "patch": "@@ -18,29 +18,29 @@ class base_blob\n {\n protected:\n     static constexpr int WIDTH = BITS / 8;\n-    uint8_t data[WIDTH];\n+    uint8_t m_data[WIDTH];\n public:\n     base_blob()\n     {\n-        memset(data, 0, sizeof(data));\n+        memset(m_data, 0, sizeof(m_data));\n     }\n \n     explicit base_blob(const std::vector<unsigned char>& vch);\n \n     bool IsNull() const\n     {\n         for (int i = 0; i < WIDTH; i++)\n-            if (data[i] != 0)\n+            if (m_data[i] != 0)\n                 return false;\n         return true;\n     }\n \n     void SetNull()\n     {\n-        memset(data, 0, sizeof(data));\n+        memset(m_data, 0, sizeof(m_data));\n     }\n \n-    inline int Compare(const base_blob& other) const { return memcmp(data, other.data, sizeof(data)); }\n+    inline int Compare(const base_blob& other) const { return memcmp(m_data, other.m_data, sizeof(m_data)); }\n \n     friend inline bool operator==(const base_blob& a, const base_blob& b) { return a.Compare(b) == 0; }\n     friend inline bool operator!=(const base_blob& a, const base_blob& b) { return a.Compare(b) != 0; }\n@@ -53,32 +53,32 @@ class base_blob\n \n     unsigned char* begin()\n     {\n-        return &data[0];\n+        return &m_data[0];\n     }\n \n     unsigned char* end()\n     {\n-        return &data[WIDTH];\n+        return &m_data[WIDTH];\n     }\n \n     const unsigned char* begin() const\n     {\n-        return &data[0];\n+        return &m_data[0];\n     }\n \n     const unsigned char* end() const\n     {\n-        return &data[WIDTH];\n+        return &m_data[WIDTH];\n     }\n \n     unsigned int size() const\n     {\n-        return sizeof(data);\n+        return sizeof(m_data);\n     }\n \n     uint64_t GetUint64(int pos) const\n     {\n-        const uint8_t* ptr = data + pos * 8;\n+        const uint8_t* ptr = m_data + pos * 8;\n         return ((uint64_t)ptr[0]) | \\\n                ((uint64_t)ptr[1]) << 8 | \\\n                ((uint64_t)ptr[2]) << 16 | \\\n@@ -92,13 +92,13 @@ class base_blob\n     template<typename Stream>\n     void Serialize(Stream& s) const\n     {\n-        s.write((char*)data, sizeof(data));\n+        s.write((char*)m_data, sizeof(m_data));\n     }\n \n     template<typename Stream>\n     void Unserialize(Stream& s)\n     {\n-        s.read((char*)data, sizeof(data));\n+        s.read((char*)m_data, sizeof(m_data));\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "567825049fb0e47e698dcaad9caa65693a6b42d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Njc4MjUwNDlmYjBlNDdlNjk4ZGNhYWQ5Y2FhNjU2OTNhNmI0MmQz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-18T21:12:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:57:09Z"
      },
      "message": "Make uint256 Span-convertible by adding ::data()",
      "tree": {
        "sha": "889f4e6b9b100ea324e1aa3a58ba2a7e759a26f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/889f4e6b9b100ea324e1aa3a58ba2a7e759a26f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/567825049fb0e47e698dcaad9caa65693a6b42d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567825049fb0e47e698dcaad9caa65693a6b42d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/567825049fb0e47e698dcaad9caa65693a6b42d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567825049fb0e47e698dcaad9caa65693a6b42d3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "131a2f0337f5c396739a47b60bb856ed84ec8937",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/131a2f0337f5c396739a47b60bb856ed84ec8937",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/131a2f0337f5c396739a47b60bb856ed84ec8937"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8ab747ef4960ea2e71965b3a9310c380c2e3911a",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/567825049fb0e47e698dcaad9caa65693a6b42d3/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/567825049fb0e47e698dcaad9caa65693a6b42d3/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=567825049fb0e47e698dcaad9caa65693a6b42d3",
        "patch": "@@ -51,6 +51,9 @@ class base_blob\n     void SetHex(const std::string& str);\n     std::string ToString() const;\n \n+    const unsigned char* data() const { return m_data; }\n+    unsigned char* data() { return m_data; }\n+\n     unsigned char* begin()\n     {\n         return &m_data[0];"
      }
    ]
  },
  {
    "sha": "e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjNkY2MzYTY3NTJlN2Q0MDZlN2E2NTBjMmQ2YzJlOTVjZDM5YWFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-18T23:31:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:57:09Z"
      },
      "message": "Add MakeUCharSpan, to help constructing Span<[const] unsigned char>\n\nBased on a suggestion by Russell Yanofsky.",
      "tree": {
        "sha": "b34c1f56300dcb2a9248610a443d7311a5e5cc27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b34c1f56300dcb2a9248610a443d7311a5e5cc27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "567825049fb0e47e698dcaad9caa65693a6b42d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/567825049fb0e47e698dcaad9caa65693a6b42d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/567825049fb0e47e698dcaad9caa65693a6b42d3"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4afb383a5940aed871bb89d9d971de88fc547d46",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab",
        "patch": "@@ -207,4 +207,16 @@ T& SpanPopBack(Span<T>& span)\n     return back;\n }\n \n+// Helper functions to safely cast to unsigned char pointers.\n+inline unsigned char* UCharCast(char* c) { return (unsigned char*)c; }\n+inline unsigned char* UCharCast(unsigned char* c) { return c; }\n+inline const unsigned char* UCharCast(const char* c) { return (unsigned char*)c; }\n+inline const unsigned char* UCharCast(const unsigned char* c) { return c; }\n+\n+// Helper function to safely convert a Span to a Span<[const] unsigned char>.\n+template <typename T> constexpr auto UCharSpanCast(Span<T> s) -> Span<typename std::remove_pointer<decltype(UCharCast(s.data()))>::type> { return {UCharCast(s.data()), s.size()}; }\n+\n+/** Like MakeSpan, but for (const) unsigned char member types only. Only works for (un)signed char containers. */\n+template <typename V> constexpr auto MakeUCharSpan(V&& v) -> decltype(UCharSpanCast(MakeSpan(std::forward<V>(v)))) { return UCharSpanCast(MakeSpan(std::forward<V>(v))); }\n+\n #endif"
      }
    ]
  },
  {
    "sha": "2a2182c387f607cd8284f33890bd285a81077b7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTIxODJjMzg3ZjYwN2NkODI4NGYzMzg5MGJkMjg1YTgxMDc3Yjdm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-26T20:36:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:57:09Z"
      },
      "message": "Make script/standard's BaseHash Span-convertible",
      "tree": {
        "sha": "b267918526b915d10a4c4cd82787e333c7e3f6d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b267918526b915d10a4c4cd82787e333c7e3f6d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a2182c387f607cd8284f33890bd285a81077b7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a2182c387f607cd8284f33890bd285a81077b7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a2182c387f607cd8284f33890bd285a81077b7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a2182c387f607cd8284f33890bd285a81077b7f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e63dcc3a6752e7d406e7a650c2d6c2e95cd39aab"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "992e37675ff0290e7a2e804bb0dda35eb0578a1e",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a2182c387f607cd8284f33890bd285a81077b7f/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a2182c387f607cd8284f33890bd285a81077b7f/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=2a2182c387f607cd8284f33890bd285a81077b7f",
        "patch": "@@ -79,6 +79,9 @@ class BaseHash\n     {\n         return m_hash.size();\n     }\n+\n+    unsigned char* data() { return m_hash.data(); }\n+    const unsigned char* data() const { return m_hash.data(); }\n };\n \n /** A reference to a CScript: the Hash160 of its serialization (see script.h) */"
      }
    ]
  },
  {
    "sha": "e549bf8a9afae42fcda805e216a1cde62df195a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTQ5YmY4YTlhZmFlNDJmY2RhODA1ZTIxNmExY2RlNjJkZjE5NWE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-18T23:32:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:57:53Z"
      },
      "message": "Make CHash256 and CHash160 consume Spans",
      "tree": {
        "sha": "2d00e10ead84a3162f7ddc74300dcfbd340853a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d00e10ead84a3162f7ddc74300dcfbd340853a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e549bf8a9afae42fcda805e216a1cde62df195a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e549bf8a9afae42fcda805e216a1cde62df195a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e549bf8a9afae42fcda805e216a1cde62df195a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e549bf8a9afae42fcda805e216a1cde62df195a6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a2182c387f607cd8284f33890bd285a81077b7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a2182c387f607cd8284f33890bd285a81077b7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a2182c387f607cd8284f33890bd285a81077b7f"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "3b1d3e697a4328bc65d499e39afa5fa70122304a",
        "filename": "src/bench/chacha_poly_aead.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/bench/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/bench/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha_poly_aead.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -93,7 +93,7 @@ static void HASH(benchmark::Bench& bench, size_t buffersize)\n     uint8_t hash[CHash256::OUTPUT_SIZE];\n     std::vector<uint8_t> in(buffersize,0);\n     bench.batch(in.size()).unit(\"byte\").run([&] {\n-        CHash256().Write(in.data(), in.size()).Finalize(hash);\n+        CHash256().Write(in).Finalize(hash);\n     });\n }\n "
      },
      {
        "sha": "217c397e2b57729c722f8ee30a8d896d56cf780f",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -34,7 +34,7 @@ static void VerifyScriptBench(benchmark::Bench& bench)\n     key.Set(vchKey.begin(), vchKey.end(), false);\n     CPubKey pubkey = key.GetPubKey();\n     uint160 pubkeyHash;\n-    CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(pubkeyHash.begin());\n+    CHash160().Write(pubkey).Finalize(pubkeyHash.begin());\n \n     // Script.\n     CScript scriptPubKey = CScript() << witnessversion << ToByteVector(pubkeyHash);"
      },
      {
        "sha": "5a6c04cd49f969576a9a1de2ad78331b33ddf817",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -291,7 +291,7 @@ uint256 BlockFilter::GetHash() const\n     const std::vector<unsigned char>& data = GetEncodedFilter();\n \n     uint256 result;\n-    CHash256().Write(data.data(), data.size()).Finalize(result.begin());\n+    CHash256().Write(data).Finalize(result.begin());\n     return result;\n }\n \n@@ -301,8 +301,8 @@ uint256 BlockFilter::ComputeHeader(const uint256& prev_header) const\n \n     uint256 result;\n     CHash256()\n-        .Write(filter_hash.begin(), filter_hash.size())\n-        .Write(prev_header.begin(), prev_header.size())\n+        .Write(filter_hash)\n+        .Write(prev_header)\n         .Finalize(result.begin());\n     return result;\n }"
      },
      {
        "sha": "3289bdee2f362d2cfd005eca2a98128fb4e43baf",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -31,8 +31,8 @@ class CHash256 {\n         sha.Reset().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n-    CHash256& Write(const unsigned char *data, size_t len) {\n-        sha.Write(data, len);\n+    CHash256& Write(Span<const unsigned char> input) {\n+        sha.Write(input.data(), input.size());\n         return *this;\n     }\n \n@@ -55,8 +55,8 @@ class CHash160 {\n         CRIPEMD160().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n-    CHash160& Write(const unsigned char *data, size_t len) {\n-        sha.Write(data, len);\n+    CHash160& Write(Span<const unsigned char> input) {\n+        sha.Write(input.data(), input.size());\n         return *this;\n     }\n \n@@ -72,7 +72,7 @@ inline uint256 Hash(const T1 pbegin, const T1 pend)\n {\n     static const unsigned char pblank[1] = {};\n     uint256 result;\n-    CHash256().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n+    CHash256().Write({pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0])})\n               .Finalize((unsigned char*)&result);\n     return result;\n }\n@@ -83,8 +83,8 @@ inline uint256 Hash(const T1 p1begin, const T1 p1end,\n                     const T2 p2begin, const T2 p2end) {\n     static const unsigned char pblank[1] = {};\n     uint256 result;\n-    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n-              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n+    CHash256().Write({p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0])})\n+              .Write({p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0])})\n               .Finalize((unsigned char*)&result);\n     return result;\n }\n@@ -95,7 +95,7 @@ inline uint160 Hash160(const T1 pbegin, const T1 pend)\n {\n     static unsigned char pblank[1] = {};\n     uint160 result;\n-    CHash160().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n+    CHash160().Write({pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0])})\n               .Finalize((unsigned char*)&result);\n     return result;\n }\n@@ -129,7 +129,7 @@ class CHashWriter\n     int GetVersion() const { return nVersion; }\n \n     void write(const char *pch, size_t size) {\n-        ctx.Write((const unsigned char*)pch, size);\n+        ctx.Write({(const unsigned char*)pch, size});\n     }\n \n     // invalidates the object"
      },
      {
        "sha": "6b504558e11f3e28ff6237734aa1c997be1cea14",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -237,7 +237,7 @@ bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n     std::string str = \"Bitcoin key verification\\n\";\n     GetRandBytes(rnd, sizeof(rnd));\n     uint256 hash;\n-    CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize(hash.begin());\n+    CHash256().Write(MakeUCharSpan(str)).Write(rnd).Finalize(hash.begin());\n     std::vector<unsigned char> vchSig;\n     Sign(hash, vchSig);\n     return pubkey.Verify(hash, vchSig);"
      },
      {
        "sha": "435a527ce7f01cbf0a34eb2dab90b7c1e6948b05",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -685,7 +685,7 @@ int V1TransportDeserializer::readData(const char *pch, unsigned int nBytes)\n         vRecv.resize(std::min(hdr.nMessageSize, nDataPos + nCopy + 256 * 1024));\n     }\n \n-    hasher.Write((const unsigned char*)pch, nCopy);\n+    hasher.Write({(const unsigned char*)pch, nCopy});\n     memcpy(&vRecv[nDataPos], pch, nCopy);\n     nDataPos += nCopy;\n "
      },
      {
        "sha": "a1fcb4113046ea8da0ba04f11c5c6d5269223c60",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -986,9 +986,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     else if (opcode == OP_SHA256)\n                         CSHA256().Write(vch.data(), vch.size()).Finalize(vchHash.data());\n                     else if (opcode == OP_HASH160)\n-                        CHash160().Write(vch.data(), vch.size()).Finalize(vchHash.data());\n+                        CHash160().Write(vch).Finalize(vchHash.data());\n                     else if (opcode == OP_HASH256)\n-                        CHash256().Write(vch.data(), vch.size()).Finalize(vchHash.data());\n+                        CHash256().Write(vch).Finalize(vchHash.data());\n                     popstack(stack);\n                     stack.push_back(vchHash);\n                 }"
      },
      {
        "sha": "a3613db633503c67b416e226f3c36740d848482a",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -743,7 +743,7 @@ BOOST_AUTO_TEST_CASE(sha256d64)\n             in[j] = InsecureRandBits(8);\n         }\n         for (int j = 0; j < i; ++j) {\n-            CHash256().Write(in + 64 * j, 64).Finalize(out1 + 32 * j);\n+            CHash256().Write({in + 64 * j, 64}).Finalize(out1 + 32 * j);\n         }\n         SHA256D64(out2, in, i);\n         BOOST_CHECK(memcmp(out1, out2, 32 * i) == 0);"
      },
      {
        "sha": "c25392f0363517dc537e419244d1047e349bff88",
        "filename": "src/test/fuzz/crypto.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/fuzz/crypto.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/fuzz/crypto.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -44,8 +44,8 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n                 }\n             }\n \n-            (void)hash160.Write(data.data(), data.size());\n-            (void)hash256.Write(data.data(), data.size());\n+            (void)hash160.Write(data);\n+            (void)hash256.Write(data);\n             (void)hmac_sha256.Write(data.data(), data.size());\n             (void)hmac_sha512.Write(data.data(), data.size());\n             (void)ripemd160.Write(data.data(), data.size());"
      },
      {
        "sha": "10795225be18ef4e9c5d1ccac285449a93ab993e",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -196,7 +196,7 @@ BOOST_AUTO_TEST_CASE(key_key_negation)\n     std::string str = \"Bitcoin key verification\\n\";\n     GetRandBytes(rnd, sizeof(rnd));\n     uint256 hash;\n-    CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize(hash.begin());\n+    CHash256().Write(MakeUCharSpan(str)).Write(rnd).Finalize(hash.begin());\n \n     // import the static test key\n     CKey key = DecodeSecret(strSecret1C);"
      },
      {
        "sha": "3d05bfdda85da5ca0c3d372863f741fdf2c183c2",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -60,7 +60,7 @@ static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot\n                 }\n             }\n             mutated |= (inner[level] == h);\n-            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+            CHash256().Write(inner[level]).Write(h).Finalize(h.begin());\n         }\n         // Store the resulting hash at inner position level.\n         inner[level] = h;\n@@ -86,7 +86,7 @@ static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot\n         if (pbranch && matchh) {\n             pbranch->push_back(h);\n         }\n-        CHash256().Write(h.begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+        CHash256().Write(h).Write(h).Finalize(h.begin());\n         // Increment count to the value it would have if two entries at this\n         // level had existed.\n         count += (((uint32_t)1) << level);\n@@ -101,7 +101,7 @@ static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot\n                     matchh = true;\n                 }\n             }\n-            CHash256().Write(inner[level].begin(), 32).Write(h.begin(), 32).Finalize(h.begin());\n+            CHash256().Write(inner[level]).Write(h).Finalize(h.begin());\n             level++;\n         }\n     }"
      },
      {
        "sha": "66147d0e262f69f57b916e339f253cf19210d274",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -216,7 +216,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     s << OP_0 << ToByteVector(pubkey.GetID());\n     BOOST_CHECK(ExtractDestination(s, address));\n     WitnessV0KeyHash keyhash;\n-    CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(keyhash.begin());\n+    CHash160().Write(pubkey).Finalize(keyhash.begin());\n     BOOST_CHECK(boost::get<WitnessV0KeyHash>(&address) && *boost::get<WitnessV0KeyHash>(&address) == keyhash);\n \n     // TxoutType::WITNESS_V0_SCRIPTHASH"
      },
      {
        "sha": "4985f1a2133fa39cc0f463e24931a09164d0ba31",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -282,7 +282,7 @@ class TestBuilder\n         CScript scriptPubKey = script;\n         if (wm == WitnessMode::PKH) {\n             uint160 hash;\n-            CHash160().Write(&script[1], script.size() - 1).Finalize(hash.begin());\n+            CHash160().Write(MakeSpan(script).subspan(1)).Finalize(hash.begin());\n             script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(hash) << OP_EQUALVERIFY << OP_CHECKSIG;\n             scriptPubKey = CScript() << witnessversion << ToByteVector(hash);\n         } else if (wm == WitnessMode::SH) {"
      },
      {
        "sha": "91e039416cb24c11256de4b9daa2fcc07358cfe3",
        "filename": "src/test/settings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/settings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/settings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/settings_tests.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -228,7 +228,7 @@ BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)\n         if (OnlyHasDefaultSectionSetting(settings, network, name)) desc += \" ignored\";\n         desc += \"\\n\";\n \n-        out_sha.Write((const unsigned char*)desc.data(), desc.size());\n+        out_sha.Write(MakeUCharSpan(desc));\n         if (out_file) {\n             BOOST_REQUIRE(fwrite(desc.data(), 1, desc.size(), out_file) == desc.size());\n         }"
      },
      {
        "sha": "bbe3b2bc85cd3c22d0a42eb56d901c57f8d5c320",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -1009,7 +1009,7 @@ BOOST_FIXTURE_TEST_CASE(util_ArgsMerge, ArgsMergeTestingSetup)\n \n         desc += \"\\n\";\n \n-        out_sha.Write((const unsigned char*)desc.data(), desc.size());\n+        out_sha.Write(MakeUCharSpan(desc));\n         if (out_file) {\n             BOOST_REQUIRE(fwrite(desc.data(), 1, desc.size(), out_file) == desc.size());\n         }\n@@ -1112,7 +1112,7 @@ BOOST_FIXTURE_TEST_CASE(util_ChainMerge, ChainMergeTestingSetup)\n         }\n         desc += \"\\n\";\n \n-        out_sha.Write((const unsigned char*)desc.data(), desc.size());\n+        out_sha.Write(MakeUCharSpan(desc));\n         if (out_file) {\n             BOOST_REQUIRE(fwrite(desc.data(), 1, desc.size(), out_file) == desc.size());\n         }"
      },
      {
        "sha": "4e64455cb5c71f175128283da84768ff8b63c222",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e549bf8a9afae42fcda805e216a1cde62df195a6/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e549bf8a9afae42fcda805e216a1cde62df195a6/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e549bf8a9afae42fcda805e216a1cde62df195a6",
        "patch": "@@ -3434,7 +3434,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n         if (commitpos == -1) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n-            CHash256().Write(witnessroot.begin(), 32).Write(ret.data(), 32).Finalize(witnessroot.begin());\n+            CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot.begin());\n             CTxOut out;\n             out.nValue = 0;\n             out.scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n@@ -3579,7 +3579,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n             if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n                 return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n             }\n-            CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0]->vin[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n+            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness.begin());\n             if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n                 return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }"
      }
    ]
  },
  {
    "sha": "0ef97b1b103231db54e04a64bbdb5dcc3f34f482",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZWY5N2IxYjEwMzIzMWRiNTRlMDRhNjRiYmRiNWRjYzNmMzRmNDgy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-18T23:44:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:57:54Z"
      },
      "message": "Make MurmurHash3 consume Spans",
      "tree": {
        "sha": "6cfe11145d77336221d78659a9d4266b257b8e1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cfe11145d77336221d78659a9d4266b257b8e1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ef97b1b103231db54e04a64bbdb5dcc3f34f482",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef97b1b103231db54e04a64bbdb5dcc3f34f482",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ef97b1b103231db54e04a64bbdb5dcc3f34f482",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef97b1b103231db54e04a64bbdb5dcc3f34f482/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e549bf8a9afae42fcda805e216a1cde62df195a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e549bf8a9afae42fcda805e216a1cde62df195a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e549bf8a9afae42fcda805e216a1cde62df195a6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4c09f5f64632a88101b1f5442b63107e2ecd16e0",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ef97b1b103231db54e04a64bbdb5dcc3f34f482/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ef97b1b103231db54e04a64bbdb5dcc3f34f482/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=0ef97b1b103231db54e04a64bbdb5dcc3f34f482",
        "patch": "@@ -12,7 +12,7 @@ inline uint32_t ROTL32(uint32_t x, int8_t r)\n     return (x << r) | (x >> (32 - r));\n }\n \n-unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)\n+unsigned int MurmurHash3(unsigned int nHashSeed, Span<const unsigned char> vDataToHash)\n {\n     // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;"
      },
      {
        "sha": "e93146f92cf66cbec86c2b2d2b6a8fbb344f37e4",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ef97b1b103231db54e04a64bbdb5dcc3f34f482/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ef97b1b103231db54e04a64bbdb5dcc3f34f482/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=0ef97b1b103231db54e04a64bbdb5dcc3f34f482",
        "patch": "@@ -200,7 +200,7 @@ uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL\n     return ss.GetHash();\n }\n \n-unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n+unsigned int MurmurHash3(unsigned int nHashSeed, Span<const unsigned char> vDataToHash);\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n "
      }
    ]
  },
  {
    "sha": "02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmM0Y2M1YzVkZGY2MWY5OGVlMzY2YTRiZWE4YWJjMjZkZTQ5MmJk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-19T00:19:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:57:54Z"
      },
      "message": "Make CHash256/CHash160 output to Span",
      "tree": {
        "sha": "71a25d64248ffeac24259ddbe328481e9125020d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71a25d64248ffeac24259ddbe328481e9125020d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ef97b1b103231db54e04a64bbdb5dcc3f34f482",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef97b1b103231db54e04a64bbdb5dcc3f34f482",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ef97b1b103231db54e04a64bbdb5dcc3f34f482"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 28,
      "deletions": 26
    },
    "files": [
      {
        "sha": "9af0b502eb9e6c2e48d9a68f80f529ed63555e66",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -34,7 +34,7 @@ static void VerifyScriptBench(benchmark::Bench& bench)\n     key.Set(vchKey.begin(), vchKey.end(), false);\n     CPubKey pubkey = key.GetPubKey();\n     uint160 pubkeyHash;\n-    CHash160().Write(pubkey).Finalize(pubkeyHash.begin());\n+    CHash160().Write(pubkey).Finalize(pubkeyHash);\n \n     // Script.\n     CScript scriptPubKey = CScript() << witnessversion << ToByteVector(pubkeyHash);"
      },
      {
        "sha": "9a6fb4abd0cb23a9a0bce31eeedd6862952a9051",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -291,7 +291,7 @@ uint256 BlockFilter::GetHash() const\n     const std::vector<unsigned char>& data = GetEncodedFilter();\n \n     uint256 result;\n-    CHash256().Write(data).Finalize(result.begin());\n+    CHash256().Write(data).Finalize(result);\n     return result;\n }\n \n@@ -303,6 +303,6 @@ uint256 BlockFilter::ComputeHeader(const uint256& prev_header) const\n     CHash256()\n         .Write(filter_hash)\n         .Write(prev_header)\n-        .Finalize(result.begin());\n+        .Finalize(result);\n     return result;\n }"
      },
      {
        "sha": "409c84ba304c72b3a55287b4259ab9ed58ebd410",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -25,10 +25,11 @@ class CHash256 {\n public:\n     static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;\n \n-    void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+    void Finalize(Span<unsigned char> output) {\n+        assert(output.size() == OUTPUT_SIZE);\n         unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        sha.Reset().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n+        sha.Reset().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(output.data());\n     }\n \n     CHash256& Write(Span<const unsigned char> input) {\n@@ -49,10 +50,11 @@ class CHash160 {\n public:\n     static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;\n \n-    void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+    void Finalize(Span<unsigned char> output) {\n+        assert(output.size() == OUTPUT_SIZE);\n         unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        CRIPEMD160().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n+        CRIPEMD160().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(output.data());\n     }\n \n     CHash160& Write(Span<const unsigned char> input) {\n@@ -73,7 +75,7 @@ inline uint256 Hash(const T1 pbegin, const T1 pend)\n     static const unsigned char pblank[1] = {};\n     uint256 result;\n     CHash256().Write({pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0])})\n-              .Finalize((unsigned char*)&result);\n+              .Finalize(result);\n     return result;\n }\n \n@@ -85,7 +87,7 @@ inline uint256 Hash(const T1 p1begin, const T1 p1end,\n     uint256 result;\n     CHash256().Write({p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0])})\n               .Write({p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0])})\n-              .Finalize((unsigned char*)&result);\n+              .Finalize(result);\n     return result;\n }\n \n@@ -96,7 +98,7 @@ inline uint160 Hash160(const T1 pbegin, const T1 pend)\n     static unsigned char pblank[1] = {};\n     uint160 result;\n     CHash160().Write({pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0])})\n-              .Finalize((unsigned char*)&result);\n+              .Finalize(result);\n     return result;\n }\n \n@@ -135,7 +137,7 @@ class CHashWriter\n     // invalidates the object\n     uint256 GetHash() {\n         uint256 result;\n-        ctx.Finalize((unsigned char*)&result);\n+        ctx.Finalize(result);\n         return result;\n     }\n "
      },
      {
        "sha": "4ed74a39b10a76b77822d347c900cc69f9cc4945",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -237,7 +237,7 @@ bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n     std::string str = \"Bitcoin key verification\\n\";\n     GetRandBytes(rnd, sizeof(rnd));\n     uint256 hash;\n-    CHash256().Write(MakeUCharSpan(str)).Write(rnd).Finalize(hash.begin());\n+    CHash256().Write(MakeUCharSpan(str)).Write(rnd).Finalize(hash);\n     std::vector<unsigned char> vchSig;\n     Sign(hash, vchSig);\n     return pubkey.Verify(hash, vchSig);"
      },
      {
        "sha": "438625bb36d9f5e2f6d8e81926bfcb68ea6fc3a1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -696,7 +696,7 @@ const uint256& V1TransportDeserializer::GetMessageHash() const\n {\n     assert(Complete());\n     if (data_hash.IsNull())\n-        hasher.Finalize(data_hash.begin());\n+        hasher.Finalize(data_hash);\n     return data_hash;\n }\n "
      },
      {
        "sha": "39feb4ccc92af3b7d30bc78a4aa033d12cebac24",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -986,9 +986,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     else if (opcode == OP_SHA256)\n                         CSHA256().Write(vch.data(), vch.size()).Finalize(vchHash.data());\n                     else if (opcode == OP_HASH160)\n-                        CHash160().Write(vch).Finalize(vchHash.data());\n+                        CHash160().Write(vch).Finalize(vchHash);\n                     else if (opcode == OP_HASH256)\n-                        CHash256().Write(vch).Finalize(vchHash.data());\n+                        CHash256().Write(vch).Finalize(vchHash);\n                     popstack(stack);\n                     stack.push_back(vchHash);\n                 }"
      },
      {
        "sha": "bf5c5877743795694ad64dfdeed1e700c1cc0c23",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -743,7 +743,7 @@ BOOST_AUTO_TEST_CASE(sha256d64)\n             in[j] = InsecureRandBits(8);\n         }\n         for (int j = 0; j < i; ++j) {\n-            CHash256().Write({in + 64 * j, 64}).Finalize(out1 + 32 * j);\n+            CHash256().Write({in + 64 * j, 64}).Finalize({out1 + 32 * j, 32});\n         }\n         SHA256D64(out2, in, i);\n         BOOST_CHECK(memcmp(out1, out2, 32 * i) == 0);"
      },
      {
        "sha": "c78962078459275f2a2f0110d3fb6ca147c3f928",
        "filename": "src/test/fuzz/crypto.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/fuzz/crypto.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/fuzz/crypto.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -73,12 +73,12 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 8)) {\n             case 0: {\n                 data.resize(CHash160::OUTPUT_SIZE);\n-                hash160.Finalize(data.data());\n+                hash160.Finalize(data);\n                 break;\n             }\n             case 1: {\n                 data.resize(CHash256::OUTPUT_SIZE);\n-                hash256.Finalize(data.data());\n+                hash256.Finalize(data);\n                 break;\n             }\n             case 2: {"
      },
      {
        "sha": "44e2f1c41ed2c7e3f9d0fa98c3a760b8a5415c87",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -196,7 +196,7 @@ BOOST_AUTO_TEST_CASE(key_key_negation)\n     std::string str = \"Bitcoin key verification\\n\";\n     GetRandBytes(rnd, sizeof(rnd));\n     uint256 hash;\n-    CHash256().Write(MakeUCharSpan(str)).Write(rnd).Finalize(hash.begin());\n+    CHash256().Write(MakeUCharSpan(str)).Write(rnd).Finalize(hash);\n \n     // import the static test key\n     CKey key = DecodeSecret(strSecret1C);"
      },
      {
        "sha": "77bc6017129f4c5ff9a045549e19f12bf88130aa",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -60,7 +60,7 @@ static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot\n                 }\n             }\n             mutated |= (inner[level] == h);\n-            CHash256().Write(inner[level]).Write(h).Finalize(h.begin());\n+            CHash256().Write(inner[level]).Write(h).Finalize(h);\n         }\n         // Store the resulting hash at inner position level.\n         inner[level] = h;\n@@ -86,7 +86,7 @@ static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot\n         if (pbranch && matchh) {\n             pbranch->push_back(h);\n         }\n-        CHash256().Write(h).Write(h).Finalize(h.begin());\n+        CHash256().Write(h).Write(h).Finalize(h);\n         // Increment count to the value it would have if two entries at this\n         // level had existed.\n         count += (((uint32_t)1) << level);\n@@ -101,7 +101,7 @@ static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot\n                     matchh = true;\n                 }\n             }\n-            CHash256().Write(inner[level]).Write(h).Finalize(h.begin());\n+            CHash256().Write(inner[level]).Write(h).Finalize(h);\n             level++;\n         }\n     }"
      },
      {
        "sha": "87678af4d1e6ab4964b83f0b8f418b4dc3d8cf97",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -216,7 +216,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n     s << OP_0 << ToByteVector(pubkey.GetID());\n     BOOST_CHECK(ExtractDestination(s, address));\n     WitnessV0KeyHash keyhash;\n-    CHash160().Write(pubkey).Finalize(keyhash.begin());\n+    CHash160().Write(pubkey).Finalize(keyhash);\n     BOOST_CHECK(boost::get<WitnessV0KeyHash>(&address) && *boost::get<WitnessV0KeyHash>(&address) == keyhash);\n \n     // TxoutType::WITNESS_V0_SCRIPTHASH"
      },
      {
        "sha": "0830743d614a2da32d66c724430a79973e6ce1f5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -282,7 +282,7 @@ class TestBuilder\n         CScript scriptPubKey = script;\n         if (wm == WitnessMode::PKH) {\n             uint160 hash;\n-            CHash160().Write(MakeSpan(script).subspan(1)).Finalize(hash.begin());\n+            CHash160().Write(MakeSpan(script).subspan(1)).Finalize(hash);\n             script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(hash) << OP_EQUALVERIFY << OP_CHECKSIG;\n             scriptPubKey = CScript() << witnessversion << ToByteVector(hash);\n         } else if (wm == WitnessMode::SH) {"
      },
      {
        "sha": "81af9727775c5d33b7b5ed98e3b0b61eaefba341",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "patch": "@@ -3434,7 +3434,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n         if (commitpos == -1) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n-            CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot.begin());\n+            CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot);\n             CTxOut out;\n             out.nValue = 0;\n             out.scriptPubKey.resize(MINIMUM_WITNESS_COMMITMENT);\n@@ -3579,7 +3579,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n             if (block.vtx[0]->vin[0].scriptWitness.stack.size() != 1 || block.vtx[0]->vin[0].scriptWitness.stack[0].size() != 32) {\n                 return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-nonce-size\", strprintf(\"%s : invalid witness reserved value size\", __func__));\n             }\n-            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness.begin());\n+            CHash256().Write(hashWitness).Write(block.vtx[0]->vin[0].scriptWitness.stack[0]).Finalize(hashWitness);\n             if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n                 return state.Invalid(BlockValidationResult::BLOCK_MUTATED, \"bad-witness-merkle-match\", strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }"
      }
    ]
  },
  {
    "sha": "77c507358bda9bd6c496f33e0f4418c0603bb08d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2M1MDczNThiZGE5YmQ2YzQ5NmYzM2UwZjQ0MThjMDYwM2JiMDhk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-06-26T20:36:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-07-30T20:57:54Z"
      },
      "message": "Make Hash[160] consume range-like objects",
      "tree": {
        "sha": "53e59bb680078392dbc32315c0b0f2adcde882f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53e59bb680078392dbc32315c0b0f2adcde882f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77c507358bda9bd6c496f33e0f4418c0603bb08d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c507358bda9bd6c496f33e0f4418c0603bb08d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77c507358bda9bd6c496f33e0f4418c0603bb08d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77c507358bda9bd6c496f33e0f4418c0603bb08d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02c4cc5c5ddf61f98ee366a4bea8abc26de492bd"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 40,
      "deletions": 63
    },
    "files": [
      {
        "sha": "9b2946e7a902066455e423d62306561f2acf2352",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -141,7 +141,7 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n {\n     // add 4-byte hash check to the end\n     std::vector<unsigned char> vch(vchIn);\n-    uint256 hash = Hash(vch.begin(), vch.end());\n+    uint256 hash = Hash(vch);\n     vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n     return EncodeBase58(vch);\n }\n@@ -154,7 +154,7 @@ bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int\n         return false;\n     }\n     // re-calculate the checksum, ensure it matches the included 4-byte checksum\n-    uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);\n+    uint256 hash = Hash(MakeSpan(vchRet).first(vchRet.size() - 4));\n     if (memcmp(&hash, &vchRet[vchRet.size() - 4], 4) != 0) {\n         vchRet.clear();\n         return false;"
      },
      {
        "sha": "71806483ff1c587edd02c4ec14ac557b68a76569",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 7,
        "deletions": 28,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -69,52 +69,31 @@ class CHash160 {\n };\n \n /** Compute the 256-bit hash of an object. */\n-template<typename T1>\n-inline uint256 Hash(const T1 pbegin, const T1 pend)\n+template<typename T>\n+inline uint256 Hash(const T& in1)\n {\n-    static const unsigned char pblank[1] = {};\n     uint256 result;\n-    CHash256().Write({pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0])})\n-              .Finalize(result);\n+    CHash256().Write(MakeUCharSpan(in1)).Finalize(result);\n     return result;\n }\n \n /** Compute the 256-bit hash of the concatenation of two objects. */\n template<typename T1, typename T2>\n-inline uint256 Hash(const T1 p1begin, const T1 p1end,\n-                    const T2 p2begin, const T2 p2end) {\n-    static const unsigned char pblank[1] = {};\n+inline uint256 Hash(const T1& in1, const T2& in2) {\n     uint256 result;\n-    CHash256().Write({p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0])})\n-              .Write({p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0])})\n-              .Finalize(result);\n+    CHash256().Write(MakeUCharSpan(in1)).Write(MakeUCharSpan(in2)).Finalize(result);\n     return result;\n }\n \n /** Compute the 160-bit hash an object. */\n template<typename T1>\n-inline uint160 Hash160(const T1 pbegin, const T1 pend)\n+inline uint160 Hash160(const T1& in1)\n {\n-    static unsigned char pblank[1] = {};\n     uint160 result;\n-    CHash160().Write({pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0])})\n-              .Finalize(result);\n+    CHash160().Write(MakeUCharSpan(in1)).Finalize(result);\n     return result;\n }\n \n-/** Compute the 160-bit hash of a vector. */\n-inline uint160 Hash160(const std::vector<unsigned char>& vch)\n-{\n-    return Hash160(vch.begin(), vch.end());\n-}\n-\n-/** Compute the 160-bit hash of a vector. */\n-template<unsigned int N>\n-inline uint160 Hash160(const prevector<N, unsigned char>& vch)\n-{\n-    return Hash160(vch.begin(), vch.end());\n-}\n-\n /** A writer stream (for serialization) that computes a 256-bit hash. */\n class CHashWriter\n {"
      },
      {
        "sha": "b571d463c9fdc40c6a65006561313756a9d8a99b",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -70,7 +70,7 @@ uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::ve\n         else\n             right = left;\n         // combine subhashes\n-        return Hash(left.begin(), left.end(), right.begin(), right.end());\n+        return Hash(left, right);\n     }\n }\n \n@@ -126,7 +126,7 @@ uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, uns\n             right = left;\n         }\n         // and combine them before returning\n-        return Hash(left.begin(), left.end(), right.begin(), right.end());\n+        return Hash(left, right);\n     }\n }\n "
      },
      {
        "sha": "026e3534fc8f8029892f3997545cf03a562c65b1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -736,7 +736,7 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n \n void V1TransportSerializer::prepareForTransport(CSerializedNetMsg& msg, std::vector<unsigned char>& header) {\n     // create dbl-sha256 checksum\n-    uint256 hash = Hash(msg.data.begin(), msg.data.end());\n+    uint256 hash = Hash(msg.data);\n \n     // create header\n     CMessageHeader hdr(Params().MessageStart(), msg.m_type.c_str(), msg.data.size());"
      },
      {
        "sha": "d29aed6c8be3c7d9c6071322551af4d18a79cc9e",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -553,7 +553,7 @@ std::vector<unsigned char> CNetAddr::GetGroup(const std::vector<bool> &asmap) co\n \n uint64_t CNetAddr::GetHash() const\n {\n-    uint256 hash = Hash(&ip[0], &ip[16]);\n+    uint256 hash = Hash(ip);\n     uint64_t nRet;\n     memcpy(&nRet, &hash, sizeof(nRet));\n     return nRet;"
      },
      {
        "sha": "fcbc7e8416b23fc9b74f5fe5bf03b08785d43374",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -157,13 +157,13 @@ class CPubKey\n     //! Get the KeyID of this public key (hash of its serialization)\n     CKeyID GetID() const\n     {\n-        return CKeyID(Hash160(vch, vch + size()));\n+        return CKeyID(Hash160(MakeSpan(vch).first(size())));\n     }\n \n     //! Get the 256-bit hash of this public key.\n     uint256 GetHash() const\n     {\n-        return Hash(vch, vch + size());\n+        return Hash(MakeSpan(vch).first(size()));\n     }\n \n     /*"
      },
      {
        "sha": "cf856af6e9200ab4a1b96ea8bf618d3f9b2dea32",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -601,7 +601,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             UniValue sr(UniValue::VOBJ);\n             CScript segwitScr;\n             if (which_type == TxoutType::PUBKEY) {\n-                segwitScr = GetScriptForDestination(WitnessV0KeyHash(Hash160(solutions_data[0].begin(), solutions_data[0].end())));\n+                segwitScr = GetScriptForDestination(WitnessV0KeyHash(Hash160(solutions_data[0])));\n             } else if (which_type == TxoutType::PUBKEYHASH) {\n                 segwitScr = GetScriptForDestination(WitnessV0KeyHash(uint160{solutions_data[0]}));\n             } else {"
      },
      {
        "sha": "3a4882f28096092c421cb3ab177813f583231c36",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -16,10 +16,10 @@ typedef std::vector<unsigned char> valtype;\n bool fAcceptDatacarrier = DEFAULT_ACCEPT_DATACARRIER;\n unsigned nMaxDatacarrierBytes = MAX_OP_RETURN_RELAY;\n \n-CScriptID::CScriptID(const CScript& in) : BaseHash(Hash160(in.begin(), in.end())) {}\n+CScriptID::CScriptID(const CScript& in) : BaseHash(Hash160(in)) {}\n CScriptID::CScriptID(const ScriptHash& in) : BaseHash(static_cast<uint160>(in)) {}\n \n-ScriptHash::ScriptHash(const CScript& in) : BaseHash(Hash160(in.begin(), in.end())) {}\n+ScriptHash::ScriptHash(const CScript& in) : BaseHash(Hash160(in)) {}\n ScriptHash::ScriptHash(const CScriptID& in) : BaseHash(static_cast<uint160>(in)) {}\n \n PKHash::PKHash(const CPubKey& pubkey) : BaseHash(pubkey.GetID()) {}\n@@ -318,7 +318,7 @@ CScript GetScriptForWitness(const CScript& redeemscript)\n     std::vector<std::vector<unsigned char> > vSolutions;\n     TxoutType typ = Solver(redeemscript, vSolutions);\n     if (typ == TxoutType::PUBKEY) {\n-        return GetScriptForDestination(WitnessV0KeyHash(Hash160(vSolutions[0].begin(), vSolutions[0].end())));\n+        return GetScriptForDestination(WitnessV0KeyHash(Hash160(vSolutions[0])));\n     } else if (typ == TxoutType::PUBKEYHASH) {\n         return GetScriptForDestination(WitnessV0KeyHash(uint160{vSolutions[0]}));\n     }"
      },
      {
        "sha": "3edcf964959bc49f9c2b4d4ae95d3566857fe075",
        "filename": "src/test/fuzz/crypto.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/fuzz/crypto.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/fuzz/crypto.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -54,9 +54,8 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             (void)sha512.Write(data.data(), data.size());\n             (void)sip_hasher.Write(data.data(), data.size());\n \n-            (void)Hash(data.begin(), data.end());\n+            (void)Hash(data);\n             (void)Hash160(data);\n-            (void)Hash160(data.begin(), data.end());\n             (void)sha512.Size();\n             break;\n         }"
      },
      {
        "sha": "955b954700532442be69e4a83962ad82177a283d",
        "filename": "src/test/fuzz/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/fuzz/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/fuzz/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/key.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -85,7 +85,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         assert(negated_key == key);\n     }\n \n-    const uint256 random_uint256 = Hash(buffer.begin(), buffer.end());\n+    const uint256 random_uint256 = Hash(buffer);\n \n     {\n         CKey child_key;"
      },
      {
        "sha": "4e4c44266a0e375d1a17c89ef98fd2e22077438b",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     for (int n=0; n<16; n++)\n     {\n         std::string strMsg = strprintf(\"Very secret message %i: 11\", n);\n-        uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n+        uint256 hashMsg = Hash(strMsg);\n \n         // normal signatures\n \n@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n \n     std::vector<unsigned char> detsig, detsigc;\n     std::string strMsg = \"Very deterministic message\";\n-    uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n+    uint256 hashMsg = Hash(strMsg);\n     BOOST_CHECK(key1.Sign(hashMsg, detsig));\n     BOOST_CHECK(key1C.Sign(hashMsg, detsigc));\n     BOOST_CHECK(detsig == detsigc);\n@@ -158,7 +158,7 @@ BOOST_AUTO_TEST_CASE(key_signature_tests)\n     // When entropy is specified, we should see at least one high R signature within 20 signatures\n     CKey key = DecodeSecret(strSecret1);\n     std::string msg = \"A message to be signed\";\n-    uint256 msg_hash = Hash(msg.begin(), msg.end());\n+    uint256 msg_hash = Hash(msg);\n     std::vector<unsigned char> sig;\n     bool found = false;\n \n@@ -179,7 +179,7 @@ BOOST_AUTO_TEST_CASE(key_signature_tests)\n     for (int i = 0; i < 256; ++i) {\n         sig.clear();\n         std::string msg = \"A message to be signed\" + ToString(i);\n-        msg_hash = Hash(msg.begin(), msg.end());\n+        msg_hash = Hash(msg);\n         BOOST_CHECK(key.Sign(msg_hash, sig));\n         found = sig[3] == 0x20;\n         BOOST_CHECK(sig.size() <= 70);"
      },
      {
        "sha": "9bc7cc5dab5abc4b64a32d6987af972feca49e9a",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -13,9 +13,9 @@ static uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vecto\n     uint256 hash = leaf;\n     for (std::vector<uint256>::const_iterator it = vMerkleBranch.begin(); it != vMerkleBranch.end(); ++it) {\n         if (nIndex & 1) {\n-            hash = Hash(it->begin(), it->end(), hash.begin(), hash.end());\n+            hash = Hash(*it, hash);\n         } else {\n-            hash = Hash(hash.begin(), hash.end(), it->begin(), it->end());\n+            hash = Hash(hash, *it);\n         }\n         nIndex >>= 1;\n     }\n@@ -144,8 +144,7 @@ static uint256 BlockBuildMerkleTree(const CBlock& block, bool* fMutated, std::ve\n                 // Two identical hashes at the end of the list at a particular level.\n                 mutated = true;\n             }\n-            vMerkleTree.push_back(Hash(vMerkleTree[j+i].begin(), vMerkleTree[j+i].end(),\n-                                       vMerkleTree[j+i2].begin(), vMerkleTree[j+i2].end()));\n+            vMerkleTree.push_back(Hash(vMerkleTree[j+i], vMerkleTree[j+i2]));\n         }\n         j += nSize;\n     }"
      },
      {
        "sha": "f625b67c2aa94421097911996220b0571a16bd7e",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -145,7 +145,7 @@ BOOST_AUTO_TEST_CASE(floats)\n     for (int i = 0; i < 1000; i++) {\n         ss << float(i);\n     }\n-    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n+    BOOST_CHECK(Hash(ss) == uint256S(\"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c\"));\n \n     // decode\n     for (int i = 0; i < 1000; i++) {\n@@ -162,7 +162,7 @@ BOOST_AUTO_TEST_CASE(doubles)\n     for (int i = 0; i < 1000; i++) {\n         ss << double(i);\n     }\n-    BOOST_CHECK(Hash(ss.begin(), ss.end()) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n+    BOOST_CHECK(Hash(ss) == uint256S(\"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96\"));\n \n     // decode\n     for (int i = 0; i < 1000; i++) {"
      },
      {
        "sha": "15a2c1e300389a0ab75b4551bb816e424714c874",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -2186,8 +2186,8 @@ BOOST_AUTO_TEST_CASE(message_hash)\n         std::string(1, (char)unsigned_tx.length()) +\n         unsigned_tx;\n \n-    const uint256 signature_hash = Hash(unsigned_tx.begin(), unsigned_tx.end());\n-    const uint256 message_hash1 = Hash(prefixed_message.begin(), prefixed_message.end());\n+    const uint256 signature_hash = Hash(unsigned_tx);\n+    const uint256 message_hash1 = Hash(prefixed_message);\n     const uint256 message_hash2 = MessageHash(unsigned_tx);\n \n     BOOST_CHECK_EQUAL(message_hash1, message_hash2);"
      },
      {
        "sha": "7ef06663b55bbaa5667a58b6aec732d73682fbcd",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -630,13 +630,13 @@ static size_t CalculateNestedKeyhashInputSize(bool use_max_sig)\n     CPubKey pubkey = key.GetPubKey();\n \n     // Generate pubkey hash\n-    uint160 key_hash(Hash160(pubkey.begin(), pubkey.end()));\n+    uint160 key_hash(Hash160(pubkey));\n \n     // Create inner-script to enter into keystore. Key hash can't be 0...\n     CScript inner_script = CScript() << OP_0 << std::vector<unsigned char>(key_hash.begin(), key_hash.end());\n \n     // Create outer P2SH script for the output\n-    uint160 script_id(Hash160(inner_script.begin(), inner_script.end()));\n+    uint160 script_id(Hash160(inner_script));\n     CScript script_pubkey = CScript() << OP_HASH160 << std::vector<unsigned char>(script_id.begin(), script_id.end()) << OP_EQUAL;\n \n     // Add inner-script to key store and key to watchonly"
      },
      {
        "sha": "fa6814d0d3a5cad2d46cb2c42be8d9401c4a6f71",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77c507358bda9bd6c496f33e0f4418c0603bb08d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=77c507358bda9bd6c496f33e0f4418c0603bb08d",
        "patch": "@@ -103,7 +103,7 @@ bool WalletBatch::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey,\n     vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n     vchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n \n-    return WriteIC(std::make_pair(DBKeys::KEY, vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n+    return WriteIC(std::make_pair(DBKeys::KEY, vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey)), false);\n }\n \n bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n@@ -115,7 +115,7 @@ bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n     }\n \n     // Compute a checksum of the encrypted key\n-    uint256 checksum = Hash(vchCryptedSecret.begin(), vchCryptedSecret.end());\n+    uint256 checksum = Hash(vchCryptedSecret);\n \n     const auto key = std::make_pair(DBKeys::CRYPTED_KEY, vchPubKey);\n     if (!WriteIC(key, std::make_pair(vchCryptedSecret, checksum), false)) {\n@@ -209,7 +209,7 @@ bool WalletBatch::WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubk\n     key.insert(key.end(), pubkey.begin(), pubkey.end());\n     key.insert(key.end(), privkey.begin(), privkey.end());\n \n-    return WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)), std::make_pair(privkey, Hash(key.begin(), key.end())), false);\n+    return WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)), std::make_pair(privkey, Hash(key)), false);\n }\n \n bool WalletBatch::WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret)\n@@ -365,7 +365,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n                 vchKey.insert(vchKey.end(), pkey.begin(), pkey.end());\n \n-                if (Hash(vchKey.begin(), vchKey.end()) != hash)\n+                if (Hash(vchKey) != hash)\n                 {\n                     strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                     return false;\n@@ -414,7 +414,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             if (!ssValue.eof()) {\n                 uint256 checksum;\n                 ssValue >> checksum;\n-                if ((checksum_valid = Hash(vchPrivKey.begin(), vchPrivKey.end()) != checksum)) {\n+                if ((checksum_valid = Hash(vchPrivKey) != checksum)) {\n                     strErr = \"Error reading wallet database: Crypted key corrupt\";\n                     return false;\n                 }\n@@ -621,7 +621,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n             to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n \n-            if (Hash(to_hash.begin(), to_hash.end()) != hash)\n+            if (Hash(to_hash) != hash)\n             {\n                 strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n                 return false;"
      }
    ]
  }
]