sipa,2020-06-19 03:53:26,@jb55 You may be interested in this.,https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-646420707,646420707,
DrahtBot,2020-06-19 12:25:30,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19628 (net: change CNetAddr::ip to have flexible size by vasild)\n* #19601 (Refactoring CHashWriter & Get{Prevouts,Sequen",https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-646607753,646607753,
jb55,2020-06-19 15:12:51,yup this will clean up some of my PRs. Concept ACK (I would almost say utACK but I just woke up).,https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-646690406,646690406,
jonatack,2020-06-25 17:42:34,"Concept ACK. Read the code, built/tested/running bitcoind, need to do more detailed code review stepping through the commits.",https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-649724862,649724862,
practicalswift,2020-06-25 21:12:29,Concept ACK: `Span<const unsigned char>` as a drop-in replacement for `const std::vector<unsigned char>&` as parameter type is safe use of `Span` :),https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-649820015,649820015,
sipa,2020-06-26 20:39:33,Rebased and addressed @jonatack's comment.,https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-650390073,650390073,
jonatack,2020-06-28 12:00:29,re-ACK fc7c518,https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-650741737,650741737,
laanwj,2020-07-17 14:49:43,ACK 675d6fd044be08cd5dc7386b5574d845a74e9aae,https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-660149348,660149348,
sipa,2020-07-21 05:07:55,"Rebased, and addressed @ryanofsky's comments.",https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-661636171,661636171,
sipa,2020-07-30 21:03:49,Rebased.,https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-666698297,666698297,
laanwj,2020-08-03 14:54:32,re-ACK 77c507358bda9bd6c496f33e0f4418c0603bb08d,https://github.com/bitcoin/bitcoin/pull/19326#issuecomment-668067766,668067766,
ryanofsky,2020-07-16 21:38:38,"In commit ""Make uint256 Span-convertible by adding ::data()"" (5d1f1d93154f3cee384e121963940141603e01f7)\n\nI think it'd be better to avoid doing potentially unsafe reinterpret_casts when really we only need to cast `char` pointers to `unsigned char` pointers.\n\nMy concern is that providing this function might make it too easy to write code that looks like it is hashing `vector<uint256>` or `O",https://github.com/bitcoin/bitcoin/pull/19326#discussion_r456092938,456092938,src/span.h
ryanofsky,2020-07-16 22:04:51,"In commit ""Make CHash256/CHash160 output to Span"" (b92907e0b89210ecf25baa70702550f643d53525)\n\nThis commit doesn't seem to compile. Also not sure reason scriptHash.begin() is changing to scriptHash.data() above on line 102.",https://github.com/bitcoin/bitcoin/pull/19326#discussion_r456104974,456104974,src/test/script_standard_tests.cpp
sipa,2020-07-21 05:01:21,"Agree, that seems like both a more convenient and slightly safer construction. I've implemented it slightly differently so that it remains constexpr, and supports everything `MakeSpan` does (including passing temporaries, and non-const return when appropriate).\n\n> In commit ""Make uint256 Span-convertible by adding ::data()"" (5d1f1d9)\n\nI think you mean a different commit?\n\n> My concern ",https://github.com/bitcoin/bitcoin/pull/19326#discussion_r457837320,457837320,src/span.h
sipa,2020-07-21 05:02:38,Fixed.,https://github.com/bitcoin/bitcoin/pull/19326#discussion_r457837692,457837692,src/test/script_standard_tests.cpp
