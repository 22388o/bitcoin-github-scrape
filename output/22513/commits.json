[
  {
    "sha": "a99ed8986554fa1ecc854e43ea373d957e598db8",
    "node_id": "C_kwDOABII59oAKGE5OWVkODk4NjU1NGZhMWVjYzg1NGU0M2VhMzczZDk1N2U1OThkYjg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-21T01:24:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-28T23:13:42Z"
      },
      "message": "psbt: sign without finalizing\n\nWe don't always want to finalize after signing, so make it possible to\ndo that.",
      "tree": {
        "sha": "fd6a13369e76b602f866f185a3ad57b74720634c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd6a13369e76b602f866f185a3ad57b74720634c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a99ed8986554fa1ecc854e43ea373d957e598db8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99ed8986554fa1ecc854e43ea373d957e598db8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a99ed8986554fa1ecc854e43ea373d957e598db8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99ed8986554fa1ecc854e43ea373d957e598db8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a5381a06b0b9b4490394e42a8e3bc284601a4af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a5381a06b0b9b4490394e42a8e3bc284601a4af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a5381a06b0b9b4490394e42a8e3bc284601a4af"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 32,
      "deletions": 20
    },
    "files": [
      {
        "sha": "0f8b855ba3652068adfc8696fc8d8b88ba014b97",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -247,7 +247,7 @@ PrecomputedTransactionData PrecomputePSBTData(const PartiallySignedTransaction&\n     return txdata;\n }\n \n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash, SignatureData* out_sigdata)\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash,  SignatureData* out_sigdata, bool finalize)\n {\n     PSBTInput& input = psbt.inputs.at(index);\n     const CMutableTransaction& tx = *psbt.tx;\n@@ -295,6 +295,10 @@ bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction&\n     }\n     // Verify that a witness signature was produced in case one was required.\n     if (require_witness_sig && !sigdata.witness) return false;\n+\n+    // If we are not finalizing, set sigdata.complete to false to not set the scriptWitness\n+    if (!finalize && sigdata.complete) sigdata.complete = false;\n+\n     input.FromSignatureData(sigdata);\n \n     // If we have a witness signature, put a witness UTXO.\n@@ -324,7 +328,7 @@ bool FinalizePSBT(PartiallySignedTransaction& psbtx)\n     bool complete = true;\n     const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n     for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, &txdata, SIGHASH_ALL);\n+        complete &= SignPSBTInput(DUMMY_SIGNING_PROVIDER, psbtx, i, &txdata, SIGHASH_ALL, nullptr, true);\n     }\n \n     return complete;"
      },
      {
        "sha": "7808a247c0551063c504ee4ea15126b4f6a090c5",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -578,7 +578,7 @@ bool PSBTInputSigned(const PSBTInput& input);\n  * txdata should be the output of PrecomputePSBTData (which can be shared across\n  * multiple SignPSBTInput calls). If it is nullptr, a dummy signature will be created.\n  **/\n-bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr);\n+bool SignPSBTInput(const SigningProvider& provider, PartiallySignedTransaction& psbt, int index, const PrecomputedTransactionData* txdata, int sighash = SIGHASH_ALL, SignatureData* out_sigdata = nullptr, bool finalize = true);\n \n /** Counts the unsigned inputs of a PSBT. */\n size_t CountPSBTUnsignedInputs(const PartiallySignedTransaction& psbt);"
      },
      {
        "sha": "90fbd823a42c0196caa13106199d71b92a7fb9af",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -115,6 +115,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"walletcreatefundedpsbt\", 4, \"bip32derivs\" },\n     { \"walletprocesspsbt\", 1, \"sign\" },\n     { \"walletprocesspsbt\", 3, \"bip32derivs\" },\n+    { \"walletprocesspsbt\", 4, \"finalize\" },\n     { \"createpsbt\", 0, \"inputs\" },\n     { \"createpsbt\", 1, \"outputs\" },\n     { \"createpsbt\", 2, \"locktime\" },"
      },
      {
        "sha": "6a73efb47273f2d61b279e96e0638b04994732f4",
        "filename": "src/wallet/external_signer_scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/external_signer_scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/external_signer_scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.cpp?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -60,10 +60,10 @@ bool ExternalSignerScriptPubKeyMan::DisplayAddress(const CScript scriptPubKey, c\n }\n \n // If sign is true, transaction must previously have been filled\n-TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed, bool finalize) const\n {\n     if (!sign) {\n-        return DescriptorScriptPubKeyMan::FillPSBT(psbt, txdata, sighash_type, false, bip32derivs, n_signed);\n+        return DescriptorScriptPubKeyMan::FillPSBT(psbt, txdata, sighash_type, false, bip32derivs, n_signed, finalize);\n     }\n \n     // Already complete if every input is now signed\n@@ -79,6 +79,6 @@ TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransact\n         tfm::format(std::cerr, \"Failed to sign: %s\\n\", strFailReason);\n         return TransactionError::EXTERNAL_SIGNER_FAILED;\n     }\n-    FinalizePSBT(psbt); // This won't work in a multisig setup\n+    if (finalize) FinalizePSBT(psbt); // This won't work in a multisig setup\n     return TransactionError::OK;\n }"
      },
      {
        "sha": "53d65d9e460638d5b66f488af2f2faa80fdd977a",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -28,6 +28,6 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n \n   bool DisplayAddress(const CScript scriptPubKey, const ExternalSigner &signer) const;\n \n-  TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n+  TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n };\n #endif // BITCOIN_WALLET_EXTERNAL_SIGNER_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "4c2bfea4cc8ef7ca77caae1ea51cfd987d1b4ca2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -4429,6 +4429,7 @@ static RPCHelpMan walletprocesspsbt()\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\"},\n                     {\"bip32derivs\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Include BIP 32 derivation paths for public keys if we know them\"},\n+                    {\"finalize\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Also finalize inputs if possible\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -4450,7 +4451,7 @@ static RPCHelpMan walletprocesspsbt()\n     // the user could have gotten from another RPC command prior to now\n     wallet.BlockUntilSyncedToCurrentChain();\n \n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VSTR});\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     // Unserialize the transaction\n     PartiallySignedTransaction psbtx;\n@@ -4465,11 +4466,12 @@ static RPCHelpMan walletprocesspsbt()\n     // Fill transaction with our data and also sign\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\n     bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\n+    bool finalize = request.params[4].isNull() ? true : request.params[4].get_bool();\n     bool complete = true;\n \n     if (sign) EnsureWalletIsUnlocked(*pwallet);\n \n-    const TransactionError err{wallet.FillPSBT(psbtx, complete, nHashType, sign, bip32derivs)};\n+    const TransactionError err{wallet.FillPSBT(psbtx, complete, nHashType, sign, bip32derivs, nullptr, finalize)};\n     if (err != TransactionError::OK) {\n         throw JSONRPCTransactionError(err);\n     }"
      },
      {
        "sha": "7e3d4ab228b398a6fcf09a517ff9f889b5a9e648",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -610,7 +610,7 @@ SigningResult LegacyScriptPubKeyMan::SignMessage(const std::string& message, con\n     return SigningResult::SIGNING_FAILED;\n }\n \n-TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed, bool finalize) const\n {\n     if (n_signed) {\n         *n_signed = 0;\n@@ -639,7 +639,7 @@ TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psb\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        SignPSBTInput(HidingSigningProvider(this, !sign, !bip32derivs), psbtx, i, &txdata, sighash_type);\n+        SignPSBTInput(HidingSigningProvider(this, !sign, !bip32derivs), psbtx, i, &txdata, sighash_type, nullptr, finalize);\n \n         bool signed_one = PSBTInputSigned(input);\n         if (n_signed && (signed_one || !sign)) {\n@@ -2078,7 +2078,7 @@ SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message,\n     return SigningResult::OK;\n }\n \n-TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, const PrecomputedTransactionData& txdata, int sighash_type, bool sign, bool bip32derivs, int* n_signed, bool finalize) const\n {\n     if (n_signed) {\n         *n_signed = 0;\n@@ -2128,7 +2128,7 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n             }\n         }\n \n-        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, &txdata, sighash_type);\n+        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, &txdata, sighash_type, nullptr, finalize);\n \n         bool signed_one = PSBTInputSigned(input);\n         if (n_signed && (signed_one || !sign)) {"
      },
      {
        "sha": "a22d38a09e803311138a012b8bf7c5837d0ce38d",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -223,7 +223,7 @@ class ScriptPubKeyMan\n     /** Sign a message with the given script */\n     virtual SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningResult::SIGNING_FAILED; };\n     /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n-    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const { return TransactionError::INVALID_PSBT; }\n+    virtual TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const { return TransactionError::INVALID_PSBT; }\n \n     virtual uint256 GetID() const { return uint256(); }\n \n@@ -387,7 +387,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n-    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n \n     uint256 GetID() const override;\n \n@@ -592,7 +592,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, bilingual_str>& input_errors) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n-    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, const PrecomputedTransactionData& txdata, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr, bool finalize = true) const override;\n \n     uint256 GetID() const override;\n "
      },
      {
        "sha": "c64cb01c3330d453e211dc8901710945e9cf9a17",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -1850,7 +1850,7 @@ bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint,\n     return false;\n }\n \n-TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs, size_t * n_signed) const\n+TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& complete, int sighash_type, bool sign, bool bip32derivs, size_t * n_signed, bool finalize) const\n {\n     if (n_signed) {\n         *n_signed = 0;\n@@ -1882,7 +1882,7 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n     // Fill in information from ScriptPubKeyMans\n     for (ScriptPubKeyMan* spk_man : GetAllScriptPubKeyMans()) {\n         int n_signed_this_spkm = 0;\n-        TransactionError res = spk_man->FillPSBT(psbtx, txdata, sighash_type, sign, bip32derivs, &n_signed_this_spkm);\n+        TransactionError res = spk_man->FillPSBT(psbtx, txdata, sighash_type, sign, bip32derivs, &n_signed_this_spkm, finalize);\n         if (res != TransactionError::OK) {\n             return res;\n         }"
      },
      {
        "sha": "720bc73e46b232e97f24362aa0256c67dad7aa98",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -553,14 +553,17 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n      * @param[in]  sign whether to sign or not\n      * @param[in]  bip32derivs whether to fill in bip32 derivation information if available\n+     * @param[out] n_signed the number of inputs signed by this wallet\n+     * @param[in] finalize whether to create the final scriptSig or scriptWitness if possible\n      * return error\n      */\n     TransactionError FillPSBT(PartiallySignedTransaction& psbtx,\n                   bool& complete,\n                   int sighash_type = 1 /* SIGHASH_ALL */,\n                   bool sign = true,\n                   bool bip32derivs = true,\n-                  size_t* n_signed = nullptr) const;\n+                  size_t* n_signed = nullptr,\n+                  bool finalize = true) const;\n \n     /**\n      * Submit the transaction to the node's mempool and then relay to peers."
      },
      {
        "sha": "c8ddc765ba57781d733656e3e3ff2a89f443fb98",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99ed8986554fa1ecc854e43ea373d957e598db8/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99ed8986554fa1ecc854e43ea373d957e598db8/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=a99ed8986554fa1ecc854e43ea373d957e598db8",
        "patch": "@@ -119,7 +119,9 @@ def run_test(self):\n         self.nodes[0].walletpassphrase(passphrase=\"password\", timeout=1000000)\n \n         # Sign the transaction and send\n-        signed_tx = self.nodes[0].walletprocesspsbt(psbtx)['psbt']\n+        signed_tx = self.nodes[0].walletprocesspsbt(psbt=psbtx, finalize=False)['psbt']\n+        finalized_tx = self.nodes[0].walletprocesspsbt(psbt=psbtx, finalize=True)['psbt']\n+        assert signed_tx != finalized_tx\n         final_tx = self.nodes[0].finalizepsbt(signed_tx)['hex']\n         self.nodes[0].sendrawtransaction(final_tx)\n "
      }
    ]
  }
]