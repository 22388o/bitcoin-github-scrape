[
  {
    "sha": "f8bd13f85ae5404adef23a52719d804a5c36b1e8",
    "node_id": "C_kwDOABII59oAKGY4YmQxM2Y4NWFlNTQwNGFkZWYyM2E1MjcxOWQ4MDRhNWMzNmIxZTg",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T07:43:43Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:22:08Z"
      },
      "message": "net: add new method Sock::Accept() that wraps accept()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "eca0fd0670339d479384bbed2ab6d0bbdd1444b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eca0fd0670339d479384bbed2ab6d0bbdd1444b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8bd13f85ae5404adef23a52719d804a5c36b1e8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhREACgkQVN8G9ktV\ny7+cxh//QkXLE0UkI449z9eh5cW7e9X8B3uztGg+OZ4+5vwx6WnQ6nRoha5oUI8I\nA1rEfmK2n36r2xM/2XSlkylzH/ywrO79M/1Ha7AMb8qjOeWUWmy2hMNb501XDN6I\nFms/tTV41DkW/mRXykj+b/6gJdDLNlsHRiEOYDrrKmcud4sFn2iD5OOJjblnrfvE\nwyHBeTuDkDiTX8Z4LV+6M3TY1jJIbVPtJpY/sClDhwPF9ShXOsJmkfmpR6hXLeXL\nQAEUwZ+0IZPlDH9NVKKXAJRMWKgBJ9XflP8SP1vGanE95ffLClJ8GeNMVXV8mmNK\nRpiSw5FPJl04YoWAwjfbZEP19gU7GaThIfJhdKnOruZb65MSJf0mw76UeIElfCNS\nfh41Shw+nqEnjutiOh7m/1EQMlDEamxim7XHDqVSPvEBDcs+ynlhB20kQ5nxcegN\n8ZHxm89MkTjiAE2xAkU7AWDB2N0BiyTFzz/VD4k011ObJ13UMaRA5nlCOmTSA6MP\n5MCJM8nyWRV4oaPXMoEXZK63X5v/RhqmPGA91vODlXa9i9KfX8WQIGaJfVZES163\nQ9ec2s6mCgHBjeG6SAfwx7jE6P/61ifEdFXStcBl87PuwLayz+OArb+lA8Jg1cqM\n0u+VYDPRhP2RuTIGEY18swmAZCzf/AqkWExrII1Nf3fl4fi+D0qvbfNJTRJwXgOn\ndImj4Y5nwBHmLMI0+lreLdROOJwsPLb2xTFJRA+fEoGS73NKJxdFrD5kgj9FdSX0\nU2+nQtTL5redntA3ek9KVRh/fohXs0D/0+t9l+NdxlyOzVPgyIcXRHowwPDULo6b\ncB6fFWl376yoZykC7UWBuN0S1vwWji31IXc6E6rTCHhgHmRqKK6bPjaC1TQwSaD9\nKUehttVoJ9P1Q0l4WHZmF05w0/qoKkB5TeN2vYwBGO32s8sMdcEIfdnJ+74soS+v\nBdG2sLumNHk4iq0s5cQ7Vl8HVu36BzmG+NQrzpGKcikuPVAanGVQ6QPzHX/2uyPI\nxw+sC9fAPmldIdbwDtYNuLJYdp/2UnhB8doaPPB7dDVWR+PU8rRu/96yfTIVi5os\nvzva06LRa1SfPkUCCChZuTfGKaqBrfDzoLMAYcL/A/TNpHtdj9CvK4WjyeOBXboP\n4zxALd+21Wc1Q4C1cuMiD2ABxyHIMA3jmxQFuADaXhY+efe9PkrEfGhHv/24KxOy\nL7tz1XOR9hL7UAXMYv4NXBlGwYPeVJVqLnuELzZYMk/Hjt/p5vTb6ksqMZPH4IBi\nM1Cf9+ryMx1SZMEqzFlz8C8uMtsKcyvd33XeLZU72nNJLGgklbziEZVps1ZvYRFD\n6jEWmVoWIPugTEXxkDfwGgichxQvvg==\n=olLu\n-----END PGP SIGNATURE-----",
        "payload": "tree eca0fd0670339d479384bbed2ab6d0bbdd1444b9\nparent e7507f333bc93047d0baadea4fde19f770dacb56\nauthor Vasil Dimov <vd@FreeBSD.org> 1619163823 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368528 +0100\n\nnet: add new method Sock::Accept() that wraps accept()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bd13f85ae5404adef23a52719d804a5c36b1e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bd13f85ae5404adef23a52719d804a5c36b1e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bd13f85ae5404adef23a52719d804a5c36b1e8/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7507f333bc93047d0baadea4fde19f770dacb56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7507f333bc93047d0baadea4fde19f770dacb56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7507f333bc93047d0baadea4fde19f770dacb56"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 72,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dae7920eff2edcefe46688f7b14c4090e1d92dd7",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -10,6 +10,8 @@\n #include <util/time.h>\n #include <version.h>\n \n+#include <memory>\n+\n FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n     : m_fuzzed_data_provider{fuzzed_data_provider}\n {\n@@ -155,6 +157,20 @@ int FuzzedSock::Connect(const sockaddr*, socklen_t) const\n     return 0;\n }\n \n+std::unique_ptr<Sock> FuzzedSock::Accept(sockaddr* addr, socklen_t* addr_len) const\n+{\n+    constexpr std::array accept_errnos{\n+        ECONNABORTED,\n+        EINTR,\n+        ENOMEM,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, accept_errnos);\n+        return std::unique_ptr<FuzzedSock>();\n+    }\n+    return std::make_unique<FuzzedSock>(m_fuzzed_data_provider);\n+}\n+\n int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n {\n     constexpr std::array getsockopt_errnos{"
      },
      {
        "sha": "fb42dcd0fc49c7b32b61b8e3ad9a52921be98fd6",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -410,6 +410,8 @@ class FuzzedSock : public Sock\n \n     int Connect(const sockaddr*, socklen_t) const override;\n \n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override;\n+\n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n \n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;"
      },
      {
        "sha": "3ef184007678d567d4bdbff3212cb651ff11d7b3",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -13,6 +13,7 @@\n #include <array>\n #include <cassert>\n #include <cstring>\n+#include <memory>\n #include <string>\n \n struct ConnmanTestMsg : public CConnman {\n@@ -126,6 +127,23 @@ class StaticContentsSock : public Sock\n \n     int Connect(const sockaddr*, socklen_t) const override { return 0; }\n \n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n+    {\n+        if (addr != nullptr) {\n+            // Pretend all connections come from 5.5.5.5:6789\n+            memset(addr, 0x00, *addr_len);\n+            const socklen_t write_len = static_cast<socklen_t>(sizeof(sockaddr_in));\n+            if (*addr_len >= write_len) {\n+                *addr_len = write_len;\n+                sockaddr_in* addr_in = reinterpret_cast<sockaddr_in*>(addr);\n+                addr_in->sin_family = AF_INET;\n+                memset(&addr_in->sin_addr, 0x05, sizeof(addr_in->sin_addr));\n+                addr_in->sin_port = htons(6789);\n+            }\n+        }\n+        return std::make_unique<StaticContentsSock>(\"\");\n+    };\n+\n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n     {\n         std::memset(opt_val, 0x0, *opt_len);"
      },
      {
        "sha": "2029d70a374ddf4d9fce5f1fc55d31738408970f",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -10,6 +10,7 @@\n #include <util/system.h>\n #include <util/time.h>\n \n+#include <memory>\n #include <stdexcept>\n #include <string>\n \n@@ -73,6 +74,32 @@ int Sock::Connect(const sockaddr* addr, socklen_t addr_len) const\n     return connect(m_socket, addr, addr_len);\n }\n \n+std::unique_ptr<Sock> Sock::Accept(sockaddr* addr, socklen_t* addr_len) const\n+{\n+#ifdef WIN32\n+    static constexpr auto ERR = INVALID_SOCKET;\n+#else\n+    static constexpr auto ERR = SOCKET_ERROR;\n+#endif\n+\n+    std::unique_ptr<Sock> sock;\n+\n+    const auto socket = accept(m_socket, addr, addr_len);\n+    if (socket != ERR) {\n+        try {\n+            sock = std::make_unique<Sock>(socket);\n+        } catch (const std::exception&) {\n+#ifdef WIN32\n+            closesocket(socket);\n+#else\n+            close(socket);\n+#endif\n+        }\n+    }\n+\n+    return sock;\n+}\n+\n int Sock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n {\n     return getsockopt(m_socket, level, opt_name, static_cast<char*>(opt_val), opt_len);"
      },
      {
        "sha": "751048285784000fd677a3a6a52cf8c98e68a687",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8bd13f85ae5404adef23a52719d804a5c36b1e8/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "patch": "@@ -10,6 +10,7 @@\n #include <util/time.h>\n \n #include <chrono>\n+#include <memory>\n #include <string>\n \n /**\n@@ -96,6 +97,14 @@ class Sock\n      */\n     [[nodiscard]] virtual int Connect(const sockaddr* addr, socklen_t addr_len) const;\n \n+    /**\n+     * accept(2) wrapper. Equivalent to `std::make_unique<Sock>(accept(this->Get(), addr, addr_len))`.\n+     * Code that uses this wrapper can be unit tested if this method is overridden by a mock Sock\n+     * implementation.\n+     * The returned unique_ptr is empty if `accept()` failed in which case errno will be set.\n+     */\n+    [[nodiscard]] virtual std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const;\n+\n     /**\n      * getsockopt(2) wrapper. Equivalent to\n      * `getsockopt(this->Get(), level, opt_name, opt_val, opt_len)`. Code that uses this"
      }
    ]
  },
  {
    "sha": "9e3cbfca7c9efa620c0cce73503772805cc1fa82",
    "node_id": "C_kwDOABII59oAKDllM2NiZmNhN2M5ZWZhNjIwYzBjY2U3MzUwMzc3MjgwNWNjMWZhODI",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T10:15:15Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:22:57Z"
      },
      "message": "net: use Sock in CConnman::ListenSocket\n\nChange `CConnman::ListenSocket` to use a pointer to `Sock` instead of a\nbare `SOCKET` and use `Sock::Accept()` instead of bare `accept()`. This\nwill help mocking / testing / fuzzing more code.",
      "tree": {
        "sha": "d462de1d2d10e666dfce8ab3237f1e207aa31964",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d462de1d2d10e666dfce8ab3237f1e207aa31964"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e3cbfca7c9efa620c0cce73503772805cc1fa82",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhUMACgkQVN8G9ktV\ny7+Z2h//SeLdcOhqbJgoe8mLt7kYiJyyL3Mc7vJlQSJwViDiFOgS6oJcfllGaOBY\neieWwNdVlBU3MqLE7K2uNMcrRqlh3Z2+BI+lSW6zh35w2f6l9HjuL2d633SQbGgc\nIfJBbBVwUqlXtSK5viC7PtC0/3JNJG3eykN+1+LmPN+i6+b7JX3gCMqegnnhUQ7z\nNlJLSGrsmPAw19xDe7e8udgxvenD6IxYfy0Rx3w2pIx1idfXSgHF48rWbIcVVAji\n/HYhm9SXsAF4QL0BzbVXlZUp/e6M4/eIeMS2L8GY8E53ffJOPu/ddhViIS/ft6zL\ndAoQl9dboAgZ/1inK0FRkxO6VqX/GPmxnuU/DWTsnnKS/6+S6TEnsRPfEQepvntY\nojk+uth5rsoyLUrMR5twBCYKvah1N7DlYI8lf34LtqlAPqEuyOq4fbxdFvzGb4Vr\nS9dh9mDRhNNZeWnH0nZFybOC76PC+Itb68PsUKtwZuw055Z0bm0F09J6CVf8N41k\nlrvfSCIrBVGp4psMIXnYyi7afkYdskE3PQfkTpkS5EFHrYm8d/ys5Bjsa0MTkhQS\nVX3KVhd/jsbKEfIH3xNPrxbTPnJZq5ws4cdsoQtb0f4S4H7UlrKB1OA3mNJa1kX4\naJa8/0cf9QyYq9NmBjXe1etsPxeijS41XJTz7t8MwsaZmbdnRmdMqyso+oNOrxvc\nqDGfh4qBF/zXygzTJLQp1gNXFxwTbUD6Os4pf7rxPnxuJhRFKZsE2qJuK4t+gxAx\nCfbqAdr2k++q3VzF6RBQZj/ciDP7t60NVrHHQdactqyE7yWsQrSb9UK+e/AqjT0o\nRCS43YpUVgBwVwN4c3/PaiCKM5Aicyjs8bBzoT4ip1zhIfCikYF/u6UKOESo/2OT\nCA+0OA9QWODxiU1cOvPdXYLJjDbfcAR6FO91ey2g3lYVzQ0JiXxgAATdTsLelQN7\nxwODGhYukZdbIsgRlauPdRko5qW5k/XD8zbsq12xf4P56R6apnwwrBLyGCk+fES3\na7saZPV19L8RCg/pvR5tD+IzjliIJ1T3BpyHcGtovuvn5DBED3Rcya3N30zvgXx4\nhvDNUFQ4+WjAOcvvs+vUFahcIwNFNgyZvsbeqnUrmcFdIDtX5DTiU/AUHhvFJPRC\ngwMvg6taJQkdOAv7ADfV9vBNZkqLooA71enOJQlFEOELugZUvKtGRXTdUxfoZAFA\nJ3igXEkAUG56orttno66QVytoWKox7jQNktMm0hbd4W6ZlZxmCG6w/Tw/vqsiDqE\ngCuDuD3yqLsM90m7kRrhEsfZ5fkez7rqU33Biy+PWYM0HF7LL8YrwIllHNkxWvoF\nCTzXDG/PW/8mLa8rDLfia+/iGu3/pQ==\n=5J76\n-----END PGP SIGNATURE-----",
        "payload": "tree d462de1d2d10e666dfce8ab3237f1e207aa31964\nparent f8bd13f85ae5404adef23a52719d804a5c36b1e8\nauthor Vasil Dimov <vd@FreeBSD.org> 1619172915 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368577 +0100\n\nnet: use Sock in CConnman::ListenSocket\n\nChange `CConnman::ListenSocket` to use a pointer to `Sock` instead of a\nbare `SOCKET` and use `Sock::Accept()` instead of bare `accept()`. This\nwill help mocking / testing / fuzzing more code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3cbfca7c9efa620c0cce73503772805cc1fa82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3cbfca7c9efa620c0cce73503772805cc1fa82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3cbfca7c9efa620c0cce73503772805cc1fa82/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8bd13f85ae5404adef23a52719d804a5c36b1e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8bd13f85ae5404adef23a52719d804a5c36b1e8"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 14,
      "deletions": 18
    },
    "files": [
      {
        "sha": "2ed9d82e251b51e720dfe89316385985204a43fe",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 16,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3cbfca7c9efa620c0cce73503772805cc1fa82/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3cbfca7c9efa620c0cce73503772805cc1fa82/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9e3cbfca7c9efa620c0cce73503772805cc1fa82",
        "patch": "@@ -1098,10 +1098,10 @@ bool CConnman::AttemptToEvictConnection()\n void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n-    SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n+    auto sock = hListenSocket.sock->Accept((struct sockaddr*)&sockaddr, &len);\n     CAddress addr;\n \n-    if (hSocket == INVALID_SOCKET) {\n+    if (!sock) {\n         const int nErr = WSAGetLastError();\n         if (nErr != WSAEWOULDBLOCK) {\n             LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\n@@ -1115,12 +1115,12 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         addr = CAddress{MaybeFlipIPv6toCJDNS(addr), NODE_NONE};\n     }\n \n-    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(hSocket)), NODE_NONE};\n+    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(sock->Get())), NODE_NONE};\n \n     NetPermissionFlags permissionFlags = NetPermissionFlags::None;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n \n-    CreateNodeFromAcceptedSocket(hSocket, permissionFlags, addr_bind, addr);\n+    CreateNodeFromAcceptedSocket(sock->Release(), permissionFlags, addr_bind, addr);\n }\n \n void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n@@ -1359,7 +1359,7 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n                                  std::set<SOCKET>& error_set)\n {\n     for (const ListenSocket& hListenSocket : vhListenSocket) {\n-        recv_set.insert(hListenSocket.socket);\n+        recv_set.insert(hListenSocket.sock->Get());\n     }\n \n     for (CNode* pnode : nodes) {\n@@ -1640,7 +1640,7 @@ void CConnman::SocketHandlerListening(const std::set<SOCKET>& recv_set)\n         if (interruptNet) {\n             return;\n         }\n-        if (recv_set.count(listen_socket.socket) > 0) {\n+        if (recv_set.count(listen_socket.sock->Get()) > 0) {\n             AcceptConnection(listen_socket);\n         }\n     }\n@@ -2391,7 +2391,7 @@ bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,\n         return false;\n     }\n \n-    vhListenSocket.push_back(ListenSocket(sock->Release(), permissions));\n+    vhListenSocket.emplace_back(std::move(sock), permissions);\n     return true;\n }\n \n@@ -2700,15 +2700,6 @@ void CConnman::StopNodes()\n         DeleteNode(pnode);\n     }\n \n-    // Close listening sockets.\n-    for (ListenSocket& hListenSocket : vhListenSocket) {\n-        if (hListenSocket.socket != INVALID_SOCKET) {\n-            if (!CloseSocket(hListenSocket.socket)) {\n-                LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n-            }\n-        }\n-    }\n-\n     for (CNode* pnode : m_nodes_disconnected) {\n         DeleteNode(pnode);\n     }"
      },
      {
        "sha": "bb6e7a79ad5027238584b43bc89fd64cc3320f5e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e3cbfca7c9efa620c0cce73503772805cc1fa82/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e3cbfca7c9efa620c0cce73503772805cc1fa82/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9e3cbfca7c9efa620c0cce73503772805cc1fa82",
        "patch": "@@ -26,6 +26,7 @@\n #include <threadinterrupt.h>\n #include <uint256.h>\n #include <util/check.h>\n+#include <util/sock.h>\n \n #include <atomic>\n #include <condition_variable>\n@@ -947,9 +948,13 @@ class CConnman\n private:\n     struct ListenSocket {\n     public:\n-        SOCKET socket;\n+        std::shared_ptr<Sock> sock;\n         inline void AddSocketPermissionFlags(NetPermissionFlags& flags) const { NetPermissions::AddFlag(flags, m_permissions); }\n-        ListenSocket(SOCKET socket_, NetPermissionFlags permissions_) : socket(socket_), m_permissions(permissions_) {}\n+        ListenSocket(std::shared_ptr<Sock> sock_, NetPermissionFlags permissions_)\n+            : sock{sock_}, m_permissions{permissions_}\n+        {\n+        }\n+\n     private:\n         NetPermissionFlags m_permissions;\n     };"
      }
    ]
  },
  {
    "sha": "6bf6e9fd9dece67878595a5f3361851c25833c49",
    "node_id": "C_kwDOABII59oAKDZiZjZlOWZkOWRlY2U2Nzg3ODU5NWE1ZjMzNjE4NTFjMjU4MzNjNDk",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T10:14:57Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:22:59Z"
      },
      "message": "net: change CreateNodeFromAcceptedSocket() to take Sock\n\nChange `CConnman::CreateNodeFromAcceptedSocket()` to take a `Sock`\nargument instead of `SOCKET`.\n\nThis makes the method mockable and also a little bit shorter as some\n`CloseSocket()` calls are removed (the socket will be closed\nautomatically by the `Sock` destructor on early return).",
      "tree": {
        "sha": "17570439873bd595c91a140f82004124153d524f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17570439873bd595c91a140f82004124153d524f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bf6e9fd9dece67878595a5f3361851c25833c49",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhUQACgkQVN8G9ktV\ny79E4R/+MuGAEhnEleAdC1rxoR3CMI6300KrEBABfNU2JpXivzgHSK2RKGIdOsA+\natzF3F0qBKKofsgY9GRWnJ97TMyV9odXuoGlDbLYIo8Fom+4h3PYlPKXSHOLwgkN\n0pPW1SbOG2o4Zu5JVLZtwDvzul48PXK16vGFXizilpmQHBvwU2Ab7vG6wk7VT3Kb\nsgsFYNAHI4VbyAY9eL3MrrSuBj2JenNUo0yXFgif8F5bOygr3Z1bhq1CZgJNmgQ1\nwu00pZ9PkQQjSLnkNueVtkA6C+L/2+Olp0+WX3VFSVLZDrF+zkMjYXeAGdPZcLe8\nDxj+MxwT9QgjPhyijPdheUmfNGS87slCMvVwXFZjfIl028cNZQyPHCnFVRTxil6o\nxqGN2M/k9S3ukUL3q7N6Kp4zVtM5dBACeQfXDzArBcpySCwEr7y5g8CjFMJhW7lK\nIZRWDruUxv7hjqjXWDJ+Pp0ciOfPHhKlU7glH1QTLAYEVC2oi06yP2AC7P/L7ZmL\n/l+8ePSXMZlXWwlXbV2QYQ/N8HckElrHjSC2TwVhCEw3FDB2kpQtv0GAkfzoH/PC\nsjwqVL1yHyw95CLDoxhvFCdfOA881qNyb59qKbBEWPH4VN/M+sUUP4A1trZsRaKx\nW+qYH1oWWwjv0vc9EdGkg3I/zvobJI2LjllCsa4EvsPkYuNMLorTTsYxyJox/rOY\nkZYB9U9YRK3iJXEwGvh8DHw87XZ/woHLl7w13V8kjpl1OWQ7E12IZy0fTyPvFH2l\nHVGG+hOwlD56u4gqaGehc+OEjaobQd+wwK2g2Qb5EcuzcHHn0wqIHkExycRu9NVR\nxtSG4H1XumNXAoigSb4J5W8HKacY1F+SjwQSC65zppB4kcEUnQt9jc+uKxlsmPHX\ncbTdy/MXZRIA5DmojWZh6ItSvPu7UkS8pmmpiUP2n9oks+XJZVD3bZz2RLjlRmAD\nqNnyBVFST7DPUV5oo+KcfGshwm/WZE43mT/vx58I9OOKOPmFx8RAguvQBbdtkrX7\nXW9EJ7maTdxLqLD2ZrWGyrHWJnGOScy1ZohmV/iQ3QwbbPWcAHGN6pDfRMKUyrTu\nlzPd2oVZN8sMki8PugrlRPpDdKABw4tVOQc7bv8cl3un3m8NkaTN/eSANeeZAXZg\naQH5zynG7/bBD21ht4UtOWfmjHrB2jaFtMXLPtE1MJsTIUcy0DRmDJKAZjEgaWA4\n+MJU62C0XibIMqn0usHgK6Fw0b+coPfVxZCn2j89G4Q/veFxWEH9o23npJv7NYfy\ngkUqRUdeJr3njbTtJTJMg+YUX1ApGY6Asqd+dO9FY0Xc3LEXwxh9gIg6NtRJHEqs\nObpS6mvD5i9pywnTBJocao0n6MALmw==\n=Tt2W\n-----END PGP SIGNATURE-----",
        "payload": "tree 17570439873bd595c91a140f82004124153d524f\nparent 9e3cbfca7c9efa620c0cce73503772805cc1fa82\nauthor Vasil Dimov <vd@FreeBSD.org> 1618308897 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368579 +0100\n\nnet: change CreateNodeFromAcceptedSocket() to take Sock\n\nChange `CConnman::CreateNodeFromAcceptedSocket()` to take a `Sock`\nargument instead of `SOCKET`.\n\nThis makes the method mockable and also a little bit shorter as some\n`CloseSocket()` calls are removed (the socket will be closed\nautomatically by the `Sock` destructor on early return).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bf6e9fd9dece67878595a5f3361851c25833c49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bf6e9fd9dece67878595a5f3361851c25833c49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bf6e9fd9dece67878595a5f3361851c25833c49/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e3cbfca7c9efa620c0cce73503772805cc1fa82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3cbfca7c9efa620c0cce73503772805cc1fa82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3cbfca7c9efa620c0cce73503772805cc1fa82"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 8,
      "deletions": 13
    },
    "files": [
      {
        "sha": "7f248e44d4161c115cafc1069aaa8861301f2f95",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bf6e9fd9dece67878595a5f3361851c25833c49/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bf6e9fd9dece67878595a5f3361851c25833c49/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6bf6e9fd9dece67878595a5f3361851c25833c49",
        "patch": "@@ -1120,10 +1120,10 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     NetPermissionFlags permissionFlags = NetPermissionFlags::None;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n \n-    CreateNodeFromAcceptedSocket(sock->Release(), permissionFlags, addr_bind, addr);\n+    CreateNodeFromAcceptedSocket(std::move(sock), permissionFlags, addr_bind, addr);\n }\n \n-void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n+void CConnman::CreateNodeFromAcceptedSocket(std::unique_ptr<Sock>&& sock,\n                                             NetPermissionFlags permissionFlags,\n                                             const CAddress& addr_bind,\n                                             const CAddress& addr)\n@@ -1149,27 +1149,24 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n \n     if (!fNetworkActive) {\n         LogPrint(BCLog::NET, \"connection from %s dropped: not accepting new connections\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n-    if (!IsSelectableSocket(hSocket))\n+    if (!IsSelectableSocket(sock->Get()))\n     {\n         LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n     // According to the internet TCP_NODELAY is not carried into accepted sockets\n     // on all platforms.  Set it again here just to be sure.\n-    SetSocketNoDelay(hSocket);\n+    SetSocketNoDelay(sock->Get());\n \n     // Don't accept connections from banned peers.\n     bool banned = m_banman && m_banman->IsBanned(addr);\n     if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::NoBan) && banned)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n@@ -1178,7 +1175,6 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::NoBan) && nInbound + 1 >= nMaxInbound && discouraged)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (discouraged)\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n@@ -1187,7 +1183,6 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n         if (!AttemptToEvictConnection()) {\n             // No connection to evict, disconnect the new connection\n             LogPrint(BCLog::NET, \"failed to find an eviction candidate - connection dropped (full)\\n\");\n-            CloseSocket(hSocket);\n             return;\n         }\n     }\n@@ -1201,7 +1196,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     }\n \n     const bool inbound_onion = std::find(m_onion_binds.begin(), m_onion_binds.end(), addr_bind) != m_onion_binds.end();\n-    CNode* pnode = new CNode(id, nodeServices, hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n+    CNode* pnode = new CNode(id, nodeServices, sock->Release(), addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n     pnode->AddRef();\n     pnode->m_permissionFlags = permissionFlags;\n     pnode->m_prefer_evict = discouraged;\n@@ -2329,7 +2324,7 @@ void CConnman::ThreadI2PAcceptIncoming()\n             continue;\n         }\n \n-        CreateNodeFromAcceptedSocket(conn.sock->Release(), NetPermissionFlags::None,\n+        CreateNodeFromAcceptedSocket(std::move(conn.sock), NetPermissionFlags::None,\n                                      CAddress{conn.me, NODE_NONE}, CAddress{conn.peer, NODE_NONE});\n     }\n }"
      },
      {
        "sha": "13ebb6ac3a29efc7e6bb2feb8deda4c84885bd17",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bf6e9fd9dece67878595a5f3361851c25833c49/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bf6e9fd9dece67878595a5f3361851c25833c49/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6bf6e9fd9dece67878595a5f3361851c25833c49",
        "patch": "@@ -974,12 +974,12 @@ class CConnman\n     /**\n      * Create a `CNode` object from a socket that has just been accepted and add the node to\n      * the `m_nodes` member.\n-     * @param[in] hSocket Connected socket to communicate with the peer.\n+     * @param[in] sock Connected socket to communicate with the peer.\n      * @param[in] permissionFlags The peer's permissions.\n      * @param[in] addr_bind The address and port at our side of the connection.\n      * @param[in] addr The address and port at the peer's side of the connection.\n      */\n-    void CreateNodeFromAcceptedSocket(SOCKET hSocket,\n+    void CreateNodeFromAcceptedSocket(std::unique_ptr<Sock>&& sock,\n                                       NetPermissionFlags permissionFlags,\n                                       const CAddress& addr_bind,\n                                       const CAddress& addr);"
      }
    ]
  },
  {
    "sha": "33878825483346e2ccb3c587a0cc5379b8063f24",
    "node_id": "C_kwDOABII59oAKDMzODc4ODI1NDgzMzQ2ZTJjY2IzYzU4N2EwY2M1Mzc5YjgwNjNmMjQ",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T14:20:06Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:23:00Z"
      },
      "message": "fuzz: move FuzzedSock earlier in src/test/fuzz/util.h\n\nThis way it can be used in `ConsumeNode()`.",
      "tree": {
        "sha": "5f28bb7808a98d537bbbbc7c5e3abca714be5b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f28bb7808a98d537bbbbc7c5e3abca714be5b85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33878825483346e2ccb3c587a0cc5379b8063f24",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhUQACgkQVN8G9ktV\ny7+LFB//b60ttwTEwgPmlcNkANJO9DB8zAlBGQouddthD3SM4nYJ8mFmKh4wUGLy\nmG1PAxfmm0/2CtbPuwiTN72sXPIHH1tP+JcGFf6y24ZR5lh0SFrNX3Wzx9qPAHQL\noLxyQfYzDTwDwfoItm36RGFfLbuIcP9Xe9CFbHq2+/sw7T5PuYbR5Se2YHDrD3jv\nyxckDhj4r2SVakjV1oPkCfpGjJF0JkOl0VKdL+NZw/O4a4Kbx1brgeFZahj7u8tP\nFRJf/TlPcbUS+uh2+LnwyCcps4WO4BzjG0Q/6SVZqRFLQR1qnpb+OAPvT9Ns2/sK\nRpHLWaKfFNg4BfDZHSrAMs2rkB2a/Dxlk1LPTbW2yPRIho3s4VioMAnXr9WojCph\n49MTBd/Bngl1DpUWRpAI09TWDRYJTdMEo/DHBWAHDkYZGl1C47asjAI/SYvBfbGo\nMdBjtkgHnfhDUs+/guZK2fURmevzpNMb+J+sOcEhtQMyL+pHPeVQxFbQwV4mEVYj\nUb6fhsQ8aTKVD4LH12cJbip73CZCJJJEcXHBiIaK4QS84ArzMzhUUBRapIbBtCXU\nGmOwiERSQAJw4GKFFmTkkm7Bz2+J9cd5N23hk16MSrm6N+Z6gv2W0Sw/RWhqeA9A\nm9NXByW2gwKyHeniDveeo3p1vfMi6TJXhI5xcrOo3o7v9jCKacm6WzDGh1hfSqM/\nkWMjtDY1lTScOBXlIZI95VL0q7R574yUgvTmljImiDynifau2/WQaMG6+ZhFns0n\nahMXGIlksJDSaemOmGN9s4LqLhSZIu+TE48VqzRvNOEYsmmJJ5M/leC+0Q0fS+M8\nyDC+LQYndoxIB3bbBzJxHp+zkahm5PFFDPDRiMkoisr3NIp71mhKtjf6IqAB6RzL\nCozJWCP0mgSQhl80xHy+Zwp3P3Oxk9eUumcTNybKueIR8U3DMO9L9/kK25x6IuLh\nCWJfYlVsXZguyY7vlb0E/cK1f/t4dzIPeEvF6CjISmBQ+xIuHJSysPdwkL+X99dM\nPiG8r7pp7VNZ0z1p0elGnLisd5XldQSeT3yhCTvtJZf9d/eMtyYYZnEn8iyxDjA2\n3xi/BXqX30jws0UHOtueJv1vyClq3A5hnWU0GpZrStyVX+dMXjK/d0IT4H0JY1PU\nw67ngI3qH+n4PCdyHw5WSb6tXEy/vgxqHgnPH19sAhkpVOemWvHvE1aTE5dcWkr6\n2swwY18QDzinFeNweEb8yc4RUEchbT451G/h4XrHk2zXMnBzKjEZHahuM9kOTDFl\nzyL9q6zA8ZJc4uAjewNUK3va/fbWzxWCDgbauYHQjVNWmb3O4+8A6ggzADeZVt2r\nJhwJKP06Ds8CxRPUVWz0X6GG9kh9uw==\n=EGw6\n-----END PGP SIGNATURE-----",
        "payload": "tree 5f28bb7808a98d537bbbbc7c5e3abca714be5b85\nparent 6bf6e9fd9dece67878595a5f3361851c25833c49\nauthor Vasil Dimov <vd@FreeBSD.org> 1619187606 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368580 +0100\n\nfuzz: move FuzzedSock earlier in src/test/fuzz/util.h\n\nThis way it can be used in `ConsumeNode()`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33878825483346e2ccb3c587a0cc5379b8063f24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33878825483346e2ccb3c587a0cc5379b8063f24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33878825483346e2ccb3c587a0cc5379b8063f24/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bf6e9fd9dece67878595a5f3361851c25833c49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bf6e9fd9dece67878595a5f3361851c25833c49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bf6e9fd9dece67878595a5f3361851c25833c49"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 40,
      "deletions": 40
    },
    "files": [
      {
        "sha": "ec40aa696673f5c14361bfbdaf158e540490cd21",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 40,
        "deletions": 40,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33878825483346e2ccb3c587a0cc5379b8063f24/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33878825483346e2ccb3c587a0cc5379b8063f24/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=33878825483346e2ccb3c587a0cc5379b8063f24",
        "patch": "@@ -36,6 +36,46 @@\n #include <string>\n #include <vector>\n \n+class FuzzedSock : public Sock\n+{\n+    FuzzedDataProvider& m_fuzzed_data_provider;\n+\n+    /**\n+     * Data to return when `MSG_PEEK` is used as a `Recv()` flag.\n+     * If `MSG_PEEK` is used, then our `Recv()` returns some random data as usual, but on the next\n+     * `Recv()` call we must return the same data, thus we remember it here.\n+     */\n+    mutable std::optional<uint8_t> m_peek_data;\n+\n+public:\n+    explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider);\n+\n+    ~FuzzedSock() override;\n+\n+    FuzzedSock& operator=(Sock&& other) override;\n+\n+    void Reset() override;\n+\n+    ssize_t Send(const void* data, size_t len, int flags) const override;\n+\n+    ssize_t Recv(void* buf, size_t len, int flags) const override;\n+\n+    int Connect(const sockaddr*, socklen_t) const override;\n+\n+    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override;\n+\n+    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n+\n+    bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n+\n+    bool IsConnected(std::string& errmsg) const override;\n+};\n+\n+[[nodiscard]] inline FuzzedSock ConsumeSock(FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    return FuzzedSock{fuzzed_data_provider};\n+}\n+\n template <typename... Callables>\n size_t CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n {\n@@ -384,44 +424,4 @@ void ReadFromStream(FuzzedDataProvider& fuzzed_data_provider, Stream& stream) no\n     }\n }\n \n-class FuzzedSock : public Sock\n-{\n-    FuzzedDataProvider& m_fuzzed_data_provider;\n-\n-    /**\n-     * Data to return when `MSG_PEEK` is used as a `Recv()` flag.\n-     * If `MSG_PEEK` is used, then our `Recv()` returns some random data as usual, but on the next\n-     * `Recv()` call we must return the same data, thus we remember it here.\n-     */\n-    mutable std::optional<uint8_t> m_peek_data;\n-\n-public:\n-    explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider);\n-\n-    ~FuzzedSock() override;\n-\n-    FuzzedSock& operator=(Sock&& other) override;\n-\n-    void Reset() override;\n-\n-    ssize_t Send(const void* data, size_t len, int flags) const override;\n-\n-    ssize_t Recv(void* buf, size_t len, int flags) const override;\n-\n-    int Connect(const sockaddr*, socklen_t) const override;\n-\n-    std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override;\n-\n-    int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n-\n-    bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n-\n-    bool IsConnected(std::string& errmsg) const override;\n-};\n-\n-[[nodiscard]] inline FuzzedSock ConsumeSock(FuzzedDataProvider& fuzzed_data_provider)\n-{\n-    return FuzzedSock{fuzzed_data_provider};\n-}\n-\n #endif // BITCOIN_TEST_FUZZ_UTIL_H"
      }
    ]
  },
  {
    "sha": "b464d7d69d6068584060e828d160a5fbbb5305d8",
    "node_id": "C_kwDOABII59oAKGI0NjRkN2Q2OWQ2MDY4NTg0MDYwZTgyOGQxNjBhNWZiYmI1MzA1ZDg",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T13:15:23Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:11Z"
      },
      "message": "net: use Sock in CNode\n\nChange `CNode` to use a pointer to `Sock` instead of a bare `SOCKET`.\nThis will help mocking / testing / fuzzing more code.",
      "tree": {
        "sha": "0d6798f82237c4f6efad6b8363b07c349e797b2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d6798f82237c4f6efad6b8363b07c349e797b2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b464d7d69d6068584060e828d160a5fbbb5305d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgUACgkQVN8G9ktV\ny79DFx/+OjqrtAWqQcsm/F9INxJkztBFlB/EMPT6Ce4TTi5hZPxEB3KAi3y6TPfV\nfzymmjYy/S7185FYkaXETwGHDyhXSw0CZM/CuVVTgL10vzQTRMATqzhH402owiNy\n2YWRAyCRD4lb8sz0gA6SnamxRNG8z6sBtPSZVJlewbRRt+QhaZk/l5FmkYfdtWlL\nMMb8CLZMx//R/w0DzU52MVk8dYKCsRXejr7S8w85NV2nIHmeMyodhbbzZ6uX/8J2\nBZEw5K99jIk+jJztR73eP6E9GaO5Qwd3TZQ89IFxcl91+S53fpEJtHDGR+vJ6qy0\nOYIsGzx62UbYmRLmZIawInxg4a+w6AUnRy4PaXjt0TRZftb2ZHRDSPVl33GAUgTY\nyK6KgeBgWrJodzgt2LnDTggS9X4vouIgxsYArRJJ3ae5KlB9RSIA2ZtWryz3hMnc\nU+YtgCkplzkKW+ZP7wV+yYgeNp8T23S3C2WQgTg+uSzFM0bwXkDzAkzT3vum77nU\n96Mw81HR1jkSSwD4nPeyzylZ6dRLn8FKYNtT6MRj976iZ0nOa+VnSS4iR90LA9PR\nI7dzTukxozKVJCZF+tO99/I3OVKkzyCZ/f4bBNDjnI+pl+rJrdVvcl9xkS66FCyP\n7/K18bKXLy10/T4vieIx4DEOSygxNL3sb/KHKHLeOaB73OyO9Tl+HdtSo4hyAu6n\nOJ+z0Miv2n2vioOxBpbCxRtzdxUD7FZHz3CrcEOfGggI+vYSPfcKOHAWYxbUMNC+\nnPzJeydBEM/Z9L+xH7rL7kGGh3JqnEoNcZgnK8+XNaaIbdek7VtFqXmjBSCVRpxC\nG+mTdBFRgW8/2nhWDNqiE4I1nau2mLj/7Se/Tq3b3slEF8Mr0sgfpVc8q7G5IzaG\niTgiiu7jdNB3dqQZev/JEh5f+91Zdj53xmNeQiUkJheBJTShV61z+q1ae/8UzBgh\ncUgHCOVPeNZHeQqVWavm/HHpfHxjsUo1fneXxyMV20KGRkIba0bwzlrZBo63hInF\nKNzTsv38cGDMnY1nE6eaRcIFv+HV0UqOGGQUbgOKxm98oWrISWb8iOLhrYzQ8aDq\nC07/RhBhCNh9IiWfe+hp0bjUx1jqepTxxYPwwajYEzqghC7Z40EUIj0BQavighLW\novnGKCROeYLLmmhqUyMykc7HFF6lzqZbibCmyxZy8WrPhKfwnaanxWT0P+0+5eMy\nig/+vsOby34u1tnT6wJ+y2dC/pWooUnUZ+XoHVV+WZDQ9WsPIClr78VEXNEodha3\n3LpzD8ba8iImXx6HGsCdKKFdI4sA4fQQk29dgHIcr3h2B4u6j+koCJAIUWxUJbOH\n4TMCtP2BjSTo1fNen0j2japHQkQ4zQ==\n=SyW8\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d6798f82237c4f6efad6b8363b07c349e797b2a\nparent 33878825483346e2ccb3c587a0cc5379b8063f24\nauthor Vasil Dimov <vd@FreeBSD.org> 1619183723 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368771 +0100\n\nnet: use Sock in CNode\n\nChange `CNode` to use a pointer to `Sock` instead of a bare `SOCKET`.\nThis will help mocking / testing / fuzzing more code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b464d7d69d6068584060e828d160a5fbbb5305d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b464d7d69d6068584060e828d160a5fbbb5305d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b464d7d69d6068584060e828d160a5fbbb5305d8/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33878825483346e2ccb3c587a0cc5379b8063f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33878825483346e2ccb3c587a0cc5379b8063f24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33878825483346e2ccb3c587a0cc5379b8063f24"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 55,
      "deletions": 41
    },
    "files": [
      {
        "sha": "28415acc4e9a31a2ee596d51d9eed4ce1b3530b4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b464d7d69d6068584060e828d160a5fbbb5305d8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b464d7d69d6068584060e828d160a5fbbb5305d8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b464d7d69d6068584060e828d160a5fbbb5305d8",
        "patch": "@@ -504,7 +504,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     if (!addr_bind.IsValid()) {\n         addr_bind = GetBindAddress(sock->Get());\n     }\n-    CNode* pnode = new CNode(id, nLocalServices, sock->Release(), addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, /* inbound_onion */ false);\n+    CNode* pnode = new CNode(id, nLocalServices, std::move(sock), addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, /* inbound_onion */ false);\n     pnode->AddRef();\n \n     // We're making a new connection, harvest entropy from the time (and our peer count)\n@@ -517,10 +517,9 @@ void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n     LOCK(cs_hSocket);\n-    if (hSocket != INVALID_SOCKET)\n-    {\n+    if (m_sock) {\n         LogPrint(BCLog::NET, \"disconnecting peer=%d\\n\", id);\n-        CloseSocket(hSocket);\n+        m_sock.reset();\n     }\n }\n \n@@ -799,9 +798,10 @@ size_t CConnman::SocketSendData(CNode& node) const\n         int nBytes = 0;\n         {\n             LOCK(node.cs_hSocket);\n-            if (node.hSocket == INVALID_SOCKET)\n+            if (!node.m_sock) {\n                 break;\n-            nBytes = send(node.hSocket, reinterpret_cast<const char*>(data.data()) + node.nSendOffset, data.size() - node.nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+            }\n+            nBytes = node.m_sock->Send(reinterpret_cast<const char*>(data.data()) + node.nSendOffset, data.size() - node.nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         }\n         if (nBytes > 0) {\n             node.nLastSend = GetTimeSeconds();\n@@ -1196,7 +1196,7 @@ void CConnman::CreateNodeFromAcceptedSocket(std::unique_ptr<Sock>&& sock,\n     }\n \n     const bool inbound_onion = std::find(m_onion_binds.begin(), m_onion_binds.end(), addr_bind) != m_onion_binds.end();\n-    CNode* pnode = new CNode(id, nodeServices, sock->Release(), addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n+    CNode* pnode = new CNode(id, nodeServices, std::move(sock), addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n     pnode->AddRef();\n     pnode->m_permissionFlags = permissionFlags;\n     pnode->m_prefer_evict = discouraged;\n@@ -1377,16 +1377,17 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n         }\n \n         LOCK(pnode->cs_hSocket);\n-        if (pnode->hSocket == INVALID_SOCKET)\n+        if (!pnode->m_sock) {\n             continue;\n+        }\n \n-        error_set.insert(pnode->hSocket);\n+        error_set.insert(pnode->m_sock->Get());\n         if (select_send) {\n-            send_set.insert(pnode->hSocket);\n+            send_set.insert(pnode->m_sock->Get());\n             continue;\n         }\n         if (select_recv) {\n-            recv_set.insert(pnode->hSocket);\n+            recv_set.insert(pnode->m_sock->Get());\n         }\n     }\n \n@@ -1557,11 +1558,12 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n         bool errorSet = false;\n         {\n             LOCK(pnode->cs_hSocket);\n-            if (pnode->hSocket == INVALID_SOCKET)\n+            if (!pnode->m_sock) {\n                 continue;\n-            recvSet = recv_set.count(pnode->hSocket) > 0;\n-            sendSet = send_set.count(pnode->hSocket) > 0;\n-            errorSet = error_set.count(pnode->hSocket) > 0;\n+            }\n+            recvSet = recv_set.count(pnode->m_sock->Get()) > 0;\n+            sendSet = send_set.count(pnode->m_sock->Get()) > 0;\n+            errorSet = error_set.count(pnode->m_sock->Get()) > 0;\n         }\n         if (recvSet || errorSet)\n         {\n@@ -1570,9 +1572,10 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n             int nBytes = 0;\n             {\n                 LOCK(pnode->cs_hSocket);\n-                if (pnode->hSocket == INVALID_SOCKET)\n+                if (!pnode->m_sock) {\n                     continue;\n-                nBytes = recv(pnode->hSocket, (char*)pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                }\n+                nBytes = pnode->m_sock->Recv(pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n             }\n             if (nBytes > 0)\n             {\n@@ -2957,8 +2960,9 @@ ServiceFlags CConnman::GetLocalServices() const\n \n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion)\n-    : nTimeConnected(GetTimeSeconds()),\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, std::shared_ptr<Sock> sock, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion)\n+    : m_sock{sock},\n+      nTimeConnected(GetTimeSeconds()),\n       addr(addrIn),\n       addrBind(addrBindIn),\n       m_addr_name{addrNameIn.empty() ? addr.ToStringIPPort() : addrNameIn},\n@@ -2970,7 +2974,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const\n       nLocalServices(nLocalServicesIn)\n {\n     if (inbound_onion) assert(conn_type_in == ConnectionType::INBOUND);\n-    hSocket = hSocketIn;\n     if (conn_type_in != ConnectionType::BLOCK_RELAY) {\n         m_tx_relay = std::make_unique<TxRelay>();\n     }\n@@ -2989,10 +2992,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const\n     m_serializer = std::make_unique<V1TransportSerializer>(V1TransportSerializer());\n }\n \n-CNode::~CNode()\n-{\n-    CloseSocket(hSocket);\n-}\n+CNode::~CNode() {}\n \n bool CConnman::NodeFullyConnected(const CNode* pnode)\n {"
      },
      {
        "sha": "da40b66c25f73f63eaa243a006730186f8296ae4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b464d7d69d6068584060e828d160a5fbbb5305d8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b464d7d69d6068584060e828d160a5fbbb5305d8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b464d7d69d6068584060e828d160a5fbbb5305d8",
        "patch": "@@ -402,7 +402,13 @@ class CNode\n \n     NetPermissionFlags m_permissionFlags{NetPermissionFlags::None};\n     std::atomic<ServiceFlags> nServices{NODE_NONE};\n-    SOCKET hSocket GUARDED_BY(cs_hSocket);\n+\n+    /**\n+     * Socket used for communication with the node.\n+     * May not own a Sock object (after `CloseSocketDisconnect()` or during tests).\n+     */\n+    std::shared_ptr<Sock> m_sock GUARDED_BY(cs_hSocket);\n+\n     /** Total size of all vSendMsg entries */\n     size_t nSendSize GUARDED_BY(cs_vSend){0};\n     /** Offset inside the first vSendMsg already sent */\n@@ -578,7 +584,7 @@ class CNode\n      * criterium in CConnman::AttemptToEvictConnection. */\n     std::atomic<std::chrono::microseconds> m_min_ping_time{std::chrono::microseconds::max()};\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, std::shared_ptr<Sock> sock, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress& addrBindIn, const std::string& addrNameIn, ConnectionType conn_type_in, bool inbound_onion);\n     ~CNode();\n     CNode(const CNode&) = delete;\n     CNode& operator=(const CNode&) = delete;"
      },
      {
        "sha": "267833115f6f945b8414d5361187ceb05cf771c1",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b464d7d69d6068584060e828d160a5fbbb5305d8/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b464d7d69d6068584060e828d160a5fbbb5305d8/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=b464d7d69d6068584060e828d160a5fbbb5305d8",
        "patch": "@@ -59,7 +59,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), nullptr, addr1, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false);\n     dummyNode1.SetCommonVersion(PROTOCOL_VERSION);\n \n     peerLogic->InitializeNode(&dummyNode1);\n@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n static void AddRandomOutboundPeer(std::vector<CNode*>& vNodes, PeerManager& peerLogic, ConnmanTestMsg& connman)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n-    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false));\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), nullptr, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false));\n     CNode &node = *vNodes.back();\n     node.SetCommonVersion(PROTOCOL_VERSION);\n \n@@ -212,7 +212,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     std::array<CNode*, 3> nodes;\n \n     banman->ClearBanned();\n-    nodes[0] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[0], /*nKeyedNetGroupIn=*/0,\n+    nodes[0] = new CNode{id++, NODE_NETWORK, nullptr, addr[0], /*nKeyedNetGroupIn=*/0,\n                          /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::INBOUND, /*inbound_onion=*/false};\n     nodes[0]->SetCommonVersion(PROTOCOL_VERSION);\n@@ -228,7 +228,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     BOOST_CHECK(nodes[0]->fDisconnect);\n     BOOST_CHECK(!banman->IsDiscouraged(other_addr)); // Different address, not discouraged\n \n-    nodes[1] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[1], /*nKeyedNetGroupIn=*/1,\n+    nodes[1] = new CNode{id++, NODE_NETWORK, nullptr, addr[1], /*nKeyedNetGroupIn=*/1,\n                          /*nLocalHostNonceIn=*/1, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::INBOUND, /*inbound_onion=*/false};\n     nodes[1]->SetCommonVersion(PROTOCOL_VERSION);\n@@ -259,7 +259,7 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n \n     // Make sure non-IP peers are discouraged and disconnected properly.\n \n-    nodes[2] = new CNode{id++, NODE_NETWORK, INVALID_SOCKET, addr[2], /*nKeyedNetGroupIn=*/1,\n+    nodes[2] = new CNode{id++, NODE_NETWORK, nullptr, addr[2], /*nKeyedNetGroupIn=*/1,\n                          /*nLocalHostNonceIn=*/1, CAddress(), /*addrNameIn=*/\"\",\n                          ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false};\n     nodes[2]->SetCommonVersion(PROTOCOL_VERSION);\n@@ -297,7 +297,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/4, /*nLocalHostNonceIn=*/4, CAddress(), /*addrNameIn=*/\"\", ConnectionType::INBOUND, /*inbound_onion=*/false);\n+    CNode dummyNode(id++, NODE_NETWORK, nullptr, addr, /*nKeyedNetGroupIn=*/4, /*nLocalHostNonceIn=*/4, CAddress(), /*addrNameIn=*/\"\", ConnectionType::INBOUND, /*inbound_onion=*/false);\n     dummyNode.SetCommonVersion(PROTOCOL_VERSION);\n     peerLogic->InitializeNode(&dummyNode);\n     dummyNode.fSuccessfullyConnected = true;"
      },
      {
        "sha": "7c2d224789754b6abeb4b68ede6f6416c970606f",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b464d7d69d6068584060e828d160a5fbbb5305d8/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b464d7d69d6068584060e828d160a5fbbb5305d8/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=b464d7d69d6068584060e828d160a5fbbb5305d8",
        "patch": "@@ -299,7 +299,7 @@ auto ConsumeNode(FuzzedDataProvider& fuzzed_data_provider, const std::optional<N\n {\n     const NodeId node_id = node_id_in.value_or(fuzzed_data_provider.ConsumeIntegral<NodeId>());\n     const ServiceFlags local_services = ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS);\n-    const SOCKET socket = INVALID_SOCKET;\n+    auto sock = std::make_shared<FuzzedSock>(fuzzed_data_provider);\n     const CAddress address = ConsumeAddress(fuzzed_data_provider);\n     const uint64_t keyed_net_group = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n     const uint64_t local_host_nonce = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n@@ -308,9 +308,9 @@ auto ConsumeNode(FuzzedDataProvider& fuzzed_data_provider, const std::optional<N\n     const ConnectionType conn_type = fuzzed_data_provider.PickValueInArray(ALL_CONNECTION_TYPES);\n     const bool inbound_onion{conn_type == ConnectionType::INBOUND ? fuzzed_data_provider.ConsumeBool() : false};\n     if constexpr (ReturnUniquePtr) {\n-        return std::make_unique<CNode>(node_id, local_services, socket, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion);\n+        return std::make_unique<CNode>(node_id, local_services, sock, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion);\n     } else {\n-        return CNode{node_id, local_services, socket, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion};\n+        return CNode{node_id, local_services, sock, address, keyed_net_group, local_host_nonce, addr_bind, addr_name, conn_type, inbound_onion};\n     }\n }\n inline std::unique_ptr<CNode> ConsumeNodeAsUniquePtr(FuzzedDataProvider& fdp, const std::optional<NodeId>& node_id_in = std::nullopt) { return ConsumeNode<true>(fdp, node_id_in); }"
      },
      {
        "sha": "c9e1548ee2a7192fed5e8f2b7f464508f436aa15",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b464d7d69d6068584060e828d160a5fbbb5305d8/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b464d7d69d6068584060e828d160a5fbbb5305d8/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=b464d7d69d6068584060e828d160a5fbbb5305d8",
        "patch": "@@ -43,7 +43,6 @@ BOOST_AUTO_TEST_CASE(cnode_listen_port)\n \n BOOST_AUTO_TEST_CASE(cnode_simple_test)\n {\n-    SOCKET hSocket = INVALID_SOCKET;\n     NodeId id = 0;\n \n     in_addr ipv4Addr;\n@@ -53,7 +52,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     std::string pszDest;\n \n     std::unique_ptr<CNode> pnode1 = std::make_unique<CNode>(\n-        id++, NODE_NETWORK, hSocket, addr,\n+        id++, NODE_NETWORK, nullptr, addr,\n         /* nKeyedNetGroupIn = */ 0,\n         /* nLocalHostNonceIn = */ 0,\n         CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY,\n@@ -68,7 +67,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK_EQUAL(pnode1->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n     std::unique_ptr<CNode> pnode2 = std::make_unique<CNode>(\n-        id++, NODE_NETWORK, hSocket, addr,\n+        id++, NODE_NETWORK, nullptr, addr,\n         /* nKeyedNetGroupIn = */ 1,\n         /* nLocalHostNonceIn = */ 1,\n         CAddress(), pszDest, ConnectionType::INBOUND,\n@@ -83,7 +82,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK_EQUAL(pnode2->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n     std::unique_ptr<CNode> pnode3 = std::make_unique<CNode>(\n-        id++, NODE_NETWORK, hSocket, addr,\n+        id++, NODE_NETWORK, nullptr, addr,\n         /* nKeyedNetGroupIn = */ 0,\n         /* nLocalHostNonceIn = */ 0,\n         CAddress(), pszDest, ConnectionType::OUTBOUND_FULL_RELAY,\n@@ -98,7 +97,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     BOOST_CHECK_EQUAL(pnode3->ConnectedThroughNetwork(), Network::NET_IPV4);\n \n     std::unique_ptr<CNode> pnode4 = std::make_unique<CNode>(\n-        id++, NODE_NETWORK, hSocket, addr,\n+        id++, NODE_NETWORK, nullptr, addr,\n         /* nKeyedNetGroupIn = */ 1,\n         /* nLocalHostNonceIn = */ 1,\n         CAddress(), pszDest, ConnectionType::INBOUND,\n@@ -607,7 +606,16 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     in_addr ipv4AddrPeer;\n     ipv4AddrPeer.s_addr = 0xa0b0c001;\n     CAddress addr = CAddress(CService(ipv4AddrPeer, 7777), NODE_NETWORK);\n-    std::unique_ptr<CNode> pnode = std::make_unique<CNode>(0, NODE_NETWORK, INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress{}, /*pszDest=*/std::string{}, ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false);\n+    std::unique_ptr<CNode> pnode = std::make_unique<CNode>(0,\n+                                                           NODE_NETWORK,\n+                                                           nullptr,\n+                                                           addr,\n+                                                           /*nKeyedNetGroupIn=*/0,\n+                                                           /*nLocalHostNonceIn=*/0,\n+                                                           CAddress{},\n+                                                           /*pszDest=*/std::string{},\n+                                                           ConnectionType::OUTBOUND_FULL_RELAY,\n+                                                           /*inbound_onion=*/false);\n     pnode->fSuccessfullyConnected.store(true);\n \n     // the peer claims to be reaching us via IPv6"
      }
    ]
  },
  {
    "sha": "82a0eb7a62bad22cd61869dd4f3b873e2b56036d",
    "node_id": "C_kwDOABII59oAKDgyYTBlYjdhNjJiYWQyMmNkNjE4NjlkZDRmM2I4NzNlMmI1NjAzNmQ",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-23T13:30:46Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:13Z"
      },
      "message": "scripted-diff: rename CNode::cs_hSocket to CNode::m_sock_mutex\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/cs_hSocket/m_sock_mutex/g' $(git grep -l cs_hSocket)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "dfdf29b986034947edac22ee8eee2b8544875cc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfdf29b986034947edac22ee8eee2b8544875cc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82a0eb7a62bad22cd61869dd4f3b873e2b56036d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgYACgkQVN8G9ktV\ny78/ayAAqtE+HSVvjnSuNzWZeuNOGqn2G8thw8gNiJVMtt51nmWJLalTzfEfmVY0\nPU1VJbvJJQBenGT0TW3+B8mVbZFhbwAc+L/JimsKNtzsW11scHPnL4H87523q2oE\nBo3fK/cPoYsuhzYCKRmhwlwxWSt26vl6Xxxi7wEIpN56asc5OFWDf0aMYeV/4jFn\nvtftKvJMLJsiHwL05VMzU6PLn4MaiC75Mo1ogHNTZLGlaE1Pq+aEm63g88UdoJjy\n/DRPYsVI0LsXQdPOAirqYmFkLltDvw7c3zGRx5DGND4bIYNQLT1t04fBMZHrzp3V\n43JgnQs5sktLQWbS+sqkPipDN5+9Jm7edUHzH0z4nW20Wee2sreHRI3teMGF541N\ntGD6MXuM9PDN87vQwgxQFFwLEtFtpyTrG8v1SWtcvUsw8VCBgWHLPWgMk2CC22Xx\nH//RWXDGtE0rYpQT9i2PUK1L9y6ICrbqFhLjDJK5Q7fxQZE6juxFqVt4LDaRTWTK\nqzCgXpGDnWpNoCUj6DG26WYYrtlUdNsJS60wJUd9xbSeID+b6fCsAEYdho2/FEma\nCP21krrt+Zq8bBNQ7p28JOw+AMv7Cbr8OJi/002vpc2l0dyVupOW6pU+C8vt6DSx\nBwcTuSjaupLDcHQcXVCcbX16BIZhEVbck3Qa1M3ud2KWdIogGtMuOU7bFh9VnKs6\nwjUCqNLfR9VzL8Eb4IT2aNOGemP08CAxq8s2+YUL4klV7OrIy8LssDzXJgQ4XAqk\nBoMVloVU6QQKONTGZ/NgfeoUbFZX3UsrbOnE6eLbh/mgfC2aCHx99k8e9DPsELfF\n5+v0j9FMkeXJgzL2268lUaES2Xi7i4a58WzYHcti+kllLQr7aJb2+r0VRm/MNyFV\nb9MakJ+dQvvyx7fcVUjG6WswqhyBB0UfuAKMXVcVRek25sguwoAndCrEmNAs+0Ho\nC+UfdeGvDTxRciV237v87jsLCa5TYnFMmfLy26v0PxLVRgAq0WCioiWA2nl7kmLk\n3WrfgOWr4raxPNqnzc75e+uN6Uke5I2Xt+0bSzALfiXup+xw3hL7jZUjh6x5Bub9\nrMT7/iPb0Bur4FmALfoscCAGcF3jm5xtiGYmODrLe8mfCH2HWnB+SmL+E5JGIWRs\naEr9g8dVYkn+0hAIxHV1FvC7lVSCOXQ0SBNmtKOBK1NJCVTEpdhFPwah3OCerp8d\ny3of/ToKe4bKQ8nvk/JiPqovvOMzsbNxZLdrb9NsLVAJYJabDShuEwt5V1fEe4OF\ntWyFIgkdEC+w1KYg9Y6JsGwzJm6H0sbHuGYF+SYPAXWxeTWZmLz0SuMJT71bfiRg\nV2herVhxtd/mARw6Ex7T02Imgac+1w==\n=ZMcd\n-----END PGP SIGNATURE-----",
        "payload": "tree dfdf29b986034947edac22ee8eee2b8544875cc0\nparent b464d7d69d6068584060e828d160a5fbbb5305d8\nauthor Vasil Dimov <vd@FreeBSD.org> 1619184646 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368773 +0100\n\nscripted-diff: rename CNode::cs_hSocket to CNode::m_sock_mutex\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/cs_hSocket/m_sock_mutex/g' $(git grep -l cs_hSocket)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a0eb7a62bad22cd61869dd4f3b873e2b56036d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82a0eb7a62bad22cd61869dd4f3b873e2b56036d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a0eb7a62bad22cd61869dd4f3b873e2b56036d/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b464d7d69d6068584060e828d160a5fbbb5305d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b464d7d69d6068584060e828d160a5fbbb5305d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b464d7d69d6068584060e828d160a5fbbb5305d8"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2bc0abb31532b5218231a5e6c6e69b00bc211514",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a0eb7a62bad22cd61869dd4f3b873e2b56036d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a0eb7a62bad22cd61869dd4f3b873e2b56036d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=82a0eb7a62bad22cd61869dd4f3b873e2b56036d",
        "patch": "@@ -516,7 +516,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n-    LOCK(cs_hSocket);\n+    LOCK(m_sock_mutex);\n     if (m_sock) {\n         LogPrint(BCLog::NET, \"disconnecting peer=%d\\n\", id);\n         m_sock.reset();\n@@ -797,7 +797,7 @@ size_t CConnman::SocketSendData(CNode& node) const\n         assert(data.size() > node.nSendOffset);\n         int nBytes = 0;\n         {\n-            LOCK(node.cs_hSocket);\n+            LOCK(node.m_sock_mutex);\n             if (!node.m_sock) {\n                 break;\n             }\n@@ -1376,7 +1376,7 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             select_send = !pnode->vSendMsg.empty();\n         }\n \n-        LOCK(pnode->cs_hSocket);\n+        LOCK(pnode->m_sock_mutex);\n         if (!pnode->m_sock) {\n             continue;\n         }\n@@ -1557,7 +1557,7 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n         bool sendSet = false;\n         bool errorSet = false;\n         {\n-            LOCK(pnode->cs_hSocket);\n+            LOCK(pnode->m_sock_mutex);\n             if (!pnode->m_sock) {\n                 continue;\n             }\n@@ -1571,7 +1571,7 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n             uint8_t pchBuf[0x10000];\n             int nBytes = 0;\n             {\n-                LOCK(pnode->cs_hSocket);\n+                LOCK(pnode->m_sock_mutex);\n                 if (!pnode->m_sock) {\n                     continue;\n                 }"
      },
      {
        "sha": "2efdb2ce3e5ff748ccad1ddb57a3d3c07d3e16be",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a0eb7a62bad22cd61869dd4f3b873e2b56036d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a0eb7a62bad22cd61869dd4f3b873e2b56036d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=82a0eb7a62bad22cd61869dd4f3b873e2b56036d",
        "patch": "@@ -407,7 +407,7 @@ class CNode\n      * Socket used for communication with the node.\n      * May not own a Sock object (after `CloseSocketDisconnect()` or during tests).\n      */\n-    std::shared_ptr<Sock> m_sock GUARDED_BY(cs_hSocket);\n+    std::shared_ptr<Sock> m_sock GUARDED_BY(m_sock_mutex);\n \n     /** Total size of all vSendMsg entries */\n     size_t nSendSize GUARDED_BY(cs_vSend){0};\n@@ -416,7 +416,7 @@ class CNode\n     uint64_t nSendBytes GUARDED_BY(cs_vSend){0};\n     std::deque<std::vector<unsigned char>> vSendMsg GUARDED_BY(cs_vSend);\n     Mutex cs_vSend;\n-    Mutex cs_hSocket;\n+    Mutex m_sock_mutex;\n     Mutex cs_vRecv;\n \n     RecursiveMutex cs_vProcessMsg;"
      }
    ]
  },
  {
    "sha": "673a0fe701a964df07c9f449e2ee8667e7583c6c",
    "node_id": "C_kwDOABII59oAKDY3M2EwZmU3MDFhOTY0ZGYwN2M5ZjQ0OWUyZWU4NjY3ZTc1ODNjNmM",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-04T10:06:44Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:14Z"
      },
      "message": "net: also wait for exceptional events in Sock::Wait()\n\nThis mimics closely `CConnman::SocketEvents()` and the underlying\n`poll(2)`.",
      "tree": {
        "sha": "a7bd8d6ee7ab5af708be5264cffab2a1cb4101b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7bd8d6ee7ab5af708be5264cffab2a1cb4101b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/673a0fe701a964df07c9f449e2ee8667e7583c6c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgYACgkQVN8G9ktV\ny7+tSiAArS/Fko0+t5IWxsf6A4IqpdZlkC1iUH2qnnnZhr/9T+STL7S72gDmj1d9\nnA6BfAf7bllc0X6ktaQYXUCDo6gyrfwVj8MgjLnw3/SDFJzMpXxd/2gXfVjStMh0\n/3/hh9T4k39YesgNw6g4znkoVyk8aolnAS9FU/mRZ1rei6peTgT/cPCdKUPu2F/A\nBfWuF3NOEzsC6HTU/YznaKFOWAr8dZU0GEITs+XKqPt53UY06g3w3S/CGRIAwdBj\n7i/lYoDJziWCMojEQ0AITikiMPdOybxKZ+2vDzEkr2FMMkGqiTLUF61XZD1ajsh1\nWJHU8SGMpFJTR8xEEbACTPARrHHfOUI+gITMlEcwRK1Dj5387dY/Rj3r4ocVCf51\ngVt4dFrEHrjtWneZBuFyZf4rggMcZWzFlJhdo538nj0DhS1VzWAiZsMSsYOXkgAs\npyPWQnNzhS1Jur4kvtQXNn+h9ytVs8BZIeybXXj+KlCGnqqxHUR2uO60mAPT86Br\nESdslfXNeYoc/z/uEUbS4nrsXohrAeQPWc/ecgV3H6Un5dvIwcrYySiifMvQJ/P4\nVI6G0YTiJiDtxtaXj/h0ybw0H7S++7CjD9p2b3UY19qrqlGli0mrdgMwtCz4pdKg\njRz3XRx0Vl6/EW04nndAj7/ypVlEOlcdYPpvvCV2UAyR/1tMH9LWNz8/n+WdnpGy\n8npEwvCc8pU/9SF3Zb5V5qIcxQevi78SX9HKRuTgmiNyS8tTDHns7H/mig4yHxDu\nyzQA7IiLVkgbDaCy2uNCJfqZg1LBRuSF70Txn8NtlIskCa4eUTSh64GzTqdXgzkZ\n7vWvhNlzrzJF/AIhgWE+2JBbSPCeplgpyZyJDQq6JvZ9aaImKmA0gemYAkYXO1Y/\n2OXyuJ+7kfnb8fe9ohlGIj+pzM9JfIJCXXfBW2wdGWKQxQ0MaUiYhvKTO6N13En5\nj6yYnhIqaF9Vi5O6JYTE650f3HcB+5epNdgtJWYvd5gnItNvW0iVJGRd/xV7OfFC\n1Y+vhqZB8wGFU9yBWknfEKm/35aINRe1dZlBBXocH46yAtWRfT+fMN8XHu5qisuJ\nYdV0A6wgeOy0SQ4iCgoRpGCLgW7a11eHImZllXvjPVNim+DOBzLomQsza7DUmuRb\novq3IYDSiCCnaI2QhRS8PkxzsFadECylAnPkzDQPmOIiZ/qTmV6Dl21KraFxnbaI\nMLCHRw5bRKVABc3oaYhRv5Ja9cgti7vKL01d0RFRqtblnVUcpueo42qlg1cIrH7X\nIRiYhqHebwuLcxO0PUy3fkxUbl53CNhhXwvTznxz7zBsp/lq348khbC/hgg0B6FO\nghUo2xsVWPiB4thUmR0PYzEOm6YtzA==\n=eeTO\n-----END PGP SIGNATURE-----",
        "payload": "tree a7bd8d6ee7ab5af708be5264cffab2a1cb4101b0\nparent 82a0eb7a62bad22cd61869dd4f3b873e2b56036d\nauthor Vasil Dimov <vd@FreeBSD.org> 1620122804 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368774 +0100\n\nnet: also wait for exceptional events in Sock::Wait()\n\nThis mimics closely `CConnman::SocketEvents()` and the underlying\n`poll(2)`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/673a0fe701a964df07c9f449e2ee8667e7583c6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/673a0fe701a964df07c9f449e2ee8667e7583c6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/673a0fe701a964df07c9f449e2ee8667e7583c6c/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82a0eb7a62bad22cd61869dd4f3b873e2b56036d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a0eb7a62bad22cd61869dd4f3b873e2b56036d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82a0eb7a62bad22cd61869dd4f3b873e2b56036d"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 23,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7ec4a283190eaf28a1bc6b01a292168483ec0f13",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/673a0fe701a964df07c9f449e2ee8667e7583c6c/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/673a0fe701a964df07c9f449e2ee8667e7583c6c/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=673a0fe701a964df07c9f449e2ee8667e7583c6c",
        "patch": "@@ -151,7 +151,7 @@ bool Session::Accept(Connection& conn)\n                 throw std::runtime_error(\"wait on socket failed\");\n             }\n \n-            if ((occurred & Sock::RECV) == 0) {\n+            if (occurred == 0) {\n                 // Timeout, no incoming connections within MAX_WAIT_FOR_IO.\n                 continue;\n             }"
      },
      {
        "sha": "7301322bf3ea5da05bf62a3fccdf20d5bc47e5e0",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/673a0fe701a964df07c9f449e2ee8667e7583c6c/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/673a0fe701a964df07c9f449e2ee8667e7583c6c/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=673a0fe701a964df07c9f449e2ee8667e7583c6c",
        "patch": "@@ -130,6 +130,9 @@ bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occur\n         if (fd.revents & POLLOUT) {\n             *occurred |= SEND;\n         }\n+        if (fd.revents & (POLLERR | POLLHUP)) {\n+            *occurred |= ERR;\n+        }\n     }\n \n     return true;\n@@ -140,8 +143,10 @@ bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occur\n \n     fd_set fdset_recv;\n     fd_set fdset_send;\n+    fd_set fdset_err;\n     FD_ZERO(&fdset_recv);\n     FD_ZERO(&fdset_send);\n+    FD_ZERO(&fdset_err);\n \n     if (requested & RECV) {\n         FD_SET(m_socket, &fdset_recv);\n@@ -151,9 +156,11 @@ bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occur\n         FD_SET(m_socket, &fdset_send);\n     }\n \n+    FD_SET(m_socket, &fdset_err);\n+\n     timeval timeout_struct = MillisToTimeval(timeout);\n \n-    if (select(m_socket + 1, &fdset_recv, &fdset_send, nullptr, &timeout_struct) == SOCKET_ERROR) {\n+    if (select(m_socket + 1, &fdset_recv, &fdset_send, &fdset_err, &timeout_struct) == SOCKET_ERROR) {\n         return false;\n     }\n \n@@ -165,6 +172,9 @@ bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occur\n         if (FD_ISSET(m_socket, &fdset_send)) {\n             *occurred |= SEND;\n         }\n+        if (FD_ISSET(m_socket, &fdset_err)) {\n+            *occurred |= ERR;\n+        }\n     }\n \n     return true;"
      },
      {
        "sha": "92635515d470dc00b27274e5ab0c95bd99c41052",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/673a0fe701a964df07c9f449e2ee8667e7583c6c/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/673a0fe701a964df07c9f449e2ee8667e7583c6c/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=673a0fe701a964df07c9f449e2ee8667e7583c6c",
        "patch": "@@ -120,20 +120,27 @@ class Sock\n     /**\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\n      */\n-    static constexpr Event RECV = 0b01;\n+    static constexpr Event RECV = 0b001;\n \n     /**\n      * If passed to `Wait()`, then it will wait for readiness to send to the socket.\n      */\n-    static constexpr Event SEND = 0b10;\n+    static constexpr Event SEND = 0b010;\n+\n+    /**\n+     * Ignored if passed to `Wait()`, but could be set in the occurred events if an\n+     * exceptional condition has occurred on the socket or if it has been disconnected.\n+     */\n+    static constexpr Event ERR = 0b100;\n \n     /**\n      * Wait for readiness for input (recv) or output (send).\n      * @param[in] timeout Wait this much for at least one of the requested events to occur.\n      * @param[in] requested Wait for those events, bitwise-or of `RECV` and `SEND`.\n      * @param[out] occurred If not nullptr and `true` is returned, then upon return this\n-     * indicates which of the requested events occurred. A timeout is indicated by return\n-     * value of `true` and `occurred` being set to 0.\n+     * indicates which of the requested events occurred (`ERR` will be added, even if\n+     * not requested, if an exceptional event occurs on the socket).\n+     * A timeout is indicated by return value of `true` and `occurred` being set to 0.\n      * @return true on success and false otherwise\n      */\n     [[nodiscard]] virtual bool Wait(std::chrono::milliseconds timeout,"
      }
    ]
  },
  {
    "sha": "14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
    "node_id": "C_kwDOABII59oAKDE0ZjdlNWFmOWM2YTY0MWE1MGI5NGZiNDc2MjlhMzQ0YjhlM2JmZWM",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-04T14:24:57Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:15Z"
      },
      "message": "net: introduce Sock::WaitMany()\n\nIt allows waiting concurrently on more than one socket. Being a\n`virtual` `Sock` method it can be overriden by tests.\n\nWill be used to replace `CConnman::SocketEvents()`.",
      "tree": {
        "sha": "c6b07eb0f1e253c83428af02038bd86a2eb239c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6b07eb0f1e253c83428af02038bd86a2eb239c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgcACgkQVN8G9ktV\ny79/tR//akggs+u+kfrwAnlPXAgOk8Ta+dUxYcMd39pThw9wwQFsgXapWKfodj23\nnVuASJ9yvpFZM+2Ggug8szoVv+l9I/9Ry6Tx/nOTV8lJup3udoHjP71FY3Lm4J9F\nwc3c/SxMzU3BKFcCUaVlbp+6r5g89W01ByuWw7hgHJgRaLSx5QiaUghLpZsH0FDQ\nbS6Xf9QO3j6dOWz5eGljPG7comfdvpC6PefOmzUFiH+3b8KCRS6DDTxh+oMEfn3k\nXY+vqQg03HV09JRtgfXvY3elYwpI9d5NWgjwdSBZK9mHdsesS5+cWf+1QNm8fAkN\nVcm490FLDp0zyO9zPlUUffygvCXJJ8+ZLLCmfaBZzDszkRd/Quy0B3DExb+OtZ+D\nWGSXnp7FTXFQLe6wuKIQ5gAGHPZZ1unyeMSCu7Vfa3gee/43gbD3VnTu/0JmmuTX\nvM/abNLoaIECQ5M0vhScJ3P6jtDudbnY8BOFu6Fap+imctJVvLDRW2+cLhufY6Xh\nnBmqXAjswIrxBVy7iJt+LS6XqhsebqcI5MRMS6tsH1kIeKJpEI37wQNy5ne3y8rx\nVA9OPCmhcooacs22Tyu+BkCw+GTflw2bO0OLqoqg5gh3pmD8PcPh2WtAiUjEgl4B\nvTA8/E+BHih06RKiTORqruVoX+rj9l+TEYOrT0pYtWRtXcymODnNoGvnXfvu2cXg\nIGe8d4TcMfDdQPqcAeG+UJ5C7eGWNKoEc8WDpppDcd0iMHLDvS4j0ywlNR6Hu459\ngiCqychWtv97It1k4FvDY4SVeg/SZfuPok4fJ0xPBC9RiX8p8yCzFzIQobn2TPzQ\n+8Hgj4z02mikFXG9as1yA3JGtmBGRvZUhWqWdzF9z15oG+7kCE0c1i3GxsW7qMNp\nS6Hkrahllaj2Xxi3mQ1C9hjyBwq0FgEksnxqVocHlFMdep5G6k75VFvs8pLgYSWj\nZqtkRea8YP/KETP4DrGgO0cy8PXgctAahbFczgLMy/1iIb3uaydPoY8jsvhPlLK2\nSTjySxshYdcGgbCdIZ7zcdY5WV4qfYl1WmIFzOiJSCjM95FhxfkaXStO7ID85nGP\nMeO9TjbxAb+Oj2E2rR/f27ewWaT6K/67fhIz+ZVscyHV8bGRFSqUpvtPFESKDMJm\njdJKuWQQgbVQRlo+lBd3GPR7bQW+U7NOR/iH0n5mFurhESo3EdhqVVzBcyFGu2Xe\nT0QT5fbCM7gJvlbBzpLB82oYjQFPp/usHa39K095cl5S5fggP7nBXbLorccs1uFh\nl1xtto3MlPe2xGLZKN6dIhWUU8V7L9qIrDtGOzK4OaiPGJALHVzKwsdz9wotuQyQ\nU7pHicY4LKTqkjBGgLal73IVZR2Sdw==\n=GFWU\n-----END PGP SIGNATURE-----",
        "payload": "tree c6b07eb0f1e253c83428af02038bd86a2eb239c3\nparent 673a0fe701a964df07c9f449e2ee8667e7583c6c\nauthor Vasil Dimov <vd@FreeBSD.org> 1620138297 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368775 +0100\n\nnet: introduce Sock::WaitMany()\n\nIt allows waiting concurrently on more than one socket. Being a\n`virtual` `Sock` method it can be overriden by tests.\n\nWill be used to replace `CConnman::SocketEvents()`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "673a0fe701a964df07c9f449e2ee8667e7583c6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/673a0fe701a964df07c9f449e2ee8667e7583c6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/673a0fe701a964df07c9f449e2ee8667e7583c6c"
      }
    ],
    "stats": {
      "total": 191,
      "additions": 146,
      "deletions": 45
    },
    "files": [
      {
        "sha": "cb6b438ae52bb47ea17a61af2a21c34e5bbf9821",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
        "patch": "@@ -207,6 +207,15 @@ bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event*\n     return true;\n }\n \n+bool FuzzedSock::WaitMany(std::chrono::milliseconds timeout, WaitData& what) const\n+{\n+    for (auto& [sock, events] : what) {\n+        (void)sock;\n+        events.occurred = m_fuzzed_data_provider.ConsumeBool() ? events.requested : 0;\n+    }\n+    return true;\n+}\n+\n bool FuzzedSock::IsConnected(std::string& errmsg) const\n {\n     if (m_fuzzed_data_provider.ConsumeBool()) {"
      },
      {
        "sha": "470e68c4803d1dcba587797471dbd5a44cfea32f",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
        "patch": "@@ -68,6 +68,8 @@ class FuzzedSock : public Sock\n \n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n \n+    bool WaitMany(std::chrono::milliseconds timeout, WaitData& what) const override;\n+\n     bool IsConnected(std::string& errmsg) const override;\n };\n "
      },
      {
        "sha": "00087696d4e0b5d3ad93f4c788dda3a03b281855",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
        "patch": "@@ -160,6 +160,15 @@ class StaticContentsSock : public Sock\n         return true;\n     }\n \n+    bool WaitMany(std::chrono::milliseconds timeout, WaitData& what) const override\n+    {\n+        for (auto& [sock, events] : what) {\n+            (void)sock;\n+            events.occurred = events.requested;\n+        }\n+        return true;\n+    }\n+\n private:\n     const std::string m_contents;\n     mutable size_t m_consumed;"
      },
      {
        "sha": "0ef254e8bd18c4c5e9db197349074e984f2dac46",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 45,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
        "patch": "@@ -107,73 +107,103 @@ int Sock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len)\n \n bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n-#ifdef USE_POLL\n-    pollfd fd;\n-    fd.fd = m_socket;\n-    fd.events = 0;\n-    if (requested & RECV) {\n-        fd.events |= POLLIN;\n-    }\n-    if (requested & SEND) {\n-        fd.events |= POLLOUT;\n-    }\n+    // We need a `shared_ptr` owning `this` for `WaitMany()`, but don't want\n+    // `this` to be destroyed when the `shared_ptr` goes out of scope at the\n+    // end of this function. Create it with a custom noop deleter.\n+    std::shared_ptr<const Sock> shared{this, [](const Sock*) {}};\n+\n+    WaitData what{std::make_pair(shared, WaitEvents{requested, 0})};\n \n-    if (poll(&fd, 1, count_milliseconds(timeout)) == SOCKET_ERROR) {\n+    if (!WaitMany(timeout, what)) {\n         return false;\n     }\n \n     if (occurred != nullptr) {\n-        *occurred = 0;\n-        if (fd.revents & POLLIN) {\n-            *occurred |= RECV;\n-        }\n-        if (fd.revents & POLLOUT) {\n-            *occurred |= SEND;\n+        *occurred = what.begin()->second.occurred;\n+    }\n+\n+    return true;\n+}\n+\n+bool Sock::WaitMany(std::chrono::milliseconds timeout, WaitData& what) const\n+{\n+#ifdef USE_POLL\n+    std::vector<pollfd> pfds;\n+    for (const auto& [sock, events] : what) {\n+        pfds.emplace_back();\n+        auto& pfd = pfds.back();\n+        pfd.fd = sock->m_socket;\n+        if (events.requested & RECV) {\n+            pfd.events |= POLLIN;\n         }\n-        if (fd.revents & (POLLERR | POLLHUP)) {\n-            *occurred |= ERR;\n+        if (events.requested & SEND) {\n+            pfd.events |= POLLOUT;\n         }\n     }\n \n-    return true;\n-#else\n-    if (!IsSelectableSocket(m_socket)) {\n+    if (poll(pfds.data(), pfds.size(), count_milliseconds(timeout)) == SOCKET_ERROR) {\n         return false;\n     }\n \n-    fd_set fdset_recv;\n-    fd_set fdset_send;\n-    fd_set fdset_err;\n-    FD_ZERO(&fdset_recv);\n-    FD_ZERO(&fdset_send);\n-    FD_ZERO(&fdset_err);\n-\n-    if (requested & RECV) {\n-        FD_SET(m_socket, &fdset_recv);\n+    assert(pfds.size() == what.size());\n+    size_t i{0};\n+    for (auto& [sock, events] : what) {\n+        assert(sock->m_socket == static_cast<SOCKET>(pfds[i].fd));\n+        events.occurred = 0;\n+        if (pfds[i].revents & POLLIN) {\n+            events.occurred |= RECV;\n+        }\n+        if (pfds[i].revents & POLLOUT) {\n+            events.occurred |= SEND;\n+        }\n+        if (pfds[i].revents & (POLLERR | POLLHUP)) {\n+            events.occurred |= ERR;\n+        }\n+        ++i;\n     }\n \n-    if (requested & SEND) {\n-        FD_SET(m_socket, &fdset_send);\n+    return true;\n+#else\n+    fd_set recv;\n+    fd_set send;\n+    fd_set err;\n+    FD_ZERO(&recv);\n+    FD_ZERO(&send);\n+    FD_ZERO(&err);\n+    SOCKET socket_max{0};\n+\n+    for (const auto& [sock, events] : what) {\n+        const auto& s = sock->m_socket;\n+        if (!IsSelectableSocket(s)) {\n+            return false;\n+        }\n+        if (events.requested & RECV) {\n+            FD_SET(s, &recv);\n+        }\n+        if (events.requested & SEND) {\n+            FD_SET(s, &send);\n+        }\n+        FD_SET(s, &err);\n+        socket_max = std::max(socket_max, s);\n     }\n \n-    FD_SET(m_socket, &fdset_err);\n-\n-    timeval timeout_struct = MillisToTimeval(timeout);\n+    timeval tv = MillisToTimeval(timeout);\n \n-    if (select(m_socket + 1, &fdset_recv, &fdset_send, &fdset_err, &timeout_struct) == SOCKET_ERROR) {\n+    if (select(socket_max + 1, &recv, &send, &err, &tv) == SOCKET_ERROR) {\n         return false;\n     }\n \n-    if (occurred != nullptr) {\n-        *occurred = 0;\n-        if (FD_ISSET(m_socket, &fdset_recv)) {\n-            *occurred |= RECV;\n+    for (auto& [sock, events] : what) {\n+        const auto& s = sock->m_socket;\n+        events.occurred = 0;\n+        if (FD_ISSET(s, &recv)) {\n+            events.occurred |= RECV;\n         }\n-        if (FD_ISSET(m_socket, &fdset_send)) {\n-            *occurred |= SEND;\n+        if (FD_ISSET(s, &send)) {\n+            events.occurred |= SEND;\n         }\n-        if (FD_ISSET(m_socket, &fdset_err)) {\n-            *occurred |= ERR;\n+        if (FD_ISSET(s, &err)) {\n+            events.occurred |= ERR;\n         }\n     }\n "
      },
      {
        "sha": "0d00ab872fb23faa1c6eb52bacb78042ae882d33",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14f7e5af9c6a641a50b94fb47629a344b8e3bfec/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
        "patch": "@@ -12,6 +12,7 @@\n #include <chrono>\n #include <memory>\n #include <string>\n+#include <unordered_map>\n \n /**\n  * Maximum time to wait for I/O readiness.\n@@ -147,6 +148,56 @@ class Sock\n                                     Event requested,\n                                     Event* occurred = nullptr) const;\n \n+    /**\n+     * Auxiliary requested/occurred events to wait for in `WaitMany()`.\n+     */\n+    struct WaitEvents {\n+        Event requested;\n+        Event occurred;\n+    };\n+\n+    struct Hash {\n+        size_t operator()(const std::shared_ptr<const Sock>& s) const\n+        {\n+            return s ? s->m_socket : std::numeric_limits<SOCKET>::max();\n+        }\n+    };\n+\n+    struct Equal {\n+        bool operator()(const std::shared_ptr<const Sock>& lhs,\n+                        const std::shared_ptr<const Sock>& rhs) const\n+        {\n+            if (lhs && rhs) {\n+                return lhs->m_socket == rhs->m_socket;\n+            }\n+            if (!lhs && !rhs) {\n+                return true;\n+            }\n+            return false;\n+        }\n+    };\n+\n+    /**\n+     * On which socket to wait for what events in `WaitMany()`.\n+     * The `shared_ptr` is copied into the map to ensure that the `Sock` object\n+     * is not destroyed and the underlying socket closed. If this happens\n+     * shortly before or after we call `poll(2)` and a new socket gets created\n+     * under the same file descriptor number then the report from `WaitMany()`\n+     * will be bogus.\n+     */\n+    using WaitData = std::unordered_map<std::shared_ptr<const Sock>, WaitEvents, Hash, Equal>;\n+\n+    /**\n+     * Same as `Wait()`, but wait on many sockets within the same timeout.\n+     * @param[in] timeout Wait this much for at least one of the requested events to occur.\n+     * @param[in,out] what Wait for the requested events on these sockets and set `occurred`\n+     * to the events that actually occur.\n+     * A timeout is indicated by return value of `true` and all `what[].occurred`\n+     * being set to 0.\n+     * @return true on success and false otherwise\n+     */\n+    [[nodiscard]] virtual bool WaitMany(std::chrono::milliseconds timeout, WaitData& what) const;\n+\n     /* Higher level, convenience, methods. These may throw. */\n \n     /**"
      }
    ]
  },
  {
    "sha": "0a6920fda84e32a49c4512ee2bb000c928053b4d",
    "node_id": "C_kwDOABII59oAKDBhNjkyMGZkYTg0ZTMyYTQ5YzQ1MTJlZTJiYjAwMGM5MjgwNTNiNGQ",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-04T16:37:19Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:15Z"
      },
      "message": "net: use Sock::WaitMany() instead of CConnman::SocketEvents()\n\nRename `GenerateSelectSet()` to `GenerateWaitSockets()` and adapt it to\ngenerate a wait data suitable for `Sock::WaitMany()`. Then call it from\n`CConnman::SocketHandler()` and feed the generated data to\n`Sock::WaitMany()`.\n\nThis way `CConnman::SocketHandler()` can be unit tested because\n`Sock::WaitMany()` is mockable, so the usage of real sockets can be\navoided.\n\nResolves https://github.com/bitcoin/bitcoin/issues/21744",
      "tree": {
        "sha": "627ee237e8cbaa83d629d794ee296af9431d80c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/627ee237e8cbaa83d629d794ee296af9431d80c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a6920fda84e32a49c4512ee2bb000c928053b4d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhggACgkQVN8G9ktV\ny7+0qiAAjpH4TVhtgbehOV1xOI/Gm1DCaJWbzl50QdJDQhIs9B66hqQ8Rr9io72a\nT3JqyFN9MGOGabVtxGnDffSZI+d5pr4NvxSe0cbknCOVuxGEN8GTl/zFVHH5VeqR\nrzyDN+NIHZ/GaFQ3cNzQw+PPSPCUG9Mw3uFyqXxycRf73jZg+FEeZsejdWJ5lUWU\nObbODhyuWAhSm7H99oxv8OW8dXcMkqL0VWbGXRe7LctcDnT56BtVPTBXFWzz/g5Q\nFclwri7yS36BJdLcmHHCwOfnldPQv1GCu/4g6vZH5AijEpuS/oE6MGCKLSS3yRAG\nfxd/JnGb1CjP7498elV+7S/dB8lszctaB/1kyBVIBWrDuESnh8fCAf4f9YdzGecQ\nnl4L4jfL2AUKbui/WDnxCL1UyWFR+jruzM7mki7QwHyRD9Wtp4/bKrJrE3PgK2vr\n9JU2myC+QOhvepzQOnArPq+uMj4tunMMPot/E0S7nn0/uMir1IvEbD6CyNPO5rYS\n2jdW+taHmszoVNyn6m2ztsHhpA0Ptej2VjFY6DzKXfxqYQTS4WkuJT6tOGW7MD+3\nal6DB7AK0j1p62FYu+b6/bEd/M2Ro6RciZLn+vb4Nd7I9ZjXy9mpR9KOazjngr/u\n2uCmML1ty2jI88eHBiT7Ml8BPX/xXfS0tZpD/8MygNQ9+Ge985uxdGqwVlRItbWb\nZzqPfQZJcr2wHcKdgdf0srbMBQtEfVCCycggHBiphDkoNFCX3S1ALBaIq69OvGzC\ngWwbdSAOxfsrV4pRyhjaDZVrc1BhnEQa1iEI3OCBpzZtYK7rcTYjbzWt3D40k+bV\nxuuK/xeqocrFTeN7frhL6dkT4tKFtYNFNx5n3dc8p7MrtakOU4hUKDiA5V/yiMNg\n6tdjmE2NIE6XuMbkkeVVZlydrZjCJHZ/0k0mbnHu3HRoVCsMQPH73hKsRywJR35s\n6eIIVLc7CwQy8bSyGfxNeOjACatYQxs2Gz3Cka+z69gMQIchDO943pChp2FNv4hk\nApzhA1m1Iw4JTYm9LgAqFC70kg/xYzPYY6cVvft5SO82Fe45dybNXQW9M6s4dejD\n2Mbyax7JaC78hmaUmojBV8D6RLZYUTS5vpFwQvPCo/Bkgj2fU2aSjWS7oP9RZj+O\nqWOrXuUly1u3t+r+fC4J43rTYQDChvFrrC86RSdvT15DSI+S9dUBNX8EUfEUMT15\nzWGCeRn9hJnzTivhGfKSACyOSqQBmRuDtc4ULAf9/xjse/kP6egoV6V9JdTpbb/M\ntRrGBjMdEOj8n3x93cU/aaR2ZStO8cm6QiqqU+YgBvroJHevuP02w1zcv0mrlQDj\nA4EZ1kHJOhlh1gF98CKQU8QlGRu9IA==\n=YFlT\n-----END PGP SIGNATURE-----",
        "payload": "tree 627ee237e8cbaa83d629d794ee296af9431d80c1\nparent 14f7e5af9c6a641a50b94fb47629a344b8e3bfec\nauthor Vasil Dimov <vd@FreeBSD.org> 1620146239 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368775 +0100\n\nnet: use Sock::WaitMany() instead of CConnman::SocketEvents()\n\nRename `GenerateSelectSet()` to `GenerateWaitSockets()` and adapt it to\ngenerate a wait data suitable for `Sock::WaitMany()`. Then call it from\n`CConnman::SocketHandler()` and feed the generated data to\n`Sock::WaitMany()`.\n\nThis way `CConnman::SocketHandler()` can be unit tested because\n`Sock::WaitMany()` is mockable, so the usage of real sockets can be\navoided.\n\nResolves https://github.com/bitcoin/bitcoin/issues/21744\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a6920fda84e32a49c4512ee2bb000c928053b4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6920fda84e32a49c4512ee2bb000c928053b4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a6920fda84e32a49c4512ee2bb000c928053b4d/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f7e5af9c6a641a50b94fb47629a344b8e3bfec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14f7e5af9c6a641a50b94fb47629a344b8e3bfec"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 32,
      "deletions": 182
    },
    "files": [
      {
        "sha": "bfe6ccac1a25af5120ed688d2e044c7bc7bc0056",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 150,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a6920fda84e32a49c4512ee2bb000c928053b4d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a6920fda84e32a49c4512ee2bb000c928053b4d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0a6920fda84e32a49c4512ee2bb000c928053b4d",
        "patch": "@@ -1348,13 +1348,12 @@ bool CConnman::InactivityCheck(const CNode& node) const\n     return false;\n }\n \n-bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n-                                 std::set<SOCKET>& recv_set,\n-                                 std::set<SOCKET>& send_set,\n-                                 std::set<SOCKET>& error_set)\n+Sock::WaitData CConnman::GenerateWaitSockets(const std::vector<CNode*>& nodes)\n {\n+    Sock::WaitData what;\n+\n     for (const ListenSocket& hListenSocket : vhListenSocket) {\n-        recv_set.insert(hListenSocket.sock->Get());\n+        what.emplace(hListenSocket.sock, Sock::WaitEvents{Sock::RECV, 0});\n     }\n \n     for (CNode* pnode : nodes) {\n@@ -1381,170 +1380,46 @@ bool CConnman::GenerateSelectSet(const std::vector<CNode*>& nodes,\n             continue;\n         }\n \n-        error_set.insert(pnode->m_sock->Get());\n+        Sock::Event requested{0};\n         if (select_send) {\n-            send_set.insert(pnode->m_sock->Get());\n-            continue;\n+            requested = Sock::SEND;\n+        } else if (select_recv) {\n+            requested = Sock::RECV;\n         }\n-        if (select_recv) {\n-            recv_set.insert(pnode->m_sock->Get());\n-        }\n-    }\n-\n-    return !recv_set.empty() || !send_set.empty() || !error_set.empty();\n-}\n-\n-#ifdef USE_POLL\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    std::unordered_map<SOCKET, struct pollfd> pollfds;\n-    for (SOCKET socket_id : recv_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLIN;\n-    }\n-\n-    for (SOCKET socket_id : send_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        pollfds[socket_id].events |= POLLOUT;\n-    }\n \n-    for (SOCKET socket_id : error_select_set) {\n-        pollfds[socket_id].fd = socket_id;\n-        // These flags are ignored, but we set them for clarity\n-        pollfds[socket_id].events |= POLLERR|POLLHUP;\n+        what.emplace(pnode->m_sock, Sock::WaitEvents{requested, 0});\n     }\n \n-    std::vector<struct pollfd> vpollfds;\n-    vpollfds.reserve(pollfds.size());\n-    for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n-    }\n-\n-    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n-\n-    if (interruptNet) return;\n-\n-    for (struct pollfd pollfd_entry : vpollfds) {\n-        if (pollfd_entry.revents & POLLIN)            recv_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & POLLOUT)           send_set.insert(pollfd_entry.fd);\n-        if (pollfd_entry.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd_entry.fd);\n-    }\n+    return what;\n }\n-#else\n-void CConnman::SocketEvents(const std::vector<CNode*>& nodes,\n-                            std::set<SOCKET>& recv_set,\n-                            std::set<SOCKET>& send_set,\n-                            std::set<SOCKET>& error_set)\n-{\n-    std::set<SOCKET> recv_select_set, send_select_set, error_select_set;\n-    if (!GenerateSelectSet(nodes, recv_select_set, send_select_set, error_select_set)) {\n-        interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS));\n-        return;\n-    }\n-\n-    //\n-    // Find which sockets have data to receive\n-    //\n-    struct timeval timeout;\n-    timeout.tv_sec  = 0;\n-    timeout.tv_usec = SELECT_TIMEOUT_MILLISECONDS * 1000; // frequency to poll pnode->vSend\n-\n-    fd_set fdsetRecv;\n-    fd_set fdsetSend;\n-    fd_set fdsetError;\n-    FD_ZERO(&fdsetRecv);\n-    FD_ZERO(&fdsetSend);\n-    FD_ZERO(&fdsetError);\n-    SOCKET hSocketMax = 0;\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        FD_SET(hSocket, &fdsetRecv);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        FD_SET(hSocket, &fdsetSend);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        FD_SET(hSocket, &fdsetError);\n-        hSocketMax = std::max(hSocketMax, hSocket);\n-    }\n-\n-    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-\n-    if (interruptNet)\n-        return;\n-\n-    if (nSelect == SOCKET_ERROR)\n-    {\n-        int nErr = WSAGetLastError();\n-        LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-        for (unsigned int i = 0; i <= hSocketMax; i++)\n-            FD_SET(i, &fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        if (!interruptNet.sleep_for(std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS)))\n-            return;\n-    }\n-\n-    for (SOCKET hSocket : recv_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetRecv)) {\n-            recv_set.insert(hSocket);\n-        }\n-    }\n-\n-    for (SOCKET hSocket : send_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetSend)) {\n-            send_set.insert(hSocket);\n-        }\n-    }\n-\n-    for (SOCKET hSocket : error_select_set) {\n-        if (FD_ISSET(hSocket, &fdsetError)) {\n-            error_set.insert(hSocket);\n-        }\n-    }\n-}\n-#endif\n \n void CConnman::SocketHandler()\n {\n-    std::set<SOCKET> recv_set;\n-    std::set<SOCKET> send_set;\n-    std::set<SOCKET> error_set;\n+    Sock::WaitData what;\n \n     {\n         const NodesSnapshot snap{*this, /*shuffle=*/false};\n \n+        const auto timeout = std::chrono::milliseconds(SELECT_TIMEOUT_MILLISECONDS);\n+\n         // Check for the readiness of the already connected sockets and the\n         // listening sockets in one call (\"readiness\" as in poll(2) or\n         // select(2)). If none are ready, wait for a short while and return\n         // empty sets.\n-        SocketEvents(snap.Nodes(), recv_set, send_set, error_set);\n+        what = GenerateWaitSockets(snap.Nodes());\n+        if (what.empty() || !what.begin()->first->WaitMany(timeout, what)) {\n+            interruptNet.sleep_for(timeout);\n+        }\n \n         // Service (send/receive) each of the already connected nodes.\n-        SocketHandlerConnected(snap.Nodes(), recv_set, send_set, error_set);\n+        SocketHandlerConnected(snap.Nodes(), what);\n     }\n \n     // Accept new connections from listening sockets.\n-    SocketHandlerListening(recv_set);\n+    SocketHandlerListening(what);\n }\n \n-void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                      const std::set<SOCKET>& recv_set,\n-                                      const std::set<SOCKET>& send_set,\n-                                      const std::set<SOCKET>& error_set)\n+void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what)\n {\n     for (CNode* pnode : nodes) {\n         if (interruptNet)\n@@ -1561,9 +1436,9 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n             if (!pnode->m_sock) {\n                 continue;\n             }\n-            recvSet = recv_set.count(pnode->m_sock->Get()) > 0;\n-            sendSet = send_set.count(pnode->m_sock->Get()) > 0;\n-            errorSet = error_set.count(pnode->m_sock->Get()) > 0;\n+            recvSet = what[pnode->m_sock].occurred & Sock::RECV;\n+            sendSet = what[pnode->m_sock].occurred & Sock::SEND;\n+            errorSet = what[pnode->m_sock].occurred & Sock::ERR;\n         }\n         if (recvSet || errorSet)\n         {\n@@ -1632,13 +1507,13 @@ void CConnman::SocketHandlerConnected(const std::vector<CNode*>& nodes,\n     }\n }\n \n-void CConnman::SocketHandlerListening(const std::set<SOCKET>& recv_set)\n+void CConnman::SocketHandlerListening(Sock::WaitData& what)\n {\n     for (const ListenSocket& listen_socket : vhListenSocket) {\n         if (interruptNet) {\n             return;\n         }\n-        if (recv_set.count(listen_socket.sock->Get()) > 0) {\n+        if (what[listen_socket.sock].occurred & Sock::RECV) {\n             AcceptConnection(listen_socket);\n         }\n     }"
      },
      {
        "sha": "0e005cefc421a887b6296dc10e3804e5f7b1a694",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 32,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a6920fda84e32a49c4512ee2bb000c928053b4d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a6920fda84e32a49c4512ee2bb000c928053b4d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0a6920fda84e32a49c4512ee2bb000c928053b4d",
        "patch": "@@ -998,28 +998,9 @@ class CConnman\n     /**\n      * Generate a collection of sockets to check for IO readiness.\n      * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets to check for read readiness.\n-     * @param[out] send_set Sockets to check for write readiness.\n-     * @param[out] error_set Sockets to check for errors.\n-     * @return true if at least one socket is to be checked (the returned set is not empty)\n+     * @return sockets to check for readiness\n      */\n-    bool GenerateSelectSet(const std::vector<CNode*>& nodes,\n-                           std::set<SOCKET>& recv_set,\n-                           std::set<SOCKET>& send_set,\n-                           std::set<SOCKET>& error_set);\n-\n-    /**\n-     * Check which sockets are ready for IO.\n-     * @param[in] nodes Select from these nodes' sockets.\n-     * @param[out] recv_set Sockets which are ready for read.\n-     * @param[out] send_set Sockets which are ready for write.\n-     * @param[out] error_set Sockets which have errors.\n-     * This calls `GenerateSelectSet()` to gather a list of sockets to check.\n-     */\n-    void SocketEvents(const std::vector<CNode*>& nodes,\n-                      std::set<SOCKET>& recv_set,\n-                      std::set<SOCKET>& send_set,\n-                      std::set<SOCKET>& error_set);\n+    Sock::WaitData GenerateWaitSockets(const std::vector<CNode*>& nodes);\n \n     /**\n      * Check connected and listening sockets for IO readiness and process them accordingly.\n@@ -1028,22 +1009,16 @@ class CConnman\n \n     /**\n      * Do the read/write for connected sockets that are ready for IO.\n-     * @param[in] nodes Nodes to process. The socket of each node is checked against\n-     * `recv_set`, `send_set` and `error_set`.\n-     * @param[in] recv_set Sockets that are ready for read.\n-     * @param[in] send_set Sockets that are ready for send.\n-     * @param[in] error_set Sockets that have an exceptional condition (error).\n+     * @param[in] nodes Nodes to process. The socket of each node is checked against `what`.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerConnected(const std::vector<CNode*>& nodes,\n-                                const std::set<SOCKET>& recv_set,\n-                                const std::set<SOCKET>& send_set,\n-                                const std::set<SOCKET>& error_set);\n+    void SocketHandlerConnected(const std::vector<CNode*>& nodes, Sock::WaitData& what);\n \n     /**\n      * Accept incoming connections, one from each read-ready listening socket.\n-     * @param[in] recv_set Sockets that are ready for read.\n+     * @param[in] what Sockets that are ready for IO.\n      */\n-    void SocketHandlerListening(const std::set<SOCKET>& recv_set);\n+    void SocketHandlerListening(Sock::WaitData& what);\n \n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();"
      }
    ]
  },
  {
    "sha": "88ecd89bac09d64b085f65327b2e7cb6225dcda3",
    "node_id": "C_kwDOABII59oAKDg4ZWNkODliYWMwOWQ2NGIwODVmNjUzMjdiMmU3Y2I2MjI1ZGNkYTM",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T10:31:49Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:16Z"
      },
      "message": "net: add new method Sock::SetSockOpt() that wraps setsockopt()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "dbf1867f1d4e024915149888aad3dd82f16c536f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbf1867f1d4e024915149888aad3dd82f16c536f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88ecd89bac09d64b085f65327b2e7cb6225dcda3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgkACgkQVN8G9ktV\ny79jgCAAgVi2MvzFTsOrOf8vsXhvMoWHfrJiXaUlOcg0b4fEoxxbB9vgy1OBrslw\nJWgpndYxzU7vWw3IVtbBYld0hlL8mW7/nLBbpGHJ8JT+hnqHtBrfHX1E6u93Hssr\nWqvY+R7+hIGUJaONzQCu01NpjiKo8ar/GUgowIcSK3FrNaVx6nViby6e0P/mjr2v\nHTQCBp9tq0HKTw/PSoMg2FRma0VH2L3Yo+73JU4vlKRCgxrzFYUon+4QeAi+I80P\nJqzWVuDketydiM/f8GcOj1ltU3bE4ZZ9OklT/8c4UZnQ7DNU8Gi/Vkm7r0pASubA\nrzifIxTa7hihg3Pa8X6umm53xwr1EJ5IaNYpxSYxZbp3niWKxahtsdnm1SVAZGsG\nSwXWAOjK4dVc2Qy6cfVo+D4eOdSSBKd+vSCNT5GQF1l9AY8WBWNBfXOwLWge1xfG\n1mV6gWaMoLTneDWSuzkXh449j7/0pdc06eNAmBIl1LAzatDlefDjCQ6JSsri6ETG\nZjHXBhxdDuN+iUIIcmwd/cfZ1Rd4pt8jK24+ikY0WNgfpHLe3nhX/UBJa+tMa0kQ\nfpJ/ppC9KbdpWNY9GY8FxvxxYcl00iDkY9hA8TPvQ0ZUzJ0ZKkTuv/+ccN91sall\nedMdXPnekddSkdm1O7e2UvW7rJ0rLotgWhFMqO577iAXUNNq9MCxw7Ar7rwnSpkR\n0VqSVNJSwA4N3TmMFF1RRCopcABaN9faXzBAMeWPaBjkf6ShakPB+YKC+4aYWysu\nl/J4BhjThpYIRUBMNoNizuosKoUTuayOU96LfGU9Mv4Xrifz4imqGTg09lNGk1yW\n3/L6mfIlXhBavNugOEweuwOJOULeKSv0Og1QzMfFoaM80igBDEX8Z7qaiGO4lek0\n42OJkj486XtUDJL/TOVPKSGc3xc/zS167n7DYoLo8dXnK/x+hLHrm3MT2my9Cwjq\n/4zAs9DCAeA55a7W7/Vha4t415SCUH7nCo6Hoiht7GGxa4QQeB2MISjk0YscMbY4\nHuGPR/HQTXe9zNGHLViU8FuHCCfxAHGawhNJnXvakWoHwCwZcegzr2m+hvHT3DNA\nlVOpohBfCfGzBBreQY9MHDsLgl/fHhHBDbD9UUktrqOwAs/AHd/vjXQOhf4Af2EU\nblxw6w5b/dV2IKPOZ8IFBn5z5WKvg/wwDMjsWTPzUJ/zHpoYsxAkEcsVyS81r1j3\nJBR4h3g32JTaRmWbv/FuxFa5AREzUoYwo2a2V5TJpGjfBkWaeKAJHLweJFOLv08X\njwSVncX313gHKC9D6vwu5SYs+YwYuXVi3oAH0VPbcOzqD12cqqQnrEp1NdeJ2OXk\nkEKZ10buflHNd5fBVApKsPeU7CXLrQ==\n=kcZb\n-----END PGP SIGNATURE-----",
        "payload": "tree dbf1867f1d4e024915149888aad3dd82f16c536f\nparent 0a6920fda84e32a49c4512ee2bb000c928053b4d\nauthor Vasil Dimov <vd@FreeBSD.org> 1618309909 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368776 +0100\n\nnet: add new method Sock::SetSockOpt() that wraps setsockopt()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88ecd89bac09d64b085f65327b2e7cb6225dcda3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88ecd89bac09d64b085f65327b2e7cb6225dcda3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88ecd89bac09d64b085f65327b2e7cb6225dcda3/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a6920fda84e32a49c4512ee2bb000c928053b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a6920fda84e32a49c4512ee2bb000c928053b4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6920fda84e32a49c4512ee2bb000c928053b4d"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bd365c7e838b8b0f0addaa1d08d3699f65f06c3f",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=88ecd89bac09d64b085f65327b2e7cb6225dcda3",
        "patch": "@@ -190,6 +190,19 @@ int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* op\n     return 0;\n }\n \n+int FuzzedSock::SetSockOpt(int, int, const void*, socklen_t) const\n+{\n+    constexpr std::array setsockopt_errnos{\n+        ENOMEM,\n+        ENOBUFS,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, setsockopt_errnos);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n     constexpr std::array wait_errnos{"
      },
      {
        "sha": "412fd3e81116db185f127610d48aa9c00fa15818",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=88ecd89bac09d64b085f65327b2e7cb6225dcda3",
        "patch": "@@ -66,6 +66,8 @@ class FuzzedSock : public Sock\n \n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n \n+    int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const override;\n+\n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n \n     bool WaitMany(std::chrono::milliseconds timeout, WaitData& what) const override;"
      },
      {
        "sha": "3b428538e9e557ab5d2c207efeff2c929b7cb614",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=88ecd89bac09d64b085f65327b2e7cb6225dcda3",
        "patch": "@@ -150,6 +150,8 @@ class StaticContentsSock : public Sock\n         return 0;\n     }\n \n+    int SetSockOpt(int, int, const void*, socklen_t) const override { return 0; }\n+\n     bool Wait(std::chrono::milliseconds timeout,\n               Event requested,\n               Event* occurred = nullptr) const override"
      },
      {
        "sha": "030b79acc9f66f7eb2687a0795708ae2fdb00259",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=88ecd89bac09d64b085f65327b2e7cb6225dcda3",
        "patch": "@@ -105,6 +105,11 @@ int Sock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len)\n     return getsockopt(m_socket, level, opt_name, static_cast<char*>(opt_val), opt_len);\n }\n \n+int Sock::SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const\n+{\n+    return setsockopt(m_socket, level, opt_name, static_cast<const char*>(opt_val), opt_len);\n+}\n+\n bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n     // We need a `shared_ptr` owning `this` for `WaitMany()`, but don't want"
      },
      {
        "sha": "94d642dabd3e38d147c3150036eead2163a58524",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88ecd89bac09d64b085f65327b2e7cb6225dcda3/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=88ecd89bac09d64b085f65327b2e7cb6225dcda3",
        "patch": "@@ -116,6 +116,16 @@ class Sock\n                                          void* opt_val,\n                                          socklen_t* opt_len) const;\n \n+    /**\n+     * setsockopt(2) wrapper. Equivalent to\n+     * `setsockopt(this->Get(), level, opt_name, opt_val, opt_len)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    [[nodiscard]] virtual int SetSockOpt(int level,\n+                                         int opt_name,\n+                                         const void* opt_val,\n+                                         socklen_t opt_len) const;\n+\n     using Event = uint8_t;\n \n     /**"
      }
    ]
  },
  {
    "sha": "0dc36d8260f82253ceb5d6927d92874bf46a8f71",
    "node_id": "C_kwDOABII59oAKDBkYzM2ZDgyNjBmODIyNTNjZWI1ZDY5MjdkOTI4NzRiZjQ2YThmNzE",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T11:28:10Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:17Z"
      },
      "message": "net: use Sock::SetSockOpt() instead of setsockopt()",
      "tree": {
        "sha": "24a9bedef761bccf57053de5423a54c71116dddf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24a9bedef761bccf57053de5423a54c71116dddf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dc36d8260f82253ceb5d6927d92874bf46a8f71",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgkACgkQVN8G9ktV\ny78fkB//blsgXrxpLDok+hpYZ+7jBHU9dCrOkx7ii37vCfjXY2VLzLTtrBJyTh8P\nsD4GGWUOfxxsRNuDA/N/DnGxeakL2ShbGcIrNE37GX0Jtpt5TL0LmZiGwZUpX9eL\noiy2lJEn72te5RJhRiE5//AR0oqdmB1hvIXInOszFx/dDaZBaREnyPNtV4utksg4\nX2bGwQCWyIsQUneJXN+0owjros4yol2dLyPKKULMykIWxbGTMaGYhGID3tPTzaGa\nA5UZgWpvDos0SMQwgUt8wgs8VFJQC2/tRKZFh0N/qYQRDLovcRBYzp0p1fnkCF6k\nJ1vgi1xRgkwMKF8PkUR/ksq0xmRwSYhtrwhHBukR3V6wA4XHZZqqIxBg23c7zmXD\nmcwdw2xEmz92mRxrgkYD0c84bcuDIQNYAclCAIflKPvG54YyZKFWEKLvZKIZGwjJ\nM7aWYWHrs/GzDFR2npSlC8/gY7zdAwQsagkiOoHJTy4A6YJyOElxsGdG4WOucdzi\noUpPxKohkwqaWeGuKaRP80eOG/dJBVEcy0Q6xFu8XzIBv6XahLLFwLFKEk750ENy\n6+w6znyWGoyuEl/uk2dlsI4qWW/VEfM9msh47DfO5JPZBuYJvpkxROn10krGbwuh\npIDCJuSd9c15tovnmVaPCrgrarEJewFAmz4YFtgZ6EcPvfnQlW6t5hs/XarEoTji\nuvErQO6VUc0iz2yrmYjzk1CRIzdwxpmbsGeUnO4DtVScxe3tHwCCd2rMUrQnAUTt\nXkrz0U9EjrwV+Qe9QK/HSLR8ewFZdwlmJ5G95lbd8lgB36rCLFti1zUSzFkPWw1U\ncG4j+BIUmqsiYjkjPPexoqh0fAiWw+VtvdlLQSKSw3d0kWxJHwSr2+vpCWnZtqHs\nsLIPCp3WcxaZGXlKQDFdJAHdesYVyH5UX9QclQeEghrKsCTEIRd7cWmDkddv8e2g\nt3iuJRiTQ6m0ky5r4hyfg3iziN/b4GYUSJD+caiNIObxNTleaadldMNv+WoxXMMB\nHw+dM+zbMP78+lcDo9erPJ2kAZkmgDX7I+dUOYBn3BYzngBHPJv6zX8rtYtrZMJ2\nEEO3zGv5Wec0HkRlTuQLN9wtbIQ3b7ZG4LTCLL3ylrxE9mrLQudkF1owN6QdZ7Iu\ncRQQjdL4Q6znpIh7gcfMN2VBp+rPNcshxyjxEYKJHRulPDk7GjZDFCafw07UltxB\nEo5w8XoIDsysRljg1mlpipnbFytUmo+7WgRu4sp8JGwSSUIG1ss4Y5UYLQJL9ias\nVXjDIvh/51mOihVycgfo/fvXkWAoMIHpd/5Ak63ijNyg0hEaDRX7uNm18ca9bBxF\nq9Bh2dro08r9B3gUN07pSlVEOzk9qQ==\n=OCnj\n-----END PGP SIGNATURE-----",
        "payload": "tree 24a9bedef761bccf57053de5423a54c71116dddf\nparent 88ecd89bac09d64b085f65327b2e7cb6225dcda3\nauthor Vasil Dimov <vd@FreeBSD.org> 1618313290 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368777 +0100\n\nnet: use Sock::SetSockOpt() instead of setsockopt()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dc36d8260f82253ceb5d6927d92874bf46a8f71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dc36d8260f82253ceb5d6927d92874bf46a8f71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dc36d8260f82253ceb5d6927d92874bf46a8f71/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88ecd89bac09d64b085f65327b2e7cb6225dcda3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88ecd89bac09d64b085f65327b2e7cb6225dcda3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88ecd89bac09d64b085f65327b2e7cb6225dcda3"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 28,
      "deletions": 10
    },
    "files": [
      {
        "sha": "de3d88bdbda801858100c2b4073d9387baaa611f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 3,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dc36d8260f82253ceb5d6927d92874bf46a8f71/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dc36d8260f82253ceb5d6927d92874bf46a8f71/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0dc36d8260f82253ceb5d6927d92874bf46a8f71",
        "patch": "@@ -2230,17 +2230,32 @@ bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,\n \n     // Allow binding if the port is still in TIME_WAIT state after\n     // the program was closed and restarted.\n-    setsockopt(sock->Get(), SOL_SOCKET, SO_REUSEADDR, (sockopt_arg_type)&nOne, sizeof(int));\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, (sockopt_arg_type)&nOne, sizeof(int)) == SOCKET_ERROR) {\n+        strError =\n+            strprintf(Untranslated(\"Error setting SO_REUSEADDR on socket: %s, continuing anyway\"),\n+                      NetworkErrorString(WSAGetLastError()));\n+        LogPrintf(\"%s\\n\", strError.original);\n+    }\n \n     // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n     // and enable it by default or not. Try to enable it, if possible.\n     if (addrBind.IsIPv6()) {\n #ifdef IPV6_V6ONLY\n-        setsockopt(sock->Get(), IPPROTO_IPV6, IPV6_V6ONLY, (sockopt_arg_type)&nOne, sizeof(int));\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, (sockopt_arg_type)&nOne, sizeof(int)) == SOCKET_ERROR) {\n+            strError = strprintf(\n+                Untranslated(\"Error setting IPV6_V6ONLY on socket: %s, continuing anyway\"),\n+                NetworkErrorString(WSAGetLastError()));\n+            LogPrintf(\"%s\\n\", strError.original);\n+        }\n #endif\n #ifdef WIN32\n         int nProtLevel = PROTECTION_LEVEL_UNRESTRICTED;\n-        setsockopt(sock->Get(), IPPROTO_IPV6, IPV6_PROTECTION_LEVEL, (const char*)&nProtLevel, sizeof(int));\n+        if (sock->SetSockOpt(IPPROTO_IPV6, IPV6_PROTECTION_LEVEL, (const char*)&nProtLevel, sizeof(int)) == SOCKET_ERROR) {\n+            strError = strprintf(\n+                Untranslated(\"Error setting IPV6_PROTECTION_LEVEL on socket: %s, continuing anyway\"),\n+                NetworkErrorString(WSAGetLastError()));\n+            LogPrintf(\"%s\\n\", strError.original);\n+        }\n #endif\n     }\n "
      },
      {
        "sha": "7fc0e74eedf3a1b7b54cdd5c833612751f147ddd",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dc36d8260f82253ceb5d6927d92874bf46a8f71/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dc36d8260f82253ceb5d6927d92874bf46a8f71/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=0dc36d8260f82253ceb5d6927d92874bf46a8f71",
        "patch": "@@ -499,10 +499,11 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n         return nullptr;\n     }\n \n+    auto sock = std::make_unique<Sock>(hSocket);\n+\n     // Ensure that waiting for I/O on this socket won't result in undefined\n     // behavior.\n-    if (!IsSelectableSocket(hSocket)) {\n-        CloseSocket(hSocket);\n+    if (!IsSelectableSocket(sock->Get())) {\n         LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n         return nullptr;\n     }\n@@ -511,19 +512,21 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n     int set = 1;\n     // Set the no-sigpipe option on the socket for BSD systems, other UNIXes\n     // should use the MSG_NOSIGNAL flag for every send.\n-    setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n+    if (sock->SetSockOpt(SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int)) == SOCKET_ERROR) {\n+        LogPrintf(\"Error setting SO_NOSIGPIPE on socket: %s, continuing anyway\\n\",\n+                  NetworkErrorString(WSAGetLastError()));\n+    }\n #endif\n \n     // Set the no-delay option (disable Nagle's algorithm) on the TCP socket.\n-    SetSocketNoDelay(hSocket);\n+    SetSocketNoDelay(sock->Get());\n \n     // Set the non-blocking option on the socket.\n-    if (!SetSocketNonBlocking(hSocket, true)) {\n-        CloseSocket(hSocket);\n+    if (!SetSocketNonBlocking(sock->Get(), true)) {\n         LogPrintf(\"Error setting socket to non-blocking: %s\\n\", NetworkErrorString(WSAGetLastError()));\n         return nullptr;\n     }\n-    return std::make_unique<Sock>(hSocket);\n+    return sock;\n }\n \n std::function<std::unique_ptr<Sock>(const CService&)> CreateSock = CreateSockTCP;"
      }
    ]
  },
  {
    "sha": "1988f6f7cbef197a777839a66aad0d60d551d505",
    "node_id": "C_kwDOABII59oAKDE5ODhmNmY3Y2JlZjE5N2E3Nzc4MzlhNjZhYWQwZDYwZDU1MWQ1MDU",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T12:01:44Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:18Z"
      },
      "message": "net: convert standalone SetSocketNoDelay() to Sock::SetNoDelay()\n\nThis makes the callers mockable.",
      "tree": {
        "sha": "5b95881d7233a6f026391e01771a0adca712d184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b95881d7233a6f026391e01771a0adca712d184"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1988f6f7cbef197a777839a66aad0d60d551d505",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgoACgkQVN8G9ktV\ny78x2h//V4oDMsKY5mpTGJkJfyiv6v0i2qP450cPLnsqsCz8BAOCWPg5iIwFOunL\nPv5AvfiA7QZPhZEugqr67/tbRmMHkUtV/qXDfURamIqRYCTmY6Pll1L6nt2hZc2J\nSuzi23HGBk5TcMkzw8ZPURR78QSQuwEmrYLKnj8EPsFrnk2EWN87H3z90Hem+In+\nGcmhMcyPRWibLccfSBAZFvYbj/qUyotPPw72yxDO1dH1dX0uKStueyvUAxPlJGlf\n3+5LVqfP03jpH02bh/ydW9+IxdkX/J7crXlew3w7fYOGO5dqJMVpudbmaVxYY5Yu\nIGMFKzzhl+PjTgERxb3ss3f4LOrMmBD8OHtfpvBj5j2/SiQVdIrAZfP6WZ4tGJB+\nu+2lYJy3B4FPaE3a4XjVqtGtzY9CgcoDsR5rzcrn2+eT+5hIgVaL2mDN8Wn+8BQF\nGAyZXgjIYii4m/5oz82RobRAAdAuuiiWkZZQMB5tvCIhjWbYXNwbmb5MBui0UCMG\ncaRUCEHa2hkk2KT79P3OQDBp2pYmYDOwhej0DQfW79Hq3BB4+6HYtXnPxVjx0SPo\nC8pK1HtCP38gBJLNpnDEWXtL3coPvxvXe1xq1fiznp5RZMYFKN0xPS6N6Nm20c89\nYIoP2VJp5nUvaEbnCZY9asuZbFbGzUQsKrYkcUB7cqXg/S0qxg2XYCyj3IIuSZHL\nrkkt+UU1DC1XYbzAk8XFL3gnxlrACrp0Wy4h35GqjnAEf4V+4LcJQvUtWiOSrj7e\nSDH9BDBf5Fgdgl4lQbAGwPYvGHu5EOS5xHfJy83b7CtvaD2o69iBi5Loemn1JItA\nZMv+9O0MxoVO1opZgWz+ycANnpTkPFlvWiVKo9fSilKiXh9HV+luP7eY50geokZC\nOBQr9Ahb1UWh1qWLCWm17uOt1+R9yNXw3jsVHS35dMmspmFAGh4tOQlEwPtIhdf9\nJrUYMZDWZkKKH0vmRAJT6qoBVV4IdGP8ExMSiR6KoJKmd+LFAdO0cWdWmBkC8xXC\nHjwFoOMez18M1hTghyrKbEXSFqws6aaboS+EKztr0vQalyKl3vAuyqHtSki1zp6n\nNlSFRnIM12tEduRPjoQWTE5d/3dVkVunsqqF1beX3KE2ZMsw9Ld4el60Gt4gjj2h\nAn3e1Z5tHWYAxyRRDsU1yP+cos2jVBpuFWd/Jg5Q6s2zNpTJWSqdTql5SP/xnHLI\naUuKPh9WrBscdYL5Q8s8xEMeiypk8RBj1+2O30/ojXl5qvzsKRZJOTQByQk/v9Q7\nOdFtqksxfyKa17KjQ1g1nR6ggTEn2b7DL39BvHvfYKpV8oqawNo0Fa0D/CkOjljY\nHZaMVG3tPZeqP9gDa0+a2ha5+AAzFg==\n=HTUV\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b95881d7233a6f026391e01771a0adca712d184\nparent 0dc36d8260f82253ceb5d6927d92874bf46a8f71\nauthor Vasil Dimov <vd@FreeBSD.org> 1618315304 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368778 +0100\n\nnet: convert standalone SetSocketNoDelay() to Sock::SetNoDelay()\n\nThis makes the callers mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1988f6f7cbef197a777839a66aad0d60d551d505",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1988f6f7cbef197a777839a66aad0d60d551d505",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1988f6f7cbef197a777839a66aad0d60d551d505/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0dc36d8260f82253ceb5d6927d92874bf46a8f71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dc36d8260f82253ceb5d6927d92874bf46a8f71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dc36d8260f82253ceb5d6927d92874bf46a8f71"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 19,
      "deletions": 11
    },
    "files": [
      {
        "sha": "23d91e99b4faf20de58c2703ba4cee827e52e7e6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1988f6f7cbef197a777839a66aad0d60d551d505/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1988f6f7cbef197a777839a66aad0d60d551d505/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1988f6f7cbef197a777839a66aad0d60d551d505",
        "patch": "@@ -1160,7 +1160,10 @@ void CConnman::CreateNodeFromAcceptedSocket(std::unique_ptr<Sock>&& sock,\n \n     // According to the internet TCP_NODELAY is not carried into accepted sockets\n     // on all platforms.  Set it again here just to be sure.\n-    SetSocketNoDelay(sock->Get());\n+    if (!sock->SetNoDelay()) {\n+        LogPrint(BCLog::NET, \"connection from %s: unable to set TCP_NODELAY, continuing anyway\\n\",\n+                 addr.ToString());\n+    }\n \n     // Don't accept connections from banned peers.\n     bool banned = m_banman && m_banman->IsBanned(addr);"
      },
      {
        "sha": "aa70d68ed2de7a6a7745a031ec0cd94fd872620a",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1988f6f7cbef197a777839a66aad0d60d551d505/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1988f6f7cbef197a777839a66aad0d60d551d505/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1988f6f7cbef197a777839a66aad0d60d551d505",
        "patch": "@@ -519,7 +519,9 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n #endif\n \n     // Set the no-delay option (disable Nagle's algorithm) on the TCP socket.\n-    SetSocketNoDelay(sock->Get());\n+    if (!sock->SetNoDelay()) {\n+        LogPrint(BCLog::NET, \"Unable to set TCP_NODELAY on a newly created socket, continuing anyway\\n\");\n+    }\n \n     // Set the non-blocking option on the socket.\n     if (!SetSocketNonBlocking(sock->Get(), true)) {\n@@ -747,13 +749,6 @@ bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking)\n     return true;\n }\n \n-bool SetSocketNoDelay(const SOCKET& hSocket)\n-{\n-    int set = 1;\n-    int rc = setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&set, sizeof(int));\n-    return rc == 0;\n-}\n-\n void InterruptSocks5(bool interrupt)\n {\n     interruptSocks5Recv = interrupt;"
      },
      {
        "sha": "132facf46983d7e0ffe6b59b78e80139dbf03db3",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1988f6f7cbef197a777839a66aad0d60d551d505/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1988f6f7cbef197a777839a66aad0d60d551d505/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=1988f6f7cbef197a777839a66aad0d60d551d505",
        "patch": "@@ -222,8 +222,6 @@ bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, uin\n \n /** Disable or enable blocking-mode for a socket */\n bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking);\n-/** Set the TCP_NODELAY flag on a socket */\n-bool SetSocketNoDelay(const SOCKET& hSocket);\n void InterruptSocks5(bool interrupt);\n \n /**"
      },
      {
        "sha": "d21cad7b28de690ccb75112421f6f33b65a43a86",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1988f6f7cbef197a777839a66aad0d60d551d505/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1988f6f7cbef197a777839a66aad0d60d551d505/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=1988f6f7cbef197a777839a66aad0d60d551d505",
        "patch": "@@ -110,6 +110,12 @@ int Sock::SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt\n     return setsockopt(m_socket, level, opt_name, static_cast<const char*>(opt_val), opt_len);\n }\n \n+bool Sock::SetNoDelay() const\n+{\n+    const int on{1};\n+    return SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == 0;\n+}\n+\n bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n     // We need a `shared_ptr` owning `this` for `WaitMany()`, but don't want"
      },
      {
        "sha": "6e205ae54ae93d3cedbb91ab03731f130dde6ed8",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1988f6f7cbef197a777839a66aad0d60d551d505/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1988f6f7cbef197a777839a66aad0d60d551d505/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=1988f6f7cbef197a777839a66aad0d60d551d505",
        "patch": "@@ -126,6 +126,12 @@ class Sock\n                                          const void* opt_val,\n                                          socklen_t opt_len) const;\n \n+    /**\n+     * Shortcut to set the TCP_NODELAY option with SetSockOpt().\n+     * @return true if set successfully\n+     */\n+    [[nodiscard]] virtual bool SetNoDelay() const;\n+\n     using Event = uint8_t;\n \n     /**"
      }
    ]
  },
  {
    "sha": "6da58e33e847ee086500ec3169eea5332aa4ee81",
    "node_id": "C_kwDOABII59oAKDZkYTU4ZTMzZTg0N2VlMDg2NTAwZWMzMTY5ZWVhNTMzMmFhNGVlODE",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T12:29:14Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:18Z"
      },
      "message": "net: convert standalone IsSelectableSocket() to Sock::IsSelectable()\n\nThis makes the callers mockable.",
      "tree": {
        "sha": "3de1f793fd943f83d1bd01c68a42aa61eb644f56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3de1f793fd943f83d1bd01c68a42aa61eb644f56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6da58e33e847ee086500ec3169eea5332aa4ee81",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgsACgkQVN8G9ktV\ny78UOR//WMkSvId6lrEFtCObJKUaD3T3Rgp5TtFITmU+H7E121nqMo58m/DhPKoj\n71YqGIJpuRNyhsDn4CnG+zN0tuRrJIlXIR/tkgcyK+tducpG8XaRMI0I1KvTPkbF\nRZvbw2q5II2m7U2nCAICCe3QCW9g18sTveTdMpGbzjpvTEm7DnBSyLtdnyMN7zMD\n2nCLrpCxrIX8XF+uz3ii2b+wTvuRSkpdK3k6iaM8ylyNuUev/OPjUIn+Ntu69Ox9\nEdu8aOllXAbiTgQSjNvp8VsSrS1f80szQXK64JGPQCvne6eRcCmxIAxO53cB3grz\ndHmlySXQ2i9hfrOn7H0swOPhMdVk9uYomkmcRiVsZggeer+EeL/vYnWSfEV1Zz7x\nxB4D55VhgnK509iVPYHfz+RYWL5fBwdFAra11dtm3bds/+6zIzFRCsPPEnXDkiuK\nQ+tp3Y7MdAhbJrQ8xbDjOL2GPvqoalwNNpUaKZyMuLIiiekVt2nDam7ew/wXIcMz\nwzHyEGlWBrlHj1jYKdCFuPug5zaUdShfWwjYSL+VQaukOQUQn+9F6LcGrKbPE9Ud\nLIpnn4OX1bzYKcfpZwB1yfoFAarc61TaJBZfVX9aaTlKRLOkVqRsAwD15Wo7MUzk\n9CA1vJzdHEWwlz7my4b6lgZy4PR0KxZy5x1wlDPVWG9ebDVz8H+ozjz+IXRGRHge\nyFpF7Rperco6fgwAQulgMceHZDhYnGQdmzW7LETyNcgdSwJQwOpJ7HyqDKCy4MMu\nLDA1MQgDAQ63bLcVSn+uLE7dBIOtJaegPDmlpPCtwBVNjcP3LXpDjBa4dFQJzfrW\n5qzBeU1gfYRZ9Tf47KK6n6VPtCLFWJbxSGbw8LJRYPq0QKxmHuYenyOqgvnsGwLG\nrfufC/LJxRwSqT64Z/YMsUrBrHcS2NyHm5SoFBQt+TU+lcaW6MvEx5oEDHs/2A2J\nQEOBTedO1QEACQfuMRw7z15Yj22hxAjo4D1Aum12wbCntn+ijteAm8mJdFB/xVvL\nVIKpBZSthgz2zo/wrZHmoPAQe4ez7xudKXwCTjORtpiDjI3snYJcJK4az1yZL4Cf\nMUcviypC38lk6JvaU0UujRnkObyg8CTDN2TUePO9bGEOGAjph3B9A7hAd3+VWvTV\nRyKtg4GdgsxVt2eDH2oKvDprYL0L8pavkEgDEoE9K63pdYsE+pMVDN+4u4//Airb\nn0gXXteEP1uaaruFtIB/dYf/d8ptVSqN2HNBttGUn4gyq/0bopI557LzcWGNxGKw\nSNfW1G160R8tgSAMmpD+gZaY6NvpzXHZ6t6A/zpkm+36eVVi0ukCk/p6r4cF/xAV\nXM5ioC9cV/BfJRsO70P/vNNINVK9/w==\n=43xn\n-----END PGP SIGNATURE-----",
        "payload": "tree 3de1f793fd943f83d1bd01c68a42aa61eb644f56\nparent 1988f6f7cbef197a777839a66aad0d60d551d505\nauthor Vasil Dimov <vd@FreeBSD.org> 1618316954 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368778 +0100\n\nnet: convert standalone IsSelectableSocket() to Sock::IsSelectable()\n\nThis makes the callers mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6da58e33e847ee086500ec3169eea5332aa4ee81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6da58e33e847ee086500ec3169eea5332aa4ee81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6da58e33e847ee086500ec3169eea5332aa4ee81/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1988f6f7cbef197a777839a66aad0d60d551d505",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1988f6f7cbef197a777839a66aad0d60d551d505",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1988f6f7cbef197a777839a66aad0d60d551d505"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 36,
      "deletions": 14
    },
    "files": [
      {
        "sha": "4d6ffe4b3338c2859a039190b6819a6c853555e2",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da58e33e847ee086500ec3169eea5332aa4ee81/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da58e33e847ee086500ec3169eea5332aa4ee81/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=6da58e33e847ee086500ec3169eea5332aa4ee81",
        "patch": "@@ -97,14 +97,6 @@ typedef char* sockopt_arg_type;\n #define USE_POLL\n #endif\n \n-bool static inline IsSelectableSocket(const SOCKET& s) {\n-#if defined(USE_POLL) || defined(WIN32)\n-    return true;\n-#else\n-    return (s < FD_SETSIZE);\n-#endif\n-}\n-\n // MSG_NOSIGNAL is not available on some platforms, if it doesn't exist define it as 0\n #if !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0"
      },
      {
        "sha": "810a75d5dbae94a757f0165392687bb002a261e3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da58e33e847ee086500ec3169eea5332aa4ee81/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da58e33e847ee086500ec3169eea5332aa4ee81/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6da58e33e847ee086500ec3169eea5332aa4ee81",
        "patch": "@@ -1152,8 +1152,7 @@ void CConnman::CreateNodeFromAcceptedSocket(std::unique_ptr<Sock>&& sock,\n         return;\n     }\n \n-    if (!IsSelectableSocket(sock->Get()))\n-    {\n+    if (!sock->IsSelectable()) {\n         LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n         return;\n     }"
      },
      {
        "sha": "7b5e75d32da7dcd984834094a2e025691c723cbf",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da58e33e847ee086500ec3169eea5332aa4ee81/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da58e33e847ee086500ec3169eea5332aa4ee81/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=6da58e33e847ee086500ec3169eea5332aa4ee81",
        "patch": "@@ -503,7 +503,7 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n \n     // Ensure that waiting for I/O on this socket won't result in undefined\n     // behavior.\n-    if (!IsSelectableSocket(sock->Get())) {\n+    if (!sock->IsSelectable()) {\n         LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n         return nullptr;\n     }"
      },
      {
        "sha": "547e2d20dfb74be83338480e0766effa7cc8f2ba",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da58e33e847ee086500ec3169eea5332aa4ee81/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da58e33e847ee086500ec3169eea5332aa4ee81/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=6da58e33e847ee086500ec3169eea5332aa4ee81",
        "patch": "@@ -13,7 +13,7 @@\n #include <memory>\n \n FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n-    : m_fuzzed_data_provider{fuzzed_data_provider}\n+    : m_fuzzed_data_provider{fuzzed_data_provider}, m_selectable{fuzzed_data_provider.ConsumeBool()}\n {\n     m_socket = fuzzed_data_provider.ConsumeIntegralInRange<SOCKET>(INVALID_SOCKET - 1, INVALID_SOCKET);\n }\n@@ -203,6 +203,11 @@ int FuzzedSock::SetSockOpt(int, int, const void*, socklen_t) const\n     return 0;\n }\n \n+bool FuzzedSock::IsSelectable() const\n+{\n+    return m_selectable;\n+}\n+\n bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n     constexpr std::array wait_errnos{"
      },
      {
        "sha": "256a95f68a9ee23adb90dce63e7bb5ebadd062e1",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da58e33e847ee086500ec3169eea5332aa4ee81/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da58e33e847ee086500ec3169eea5332aa4ee81/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=6da58e33e847ee086500ec3169eea5332aa4ee81",
        "patch": "@@ -47,6 +47,13 @@ class FuzzedSock : public Sock\n      */\n     mutable std::optional<uint8_t> m_peek_data;\n \n+    /**\n+     * Whether to pretend that the socket is select(2)-able. This is randomly set in the\n+     * constructor. It should remain constant so that repeated calls to `IsSelectable()`\n+     * return the same value.\n+     */\n+    const bool m_selectable;\n+\n public:\n     explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider);\n \n@@ -68,6 +75,8 @@ class FuzzedSock : public Sock\n \n     int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const override;\n \n+    bool IsSelectable() const override;\n+\n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n \n     bool WaitMany(std::chrono::milliseconds timeout, WaitData& what) const override;"
      },
      {
        "sha": "e16bd60e1e6c157d9c495e8dee04460a19905bd6",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da58e33e847ee086500ec3169eea5332aa4ee81/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da58e33e847ee086500ec3169eea5332aa4ee81/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=6da58e33e847ee086500ec3169eea5332aa4ee81",
        "patch": "@@ -152,6 +152,8 @@ class StaticContentsSock : public Sock\n \n     int SetSockOpt(int, int, const void*, socklen_t) const override { return 0; }\n \n+    bool IsSelectable() const override { return true; }\n+\n     bool Wait(std::chrono::milliseconds timeout,\n               Event requested,\n               Event* occurred = nullptr) const override"
      },
      {
        "sha": "61a3770b205002eac6aa417bd59074ad816a6082",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da58e33e847ee086500ec3169eea5332aa4ee81/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da58e33e847ee086500ec3169eea5332aa4ee81/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=6da58e33e847ee086500ec3169eea5332aa4ee81",
        "patch": "@@ -116,6 +116,15 @@ bool Sock::SetNoDelay() const\n     return SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == 0;\n }\n \n+bool Sock::IsSelectable() const\n+{\n+#if defined(USE_POLL) || defined(WIN32)\n+    return true;\n+#else\n+    return m_socket < FD_SETSIZE;\n+#endif\n+}\n+\n bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n     // We need a `shared_ptr` owning `this` for `WaitMany()`, but don't want\n@@ -184,10 +193,10 @@ bool Sock::WaitMany(std::chrono::milliseconds timeout, WaitData& what) const\n     SOCKET socket_max{0};\n \n     for (const auto& [sock, events] : what) {\n-        const auto& s = sock->m_socket;\n-        if (!IsSelectableSocket(s)) {\n+        if (!sock->IsSelectable()) {\n             return false;\n         }\n+        const auto& s = sock->m_socket;\n         if (events.requested & RECV) {\n             FD_SET(s, &recv);\n         }"
      },
      {
        "sha": "903ae506ee10c670d98b6db7d2799766ff52163e",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6da58e33e847ee086500ec3169eea5332aa4ee81/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6da58e33e847ee086500ec3169eea5332aa4ee81/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=6da58e33e847ee086500ec3169eea5332aa4ee81",
        "patch": "@@ -132,6 +132,12 @@ class Sock\n      */\n     [[nodiscard]] virtual bool SetNoDelay() const;\n \n+    /**\n+     * Check if the underlying socket can be used for `select(2)` (or the `Wait()` method).\n+     * @return true if selectable\n+     */\n+    [[nodiscard]] virtual bool IsSelectable() const;\n+\n     using Event = uint8_t;\n \n     /**"
      }
    ]
  },
  {
    "sha": "eeca4dd5805c660b4e453526a1516b7bbf53e987",
    "node_id": "C_kwDOABII59oAKGVlY2E0ZGQ1ODA1YzY2MGI0ZTQ1MzUyNmExNTE2YjdiYmY1M2U5ODc",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T12:37:16Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:19Z"
      },
      "message": "net: add new method Sock::GetSockName() that wraps getsockname()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "55c239145080a0cb82ce3a6b9906371463b6720c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55c239145080a0cb82ce3a6b9906371463b6720c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeca4dd5805c660b4e453526a1516b7bbf53e987",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgwACgkQVN8G9ktV\ny7/J0SAAj3tEpSFJkYi9z7LE4M1pNxiE9qTcRVcFrZq2x3AzzVfwNgONIz5p6XPE\nlV6rK5w8NMKzaiG6Gv6n4wLDjAvFTodllJLc3sZuKaB8Ne6zHokJFwfw/DQ+Xgs8\n0qPWKZRr8ZB6BqI7qBOeuGmmysDL0++tfwymQu5DqakL4JCMULNgoLFqWnb/UNyb\nMnCrZfV8rw/Ysr4YbHm7JZLlNgcc+e8wC9YgZTach4fgcFr7VNN1Usm1CTzbMa+n\n/vLjocaf96MKeRJydLSnji6ByY8frRLaQgLR8pcur41Be3WZu1OzK00P10RYMZcf\n5zTLDN7rl8zVAjb1yLEGUT4pL7RPzBX5RRzdQkvQFP0HKsevo2X6aqfIURsK9Avs\nGcRJrUL6z0W3W8PKCTqWjRYaTmiiHG4df4d9XCPQsRlwuwoZ1fK74TC5qzxyQlEO\njFbVIIV97Q+VTdth36FspmkIYg5Zip0wh2GcPbse6VkU7SYuR8ttOFhjVy/TMt3D\nonfjpOzEcSWLVV+P3Rl4nAW7+TUGagos+T+Hewq/PYIw1coTufrnlz8xlK7rrLRJ\nK34MEOfkvPTznuymIcXB+V/3ujl4kRX44PgYT6GnUwN3yLojTpOQY6SKyZI9G3Tp\nZ/4LUXZfYJxwnaRMOr08maytn6aavO0JH5dri0qVpC/xEd4clWif/Pl/lc87YsDo\n/9nIih9TQX+qcWKcRH6r+PUUOZJMRzmtOlQPxemotnNBMlWocrWyiZinSqEv0m+X\nZ6HNDjJpLOPBPwm4T4ZpkCixjIkeWGuE72IXrNnTgfCo4mQ/GBX5z26iO9gIOPIR\nhtdq7ot0yaEPd/1e6d+cjw8jU6r7wBaEk7jDtlvsUesPbrBGIsD2lcjW1zIRyxbE\nfMiRnBHFw/auVLcchD5g94plmaE2ZL/NCWAW6nuk2wBJxWkLyMzfIqcuKzPCxqWg\nuBJ3VqAgHFAlu+c8XXF1M2xZlY3tqYanCGNJwzEYqcc4mgI/9dlr2jjog2oXzQ5T\n7V9DTYYXuLMwPrlw/tMIex06vKVgS+5LQM9tV1nn2WVUf0mNOsM4Cw/ij80msw+7\ne2tsIBt3syUkcfX/z7r9lv6NofEJ8NoDe7oYO/KYalryoazUOEC3aL2HLjDldEFX\nADaXLPFr99ZygFvqGpAMIIInvgGmUyc+CHqHauNUy3JX6GFO6NjtoNaDtP6rab+e\nQV47r9P7ffx/LtYdHwvQPicunt5MYwfKBSaod6hBLtjaX9LfHNxWFQNQyBbqlHUM\nlQZzc5m9dyZ60I81Sj5ICqPmrO7jLgKoIvUWwWIW4KADLK2esSH+//XkY6OpVLqu\nV/THgL/y8FPzmNwpqqdDMlOK5JmzrQ==\n=dLYM\n-----END PGP SIGNATURE-----",
        "payload": "tree 55c239145080a0cb82ce3a6b9906371463b6720c\nparent 6da58e33e847ee086500ec3169eea5332aa4ee81\nauthor Vasil Dimov <vd@FreeBSD.org> 1618317436 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368779 +0100\n\nnet: add new method Sock::GetSockName() that wraps getsockname()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeca4dd5805c660b4e453526a1516b7bbf53e987",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeca4dd5805c660b4e453526a1516b7bbf53e987",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeca4dd5805c660b4e453526a1516b7bbf53e987/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6da58e33e847ee086500ec3169eea5332aa4ee81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6da58e33e847ee086500ec3169eea5332aa4ee81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6da58e33e847ee086500ec3169eea5332aa4ee81"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1a04950eda8cedb95042f44c01a4549477c69791",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=eeca4dd5805c660b4e453526a1516b7bbf53e987",
        "patch": "@@ -203,6 +203,20 @@ int FuzzedSock::SetSockOpt(int, int, const void*, socklen_t) const\n     return 0;\n }\n \n+int FuzzedSock::GetSockName(sockaddr* name, socklen_t* name_len) const\n+{\n+    constexpr std::array getsockname_errnos{\n+        ECONNRESET,\n+        ENOBUFS,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, getsockname_errnos);\n+        return -1;\n+    }\n+    *name_len = m_fuzzed_data_provider.ConsumeData(name, *name_len);\n+    return 0;\n+}\n+\n bool FuzzedSock::IsSelectable() const\n {\n     return m_selectable;"
      },
      {
        "sha": "03ed98d30dd90100373d657814735f5db0d72775",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=eeca4dd5805c660b4e453526a1516b7bbf53e987",
        "patch": "@@ -75,6 +75,8 @@ class FuzzedSock : public Sock\n \n     int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const override;\n \n+    int GetSockName(sockaddr* name, socklen_t* name_len) const override;\n+\n     bool IsSelectable() const override;\n \n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;"
      },
      {
        "sha": "617091d5520884e8751649ffdc4c9b838111ac54",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=eeca4dd5805c660b4e453526a1516b7bbf53e987",
        "patch": "@@ -152,6 +152,12 @@ class StaticContentsSock : public Sock\n \n     int SetSockOpt(int, int, const void*, socklen_t) const override { return 0; }\n \n+    int GetSockName(sockaddr* name, socklen_t* name_len) const override\n+    {\n+        std::memset(name, 0x0, *name_len);\n+        return 0;\n+    }\n+\n     bool IsSelectable() const override { return true; }\n \n     bool Wait(std::chrono::milliseconds timeout,"
      },
      {
        "sha": "db84c7f4dad899bb7969c614874f6ea589a381f4",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=eeca4dd5805c660b4e453526a1516b7bbf53e987",
        "patch": "@@ -110,6 +110,11 @@ int Sock::SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt\n     return setsockopt(m_socket, level, opt_name, static_cast<const char*>(opt_val), opt_len);\n }\n \n+int Sock::GetSockName(sockaddr* name, socklen_t* name_len) const\n+{\n+    return getsockname(m_socket, name, name_len);\n+}\n+\n bool Sock::SetNoDelay() const\n {\n     const int on{1};"
      },
      {
        "sha": "d3f9b4af8cb68ff3f05617ac7ce2b0d5efdffba0",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeca4dd5805c660b4e453526a1516b7bbf53e987/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=eeca4dd5805c660b4e453526a1516b7bbf53e987",
        "patch": "@@ -126,6 +126,13 @@ class Sock\n                                          const void* opt_val,\n                                          socklen_t opt_len) const;\n \n+    /**\n+     * getsockname(2) wrapper. Equivalent to\n+     * `getsockname(this->Get(), name, name_len)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    [[nodiscard]] virtual int GetSockName(sockaddr* name, socklen_t* name_len) const;\n+\n     /**\n      * Shortcut to set the TCP_NODELAY option with SetSockOpt().\n      * @return true if set successfully"
      }
    ]
  },
  {
    "sha": "a68aaad7ad22a105483804015a85c2c5c0531e84",
    "node_id": "C_kwDOABII59oAKGE2OGFhYWQ3YWQyMmExMDU0ODM4MDQwMTVhODVjMmM1YzA1MzFlODQ",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T13:11:20Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:20Z"
      },
      "message": "net: change GetBindAddress() to take Sock argument\n\nThis avoids the direct call to `getsockname()` and allows mocking.",
      "tree": {
        "sha": "1e0b4d1b23b0c531798c2d8425b8a0f3d0a91d53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e0b4d1b23b0c531798c2d8425b8a0f3d0a91d53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a68aaad7ad22a105483804015a85c2c5c0531e84",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhgwACgkQVN8G9ktV\ny7/T7R//RVUWnMQNY1owNZkUdCp6fi5DOEKMDYzxChs1ajNC5N05Om1qqbJsbF3V\nyLUsr7ogdboa8+0DbXpPsT1llP7ggowFR/4XYXLLR8NsOtbS/KI0DD5hdaDxbqJm\nl0J6KLZ9wdncdxBnNFbVOTl+8dV698chj19gIMMnmT8Nb2JqmqOsx2T+frX8zU6A\n/HX2bkvdlrBT5n4WSPpcVY3+1jzMhYLWuwG3IEXIf6qjDiWJ39pf/iogwyOVDM1v\n3l316eEoTC8N2SeYrzGrVMvZWrue/pcJJbzkM5Ey5/5Pdoba13IDbJH2Yh3ad4RH\n4vrhDrIxfUWtPSYTW3uQ5BVyINMZ1uWVsPWMypBVGXanQc68glRyCGVqF+TBRsxc\nGseUCxTRxhovO4cQHmXhcPZJ6sAF58dsINBTCfkl8DOs4GOyagipXdnAq7BExu2P\ndbR6+A55EwhKp1zUbMFCW4Aj804EsZVSUvRqHziZwy0X1XD1LCGOpV0N6SmBwvGB\n/oZe7xdQvEA0XClFEo5NSYKMsfoyyWAoXiawqpefB55hjBiP9B7Tt92H1PPUhZ9p\nDk5ErVD5OxLUj89pwvdjXFwszsw6rlQHFV82m3cw1IE+K6AIywPOsiuvHusTYuJe\n6z1IgNIgjGYXSJK9ZgsL3+W7YxXZS78oaJdKJKmBhMEjantKJMmslR3JhK0sRF4C\nLn4RiiKJh8cYXEzKNglT7U5dGs3+kCI0D3BPY35nGCkHS7bXuyexw55oJfQDo0Hh\nDsR7eyWcUyvVNbOYM8OZrpZ5L6QrpjqlYDQObNWHB2MAa+My/XbDQAE5XfqLDmiM\nxcbMElR6B82Mc4TYeDq+qSczh/m4s6Uvld3f1WkgphmAYmMVPE3iCQlsvYToPpt0\n6ccMCgYgHrcsfH628tpUANbUxLkJvcF0ESu/GYsiGcSi4iUVwS+laC/CP0pxVOzN\nx+L3TVssaj5JY+Ilmmwp6hXmS03e0fGY0ANJ0dAfYqTjxD8N+KV++DzG/82WlFuM\nZDfMcfO6RqogukTQfCThVhrgsst4/uJZtbyn/qbmp5d17xPtr0iyLDwWcgQVFJNn\nan4s4/Zz43L3fli+OFVNgBkg5i4vDrwmH3ejMM8l6bVQfZKcHnrYGKt9nqSBJcl2\nzqVnWntZX/TD+6AcHworUTuUp6jOswY7ltgKo2JqeM0hdj7pSG7tB7caek08u0Ka\niPkE7GT6dj4EllaRSKxpjwanGLVokpW44ByJTLFW0t99LnLUqXAdFtouuqWMlCwX\nAg3gA+iV3yLOuQQAwPeRKFny9IpdWg3WBS37jXxE+8+9x7f3lBIoraM55L9v2wUR\n5YEi8wUGk9dcsgaXpmQv5ZClqJt7Pw==\n=aS2g\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e0b4d1b23b0c531798c2d8425b8a0f3d0a91d53\nparent eeca4dd5805c660b4e453526a1516b7bbf53e987\nauthor Vasil Dimov <vd@FreeBSD.org> 1618319480 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368780 +0100\n\nnet: change GetBindAddress() to take Sock argument\n\nThis avoids the direct call to `getsockname()` and allows mocking.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a68aaad7ad22a105483804015a85c2c5c0531e84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a68aaad7ad22a105483804015a85c2c5c0531e84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a68aaad7ad22a105483804015a85c2c5c0531e84/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eeca4dd5805c660b4e453526a1516b7bbf53e987",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeca4dd5805c660b4e453526a1516b7bbf53e987",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeca4dd5805c660b4e453526a1516b7bbf53e987"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cfc4d9492818e086ca35a7a51c5a173f3217866d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a68aaad7ad22a105483804015a85c2c5c0531e84/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a68aaad7ad22a105483804015a85c2c5c0531e84/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a68aaad7ad22a105483804015a85c2c5c0531e84",
        "patch": "@@ -384,13 +384,13 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n }\n \n /** Get the bind address for a socket as CAddress */\n-static CAddress GetBindAddress(SOCKET sock)\n+static CAddress GetBindAddress(const Sock& sock)\n {\n     CAddress addr_bind;\n     struct sockaddr_storage sockaddr_bind;\n     socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n-    if (sock != INVALID_SOCKET) {\n-        if (!getsockname(sock, (struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+    if (sock.Get() != INVALID_SOCKET) {\n+        if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n             addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind);\n         } else {\n             LogPrint(BCLog::NET, \"Warning: getsockname failed\\n\");\n@@ -502,7 +502,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     if (!addr_bind.IsValid()) {\n-        addr_bind = GetBindAddress(sock->Get());\n+        addr_bind = GetBindAddress(*sock);\n     }\n     CNode* pnode = new CNode(id, nLocalServices, std::move(sock), addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, /* inbound_onion */ false);\n     pnode->AddRef();\n@@ -1115,7 +1115,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         addr = CAddress{MaybeFlipIPv6toCJDNS(addr), NODE_NONE};\n     }\n \n-    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(sock->Get())), NODE_NONE};\n+    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(*sock)), NODE_NONE};\n \n     NetPermissionFlags permissionFlags = NetPermissionFlags::None;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);"
      }
    ]
  },
  {
    "sha": "bf3be159f01c8f0239e04194f352f657688da7cb",
    "node_id": "C_kwDOABII59oAKGJmM2JlMTU5ZjAxYzhmMDIzOWUwNDE5NGYzNTJmNjU3Njg4ZGE3Y2I",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T14:31:04Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:21Z"
      },
      "message": "net: add new method Sock::Bind() that wraps bind()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "19ede58479ce91ee2fae713db078938bbfe42d82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19ede58479ce91ee2fae713db078938bbfe42d82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf3be159f01c8f0239e04194f352f657688da7cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhg0ACgkQVN8G9ktV\ny7/rQiAAoIdM+Aa7u2wi7qO9ki9B5XoIq/K0nmO9I4JeydqiXebtRwMeoA0pLqvT\nm0Xc/aCbt6V9CKMtS84UQYl8FTs+BQFFtJuzlcCC28EQf0Pz+R2+N/tbrcmUVaaN\nFyuX5AL+BaxEhjBijaO7BlnXj/DNaVDWJtqmZ9IumVDM2EzG1O30gzrBmw4KeUC5\nb1E/pafqubuAQwZ02CJ3sFrZRRBTif9puV2IeVSoMQxQZzN/23hszrGLIuvxR1fE\naHx5BLISAsa5Yy1DMrQutB5CLf4NVsrotw7ysbLO5MJYAgSBxx54gmfntDWz5xQN\nqmcfzCLs0U8lcOW5zO0jWkRDNAbaUcy0VGUFVlldnBYrphbVwAEhdtidGyWL6nLS\nrjLJUbH8CDvO5GwrdKAuMuXwbkb9zryP9yiIEy3Ci9x3R9V8QEhj2gPcxEiYZVOE\nvw5MsKyesZUuigAu4kosKHkIwR90hv5nkecuwqyWmLlPlO2Zyv64VmaNItY5yVs4\nTjQFUJZiU1uUaFDNrpbaP2uRXrem/zCpaWCUU2nmzmFU9E8fYbeKM/AN0coAVeUW\nfuTGNzbJAjQdBDT1loB/FGPvhI/GmhSIqrpn5h9Yfrl9R2/5R8uIGPPR5ayB0gl5\ndfj2hknUI5hqG8NndDdQawKIld7Pyx8IgzRX4mLg+3WUEJoObcGYPJpCHe7+zsqT\nkXNMLjIc5aZ8mq2Gn7JjcvdVqhjeXkQB6DTkqd2myHDiUJvrBIuLPkw0//rvheOQ\n9YQ1OWMlPH2fksswPWwfzV/Cn6H+bCGVA9vFRRG9/zxZh5aIXGzDxeOYCMD7adEu\nnMXDXVIisGI96qWxvVIQqpyUsFg1J+MWBoJS67jYWMP/i+PkX5NnXOhabAumFdJ/\nOHuy34S+rMsPOKv3dq4bNJB14VsAImcBEOKM/L9AnE0g9bTLJX6BscuBPyjH//Z/\n0YP3uwg8nTVEiYGAaItDDC4RBpbyYFpZXKtCt0x0i/s+6Q8JN/HKFmzGcBlQ8t6p\nFkQBcRuxi5PPt+3VADnJhd2v1+b11/zXPsYaUUVkuAw5EL7b+0sdKvHexr++6sk+\n4l9NAjNXINvSu+TjO2OlioYtw+CLK8maNSLEE8bC/YdrII5iKxT/fFqCe52Cx1PH\n/uOhSFJtA85oppS6KiCPFfKZ8DVju7cXRMFmD9tGVfTzuupua5HfVcATzSB3lAJh\nKiohFGTVRhIdTusiFfNgxZs0U5DR654lwCf/+GaA2TLjzgxLtd5fFZWnVjIyK1hA\nFDsnvLK5MP/KIWSWuEe4kC3tAOjDa/SxCYO3vOBkW0GauK5tUOy1iGIYkxPii1r3\nHHeYSKmtjESutg/zAZBGGjPlyDvbIA==\n=5ZAk\n-----END PGP SIGNATURE-----",
        "payload": "tree 19ede58479ce91ee2fae713db078938bbfe42d82\nparent a68aaad7ad22a105483804015a85c2c5c0531e84\nauthor Vasil Dimov <vd@FreeBSD.org> 1618324264 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368781 +0100\n\nnet: add new method Sock::Bind() that wraps bind()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3be159f01c8f0239e04194f352f657688da7cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3be159f01c8f0239e04194f352f657688da7cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3be159f01c8f0239e04194f352f657688da7cb/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a68aaad7ad22a105483804015a85c2c5c0531e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a68aaad7ad22a105483804015a85c2c5c0531e84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a68aaad7ad22a105483804015a85c2c5c0531e84"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 31,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e9a46ce19bc4263e60f80409a67c25fde34f0d5a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3be159f01c8f0239e04194f352f657688da7cb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3be159f01c8f0239e04194f352f657688da7cb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bf3be159f01c8f0239e04194f352f657688da7cb",
        "patch": "@@ -2261,8 +2261,7 @@ bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,\n #endif\n     }\n \n-    if (::bind(sock->Get(), (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n-    {\n+    if (sock->Bind(reinterpret_cast<struct sockaddr*>(&sockaddr), len) == SOCKET_ERROR) {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n             strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"), addrBind.ToString(), PACKAGE_NAME);"
      },
      {
        "sha": "6b6ed25a02f138e16f9644f4cbcca51e75747a98",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3be159f01c8f0239e04194f352f657688da7cb/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3be159f01c8f0239e04194f352f657688da7cb/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=bf3be159f01c8f0239e04194f352f657688da7cb",
        "patch": "@@ -157,6 +157,21 @@ int FuzzedSock::Connect(const sockaddr*, socklen_t) const\n     return 0;\n }\n \n+int FuzzedSock::Bind(const sockaddr*, socklen_t) const\n+{\n+    constexpr std::array bind_errnos{\n+        EACCES,\n+        EADDRINUSE,\n+        EADDRNOTAVAIL,\n+        EAGAIN,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, bind_errnos);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n std::unique_ptr<Sock> FuzzedSock::Accept(sockaddr* addr, socklen_t* addr_len) const\n {\n     constexpr std::array accept_errnos{"
      },
      {
        "sha": "7e480e96d2a80e22ee42f7f041b9ab16ecb15ac7",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3be159f01c8f0239e04194f352f657688da7cb/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3be159f01c8f0239e04194f352f657688da7cb/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=bf3be159f01c8f0239e04194f352f657688da7cb",
        "patch": "@@ -69,6 +69,8 @@ class FuzzedSock : public Sock\n \n     int Connect(const sockaddr*, socklen_t) const override;\n \n+    int Bind(const sockaddr*, socklen_t) const override;\n+\n     std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override;\n \n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;"
      },
      {
        "sha": "49cb40d7a9993bd7e9094f7ccd88bbbf700a210a",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3be159f01c8f0239e04194f352f657688da7cb/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3be159f01c8f0239e04194f352f657688da7cb/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=bf3be159f01c8f0239e04194f352f657688da7cb",
        "patch": "@@ -127,6 +127,8 @@ class StaticContentsSock : public Sock\n \n     int Connect(const sockaddr*, socklen_t) const override { return 0; }\n \n+    int Bind(const sockaddr*, socklen_t) const override { return 0; }\n+\n     std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n     {\n         if (addr != nullptr) {"
      },
      {
        "sha": "703eb8e79216923a86656166aff87e5cadac5119",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3be159f01c8f0239e04194f352f657688da7cb/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3be159f01c8f0239e04194f352f657688da7cb/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=bf3be159f01c8f0239e04194f352f657688da7cb",
        "patch": "@@ -74,6 +74,11 @@ int Sock::Connect(const sockaddr* addr, socklen_t addr_len) const\n     return connect(m_socket, addr, addr_len);\n }\n \n+int Sock::Bind(const sockaddr* addr, socklen_t addr_len) const\n+{\n+    return bind(m_socket, addr, addr_len);\n+}\n+\n std::unique_ptr<Sock> Sock::Accept(sockaddr* addr, socklen_t* addr_len) const\n {\n #ifdef WIN32"
      },
      {
        "sha": "eb6c39ae75b3fa2d03a3cf4246dc672fb7dddf99",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3be159f01c8f0239e04194f352f657688da7cb/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3be159f01c8f0239e04194f352f657688da7cb/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=bf3be159f01c8f0239e04194f352f657688da7cb",
        "patch": "@@ -98,6 +98,12 @@ class Sock\n      */\n     [[nodiscard]] virtual int Connect(const sockaddr* addr, socklen_t addr_len) const;\n \n+    /**\n+     * bind(2) wrapper. Equivalent to `bind(this->Get(), addr, addr_len)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    [[nodiscard]] virtual int Bind(const sockaddr* addr, socklen_t addr_len) const;\n+\n     /**\n      * accept(2) wrapper. Equivalent to `std::make_unique<Sock>(accept(this->Get(), addr, addr_len))`.\n      * Code that uses this wrapper can be unit tested if this method is overridden by a mock Sock"
      }
    ]
  },
  {
    "sha": "c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
    "node_id": "C_kwDOABII59oAKGM0N2M2OGFiOTBmODY5ZGJlZjE4MzYxN2RkZDhiM2M2ZmM2YTYxZWQ",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T14:43:04Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:21Z"
      },
      "message": "net: add new method Sock::Listen() that wraps listen()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "dffa866cb9c7769035d6c1bcf95af4464cd6b79f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dffa866cb9c7769035d6c1bcf95af4464cd6b79f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhg4ACgkQVN8G9ktV\ny7+qoiAAi8QAsg2Pw35QuvqS/iPmjn9AZXUpUiu4xDNsb/ZZkiake0x9D6rE5W/0\nOEzqPFjWY+8iI+iI28HRAL1/dyk153txgjs8n5Ao3lL3yIpDGnCZMRQnn+m8eV4K\njcQ8o4y8mgPnElydSMJJg+cLh+AptGnMEgxAruGiCbVbTXta/eqt1yhKi46PHXLY\nckCg39izeP9GIVJgkRH1+PZgoiQtcMZP0l2XPCKXSYK2488ZE/HtxMGav+jgWfjO\nmkGSeA4mIXukxQ+4FwlE82pm08D4m9CWo/YNSsGKmGjtr2ChTMKOH4h0XK4/E3AZ\niiTYvM7jBwMwdtGCb5YyfVaEDYSgq0UOTZeFqHgT0hRB9DZ35Q1IRVd7GxXKUmF1\nzEfKls1b0PF12oH9yd0cyOZXYqksxy9wFCfp5dAuyEkJooiSDe9PkNgIK0FSac51\nZX4/9+Vr1drKwtaKb2wA8B4wBX6LuOSKvCwgsk58idlm33yfQx/bFJxcyHjsawl5\nBN1MjBD+k+n1gpQIM9OjfjcGIhMXeP6LN33nehnOosgX2BNG4kWxO1fa/fRoVin+\nWIpRwrgOYX1dla5IBZmuuQgbrbb+V9I6gEMUQIkDLjYsBMkgiLNphKazRbppX7nr\nss8fRHkUBaLT9QfL2JAFZpa40o8YH+fxKTL5XOZwHUmE+uU/3xlo8Ig2JJfGlKs1\nSjIpVX3dNlR9mGDeF6tYQYHP3hjclnsNapxQjHGROIMSxEKXN6yywTTm0eC95JtM\nNKAFgmBA803nfwRlh8HmNYQOXwnjNUp4eUp/4iw0K8QB8fj1jkUlHpU/Pp9/QxQD\ncyGQyKeuTr8FwSpn1VNekI9s2tGjr5rA/bQ0a7dxN2fmRboB3O669GvfYP6hg7fY\nI+zD2+SgOm1uR/i2V7lmqfDdpsn5pDkywkjZaYnaVSx2cEu8Em6oUYPJNUevy3I5\nDlyl/QwjGbftosV6Zd1ksowlC0bGE9oiZTmy8kCaxBJBD4pAiY6B/YQ7epU0mYuV\nnQ4J2tj9dCjDEqjiqa2mwrbI8VKlVPt8Hxi2KvCx7qUhLh41zF0NlGOPr/sDlATA\nLeV8eq/NKppwSRm5aMstJhHxuEy2soPgZ80me0SthVqbu9vI+GQgXz7pWnZFf1Rf\n0hqMeHc0OIY0t2DHjIFwD7gAiOpMD263Nxa0zghQhol1BXTp8RgVwcyvYvgATw8q\nTMuqZ92lvdTHdTphIXwliCIOdHq/Crtrpjb9in15IhBEayj8F11yolRK7QnmRupl\nkVVCHITr1RNK2VS1cvCH4UUnePfM2kce7PkXtkDmNJMpmChIC7zpoPKpEKN6PVDq\nHGsm8Co/wtyjBBMlgUXB040mjN2PHQ==\n=dDaS\n-----END PGP SIGNATURE-----",
        "payload": "tree dffa866cb9c7769035d6c1bcf95af4464cd6b79f\nparent bf3be159f01c8f0239e04194f352f657688da7cb\nauthor Vasil Dimov <vd@FreeBSD.org> 1618324984 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368781 +0100\n\nnet: add new method Sock::Listen() that wraps listen()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf3be159f01c8f0239e04194f352f657688da7cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3be159f01c8f0239e04194f352f657688da7cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3be159f01c8f0239e04194f352f657688da7cb"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "98c33272c0aac0196c5678c340fa4163807bb424",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
        "patch": "@@ -2273,7 +2273,7 @@ bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,\n     LogPrintf(\"Bound to %s\\n\", addrBind.ToString());\n \n     // Listen for incoming connections\n-    if (listen(sock->Get(), SOMAXCONN) == SOCKET_ERROR)\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR)\n     {\n         strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError.original);"
      },
      {
        "sha": "11bb220196ee6a4eb71c9f79880adb8bb4b99751",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
        "patch": "@@ -172,6 +172,19 @@ int FuzzedSock::Bind(const sockaddr*, socklen_t) const\n     return 0;\n }\n \n+int FuzzedSock::Listen(int) const\n+{\n+    constexpr std::array listen_errnos{\n+        EINVAL,\n+        EOPNOTSUPP,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, listen_errnos);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n std::unique_ptr<Sock> FuzzedSock::Accept(sockaddr* addr, socklen_t* addr_len) const\n {\n     constexpr std::array accept_errnos{"
      },
      {
        "sha": "7af41975736537d2904bcb817be24de7ee70302d",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
        "patch": "@@ -71,6 +71,8 @@ class FuzzedSock : public Sock\n \n     int Bind(const sockaddr*, socklen_t) const override;\n \n+    int Listen(int backlog) const override;\n+\n     std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override;\n \n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;"
      },
      {
        "sha": "5c246de42c42af47f3ea3be9c8165f4a984a3c6f",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
        "patch": "@@ -129,6 +129,8 @@ class StaticContentsSock : public Sock\n \n     int Bind(const sockaddr*, socklen_t) const override { return 0; }\n \n+    int Listen(int) const override { return 0; }\n+\n     std::unique_ptr<Sock> Accept(sockaddr* addr, socklen_t* addr_len) const override\n     {\n         if (addr != nullptr) {"
      },
      {
        "sha": "152e88beab2baef49a5210ac34daf10394230b7d",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
        "patch": "@@ -79,6 +79,11 @@ int Sock::Bind(const sockaddr* addr, socklen_t addr_len) const\n     return bind(m_socket, addr, addr_len);\n }\n \n+int Sock::Listen(int backlog) const\n+{\n+    return listen(m_socket, backlog);\n+}\n+\n std::unique_ptr<Sock> Sock::Accept(sockaddr* addr, socklen_t* addr_len) const\n {\n #ifdef WIN32"
      },
      {
        "sha": "1355322fcb87cf3b0c783c18a5183a760b659754",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
        "patch": "@@ -104,6 +104,12 @@ class Sock\n      */\n     [[nodiscard]] virtual int Bind(const sockaddr* addr, socklen_t addr_len) const;\n \n+    /**\n+     * listen(2) wrapper. Equivalent to `listen(this->Get(), backlog)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    [[nodiscard]] virtual int Listen(int backlog) const;\n+\n     /**\n      * accept(2) wrapper. Equivalent to `std::make_unique<Sock>(accept(this->Get(), addr, addr_len))`.\n      * Code that uses this wrapper can be unit tested if this method is overridden by a mock Sock"
      }
    ]
  },
  {
    "sha": "291de89ddcaa2616d89e3b673bdfc85e3e015632",
    "node_id": "C_kwDOABII59oAKDI5MWRlODlkZGNhYTI2MTZkODllM2I2NzNiZGZjODVlM2UwMTU2MzI",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-19T09:35:09Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:22Z"
      },
      "message": "net: convert standalone SetSocketNonBlocking() to Sock::SetNonBlocking()\n\nThis further encapsulates syscalls inside the `Sock` class.\n\nCo-authored-by: practicalswift <practicalswift@users.noreply.github.com>",
      "tree": {
        "sha": "e1237ab738c236b99d51b7586234b61accc4c52c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1237ab738c236b99d51b7586234b61accc4c52c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/291de89ddcaa2616d89e3b673bdfc85e3e015632",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhg8ACgkQVN8G9ktV\ny7/NKiAAm6gAqmXEDL7todwIp6jvj4adNLNJjAEegw7Nb/vJ3ZOvttR43AMTYmsG\n0NuQJyv0zYSXF9viIJ9kUuYHU7xO1QD9nF08Haw0eujg1XueWmpIEpMKoZDwmDIl\nsElLqBvZ/NkIMF/zj+Jj/lvAxA4hlEbYC4LwNhf1L/Jgp82J9wQYeDlsvCti1JgW\nZCxXbmWtq/P1OlNeXaYMQHdgAuFd15urAl0UhODsw+LuD4l5LekPdlhvXb8/wHzy\nftq1FSzdGVZP6RI5wf2/ome9a8ZPGAzagBikW5iBgdyoD+v2IcP6OLH6VawssIB0\npkvukdVEsZ8cvobzRvSLbVYSfhkhuxN0fRg8jQdboeaOOjd57p0jQXJ0rzuT0Tha\n5oGWFKcAss6ZWhvwr94aoNptBZaQf8G98e1s7XwNPh56HIB9lf5i96UFPLsUGwEq\nmNhE0wOYuMa9Y8x6jitZS2XBWvqw7326l4iilUeE7Gtfd/gLR6g8pGN7WEYNFd/n\nCUGueP36kkc/2EwS3qnligz47pXgOurV2Z3a2cf6twBxmU3Kt4/6YeenYYlPXkVm\nzEtMZFhpdv23wP24P5YN+gmRWjWgPY+MeZKwQNiYna4laOpb0weOqvyTwIuDuZP2\n2+WwI1r5z5iqRg7oxGYYD2GOZvxqDn1YV9efnXGIQYGGmo3H3Iw9uttW74IQlY8D\nVA9it7gTEuMi6l8/6Ab+niiYpbvG33XFOZzEohsIFA3T9qC6ezI7erGy0lfAzWMB\nh6jrCzC0tMnqc7HRhv5Cz/pMZEZk3Z4Gd1WKNg3GEljzc7Zv+ZYT+nFkc3o6EYW3\nAxuiDMhIDr8Xzi84ni4wzHZ0cADhbwh6NX2iX/a3ubSrxGYfSGPb4pD6sXAziP9i\n7gm97cjPL1Rfddk7zrygk1yrp4IG4DRhxFMB0cZkZQhmf03IVVIFjBL7MINuLfWR\n6mh0lB1BB/bBgIEWDo046lWBu7ath0ItVChEUzAm8JAYWUresfz6u2dpJnLSzX6I\nDDIbDVFYw5VEKvmKM517LHukFqzyZ2ZMwsgwSHBBCjKSKpRAkcTCd89LL0L6EJ88\nKYugeCMr/aLkXF5KlvlFNc87ZO8/Stx+N50MoGmzfeL5Dra0SakeNmrbeMX7LrEG\nv6/YnJR/EPt/mFU65bXFnk/IOTgYbsZtZfUkLiUwZOY7i9wRcCdjl/JbBjKhOjz1\nGy8AYNxnvleRdN+L9bgNhpVfDIiqbYdKDOEZBazQxfWSlIKbCnNpIItbjh9wouDA\nzmhVz2C4IVIiHQvlFH6q01V7g9zcNmtT4UTUGZU2t7Nq3P4czbD+x+a9zwZ1Mm60\naSWiiHgnmjJMDmQvsZqC1Y0YrWh0lg==\n=Vm+B\n-----END PGP SIGNATURE-----",
        "payload": "tree e1237ab738c236b99d51b7586234b61accc4c52c\nparent c47c68ab90f869dbef183617ddd8b3c6fc6a61ed\nauthor Vasil Dimov <vd@FreeBSD.org> 1618824909 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368782 +0100\n\nnet: convert standalone SetSocketNonBlocking() to Sock::SetNonBlocking()\n\nThis further encapsulates syscalls inside the `Sock` class.\n\nCo-authored-by: practicalswift <practicalswift@users.noreply.github.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291de89ddcaa2616d89e3b673bdfc85e3e015632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/291de89ddcaa2616d89e3b673bdfc85e3e015632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291de89ddcaa2616d89e3b673bdfc85e3e015632/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c47c68ab90f869dbef183617ddd8b3c6fc6a61ed"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 44,
      "deletions": 31
    },
    "files": [
      {
        "sha": "42b40cc26f1cbf43aaf34fe739be768947e0532f",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 30,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=291de89ddcaa2616d89e3b673bdfc85e3e015632",
        "patch": "@@ -304,8 +304,7 @@ enum class IntrRecvError {\n  *          read.\n  *\n  * @see This function can be interrupted by calling InterruptSocks5(bool).\n- *      Sockets can be made non-blocking with SetSocketNonBlocking(const\n- *      SOCKET&, bool).\n+ *      Sockets can be made non-blocking with Sock::SetNonBlocking().\n  */\n static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const Sock& sock)\n {\n@@ -524,7 +523,7 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n     }\n \n     // Set the non-blocking option on the socket.\n-    if (!SetSocketNonBlocking(sock->Get(), true)) {\n+    if (!sock->SetNonBlocking()) {\n         LogPrintf(\"Error setting socket to non-blocking: %s\\n\", NetworkErrorString(WSAGetLastError()));\n         return nullptr;\n     }\n@@ -722,33 +721,6 @@ bool LookupSubNet(const std::string& strSubnet, CSubNet& ret, DNSLookupFn dns_lo\n     return false;\n }\n \n-bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking)\n-{\n-    if (fNonBlocking) {\n-#ifdef WIN32\n-        u_long nOne = 1;\n-        if (ioctlsocket(hSocket, FIONBIO, &nOne) == SOCKET_ERROR) {\n-#else\n-        int fFlags = fcntl(hSocket, F_GETFL, 0);\n-        if (fcntl(hSocket, F_SETFL, fFlags | O_NONBLOCK) == SOCKET_ERROR) {\n-#endif\n-            return false;\n-        }\n-    } else {\n-#ifdef WIN32\n-        u_long nZero = 0;\n-        if (ioctlsocket(hSocket, FIONBIO, &nZero) == SOCKET_ERROR) {\n-#else\n-        int fFlags = fcntl(hSocket, F_GETFL, 0);\n-        if (fcntl(hSocket, F_SETFL, fFlags & ~O_NONBLOCK) == SOCKET_ERROR) {\n-#endif\n-            return false;\n-        }\n-    }\n-\n-    return true;\n-}\n-\n void InterruptSocks5(bool interrupt)\n {\n     interruptSocks5Recv = interrupt;"
      },
      {
        "sha": "d0e36a5e924bcc4a52c55672f1c035b7781719e7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=291de89ddcaa2616d89e3b673bdfc85e3e015632",
        "patch": "@@ -221,7 +221,6 @@ bool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nT\n bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, uint16_t port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed);\n \n /** Disable or enable blocking-mode for a socket */\n-bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking);\n void InterruptSocks5(bool interrupt);\n \n /**"
      },
      {
        "sha": "aa5f4b530b67a2fb61d2fb9314e9847242f001eb",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=291de89ddcaa2616d89e3b673bdfc85e3e015632",
        "patch": "@@ -245,6 +245,19 @@ int FuzzedSock::GetSockName(sockaddr* name, socklen_t* name_len) const\n     return 0;\n }\n \n+bool FuzzedSock::SetNonBlocking() const\n+{\n+    constexpr std::array setnonblocking_errnos{\n+        EBADF,\n+        EPERM,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, setnonblocking_errnos);\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool FuzzedSock::IsSelectable() const\n {\n     return m_selectable;"
      },
      {
        "sha": "1d23f66ec67c472664714555da9a9bb2a0b6bb8d",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=291de89ddcaa2616d89e3b673bdfc85e3e015632",
        "patch": "@@ -81,6 +81,8 @@ class FuzzedSock : public Sock\n \n     int GetSockName(sockaddr* name, socklen_t* name_len) const override;\n \n+    bool SetNonBlocking() const override;\n+\n     bool IsSelectable() const override;\n \n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;"
      },
      {
        "sha": "e2110c05394c3ef0eff272f7103a0c7e7e626042",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=291de89ddcaa2616d89e3b673bdfc85e3e015632",
        "patch": "@@ -162,6 +162,8 @@ class StaticContentsSock : public Sock\n         return 0;\n     }\n \n+    bool SetNonBlocking() const override { return true; }\n+\n     bool IsSelectable() const override { return true; }\n \n     bool Wait(std::chrono::milliseconds timeout,"
      },
      {
        "sha": "87c88a4b0a80ef7a645b2fd88c7c0209e7e20d74",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=291de89ddcaa2616d89e3b673bdfc85e3e015632",
        "patch": "@@ -131,6 +131,25 @@ bool Sock::SetNoDelay() const\n     return SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == 0;\n }\n \n+bool Sock::SetNonBlocking() const\n+{\n+#ifdef WIN32\n+    u_long on{1};\n+    if (ioctlsocket(m_socket, FIONBIO, &on) == SOCKET_ERROR) {\n+        return false;\n+    }\n+#else\n+    const int flags{fcntl(m_socket, F_GETFL, 0)};\n+    if (flags == SOCKET_ERROR) {\n+        return false;\n+    }\n+    if (fcntl(m_socket, F_SETFL, flags | O_NONBLOCK) == SOCKET_ERROR) {\n+        return false;\n+    }\n+#endif\n+    return true;\n+}\n+\n bool Sock::IsSelectable() const\n {\n #if defined(USE_POLL) || defined(WIN32)"
      },
      {
        "sha": "fb82a5d2ed164dc3b2406d1f8804282a5058f868",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/291de89ddcaa2616d89e3b673bdfc85e3e015632/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=291de89ddcaa2616d89e3b673bdfc85e3e015632",
        "patch": "@@ -151,6 +151,12 @@ class Sock\n      */\n     [[nodiscard]] virtual bool SetNoDelay() const;\n \n+    /**\n+     * Set the non-blocking option on the socket.\n+     * @return true if set successfully\n+     */\n+    [[nodiscard]] virtual bool SetNonBlocking() const;\n+\n     /**\n      * Check if the underlying socket can be used for `select(2)` (or the `Wait()` method).\n      * @return true if selectable"
      }
    ]
  },
  {
    "sha": "c4501fb7aafff25e3d15b2be26856e1711d18315",
    "node_id": "C_kwDOABII59oAKGM0NTAxZmI3YWFmZmYyNWUzZDE1YjJiZTI2ODU2ZTE3MTFkMTgzMTU",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-29T15:39:02Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:23Z"
      },
      "message": "net: remove now unused Sock::Release()",
      "tree": {
        "sha": "4c6d1cfd410e71f8ae804f7970c50fe0d56c97b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c6d1cfd410e71f8ae804f7970c50fe0d56c97b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4501fb7aafff25e3d15b2be26856e1711d18315",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhg8ACgkQVN8G9ktV\ny7/OvyAAqu9T3I18abmdV0GC2yu8hLkxf/N/OLRxcQ0vFgSxI5g1srhClcu/5m7J\n5YFGVzCEfj+mCxEthxAPacM7xiSkAxCUbryBrarDTE8VOHn9vilaLd5Q64WKSwut\ndtJ1B/AOlkZesSJ98aSlEvf3UstencJjGdhX40GjsjtOiqLvQnsffVmjoYbZ4cXz\nXKWwtNwwMPZFkay5LU3U91ySmMZj4XgUE2S003eJzHxowr7sLyPTkPEcIAoXq3N9\naxoc3B8yhTYIkw3LN1n/NmoPJ8GBxiUzrHggPTFDnqI77gtgh9iI5v8G7BdSyNAk\nf+LXkjcmYvka9F+FMKhgab4Auem5QMKmwAu0JC0APh6Uqp48XkgR344vVolAgjDV\nDHhGU2dWP8rwWSEqO40KgtDebSwNaEAPo1ibYhitxylrXKH7hcZSRZdlwnj7EM+t\nUbkOV5yxCeZ/PDZqRy99unWQUqEaYa7QFE25nN8+v0RBod3ZWRgbGblnMeN5LOl8\n70DIo+/bSfRIjJk7V7teiLAC2wAfWz8OgYeq+PMZ5EtrU3Wpr/49y8qDiciMOPju\nByGK8MbJ0qNGPLcBIJY3Eu320EMsJqyrSSGn0MNi43a1Lovj1LPah0f39swPCu/Q\nXgJK/uFyprFS2+80wMqO8jvUCXsHchRpkgHhZCbwvQerE0YIKJsu6GjNVm0Axjsz\nZ6gwmNGZ80aGfs6z/luV5XDEr9KNWOgP0OEbazfllEx7AMNzmdcRkUvzJ7ApGIsK\nrQGQsK8i6PdiZcZPmeA8vDgOmOor4XVXAskBHqyiKcCcrZRgdT//k4mN6aABRwXN\ni43KmfZIxBEGbGtTlFy/v7kVFQfv4xxBtO/o6Usc2Qv4G9bAuKNGvbMdxM0Ocuzu\n8+6SQrV8EE8T011HUfAY8smGS8qyMkDHl2Lj7j5iCOmG8H3JqMLg9zmmPTuGe1fm\ncS+j4DN61cONo4bXAeRIN2KtC16JzP71KGiMZIXku0EUbl5NtoqojVnnrJW8gQVM\nTVfZY1H1pLYlcjEKNNi4xlTOlBMm5JWrwXIieebqA9lKRi9ycwoorLTR1ZQst64Z\n8qUT5Sh068IoAaxuBZLwJfwXTJmp3tdV+VAJbFpvmEKzcyQ13FUKXXysn5Fu84Fp\nLckzbhpIa3xCKZ0NWCXEMJq+glHTP2VGuu1dyklMXdS6O1uM9uAa7XPu18G8vfug\nU1KMNBoqGbtAAGD/VOaHHWg7ULRuENslQBP9GRc4O+42ip11Rg9Ck7G4UWje3ZIl\nPCEQW8INbOekZlXpDXVMqFWa/2lUCxgjKouSDM/afH5yGeNNQF4HZWBsudifme9N\nSZRydOdBhGXXRNdPj6TyiXaXj27sEg==\n=7FcU\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c6d1cfd410e71f8ae804f7970c50fe0d56c97b1\nparent 291de89ddcaa2616d89e3b673bdfc85e3e015632\nauthor Vasil Dimov <vd@FreeBSD.org> 1619710742 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368783 +0100\n\nnet: remove now unused Sock::Release()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4501fb7aafff25e3d15b2be26856e1711d18315",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4501fb7aafff25e3d15b2be26856e1711d18315",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4501fb7aafff25e3d15b2be26856e1711d18315/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "291de89ddcaa2616d89e3b673bdfc85e3e015632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/291de89ddcaa2616d89e3b673bdfc85e3e015632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/291de89ddcaa2616d89e3b673bdfc85e3e015632"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 0,
      "deletions": 24
    },
    "files": [
      {
        "sha": "4a5b25c61bd3cbcb1661e6e7dcd17b06ccd76f61",
        "filename": "src/test/sock_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4501fb7aafff25e3d15b2be26856e1711d18315/src/test/sock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4501fb7aafff25e3d15b2be26856e1711d18315/src/test/sock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sock_tests.cpp?ref=c4501fb7aafff25e3d15b2be26856e1711d18315",
        "patch": "@@ -69,16 +69,6 @@ BOOST_AUTO_TEST_CASE(move_assignment)\n     BOOST_CHECK(SocketIsClosed(s));\n }\n \n-BOOST_AUTO_TEST_CASE(release)\n-{\n-    SOCKET s = CreateSocket();\n-    Sock* sock = new Sock(s);\n-    BOOST_CHECK_EQUAL(sock->Release(), s);\n-    delete sock;\n-    BOOST_CHECK(!SocketIsClosed(s));\n-    BOOST_REQUIRE(CloseSocket(s));\n-}\n-\n BOOST_AUTO_TEST_CASE(reset)\n {\n     const SOCKET s = CreateSocket();"
      },
      {
        "sha": "d8cfb84c570fe21e17c22615c193a2fcd88a3184",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4501fb7aafff25e3d15b2be26856e1711d18315/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4501fb7aafff25e3d15b2be26856e1711d18315/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=c4501fb7aafff25e3d15b2be26856e1711d18315",
        "patch": "@@ -50,13 +50,6 @@ Sock& Sock::operator=(Sock&& other)\n \n SOCKET Sock::Get() const { return m_socket; }\n \n-SOCKET Sock::Release()\n-{\n-    const SOCKET s = m_socket;\n-    m_socket = INVALID_SOCKET;\n-    return s;\n-}\n-\n void Sock::Reset() { CloseSocket(m_socket); }\n \n ssize_t Sock::Send(const void* data, size_t len, int flags) const"
      },
      {
        "sha": "d6a31f1253d59147fae7c29eaa721eb4f27c2065",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4501fb7aafff25e3d15b2be26856e1711d18315/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4501fb7aafff25e3d15b2be26856e1711d18315/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=c4501fb7aafff25e3d15b2be26856e1711d18315",
        "patch": "@@ -68,13 +68,6 @@ class Sock\n      */\n     [[nodiscard]] virtual SOCKET Get() const;\n \n-    /**\n-     * Get the value of the contained socket and drop ownership. It will not be closed by the\n-     * destructor after this call.\n-     * @return socket or INVALID_SOCKET if empty\n-     */\n-    virtual SOCKET Release();\n-\n     /**\n      * Close if non-empty.\n      */"
      }
    ]
  },
  {
    "sha": "b8ac56dd64dd9b971693573b58b7f8e95588adc6",
    "node_id": "C_kwDOABII59oAKGI4YWM1NmRkNjRkZDliOTcxNjkzNTczYjU4YjdmOGU5NTU4OGFkYzY",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-29T15:35:43Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:24Z"
      },
      "message": "net: remove now unused CloseSocket()\n\nDo the closing in `Sock::Reset()` and remove the standalone\n`CloseSocket()`.",
      "tree": {
        "sha": "fa901c6a6769bdb3cf590ce843e575b359293626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa901c6a6769bdb3cf590ce843e575b359293626"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8ac56dd64dd9b971693573b58b7f8e95588adc6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhhAACgkQVN8G9ktV\ny78VQyAAl00CF9YA4yoA1z9AJCnSYLwi8hoPXmD0asEKOq31fcfmrbgvb0CVVWub\nYrMwALRka5H0CvNZXWaGeJFUlhWcFEkdfD2XQBIpZH0AdKM1VwhqW3DCs6aiZ6tb\nTQdqf/is2EfHXanvT9eoZQFEmTKkMl23Uur4X9aIJCCLjhOz6sIFUqm95j7D9ZE1\nm97KM29HjHHr7AvrHfPtawF+TeXimk+vgrh3zgz4uzR4I2d/4EY70spAvnJs2/lc\nr8ECuF/Oz+waU4toSNoRZSlHFN8b2ZXO/GkEs9E6IOahIFHFvMC+UKvCafQ2Qkec\n8jDmhWwUZ2EOmnoNfgr2XQ2Xzh3OPq4LKArl10F20VgtASR/aEidbs8hNg9naLNj\nafkylwT1ptJJL74Wcr3ItmSjH4xtseCMFzjCom08xZX2KbvSktSfNcNsoOk11dXT\nBgnnq8hbww3zTQXYxgNLg9TcpQIY9B5336MiAr3qbuQk5Ik9mypqRrMjMBw6xXrl\nx4qEihs4aF+hVwDXiUVjQi37CklTeovQwvye7/GhVC4zkKfnmN/sAKpGYLDOSrOd\niyZ0qSn4Auerh23+ZMnK7PyE5w+0SdD/016RnLcr9eaF1rP5kw3l8avPK6DuvTB1\nDyEy4yoZc15M0Zre/EGZnjuSRNHGMZqyOhqBPVSx798oEa5lrGuBMQUzmAGpdUDo\naPs+8F8GtJn7g9bqFjNET9HRctR+nJxxxCwZTghe6YmltPwZDgH8zuioN46dJHiU\nz3kBilujNAj+KtJOAO+SyF/oyHj0nSs34nmQByYKY8tMLWZhjFWG2uEiJoH7mfp/\nLuEKv1ZnlAX6t7kbDUCaQh7YAohpMCttG8JCzVPaGzeJ/QWUAqgwxICpBxzTNicB\nClguTmTeGxqv5DYbSCbTV9wR/DButJOiT874mqeYWd/ECP7T3ahq8ohWmKoZ/wuf\n0wY+k5RhB42lX43a/anOVAa6c1TrJsfMAu+9kY4wzZ+lt12SnTHB9y0N1UMqwK3f\nghiNupBdqayCNvVRy8TbfdWIJ8c3Azrg6cx3p74TAi54Rf/M4EUTOdNrncGEIyhn\nSVVJt6OD9Tr5VRmazBom2okOsmL/2ogYGqDixPYVLFowIKEvQkVSLdiQ/XbL92iv\n5yohEmiY98xy/GUQTmPzZtsA1WtK8DJDSNTZUuh+rFuFXt5nweel7yKykjh2rQ3n\nu7b8qbmHNEBbHBVfVZ6tUO86riqTqmnzy1XlJO9PYUG1QZEucYd/N4Fux88pIA2V\nX9naoHtwxkrG2VCigrUJPfsyuGlKm89zfWIdxz/or3ESSw8aY/i0w1S63+W5WXcd\nSQCh3LgyFe3jpalTxzG0HNX+WcFr8g==\n=eyel\n-----END PGP SIGNATURE-----",
        "payload": "tree fa901c6a6769bdb3cf590ce843e575b359293626\nparent c4501fb7aafff25e3d15b2be26856e1711d18315\nauthor Vasil Dimov <vd@FreeBSD.org> 1619710543 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368784 +0100\n\nnet: remove now unused CloseSocket()\n\nDo the closing in `Sock::Reset()` and remove the standalone\n`CloseSocket()`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ac56dd64dd9b971693573b58b7f8e95588adc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8ac56dd64dd9b971693573b58b7f8e95588adc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ac56dd64dd9b971693573b58b7f8e95588adc6/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4501fb7aafff25e3d15b2be26856e1711d18315",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4501fb7aafff25e3d15b2be26856e1711d18315",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4501fb7aafff25e3d15b2be26856e1711d18315"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 15,
      "deletions": 21
    },
    "files": [
      {
        "sha": "a6ec837f7824b6ae9a36e830888629175495ea92",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8ac56dd64dd9b971693573b58b7f8e95588adc6/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8ac56dd64dd9b971693573b58b7f8e95588adc6/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=b8ac56dd64dd9b971693573b58b7f8e95588adc6",
        "patch": "@@ -21,7 +21,7 @@ FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n FuzzedSock::~FuzzedSock()\n {\n     // Sock::~Sock() will be called after FuzzedSock::~FuzzedSock() and it will call\n-    // Sock::Reset() (not FuzzedSock::Reset()!) which will call CloseSocket(m_socket).\n+    // Sock::Reset() (not FuzzedSock::Reset()!) which will call close(m_socket).\n     // Avoid closing an arbitrary file descriptor (m_socket is just a random very high number which\n     // theoretically may concide with a real opened file descriptor).\n     Reset();"
      },
      {
        "sha": "1e7542a4c3231e011be7c5ff7f86f2540e7971cd",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8ac56dd64dd9b971693573b58b7f8e95588adc6/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8ac56dd64dd9b971693573b58b7f8e95588adc6/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=b8ac56dd64dd9b971693573b58b7f8e95588adc6",
        "patch": "@@ -50,7 +50,20 @@ Sock& Sock::operator=(Sock&& other)\n \n SOCKET Sock::Get() const { return m_socket; }\n \n-void Sock::Reset() { CloseSocket(m_socket); }\n+void Sock::Reset() {\n+    if (m_socket == INVALID_SOCKET) {\n+        return;\n+    }\n+#ifdef WIN32\n+    int ret = closesocket(m_socket);\n+#else\n+    int ret = close(m_socket);\n+#endif\n+    if (ret) {\n+        LogPrintf(\"Error closing socket %d: %s\\n\", m_socket, NetworkErrorString(WSAGetLastError()));\n+    }\n+    m_socket = INVALID_SOCKET;\n+}\n \n ssize_t Sock::Send(const void* data, size_t len, int flags) const\n {\n@@ -441,19 +454,3 @@ std::string NetworkErrorString(int err)\n     return strprintf(\"%s (%d)\", s, err);\n }\n #endif\n-\n-bool CloseSocket(SOCKET& hSocket)\n-{\n-    if (hSocket == INVALID_SOCKET)\n-        return false;\n-#ifdef WIN32\n-    int ret = closesocket(hSocket);\n-#else\n-    int ret = close(hSocket);\n-#endif\n-    if (ret) {\n-        LogPrintf(\"Socket close failed: %d. Error: %s\\n\", hSocket, NetworkErrorString(WSAGetLastError()));\n-    }\n-    hSocket = INVALID_SOCKET;\n-    return ret != SOCKET_ERROR;\n-}"
      },
      {
        "sha": "6619bcbe204fbf812d10cd7479e2f988c271113c",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8ac56dd64dd9b971693573b58b7f8e95588adc6/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8ac56dd64dd9b971693573b58b7f8e95588adc6/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=b8ac56dd64dd9b971693573b58b7f8e95588adc6",
        "patch": "@@ -286,7 +286,4 @@ class Sock\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n \n-/** Close socket and set hSocket to INVALID_SOCKET */\n-bool CloseSocket(SOCKET& hSocket);\n-\n #endif // BITCOIN_UTIL_SOCK_H"
      }
    ]
  },
  {
    "sha": "b6c0a79063976cba061e7b83c4fa7f2ca989a6a1",
    "node_id": "C_kwDOABII59oAKGI2YzBhNzkwNjM5NzZjYmEwNjFlN2I4M2M0ZmE3ZjJjYTk4OWE2YTE",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-25T13:01:53Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:24Z"
      },
      "message": "i2p: avoid using Sock::Get() for checking for a valid socket\n\nPeeking at the underlying socket file descriptor of `Sock` and checkig\nif it is `INVALID_SOCKET` is bad encapsulation and stands in the way of\ntesting/mocking/fuzzing.\n\nInstead use an empty unique_ptr to denote that there is no valid socket.",
      "tree": {
        "sha": "b861c36451a1a90dce6ab3542824d24536cd3da7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b861c36451a1a90dce6ab3542824d24536cd3da7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhhEACgkQVN8G9ktV\ny7/qFSAAg20M5uN8+wonitpO0jpuYEqsNU/gUd3di2MplnDvoP1ENPagYD5fRq0j\n9JE/w4Fd5hrcNSbWxT5ueKUxwKujxKyFEDPd6K/88y/IsP1fNhOVCwzM44AV912H\nBb7eBT2TAqIvKmiVWBUgQ16hkPQPFirZN0JLRBKP2dBplhy6hVq5JaCPTWWPrA80\nnjeuqkIO4jtUsSZbSdEGXx7MkDBdFicwNZQnN/SocOLUKCFWTxXfOqChU27iN/qk\nYz6ztYtDYN2GHIyxVLlbpeDynJnaGfsTKtkp8HGAKjldKZPp+l9JTj3mfFsbxAdv\ns6CLGAdYaOvMEkEkJCERc1Z68uDMytA4uzOvRl7jDPx7caDDhM7g9t5yKRAeVKeX\nq5Xz9QRwpu8hUs7jk/0TkAXSVt/pFuwzfO8elwxkafib/z3Kxt4R3xDXcDwpLWxO\n9Ex47pkCWwl84eICUc3IjUF6T0CkLaqsJfJvyN2a1xVzOSG7MOZ/Z7cqPpbrUAio\nbH3wDfAJycfckJD69J61FIspWVr5QEnS0Qyc+0mzt/6n3HJPIzcjvCRxplIKHfOt\nXo8ltSut06gbSgoAUTjOVknKTYj8EcUC25owTVLrgTqzu1MyIgh6Gl5wornFLols\nfcfi/b2dBzjMyJCHXkZfrPccnkV1NFBlJWHnjdfvm6fsODcKxIyX0q6lNFbMwcPu\n7O+QGxgq/f/Ef52KE2Wdhy4ZOXA+4/4S08YXfuAWXNPlYrg1+LvYtiVRUgLX8rUi\nSw9biDZWGQzskuotqXm9t5z5NgjiC7sinsqpKYiyLOKnNQGUIs+YF0dwtHGqnv6D\nqH2ZJfM3QhyElcFd9POPJ11+F2fW47tiYofmbPssTlmebLxSWqMONvMGIIE6kSZN\n0rpuV2rBnvIX/M1AmPtJm+Hd3PEc87sfUCUxSPX1QJiuQjWhBiVG93X210TzVCdZ\nlfydxqRy578PZl12Nk64/finhyjV0KM5iMXNO/l2CrZ7INknlxv5GX8HJmIUvghy\nu4aogTP8P2wo8XovqIK3wcEYglA34j+frfeSemm+//PvOKO4gX98ZyT5jvYCgZ3U\nX5Mr0Oz/f+2sRX37l5gWkmRMWK0g8vNzBfcDvWLv1tbFQMvow5WjfNURcMGG70X6\nHgG0xlJezTzB+jT89YsR5m6tJnGoSv9RF7mVbSuMX4pK9owsVFSJVr7WB+66mV7N\nwEHc6G9cSheoIz+yxNCyMDG1yrqDIAb/Vav9ZRbp3s0rHF+EHPLITC+oS3/WxQM5\nJ0F82+rtaqy8CtOY6PM6VQuayjfxbsUB9MAFKTYOiqOifjAB1Wi5CHlo64YaiNLx\nWoOym865VKLdM2CZzf0VFlEYA4WN1A==\n=43n8\n-----END PGP SIGNATURE-----",
        "payload": "tree b861c36451a1a90dce6ab3542824d24536cd3da7\nparent b8ac56dd64dd9b971693573b58b7f8e95588adc6\nauthor Vasil Dimov <vd@FreeBSD.org> 1621947713 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368784 +0100\n\ni2p: avoid using Sock::Get() for checking for a valid socket\n\nPeeking at the underlying socket file descriptor of `Sock` and checkig\nif it is `INVALID_SOCKET` is bad encapsulation and stands in the way of\ntesting/mocking/fuzzing.\n\nInstead use an empty unique_ptr to denote that there is no valid socket.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8ac56dd64dd9b971693573b58b7f8e95588adc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8ac56dd64dd9b971693573b58b7f8e95588adc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8ac56dd64dd9b971693573b58b7f8e95588adc6"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1d28e91dbb1108f3e2c4e5a5616a80f6cff93df2",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=b6c0a79063976cba061e7b83c4fa7f2ca989a6a1",
        "patch": "@@ -116,8 +116,7 @@ namespace sam {\n Session::Session(const fs::path& private_key_file,\n                  const CService& control_host,\n                  CThreadInterrupt* interrupt)\n-    : m_private_key_file(private_key_file), m_control_host(control_host), m_interrupt(interrupt),\n-      m_control_sock(std::make_unique<Sock>(INVALID_SOCKET))\n+    : m_private_key_file(private_key_file), m_control_host(control_host), m_interrupt(interrupt)\n {\n }\n \n@@ -304,7 +303,7 @@ void Session::CheckControlSock()\n     LOCK(m_mutex);\n \n     std::string errmsg;\n-    if (!m_control_sock->IsConnected(errmsg)) {\n+    if (m_control_sock && !m_control_sock->IsConnected(errmsg)) {\n         Log(\"Control socket error: %s\", errmsg);\n         Disconnect();\n     }\n@@ -352,7 +351,7 @@ Binary Session::MyDestination() const\n void Session::CreateIfNotCreatedAlready()\n {\n     std::string errmsg;\n-    if (m_control_sock->IsConnected(errmsg)) {\n+    if (m_control_sock && m_control_sock->IsConnected(errmsg)) {\n         return;\n     }\n \n@@ -404,14 +403,14 @@ std::unique_ptr<Sock> Session::StreamAccept()\n \n void Session::Disconnect()\n {\n-    if (m_control_sock->Get() != INVALID_SOCKET) {\n+    if (m_control_sock) {\n         if (m_session_id.empty()) {\n             Log(\"Destroying incomplete session\");\n         } else {\n             Log(\"Destroying session %s\", m_session_id);\n         }\n+        m_control_sock.reset();\n     }\n-    m_control_sock->Reset();\n     m_session_id.clear();\n }\n } // namespace sam"
      },
      {
        "sha": "d38d37a7982682d70c2e14eefb35bff75d409035",
        "filename": "src/i2p.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1/src/i2p.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1/src/i2p.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.h?ref=b6c0a79063976cba061e7b83c4fa7f2ca989a6a1",
        "patch": "@@ -248,6 +248,7 @@ class Session\n      * (\"SESSION CREATE\"). With the established session id we later open\n      * other connections to the SAM service to accept incoming I2P\n      * connections and make outgoing ones.\n+     * If not connected then this unique_ptr will be empty.\n      * See https://geti2p.net/en/docs/api/samv3\n      */\n     std::unique_ptr<Sock> m_control_sock GUARDED_BY(m_mutex);"
      }
    ]
  },
  {
    "sha": "34c52570c299229823b2e297782b566d266c7b3a",
    "node_id": "C_kwDOABII59oAKDM0YzUyNTcwYzI5OTIyOTgyM2IyZTI5Nzc4MmI1NjZkMjY2YzdiM2E",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-25T13:05:26Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:25Z"
      },
      "message": "net: don't check if the socket is valid in GetBindAddress()\n\nThe socket is always valid (the underlying file descriptor is not\n`INVALID_SOCKET`) when `GetBindAddress()` is called.",
      "tree": {
        "sha": "7a2ad39042fa5dd74b123a8cf4abebc59a71bc6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a2ad39042fa5dd74b123a8cf4abebc59a71bc6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34c52570c299229823b2e297782b566d266c7b3a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhhIACgkQVN8G9ktV\ny7/OaB/9Gh7hgc1e1hmZBJT9k6Oc3JS9Z0FtAiEprPmjTqZtvffunHVuoxFgnUr4\nUW/rsF3AYf26rNUjKhlmaEnPkce9c9HEz4wwE5J/zEh0UjLO/Ys5W+sY41X7BVZU\nJTTTNMLOUYun4IfswKrcAJK393oLwhIC+l0qM66dyr0gaKEjIa7ly6IPvbRRki0l\naUHrzuTWBz7/9tebWjf0d4WF1OGHzqfBYUJYgdtJX17Ip8FcxyhvQNRwsNa0H3qh\nuyFpwIEpncye9TwR3Zp3FosdLY/imGKAV4BlkXcIneKUM3XKAKzG6a3QcFG4j4Oh\nhwnzHDZ3VKaY6DbF+t1+HksxHnKQEDSHLJWF/F5oVVeS7JoXxf39bSJj7RmEmq7m\nlKEmvY4w7ynOYzV4h+xwx8ZrsX9qI0aDHWYioJT2DfUoSKybly7ap1Y/KXuslTG6\nbA3ChYvPuSvUDrozcCaB33fiD1T1Vp+iFrcG7hqXLf+55HnC2COpe7DWmvcpMC35\n/l6qo0HY63Q/evlj/neKCQzA9rEpFCbP7mNOxs1mdm8QoL3yee81WGjGfWA9uWSJ\nzTZM55tuk2KZf2WKDpxBksUK0g2Cw1KrwjE2LCfDQOPUhn6eFI6p1d5Dxwno+mnZ\nJrCLWOhsZV1z9plkHu5Qfshg2AtNStwvejgE4uoR2ZdMnTKs9HMW0xeaifTtH20w\nmV8qKhyn3GJ4OeUY8zvb28cyjH5evRrVhQ1uoSOFWmspIVhfn8/6fAGV7g958fJw\nddPIkcBDGQnoKuxZ77t6I6+T4gGNMRPiZB9yftQHhEwMTUNyfnK5om/bT1GLMvBP\nRIzeFvRq3FZ//5KtqPaDBVKouoj9ozgCredMQQR+2UlqAaMRefUEeZBSZM6fhro9\nFOePvpBMDG1qDLIe6wZsjgsbXO4kjgQ3VRtKJ/AYeFHuy98ks9enZjBNBstGzcrr\nYAPBRmIEcPwOvJp//yLTRiRcc1WaCzGuoM148EyIQSIAYLfB+0faNtePe8+vSBpd\nommt0swB8h+XFdXoJXCionx6nQO285bUDGlYBttr26SJWIdLEWQy8VUmcSpaLRsY\nmLcN8pmDH+oGckoqI1EilKIgwmjmLOiSkLnyyTYRkTsHXsePFWWiHP0UooPKJ5bx\nJALqBGyeYBBdyoeCa/GaNy0AkTehfv+LiZrP04cWUiB/pO1tOp5vpB44wLGjwSCl\nmBwzqK+fZ+I10SjgGwyFsboUON4pS5Mn3bccnK+vN6zIwENK22uolzCQUyE7pyI/\n3dDgHbsTw+t0SWte3Ygo+Fhcp2odjDNk14ej5I2fmgJwVp3/fvUToxYVR+P3vUPQ\nADD5PRcKrhw4cTq9LRGFs5zrciM2Mg==\n=gMqt\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a2ad39042fa5dd74b123a8cf4abebc59a71bc6d\nparent b6c0a79063976cba061e7b83c4fa7f2ca989a6a1\nauthor Vasil Dimov <vd@FreeBSD.org> 1621947926 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368785 +0100\n\nnet: don't check if the socket is valid in GetBindAddress()\n\nThe socket is always valid (the underlying file descriptor is not\n`INVALID_SOCKET`) when `GetBindAddress()` is called.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c52570c299229823b2e297782b566d266c7b3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34c52570c299229823b2e297782b566d266c7b3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c52570c299229823b2e297782b566d266c7b3a/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6c0a79063976cba061e7b83c4fa7f2ca989a6a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c0a79063976cba061e7b83c4fa7f2ca989a6a1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 4,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d60b3862ef2304351298d6b15e95136cc20eb1a8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34c52570c299229823b2e297782b566d266c7b3a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34c52570c299229823b2e297782b566d266c7b3a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=34c52570c299229823b2e297782b566d266c7b3a",
        "patch": "@@ -389,12 +389,10 @@ static CAddress GetBindAddress(const Sock& sock)\n     CAddress addr_bind;\n     struct sockaddr_storage sockaddr_bind;\n     socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n-    if (sock.Get() != INVALID_SOCKET) {\n-        if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n-            addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind);\n-        } else {\n-            LogPrint(BCLog::NET, \"Warning: getsockname failed\\n\");\n-        }\n+    if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+        addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind);\n+    } else {\n+        LogPrint(BCLog::NET, \"Warning: getsockname failed\\n\");\n     }\n     return addr_bind;\n }"
      }
    ]
  },
  {
    "sha": "70815b1e9e9e33a3fe5d70bd526e60477230bd33",
    "node_id": "C_kwDOABII59oAKDcwODE1YjFlOWU5ZTMzYTNmZTVkNzBiZDUyNmU2MDQ3NzIzMGJkMzM",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-25T13:25:40Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:26Z"
      },
      "message": "net: don't check if the socket is valid in ConnectSocketDirectly()\n\nThe socket is always valid (the underlying file descriptor is not\n`INVALID_SOCKET`) when `ConnectSocketDirectly()` is called.",
      "tree": {
        "sha": "40d074a175cfc9316076cecd91ad90df1ec72169",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40d074a175cfc9316076cecd91ad90df1ec72169"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70815b1e9e9e33a3fe5d70bd526e60477230bd33",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhhIACgkQVN8G9ktV\ny79lZyAAiXVylcH8x6dnTPND7muuLssYEI9ShaAdqaZZYfiQ9VpJVfpDPgR3SUo6\nXGebQWVz2tcdSS6pUJJw6xBPjDRVorQuEdSSfTF+3no5YoTJmM4k7p6mpsEUWgfM\nwQBUH2Ky5iHukTczLmE4CBLN0lXyJEE3YFMH0DD/GA68mff2jiuKikF0+iDJLcVd\nDE9nfpG2l6Qoxz3c78ydDfw0mMlW3FOkWZNOReeyuFTIu8k2h3bm23ifMKs0Kwbu\nloNDVH1pAaTbbxyx2n2Csi1EJPgplzroF3y72LxkxxD5BdagxIiaMBw5qoJHOuxC\n2210nHvXzOzb/SwFjy1ogy8GuU2O2pnGJfq2y4adweHfxOLbPfMxS7JbpBLxHZx2\nnOwZX9iwVo6t7Rtl1F4785HYM9De1OWqrsRdTt1/hjt5J8q+dXqL5aF+1M7iAhGD\n537Xe2+o3+MtA014SvMsYQBySMgPZGcdSa/3hmRcB6Rglj22Et6KM9sbL/0XwDoW\n5l/USVVnZjxX3Fh1yI+fHaLn6yVWngzgk8zWpHrZpMY2X2YEW6htWJfeXMubkwp/\nLqFN5YRNPyNTxfhDxtShSi2v+3pjoZnFrhS/KltDzqX7NPaUIfbpCkuorrv6luSC\nIQsHaljMI56pq2LWDbj8NeTA0zF7oYHfCUt51QHcE6L9Gxbg4u8AtJkiHKmNmrH2\ndcnEVIYHquwrxGuPjenFuLn9kcGmyIEUDmH9/kVWUvl/Wo4+w70vyWA4uatN3BRZ\nWl3B3JqKBhI+qIJxdv0aqmBCnNekJ5NA45voO1F/j65XalbdaaK1YKarCcA8Pv6B\nUIHP09zaM93YYTX8SLhSsgS0QS6uZAP5SWkzC2SvX+0c2RMu5Iyk+z/AeXYkbxQZ\n/aRHTGBN9gDAWfjuaTCCo0L2EVvpH6s01Gryb09nOH0TWbYmvs9Y+fuzoo/Uzz7c\n157GySmSTRymegQzx6ZFtxAuEVj09wT47TZKqM1+5hdIKtcJ+8/lLFBvW1zFXMnC\n37MrTWSRaZrtfTgJPqsRT9ipVDzM0DOI7mjm+aLcTzlzLyhIjbj22MLlQU/SIzwd\ncqYigvlJHMDIrlO1RA6l2nS0gWlC/G+/f8vTGyS4lt+bzxU7T4fEtBOx5PDeQ1GC\n6OPmUZ6oj63Y83a38ptRt6t/qgr5Zc5bZNqhcO4YAWf1ThRH8/L0xPBFel+rAEvw\nNtQZvlxaVlCqdRL1poCDt4+7IqoESwELeX3x4EhZy/Azqw1hP2h2EqihyjY+z0Rk\ndRcrvZRjs9tcf3N3oHxltMU75u10q4VZrsaPJObiihfEN8ld/8pcW2kE4LT587T7\nt0Tuqqp8507mwgHz5pxQi6Wc7r6ukQ==\n=BQPB\n-----END PGP SIGNATURE-----",
        "payload": "tree 40d074a175cfc9316076cecd91ad90df1ec72169\nparent 34c52570c299229823b2e297782b566d266c7b3a\nauthor Vasil Dimov <vd@FreeBSD.org> 1621949140 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368786 +0100\n\nnet: don't check if the socket is valid in ConnectSocketDirectly()\n\nThe socket is always valid (the underlying file descriptor is not\n`INVALID_SOCKET`) when `ConnectSocketDirectly()` is called.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70815b1e9e9e33a3fe5d70bd526e60477230bd33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70815b1e9e9e33a3fe5d70bd526e60477230bd33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70815b1e9e9e33a3fe5d70bd526e60477230bd33/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34c52570c299229823b2e297782b566d266c7b3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c52570c299229823b2e297782b566d266c7b3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34c52570c299229823b2e297782b566d266c7b3a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "10815c012f54ae1d2983f8daf6ad5070920150d1",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70815b1e9e9e33a3fe5d70bd526e60477230bd33/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70815b1e9e9e33a3fe5d70bd526e60477230bd33/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=70815b1e9e9e33a3fe5d70bd526e60477230bd33",
        "patch": "@@ -547,10 +547,6 @@ bool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nT\n     // Create a sockaddr from the specified service.\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n-    if (sock.Get() == INVALID_SOCKET) {\n-        LogPrintf(\"Cannot connect to %s: invalid socket\\n\", addrConnect.ToString());\n-        return false;\n-    }\n     if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\n         LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\n         return false;"
      }
    ]
  },
  {
    "sha": "f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522",
    "node_id": "C_kwDOABII59oAKGY5NGVmNmEzNTg2OWYxZjJjZjBjYjMwZTdjNDI1OGJkMmVmNjc1MjI",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-29T16:01:03Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:27Z"
      },
      "message": "net: remove now unnecessary Sock::Get()\n\n`Sock::Get()` was used only in `sock.{cpp,h}`. Remove it and access\n`Sock::m_socket` directly.\n\nUnit tests that used `Get()` to test for equality still verify that the\nbehavior is correct, indirectly, by testing whether the socket is closed\nor not.",
      "tree": {
        "sha": "ceb6c84e6f476fc8aa8b1fc0ce6e543caecb6362",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ceb6c84e6f476fc8aa8b1fc0ce6e543caecb6362"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhhMACgkQVN8G9ktV\ny7/CSR/8D117vrLq+7WPbucjm7kjXl+fydHXAad3JgxqI64ZebVR3obfzvlSU99f\nPfOhvXTFj8ZgbS3/XzZa25uji517Bu/x51o3kNDOZ7MLUcIIrHSZJNpfU8+0BoPj\nYaHlrNl8pcq/HJs3ohpSdYnJtZtA5mK7TM9Fl+BGdBvoMLlAPqRO6uTIZ4tOjIOC\nwnpOgPGsPLrJpRTdBU/vogYjqa+GObG8J3j2legrc5p1w3e7UCQZHdRDbxN/yEyI\nol/X9mt1ZA2lgickubEZfqd3IvItfou1e6ahVi7+fBypROiAowhGKpKsPF0Sr1xO\nEEADW6eZNDGDYK9Us2VNCVVmW8a8qldjpaF92rbnyLEjgSp1ODtpXHrUW86E4pGm\nxBJCJ88yTD4phN/bucj56KRhH1YU3ViR2/4ynQsEOtgeTUo/TsaGczDWYze+t66R\nZe4XThDXxb7SYWRMQaiohGx5uKuwYWD7JZT+Jng+iXxYBDmxzlyiNp6jo7yPawWc\noeMiBFpjJtxUxWH0bcdIAEAfN2DzEysHIj2Z5cJr4z1BUSQKK+5f72CRLinLOsci\nNgiUqD53Tn6LwEpnszck2rS7vby8ZAcyF6/Kt7PVxLhZ410G+tWC6iAgwQLskpfU\nEvqJAD2kEQXEVR/MSe6gVvOsBmqp0djXa8DRs4fqNhzTfCHugtE6NH1zLH6sGbIk\n/Ndqhxtxm0IjtY2nnGkS850uK/plDEQ/FY28fcM5h3pITj30ac1YNJjCXdBPovCx\nHFHWpQQRoKmRb7vdJPq0xoU36/Y79JqmP5vfbG0smNr0zu1xP0FczuN7c65UoRJ7\nPmuOrr41bcjJb58IcovmLckB+CeyAraRGVIt/ZF40mrs2aFw0n9ZUcpU1cLglyOj\ny4IzUfasQiICg+o8LTl5Be7Mda/hnQooWQsCZHvJhdNMGAhcToJ+Ah09ieFqLikt\n42agh5erAbNxvpZMcT5Se0VMExVl0aaXyZ66xtGgnyrjsrhIod5MMepAiYsLVRUt\nLEz/MJdyD1A/9DrcJ6NHt6H1zEpjAAI3Nth2E4wucm9gj62vpxDwx84kt/rwVr7/\nPMOCnlU4TjCaKD5U6QYgLfoHE46Bpgx9MNG33o+ip7RPclX0YD2SrTGBHiT+akFH\nlFICdXiqtXOb03t5Cf0UPYW+IyQdFCtakTjXvLu4Mh/jlQJe2n+5KSta+3erU+vt\nP57z/l/u8UYYo15BGHxSW40BU5oTXKKqlMX+mUqlRfoFXU/+JsELqWdONpzcnK4z\nbbAqSFvcQlM6NyKRqtLMm7YostoHCIKtl+w2xpKwtDMn1upEqMJxO3xheHWn8Lbe\nIEIFOJHQr9Dm+pRKm9pqLiHT4sVYUA==\n=ixSL\n-----END PGP SIGNATURE-----",
        "payload": "tree ceb6c84e6f476fc8aa8b1fc0ce6e543caecb6362\nparent 70815b1e9e9e33a3fe5d70bd526e60477230bd33\nauthor Vasil Dimov <vd@FreeBSD.org> 1619712063 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368787 +0100\n\nnet: remove now unnecessary Sock::Get()\n\n`Sock::Get()` was used only in `sock.{cpp,h}`. Remove it and access\n`Sock::m_socket` directly.\n\nUnit tests that used `Get()` to test for equality still verify that the\nbehavior is correct, indirectly, by testing whether the socket is closed\nor not.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70815b1e9e9e33a3fe5d70bd526e60477230bd33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70815b1e9e9e33a3fe5d70bd526e60477230bd33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70815b1e9e9e33a3fe5d70bd526e60477230bd33"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 1,
      "deletions": 13
    },
    "files": [
      {
        "sha": "9ccfe39314fcf53c3b0b76ab9c379796650abffa",
        "filename": "src/test/sock_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522/src/test/sock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522/src/test/sock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sock_tests.cpp?ref=f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522",
        "patch": "@@ -38,7 +38,6 @@ BOOST_AUTO_TEST_CASE(constructor_and_destructor)\n {\n     const SOCKET s = CreateSocket();\n     Sock* sock = new Sock(s);\n-    BOOST_CHECK_EQUAL(sock->Get(), s);\n     BOOST_CHECK(!SocketIsClosed(s));\n     delete sock;\n     BOOST_CHECK(SocketIsClosed(s));\n@@ -51,7 +50,6 @@ BOOST_AUTO_TEST_CASE(move_constructor)\n     Sock* sock2 = new Sock(std::move(*sock1));\n     delete sock1;\n     BOOST_CHECK(!SocketIsClosed(s));\n-    BOOST_CHECK_EQUAL(sock2->Get(), s);\n     delete sock2;\n     BOOST_CHECK(SocketIsClosed(s));\n }\n@@ -64,7 +62,6 @@ BOOST_AUTO_TEST_CASE(move_assignment)\n     *sock2 = std::move(*sock1);\n     delete sock1;\n     BOOST_CHECK(!SocketIsClosed(s));\n-    BOOST_CHECK_EQUAL(sock2->Get(), s);\n     delete sock2;\n     BOOST_CHECK(SocketIsClosed(s));\n }"
      },
      {
        "sha": "5c34fb7f2e008332345f7a0dcec8455891f1a2ec",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522",
        "patch": "@@ -48,8 +48,6 @@ Sock& Sock::operator=(Sock&& other)\n     return *this;\n }\n \n-SOCKET Sock::Get() const { return m_socket; }\n-\n void Sock::Reset() {\n     if (m_socket == INVALID_SOCKET) {\n         return;"
      },
      {
        "sha": "68493bb016ec5b5ae9e4e1518f39ca7fbe79b006",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522",
        "patch": "@@ -21,8 +21,7 @@\n static constexpr auto MAX_WAIT_FOR_IO = 1s;\n \n /**\n- * RAII helper class that manages a socket. Mimics `std::unique_ptr`, but instead of a pointer it\n- * contains a socket and closes it automatically when it goes out of scope.\n+ * RAII helper class that manages a socket and closes it automatically when it goes out of scope.\n  */\n class Sock\n {\n@@ -62,12 +61,6 @@ class Sock\n      */\n     virtual Sock& operator=(Sock&& other);\n \n-    /**\n-     * Get the value of the contained socket.\n-     * @return socket or INVALID_SOCKET if empty\n-     */\n-    [[nodiscard]] virtual SOCKET Get() const;\n-\n     /**\n      * Close if non-empty.\n      */"
      }
    ]
  },
  {
    "sha": "3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
    "node_id": "C_kwDOABII59oAKDM0OTBmNDBjNWNmYmYxYmQ5OTI0NTE2NTQ2YmM0YWZiYzhjMGI2ZDE",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-05-28T13:37:43Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:26:27Z"
      },
      "message": "net: remove Sock default constructor, it's not necessary",
      "tree": {
        "sha": "bed317500575aa67ff4012d5dfd51ada6a56cef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bed317500575aa67ff4012d5dfd51ada6a56cef2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhhQACgkQVN8G9ktV\ny79zIiAAnoTumsuVfCopm5JDOlNrczBguLhToemjbezDP4QCUu/T3sqrVBmkgRim\n4hojD/u7eHO5YIcWSDs71zZ+UW3OClM5MWjQVPND68FnbMPZkXaXCtRZKOphEY9O\n3uGnClY9V8HWPG0hGCA+EZBL7q9xG/a9Rw3EgM62FzOHTnNd4cxDbYU8OtFwIe+e\nNug2YlYjt2vvACs2xUqp5Y34H+0Caiq4c33b/Vpwm/M9ACI8Sjw8vNdU/vV0yzvj\n07PwZ5gphJLw2El8PCTXJ8MH+CxiJ+zL/X7bV0ndPzqea2D5HDyjaY0iD+S5HKIr\nMMpWwRsx3QWAJs2kqNtbv+tmDsh0pAkKSDNN9qxZ5CnEnKfaE/W4e9JcrGz1A6tY\nncNjyiqQvaTZRR51X8UF4fCAEPR8io6K/F4FOdsPtlhsdKb7Vr3m0nWe+O2mPmSg\nD5J7fpJHqyLw3SSm25k+dHPU7vqo25RtEAhfI1RBZdphjBOgipg36vVIf7OY9GKV\nCbzqZkPEJeoyLRNKUnCAfqzhBcfTto/m5BG+5Icz+NEEZBqNbkKIayUSx92DL1g3\noQ1l1v6yigZXa/ycTmCNIIPCj4Ko1A+D6QgE0N0/yqvrzJMSeyFct6sNJibtuF13\nnLlfZXCENixyry4vGZJ2TNvX4lE/Kr9CTfJaEzqIP/H761BZQcwyXylNhSLB0vVK\ncLG0KsennqmmDOqepO1M2DFiffPsufJqZFgI7J0cptkDP4ucmuFv0E6naJd/zwAt\nc0kF7US8ABw2XF+Ad+wwVeJPzUUdyxS8KJDxrrY40gY2cVyd7+VI/lYRx+FfDi7B\nzZbYhHH/P6WN7eP6NtDny6AjNzxFt0gqhvp+a2/CqZQP9weOAU8yYhMl5aNFhXFt\n0puX4NihYB6X1quufDPSsnKL0vWKDnS4RYiozAbSTrYtKgbJzkzWkliz6NRjqpnj\n2MRCN0UBSA701qVyfUW8Afn6DcikD/RJ0oB7ioAXWmW3jOQxROZ7Ye0jlXhQkmL5\nojtmSsRJtgxyYpsvNHdyFQn0kwhJIIY78rJRyOQ7L4O67TDHcOAyUb8AoY1bN2YU\nkRiH0JrXZktR/mGf46OC0OAf9FzRknSzx8cGaDDPxNEg3fiUHhIRrEytM9fg/5S0\nmXY0X+BEWvoGYIuD8DS90gIqb6gjDkMGIoRpf4PKBfXP7fCdh8mIIpZAAqyWkDQi\nbyNpG9FtYDHSfXcK+6F/zYz47w/So6xoGqdjnESBBGe+u6E2HetENh+UrA1A0qmN\n6BS/dJ4QNj3EZBOEkY6Nk4qoQYmU8t2qNBR299dmKdCt5wkxFzqTuqu0gZF7TDih\nKnj4eECmVnOvPPnh6evKaPJG5qfcnA==\n=/4WS\n-----END PGP SIGNATURE-----",
        "payload": "tree bed317500575aa67ff4012d5dfd51ada6a56cef2\nparent f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522\nauthor Vasil Dimov <vd@FreeBSD.org> 1622209063 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368787 +0100\n\nnet: remove Sock default constructor, it's not necessary\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f94ef6a35869f1f2cf0cb30e7c4258bd2ef67522"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 26,
      "deletions": 18
    },
    "files": [
      {
        "sha": "c2077ed0b63004847bb414b755f3c620014f5955",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
        "patch": "@@ -13,9 +13,9 @@\n #include <memory>\n \n FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n-    : m_fuzzed_data_provider{fuzzed_data_provider}, m_selectable{fuzzed_data_provider.ConsumeBool()}\n+    : Sock{fuzzed_data_provider.ConsumeIntegralInRange<SOCKET>(INVALID_SOCKET - 1, INVALID_SOCKET)},\n+      m_fuzzed_data_provider{fuzzed_data_provider}, m_selectable{fuzzed_data_provider.ConsumeBool()}\n {\n-    m_socket = fuzzed_data_provider.ConsumeIntegralInRange<SOCKET>(INVALID_SOCKET - 1, INVALID_SOCKET);\n }\n \n FuzzedSock::~FuzzedSock()"
      },
      {
        "sha": "141013c38c78a326b14b443865909dffd629c645",
        "filename": "src/test/sock_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 6,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/test/sock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/test/sock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sock_tests.cpp?ref=3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
        "patch": "@@ -56,14 +56,25 @@ BOOST_AUTO_TEST_CASE(move_constructor)\n \n BOOST_AUTO_TEST_CASE(move_assignment)\n {\n-    const SOCKET s = CreateSocket();\n-    Sock* sock1 = new Sock(s);\n-    Sock* sock2 = new Sock();\n+    const SOCKET s1 = CreateSocket();\n+    const SOCKET s2 = CreateSocket();\n+    Sock* sock1 = new Sock(s1);\n+    Sock* sock2 = new Sock(s2);\n+\n+    BOOST_CHECK(!SocketIsClosed(s1));\n+    BOOST_CHECK(!SocketIsClosed(s2));\n+\n     *sock2 = std::move(*sock1);\n+    BOOST_CHECK(!SocketIsClosed(s1));\n+    BOOST_CHECK(SocketIsClosed(s2));\n+\n     delete sock1;\n-    BOOST_CHECK(!SocketIsClosed(s));\n+    BOOST_CHECK(!SocketIsClosed(s1));\n+    BOOST_CHECK(SocketIsClosed(s2));\n+\n     delete sock2;\n-    BOOST_CHECK(SocketIsClosed(s));\n+    BOOST_CHECK(SocketIsClosed(s1));\n+    BOOST_CHECK(SocketIsClosed(s2));\n }\n \n BOOST_AUTO_TEST_CASE(reset)\n@@ -103,7 +114,7 @@ BOOST_AUTO_TEST_CASE(send_and_receive)\n     SendAndRecvMessage(*sock0, *sock1);\n \n     Sock* sock0moved = new Sock(std::move(*sock0));\n-    Sock* sock1moved = new Sock();\n+    Sock* sock1moved = new Sock(INVALID_SOCKET);\n     *sock1moved = std::move(*sock1);\n \n     delete sock0;"
      },
      {
        "sha": "40a7e372f73e2dd101550eab7a0fdc41c1a073de",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
        "patch": "@@ -94,10 +94,9 @@ constexpr auto ALL_NETWORKS = std::array{\n class StaticContentsSock : public Sock\n {\n public:\n-    explicit StaticContentsSock(const std::string& contents) : m_contents{contents}, m_consumed{0}\n+    explicit StaticContentsSock(const std::string& contents)\n+        : Sock{INVALID_SOCKET}, m_contents{contents}, m_consumed{0}\n     {\n-        // Just a dummy number that is not INVALID_SOCKET.\n-        m_socket = INVALID_SOCKET - 1;\n     }\n \n     ~StaticContentsSock() override { Reset(); }\n@@ -185,6 +184,11 @@ class StaticContentsSock : public Sock\n         return true;\n     }\n \n+    bool IsConnected(std::string&) const override\n+    {\n+        return true;\n+    }\n+\n private:\n     const std::string m_contents;\n     mutable size_t m_consumed;"
      },
      {
        "sha": "2e75282056c17d091227eff35f05a1c81cdbcabd",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
        "patch": "@@ -28,8 +28,6 @@ static inline bool IOErrorIsPermanent(int err)\n     return err != WSAEAGAIN && err != WSAEINTR && err != WSAEWOULDBLOCK && err != WSAEINPROGRESS;\n }\n \n-Sock::Sock() : m_socket(INVALID_SOCKET) {}\n-\n Sock::Sock(SOCKET s) : m_socket(s) {}\n \n Sock::Sock(Sock&& other)"
      },
      {
        "sha": "3b7add08c026f161b2a125926d7a952dd9dd11b3",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
        "patch": "@@ -26,11 +26,6 @@ static constexpr auto MAX_WAIT_FOR_IO = 1s;\n class Sock\n {\n public:\n-    /**\n-     * Default constructor, creates an empty object that does nothing when destroyed.\n-     */\n-    Sock();\n-\n     /**\n      * Take ownership of an existent socket.\n      */"
      }
    ]
  },
  {
    "sha": "f91554d8df402a2bae9eafd638d1cefe362e86c6",
    "node_id": "C_kwDOABII59oAKGY5MTU1NGQ4ZGY0MDJhMmJhZTllYWZkNjM4ZDFjZWZlMzYyZTg2YzY",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T08:40:45Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:27:27Z"
      },
      "message": "fuzz: add CConnman::OpenNetworkConnection() to the tests\n\nNow that all network calls done by `CConnman::OpenNetworkConnection()`\nare done via `Sock` they can be redirected (mocked) to `FuzzedSocket`\nfor testing.",
      "tree": {
        "sha": "9a08249232ac61edf62fb794780c2475cae092f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a08249232ac61edf62fb794780c2475cae092f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f91554d8df402a2bae9eafd638d1cefe362e86c6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhlEACgkQVN8G9ktV\ny7/cXx//WYdGuyS5sl5WVnIGpID/SCoj79CdtNujonyLwNyAIR+Alv2Rbg/x16eP\n5d65NXP5DTEYFhLeXN3Yq9ef+AqPZIR/oDB40Su2hDORs4S3G0altblh7je7laeM\nk0Pm4Bsh/T/Lkk5gtuKNJ1d4cs5T2Ead1CAU4Cvdm07NNi/SjYYwzKgO8TjZQMsL\nmFs7S/Iug30siDPYVPYCdwxZi2AC2jscz5r0NxXZbEw1Tnma9RtEKXJ2jxcASyV8\nK8+8cEjSzCeJrriNTQMt6e1jcS5nVcCBVQYCoUb5NWK55ANbFHgHMngBm1ejE7Yy\nE2rdPVKPjatY/ieD8M4jCMRqQqqojS5Rfk+DtFQKA1Vsx2bGzoFZdQ2CscWcN3Ha\nXs3VxP5x0KBwQtNJ/tggKbiUiFyuokTEesHKImmY4MSKzUMq/09g2Nfi+Ie99Suo\nK0drGROAdZSz2fDWapGgpglieaMnNWd2WNxYCPOMGpo/n3SDpqR7yimdUmUqoXp7\nB7laL+mgo3axmC4xxvONuhzCcY/PTVPDIOCAiregOqMTdOh4isQTEQwnqBUeiQJU\nPxDOBlut0lqX3bHlta81cH9QH8+jLYNge0dzvpam3U9cJ3kfYPJogfYuxTrdbmXK\nRZMGpFZUULr9bMC6cbE5ibqq4g2OnLPF33LV2WEC+qk8JBmWafiQkjH1O7on2g3q\nwAt4b9ZIRWfd+TVAYeMU1/p5OLc+CHAwfNnz2l67hzeF0cdbFnJiqBQFoN3Ztz/w\nCmG4n+4dfvEVQDLsEP0AK/KU+9Vokiy8tM260auWDBqcyHHkkWlicnpdHMpJp29f\n7XVrd+NnHybTwrxoNUgV7NOs+OFbKsdTD5MX0/84Btv9p4q5LjWXvQvsV1owuHOD\ncfhLrITigeLtGMZtAaCrKlRO87W/5E9krmQ0Ij73BQrso65+LXsj8B0niptW0jZH\nwNgAfUVTnLElSL/Khb6V0vrBRvVCuU1deJJmMe7TOq67PujJiT0zQ4tBq5Q/vieB\nRYvQUdWhU+F7sbuY2rua/zJ2bvCYTJLCUgNtTTkOOxEIHMGyTLY7UeQx9EciY5ns\nKSMxsMq0MqpG53PU9twqwEfoDB6RKZuK/4n7gdOUsDCx/zvCc2AkxacnVA4ORQVb\njxLO40k69SeqF8UvcPN2tmOOIVT+ZL721BU34VHLfe07QnBIrQSyC1B64JfNMMlr\n/F70xUrqJXwmVLRMTUNg7YHPMpGTjSEf8AGe0DGeybYOUCf8wk1h8plqtgmn1yZO\nQwuCn95FaX5EZu7+P9t/yeq3JNW67QbMNwPD88eeL8lHn6chGi31XVH33zU+tiAB\njjbrU32h5zqYZkNkieiq1OgKxW5DWQ==\n=u1IF\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a08249232ac61edf62fb794780c2475cae092f2\nparent 3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1\nauthor Vasil Dimov <vd@FreeBSD.org> 1618476045 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368847 +0100\n\nfuzz: add CConnman::OpenNetworkConnection() to the tests\n\nNow that all network calls done by `CConnman::OpenNetworkConnection()`\nare done via `Sock` they can be redirected (mocked) to `FuzzedSocket`\nfor testing.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f91554d8df402a2bae9eafd638d1cefe362e86c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f91554d8df402a2bae9eafd638d1cefe362e86c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f91554d8df402a2bae9eafd638d1cefe362e86c6/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3490f40c5cfbf1bd9924516546bc4afbc8c0b6d1"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 52,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ede8f2bb4ae677d359daeaa45a49ba474693dad7",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 3,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f91554d8df402a2bae9eafd638d1cefe362e86c6/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f91554d8df402a2bae9eafd638d1cefe362e86c6/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=f91554d8df402a2bae9eafd638d1cefe362e86c6",
        "patch": "@@ -5,6 +5,7 @@\n #include <chainparams.h>\n #include <chainparamsbase.h>\n #include <net.h>\n+#include <net_processing.h>\n #include <netaddress.h>\n #include <protocol.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n@@ -16,18 +17,42 @@\n #include <cstdint>\n #include <vector>\n \n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n void initialize_connman()\n {\n-    static const auto testing_setup = MakeNoLogFileContext<>();\n+    static const auto testing_setup = MakeNoLogFileContext<TestingSetup>();\n+    g_setup = testing_setup.get();\n }\n \n FUZZ_TARGET_INIT(connman, initialize_connman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    AddrMan addrman(/*asmap=*/std::vector<bool>(), /*deterministic=*/false, /*consistency_check_ratio=*/0);\n-    CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), addrman, fuzzed_data_provider.ConsumeBool()};\n+\n+    // Mock CreateSock() to create FuzzedSock.\n+    auto CreateSockOrig = CreateSock;\n+    CreateSock = [&fuzzed_data_provider](const CService&) {\n+        return std::make_unique<FuzzedSock>(fuzzed_data_provider);\n+    };\n+\n+    // Mock g_dns_lookup() to return a fuzzed address.\n+    g_dns_lookup = [&fuzzed_data_provider](const std::string&, bool) {\n+        return std::vector<CNetAddr>{ConsumeNetAddr(fuzzed_data_provider)};\n+    };\n+\n+    CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n+                     fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n+                     *g_setup->m_node.addrman,\n+                     fuzzed_data_provider.ConsumeBool()};\n+    CConnman::Options options;\n+    options.m_msgproc = g_setup->m_node.peerman.get();\n+    connman.Init(options);\n+\n     CNetAddr random_netaddr;\n+    CAddress random_address;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);\n     CSubNet random_subnet;\n     std::string random_string;\n@@ -37,6 +62,9 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             [&] {\n                 random_netaddr = ConsumeNetAddr(fuzzed_data_provider);\n             },\n+            [&] {\n+                random_address = ConsumeAddress(fuzzed_data_provider);\n+            },\n             [&] {\n                 random_subnet = ConsumeSubNet(fuzzed_data_provider);\n             },\n@@ -108,6 +136,25 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             },\n             [&] {\n                 connman.SetTryNewOutboundPeer(fuzzed_data_provider.ConsumeBool());\n+            },\n+            [&] {\n+                const auto& to_addr{random_address};\n+\n+                const bool count_failure{fuzzed_data_provider.ConsumeBool()};\n+\n+                CSemaphoreGrant grant;\n+                CSemaphoreGrant* grant_ptr{fuzzed_data_provider.ConsumeBool() ? nullptr : &grant};\n+\n+                const char* to_str{fuzzed_data_provider.ConsumeBool() ? nullptr :\n+                                                                        random_string.c_str()};\n+\n+                ConnectionType conn_type{\n+                    fuzzed_data_provider.PickValueInArray(ALL_CONNECTION_TYPES)};\n+                if (conn_type == ConnectionType::INBOUND) { // INBOUND is not allowed\n+                    conn_type = ConnectionType::OUTBOUND_FULL_RELAY;\n+                }\n+\n+                connman.OpenNetworkConnection(to_addr, count_failure, grant_ptr, to_str, conn_type);\n             });\n     }\n     (void)connman.GetAddedNodeInfo();\n@@ -125,4 +172,6 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n     (void)connman.GetTotalBytesSent();\n     (void)connman.GetTryNewOutboundPeer();\n     (void)connman.GetUseAddrmanOutgoing();\n+\n+    CreateSock = CreateSockOrig;\n }"
      }
    ]
  },
  {
    "sha": "7468296ca3ac63b8ebe6d21bfd83724d0516c42a",
    "node_id": "C_kwDOABII59oAKDc0NjgyOTZjYTNhYzYzYjhlYmU2ZDIxYmZkODM3MjRkMDUxNmM0MmE",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T12:01:52Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:27:29Z"
      },
      "message": "fuzz: add CConnman::CreateNodeFromAcceptedSocket() to the tests",
      "tree": {
        "sha": "b0e4d29c385d0be9a5e028690f5618c0b394d23b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0e4d29c385d0be9a5e028690f5618c0b394d23b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7468296ca3ac63b8ebe6d21bfd83724d0516c42a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhlIACgkQVN8G9ktV\ny7+PER/+OBOVqLE9wcKl/Lu7T+lMWM1SiwANkO5UqMHVHh/VZMEutLYS3z0f06Fg\nC6kd7dkY0qLWLmvpe3xHVSG7qE1FBaDiU+KsJIloTqiux/iCfRUoLb8ir3OQtRSs\nbfx4IGTtpsm/ma004oFbVpwH5/tFJUIiZpyRdnmsYECghMMEWb6Wlxse8JA7AUVs\nPDNLH7laeHWnkLDtH5AJs+gN4MoevN/zyT8MuAX/lFnqSmcvMm5p2BPdFwULb1Ac\nVsWBtQpzdhpVZGK6CcwM6zmvO2QLsGPpVRS6ScYMs2Dm1rQkWzF0B2oY3sSxitnL\njNEI/diJbSEYfvZG6P3aDdDP+Etmc3zwiOJ/aOl6+GCWw7AovoKOcPVedWLeLEdd\n0LG4wP8Vd5lde6MrmlXeLXFwDn2zujlcV8cOHY4hPC2a9wSkBGhxYt2yZ3A1kaon\nWpIqzW3MbtlHCoLWm8GLILZMHTrjH1rqsBnZ6hVyM2KSnmhTGnzP2EhbFOUo0fzP\n/xJwuCrIwcezvJOjSRpQlXWvTGGayHayDOVYD9fsNE4+CojtEWFfgYkPhRyOP6NM\nZbljMcgnQmG9Ob9s1RsUBVBBa9I4lX28ltM9hsGMm0Ct6K1xuy9txSlJQlbVRdV0\nS3mNVCY1c18ALfQk+SutE5kg4ob6Pz8NsXKMPKhjeib1YQITNn+inmJtMnKEbky2\nQf6OG7II0s7/XqvRC2NOMrHY380L0qxzgcUMVu6jxnTjniXNv6mnnEXW/PYaSPT3\nAMWIu9a8k8I7LgKRDFH0MXfIgbAAJanN6A078EWFcDKkeLuWTkD6snAUXTpIvNLX\n3NZhgJ/j5+GpBT5DI/mNEQknFuqPhqTwQCnmRIzmHQMgZYJYWo2yz/tpb4R/8eAI\nFpvM4tkgM28IUl61LS5MM9XZYnZXyIj2R/ydGvLF8EnnyTntW5BVUj5MnOutkKSC\n8+SZBla8dpKLi/Y2Su3NYARRfdetYy70UscfByk6sJLqb0NbT0KTlfNdFi6Cshm2\nLy6YZcCAUk8lKRsNCsrA0QYzDl43F0HyOyMB5iZ2/iUTO1qvm6Vu1Ne+uDDzC/Li\nM8nN1gPizrBZqkVlL7HUwH0a84JKHGpO36oP04DianxwxoCZDGI76vsiRPh+k8UC\n4O8XflnYSIQby0fg4omfeYVHcoqiy1nT7evB7YAcgSw/mP/XTKT6yeCEuLaq5ijD\nJUcE/MWrqoO2qIhM26irpeJXW+DHM/p/2eWXXwmmAduOdqlqQYKRAogWi4hlCKvy\nsWRbb7WsiZm3hCL282Wmm6PdJZJpytgSn+LIcQx0mvZOzC8t11ZnD3JGVIdxm8rJ\nayopA2z9KjqzIk725rjRyB1BA37liQ==\n=R5qW\n-----END PGP SIGNATURE-----",
        "payload": "tree b0e4d29c385d0be9a5e028690f5618c0b394d23b\nparent f91554d8df402a2bae9eafd638d1cefe362e86c6\nauthor Vasil Dimov <vd@FreeBSD.org> 1618488112 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368849 +0100\n\nfuzz: add CConnman::CreateNodeFromAcceptedSocket() to the tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7468296ca3ac63b8ebe6d21bfd83724d0516c42a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7468296ca3ac63b8ebe6d21bfd83724d0516c42a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7468296ca3ac63b8ebe6d21bfd83724d0516c42a/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f91554d8df402a2bae9eafd638d1cefe362e86c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f91554d8df402a2bae9eafd638d1cefe362e86c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f91554d8df402a2bae9eafd638d1cefe362e86c6"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 36,
      "deletions": 4
    },
    "files": [
      {
        "sha": "00f43de96eed34669e1f080818d610e87742af5a",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 4,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7468296ca3ac63b8ebe6d21bfd83724d0516c42a/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7468296ca3ac63b8ebe6d21bfd83724d0516c42a/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=7468296ca3ac63b8ebe6d21bfd83724d0516c42a",
        "patch": "@@ -15,6 +15,7 @@\n #include <util/translation.h>\n \n #include <cstdint>\n+#include <memory>\n #include <vector>\n \n namespace {\n@@ -27,6 +28,29 @@ void initialize_connman()\n     g_setup = testing_setup.get();\n }\n \n+struct CConnmanTest : public CConnman {\n+    CConnmanTest(FuzzedDataProvider& fuzzed_data_provider, AddrMan& addrman)\n+        : CConnman(fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n+                   fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n+                   addrman,\n+                   fuzzed_data_provider.ConsumeBool())\n+    {\n+        // I2P code paths will also be executed if this is set.\n+        m_i2p_sam_session =\n+            std::make_unique<i2p::sam::Session>(gArgs.GetDataDirNet() / \"fuzzed_i2p_private_key\",\n+                                                ConsumeService(fuzzed_data_provider),\n+                                                &interruptNet);\n+    }\n+\n+    void CreateNodeFromAcceptedSocketPublic(std::unique_ptr<Sock> sock,\n+                                            NetPermissionFlags permissions,\n+                                            const CAddress& addr_bind,\n+                                            const CAddress& addr_peer)\n+    {\n+        CreateNodeFromAcceptedSocket(std::move(sock), permissions, addr_bind, addr_peer);\n+    }\n+};\n+\n FUZZ_TARGET_INIT(connman, initialize_connman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n@@ -43,10 +67,7 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n         return std::vector<CNetAddr>{ConsumeNetAddr(fuzzed_data_provider)};\n     };\n \n-    CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n-                     fuzzed_data_provider.ConsumeIntegral<uint64_t>(),\n-                     *g_setup->m_node.addrman,\n-                     fuzzed_data_provider.ConsumeBool()};\n+    CConnmanTest connman{fuzzed_data_provider, *g_setup->m_node.addrman};\n     CConnman::Options options;\n     options.m_msgproc = g_setup->m_node.peerman.get();\n     connman.Init(options);\n@@ -155,6 +176,17 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n                 }\n \n                 connman.OpenNetworkConnection(to_addr, count_failure, grant_ptr, to_str, conn_type);\n+            },\n+            [&] {\n+                connman.SetNetworkActive(true);\n+\n+                NetPermissionFlags permissions{\n+                    ConsumeWeakEnum(fuzzed_data_provider, ALL_NET_PERMISSION_FLAGS)};\n+                auto me = ConsumeAddress(fuzzed_data_provider);\n+                auto peer = ConsumeAddress(fuzzed_data_provider);\n+                auto sock = CreateSock(peer);\n+\n+                connman.CreateNodeFromAcceptedSocketPublic(std::move(sock), permissions, me, peer);\n             });\n     }\n     (void)connman.GetAddedNodeInfo();"
      }
    ]
  },
  {
    "sha": "85b1f5cff395872bbf017887e65ee19f7d653ea6",
    "node_id": "C_kwDOABII59oAKDg1YjFmNWNmZjM5NTg3MmJiZjAxNzg4N2U2NWVlMTlmN2Q2NTNlYTY",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T14:51:00Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:27:30Z"
      },
      "message": "fuzz: add CConnman::InitBinds() to the tests",
      "tree": {
        "sha": "d26a554d6f2d7db48431a668ec0962485f74f630",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d26a554d6f2d7db48431a668ec0962485f74f630"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85b1f5cff395872bbf017887e65ee19f7d653ea6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhlMACgkQVN8G9ktV\ny7+Slx//d/rXP0MAnX5TVc5YjkvpvlT/6ze51AzIy3/7e5sV4PULdueMADSh0DIr\nExpDv95Sc42fgYc0tWf5x8TTML3ZSeqsZBo3uLHSFVNhfQKBUpbil7De/pQZMsxf\nhlEPVb2vjPfa73eV4CAivIu65CV/iwYONoPVXC99OwD/AQYq/30xAcSIs/18e5MB\nja3GSQvDoru1SM+gW7uRBO02X0leolsv2vmWldqdT7wCAA21xtyCbwUUIbl0k5L1\nd6RpmqkVoQCFEDbcv3y9Rq4Swc9LyWJfnS7Kj8S9mugG+dXRf2lNqRT8L41++isZ\n2jHsuHMRPty2TnGb4ZcW117GVgKPwbwYNhwiK2WKzV4e7o5yy8DpM5GQJfQH6JQY\nd6JuoNSqtaNqHOYkOXXgglY9I8c2rkbTgbRRxCpFc1Z8otu0j2b/8RSEMkYXwLxI\nIx7RBNhPSWlMqEm8zVUDZAF/wVqQZlXrin4TkpJIcFg07AxWVsH2gMRANgcQHjWK\n15mo19S3T82Ibf8rgcLAG51QjdPa1ou4tIwQd8GLX1V/sHKImxidE4lwpArav6lQ\n3/OxNU60BOO6tgBLEypcYYBIz9feV+Mzs7nKKBnYKqu/o5uuJ/t3qrrG9jNNbxoI\ngBLLfC2qbx8Ar4I2R4MWfqnUUMEHlDJ0x66+H4W8DZ1k99/WaceqAMhwdH6AQWBu\nJcRMgtxf3Zsf8SYqdvTwXw8qSxlL3QR1kDeNhqJXe4tPGeUDzpXWN6YkoKD54K9A\nLYW9quucf7/uw6sfeZpGxr4sZfydbVzRYV2bGqlveIvpxpmIliGXGKlfVO4BMFWe\nzocfUWBHUuWvtoK//jf6lDNSXV7l16ipodXuFvhmQD1YgRVNjEQ4rIqHcarWepgJ\n+EpWgVCzS+Pq0xJCrWn62B0PVjtFxcXt14ke5C4kgXFjfFORTHoU+k/KiCruSIvm\nArgSYQl5Twzs7mtyBAD4cEh2m9htGihUv0dx7JaNWSOcGAIXEPJFhFNKaqz69mwB\naqxXGv9swKmeXV/b1tuyX0KD5ku8KWdsc+loikq47+MMBp69dNwhJFg0o70++nCd\nJiPou8OHzrckP9GX6F8ASYH2TnYq9HGBL3i3bxAaArXy2EAHRRvKUETAjnz6cDQv\nbdB4DCF+x5CDswUg9vQ3seJnKs7BMqX50sVnhNSCaXqigqqieEKORYZKXrwmYFTZ\n9Rb1S00lfD7/ALm34gBCYu1cYkzrUZVuFjhpQUfZ7CmsU4sdCQu8f8BE/2O9T8vL\nkSRSZ6H0vFJ96vSl41rWDEQk929YpjO3gBTJD7y4ixsc3ZeUZCgSdjFGpKCC4LnJ\ny2t9q+jQ8jvrzUMEL+SuqLZPxFFZNA==\n=HOVT\n-----END PGP SIGNATURE-----",
        "payload": "tree d26a554d6f2d7db48431a668ec0962485f74f630\nparent 7468296ca3ac63b8ebe6d21bfd83724d0516c42a\nauthor Vasil Dimov <vd@FreeBSD.org> 1618498260 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368850 +0100\n\nfuzz: add CConnman::InitBinds() to the tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b1f5cff395872bbf017887e65ee19f7d653ea6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85b1f5cff395872bbf017887e65ee19f7d653ea6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b1f5cff395872bbf017887e65ee19f7d653ea6/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7468296ca3ac63b8ebe6d21bfd83724d0516c42a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7468296ca3ac63b8ebe6d21bfd83724d0516c42a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7468296ca3ac63b8ebe6d21bfd83724d0516c42a"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4999a294659869f826b36da129d0f991978d69c2",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b1f5cff395872bbf017887e65ee19f7d653ea6/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b1f5cff395872bbf017887e65ee19f7d653ea6/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=85b1f5cff395872bbf017887e65ee19f7d653ea6",
        "patch": "@@ -49,6 +49,12 @@ struct CConnmanTest : public CConnman {\n     {\n         CreateNodeFromAcceptedSocket(std::move(sock), permissions, addr_bind, addr_peer);\n     }\n+\n+    bool InitBindsPublic(const CConnman::Options& options)\n+    {\n+        return InitBinds(options);\n+    }\n+\n };\n \n FUZZ_TARGET_INIT(connman, initialize_connman)\n@@ -187,6 +193,25 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n                 auto sock = CreateSock(peer);\n \n                 connman.CreateNodeFromAcceptedSocketPublic(std::move(sock), permissions, me, peer);\n+            },\n+            [&] {\n+                CConnman::Options options;\n+\n+                options.vBinds = ConsumeServiceVector(fuzzed_data_provider, 5);\n+\n+                options.vWhiteBinds = std::vector<NetWhitebindPermissions>{\n+                    fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, 5)};\n+                for (auto& wb : options.vWhiteBinds) {\n+                    wb.m_flags = ConsumeWeakEnum(fuzzed_data_provider, ALL_NET_PERMISSION_FLAGS);\n+                    wb.m_service = ConsumeService(fuzzed_data_provider);\n+                }\n+\n+                options.onion_binds = ConsumeServiceVector(fuzzed_data_provider, 5);\n+\n+                options.bind_on_any = options.vBinds.empty() && options.vWhiteBinds.empty() &&\n+                                      options.onion_binds.empty();\n+\n+                connman.InitBindsPublic(options);\n             });\n     }\n     (void)connman.GetAddedNodeInfo();"
      },
      {
        "sha": "3c754c35d9fef3c738d6eecf0df33ec412c6cdf7",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85b1f5cff395872bbf017887e65ee19f7d653ea6/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85b1f5cff395872bbf017887e65ee19f7d653ea6/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=85b1f5cff395872bbf017887e65ee19f7d653ea6",
        "patch": "@@ -310,6 +310,19 @@ inline CService ConsumeService(FuzzedDataProvider& fuzzed_data_provider) noexcep\n     return {ConsumeNetAddr(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<uint16_t>()};\n }\n \n+inline std::vector<CService> ConsumeServiceVector(FuzzedDataProvider& fuzzed_data_provider,\n+                                                  size_t max_vector_size) noexcept\n+{\n+    std::vector<CService> ret;\n+    const size_t size = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, max_vector_size);\n+    ret.reserve(size);\n+    for (size_t i = 0; i < size; ++i) {\n+        ret.emplace_back(ConsumeNetAddr(fuzzed_data_provider),\n+                         fuzzed_data_provider.ConsumeIntegral<uint16_t>());\n+    }\n+    return ret;\n+}\n+\n inline CAddress ConsumeAddress(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     return {ConsumeService(fuzzed_data_provider), ConsumeWeakEnum(fuzzed_data_provider, ALL_SERVICE_FLAGS), fuzzed_data_provider.ConsumeIntegral<uint32_t>()};"
      }
    ]
  },
  {
    "sha": "9dd36c4a727667c5e8056e70d801053961d9e884",
    "node_id": "C_kwDOABII59oAKDlkZDM2YzRhNzI3NjY3YzVlODA1NmU3MGQ4MDEwNTM5NjFkOWU4ODQ",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-30T15:07:35Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-12-01T14:27:31Z"
      },
      "message": "fuzz: add CConnman::SocketHandler() to the tests",
      "tree": {
        "sha": "16aa02c047e3c1748784dfe0b2df2df553393e30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16aa02c047e3c1748784dfe0b2df2df553393e30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dd36c4a727667c5e8056e70d801053961d9e884",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmGnhlMACgkQVN8G9ktV\ny79XOx/+IZmqNGUi7nHRSiz4yx20Ppt5Qw9XfLL5cSEk6exZNnQb/7b/6l6c5vKj\nhG/juUpPxujIc/KuPeYyxDkSkBDxtyfoOh6j/aqjYMuZkc3YIYRuk0f1jYZb3JFK\nlWVkhkWZqmvyMZ+7inToCoMG2GakyldwQdbaTDHYm+EjivwleS/fW1dttn4/d7O6\nob7OIySgfLS8M1Z4ES/hO6wpsSU8CiDxlq36/3ahtVbyr7ZJ14Q9HDW2ZhQwiVab\n0da4fLPFWjIwZcN/Pw+VL9+WsynPJeZVvo6VZOvyHHcqwylnySaKZYpKMzQOp9fw\npyYQeYhrSJZdvnjXawvhPnbYvdB3bhEgCouoCLLsfbT2sCjfm97TtVLg93SbycXb\nIK1T/A8zK4ZHuQgIl0S0TzGrnISsJcelkaC/9mWP/1lsf6Rogw6VE1v1rakxqp/I\nHLVk55/1Xm+RH73FLP+kjKnv0igt9SEQ7g776B8kB46eeVqS4mKHBVWczC90tqzT\nzoURlI7Yb3ukqs2YgtFD6MpLoM5kSu/nRCV/HGAL+FlAhy4f8z6PmPTPBM8G5bXI\n5g0EKy77wr+mUzTusnq8TvLaJ4o+lIGYx5ripRGkB6682JLEVW905QyhSq2PTs1/\nkKQdic/g6BbUQDLtTYolOuz+tDJ2QlkxOU7yL0f6TU/AkPh91CnULxvbOKRF+gjW\nfuffXq8lMK2X1eBTACivHWVrAwMECwuodrBmquDsLLbdMMETmVwXGqNt0oTAlxDA\nP6n1UEgCcSEPOBxfSFjtFqm1601qy9dgPXcsl7y49pP/IxwrWrvPUP437+zpageD\nUmMiIt3WCdmtDZkkZrtLAYjFqLR53gbq0dLHIcB7qrfQEEARjBBjgVDUTK97W6c3\naFr0rL281RmBCwXsUjeMIhb6YQweXXhCvA6ffKK9GhcnOQXllgydr4RvQQJ+/lU2\nDSse9szN5475YcpgpGMe2CKy94P9D5kcGyQ+8PvCiMkxbJ9wQalMxfLvgw1qa23r\nvfviN6kvaO3Njeij7oYj5OUiNPol2NVJcH8TeHW+KdTJW2tWnV4LVwkTYAENEOxM\nuzrKV+bm9KgwsP+fd9V5l1xCnQsGKebjIbYJZNaUcBuX3XGFaHLAQFXblYRtFpfX\nIy3mBqddPOsuUzErRXIwqTmdq3jtJPq6q3zY6jTKFUfbe2hcnTbkJeR1gk3Yrtl9\neH3TVR126GO61j0oCuI4jN6wUFZiuF2R5iAdK5s+3ZN5ef2YJX6dqrBwt7QnIFpi\nzUxO0v3u63SBD1ucT1y6xGJYx25GEUW+TQD8IPdvHUXS9wW0SNHquay3XS9kisMI\neC9jELRvCMHyX3sYGQQ6ZpXd4l+d+Q==\n=drkT\n-----END PGP SIGNATURE-----",
        "payload": "tree 16aa02c047e3c1748784dfe0b2df2df553393e30\nparent 85b1f5cff395872bbf017887e65ee19f7d653ea6\nauthor Vasil Dimov <vd@FreeBSD.org> 1619795255 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1638368851 +0100\n\nfuzz: add CConnman::SocketHandler() to the tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd36c4a727667c5e8056e70d801053961d9e884",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9dd36c4a727667c5e8056e70d801053961d9e884",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd36c4a727667c5e8056e70d801053961d9e884/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85b1f5cff395872bbf017887e65ee19f7d653ea6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85b1f5cff395872bbf017887e65ee19f7d653ea6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85b1f5cff395872bbf017887e65ee19f7d653ea6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1f9773915826059b730792b75050e294331b2057",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dd36c4a727667c5e8056e70d801053961d9e884/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dd36c4a727667c5e8056e70d801053961d9e884/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=9dd36c4a727667c5e8056e70d801053961d9e884",
        "patch": "@@ -55,6 +55,7 @@ struct CConnmanTest : public CConnman {\n         return InitBinds(options);\n     }\n \n+    void SocketHandlerPublic() { SocketHandler(); }\n };\n \n FUZZ_TARGET_INIT(connman, initialize_connman)\n@@ -212,6 +213,9 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n                                       options.onion_binds.empty();\n \n                 connman.InitBindsPublic(options);\n+            },\n+            [&] {\n+                connman.SocketHandlerPublic();\n             });\n     }\n     (void)connman.GetAddedNodeInfo();"
      }
    ]
  }
]