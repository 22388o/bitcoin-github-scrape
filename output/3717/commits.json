[
  {
    "sha": "a00ebb51176d229683d36cd02a8a26fd63a471a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDBlYmI1MTE3NmQyMjk2ODNkMzZjZDAyYThhMjZmZDYzYTQ3MWE4",
    "commit": {
      "author": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-21T04:56:04Z"
      },
      "committer": {
        "name": "Daniel Newton",
        "email": "djpnewton@gmail.com",
        "date": "2014-02-27T01:46:58Z"
      },
      "message": "move wallet info stuff to \"getwalletinfo\" rpc (left original wallet\nstuff in getinfo call for backwards compatibility)\n\nadd wallet transaction count to getwalletinfo rpc call",
      "tree": {
        "sha": "232ce156ee2f27917e4e4af3bbc1071e17b9f959",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/232ce156ee2f27917e4e4af3bbc1071e17b9f959"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a00ebb51176d229683d36cd02a8a26fd63a471a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a00ebb51176d229683d36cd02a8a26fd63a471a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a00ebb51176d229683d36cd02a8a26fd63a471a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a00ebb51176d229683d36cd02a8a26fd63a471a8/comments",
    "author": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "djpnewton",
      "id": 42459,
      "node_id": "MDQ6VXNlcjQyNDU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/42459?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/djpnewton",
      "html_url": "https://github.com/djpnewton",
      "followers_url": "https://api.github.com/users/djpnewton/followers",
      "following_url": "https://api.github.com/users/djpnewton/following{/other_user}",
      "gists_url": "https://api.github.com/users/djpnewton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/djpnewton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/djpnewton/subscriptions",
      "organizations_url": "https://api.github.com/users/djpnewton/orgs",
      "repos_url": "https://api.github.com/users/djpnewton/repos",
      "events_url": "https://api.github.com/users/djpnewton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/djpnewton/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76a77059f361f3c700a550c11adf567bafebbd00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76a77059f361f3c700a550c11adf567bafebbd00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76a77059f361f3c700a550c11adf567bafebbd00"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6138d35fcee46b18f50f2ad1a4183ac205fa5b50",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a00ebb51176d229683d36cd02a8a26fd63a471a8/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a00ebb51176d229683d36cd02a8a26fd63a471a8/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a00ebb51176d229683d36cd02a8a26fd63a471a8",
        "patch": "@@ -296,6 +296,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n     { \"settxfee\",               &settxfee,               false,     false,      true },\n+    { \"getwalletinfo\",          &getwalletinfo,          true,      false,      true },\n \n     /* Wallet-enabled mining */\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },"
      },
      {
        "sha": "ea03c09bf6d3b114150dd5efd7b1e0a89dfa11c4",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a00ebb51176d229683d36cd02a8a26fd63a471a8/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a00ebb51176d229683d36cd02a8a26fd63a471a8/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=a00ebb51176d229683d36cd02a8a26fd63a471a8",
        "patch": "@@ -163,6 +163,7 @@ extern json_spirit::Value walletlock(const json_spirit::Array& params, bool fHel\n extern json_spirit::Value encryptwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value validateaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getinfo(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getwalletinfo(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getrawtransaction(const json_spirit::Array& params, bool fHelp); // in rcprawtransaction.cpp\n extern json_spirit::Value listunspent(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "ebffe890419f4ca879458c3ed298b2e725b10f6e",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a00ebb51176d229683d36cd02a8a26fd63a471a8/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a00ebb51176d229683d36cd02a8a26fd63a471a8/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a00ebb51176d229683d36cd02a8a26fd63a471a8",
        "patch": "@@ -1893,4 +1893,36 @@ Value settxfee(const Array& params, bool fHelp)\n     return true;\n }\n \n+Value getwalletinfo(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"getwalletinfo\\n\"\n+            \"Returns an object containing various wallet state info.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n+            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet\\n\"\n+            \"  \\\"txcount\\\": xxxxxxx,         (numeric) the total number of transactions in the wallet\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getwalletinfo\", \"\")\n+            + HelpExampleRpc(\"getwalletinfo\", \"\")\n+        );\n+\n+    Object obj;\n+    obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n+    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n+    obj.push_back(Pair(\"txcount\",       (int)pwalletMain->mapWallet.size()));\n+    obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n+    obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n+    if (pwalletMain->IsCrypted())\n+        obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n+    return obj;\n+}\n+\n+\n "
      }
    ]
  }
]