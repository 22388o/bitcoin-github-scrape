[
  {
    "sha": "a13f1e8f61f2c4f32c72c72409ea591228557434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTNmMWU4ZjYxZjJjNGYzMmM3MmM3MjQwOWVhNTkxMjI4NTU3NDM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-07-25T23:06:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-11-10T02:34:22Z"
      },
      "message": "Add support for watch-only addresses\n\nChanges:\n* Add Add/Have WatchOnly methods to CKeyStore, and implementations\n  in CBasicKeyStore.\n* Add similar methods to CWallet, and support entries for it in\n  CWalletDB.\n* Make IsMine in script/wallet return a new enum 'isminetype',\n  rather than a boolean. This allows distinguishing between\n  spendable and unspendable coins.\n* Add a field fSpendable to COutput (GetAvailableCoins' return type).\n* Mark watchonly coins in listunspent as 'watchonly': true.\n* Add 'watchonly' to validateaddress, suppressing script/pubkey/...\n  in this case.\n\nBased on a patch by Eric Lombrozo.",
      "tree": {
        "sha": "0f4820eed621b8b402a94ac75e7cf2f6a391bcdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f4820eed621b8b402a94ac75e7cf2f6a391bcdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a13f1e8f61f2c4f32c72c72409ea591228557434",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13f1e8f61f2c4f32c72c72409ea591228557434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a13f1e8f61f2c4f32c72c72409ea591228557434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13f1e8f61f2c4f32c72c72409ea591228557434/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c4c207be8420d394a5abc4368d1bb69ad4f8067",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4c207be8420d394a5abc4368d1bb69ad4f8067",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4c207be8420d394a5abc4368d1bb69ad4f8067"
      }
    ],
    "stats": {
      "total": 281,
      "additions": 217,
      "deletions": 64
    },
    "files": [
      {
        "sha": "7f0e46eb21080f707cd8f368289c755a07753e10",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -284,6 +284,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"dumpwallet\",             &dumpwallet,             true,      false,      true },\n     { \"importprivkey\",          &importprivkey,          false,     false,      true },\n     { \"importwallet\",           &importwallet,           false,     false,      true },\n+    { \"importaddress\",          &importaddress,          false,     false,      true },\n     { \"listunspent\",            &listunspent,            false,     false,      true },\n     { \"getrawtransaction\",      &getrawtransaction,      false,     false,      false },\n     { \"createrawtransaction\",   &createrawtransaction,   false,     false,      false },\n@@ -1245,6 +1246,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"lockunspent\"            && n > 0) ConvertTo<bool>(params[0]);\n     if (strMethod == \"lockunspent\"            && n > 1) ConvertTo<Array>(params[1]);\n     if (strMethod == \"importprivkey\"          && n > 2) ConvertTo<bool>(params[2]);\n+    if (strMethod == \"importaddress\"          && n > 2) ConvertTo<bool>(params[2]);\n     if (strMethod == \"verifychain\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"verifychain\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<boost::int64_t>(params[0]);"
      },
      {
        "sha": "7300db2224c3414637018c03309fb5380b680a7c",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -163,6 +163,7 @@ extern json_spirit::Value getnettotals(const json_spirit::Array& params, bool fH\n \n extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value importaddress(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value dumpwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "cfb78ff5eb7c2103e482a8e3b3d3ecef62e693d6",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -51,6 +51,19 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n+bool CBasicKeyStore::AddWatchOnly(const CTxDestination &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.insert(dest);\n+    return true;\n+}\n+\n+bool CBasicKeyStore::HaveWatchOnly(const CTxDestination &dest) const\n+{\n+    LOCK(cs_KeyStore);\n+    return setWatchOnly.count(dest) > 0;\n+}\n+\n bool CCryptoKeyStore::SetCrypted()\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "81b2314116c4857ffa7a0d032e23edcc2bf87cd8",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -8,9 +8,24 @@\n #include \"crypter.h\"\n #include \"sync.h\"\n #include <boost/signals2/signal.hpp>\n+#include <boost/variant.hpp>\n \n class CScript;\n \n+class CNoDestination {\n+public:\n+    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n+    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n+};\n+\n+/** A txout script template with a specific destination. It is either:\n+ *  * CNoDestination: no destination set\n+ *  * CKeyID: TX_PUBKEYHASH destination\n+ *  * CScriptID: TX_SCRIPTHASH destination\n+ *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n+ */\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+\n /** A virtual base class for key stores */\n class CKeyStore\n {\n@@ -34,17 +49,23 @@ class CKeyStore\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n     virtual bool HaveCScript(const CScriptID &hash) const =0;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const =0;\n+\n+    // Support for Watch-only addresses\n+    virtual bool AddWatchOnly(const CTxDestination &dest) =0;\n+    virtual bool HaveWatchOnly(const CTxDestination &dest) const =0;\n };\n \n typedef std::map<CKeyID, CKey> KeyMap;\n typedef std::map<CScriptID, CScript > ScriptMap;\n+typedef std::set<CTxDestination> WatchOnlySet;\n \n /** Basic key store, that keeps keys in an address->secret map */\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n     ScriptMap mapScripts;\n+    WatchOnlySet setWatchOnly;\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n@@ -86,6 +107,9 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool AddCScript(const CScript& redeemScript);\n     virtual bool HaveCScript(const CScriptID &hash) const;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n+\n+    virtual bool AddWatchOnly(const CTxDestination &dest);\n+    virtual bool HaveWatchOnly(const CTxDestination &dest) const;\n };\n \n typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;"
      },
      {
        "sha": "5ad4af65729b5da9174d8ffe148ab43ca5525a1d",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -111,6 +111,51 @@ Value importprivkey(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n+Value importaddress(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 3)\n+        throw runtime_error(\n+            \"importaddress <address> [label] [rescan=true]\\n\"\n+            \"Adds an address that can be watched as if it were in your wallet but cannot be used to spend.\");\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid\u00a0Bitcoin\u00a0address\");\n+    CTxDestination dest;\n+    dest = address.Get();\n+\n+    string strLabel = \"\";\n+    if (params.size() > 1)\n+        strLabel = params[1].get_str();\n+\n+    //\u00a0Whether\u00a0to\u00a0perform\u00a0rescan\u00a0after\u00a0import\n+    bool fRescan = true;\n+    if (params.size() > 2)\n+        fRescan = params[2].get_bool();\n+\n+    {\n+        LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+        // Don't throw error in case an address is already there\n+        if (pwalletMain->HaveWatchOnly(dest))\n+            return Value::null;\n+\n+        pwalletMain->MarkDirty();\n+        pwalletMain->SetAddressBook(dest, strLabel, \"receive\");\n+\n+        if (!pwalletMain->AddWatchOnly(dest))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error\u00a0adding\u00a0address\u00a0to\u00a0wallet\");\n+\n+        if (fRescan)\n+        {\n+            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+            pwalletMain->ReacceptWalletTransactions();\n+        }\n+    }\n+\n+    return Value::null;\n+}\n+\n Value importwallet(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)"
      },
      {
        "sha": "07536f01a33f74b5771ee6168c91679e5e9b13e5",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -214,6 +214,7 @@ Value listunspent(const Array& params, bool fHelp)\n         }\n         entry.push_back(Pair(\"amount\",ValueFromAmount(nValue)));\n         entry.push_back(Pair(\"confirmations\",out.nDepth));\n+        entry.push_back(Pair(\"spendable\", out.fSpendable));\n         results.push_back(entry);\n     }\n "
      },
      {
        "sha": "0c5ddb6e4e82d7f13234d683dcc79574ae718cf6",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 21,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -1424,36 +1424,45 @@ Value encryptwallet(const Array& params, bool fHelp)\n \n class DescribeAddressVisitor : public boost::static_visitor<Object>\n {\n+private:\n+    isminetype mine;\n+\n public:\n+    DescribeAddressVisitor(isminetype mineIn) : mine(mineIn) {}\n+\n     Object operator()(const CNoDestination &dest) const { return Object(); }\n \n     Object operator()(const CKeyID &keyID) const {\n         Object obj;\n         CPubKey vchPubKey;\n-        pwalletMain->GetPubKey(keyID, vchPubKey);\n         obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-        obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        if (mine == MINE_SPENDABLE) {\n+            pwalletMain->GetPubKey(keyID, vchPubKey);\n+            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        }\n         return obj;\n     }\n \n     Object operator()(const CScriptID &scriptID) const {\n         Object obj;\n         obj.push_back(Pair(\"isscript\", true));\n-        CScript subscript;\n-        pwalletMain->GetCScript(scriptID, subscript);\n-        std::vector<CTxDestination> addresses;\n-        txnouttype whichType;\n-        int nRequired;\n-        ExtractDestinations(subscript, whichType, addresses, nRequired);\n-        obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-        obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n-        Array a;\n-        BOOST_FOREACH(const CTxDestination& addr, addresses)\n-            a.push_back(CBitcoinAddress(addr).ToString());\n-        obj.push_back(Pair(\"addresses\", a));\n-        if (whichType == TX_MULTISIG)\n-            obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        if (mine == MINE_SPENDABLE) {\n+            CScript subscript;\n+            pwalletMain->GetCScript(scriptID, subscript);\n+            std::vector<CTxDestination> addresses;\n+            txnouttype whichType;\n+            int nRequired;\n+            ExtractDestinations(subscript, whichType, addresses, nRequired);\n+            obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+            obj.push_back(Pair(\"hex\", HexStr(subscript.begin(), subscript.end())));\n+            Array a;\n+            BOOST_FOREACH(const CTxDestination& addr, addresses)\n+                a.push_back(CBitcoinAddress(addr).ToString());\n+            obj.push_back(Pair(\"addresses\", a));\n+            if (whichType == TX_MULTISIG)\n+                obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        }\n         return obj;\n     }\n };\n@@ -1475,10 +1484,11 @@ Value validateaddress(const Array& params, bool fHelp)\n         CTxDestination dest = address.Get();\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        bool fMine = pwalletMain ? IsMine(*pwalletMain, dest) : false;\n-        ret.push_back(Pair(\"ismine\", fMine));\n-        if (fMine) {\n-            Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+        isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : MINE_NO;\n+        ret.push_back(Pair(\"ismine\", mine != MINE_NO));\n+        if (mine != MINE_NO) {\n+            ret.push_back(Pair(\"watchonly\", mine == MINE_WATCH_ONLY));\n+            Object detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n             ret.insert(ret.end(), detail.begin(), detail.end());\n         }\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))"
      },
      {
        "sha": "5b47d0c5751ef0a409937c74b087c6a0e84172c9",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 13,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -1454,36 +1454,57 @@ class CKeyStoreIsMineVisitor : public boost::static_visitor<bool>\n     bool operator()(const CScriptID &scriptID) const { return keystore->HaveCScript(scriptID); }\n };\n \n-bool IsMine(const CKeyStore &keystore, const CTxDestination &dest)\n+isminetype IsMine(const CKeyStore &keystore, const CTxDestination &dest)\n {\n-    return boost::apply_visitor(CKeyStoreIsMineVisitor(&keystore), dest);\n+    if (boost::apply_visitor(CKeyStoreIsMineVisitor(&keystore), dest))\n+        return MINE_SPENDABLE;\n+    if (keystore.HaveWatchOnly(dest))\n+        return MINE_WATCH_ONLY;\n+    return MINE_NO;\n }\n \n-bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n+isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n     vector<valtype> vSolutions;\n     txnouttype whichType;\n-    if (!Solver(scriptPubKey, whichType, vSolutions))\n-        return false;\n+    if (!Solver(scriptPubKey, whichType, vSolutions)) {\n+        if (keystore.HaveWatchOnly(scriptPubKey.GetID()))\n+            return MINE_WATCH_ONLY;\n+        return MINE_NO;\n+    }\n \n     CKeyID keyID;\n     switch (whichType)\n     {\n     case TX_NONSTANDARD:\n     case TX_NULL_DATA:\n-        return false;\n+        break;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return keystore.HaveKey(keyID);\n+        if (keystore.HaveKey(keyID))\n+            return MINE_SPENDABLE;\n+        if (keystore.HaveWatchOnly(keyID))\n+            return MINE_WATCH_ONLY;\n+        break;\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        return keystore.HaveKey(keyID);\n+        if (keystore.HaveKey(keyID))\n+            return MINE_SPENDABLE;\n+        if (keystore.HaveWatchOnly(keyID))\n+            return MINE_WATCH_ONLY;\n+        break;\n     case TX_SCRIPTHASH:\n     {\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n-        if (!keystore.GetCScript(CScriptID(uint160(vSolutions[0])), subscript))\n-            return false;\n-        return IsMine(keystore, subscript);\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            isminetype ret = IsMine(keystore, subscript);\n+            if (ret)\n+                return ret;\n+        }\n+        if (keystore.HaveWatchOnly(scriptID))\n+            return MINE_WATCH_ONLY;\n+        break;\n     }\n     case TX_MULTISIG:\n     {\n@@ -1493,10 +1514,15 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         // them) enable spend-out-from-under-you attacks, especially\n         // in shared-wallet situations.\n         vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n-        return HaveKeys(keys, keystore) == keys.size();\n+        if (HaveKeys(keys, keystore) == keys.size())\n+            return MINE_SPENDABLE;\n+        break;\n     }\n     }\n-    return false;\n+\n+    if (keystore.HaveWatchOnly(scriptPubKey.GetID()))\n+        return MINE_WATCH_ONLY;\n+    return MINE_NO;\n }\n \n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)"
      },
      {
        "sha": "75a06210725e9e22401908f3ee273ea0dd9ae20c",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -9,7 +9,6 @@\n #include <vector>\n \n #include <boost/foreach.hpp>\n-#include <boost/variant.hpp>\n \n #include \"keystore.h\"\n #include \"bignum.h\"\n@@ -38,6 +37,14 @@ enum\n     SCRIPT_VERIFY_NOCACHE   = (1U << 3), // do not store results in signature cache (but do query it)\n };\n \n+/** IsMine() return codes */\n+enum isminetype\n+{\n+    MINE_NO = 0,\n+    MINE_WATCH_ONLY = 1,\n+    MINE_SPENDABLE = 2,\n+};\n+\n enum txnouttype\n {\n     TX_NONSTANDARD,\n@@ -49,20 +56,6 @@ enum txnouttype\n     TX_NULL_DATA,\n };\n \n-class CNoDestination {\n-public:\n-    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n-    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n-};\n-\n-/** A txout script template with a specific destination. It is either:\n- *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination\n- *  * CScriptID: TX_SCRIPTHASH destination\n- *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n- */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n-\n const char* GetTxnOutputType(txnouttype t);\n \n /** Script opcodes */\n@@ -686,8 +679,8 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n-bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-bool IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);"
      },
      {
        "sha": "f2165c0f3f8a257b487b1bd83a212f3d17ab05dd",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -35,7 +35,7 @@ static void add_coin(int64 nValue, int nAge = 6*24, bool fIsFromMe = false, int\n         wtx->fDebitCached = true;\n         wtx->nDebitCached = 1;\n     }\n-    COutput output(wtx, nInput, nAge);\n+    COutput output(wtx, nInput, nAge, true);\n     vCoins.push_back(output);\n }\n "
      },
      {
        "sha": "c3dde7c24709970016f0c7241533629878cdb74f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 8,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -110,6 +110,16 @@ bool CWallet::AddCScript(const CScript& redeemScript)\n     return CWalletDB(strWalletFile).WriteCScript(Hash160(redeemScript), redeemScript);\n }\n \n+bool CWallet::AddWatchOnly(const CTxDestination &dest)\n+{\n+    if (!CCryptoKeyStore::AddWatchOnly(dest))\n+        return false;\n+    nTimeFirstKey = 1; // No birthday information for watch-only keys.\n+    if (!fFileBacked)\n+        return true;\n+    return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+}\n+\n bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n {\n     CCrypter crypter;\n@@ -542,7 +552,7 @@ void CWallet::EraseFromWallet(const uint256 &hash)\n }\n \n \n-bool CWallet::IsMine(const CTxIn &txin) const\n+isminetype CWallet::IsMine(const CTxIn &txin) const\n {\n     {\n         LOCK(cs_wallet);\n@@ -551,11 +561,10 @@ bool CWallet::IsMine(const CTxIn &txin) const\n         {\n             const CWalletTx& prev = (*mi).second;\n             if (txin.prevout.n < prev.vout.size())\n-                if (IsMine(prev.vout[txin.prevout.n]))\n-                    return true;\n+                return IsMine(prev.vout[txin.prevout.n]);\n         }\n     }\n-    return false;\n+    return MINE_NO;\n }\n \n int64 CWallet::GetDebit(const CTxIn &txin) const\n@@ -999,7 +1008,7 @@ int64 CWallet::GetImmatureBalance() const\n     return nTotal;\n }\n \n-// populate vCoins with vector of spendable COutputs\n+// populate vCoins with vector of available COutputs.\n void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed) const\n {\n     vCoins.clear();\n@@ -1020,9 +1029,10 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed) const\n                 continue;\n \n             for (unsigned int i = 0; i < pcoin->vout.size(); i++) {\n-                if (!(pcoin->IsSpent(i)) && IsMine(pcoin->vout[i]) &&\n+                isminetype mine = IsMine(pcoin->vout[i]);\n+                if (!(pcoin->IsSpent(i)) && mine &&\n                     !IsLockedCoin((*it).first, i) && pcoin->vout[i].nValue > 0)\n-                    vCoins.push_back(COutput(pcoin, i, pcoin->GetDepthInMainChain()));\n+                    vCoins.push_back(COutput(pcoin, i, pcoin->GetDepthInMainChain(), mine == MINE_SPENDABLE));\n             }\n         }\n     }\n@@ -1089,8 +1099,11 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n-    BOOST_FOREACH(COutput output, vCoins)\n+    BOOST_FOREACH(const COutput &output, vCoins)\n     {\n+        if (!output.fSpendable)\n+            continue;\n+\n         const CWalletTx *pcoin = output.tx;\n \n         if (output.nDepth < (pcoin->IsFromMe() ? nConfMine : nConfTheirs))"
      },
      {
        "sha": "3cd76d9fbc3f6ce3efadcaae54d36b3c7f5bf3cc",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -175,6 +175,11 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool AddCScript(const CScript& redeemScript);\n     bool LoadCScript(const CScript& redeemScript) { return CCryptoKeyStore::AddCScript(redeemScript); }\n \n+    // Adds a watch-only address to the store, and saves it to disk.\n+    bool AddWatchOnly(const CTxDestination &dest);\n+    // Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n+    bool LoadWatchOnly(const CTxDestination &dest) { printf(\"Loaded %s!\\n\", CBitcoinAddress(dest).ToString().c_str()); return CCryptoKeyStore::AddWatchOnly(dest); }\n+\n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n@@ -230,9 +235,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n-    bool IsMine(const CTxIn& txin) const;\n+    isminetype IsMine(const CTxIn& txin) const;\n     int64 GetDebit(const CTxIn& txin) const;\n-    bool IsMine(const CTxOut& txout) const\n+    isminetype IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n@@ -729,10 +734,11 @@ class COutput\n     const CWalletTx *tx;\n     int i;\n     int nDepth;\n+    bool fSpendable;\n \n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn)\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn;\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn;\n     }\n \n     std::string ToString() const"
      },
      {
        "sha": "acc983dc8982527a541137b8e5d68f23841aba95",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -295,6 +295,19 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                     wss.fAnyUnordered = true;\n             }\n         }\n+        else if (strType == \"watch\")\n+        {\n+            std::string strAddress;\n+            ssKey >> strAddress;\n+            char fYes;\n+            ssValue >> fYes;\n+            if (fYes == '1')\n+                pwallet->LoadWatchOnly(CBitcoinAddress(strAddress).Get());\n+\n+            // Watch-only addresses have no birthday information for now,\n+            // so set the wallet birthday to the beginning of time.\n+            pwallet->nTimeFirstKey = 1;\n+        }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n             CPubKey vchPubKey;"
      },
      {
        "sha": "a25ae87c936bb39452035255aeafcca36d449bf4",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13f1e8f61f2c4f32c72c72409ea591228557434/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13f1e8f61f2c4f32c72c72409ea591228557434/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=a13f1e8f61f2c4f32c72c72409ea591228557434",
        "patch": "@@ -85,6 +85,12 @@ class CWalletDB : public CDB\n         return Erase(std::make_pair(std::string(\"tx\"), hash));\n     }\n \n+    bool WriteWatchOnly(const CTxDestination &dest)\n+    {\n+        nWalletDBUpdated++;\n+        return Write(std::make_pair(std::string(\"watch\"), CBitcoinAddress(dest).ToString()), '1');\n+    }\n+\n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey,\n                   const CKeyMetadata &keyMeta)\n     {"
      }
    ]
  }
]