[
  {
    "sha": "910bb9f4955f8806fbf8754ee8ac9c51a753191f",
    "node_id": "C_kwDOABII59oAKDkxMGJiOWY0OTU1Zjg4MDZmYmY4NzU0ZWU4YWM5YzUxYTc1MzE5MWY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T19:49:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:42:53Z"
      },
      "message": "Types are compact size uints",
      "tree": {
        "sha": "e180386f56bd20cf4b06dde4ec632b43cc2af02f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e180386f56bd20cf4b06dde4ec632b43cc2af02f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/910bb9f4955f8806fbf8754ee8ac9c51a753191f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/910bb9f4955f8806fbf8754ee8ac9c51a753191f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/910bb9f4955f8806fbf8754ee8ac9c51a753191f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/910bb9f4955f8806fbf8754ee8ac9c51a753191f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "113b863f0773999497f952daa6539a03a66a9de3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113b863f0773999497f952daa6539a03a66a9de3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/113b863f0773999497f952daa6539a03a66a9de3"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 38,
      "deletions": 22
    },
    "files": [
      {
        "sha": "51e367b2ae8109f69082d21c94e721c5c2512a45",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 22,
        "deletions": 19,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/910bb9f4955f8806fbf8754ee8ac9c51a753191f/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/910bb9f4955f8806fbf8754ee8ac9c51a753191f/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=910bb9f4955f8806fbf8754ee8ac9c51a753191f",
        "patch": "@@ -69,52 +69,52 @@ struct PSBTInput\n     inline void Serialize(Stream& s) const {\n         // Write the utxo\n         if (non_witness_utxo) {\n-            SerializeToVector(s, PSBT_IN_NON_WITNESS_UTXO);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_NON_WITNESS_UTXO));\n             OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n             SerializeToVector(os, non_witness_utxo);\n         }\n         if (!witness_utxo.IsNull()) {\n-            SerializeToVector(s, PSBT_IN_WITNESS_UTXO);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_WITNESS_UTXO));\n             SerializeToVector(s, witness_utxo);\n         }\n \n         if (final_script_sig.empty() && final_script_witness.IsNull()) {\n             // Write any partial signatures\n             for (auto sig_pair : partial_sigs) {\n-                SerializeToVector(s, PSBT_IN_PARTIAL_SIG, MakeSpan(sig_pair.second.first));\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_PARTIAL_SIG), MakeSpan(sig_pair.second.first));\n                 s << sig_pair.second.second;\n             }\n \n             // Write the sighash type\n             if (sighash_type > 0) {\n-                SerializeToVector(s, PSBT_IN_SIGHASH);\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_SIGHASH));\n                 SerializeToVector(s, sighash_type);\n             }\n \n             // Write the redeem script\n             if (!redeem_script.empty()) {\n-                SerializeToVector(s, PSBT_IN_REDEEMSCRIPT);\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_REDEEMSCRIPT));\n                 s << redeem_script;\n             }\n \n             // Write the witness script\n             if (!witness_script.empty()) {\n-                SerializeToVector(s, PSBT_IN_WITNESSSCRIPT);\n+                SerializeToVector(s, CompactSizeWriter(PSBT_IN_WITNESSSCRIPT));\n                 s << witness_script;\n             }\n \n             // Write any hd keypaths\n-            SerializeHDKeypaths(s, hd_keypaths, PSBT_IN_BIP32_DERIVATION);\n+            SerializeHDKeypaths(s, hd_keypaths, CompactSizeWriter(PSBT_IN_BIP32_DERIVATION));\n         }\n \n         // Write script sig\n         if (!final_script_sig.empty()) {\n-            SerializeToVector(s, PSBT_IN_SCRIPTSIG);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_SCRIPTSIG));\n             s << final_script_sig;\n         }\n         // write script witness\n         if (!final_script_witness.IsNull()) {\n-            SerializeToVector(s, PSBT_IN_SCRIPTWITNESS);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_IN_SCRIPTWITNESS));\n             SerializeToVector(s, final_script_witness.stack);\n         }\n \n@@ -147,8 +147,9 @@ struct PSBTInput\n                 break;\n             }\n \n-            // First byte of key is the type\n-            unsigned char type = key[0];\n+            // Type is compact size uint at beginning of key\n+            VectorReader skey(s.GetType(), s.GetVersion(), key, 0);\n+            uint64_t type = ReadCompactSize(skey);\n \n             // Do stuff based on type\n             switch(type) {\n@@ -290,18 +291,18 @@ struct PSBTOutput\n     inline void Serialize(Stream& s) const {\n         // Write the redeem script\n         if (!redeem_script.empty()) {\n-            SerializeToVector(s, PSBT_OUT_REDEEMSCRIPT);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_OUT_REDEEMSCRIPT));\n             s << redeem_script;\n         }\n \n         // Write the witness script\n         if (!witness_script.empty()) {\n-            SerializeToVector(s, PSBT_OUT_WITNESSSCRIPT);\n+            SerializeToVector(s, CompactSizeWriter(PSBT_OUT_WITNESSSCRIPT));\n             s << witness_script;\n         }\n \n         // Write any hd keypaths\n-        SerializeHDKeypaths(s, hd_keypaths, PSBT_OUT_BIP32_DERIVATION);\n+        SerializeHDKeypaths(s, hd_keypaths, CompactSizeWriter(PSBT_OUT_BIP32_DERIVATION));\n \n         // Write unknown things\n         for (auto& entry : unknown) {\n@@ -332,8 +333,9 @@ struct PSBTOutput\n                 break;\n             }\n \n-            // First byte of key is the type\n-            unsigned char type = key[0];\n+            // Type is compact size uint at beginning of key\n+            VectorReader skey(s.GetType(), s.GetVersion(), key, 0);\n+            uint64_t type = ReadCompactSize(skey);\n \n             // Do stuff based on type\n             switch(type) {\n@@ -420,7 +422,7 @@ struct PartiallySignedTransaction\n         s << PSBT_MAGIC_BYTES;\n \n         // unsigned tx flag\n-        SerializeToVector(s, PSBT_GLOBAL_UNSIGNED_TX);\n+        SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_UNSIGNED_TX));\n \n         // Write serialized tx to a stream\n         OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n@@ -472,8 +474,9 @@ struct PartiallySignedTransaction\n                 break;\n             }\n \n-            // First byte of key is the type\n-            unsigned char type = key[0];\n+            // Type is compact size uint at beginning of key\n+            VectorReader skey(s.GetType(), s.GetVersion(), key, 0);\n+            uint64_t type = ReadCompactSize(skey);\n \n             // Do stuff based on type\n             switch(type) {"
      },
      {
        "sha": "199c3231e5deb143d0d136278e148ec839d6c268",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/910bb9f4955f8806fbf8754ee8ac9c51a753191f/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/910bb9f4955f8806fbf8754ee8ac9c51a753191f/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=910bb9f4955f8806fbf8754ee8ac9c51a753191f",
        "patch": "@@ -143,7 +143,7 @@ void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std\n \n // Serialize HD keypaths to a stream from a map\n template<typename Stream>\n-void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, uint8_t type)\n+void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, CompactSizeWriter type)\n {\n     for (auto keypath_pair : hd_keypaths) {\n         if (!keypath_pair.first.IsValid()) {"
      },
      {
        "sha": "873361fe9e95a33dfb2d3ef0032f259a985b348a",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/910bb9f4955f8806fbf8754ee8ac9c51a753191f/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/910bb9f4955f8806fbf8754ee8ac9c51a753191f/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=910bb9f4955f8806fbf8754ee8ac9c51a753191f",
        "patch": "@@ -527,6 +527,19 @@ struct CompactSizeFormatter\n     }\n };\n \n+class CompactSizeWriter\n+{\n+protected:\n+    uint64_t n;\n+public:\n+    explicit CompactSizeWriter(uint64_t n_in) : n(n_in) { }\n+\n+    template<typename Stream>\n+    void Serialize(Stream &s) const {\n+        WriteCompactSize<Stream>(s, n);\n+    }\n+};\n+\n template<size_t Limit>\n struct LimitedStringFormatter\n {"
      },
      {
        "sha": "85f882da75822cc90f014921c38624a7cc471f54",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/910bb9f4955f8806fbf8754ee8ac9c51a753191f/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/910bb9f4955f8806fbf8754ee8ac9c51a753191f/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=910bb9f4955f8806fbf8754ee8ac9c51a753191f",
        "patch": "@@ -43,7 +43,7 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n         } catch (const std::ios_base::failure&) {\n         }\n         CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n-        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        SerializeHDKeypaths(serialized, hd_keypaths, CompactSizeWriter(fuzzed_data_provider.ConsumeIntegral<uint8_t>()));\n     }\n \n     {\n@@ -61,7 +61,7 @@ FUZZ_TARGET_INIT(script_sign, initialize_script_sign)\n         }\n         CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n         try {\n-            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+            SerializeHDKeypaths(serialized, hd_keypaths, CompactSizeWriter(fuzzed_data_provider.ConsumeIntegral<uint8_t>()));\n         } catch (const std::ios_base::failure&) {\n         }\n         std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;"
      }
    ]
  },
  {
    "sha": "aef935c2b9519cba62ba354da08ee25a0312cae8",
    "node_id": "C_kwDOABII59oAKGFlZjkzNWMyYjk1MTljYmE2MmJhMzU0ZGEwOGVlMjVhMDMxMmNhZTg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T20:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:44:54Z"
      },
      "message": "Implement PSBT versions",
      "tree": {
        "sha": "1b065657a70e4773535e1f3581ab575c6afee816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b065657a70e4773535e1f3581ab575c6afee816"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aef935c2b9519cba62ba354da08ee25a0312cae8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aef935c2b9519cba62ba354da08ee25a0312cae8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aef935c2b9519cba62ba354da08ee25a0312cae8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aef935c2b9519cba62ba354da08ee25a0312cae8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "910bb9f4955f8806fbf8754ee8ac9c51a753191f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/910bb9f4955f8806fbf8754ee8ac9c51a753191f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/910bb9f4955f8806fbf8754ee8ac9c51a753191f"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0b383b48516e396cf9f6db9fccd70f572ba6779f",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aef935c2b9519cba62ba354da08ee25a0312cae8/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aef935c2b9519cba62ba354da08ee25a0312cae8/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=aef935c2b9519cba62ba354da08ee25a0312cae8",
        "patch": "@@ -20,6 +20,7 @@ static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n \n // Global types\n static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n+static constexpr uint8_t PSBT_GLOBAL_VERSION = 0xFB;\n \n // Input types\n static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;\n@@ -45,6 +46,9 @@ static constexpr uint8_t PSBT_SEPARATOR = 0x00;\n // to prevent reading a stream indefinitely and running out of memory.\n const std::streamsize MAX_FILE_SIZE_PSBT = 100000000; // 100 MiB\n \n+// PSBT version number\n+static constexpr uint32_t PSBT_HIGHEST_VERSION = 0;\n+\n /** A structure for PSBTs which contain per-input information */\n struct PSBTInput\n {\n@@ -396,6 +400,7 @@ struct PartiallySignedTransaction\n     std::vector<PSBTInput> inputs;\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+    std::optional<uint32_t> m_version;\n \n     bool IsNull() const;\n \n@@ -428,6 +433,12 @@ struct PartiallySignedTransaction\n         OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n         SerializeToVector(os, *tx);\n \n+        // PSBT version\n+        if (m_version != std::nullopt && *m_version > 0) {\n+            SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_VERSION));\n+            SerializeToVector(s, *m_version);\n+        }\n+\n         // Write the unknown things\n         for (auto& entry : unknown) {\n             s << entry.first;\n@@ -500,6 +511,21 @@ struct PartiallySignedTransaction\n                     }\n                     break;\n                 }\n+                case PSBT_GLOBAL_VERSION:\n+                {\n+                    if (m_version) {\n+                        throw std::ios_base::failure(\"Duplicate Key, version already provided\");\n+                    } else if (key.size() != 1) {\n+                        throw std::ios_base::failure(\"Global version key is more than one byte type\");\n+                    }\n+                    uint32_t v;\n+                    UnserializeFromVector(s, v);\n+                    m_version = v;\n+                    if (*m_version > PSBT_HIGHEST_VERSION) {\n+                        throw std::ios_base::failure(\"Unsupported version number\");\n+                    }\n+                    break;\n+                }\n                 // Unknown stuff\n                 default: {\n                     if (unknown.count(key) > 0) {"
      },
      {
        "sha": "ddec4e65efeae8e30246be19df1a10b3a3bbc041",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aef935c2b9519cba62ba354da08ee25a0312cae8/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aef935c2b9519cba62ba354da08ee25a0312cae8/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=aef935c2b9519cba62ba354da08ee25a0312cae8",
        "patch": "@@ -19,6 +19,7 @@\n         \"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\",\n@@ -34,7 +35,8 @@\n         \"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\"\n     ],\n     \"creator\" : [\n         {"
      }
    ]
  },
  {
    "sha": "d9e5d277eef5ac20c996a1ff04e416e2a312650c",
    "node_id": "C_kwDOABII59oAKGQ5ZTVkMjc3ZWVmNWFjMjBjOTk2YTFmZjA0ZTQxNmUyYTMxMjY1MGM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-04T22:21:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:45:23Z"
      },
      "message": "Add GetVersion helper to PSBT",
      "tree": {
        "sha": "a3ebcf93f985b1077de797a62f9d14907d9d7f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3ebcf93f985b1077de797a62f9d14907d9d7f3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9e5d277eef5ac20c996a1ff04e416e2a312650c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e5d277eef5ac20c996a1ff04e416e2a312650c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e5d277eef5ac20c996a1ff04e416e2a312650c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e5d277eef5ac20c996a1ff04e416e2a312650c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aef935c2b9519cba62ba354da08ee25a0312cae8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aef935c2b9519cba62ba354da08ee25a0312cae8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aef935c2b9519cba62ba354da08ee25a0312cae8"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b673d5e41aaef1807166766f5f5a9fa7b0e2d1ee",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9e5d277eef5ac20c996a1ff04e416e2a312650c/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9e5d277eef5ac20c996a1ff04e416e2a312650c/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=d9e5d277eef5ac20c996a1ff04e416e2a312650c",
        "patch": "@@ -397,3 +397,11 @@ bool DecodeRawPSBT(PartiallySignedTransaction& psbt, const std::string& tx_data,\n     }\n     return true;\n }\n+\n+uint32_t PartiallySignedTransaction::GetVersion() const\n+{\n+    if (m_version != std::nullopt) {\n+        return *m_version;\n+    }\n+    return 0;\n+}"
      },
      {
        "sha": "26a177ce2e3d17735929b62957362c4351a9a08f",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9e5d277eef5ac20c996a1ff04e416e2a312650c/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9e5d277eef5ac20c996a1ff04e416e2a312650c/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=d9e5d277eef5ac20c996a1ff04e416e2a312650c",
        "patch": "@@ -403,6 +403,7 @@ struct PartiallySignedTransaction\n     std::optional<uint32_t> m_version;\n \n     bool IsNull() const;\n+    uint32_t GetVersion() const;\n \n     /** Merge psbt into this. The two psbts must have the same underlying CTransaction (i.e. the\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n@@ -434,7 +435,7 @@ struct PartiallySignedTransaction\n         SerializeToVector(os, *tx);\n \n         // PSBT version\n-        if (m_version != std::nullopt && *m_version > 0) {\n+        if (GetVersion() > 0) {\n             SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_VERSION));\n             SerializeToVector(s, *m_version);\n         }"
      }
    ]
  },
  {
    "sha": "370048fe0637ae07f9a6d485ac9a96debe8a0b1b",
    "node_id": "C_kwDOABII59oAKDM3MDA0OGZlMDYzN2FlMDdmOWE2ZDQ4NWFjOWE5NmRlYmU4YTBiMWI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-01-25T21:49:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:45:25Z"
      },
      "message": "Output psbt version in decodepsbt",
      "tree": {
        "sha": "74bf962b3e8aabb7b9e3b7a57532f45eebef2b77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74bf962b3e8aabb7b9e3b7a57532f45eebef2b77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/370048fe0637ae07f9a6d485ac9a96debe8a0b1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/370048fe0637ae07f9a6d485ac9a96debe8a0b1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/370048fe0637ae07f9a6d485ac9a96debe8a0b1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/370048fe0637ae07f9a6d485ac9a96debe8a0b1b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9e5d277eef5ac20c996a1ff04e416e2a312650c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e5d277eef5ac20c996a1ff04e416e2a312650c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e5d277eef5ac20c996a1ff04e416e2a312650c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6696d619f9eaf3726a36c8c9f9421996b03edb6d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/370048fe0637ae07f9a6d485ac9a96debe8a0b1b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/370048fe0637ae07f9a6d485ac9a96debe8a0b1b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=370048fe0637ae07f9a6d485ac9a96debe8a0b1b",
        "patch": "@@ -1022,6 +1022,7 @@ static RPCHelpMan decodepsbt()\n                         {\n                             {RPCResult::Type::ELISION, \"\", \"The layout is the same as the output of decoderawtransaction.\"},\n                         }},\n+                        {RPCResult::Type::NUM, \"psbt_version\", \"The PSBT version number. Not to be confused with the unsigned transaction version\"},\n                         {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n                         {\n                              {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n@@ -1141,6 +1142,9 @@ static RPCHelpMan decodepsbt()\n     TxToUniv(CTransaction(*psbtx.tx), uint256(), tx_univ, false);\n     result.pushKV(\"tx\", tx_univ);\n \n+    // PSBT version\n+    result.pushKV(\"psbt_version\", static_cast<uint64_t>(psbtx.GetVersion()));\n+\n     // Unknown data\n     UniValue unknowns(UniValue::VOBJ);\n     for (auto entry : psbtx.unknown) {"
      }
    ]
  },
  {
    "sha": "2989d4ba7b353b85af6dfd7bd08166be1a33c00d",
    "node_id": "C_kwDOABII59oAKDI5ODlkNGJhN2IzNTNiODVhZjZkZmQ3YmQwODE2NmJlMWEzM2MwMGQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T20:45:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:45:25Z"
      },
      "message": "Implement PSBT proprietary type",
      "tree": {
        "sha": "fcad27c5141d81b932536a45d8e142f8f5d4632a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcad27c5141d81b932536a45d8e142f8f5d4632a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2989d4ba7b353b85af6dfd7bd08166be1a33c00d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2989d4ba7b353b85af6dfd7bd08166be1a33c00d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2989d4ba7b353b85af6dfd7bd08166be1a33c00d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2989d4ba7b353b85af6dfd7bd08166be1a33c00d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "370048fe0637ae07f9a6d485ac9a96debe8a0b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/370048fe0637ae07f9a6d485ac9a96debe8a0b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/370048fe0637ae07f9a6d485ac9a96debe8a0b1b"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "59a946f911d2fe636d695831a29aad718593ef59",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2989d4ba7b353b85af6dfd7bd08166be1a33c00d/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2989d4ba7b353b85af6dfd7bd08166be1a33c00d/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=2989d4ba7b353b85af6dfd7bd08166be1a33c00d",
        "patch": "@@ -21,6 +21,7 @@ static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n // Global types\n static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n static constexpr uint8_t PSBT_GLOBAL_VERSION = 0xFB;\n+static constexpr uint8_t PSBT_GLOBAL_PROPRIETARY = 0xFC;\n \n // Input types\n static constexpr uint8_t PSBT_IN_NON_WITNESS_UTXO = 0x00;\n@@ -32,11 +33,13 @@ static constexpr uint8_t PSBT_IN_WITNESSSCRIPT = 0x05;\n static constexpr uint8_t PSBT_IN_BIP32_DERIVATION = 0x06;\n static constexpr uint8_t PSBT_IN_SCRIPTSIG = 0x07;\n static constexpr uint8_t PSBT_IN_SCRIPTWITNESS = 0x08;\n+static constexpr uint8_t PSBT_IN_PROPRIETARY = 0xFC;\n \n // Output types\n static constexpr uint8_t PSBT_OUT_REDEEMSCRIPT = 0x00;\n static constexpr uint8_t PSBT_OUT_WITNESSSCRIPT = 0x01;\n static constexpr uint8_t PSBT_OUT_BIP32_DERIVATION = 0x02;\n+static constexpr uint8_t PSBT_OUT_PROPRIETARY = 0xFC;\n \n // The separator is 0x00. Reading this in means that the unserializer can interpret it\n // as a 0 length key which indicates that this is the separator. The separator has no value.\n@@ -49,6 +52,22 @@ const std::streamsize MAX_FILE_SIZE_PSBT = 100000000; // 100 MiB\n // PSBT version number\n static constexpr uint32_t PSBT_HIGHEST_VERSION = 0;\n \n+/** A structure for PSBT proprietary types */\n+struct PSBTProprietary\n+{\n+    uint64_t subtype;\n+    std::vector<unsigned char> identifier;\n+    std::vector<unsigned char> key;\n+    std::vector<unsigned char> value;\n+\n+    bool operator<(const PSBTProprietary &b) const {\n+        return key < b.key;\n+    }\n+    bool operator==(const PSBTProprietary &b) const {\n+        return key == b.key;\n+    }\n+};\n+\n /** A structure for PSBTs which contain per-input information */\n struct PSBTInput\n {\n@@ -61,6 +80,7 @@ struct PSBTInput\n     std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n     std::map<CKeyID, SigPair> partial_sigs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+    std::set<PSBTProprietary> m_proprietary;\n     int sighash_type = 0;\n \n     bool IsNull() const;\n@@ -122,6 +142,12 @@ struct PSBTInput\n             SerializeToVector(s, final_script_witness.stack);\n         }\n \n+        // Write proprietary things\n+        for (const auto& entry : m_proprietary) {\n+            s << entry.key;\n+            s << entry.value;\n+        }\n+\n         // Write unknown things\n         for (auto& entry : unknown) {\n             s << entry.first;\n@@ -253,6 +279,20 @@ struct PSBTInput\n                     UnserializeFromVector(s, final_script_witness.stack);\n                     break;\n                 }\n+                case PSBT_IN_PROPRIETARY:\n+                {\n+                    PSBTProprietary this_prop;\n+                    skey >> this_prop.identifier;\n+                    this_prop.subtype = ReadCompactSize(skey);\n+                    this_prop.key = key;\n+\n+                    if (m_proprietary.count(this_prop) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, proprietary key already found\");\n+                    }\n+                    s >> this_prop.value;\n+                    m_proprietary.insert(this_prop);\n+                    break;\n+                }\n                 // Unknown stuff\n                 default:\n                     if (unknown.count(key) > 0) {\n@@ -284,6 +324,7 @@ struct PSBTOutput\n     CScript witness_script;\n     std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n+    std::set<PSBTProprietary> m_proprietary;\n \n     bool IsNull() const;\n     void FillSignatureData(SignatureData& sigdata) const;\n@@ -308,6 +349,12 @@ struct PSBTOutput\n         // Write any hd keypaths\n         SerializeHDKeypaths(s, hd_keypaths, CompactSizeWriter(PSBT_OUT_BIP32_DERIVATION));\n \n+        // Write proprietary things\n+        for (const auto& entry : m_proprietary) {\n+            s << entry.key;\n+            s << entry.value;\n+        }\n+\n         // Write unknown things\n         for (auto& entry : unknown) {\n             s << entry.first;\n@@ -368,6 +415,20 @@ struct PSBTOutput\n                     DeserializeHDKeypaths(s, key, hd_keypaths);\n                     break;\n                 }\n+                case PSBT_OUT_PROPRIETARY:\n+                {\n+                    PSBTProprietary this_prop;\n+                    skey >> this_prop.identifier;\n+                    this_prop.subtype = ReadCompactSize(skey);\n+                    this_prop.key = key;\n+\n+                    if (m_proprietary.count(this_prop) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, proprietary key already found\");\n+                    }\n+                    s >> this_prop.value;\n+                    m_proprietary.insert(this_prop);\n+                    break;\n+                }\n                 // Unknown stuff\n                 default: {\n                     if (unknown.count(key) > 0) {\n@@ -401,6 +462,7 @@ struct PartiallySignedTransaction\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n     std::optional<uint32_t> m_version;\n+    std::set<PSBTProprietary> m_proprietary;\n \n     bool IsNull() const;\n     uint32_t GetVersion() const;\n@@ -440,6 +502,12 @@ struct PartiallySignedTransaction\n             SerializeToVector(s, *m_version);\n         }\n \n+        // Write proprietary things\n+        for (const auto& entry : m_proprietary) {\n+            s << entry.key;\n+            s << entry.value;\n+        }\n+\n         // Write the unknown things\n         for (auto& entry : unknown) {\n             s << entry.first;\n@@ -527,6 +595,20 @@ struct PartiallySignedTransaction\n                     }\n                     break;\n                 }\n+                case PSBT_GLOBAL_PROPRIETARY:\n+                {\n+                    PSBTProprietary this_prop;\n+                    skey >> this_prop.identifier;\n+                    this_prop.subtype = ReadCompactSize(skey);\n+                    this_prop.key = key;\n+\n+                    if (m_proprietary.count(this_prop) > 0) {\n+                        throw std::ios_base::failure(\"Duplicate Key, proprietary key already found\");\n+                    }\n+                    s >> this_prop.value;\n+                    m_proprietary.insert(this_prop);\n+                    break;\n+                }\n                 // Unknown stuff\n                 default: {\n                     if (unknown.count(key) > 0) {"
      }
    ]
  },
  {
    "sha": "a5dced1fe84f9002df706db89c6cf1f9013df1ae",
    "node_id": "C_kwDOABII59oAKGE1ZGNlZDFmZTg0ZjkwMDJkZjcwNmRiODljNmNmMWY5MDEzZGYxYWU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T20:58:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:45:25Z"
      },
      "message": "Output proprietary type info in decodepsbt",
      "tree": {
        "sha": "b183ffd16adc1438506cdf9c62ab6c2f81fe68cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b183ffd16adc1438506cdf9c62ab6c2f81fe68cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5dced1fe84f9002df706db89c6cf1f9013df1ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5dced1fe84f9002df706db89c6cf1f9013df1ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5dced1fe84f9002df706db89c6cf1f9013df1ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5dced1fe84f9002df706db89c6cf1f9013df1ae/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2989d4ba7b353b85af6dfd7bd08166be1a33c00d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2989d4ba7b353b85af6dfd7bd08166be1a33c00d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2989d4ba7b353b85af6dfd7bd08166be1a33c00d"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 70,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1e39e5d11ca189eb9ba56bdee5391f2f6249d3bd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5dced1fe84f9002df706db89c6cf1f9013df1ae/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5dced1fe84f9002df706db89c6cf1f9013df1ae/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a5dced1fe84f9002df706db89c6cf1f9013df1ae",
        "patch": "@@ -1023,6 +1023,16 @@ static RPCHelpMan decodepsbt()\n                             {RPCResult::Type::ELISION, \"\", \"The layout is the same as the output of decoderawtransaction.\"},\n                         }},\n                         {RPCResult::Type::NUM, \"psbt_version\", \"The PSBT version number. Not to be confused with the unsigned transaction version\"},\n+                        {RPCResult::Type::ARR, \"proprietary\", \"The global proprietary map\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR_HEX, \"identifier\", \"The hex string for the proprietary identifier\"},\n+                                {RPCResult::Type::NUM, \"subtype\", \"The number for the subtype\"},\n+                                {RPCResult::Type::STR_HEX, \"key\", \"The hex for the key\"},\n+                                {RPCResult::Type::STR_HEX, \"value\", \"The hex for the value\"},\n+                            }},\n+                        }},\n                         {RPCResult::Type::OBJ_DYN, \"unknown\", \"The unknown global fields\",\n                         {\n                              {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n@@ -1085,6 +1095,16 @@ static RPCHelpMan decodepsbt()\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n                                 }},\n+                                {RPCResult::Type::ARR, \"proprietary\", \"The input proprietary map\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR_HEX, \"identifier\", \"The hex string for the proprietary identifier\"},\n+                                        {RPCResult::Type::NUM, \"subtype\", \"The number for the subtype\"},\n+                                        {RPCResult::Type::STR_HEX, \"key\", \"The hex for the key\"},\n+                                        {RPCResult::Type::STR_HEX, \"value\", \"The hex for the value\"},\n+                                    }},\n+                                }},\n                             }},\n                         }},\n                         {RPCResult::Type::ARR, \"outputs\", \"\",\n@@ -1116,6 +1136,16 @@ static RPCHelpMan decodepsbt()\n                                 {\n                                     {RPCResult::Type::STR_HEX, \"key\", \"(key-value pair) An unknown key-value pair\"},\n                                 }},\n+                                {RPCResult::Type::ARR, \"proprietary\", \"The output proprietary map\",\n+                                {\n+                                    {RPCResult::Type::OBJ, \"\", \"\",\n+                                    {\n+                                        {RPCResult::Type::STR_HEX, \"identifier\", \"The hex string for the proprietary identifier\"},\n+                                        {RPCResult::Type::NUM, \"subtype\", \"The number for the subtype\"},\n+                                        {RPCResult::Type::STR_HEX, \"key\", \"The hex for the key\"},\n+                                        {RPCResult::Type::STR_HEX, \"value\", \"The hex for the value\"},\n+                                    }},\n+                                }},\n                             }},\n                         }},\n                         {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The transaction fee paid if all UTXOs slots in the PSBT have been filled.\"},\n@@ -1145,6 +1175,18 @@ static RPCHelpMan decodepsbt()\n     // PSBT version\n     result.pushKV(\"psbt_version\", static_cast<uint64_t>(psbtx.GetVersion()));\n \n+    // Proprietary\n+    UniValue proprietary(UniValue::VARR);\n+    for (const auto& entry : psbtx.m_proprietary) {\n+        UniValue this_prop(UniValue::VOBJ);\n+        this_prop.pushKV(\"identifier\", HexStr(entry.identifier));\n+        this_prop.pushKV(\"subtype\", entry.subtype);\n+        this_prop.pushKV(\"key\", HexStr(entry.key));\n+        this_prop.pushKV(\"value\", HexStr(entry.value));\n+        proprietary.push_back(this_prop);\n+    }\n+    result.pushKV(\"proprietary\", proprietary);\n+\n     // Unknown data\n     UniValue unknowns(UniValue::VOBJ);\n     for (auto entry : psbtx.unknown) {\n@@ -1251,6 +1293,20 @@ static RPCHelpMan decodepsbt()\n             in.pushKV(\"final_scriptwitness\", txinwitness);\n         }\n \n+        // Proprietary\n+        if (!input.m_proprietary.empty()) {\n+            UniValue proprietary(UniValue::VARR);\n+            for (const auto& entry : input.m_proprietary) {\n+                UniValue this_prop(UniValue::VOBJ);\n+                this_prop.pushKV(\"identifier\", HexStr(entry.identifier));\n+                this_prop.pushKV(\"subtype\", entry.subtype);\n+                this_prop.pushKV(\"key\", HexStr(entry.key));\n+                this_prop.pushKV(\"value\", HexStr(entry.value));\n+                proprietary.push_back(this_prop);\n+            }\n+            in.pushKV(\"proprietary\", proprietary);\n+        }\n+\n         // Unknown data\n         if (input.unknown.size() > 0) {\n             UniValue unknowns(UniValue::VOBJ);\n@@ -1295,6 +1351,20 @@ static RPCHelpMan decodepsbt()\n             out.pushKV(\"bip32_derivs\", keypaths);\n         }\n \n+        // Proprietary\n+        if (!output.m_proprietary.empty()) {\n+            UniValue proprietary(UniValue::VARR);\n+            for (const auto& entry : output.m_proprietary) {\n+                UniValue this_prop(UniValue::VOBJ);\n+                this_prop.pushKV(\"identifier\", HexStr(entry.identifier));\n+                this_prop.pushKV(\"subtype\", entry.subtype);\n+                this_prop.pushKV(\"key\", HexStr(entry.key));\n+                this_prop.pushKV(\"value\", HexStr(entry.value));\n+                proprietary.push_back(this_prop);\n+            }\n+            out.pushKV(\"proprietary\", proprietary);\n+        }\n+\n         // Unknown data\n         if (output.unknown.size() > 0) {\n             UniValue unknowns(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "e93d3e7b1e3f2542155894b0912a700f3196f27e",
    "node_id": "C_kwDOABII59oAKGU5M2QzZTdiMWUzZjI1NDIxNTU4OTRiMDkxMmE3MDBmMzE5NmYyN2U",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-10-02T23:28:52Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:47:43Z"
      },
      "message": "Test for proprietary field",
      "tree": {
        "sha": "46886aaa34c3a0a71f7d1821508b873111bf348f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46886aaa34c3a0a71f7d1821508b873111bf348f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e93d3e7b1e3f2542155894b0912a700f3196f27e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93d3e7b1e3f2542155894b0912a700f3196f27e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e93d3e7b1e3f2542155894b0912a700f3196f27e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93d3e7b1e3f2542155894b0912a700f3196f27e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5dced1fe84f9002df706db89c6cf1f9013df1ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5dced1fe84f9002df706db89c6cf1f9013df1ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5dced1fe84f9002df706db89c6cf1f9013df1ae"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9c7284d40d7bebc04766db8272e6036525de485a",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e93d3e7b1e3f2542155894b0912a700f3196f27e/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e93d3e7b1e3f2542155894b0912a700f3196f27e/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=e93d3e7b1e3f2542155894b0912a700f3196f27e",
        "patch": "@@ -36,7 +36,8 @@\n         \"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\"\n     ],\n     \"creator\" : [\n         {"
      }
    ]
  },
  {
    "sha": "d04ea0402d4f0fee9301ecfea04d8000681154f4",
    "node_id": "C_kwDOABII59oAKGQwNGVhMDQwMmQ0ZjBmZWU5MzAxZWNmZWEwNGQ4MDAwNjgxMTU0ZjQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:26:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:49:26Z"
      },
      "message": "moveonly: Move (Un)Serialize(To/From)Vector, (De)SerializeHDKeypaths to psbt module\n\nSerializeToVector, UnserializeFromVector, DeserializeHDKeypaths, and SerializeHDKeypaths\nwere in sign.h where PSBT was originally implemented. Since all of the PSBT serialization\nhas moved to its own file, these functions should follow.",
      "tree": {
        "sha": "42b1aa22576c3c8193a4069ac1cd47dbaea5c1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42b1aa22576c3c8193a4069ac1cd47dbaea5c1fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d04ea0402d4f0fee9301ecfea04d8000681154f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04ea0402d4f0fee9301ecfea04d8000681154f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d04ea0402d4f0fee9301ecfea04d8000681154f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04ea0402d4f0fee9301ecfea04d8000681154f4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e93d3e7b1e3f2542155894b0912a700f3196f27e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e93d3e7b1e3f2542155894b0912a700f3196f27e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e93d3e7b1e3f2542155894b0912a700f3196f27e"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 80,
      "deletions": 78
    },
    "files": [
      {
        "sha": "78017a9e4a79743bd31d31c80c874f084f537c93",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=d04ea0402d4f0fee9301ecfea04d8000681154f4",
        "patch": "@@ -10,8 +10,11 @@\n #include <policy/feerate.h>\n #include <primitives/transaction.h>\n #include <pubkey.h>\n+#include <script/keyorigin.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n+#include <span.h>\n+#include <streams.h>\n \n #include <optional>\n \n@@ -68,6 +71,80 @@ struct PSBTProprietary\n     }\n };\n \n+// Takes a stream and multiple arguments and serializes them as if first serialized into a vector and then into the stream\n+// The resulting output into the stream has the total serialized length of all of the objects followed by all objects concatenated with each other.\n+template<typename Stream, typename... X>\n+void SerializeToVector(Stream& s, const X&... args)\n+{\n+    WriteCompactSize(s, GetSerializeSizeMany(s.GetVersion(), args...));\n+    SerializeMany(s, args...);\n+}\n+\n+// Takes a stream and multiple arguments and unserializes them first as a vector then each object individually in the order provided in the arguments\n+template<typename Stream, typename... X>\n+void UnserializeFromVector(Stream& s, X&... args)\n+{\n+    size_t expected_size = ReadCompactSize(s);\n+    size_t remaining_before = s.size();\n+    UnserializeMany(s, args...);\n+    size_t remaining_after = s.size();\n+    if (remaining_after + expected_size != remaining_before) {\n+        throw std::ios_base::failure(\"Size of value was not the stated size\");\n+    }\n+}\n+\n+// Deserialize HD keypaths into a map\n+template<typename Stream>\n+void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)\n+{\n+    // Make sure that the key is the size of pubkey + 1\n+    if (key.size() != CPubKey::SIZE + 1 && key.size() != CPubKey::COMPRESSED_SIZE + 1) {\n+        throw std::ios_base::failure(\"Size of key was not the expected size for the type BIP32 keypath\");\n+    }\n+    // Read in the pubkey from key\n+    CPubKey pubkey(key.begin() + 1, key.end());\n+    if (!pubkey.IsFullyValid()) {\n+       throw std::ios_base::failure(\"Invalid pubkey\");\n+    }\n+    if (hd_keypaths.count(pubkey) > 0) {\n+        throw std::ios_base::failure(\"Duplicate Key, pubkey derivation path already provided\");\n+    }\n+\n+    // Read in key path\n+    uint64_t value_len = ReadCompactSize(s);\n+    if (value_len % 4 || value_len == 0) {\n+        throw std::ios_base::failure(\"Invalid length for HD key path\");\n+    }\n+\n+    KeyOriginInfo keypath;\n+    s >> keypath.fingerprint;\n+    for (unsigned int i = 4; i < value_len; i += sizeof(uint32_t)) {\n+        uint32_t index;\n+        s >> index;\n+        keypath.path.push_back(index);\n+    }\n+\n+    // Add to map\n+    hd_keypaths.emplace(pubkey, std::move(keypath));\n+}\n+\n+// Serialize HD keypaths to a stream from a map\n+template<typename Stream>\n+void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, CompactSizeWriter type)\n+{\n+    for (auto keypath_pair : hd_keypaths) {\n+        if (!keypath_pair.first.IsValid()) {\n+            throw std::ios_base::failure(\"Invalid CPubKey being serialized\");\n+        }\n+        SerializeToVector(s, type, MakeSpan(keypath_pair.first));\n+        WriteCompactSize(s, (keypath_pair.second.path.size() + 1) * sizeof(uint32_t));\n+        s << keypath_pair.second.fingerprint;\n+        for (const auto& path : keypath_pair.second.path) {\n+            s << path;\n+        }\n+    }\n+}\n+\n /** A structure for PSBTs which contain per-input information */\n struct PSBTInput\n {"
      },
      {
        "sha": "df11a94cd7f094afe7ac552f20b16da35d5c6d1e",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=d04ea0402d4f0fee9301ecfea04d8000681154f4",
        "patch": "@@ -9,6 +9,7 @@\n #include <key.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n+#include <script/keyorigin.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <uint256.h>"
      },
      {
        "sha": "f88832290a585b52f53a2972c470083a827abed3",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 0,
        "deletions": 76,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=d04ea0402d4f0fee9301ecfea04d8000681154f4",
        "patch": "@@ -12,8 +12,6 @@\n #include <script/interpreter.h>\n #include <script/keyorigin.h>\n #include <script/standard.h>\n-#include <span.h>\n-#include <streams.h>\n \n class CKey;\n class CKeyID;\n@@ -84,80 +82,6 @@ struct SignatureData {\n     void MergeSignatureData(SignatureData sigdata);\n };\n \n-// Takes a stream and multiple arguments and serializes them as if first serialized into a vector and then into the stream\n-// The resulting output into the stream has the total serialized length of all of the objects followed by all objects concatenated with each other.\n-template<typename Stream, typename... X>\n-void SerializeToVector(Stream& s, const X&... args)\n-{\n-    WriteCompactSize(s, GetSerializeSizeMany(s.GetVersion(), args...));\n-    SerializeMany(s, args...);\n-}\n-\n-// Takes a stream and multiple arguments and unserializes them first as a vector then each object individually in the order provided in the arguments\n-template<typename Stream, typename... X>\n-void UnserializeFromVector(Stream& s, X&... args)\n-{\n-    size_t expected_size = ReadCompactSize(s);\n-    size_t remaining_before = s.size();\n-    UnserializeMany(s, args...);\n-    size_t remaining_after = s.size();\n-    if (remaining_after + expected_size != remaining_before) {\n-        throw std::ios_base::failure(\"Size of value was not the stated size\");\n-    }\n-}\n-\n-// Deserialize HD keypaths into a map\n-template<typename Stream>\n-void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)\n-{\n-    // Make sure that the key is the size of pubkey + 1\n-    if (key.size() != CPubKey::SIZE + 1 && key.size() != CPubKey::COMPRESSED_SIZE + 1) {\n-        throw std::ios_base::failure(\"Size of key was not the expected size for the type BIP32 keypath\");\n-    }\n-    // Read in the pubkey from key\n-    CPubKey pubkey(key.begin() + 1, key.end());\n-    if (!pubkey.IsFullyValid()) {\n-       throw std::ios_base::failure(\"Invalid pubkey\");\n-    }\n-    if (hd_keypaths.count(pubkey) > 0) {\n-        throw std::ios_base::failure(\"Duplicate Key, pubkey derivation path already provided\");\n-    }\n-\n-    // Read in key path\n-    uint64_t value_len = ReadCompactSize(s);\n-    if (value_len % 4 || value_len == 0) {\n-        throw std::ios_base::failure(\"Invalid length for HD key path\");\n-    }\n-\n-    KeyOriginInfo keypath;\n-    s >> keypath.fingerprint;\n-    for (unsigned int i = 4; i < value_len; i += sizeof(uint32_t)) {\n-        uint32_t index;\n-        s >> index;\n-        keypath.path.push_back(index);\n-    }\n-\n-    // Add to map\n-    hd_keypaths.emplace(pubkey, std::move(keypath));\n-}\n-\n-// Serialize HD keypaths to a stream from a map\n-template<typename Stream>\n-void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, CompactSizeWriter type)\n-{\n-    for (auto keypath_pair : hd_keypaths) {\n-        if (!keypath_pair.first.IsValid()) {\n-            throw std::ios_base::failure(\"Invalid CPubKey being serialized\");\n-        }\n-        SerializeToVector(s, type, MakeSpan(keypath_pair.first));\n-        WriteCompactSize(s, (keypath_pair.second.path.size() + 1) * sizeof(uint32_t));\n-        s << keypath_pair.second.fingerprint;\n-        for (const auto& path : keypath_pair.second.path) {\n-            s << path;\n-        }\n-    }\n-}\n-\n /** Produce a script signature using a generic signature creator. */\n bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n "
      },
      {
        "sha": "b8b3e03dd36da1e5a0f731be3596ad0d6e6ba8c0",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=d04ea0402d4f0fee9301ecfea04d8000681154f4",
        "patch": "@@ -8,12 +8,11 @@\n \n #include <key.h>\n #include <pubkey.h>\n+#include <script/keyorigin.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>\n \n-struct KeyOriginInfo;\n-\n /** An interface to be implemented by keystores that support signing. */\n class SigningProvider\n {"
      },
      {
        "sha": "18a4ffc71e48c68057140cb5f49c03dc82561fe1",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d04ea0402d4f0fee9301ecfea04d8000681154f4/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=d04ea0402d4f0fee9301ecfea04d8000681154f4",
        "patch": "@@ -5,6 +5,7 @@\n #include <chainparams.h>\n #include <chainparamsbase.h>\n #include <key.h>\n+#include <psbt.h>\n #include <pubkey.h>\n #include <script/keyorigin.h>\n #include <script/sign.h>"
      }
    ]
  },
  {
    "sha": "3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37",
    "node_id": "C_kwDOABII59oAKDNkZDdkMGI0ZDQ3ZjEzNjhlOGI3NTc1MmMwY2Q0YjBlZDk0MjRhMzc",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:28:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:49:27Z"
      },
      "message": "Store version bytes and be able to serialize them in CExtPubKey\n\nCExtPubKey does not store the version bytes for the extended public key.\nWe store these so that a CExtPubKey can be serialized and deserialized with\nthe same version bytes.",
      "tree": {
        "sha": "38d043a8d81dac70c74b73a576172f12e69003a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38d043a8d81dac70c74b73a576172f12e69003a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d04ea0402d4f0fee9301ecfea04d8000681154f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d04ea0402d4f0fee9301ecfea04d8000681154f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d04ea0402d4f0fee9301ecfea04d8000681154f4"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "20136a6411236fd2c4c63c1a92f870aadce30cb2",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37",
        "patch": "@@ -353,6 +353,18 @@ void CExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE]) {\n     if ((nDepth == 0 && (nChild != 0 || ReadLE32(vchFingerprint) != 0)) || !pubkey.IsFullyValid()) pubkey = CPubKey();\n }\n \n+void CExtPubKey::EncodeWithVersion(unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE]) const\n+{\n+    memcpy(code, version, 4);\n+    Encode(&code[4]);\n+}\n+\n+void CExtPubKey::DecodeWithVersion(const unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE])\n+{\n+    memcpy(version, code, 4);\n+    Decode(&code[4]);\n+}\n+\n bool CExtPubKey::Derive(CExtPubKey &out, unsigned int _nChild) const {\n     out.nDepth = nDepth + 1;\n     CKeyID id = pubkey.GetID();"
      },
      {
        "sha": "f80f2b21b63a942be2704799523daa74991b52e8",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37",
        "patch": "@@ -17,6 +17,7 @@\n #include <vector>\n \n const unsigned int BIP32_EXTKEY_SIZE = 74;\n+const unsigned int BIP32_EXTKEY_WITH_VERSION_SIZE = 78;\n \n /** A reference to a CKey: the Hash160 of its serialized public key */\n class CKeyID : public uint160\n@@ -285,6 +286,7 @@ class XOnlyPubKey\n };\n \n struct CExtPubKey {\n+    unsigned char version[4];\n     unsigned char nDepth;\n     unsigned char vchFingerprint[4];\n     unsigned int nChild;\n@@ -307,6 +309,8 @@ struct CExtPubKey {\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n+    void EncodeWithVersion(unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE]) const;\n+    void DecodeWithVersion(const unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;\n };\n "
      }
    ]
  },
  {
    "sha": "c1cdae6953adebea21b2e5d314dbd62800e4a564",
    "node_id": "C_kwDOABII59oAKGMxY2RhZTY5NTNhZGViZWEyMWIyZTVkMzE0ZGJkNjI4MDBlNGE1NjQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:32:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:49:27Z"
      },
      "message": "Separate individual HD Keypath serialization into separate functions",
      "tree": {
        "sha": "2e8596a717e868608e7ad2b94389a602b23ecf66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e8596a717e868608e7ad2b94389a602b23ecf66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1cdae6953adebea21b2e5d314dbd62800e4a564",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1cdae6953adebea21b2e5d314dbd62800e4a564",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1cdae6953adebea21b2e5d314dbd62800e4a564",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1cdae6953adebea21b2e5d314dbd62800e4a564/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dd7d0b4d47f1368e8b75752c0cd4b0ed9424a37"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 31,
      "deletions": 17
    },
    "files": [
      {
        "sha": "307429e66a621574d3e8d81a50f564e6eec9e1b1",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 31,
        "deletions": 17,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1cdae6953adebea21b2e5d314dbd62800e4a564/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1cdae6953adebea21b2e5d314dbd62800e4a564/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=c1cdae6953adebea21b2e5d314dbd62800e4a564",
        "patch": "@@ -93,6 +93,24 @@ void UnserializeFromVector(Stream& s, X&... args)\n     }\n }\n \n+// Deserialize an individual HD keypath to a stream\n+template<typename Stream>\n+void DeserializeHDKeypath(Stream& s, KeyOriginInfo& hd_keypath)\n+{\n+    // Read in key path\n+    uint64_t value_len = ReadCompactSize(s);\n+    if (value_len % 4 || value_len == 0) {\n+        throw std::ios_base::failure(\"Invalid length for HD key path\");\n+    }\n+\n+    s >> hd_keypath.fingerprint;\n+    for (unsigned int i = 4; i < value_len; i += sizeof(uint32_t)) {\n+        uint32_t index;\n+        s >> index;\n+        hd_keypath.path.push_back(index);\n+    }\n+}\n+\n // Deserialize HD keypaths into a map\n template<typename Stream>\n void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std::map<CPubKey, KeyOriginInfo>& hd_keypaths)\n@@ -110,24 +128,24 @@ void DeserializeHDKeypaths(Stream& s, const std::vector<unsigned char>& key, std\n         throw std::ios_base::failure(\"Duplicate Key, pubkey derivation path already provided\");\n     }\n \n-    // Read in key path\n-    uint64_t value_len = ReadCompactSize(s);\n-    if (value_len % 4 || value_len == 0) {\n-        throw std::ios_base::failure(\"Invalid length for HD key path\");\n-    }\n-\n     KeyOriginInfo keypath;\n-    s >> keypath.fingerprint;\n-    for (unsigned int i = 4; i < value_len; i += sizeof(uint32_t)) {\n-        uint32_t index;\n-        s >> index;\n-        keypath.path.push_back(index);\n-    }\n+    DeserializeHDKeypath(s, keypath);\n \n     // Add to map\n     hd_keypaths.emplace(pubkey, std::move(keypath));\n }\n \n+// Serialize an individual HD keypath to a stream\n+template<typename Stream>\n+void SerializeHDKeypath(Stream& s, KeyOriginInfo hd_keypath)\n+{\n+    WriteCompactSize(s, (hd_keypath.path.size() + 1) * sizeof(uint32_t));\n+    s << hd_keypath.fingerprint;\n+    for (const auto& path : hd_keypath.path) {\n+        s << path;\n+    }\n+}\n+\n // Serialize HD keypaths to a stream from a map\n template<typename Stream>\n void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_keypaths, CompactSizeWriter type)\n@@ -137,11 +155,7 @@ void SerializeHDKeypaths(Stream& s, const std::map<CPubKey, KeyOriginInfo>& hd_k\n             throw std::ios_base::failure(\"Invalid CPubKey being serialized\");\n         }\n         SerializeToVector(s, type, MakeSpan(keypath_pair.first));\n-        WriteCompactSize(s, (keypath_pair.second.path.size() + 1) * sizeof(uint32_t));\n-        s << keypath_pair.second.fingerprint;\n-        for (const auto& path : keypath_pair.second.path) {\n-            s << path;\n-        }\n+        SerializeHDKeypath(s, keypath_pair.second);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "24c5c7e90785e76608ee35836b8505320d5d0903",
    "node_id": "C_kwDOABII59oAKDI0YzVjN2U5MDc4NWU3NjYwOGVlMzU4MzZiODUwNTMyMGQ1ZDA5MDM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:58:14Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:51:04Z"
      },
      "message": "Implement operator< for KeyOriginInfo and CExtPubKey",
      "tree": {
        "sha": "2dea8790a51e1ce1d4d493f848249b91031c1bfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2dea8790a51e1ce1d4d493f848249b91031c1bfd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24c5c7e90785e76608ee35836b8505320d5d0903",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24c5c7e90785e76608ee35836b8505320d5d0903",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/24c5c7e90785e76608ee35836b8505320d5d0903",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24c5c7e90785e76608ee35836b8505320d5d0903/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1cdae6953adebea21b2e5d314dbd62800e4a564",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1cdae6953adebea21b2e5d314dbd62800e4a564",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1cdae6953adebea21b2e5d314dbd62800e4a564"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d827af8290d016dfaa65e2a2549f42087212e6af",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24c5c7e90785e76608ee35836b8505320d5d0903/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24c5c7e90785e76608ee35836b8505320d5d0903/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=24c5c7e90785e76608ee35836b8505320d5d0903",
        "patch": "@@ -130,6 +130,11 @@ class CPubKey\n         return a.vch[0] < b.vch[0] ||\n                (a.vch[0] == b.vch[0] && memcmp(a.vch, b.vch, a.size()) < 0);\n     }\n+    friend bool operator>(const CPubKey& a, const CPubKey& b)\n+    {\n+        return a.vch[0] > b.vch[0] ||\n+               (a.vch[0] == b.vch[0] && memcmp(a.vch, b.vch, a.size()) > 0);\n+    }\n \n     //! Implement serialization, as if this was a byte vector.\n     template <typename Stream>\n@@ -307,6 +312,16 @@ struct CExtPubKey {\n         return !(a == b);\n     }\n \n+    friend bool operator<(const CExtPubKey &a, const CExtPubKey &b)\n+    {\n+        if (a.pubkey < b.pubkey) {\n+            return true;\n+        } else if (a.pubkey > b.pubkey) {\n+            return false;\n+        }\n+        return a.chaincode < b.chaincode;\n+    }\n+\n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     void EncodeWithVersion(unsigned char code[BIP32_EXTKEY_WITH_VERSION_SIZE]) const;"
      },
      {
        "sha": "c779872be2c4dbeef66d89d35502c1e676bbc28a",
        "filename": "src/script/keyorigin.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/24c5c7e90785e76608ee35836b8505320d5d0903/src/script/keyorigin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/24c5c7e90785e76608ee35836b8505320d5d0903/src/script/keyorigin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/keyorigin.h?ref=24c5c7e90785e76608ee35836b8505320d5d0903",
        "patch": "@@ -18,6 +18,25 @@ struct KeyOriginInfo\n         return std::equal(std::begin(a.fingerprint), std::end(a.fingerprint), std::begin(b.fingerprint)) && a.path == b.path;\n     }\n \n+    friend bool operator<(const KeyOriginInfo& a, const KeyOriginInfo& b)\n+    {\n+        // Compare the fingerprints lexicographically\n+        int fpr_cmp = memcmp(a.fingerprint, b.fingerprint, 4);\n+        if (fpr_cmp < 0) {\n+            return true;\n+        } else if (fpr_cmp > 0) {\n+            return false;\n+        }\n+        // Compare the sizes of the paths, shorter is \"less than\"\n+        if (a.path.size() < b.path.size()) {\n+            return true;\n+        } else if (a.path.size() > b.path.size()) {\n+            return false;\n+        }\n+        // Paths same length, compare them lexicographically\n+        return a.path < b.path;\n+    }\n+\n     SERIALIZE_METHODS(KeyOriginInfo, obj) { READWRITE(obj.fingerprint, obj.path); }\n \n     void clear()"
      }
    ]
  },
  {
    "sha": "3554169d7210a45c7213b3a4716574d1c82d999e",
    "node_id": "C_kwDOABII59oAKDM1NTQxNjlkNzIxMGE0NWM3MjEzYjNhNDcxNjU3NGQxYzgyZDk5OWU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T15:58:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:51:25Z"
      },
      "message": "Implement serializations for PSBT_GLOBAL_XPUB",
      "tree": {
        "sha": "bb3630e9c51bda3a9d2dc0ad7dfd089d54469e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb3630e9c51bda3a9d2dc0ad7dfd089d54469e1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3554169d7210a45c7213b3a4716574d1c82d999e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3554169d7210a45c7213b3a4716574d1c82d999e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3554169d7210a45c7213b3a4716574d1c82d999e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3554169d7210a45c7213b3a4716574d1c82d999e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "24c5c7e90785e76608ee35836b8505320d5d0903",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/24c5c7e90785e76608ee35836b8505320d5d0903",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/24c5c7e90785e76608ee35836b8505320d5d0903"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ec744c8d6c7d8cac8716e4f8b721ad94df4a7bfb",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3554169d7210a45c7213b3a4716574d1c82d999e/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3554169d7210a45c7213b3a4716574d1c82d999e/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=3554169d7210a45c7213b3a4716574d1c82d999e",
        "patch": "@@ -23,6 +23,7 @@ static constexpr uint8_t PSBT_MAGIC_BYTES[5] = {'p', 's', 'b', 't', 0xff};\n \n // Global types\n static constexpr uint8_t PSBT_GLOBAL_UNSIGNED_TX = 0x00;\n+static constexpr uint8_t PSBT_GLOBAL_XPUB = 0x01;\n static constexpr uint8_t PSBT_GLOBAL_VERSION = 0xFB;\n static constexpr uint8_t PSBT_GLOBAL_PROPRIETARY = 0xFC;\n \n@@ -549,6 +550,9 @@ struct PSBTOutput\n struct PartiallySignedTransaction\n {\n     std::optional<CMutableTransaction> tx;\n+    // We use a vector of CExtPubKey in the event that there happens to be the same KeyOriginInfos for different CExtPubKeys\n+    // Note that this map swaps the key and values from the serialization\n+    std::map<KeyOriginInfo, std::set<CExtPubKey>> m_xpubs;\n     std::vector<PSBTInput> inputs;\n     std::vector<PSBTOutput> outputs;\n     std::map<std::vector<unsigned char>, std::vector<unsigned char>> unknown;\n@@ -587,6 +591,18 @@ struct PartiallySignedTransaction\n         OverrideStream<Stream> os(&s, s.GetType(), s.GetVersion() | SERIALIZE_TRANSACTION_NO_WITNESS);\n         SerializeToVector(os, *tx);\n \n+        // Write xpubs\n+        for (const auto& xpub_pair : m_xpubs) {\n+            for (const auto& xpub : xpub_pair.second) {\n+                unsigned char ser_xpub[BIP32_EXTKEY_WITH_VERSION_SIZE];\n+                xpub.EncodeWithVersion(ser_xpub);\n+                // Note that the serialization swaps the key and value\n+                // The xpub is the key (for uniqueness) while the path is the value\n+                SerializeToVector(s, PSBT_GLOBAL_XPUB, ser_xpub);\n+                SerializeHDKeypath(s, xpub_pair.first);\n+            }\n+        }\n+\n         // PSBT version\n         if (GetVersion() > 0) {\n             SerializeToVector(s, CompactSizeWriter(PSBT_GLOBAL_VERSION));\n@@ -631,6 +647,9 @@ struct PartiallySignedTransaction\n         // Used for duplicate key detection\n         std::set<std::vector<unsigned char>> key_lookup;\n \n+        // Track the global xpubs we have already seen. Just for sanity checking\n+        std::set<CExtPubKey> global_xpubs;\n+\n         // Read global data\n         bool found_sep = false;\n         while(!s.empty()) {\n@@ -671,6 +690,36 @@ struct PartiallySignedTransaction\n                     }\n                     break;\n                 }\n+                case PSBT_GLOBAL_XPUB:\n+                {\n+                    if (key.size() != BIP32_EXTKEY_WITH_VERSION_SIZE + 1) {\n+                        throw std::ios_base::failure(\"Size of key was not the expected size for the type global xpub\");\n+                    }\n+                    // Read in the xpub from key\n+                    CExtPubKey xpub;\n+                    xpub.DecodeWithVersion(&key.data()[1]);\n+                    if (!xpub.pubkey.IsFullyValid()) {\n+                       throw std::ios_base::failure(\"Invalid pubkey\");\n+                    }\n+                    if (global_xpubs.count(xpub) > 0) {\n+                       throw std::ios_base::failure(\"Duplicate key, global xpub already provided\");\n+                    }\n+                    global_xpubs.insert(xpub);\n+                    // Read in the keypath from stream\n+                    KeyOriginInfo keypath;\n+                    DeserializeHDKeypath(s, keypath);\n+\n+                    // Note that we store these swapped to make searches faster.\n+                    // Serialization uses xpub -> keypath to enqure key uniqueness\n+                    if (m_xpubs.count(keypath) == 0) {\n+                        // Make a new set to put the xpub in\n+                        m_xpubs[keypath] = {xpub};\n+                    } else {\n+                        // Insert xpub into existing set\n+                        m_xpubs[keypath].insert(xpub);\n+                    }\n+                    break;\n+                }\n                 case PSBT_GLOBAL_VERSION:\n                 {\n                     if (m_version) {"
      }
    ]
  },
  {
    "sha": "c88b7b27072a020c1faceb09957bf0485629caa2",
    "node_id": "C_kwDOABII59oAKGM4OGI3YjI3MDcyYTAyMGMxZmFjZWIwOTk1N2JmMDQ4NTYyOWNhYTI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T17:20:38Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:51:26Z"
      },
      "message": "Add global_xpubs to decodepsbt",
      "tree": {
        "sha": "79f718578d4d4e30391d93a7311850fdb18c8416",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79f718578d4d4e30391d93a7311850fdb18c8416"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c88b7b27072a020c1faceb09957bf0485629caa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c88b7b27072a020c1faceb09957bf0485629caa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c88b7b27072a020c1faceb09957bf0485629caa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c88b7b27072a020c1faceb09957bf0485629caa2/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3554169d7210a45c7213b3a4716574d1c82d999e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3554169d7210a45c7213b3a4716574d1c82d999e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3554169d7210a45c7213b3a4716574d1c82d999e"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "767084136a46bae7d7e94bf2a0672f5f8a5b7dfa",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c88b7b27072a020c1faceb09957bf0485629caa2/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c88b7b27072a020c1faceb09957bf0485629caa2/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c88b7b27072a020c1faceb09957bf0485629caa2",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <base58.h>\n #include <chain.h>\n #include <coins.h>\n #include <consensus/amount.h>\n@@ -1022,6 +1023,15 @@ static RPCHelpMan decodepsbt()\n                         {\n                             {RPCResult::Type::ELISION, \"\", \"The layout is the same as the output of decoderawtransaction.\"},\n                         }},\n+                        {RPCResult::Type::ARR, \"global_xpubs\", \"\",\n+                        {\n+                            {RPCResult::Type::OBJ, \"\", \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"xpub\", \"The extended public key this path corresponds to\"},\n+                                {RPCResult::Type::STR_HEX, \"master_fingerprint\", \"The fingerprint of the master key\"},\n+                                {RPCResult::Type::STR, \"path\", \"The path\"},\n+                            }},\n+                        }},\n                         {RPCResult::Type::NUM, \"psbt_version\", \"The PSBT version number. Not to be confused with the unsigned transaction version\"},\n                         {RPCResult::Type::ARR, \"proprietary\", \"The global proprietary map\",\n                         {\n@@ -1172,6 +1182,23 @@ static RPCHelpMan decodepsbt()\n     TxToUniv(CTransaction(*psbtx.tx), uint256(), tx_univ, false);\n     result.pushKV(\"tx\", tx_univ);\n \n+    // Add the global xpubs\n+    UniValue global_xpubs(UniValue::VARR);\n+    for (std::pair<KeyOriginInfo, std::set<CExtPubKey>> xpub_pair : psbtx.m_xpubs) {\n+        for (auto& xpub : xpub_pair.second) {\n+            std::vector<unsigned char> ser_xpub;\n+            ser_xpub.assign(BIP32_EXTKEY_WITH_VERSION_SIZE, 0);\n+            xpub.EncodeWithVersion(ser_xpub.data());\n+\n+            UniValue keypath(UniValue::VOBJ);\n+            keypath.pushKV(\"xpub\", EncodeBase58Check(ser_xpub));\n+            keypath.pushKV(\"master_fingerprint\", HexStr(Span<unsigned char>(xpub_pair.first.fingerprint, xpub_pair.first.fingerprint + 4)));\n+            keypath.pushKV(\"path\", WriteHDKeypath(xpub_pair.first.path));\n+            global_xpubs.push_back(keypath);\n+        }\n+    }\n+    result.pushKV(\"global_xpubs\", global_xpubs);\n+\n     // PSBT version\n     result.pushKV(\"psbt_version\", static_cast<uint64_t>(psbtx.GetVersion()));\n "
      }
    ]
  },
  {
    "sha": "63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7",
    "node_id": "C_kwDOABII59oAKDYzZjBkMmM4YTdiNTA1NjVmZWFiYmRiODg3YjRkMDJlMGY0M2E0Yzc",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-25T17:43:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:51:38Z"
      },
      "message": "Add global xpub test vectors from BIP",
      "tree": {
        "sha": "e429165470843f00b105eb68110a67d9b4a5a4dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e429165470843f00b105eb68110a67d9b4a5a4dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c88b7b27072a020c1faceb09957bf0485629caa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c88b7b27072a020c1faceb09957bf0485629caa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c88b7b27072a020c1faceb09957bf0485629caa2"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5c3a3491b865742c00ba264425219efa2a97e1ed",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7",
        "patch": "@@ -37,7 +37,10 @@\n         \"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\"\n     ],\n     \"creator\" : [\n         {\n@@ -139,4 +142,4 @@\n             \"result\" : \"0200000000010258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7500000000da00473044022074018ad4180097b873323c0015720b3684cc8123891048e7dbcd9b55ad679c99022073d369b740e3eb53dcefa33823c8070514ca55a7dd9544f157c167913261118c01483045022100f61038b308dc1da865a34852746f015772934208c6d24454393cd99bdf2217770220056e675a675a6d0a02b85b14e5e29074d8a25a9b5760bea2816f661910a006ea01475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752aeffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d01000000232200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000400473044022062eb7a556107a7c73f45ac4ab5a1dddf6f7075fb1275969a7f383efff784bcb202200c05dbb7470dbf2f08557dd356c7325c1ed30913e996cd3840945db12228da5f01473044022065f45ba5998b59a27ffe1a7bed016af1f1f90d54b3aa8f7450aa5f56a25103bd02207f724703ad1edb96680b284b56d4ffcb88f7fb759eabbe08aa30f29b851383d20147522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae00000000\"\n         }\n     ]\n-}\n\\ No newline at end of file\n+}"
      }
    ]
  },
  {
    "sha": "7f066240654608743eee165149f7036f43791922",
    "node_id": "C_kwDOABII59oAKDdmMDY2MjQwNjU0NjA4NzQzZWVlMTY1MTQ5ZjcwMzZmNDM3OTE5MjI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-31T21:24:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-05T17:51:38Z"
      },
      "message": "Merge global xpubs in joinpsbts and combinepsbts",
      "tree": {
        "sha": "a74b5a5c467407d2898e04f2c2b61d5b95559dc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a74b5a5c467407d2898e04f2c2b61d5b95559dc6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f066240654608743eee165149f7036f43791922",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f066240654608743eee165149f7036f43791922",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f066240654608743eee165149f7036f43791922",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f066240654608743eee165149f7036f43791922/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63f0d2c8a7b50565feabbdb887b4d02e0f43a4c7"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd5e42b1f00b4159c1ebf34de2036b07a32815e0",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f066240654608743eee165149f7036f43791922/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f066240654608743eee165149f7036f43791922/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=7f066240654608743eee165149f7036f43791922",
        "patch": "@@ -32,6 +32,13 @@ bool PartiallySignedTransaction::Merge(const PartiallySignedTransaction& psbt)\n     for (unsigned int i = 0; i < outputs.size(); ++i) {\n         outputs[i].Merge(psbt.outputs[i]);\n     }\n+    for (auto& xpub_pair : psbt.m_xpubs) {\n+        if (m_xpubs.count(xpub_pair.first) == 0) {\n+            m_xpubs[xpub_pair.first] = xpub_pair.second;\n+        } else {\n+            m_xpubs[xpub_pair.first].insert(xpub_pair.second.begin(), xpub_pair.second.end());\n+        }\n+    }\n     unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n \n     return true;"
      },
      {
        "sha": "192853a6e099261de92e6b37d14081614e851820",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f066240654608743eee165149f7036f43791922/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f066240654608743eee165149f7036f43791922/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7f066240654608743eee165149f7036f43791922",
        "patch": "@@ -1837,6 +1837,13 @@ static RPCHelpMan joinpsbts()\n         for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {\n             merged_psbt.AddOutput(psbt.tx->vout[i], psbt.outputs[i]);\n         }\n+        for (auto& xpub_pair : psbt.m_xpubs) {\n+            if (merged_psbt.m_xpubs.count(xpub_pair.first) == 0) {\n+                merged_psbt.m_xpubs[xpub_pair.first] = xpub_pair.second;\n+            } else {\n+                merged_psbt.m_xpubs[xpub_pair.first].insert(xpub_pair.second.begin(), xpub_pair.second.end());\n+            }\n+        }\n         merged_psbt.unknown.insert(psbt.unknown.begin(), psbt.unknown.end());\n     }\n "
      }
    ]
  }
]