[
  {
    "sha": "d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzg0MjhhOWMxYWU4NDhlYWIxYzE5M2Y2ZWYzY2UzZWRiZDc2YzNm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-05T06:02:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-05T06:02:14Z"
      },
      "message": "Cache hashes in CTransaction and CBlock",
      "tree": {
        "sha": "40f0e8ac4d8e846f3e3e1e5121be01d87777b498",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40f0e8ac4d8e846f3e3e1e5121be01d87777b498"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d48e7a9734825725fb18dc50bb71e77ba284e798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48e7a9734825725fb18dc50bb71e77ba284e798",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d48e7a9734825725fb18dc50bb71e77ba284e798"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 77,
      "deletions": 53
    },
    "files": [
      {
        "sha": "226eeebf1d1e28d013d5274a21d960f4f79fe81f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -135,6 +135,7 @@ class CMainParams : public CChainParams {\n         genesis.nTime    = 1231006505;\n         genesis.nBits    = 0x1d00ffff;\n         genesis.nNonce   = 2083236893;\n+        genesis.MarkDirty();\n \n         hashGenesisBlock = genesis.GetHash();\n         assert(hashGenesisBlock == uint256(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n@@ -203,6 +204,7 @@ class CTestNetParams : public CMainParams {\n         // Modify the testnet genesis block so the timestamp is valid for a later start.\n         genesis.nTime = 1296688602;\n         genesis.nNonce = 414098458;\n+        genesis.MarkDirty();\n         hashGenesisBlock = genesis.GetHash();\n         assert(hashGenesisBlock == uint256(\"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\"));\n \n@@ -237,6 +239,7 @@ class CRegTestParams : public CTestNetParams {\n         genesis.nTime = 1296688602;\n         genesis.nBits = 0x207fffff;\n         genesis.nNonce = 2;\n+        genesis.MarkDirty();\n         hashGenesisBlock = genesis.GetHash();\n         nDefaultPort = 18444;\n         strDataDir = \"regtest\";"
      },
      {
        "sha": "06791fd279fc529182caf80ddb85ccfcf4a6630f",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -72,9 +72,11 @@ void CTxOut::print() const\n     LogPrintf(\"%s\\n\", ToString());\n }\n \n-uint256 CTransaction::GetHash() const\n+const uint256& CTransaction::GetHash() const\n {\n-    return SerializeHash(*this);\n+    if (hash == 0)\n+        hash = SerializeHash(*this);\n+    return hash;\n }\n \n int64_t CTransaction::GetValueOut() const\n@@ -257,3 +259,10 @@ void CBlock::print() const\n         LogPrintf(\"%s \", vMerkleTree[i].ToString());\n     LogPrintf(\"\\n\");\n }\n+\n+const uint256& CBlock::GetHash() const\n+{\n+    if (hash == 0)\n+        hash = CBlockHeader::GetHash();\n+    return hash;\n+}"
      },
      {
        "sha": "e734caa6c2945a2609b8cd83b444e227bb2214e0",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -191,6 +191,9 @@ class CTransaction\n     std::vector<CTxOut> vout;\n     unsigned int nLockTime;\n \n+    // memory only\n+    mutable uint256 hash;\n+\n     CTransaction()\n     {\n         SetNull();\n@@ -203,6 +206,7 @@ class CTransaction\n         READWRITE(vin);\n         READWRITE(vout);\n         READWRITE(nLockTime);\n+        hash = 0;\n     )\n \n     void SetNull()\n@@ -211,14 +215,19 @@ class CTransaction\n         vin.clear();\n         vout.clear();\n         nLockTime = 0;\n+        hash = 0;\n     }\n \n     bool IsNull() const\n     {\n         return (vin.empty() && vout.empty());\n     }\n \n-    uint256 GetHash() const;\n+    const uint256& GetHash() const;\n+\n+    void MarkDirty() const {\n+        hash = 0;\n+    }\n \n     // Return sum of txouts.\n     int64_t GetValueOut() const;\n@@ -400,6 +409,7 @@ class CBlock : public CBlockHeader\n \n     // memory only\n     mutable std::vector<uint256> vMerkleTree;\n+    mutable uint256 hash;\n \n     CBlock()\n     {\n@@ -416,13 +426,15 @@ class CBlock : public CBlockHeader\n     (\n         READWRITE(*(CBlockHeader*)this);\n         READWRITE(vtx);\n+        hash = 0;\n     )\n \n     void SetNull()\n     {\n         CBlockHeader::SetNull();\n         vtx.clear();\n         vMerkleTree.clear();\n+        hash = 0;\n     }\n \n     CBlockHeader GetBlockHeader() const\n@@ -439,10 +451,10 @@ class CBlock : public CBlockHeader\n \n     uint256 BuildMerkleTree() const;\n \n-    const uint256 &GetTxHash(unsigned int nIndex) const {\n-        assert(vMerkleTree.size() > 0); // BuildMerkleTree must have been called first\n-        assert(nIndex < vtx.size());\n-        return vMerkleTree[nIndex];\n+    const uint256& GetHash() const;\n+\n+    void MarkDirty() {\n+        hash = 0;\n     }\n \n     std::vector<uint256> GetMerkleBranch(int nIndex) const;"
      },
      {
        "sha": "514ca5b486c05dbe4e77b1c74563567db7844d27",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 22,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -132,7 +132,7 @@ namespace {\n namespace {\n struct CMainSignals {\n     // Notifies listeners of updated transaction data (passing hash, transaction, and optionally the block it is found in.\n-    boost::signals2::signal<void (const uint256 &, const CTransaction &, const CBlock *)> SyncTransaction;\n+    boost::signals2::signal<void (const CTransaction &, const CBlock *)> SyncTransaction;\n     // Notifies listeners of an erased transaction (currently disabled, requires transaction replacement).\n     boost::signals2::signal<void (const uint256 &)> EraseTransaction;\n     // Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible).\n@@ -147,7 +147,7 @@ struct CMainSignals {\n }\n \n void RegisterWallet(CWalletInterface* pwalletIn) {\n-    g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n     g_signals.EraseTransaction.connect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CWalletInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1));\n@@ -161,7 +161,7 @@ void UnregisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SetBestChain.disconnect(boost::bind(&CWalletInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CWalletInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.EraseTransaction.disconnect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n-    g_signals.SyncTransaction.disconnect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n+    g_signals.SyncTransaction.disconnect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n }\n \n void UnregisterAllWallets() {\n@@ -173,8 +173,8 @@ void UnregisterAllWallets() {\n     g_signals.SyncTransaction.disconnect_all_slots();\n }\n \n-void SyncWithWallets(const uint256 &hash, const CTransaction &tx, const CBlock *pblock) {\n-    g_signals.SyncTransaction(hash, tx, pblock);\n+void SyncWithWallets(const CTransaction &tx, const CBlock *pblock) {\n+    g_signals.SyncTransaction(tx, pblock);\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -955,7 +955,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         pool.addUnchecked(hash, entry);\n     }\n \n-    g_signals.SyncTransaction(hash, tx, NULL);\n+    g_signals.SyncTransaction(tx, NULL);\n \n     return true;\n }\n@@ -1482,7 +1482,7 @@ void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev)\n \n \n \n-void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight, const uint256 &txhash)\n+void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight)\n {\n     bool ret;\n     // mark inputs spent\n@@ -1497,7 +1497,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n     }\n \n     // add outputs\n-    ret = inputs.SetCoins(txhash, CCoins(tx, nHeight));\n+    ret = inputs.SetCoins(tx.GetHash(), CCoins(tx, nHeight));\n     assert(ret);\n }\n \n@@ -1770,8 +1770,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n                           !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n                            (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n     if (fEnforceBIP30) {\n-        for (unsigned int i = 0; i < block.vtx.size(); i++) {\n-            uint256 hash = block.GetTxHash(i);\n+        BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+            uint256 hash = tx.GetHash();\n             if (view.HaveCoins(hash) && !view.GetCoins(hash).IsPruned())\n                 return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n@@ -1796,10 +1796,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n-    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n-        const CTransaction &tx = block.vtx[i];\n-\n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n@@ -1832,11 +1830,11 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n         }\n \n         CTxUndo txundo;\n-        UpdateCoins(tx, state, view, txundo, pindex->nHeight, block.GetTxHash(i));\n+        UpdateCoins(tx, state, view, txundo, pindex->nHeight);\n         if (!tx.IsCoinBase())\n             blockundo.vtxundo.push_back(txundo);\n \n-        vPos.push_back(std::make_pair(block.GetTxHash(i), pos));\n+        vPos.push_back(std::make_pair(tx.GetHash(), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n     int64_t nTime = GetTimeMicros() - nStart;\n@@ -1896,7 +1894,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n \n     // Watch for transactions paying to me\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n-        g_signals.SyncTransaction(block.GetTxHash(i), block.vtx[i], &block);\n+        g_signals.SyncTransaction(block.vtx[i], &block);\n \n     return true;\n }\n@@ -1994,7 +1992,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx.GetHash(), tx, NULL);\n+        SyncWithWallets(tx, NULL);\n     }\n     return true;\n }\n@@ -2038,11 +2036,11 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     // Tell wallet about transactions that went from mempool\n     // to conflicted:\n     BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n-        SyncWithWallets(tx.GetHash(), tx, NULL);\n+        SyncWithWallets(tx, NULL);\n     }\n     // ... and about transactions that got confirmed:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx.GetHash(), tx, &block);\n+        SyncWithWallets(tx, &block);\n     }\n     return true;\n }\n@@ -2222,7 +2220,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n         // Notify UI to display prev block's coinbase if it was ours\n         static uint256 hashPrevBestCoinBase;\n         g_signals.UpdatedTransaction(hashPrevBestCoinBase);\n-        hashPrevBestCoinBase = block.GetTxHash(0);\n+        hashPrevBestCoinBase = block.vtx[0].GetHash();\n     } else\n         CheckForkWarningConditionsOnNewFork(pindexNew);\n \n@@ -2401,8 +2399,8 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Check for duplicate txids. This is caught by ConnectInputs(),\n     // but catching it earlier avoids a potential DoS attack:\n     set<uint256> uniqueTx;\n-    for (unsigned int i = 0; i < block.vtx.size(); i++) {\n-        uniqueTx.insert(block.GetTxHash(i));\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+        uniqueTx.insert(tx.GetHash());\n     }\n     if (uniqueTx.size() != block.vtx.size())\n         return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),"
      },
      {
        "sha": "24a902c75e46aba4a1cb663764c3b14a1c8acd79",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -119,7 +119,7 @@ void UnregisterWallet(CWalletInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllWallets();\n /** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL);\n+void SyncWithWallets(const CTransaction& tx, const CBlock* pblock = NULL);\n \n /** Register with a network node to receive its signals */\n void RegisterNodeSignals(CNodeSignals& nodeSignals);\n@@ -307,7 +307,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n                  std::vector<CScriptCheck> *pvChecks = NULL);\n \n // Apply the effects of this transaction on the UTXO set represented by view\n-void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight, const uint256 &txhash);\n+void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight);\n \n // Context-independent validity checks\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n@@ -1142,7 +1142,7 @@ class CMerkleBlock\n \n class CWalletInterface {\n protected:\n-    virtual void SyncTransaction(const uint256 &hash, const CTransaction &tx, const CBlock *pblock) =0;\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlock *pblock) =0;\n     virtual void EraseFromWallet(const uint256 &hash) =0;\n     virtual void SetBestChain(const CBlockLocator &locator) =0;\n     virtual void UpdatedTransaction(const uint256 &hash) =0;"
      },
      {
        "sha": "578feb7473012b7852ed71f1d208c660bff6e341",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -285,7 +285,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n             CTxUndo txundo;\n             uint256 hash = tx.GetHash();\n-            UpdateCoins(tx, state, view, txundo, pindexPrev->nHeight+1, hash);\n+            UpdateCoins(tx, state, view, txundo, pindexPrev->nHeight+1);\n \n             // Added\n             pblock->vtx.push_back(tx);"
      },
      {
        "sha": "dcaa7d2eaeee20851229b93e8ddac04ef58c7833",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -780,7 +780,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n         // push to local node and sync with wallets\n         CValidationState state;\n         if (AcceptToMemoryPool(mempool, state, tx, false, NULL, !fOverrideFees))\n-            SyncWithWallets(hashTx, tx, NULL);\n+            SyncWithWallets(tx, NULL);\n         else {\n             if(state.IsInvalid())\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));"
      },
      {
        "sha": "f097272d7d8d644fa3247ab29cb3e026fc2bb245",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -32,7 +32,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     std::vector<CWalletTx*> vpwtx;\n-    CWalletTx wtx;\n+    CWalletTx wtx[3];\n     CAccountingEntry ae;\n     std::map<int64_t, CAccountingEntry> results;\n \n@@ -45,9 +45,9 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.strComment = \"\";\n     walletdb.WriteAccountingEntry(ae);\n \n-    wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    wtx[0].mapValue[\"comment\"] = \"z\";\n+    pwalletMain->AddToWallet(wtx[0]);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx[0].GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n \n@@ -82,16 +82,16 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     BOOST_CHECK(results[3].strComment.empty());\n \n \n-    wtx.mapValue[\"comment\"] = \"y\";\n-    --wtx.nLockTime;  // Just to change the hash :)\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    wtx[1].mapValue[\"comment\"] = \"y\";\n+    --wtx[1].nLockTime;  // Just to change the hash :)\n+    pwalletMain->AddToWallet(wtx[1]);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx[1].GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n-    wtx.mapValue[\"comment\"] = \"x\";\n-    --wtx.nLockTime;  // Just to change the hash :)\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    wtx[2].mapValue[\"comment\"] = \"x\";\n+    ++wtx[2].nLockTime;  // Just to change the hash :)\n+    pwalletMain->AddToWallet(wtx[2]);\n+    vpwtx.push_back(&pwalletMain->mapWallet[wtx[2].GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;\n "
      },
      {
        "sha": "73faafc3d6c9bea8d2d640080f568b8bd0f50599",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -74,10 +74,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->vtx[0].vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n         pblock->vtx[0].vin[0].scriptSig.push_back(chainActive.Height());\n         pblock->vtx[0].vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0].MarkDirty();\n         if (txFirst.size() < 2)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n         pblock->nNonce = blockinfo[i].nonce;\n+        pblock->MarkDirty();\n         CValidationState state;\n         BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n         BOOST_CHECK(state.IsValid());"
      },
      {
        "sha": "68687b6b707ae024cf9dc8b96f0e7157b910d4a4",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -587,11 +587,11 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n // Add a transaction to the wallet, or update it.\n // pblock is optional, but should be provided if the transaction is known to be in a block.\n // If fUpdate is true, existing transactions will be updated.\n-bool CWallet::AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n     {\n         AssertLockHeld(cs_wallet);\n-        bool fExisted = mapWallet.count(hash);\n+        bool fExisted = mapWallet.count(tx.GetHash());\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n@@ -605,10 +605,10 @@ bool CWallet::AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction&\n     return false;\n }\n \n-void CWallet::SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock)\n+void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)\n {\n     LOCK2(cs_main, cs_wallet);\n-    if (!AddToWalletIfInvolvingMe(hash, tx, pblock, true))\n+    if (!AddToWalletIfInvolvingMe(tx, pblock, true))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -854,7 +854,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n             ReadBlockFromDisk(block, pindex);\n             BOOST_FOREACH(CTransaction& tx, block.vtx)\n             {\n-                if (AddToWalletIfInvolvingMe(tx.GetHash(), tx, &block, fUpdate))\n+                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate))\n                     ret++;\n             }\n             pindex = chainActive.Next(pindex);"
      },
      {
        "sha": "f91c3a1a0851219653f27bde0c777468a315e8ac",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f",
        "patch": "@@ -244,8 +244,8 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet=false);\n-    void SyncTransaction(const uint256 &hash, const CTransaction& tx, const CBlock* pblock);\n-    bool AddToWalletIfInvolvingMe(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n+    void SyncTransaction(const CTransaction& tx, const CBlock* pblock);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n     void EraseFromWallet(const uint256 &hash);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();"
      }
    ]
  }
]