laanwj,2014-06-05T06:49:45Z,">  and that there are no two threads asking for a hash simultaneously for the same time (or otherwise don't destructively overwrite each other's data)\n\nI'm not sure that this is a safe assumption, the GetHash() is called all over the place. That's hard to control.\n\nThinking about it, as you have an explicit MarkDirty() (in contrast to one that is called with high frequency on every change), we",https://github.com/bitcoin/bitcoin/pull/4292#issuecomment-45186254,45186254,
BitcoinPullTester,2014-06-05T08:30:55Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/d78428a9c1ae848eab1c193f6ef3ce3edbd76c3f for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tes",https://github.com/bitcoin/bitcoin/pull/4292#issuecomment-45193888,45193888,
jgarzik,2014-06-05T12:20:44Z,"@sipa FWIW, this style of caching is what I did in python and C libs, and others have copied also.  It is useful.\n",https://github.com/bitcoin/bitcoin/pull/4292#issuecomment-45212367,45212367,
sipa,2014-06-05T12:29:04Z,"Another, and much cleaner, solution is adding a CMutableTransaction and CMutableBlock, which have the same fields, but mutable, and do not provide a GetHash. You can convert them to their immutable versions (which can be very efficient by just swapping the vin/vout/vtx vectors) once they are finished.\n",https://github.com/bitcoin/bitcoin/pull/4292#issuecomment-45213069,45213069,
laanwj,2014-06-05T12:49:28Z,"@sipa I like that solution a lot. It has self-enforcing correctness. No chance to forget MarkDirty, and thread problems are avoided by never sharing the mutable structure between threads.\n",https://github.com/bitcoin/bitcoin/pull/4292#issuecomment-45214781,45214781,
petertodd,2014-06-05T13:45:16Z,@sipa +1\n\nI was thinking of something like a CMutableTransaction myself for my python-bitcoinlib for use in conjunction with Cython support. I've already made CScript's immutable (they're bytes subclasses) and would have made CMutableTxIn and CMutableTxOut as well. COutPoint can probably be conveniently made immutable always - not often you want to change one of its two members without changing ,https://github.com/bitcoin/bitcoin/pull/4292#issuecomment-45220490,45220490,
sipa,2014-06-09T09:27:16Z,Closing in favor of #4309.\n,https://github.com/bitcoin/bitcoin/pull/4292#issuecomment-45474291,45474291,
