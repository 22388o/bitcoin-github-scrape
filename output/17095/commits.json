[
  {
    "sha": "d7820a1250070f3640246ae497e049bee0b3516f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzgyMGExMjUwMDcwZjM2NDAyNDZhZTQ5N2UwNDliZWUwYjM1MTZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-10-10T11:25:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-10-15T08:53:17Z"
      },
      "message": "util: Filter control characters out of log messages\n\nBelts and suspenders: make sure outgoing log messages don't contain\npotentially suspicious characters, such as terminal control codes.\n\nThis escapes control characters except newline ('\\n') in C syntax.\nIt escapes instead of removes them to still allow for troubleshooting\nissues where they accidentally end up in strings.",
      "tree": {
        "sha": "266d939618fc74196736a9a3e2a9ccb538cc4a4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/266d939618fc74196736a9a3e2a9ccb538cc4a4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7820a1250070f3640246ae497e049bee0b3516f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7820a1250070f3640246ae497e049bee0b3516f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7820a1250070f3640246ae497e049bee0b3516f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7820a1250070f3640246ae497e049bee0b3516f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d882f635898fe036ef7be6b30bac31d29ec03ae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d882f635898fe036ef7be6b30bac31d29ec03ae3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d882f635898fe036ef7be6b30bac31d29ec03ae3"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 41,
      "deletions": 1
    },
    "files": [
      {
        "sha": "60ab486198c2dca97341d7ab598db03a19460a85",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 1,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7820a1250070f3640246ae497e049bee0b3516f/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7820a1250070f3640246ae497e049bee0b3516f/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=d7820a1250070f3640246ae497e049bee0b3516f",
        "patch": "@@ -224,10 +224,32 @@ std::string BCLog::Logger::LogTimestampStr(const std::string& str)\n     return strStamped;\n }\n \n+namespace BCLog {\n+    /** Belts and suspenders: make sure outgoing log messages don't contain\n+     * potentially suspicious characters, such as terminal control codes.\n+     *\n+     * This escapes control characters except newline ('\\n') in C syntax.\n+     * It escapes instead of removes them to still allow for troubleshooting\n+     * issues where they accidentally end up in strings.\n+     */\n+    std::string LogEscapeMessage(const std::string& str) {\n+        std::string ret;\n+        for (char ch_in : str) {\n+            uint8_t ch = (uint8_t)ch_in;\n+            if ((ch >= 32 || ch == '\\n') && ch != '\\x7f') {\n+                ret += ch_in;\n+            } else {\n+                ret += strprintf(\"\\\\x%02x\", ch);\n+            }\n+        }\n+        return ret;\n+    }\n+}\n+\n void BCLog::Logger::LogPrintStr(const std::string& str)\n {\n     std::lock_guard<std::mutex> scoped_lock(m_cs);\n-    std::string str_prefixed = str;\n+    std::string str_prefixed = LogEscapeMessage(str);\n \n     if (m_log_threadnames && m_started_new_line) {\n         str_prefixed.insert(0, \"[\" + util::ThreadGetInternalName() + \"] \");"
      },
      {
        "sha": "3995a3c7326fcf5864c10308f4e9de801e0c193b",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7820a1250070f3640246ae497e049bee0b3516f/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7820a1250070f3640246ae497e049bee0b3516f/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=d7820a1250070f3640246ae497e049bee0b3516f",
        "patch": "@@ -26,6 +26,11 @@\n \n #include <boost/test/unit_test.hpp>\n \n+/* defined in logging.cpp */\n+namespace BCLog {\n+    std::string LogEscapeMessage(const std::string& str);\n+}\n+\n BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n@@ -1696,4 +1701,17 @@ BOOST_AUTO_TEST_CASE(test_spanparsing)\n     BOOST_CHECK_EQUAL(SpanToStr(results[3]), \"\");\n }\n \n+BOOST_AUTO_TEST_CASE(test_LogEscapeMessage)\n+{\n+    // ASCII and UTF-8 must pass through unaltered.\n+    BOOST_CHECK_EQUAL(BCLog::LogEscapeMessage(\"Valid log message\u8c93\"), \"Valid log message\u8c93\");\n+    // Newlines must pass through unaltered.\n+    BOOST_CHECK_EQUAL(BCLog::LogEscapeMessage(\"Message\\n with newlines\\n\"), \"Message\\n with newlines\\n\");\n+    // Other control characters are escaped in C syntax.\n+    BOOST_CHECK_EQUAL(BCLog::LogEscapeMessage(\"\\x01\\x7f Corrupted log message\\x0d\"), R\"(\\x01\\x7f Corrupted log message\\x0d)\");\n+    // Embedded NULL characters are escaped too.\n+    const std::string NUL(\"O\\x00O\", 3);\n+    BOOST_CHECK_EQUAL(BCLog::LogEscapeMessage(NUL), R\"(O\\x00O)\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]