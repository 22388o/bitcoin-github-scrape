laanwj,2019-10-10 11:35:08,"To test, apply this and run with logging to stdout, without this patch it will make the entire log turn yellow:\n```patch\ndiff --git a/src/init.cpp b/src/init.cpp\nindex 035725b0908ebddae882583d489bdd8ad82c4857..26f4c7b906be959aa3ebaa1a2a657028c95b0f49 100644\n--- a/src/init.cpp\n+++ b/src/init.cpp\n@@ -1231,6 +1231,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n         LogPrintf(""Sta",https://github.com/bitcoin/bitcoin/pull/17095#issuecomment-540529466,540529466,
practicalswift,2019-10-10 13:44:12,"ACK f2f1365805c7a0c3828129a714aac726cc4f46b8 -- diff looks correct and I've tested it lightly with expected results\n\nWe can tighten the allowed range (`ch >= 32 || ch == '\n'`) later on, but this is a good start.\n\n(The only (theoretical) issue I can think of with this fix is that the size of the log payload is increased by a factor of four when escaping. An attacker trying to fill the disk",https://github.com/bitcoin/bitcoin/pull/17095#issuecomment-540590139,540590139,
DrahtBot,2019-10-10 16:12:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16889](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16889.html) (Add some general std::vector utility functi",https://github.com/bitcoin/bitcoin/pull/17095#issuecomment-540659974,540659974,
laanwj,2019-10-10 17:45:38,"> We can tighten the allowed range (ch >= 32 || ch == '\n') later on, but this is a good start.\n\nI don't think we should do that without parsing UTF-8. It definitely should be possible to log Russian and Chinese wallet names, or even emoji.\n\nEdit : OK I guess \x7f is, strictly, a control code too, and we could easily exclude that.\n\n> The only (theoretical) issue I can think of with thi",https://github.com/bitcoin/bitcoin/pull/17095#issuecomment-540696320,540696320,
jonasschnelli,2019-10-11 15:31:49,utACK 8c45e33c07783828ea78489edf680a67bc491377,https://github.com/bitcoin/bitcoin/pull/17095#issuecomment-541112703,541112703,
kristapsk,2019-10-13 14:27:06,"Maybe it's possible to add some functional test? (not sure we can generate such log messages without changing source code, so just an idea)",https://github.com/bitcoin/bitcoin/pull/17095#issuecomment-541422840,541422840,
laanwj,2019-10-14 08:09:49,"> Maybe it's possible to add some functional test?\n\nWellâ€”the idea behind preventing log injection is that it's not possible to inject arbitrary log messages through the network. I don't think we'd want to add any code to encourage it.\n\nCould add a unit test for the filter function, though.",https://github.com/bitcoin/bitcoin/pull/17095#issuecomment-541543549,541543549,
laanwj,2019-10-15 08:53:53,"Added unit test. Had to rebase to do this (conflict with the spans test), so also squashed the fixups. Should be ready for merge.",https://github.com/bitcoin/bitcoin/pull/17095#issuecomment-542110434,542110434,
practicalswift,2019-10-15 15:16:11,ACK d7820a1250070f3640246ae497e049bee0b3516f - tested and works as expected :),https://github.com/bitcoin/bitcoin/pull/17095#issuecomment-542264285,542264285,
luke-jr,2019-10-10 11:45:09,"It seems impossible to distinguish between a literal ""\\x00"" and ""\x00"" after this transformation.\n\nSuggest using `SanitizeString` perhaps with a new rule.",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333472719,333472719,src/logging.cpp
laanwj,2019-10-10 11:46:47,"I don't think that matters much. `\x00` (as in, the code-point 0) is not supposed to end up in a log string at all, if it does that's an error (not serious enough to stop the program, though).\nCould add some more apparent warning I guess?\n",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333473363,333473363,src/logging.cpp
laanwj,2019-10-10 11:48:31,I'm very much against using SanitizeString's methodology here. I don't want to make any characters entirely disappear. If anything this should make them very visible.,https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333474030,333474030,src/logging.cpp
luke-jr,2019-10-10 11:52:54,Cherry-pick 7cbc72b93740a5c7e14d1fb1a9f45fd78ff24700?,https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333475660,333475660,src/logging.cpp
laanwj,2019-10-10 11:56:02,"I prefer to keep this simple code specific and self-contained, TBH. Also, escaping with '%%' seems to have exactly the same ""issue""? (if you regard it as an issue)",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333476842,333476842,src/logging.cpp
laanwj,2019-10-10 12:22:43,Note to self: add a space before `:`,https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333487251,333487251,src/logging.cpp
luke-jr,2019-10-10 15:20:28,The escaping code there always escapes '%',https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333583789,333583789,src/logging.cpp
MarcoFalke,2019-10-10 18:07:06,"Could add a `DCHECK(false)` (#16136) to the else branch, maybe only run once?",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333661821,333661821,src/logging.cpp
laanwj,2019-10-10 18:14:23,"I think crashing the executable on an assertion error is a bad idea here. After all, if the character was injected somehow, that changes a log injection to a live DoS.",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333665118,333665118,src/logging.cpp
MarcoFalke,2019-10-10 18:20:28,"I assumed it was only enabled by `--enable-debug`, which also turns potential lock issues into crashes.",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333667852,333667852,src/logging.cpp
laanwj,2019-10-10 18:24:21,"Only running the else branch once is fine with me though, not sure. It's a compromise between precise troubleshooting and the fear that this would generate very long strings.",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333669669,333669669,src/logging.cpp
laanwj,2019-10-10 18:25:09,"BTW: I wasn't sure what the fashion of the day is for calling `.reserve` or not, here. The expected (99.9%) outcome here is that the output is exactly the same length as the input.",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r333670054,333670054,src/logging.cpp
kristapsk,2019-10-13 14:17:21,`if (!iscntrl(ch) || ch == '\n') {`?,https://github.com/bitcoin/bitcoin/pull/17095#discussion_r334279706,334279706,src/logging.cpp
practicalswift,2019-10-13 19:06:32,"`iscntrl` is locale dependent and we try to avoid using locale dependent functions.\n\nSee the following section in the developer notes:\n\n> - Avoid using locale dependent functions if possible. You can use the provided [`lint-locale-dependence.sh`](/test/lint/lint-locale-dependence.sh) to check for accidental use of locale dependent functions.\n> \n>   - *Rationale*: Unnecessary locale dep",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r334291548,334291548,src/logging.cpp
laanwj,2019-10-14 08:11:07,"Right, I don't want to rely on any C functions here which may or may not have the same view of the character set. The log is file always regarded as UTF-8 anyhow.",https://github.com/bitcoin/bitcoin/pull/17095#discussion_r334364702,334364702,src/logging.cpp
