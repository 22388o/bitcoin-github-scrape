[
  {
    "sha": "0a688c4f6184d6719c55280c59906039db41d488",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTY4OGM0ZjYxODRkNjcxOWM1NTI4MGM1OTkwNjAzOWRiNDFkNDg4",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-11-10T09:51:07Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-11-11T03:12:58Z"
      },
      "message": "[RPC] Add utility getsignaturehash",
      "tree": {
        "sha": "1a0cb01606880db3e380a0dfc39a2db0d43e4992",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a0cb01606880db3e380a0dfc39a2db0d43e4992"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a688c4f6184d6719c55280c59906039db41d488",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a688c4f6184d6719c55280c59906039db41d488",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a688c4f6184d6719c55280c59906039db41d488",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a688c4f6184d6719c55280c59906039db41d488/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e4e98ee8ce2da3cca2e2fd210e9e8dbc9b1c936"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 151,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a715704c670c649e67c23ec72ffebc1c390ef800",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=0a688c4f6184d6719c55280c59906039db41d488",
        "patch": "@@ -66,6 +66,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listaccounts\", 1, \"include_watchonly\" },\n     { \"walletpassphrase\", 1, \"timeout\" },\n     { \"getblocktemplate\", 0, \"template_request\" },\n+    { \"getsignaturehash\", 2, \"amount\" },\n+    { \"getsignaturehash\", 4, \"inputindex\" },\n     { \"listsinceblock\", 1, \"target_confirmations\" },\n     { \"listsinceblock\", 2, \"include_watchonly\" },\n     { \"listsinceblock\", 3, \"include_removed\" },"
      },
      {
        "sha": "a0e176c1c1ed48fd59c710c56a5608810f2f80ab",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=0a688c4f6184d6719c55280c59906039db41d488",
        "patch": "@@ -320,6 +320,77 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getsignaturehash(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 5 || request.params.size() > 6)\n+        throw std::runtime_error(\n+            \"getsignaturehash \\\"tx\\\" \\\"scriptcode\\\" amount \\\"sigversion\\\" inputindex (\\\"sighashtype\\\")\\n\"\n+            \"\\nCreate the hash to sign for the given input\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"tx\\\"                 (string, required) The transaction hex string\\n\"\n+            \"2. \\\"scriptcode\\\"         (string, required) The scriptCode to sign\\n\"\n+            \"3. \\\"amount\\\"             (numeric, required) The amount spent in satoshi\\n\"\n+            \"4. \\\"sigversion\\\"         (string, required) The signature version\\n\"\n+            \"       \\\"BASE\\\"\\n\"\n+            \"       \\\"WITNESS_V0\\\"\\n\"\n+            \"5. inputindex             (numeric, required) The index of the input to sign\\n\"\n+            \"6. \\\"sighashtype\\\"        (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"signature\\\"             (string) hex string of the signature\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getsignaturehash\", \"\\\"txhex\\\" \\\"scriptcode\\\" \\\"0.01\\\" \\\"WITNESS_V0\\\" 1 \\\"SINGLE\\\"\")\n+            + HelpExampleRpc(\"getsignaturehash\", \"\\\"txhex\\\" \\\"scriptcode\\\" \\\"0.01\\\" \\\"WITNESS_V0\\\" 1 \\\"SINGLE\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params,\n+    {\n+        UniValue::VSTR, // tx\n+        UniValue::VSTR, // scriptCode\n+        UniValue::VNUM, // amount\n+        UniValue::VSTR, // sigVersion\n+        UniValue::VNUM // inputIndex\n+    }, false);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n+    {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    std::vector<unsigned char> scriptCodeData(ParseHexV(request.params[1], \"scriptCode\"));\n+    CScript scriptCode(scriptCodeData.begin(), scriptCodeData.end());\n+\n+    CAmount amount = request.params[2].get_int64();\n+    if (!MoneyRange(amount))\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Amount out of range\");\n+    SigVersion sigVersion;\n+    static std::map<std::string, SigVersion> mapSigVersionValues = {\n+        { std::string(\"BASE\"), SigVersion::SIGVERSION_BASE },\n+        { std::string(\"WITNESS_V0\"), SigVersion::SIGVERSION_WITNESS_V0 },\n+    };\n+    std::string strHashType = request.params[3].get_str();\n+    if (mapSigVersionValues.count(strHashType))\n+        sigVersion = mapSigVersionValues[strHashType];\n+    else\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid sigversion param\");\n+\n+    int inputIndex = request.params[4].get_int();\n+    int nHashType = SIGHASH_ALL;\n+    if (!request.params[5].isNull()) {\n+        nHashType = ParseSigHash(request.params[5].get_str(), \"sighashtype\");\n+    }\n+    auto hash = SignatureHash(scriptCode, mtx, inputIndex, nHashType, amount, sigVersion);\n+    return hash.GetHex();\n+}\n+\n UniValue verifymessage(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 3)\n@@ -611,6 +682,7 @@ static const CRPCCommand commands[] =\n     { \"control\",            \"logging\",                &logging,                {\"include\", \"exclude\"}},\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} }, /* uses wallet if enabled */\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\"} },\n+    { \"util\",               \"getsignaturehash\",       &getsignaturehash,       { \"tx\", \"scriptcode\", \"amount\", \"sigversion\", \"inputindex\", \"sighashtype\" } },\n     { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n "
      },
      {
        "sha": "3b007734a0ed88aecd8bee36b94471627c405f84",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0a688c4f6184d6719c55280c59906039db41d488",
        "patch": "@@ -829,19 +829,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n     int nHashType = SIGHASH_ALL;\n     if (!request.params[3].isNull()) {\n-        static std::map<std::string, int> mapSigHashValues = {\n-            {std::string(\"ALL\"), int(SIGHASH_ALL)},\n-            {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n-            {std::string(\"NONE\"), int(SIGHASH_NONE)},\n-            {std::string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE|SIGHASH_ANYONECANPAY)},\n-            {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\n-            {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\n-        };\n-        std::string strHashType = request.params[3].get_str();\n-        if (mapSigHashValues.count(strHashType))\n-            nHashType = mapSigHashValues[strHashType];\n-        else\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid sighash param\");\n+        nHashType = ParseSigHash(request.params[3].get_str(), \"sighashtype\");\n     }\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);"
      },
      {
        "sha": "58b622298b690055074f22413f5459f82da792e6",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=0a688c4f6184d6719c55280c59906039db41d488",
        "patch": "@@ -131,6 +131,30 @@ uint256 ParseHashV(const UniValue& v, std::string strName)\n     result.SetHex(strHex);\n     return result;\n }\n+\n+int ParseSigHash(const std::string& sigHash, const std::string& parameterName)\n+{\n+    int nHashType = 0;\n+    static std::map<std::string, int> mapSigHashValues = {\n+        { std::string(\"ALL\"), int(SIGHASH_ALL) },\n+        { std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL | SIGHASH_ANYONECANPAY) },\n+        { std::string(\"NONE\"), int(SIGHASH_NONE) },\n+        { std::string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE | SIGHASH_ANYONECANPAY) },\n+        { std::string(\"SINGLE\"), int(SIGHASH_SINGLE) },\n+        { std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE | SIGHASH_ANYONECANPAY) },\n+    };\n+    auto it = mapSigHashValues.find(sigHash);\n+    if (it != mapSigHashValues.end())\n+    {\n+        nHashType = (*it).second;\n+    }\n+    else\n+    {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid %s param\", parameterName));\n+    }\n+    return nHashType;\n+}\n+\n uint256 ParseHashO(const UniValue& o, std::string strKey)\n {\n     return ParseHashV(find_value(o, strKey), strKey);"
      },
      {
        "sha": "46467f75fe8a6d13c6394e7b75d2fbc7ebc9d34e",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a688c4f6184d6719c55280c59906039db41d488/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=0a688c4f6184d6719c55280c59906039db41d488",
        "patch": "@@ -184,6 +184,7 @@ extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n \n+extern int ParseSigHash(const std::string& sigHash, const std::string& parameterName);\n extern CAmount AmountFromValue(const UniValue& value);\n extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);"
      },
      {
        "sha": "b4abb4b7dad9b985d63885e4872783f19ae4cd8b",
        "filename": "test/functional/getsignaturehash.py",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a688c4f6184d6719c55280c59906039db41d488/test/functional/getsignaturehash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a688c4f6184d6719c55280c59906039db41d488/test/functional/getsignaturehash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getsignaturehash.py?ref=0a688c4f6184d6719c55280c59906039db41d488",
        "patch": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the RPC call related to the uptime command.\n+\n+Test corresponds to code in rpc/server.cpp.\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class GetSignatureHashTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        tx = \"010000000243ec7a579f5561a42a7e9637ad4156672735a658be2752181801f723ba3316d200000000844730440220449a203d0062ea01022f565c94c4b62bf2cc9a05de20519bc18cded9e99aa5f702201a2b8361e2af179eb93e697d9fedd0bf1e036f0a5be39af4b1f791df803bdb6501210363e38e2e0e55cdebfb7e27d0cb53ded150c320564a4614c18738feb124c8efd21976a9141a5fdcb6201f7e4fd160f9dca81075bd8537526088acffffffff43ec7a579f5561a42a7e9637ad4156672735a658be2752181801f723ba3316d20100000085483045022100ff6e7edffa5e0758244af6af77edd14f1d80226d66f81ed58dba2def34778236022057d95177497758e467c194f0d897f175645d30e7ac2f9490247e13227ac4d2fc01210363e38e2e0e55cdebfb7e27d0cb53ded150c320564a4614c18738feb124c8efd21976a9141a5fdcb6201f7e4fd160f9dca81075bd8537526088acffffffff0100752b7d000000001976a9141a5fdcb6201f7e4fd160f9dca81075bd8537526088ac00000000\"\n+        scriptcode = \"76a9141a5fdcb6201f7e4fd160f9dca81075bd8537526088ac\"\n+        amount = 100000000\n+        sigversion = \"BASE\"\n+        input_index = 0\n+        sighash = \"ALL\"\n+        expected_hash = \"64e049981a10cf597406a175d7443c8499d308168915377637e3f706ce186137\" \n+        assert_equal(expected_hash, self.nodes[0].getsignaturehash(\n+            tx,\n+            scriptcode,\n+            amount,\n+            sigversion,\n+            input_index,\n+            sighash\n+        ))\n+\n+        # optional parameter\n+        assert_equal(expected_hash, self.nodes[0].getsignaturehash(\n+            tx,\n+            scriptcode,\n+            amount,\n+            sigversion,\n+            input_index\n+        ))\n+\n+\n+\n+\n+if __name__ == '__main__':\n+    GetSignatureHashTest().main()"
      },
      {
        "sha": "e00ce9d5ccdc83efb9ed17bb0a04585fb518fd5f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a688c4f6184d6719c55280c59906039db41d488/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a688c4f6184d6719c55280c59906039db41d488/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=0a688c4f6184d6719c55280c59906039db41d488",
        "patch": "@@ -126,6 +126,7 @@\n     'p2p-fingerprint.py',\n     'uacomment.py',\n     'p2p-acceptblock.py',\n+    'getsignaturehash.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  }
]