[
  {
    "sha": "93b9800fec588fc0c258e754405db1e9f89cfb81",
    "node_id": "C_kwDOABII59oAKDkzYjk4MDBmZWM1ODhmYzBjMjU4ZTc1NDQwNWRiMWU5Zjg5Y2ZiODE",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-08-23T01:40:41Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-09-27T10:57:20Z"
      },
      "message": "scripted-diff: Rename overloaded int GetArg to GetIntArg\n\nImprove readability of code, simplify future scripted diff cleanup PRs, and be\nmore consistent with naming for GetBoolArg.\n\nThis will also be useful for replacing runtime settings type checking\nwith compile time checking.\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l GetArg | xargs sed -i 's/GetArg(\\([^)]*\\( [0-9]\\+\\|-1\\|port\\|BaseParams().RPCPort()\\|Params().GetDefaultPort()\\|_TIMEOUT\\|Height\\|_WORKQUEUE\\|_THREADS\\|_CONNECTIONS\\|LIMIT\\|SigOp\\|Bytes\\|_VERSION\\|_AGE\\|_CHECKS\\|Checks() ? 1 : 0\\|_BANTIME\\|Cache\\|BLOCKS\\|LEVEL\\|Weight\\|Version\\|BUFFER\\|TARGET\\|WEIGHT\\|TXN\\|TRANSACTIONS\\|ADJUSTMENT\\|i64\\|Size\\|nDefault\\|_EXPIRY\\|HEIGHT\\|SIZE\\|SNDHWM\\|_TIME_MS\\)\\))/GetIntArg(\\1)/g'\n-END VERIFY SCRIPT-\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>",
      "tree": {
        "sha": "f5ef0c518df2935cb11e90015cb8fd73b0173c4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5ef0c518df2935cb11e90015cb8fd73b0173c4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93b9800fec588fc0c258e754405db1e9f89cfb81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b9800fec588fc0c258e754405db1e9f89cfb81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93b9800fec588fc0c258e754405db1e9f89cfb81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93b9800fec588fc0c258e754405db1e9f89cfb81/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b523f2e55713c0093ed46931cb332bfeb1ba661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b523f2e55713c0093ed46931cb332bfeb1ba661",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b523f2e55713c0093ed46931cb332bfeb1ba661"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 93,
      "deletions": 93
    },
    "files": [
      {
        "sha": "94c77a6d896bcfb88bc45996916699bc25077558",
        "filename": "src/addrdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -183,7 +183,7 @@ void ReadFromStream(CAddrMan& addr, CDataStream& ssPeers)\n \n std::optional<bilingual_str> LoadAddrman(const std::vector<bool>& asmap, const ArgsManager& args, std::unique_ptr<CAddrMan>& addrman)\n {\n-    auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n+    auto check_addrman = std::clamp<int32_t>(args.GetIntArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n     addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n \n     int64_t nStart = GetTimeMillis();"
      },
      {
        "sha": "0b43ea1fd56a3ad889a901b9260f0053e527a83c",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -107,7 +107,7 @@ int main(int argc, char** argv)\n     benchmark::Args args;\n     args.asymptote = parseAsymptote(argsman.GetArg(\"-asymptote\", \"\"));\n     args.is_list_only = argsman.GetBoolArg(\"-list\", false);\n-    args.min_time = std::chrono::milliseconds(argsman.GetArg(\"-min_time\", DEFAULT_MIN_TIME_MS));\n+    args.min_time = std::chrono::milliseconds(argsman.GetIntArg(\"-min_time\", DEFAULT_MIN_TIME_MS));\n     args.output_csv = argsman.GetArg(\"-output_csv\", \"\");\n     args.output_json = argsman.GetArg(\"-output_json\", \"\");\n     args.regex_filter = argsman.GetArg(\"-filter\", DEFAULT_BENCH_FILTER);"
      },
      {
        "sha": "3c22ee0f6786eded6e5c270afc7f6f216fedab0e",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -702,7 +702,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n     //     3. default port for chain\n     uint16_t port{BaseParams().RPCPort()};\n     SplitHostPort(gArgs.GetArg(\"-rpcconnect\", DEFAULT_RPCCONNECT), port, host);\n-    port = static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", port));\n+    port = static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", port));\n \n     // Obtain event base\n     raii_event_base base = obtain_event_base();\n@@ -712,7 +712,7 @@ static UniValue CallRPC(BaseRequestHandler* rh, const std::string& strMethod, co\n \n     // Set connection timeout\n     {\n-        const int timeout = gArgs.GetArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n+        const int timeout = gArgs.GetIntArg(\"-rpcclienttimeout\", DEFAULT_HTTP_CLIENT_TIMEOUT);\n         if (timeout > 0) {\n             evhttp_connection_set_timeout(evcon.get(), timeout);\n         } else {\n@@ -822,7 +822,7 @@ static UniValue ConnectAndCallRPC(BaseRequestHandler* rh, const std::string& str\n     UniValue response(UniValue::VOBJ);\n     // Execute and handle connection failures with -rpcwait.\n     const bool fWait = gArgs.GetBoolArg(\"-rpcwait\", false);\n-    const int timeout = gArgs.GetArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n+    const int timeout = gArgs.GetIntArg(\"-rpcwaittimeout\", DEFAULT_WAIT_CLIENT_TIMEOUT);\n     const auto deadline{GetTime<std::chrono::microseconds>() + 1s * timeout};\n \n     do {"
      },
      {
        "sha": "36bbece0ea35d63bb07ff3f519c7f530f238c499",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -289,7 +289,7 @@ static bool ThreadHTTP(struct event_base* base)\n /** Bind HTTP server to specified addresses */\n static bool HTTPBindAddresses(struct evhttp* http)\n {\n-    uint16_t http_port{static_cast<uint16_t>(gArgs.GetArg(\"-rpcport\", BaseParams().RPCPort()))};\n+    uint16_t http_port{static_cast<uint16_t>(gArgs.GetIntArg(\"-rpcport\", BaseParams().RPCPort()))};\n     std::vector<std::pair<std::string, uint16_t>> endpoints;\n \n     // Determine what addresses to bind to\n@@ -374,7 +374,7 @@ bool InitHTTPServer()\n         return false;\n     }\n \n-    evhttp_set_timeout(http, gArgs.GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+    evhttp_set_timeout(http, gArgs.GetIntArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n     evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, nullptr);\n@@ -385,7 +385,7 @@ bool InitHTTPServer()\n     }\n \n     LogPrint(BCLog::HTTP, \"Initialized HTTP server\\n\");\n-    int workQueueDepth = std::max((long)gArgs.GetArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n+    int workQueueDepth = std::max((long)gArgs.GetIntArg(\"-rpcworkqueue\", DEFAULT_HTTP_WORKQUEUE), 1L);\n     LogPrintf(\"HTTP: creating work queue of depth %d\\n\", workQueueDepth);\n \n     g_work_queue = std::make_unique<WorkQueue<HTTPClosure>>(workQueueDepth);\n@@ -415,7 +415,7 @@ static std::vector<std::thread> g_thread_http_workers;\n void StartHTTPServer()\n {\n     LogPrint(BCLog::HTTP, \"Starting HTTP server\\n\");\n-    int rpcThreads = std::max((long)gArgs.GetArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n+    int rpcThreads = std::max((long)gArgs.GetIntArg(\"-rpcthreads\", DEFAULT_HTTP_THREADS), 1L);\n     LogPrintf(\"HTTP: starting %d worker threads\\n\", rpcThreads);\n     g_thread_http = std::thread(ThreadHTTP, eventBase);\n "
      },
      {
        "sha": "25b9c6b9ec6a715998f3cf886e74ae30430013e9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -843,7 +843,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // if using block pruning, then disallow txindex and coinstatsindex\n-    if (args.GetArg(\"-prune\", 0)) {\n+    if (args.GetIntArg(\"-prune\", 0)) {\n         if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n         if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n@@ -868,7 +868,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n \n     // Make sure enough file descriptors are available\n     int nBind = std::max(nUserBind, size_t(1));\n-    nUserMaxConnections = args.GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n+    nUserMaxConnections = args.GetIntArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS + MAX_ADDNODE_CONNECTIONS + nBind + NUM_FDS_MESSAGE_CAPTURE);\n@@ -913,8 +913,8 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // mempool limits\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t nMempoolSizeMin = args.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMin = args.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n@@ -928,7 +928,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n-    int64_t nPruneArg = args.GetArg(\"-prune\", 0);\n+    int64_t nPruneArg = args.GetIntArg(\"-prune\", 0);\n     if (nPruneArg < 0) {\n         return InitError(_(\"Prune cannot be configured with a negative value.\"));\n     }\n@@ -945,12 +945,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         fPruneMode = true;\n     }\n \n-    nConnectTimeout = args.GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n+    nConnectTimeout = args.GetIntArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n     if (nConnectTimeout <= 0) {\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n     }\n \n-    peer_connect_timeout = args.GetArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n+    peer_connect_timeout = args.GetIntArg(\"-peertimeout\", DEFAULT_PEER_CONNECT_TIMEOUT);\n     if (peer_connect_timeout <= 0) {\n         return InitError(Untranslated(\"peertimeout cannot be configured with a negative value.\"));\n     }\n@@ -990,27 +990,27 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     if (!chainparams.IsTestChain() && !fRequireStandard) {\n         return InitError(strprintf(Untranslated(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString()));\n     }\n-    nBytesPerSigOp = args.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n+    nBytesPerSigOp = args.GetIntArg(\"-bytespersigop\", nBytesPerSigOp);\n \n     if (!g_wallet_init_interface.ParameterInteraction()) return false;\n \n     fIsBareMultisigStd = args.GetBoolArg(\"-permitbaremultisig\", DEFAULT_PERMIT_BAREMULTISIG);\n     fAcceptDatacarrier = args.GetBoolArg(\"-datacarrier\", DEFAULT_ACCEPT_DATACARRIER);\n-    nMaxDatacarrierBytes = args.GetArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n+    nMaxDatacarrierBytes = args.GetIntArg(\"-datacarriersize\", nMaxDatacarrierBytes);\n \n     // Option to startup with mocktime set (used for regression testing):\n-    SetMockTime(args.GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n+    SetMockTime(args.GetIntArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n     if (args.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n         return InitError(Untranslated(\"rpcserialversion must be non-negative.\"));\n \n-    if (args.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n+    if (args.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) > 1)\n         return InitError(Untranslated(\"Unknown rpcserialversion requested.\"));\n \n-    nMaxTipAge = args.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n+    nMaxTipAge = args.GetIntArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n     if (args.IsArgSet(\"-proxy\") && args.GetArg(\"-proxy\", \"\").empty()) {\n         return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n@@ -1099,7 +1099,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     InitSignatureCache();\n     InitScriptExecutionCache();\n \n-    int script_threads = args.GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n+    int script_threads = args.GetIntArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (script_threads <= 0) {\n         // -par=0 means autodetect (number of cores - 1 script threads)\n         // -par=-n means \"leave n cores free\" (number of cores - n - 1 script threads)\n@@ -1206,7 +1206,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     }\n \n     assert(!node.banman);\n-    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetIntArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n     node.connman = std::make_unique<CConnman>(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max()), *node.addrman, args.GetBoolArg(\"-networkactive\", true));\n \n@@ -1216,7 +1216,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     if (!ignores_incoming_txs) node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n \n     assert(!node.mempool);\n-    int check_ratio = std::min<int>(std::max<int>(args.GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    int check_ratio = std::min<int>(std::max<int>(args.GetIntArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n     node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);\n@@ -1323,7 +1323,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     bool fReindexChainState = args.GetBoolArg(\"-reindex-chainstate\", false);\n \n     // cache size calculations\n-    int64_t nTotalCache = (args.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    int64_t nTotalCache = (args.GetIntArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n     int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n@@ -1341,7 +1341,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     int64_t nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n-    int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolSizeMax = args.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1f MiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n@@ -1497,7 +1497,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n                 for (CChainState* chainstate : chainman.GetAll()) {\n                     if (!is_coinsview_empty(chainstate)) {\n                         uiInterface.InitMessage(_(\"Verifying blocks\u2026\").translated);\n-                        if (fHavePruned && args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                        if (fHavePruned && args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                             LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                                 MIN_BLOCKS_TO_KEEP);\n                         }\n@@ -1514,8 +1514,8 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                         if (!CVerifyDB().VerifyDB(\n                                 *chainstate, chainparams, chainstate->CoinsDB(),\n-                                args.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n+                                args.GetIntArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                                args.GetIntArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                             strLoadError = _(\"Corrupted block database detected\");\n                             failed_verification = true;\n                             break;\n@@ -1707,11 +1707,11 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n     connOptions.m_msgproc = node.peerman.get();\n-    connOptions.nSendBufferMaxSize = 1000 * args.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n-    connOptions.nReceiveFloodSize = 1000 * args.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+    connOptions.nSendBufferMaxSize = 1000 * args.GetIntArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n+    connOptions.nReceiveFloodSize = 1000 * args.GetIntArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = args.GetArgs(\"-addnode\");\n \n-    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n+    connOptions.nMaxOutboundLimit = 1024 * 1024 * args.GetIntArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET);\n     connOptions.m_peer_connect_timeout = peer_connect_timeout;\n \n     for (const std::string& bind_arg : args.GetArgs(\"-bind\")) {"
      },
      {
        "sha": "33d115f279440188371fd850e21dd93136e19d13",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -72,7 +72,7 @@ static BlockAssembler::Options DefaultOptions()\n     // Block resource limits\n     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT\n     BlockAssembler::Options options;\n-    options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n+    options.nBlockMaxWeight = gArgs.GetIntArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n     if (gArgs.IsArgSet(\"-blockmintxfee\")) {\n         std::optional<CAmount> parsed = ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"));\n         options.blockMinFeeRate = CFeeRate{parsed.value_or(DEFAULT_BLOCK_MIN_TX_FEE)};\n@@ -125,7 +125,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())\n-        pblock->nVersion = gArgs.GetArg(\"-blockversion\", pblock->nVersion);\n+        pblock->nVersion = gArgs.GetIntArg(\"-blockversion\", pblock->nVersion);\n \n     pblock->nTime = GetAdjustedTime();\n     const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();"
      },
      {
        "sha": "b8ff0b13ea8b323b64311e9d76295fb358cc4dd3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -123,7 +123,7 @@ void CConnman::AddAddrFetch(const std::string& strDest)\n \n uint16_t GetListenPort()\n {\n-    return static_cast<uint16_t>(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n+    return static_cast<uint16_t>(gArgs.GetIntArg(\"-port\", Params().GetDefaultPort()));\n }\n \n // find 'best' local address for a particular peer"
      },
      {
        "sha": "e130272ff1ee7078adbeb5d750dbdb318e4a6e9b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -1300,7 +1300,7 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) c\n \n void PeerManagerImpl::AddToCompactExtraTransactions(const CTransactionRef& tx)\n {\n-    size_t max_extra_txn = gArgs.GetArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n+    size_t max_extra_txn = gArgs.GetIntArg(\"-blockreconstructionextratxn\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN);\n     if (max_extra_txn <= 0)\n         return;\n     if (!vExtraTxnForCompact.size())\n@@ -3315,7 +3315,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n \n                 // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n-                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+                unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetIntArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = m_orphanage.LimitOrphans(nMaxOrphanTx);\n                 if (nEvicted > 0) {\n                     LogPrint(BCLog::MEMPOOL, \"orphanage overflow, removed %u tx\\n\", nEvicted);\n@@ -4416,7 +4416,7 @@ void PeerManagerImpl::MaybeSendFeefilter(CNode& pto, std::chrono::microseconds c\n     // peers with the forcerelay permission should not filter txs to us\n     if (pto.HasPermission(NetPermissionFlags::ForceRelay)) return;\n \n-    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+    CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n     static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};\n \n     if (m_chainman.ActiveChainstate().IsInitialBlockDownload()) {"
      },
      {
        "sha": "5b6d8416a736ff00290d2d9de35b98454c6653d7",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -583,19 +583,19 @@ class ChainImpl : public Chain\n     }\n     void getPackageLimits(unsigned int& limit_ancestor_count, unsigned int& limit_descendant_count) override\n     {\n-        limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n     }\n     bool checkChainLimits(const CTransactionRef& tx) override\n     {\n         if (!m_node.mempool) return true;\n         LockPoints lp;\n         CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n         CTxMemPool::setEntries ancestors;\n-        auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n-        auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n-        auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n-        auto limit_descendant_size = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+        auto limit_ancestor_count = gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n+        auto limit_ancestor_size = gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n+        auto limit_descendant_count = gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);\n+        auto limit_descendant_size = gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n         std::string unused_error_string;\n         LOCK(m_node.mempool->cs);\n         return m_node.mempool->CalculateMemPoolAncestors(\n@@ -615,7 +615,7 @@ class ChainImpl : public Chain\n     CFeeRate mempoolMinFee() override\n     {\n         if (!m_node.mempool) return {};\n-        return m_node.mempool->GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        return m_node.mempool->GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     }\n     CFeeRate relayMinFee() override { return ::minRelayTxFee; }\n     CFeeRate relayIncrementalFee() override { return ::incrementalRelayFee; }"
      },
      {
        "sha": "4c78fba7526f51397735597b8199354100e65cb7",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -113,7 +113,7 @@ namespace {\n //! Return pruning size that will be used if automatic pruning is enabled.\n int GetPruneTargetGB()\n {\n-    int64_t prune_target_mib = gArgs.GetArg(\"-prune\", 0);\n+    int64_t prune_target_mib = gArgs.GetIntArg(\"-prune\", 0);\n     // >1 means automatic pruning is enabled by config, 1 means manual pruning, 0 means no pruning.\n     return prune_target_mib > 1 ? PruneMiBtoGB(prune_target_mib) : DEFAULT_PRUNE_TARGET_GB;\n }\n@@ -142,7 +142,7 @@ Intro::Intro(QWidget *parent, int64_t blockchain_size_gb, int64_t chain_state_si\n \n     const int min_prune_target_GB = std::ceil(MIN_DISK_SPACE_FOR_BLOCK_FILES / 1e9);\n     ui->pruneGB->setRange(min_prune_target_GB, std::numeric_limits<int>::max());\n-    if (gArgs.GetArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n+    if (gArgs.GetIntArg(\"-prune\", 0) > 1) { // -prune=1 means enabled, above that it's a size in MiB\n         ui->prune->setChecked(true);\n         ui->prune->setEnabled(false);\n     }"
      },
      {
        "sha": "3ee65922f9a2c26f3b100ecdb06e2610e27a34b2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -1503,7 +1503,7 @@ RPCHelpMan getblockchaininfo()\n         obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n-        bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n+        bool automatic_pruning = (gArgs.GetIntArg(\"-prune\", 0) != 1);\n         obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n             obj.pushKV(\"prune_target_size\",  nPruneTarget);\n@@ -1650,7 +1650,7 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"bytes\", (int64_t)pool.GetTotalTxSize());\n     ret.pushKV(\"usage\", (int64_t)pool.DynamicMemoryUsage());\n     ret.pushKV(\"total_fee\", ValueFromAmount(pool.GetTotalFee()));\n-    size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    size_t maxmempool = gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));"
      },
      {
        "sha": "0d02ec5c47d8784e7eb0833db25542f9a5d79c0a",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -540,7 +540,7 @@ void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nS\n int RPCSerializationFlags()\n {\n     int flag = 0;\n-    if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n+    if (gArgs.GetIntArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) == 0)\n         flag |= SERIALIZE_TRANSACTION_NO_WITNESS;\n     return flag;\n }"
      },
      {
        "sha": "6f911f4fe7489ab6c82cbdff20d38c2733aaf24b",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -96,7 +96,7 @@ void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);"
      },
      {
        "sha": "00403c1a3233ab6f40231156b9bfe3bd231b4209",
        "filename": "src/test/fuzz/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/test/fuzz/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/test/fuzz/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/system.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -97,7 +97,7 @@ FUZZ_TARGET(system)\n     const int64_t i64 = fuzzed_data_provider.ConsumeIntegral<int64_t>();\n     const bool b = fuzzed_data_provider.ConsumeBool();\n \n-    (void)args_manager.GetArg(s1, i64);\n+    (void)args_manager.GetIntArg(s1, i64);\n     (void)args_manager.GetArg(s1, s2);\n     (void)args_manager.GetArgFlags(s1);\n     (void)args_manager.GetArgs(s1);"
      },
      {
        "sha": "17e904fcffec129941790aa027f69a4429cb2ee2",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -137,20 +137,20 @@ BOOST_AUTO_TEST_CASE(intarg)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 0);\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n \n     ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 12);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 12);\n \n     ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(doubledash)\n \n     ResetArgs(\"--foo=verbose --bar=1\");\n     BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(m_local_args.GetArg(\"-bar\", 0), 1);\n+    BOOST_CHECK_EQUAL(m_local_args.GetIntArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)"
      },
      {
        "sha": "a5c9d2ef6f6887e72bb5fcafb58faa72a35ce35a",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -300,9 +300,9 @@ class CheckValueTest : public TestChain100Setup\n         }\n \n         if (expect.default_int) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), 99999);\n         } else if (expect.int_value) {\n-            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n+            BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), *expect.int_value);\n         } else {\n             BOOST_CHECK(!success);\n         }\n@@ -432,8 +432,8 @@ static void TestParse(const std::string& str, bool expected_bool, int64_t expect\n     BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n     BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99998), expected_int);\n-    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99998), expected_int);\n+    BOOST_CHECK_EQUAL(test.GetIntArg(\"-value\", 99999), expected_int);\n }\n \n // Test bool and int parsing.\n@@ -784,9 +784,9 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n \n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest1\", -1), 12345);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest2\", -1), 81985529216486895LL);\n-    BOOST_CHECK_EQUAL(testArgs.GetArg(\"inttest3\", -1), -1);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest1\", -1), 12345);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest2\", -1), 81985529216486895LL);\n+    BOOST_CHECK_EQUAL(testArgs.GetIntArg(\"inttest3\", -1), -1);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest1\", false), true);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);"
      },
      {
        "sha": "69d0273e7937a06325ff4433502041dd05870f50",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -75,7 +75,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         int64_t nMedian = vTimeOffsets.median();\n         std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n         // Only let other nodes change our time by so much\n-        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n+        int64_t max_adjustment = std::max<int64_t>(0, gArgs.GetIntArg(\"-maxtimeadjustment\", DEFAULT_MAX_TIME_ADJUSTMENT));\n         if (nMedian >= -max_adjustment && nMedian <= max_adjustment) {\n             nTimeOffset = nMedian;\n         } else {"
      },
      {
        "sha": "3839c9083ce4855056c8ba731478f01c0457945c",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -107,8 +107,8 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     CDBBatch batch(*m_db);\n     size_t count = 0;\n     size_t changed = 0;\n-    size_t batch_size = (size_t)gArgs.GetArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n-    int crash_simulate = gArgs.GetArg(\"-dbcrashratio\", 0);\n+    size_t batch_size = (size_t)gArgs.GetIntArg(\"-dbbatchsize\", nDefaultDbBatchSize);\n+    int crash_simulate = gArgs.GetIntArg(\"-dbcrashratio\", 0);\n     assert(!hashBlock.IsNull());\n \n     uint256 old_tip = GetBestBlock();"
      },
      {
        "sha": "4defeed4ced453e67ed1ef355f2025f6cfbc235f",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -591,7 +591,7 @@ std::string ArgsManager::GetArg(const std::string& strArg, const std::string& st\n     return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n-int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n+int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n     return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());"
      },
      {
        "sha": "2e217f6f90c25605523224e6b75a7fcc96fa250b",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -327,7 +327,7 @@ class ArgsManager\n      * @param nDefault (e.g. 1)\n      * @return command-line argument (0 if invalid number) or default value\n      */\n-    int64_t GetArg(const std::string& strArg, int64_t nDefault) const;\n+    int64_t GetIntArg(const std::string& strArg, int64_t nDefault) const;\n \n     /**\n      * Return boolean argument or default value"
      },
      {
        "sha": "4504d2ca0a2be4203888df935780d3cf5c052e16",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -373,8 +373,8 @@ void CChainState::MaybeUpdateMempoolForReorg(\n     LimitMempoolSize(\n         *m_mempool,\n         this->CoinsTip(),\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n-        std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+        std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -425,10 +425,10 @@ class MemPoolAccept\n {\n public:\n     explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&active_chainstate.CoinsTip(), m_pool), m_active_chainstate(active_chainstate),\n-        m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n-        m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n-        m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n-        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n+        m_limit_ancestors(gArgs.GetIntArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n+        m_limit_ancestor_size(gArgs.GetIntArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n+        m_limit_descendants(gArgs.GetIntArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n+        m_limit_descendant_size(gArgs.GetIntArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n     }\n \n     // We put the arguments we're handed into a struct, so we can pass them\n@@ -510,7 +510,7 @@ class MemPoolAccept\n     // Compare a package's feerate against minimum allowed.\n     bool CheckFeeRate(size_t package_size, CAmount package_fee, TxValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs)\n     {\n-        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n+        CAmount mempoolRejectFee = m_pool.GetMinFee(gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(package_size);\n         if (mempoolRejectFee > 0 && package_fee < mempoolRejectFee) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool min fee not met\", strprintf(\"%d < %d\", package_fee, mempoolRejectFee));\n         }\n@@ -911,7 +911,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n@@ -1273,7 +1273,7 @@ void InitScriptExecutionCache() {\n     g_scriptExecutionCacheHasher.Write(nonce.begin(), 32);\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n     // setup_bytes creates the minimum possible cache (2 elements).\n-    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, gArgs.GetIntArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) / 2), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = g_scriptExecutionCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu/2 requested for script execution cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, (nMaxCacheSize*2)>>20, nElems);\n@@ -1898,7 +1898,7 @@ CoinsCacheSizeState CChainState::GetCoinsCacheSizeState()\n {\n     return this->GetCoinsCacheSizeState(\n         m_coinstip_cache_size_bytes,\n-        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n }\n \n CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n@@ -2552,7 +2552,7 @@ bool CChainState::ActivateBestChain(BlockValidationState& state, std::shared_ptr\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n-    int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n+    int nStopAtHeight = gArgs.GetIntArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         // Block until the validation queue drains. This should largely\n         // never happen in normal operation, however may happen during\n@@ -4458,7 +4458,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate, FopenFn mockable_fopen_function)\n {\n     const CChainParams& chainparams = Params();\n-    int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n+    int64_t nExpiryTimeout = gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr{mockable_fopen_function(gArgs.GetDataDirNet() / \"mempool.dat\", \"rb\")};\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {"
      },
      {
        "sha": "2eb4d3106c2604f39a5479a0378ac532f73329c3",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -375,7 +375,7 @@ void BerkeleyBatch::Flush()\n         nMinutes = 1;\n \n     if (env) { // env is nullptr for dummy databases (i.e. in tests). Don't actually flush if env is nullptr so we don't segfault\n-        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n+        env->dbenv->txn_checkpoint(nMinutes ? gArgs.GetIntArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n     }\n }\n "
      },
      {
        "sha": "382e8b6116a368d64014f45d3e207917ab2f0ca2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -1488,7 +1488,7 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             } else {\n                 warnings.push_back(\"Range not given, using default keypool range\");\n                 range_start = 0;\n-                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+                range_end = gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n             }\n             next_index = range_start;\n "
      },
      {
        "sha": "fdfb36bb0ac640d8b6ec7f595299352e19ba682f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -331,7 +331,7 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\n     CHDChain& chain = it->second;\n \n     // Top up key pool\n-    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    int64_t target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n \n     // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n     // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n@@ -1259,7 +1259,7 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+            nTargetSize = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n \n         // count amount of available keys (internal, external)\n         // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n@@ -1764,7 +1764,7 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n     if (size > 0) {\n         target_size = size;\n     } else {\n-        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+        target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n     }\n \n     // Calculate the new range_end"
      },
      {
        "sha": "7a7ff3ee33613a2c0711aea3391fb36ca5274053",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -2735,7 +2735,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n                            _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n     }\n \n-    walletInstance->m_confirm_target = args.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    walletInstance->m_confirm_target = args.GetIntArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n     walletInstance->m_spend_zero_conf_change = args.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n     walletInstance->m_signal_rbf = args.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n "
      },
      {
        "sha": "a53de34db486f32e1e415798c8c73ca107c6a36d",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93b9800fec588fc0c258e754405db1e9f89cfb81/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93b9800fec588fc0c258e754405db1e9f89cfb81/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=93b9800fec588fc0c258e754405db1e9f89cfb81",
        "patch": "@@ -47,7 +47,7 @@ CZMQNotificationInterface* CZMQNotificationInterface::Create()\n             std::unique_ptr<CZMQAbstractNotifier> notifier = factory();\n             notifier->SetType(entry.first);\n             notifier->SetAddress(address);\n-            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n+            notifier->SetOutboundMessageHighWaterMark(static_cast<int>(gArgs.GetIntArg(arg + \"hwm\", CZMQAbstractNotifier::DEFAULT_ZMQ_SNDHWM)));\n             notifiers.push_back(std::move(notifier));\n         }\n     }"
      }
    ]
  }
]