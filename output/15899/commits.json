[
  {
    "sha": "fa5c5cd141f0265a5693234690ac757b811157d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVjNWNkMTQxZjAyNjVhNTY5MzIzNDY5MGFjNzU3YjgxMTE1N2Q4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-26T13:09:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-16T18:15:40Z"
      },
      "message": "rpc: Switch touched RPCs to IsValidNumArgs",
      "tree": {
        "sha": "4e8b37f1915f4c593e8362f9adefacd248dbbe39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e8b37f1915f4c593e8362f9adefacd248dbbe39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5c5cd141f0265a5693234690ac757b811157d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhKTQv/ftmjUKpFaf0DeXG2dpQhyyznPFBCeLSzQ7wWUSAhL5Jyl0OsyY2RjXsC\nH96PyJcZpFiaDro219JXhJeJOcHaxMuPdzR5ObbsjkiSdbAx/C9oPR8ueP/WR6Qa\nme3r+Sz131wRt9yvv2C8m+bEszeQMhq0HNPCN/xtFZax07ZiLQIbRk6OP5p9C/h0\nlS0bYBF/EEIq7YEdU4jbQAbW3R5cFO4ta08leY9kWlzMmqPY0j/UIllWQcAhWjMU\nwrlrLf/UHJhcn87aQHttmhA19M/BXvyGAUlKJU2Y7/xHfLVNCdrkWxbJ8op9Smmz\noxSqcj0gzyBD/Kka0R+5r9eolyyFI4/UYBe5CJ/WnSbPSKo/93QDlzfGqf1yo26A\n8EDMUPAUFEyRmNEpEVMBtjVIdR1lT+YRfF9GEgWlEyyC0YclF8xk0Uu2i2CX6VMp\nTh1jIDnc03FthAGWgHeVv355xW8TK37WYmwDySVrSvIZyV1v/6vTe3Mt0zSlM56E\nD7V2gb/B\n=oNjZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e8b37f1915f4c593e8362f9adefacd248dbbe39\nparent 653b2b4426cf762f90707c27c3f435142c911ab6\nauthor MarcoFalke <falke.marco@gmail.com> 1556284190 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1558030540 -0400\n\nrpc: Switch touched RPCs to IsValidNumArgs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5c5cd141f0265a5693234690ac757b811157d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5c5cd141f0265a5693234690ac757b811157d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5c5cd141f0265a5693234690ac757b811157d8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "653b2b4426cf762f90707c27c3f435142c911ab6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/653b2b4426cf762f90707c27c3f435142c911ab6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/653b2b4426cf762f90707c27c3f435142c911ab6"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cebdc5da99440381637f57dcc6052216b183a18c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5c5cd141f0265a5693234690ac757b811157d8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5c5cd141f0265a5693234690ac757b811157d8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa5c5cd141f0265a5693234690ac757b811157d8",
        "patch": "@@ -431,9 +431,7 @@ static UniValue createrawtransaction(const JSONRPCRequest& request)\n \n static UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"decoderawtransaction\",\n+    const RPCHelpMan help{\"decoderawtransaction\",\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n@@ -485,7 +483,11 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                     HelpExampleCli(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n                 },\n-            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL});\n \n@@ -1415,9 +1417,7 @@ UniValue createpsbt(const JSONRPCRequest& request)\n \n UniValue converttopsbt(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"converttopsbt\",\n+    const RPCHelpMan help{\"converttopsbt\",\n                 \"\\nConverts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction\\n\"\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n@@ -1438,7 +1438,11 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                             \"\\nConvert the transaction to a PSBT\\n\"\n                             + HelpExampleCli(\"converttopsbt\", \"\\\"rawtransaction\\\"\")\n                 },\n-            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VBOOL}, true);"
      },
      {
        "sha": "6cb3deb591abdcb3750ce2f74f928b566dbb5fc1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5c5cd141f0265a5693234690ac757b811157d8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5c5cd141f0265a5693234690ac757b811157d8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa5c5cd141f0265a5693234690ac757b811157d8",
        "patch": "@@ -2991,9 +2991,7 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"fundrawtransaction\",\n+    const RPCHelpMan help{\"fundrawtransaction\",\n                 \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                 \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n                 \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n@@ -3052,7 +3050,11 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"\\nSend the transaction\\n\"\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                                 },\n-                            }.ToString());\n+    };\n+\n+    if (request.fHelp || !help.IsValidNumArgs(request.params.size())) {\n+        throw std::runtime_error(help.ToString());\n+    }\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType(), UniValue::VBOOL});\n "
      }
    ]
  },
  {
    "sha": "fa499b5f027f77c0bf13699852c8c06f78e27bef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ5OWI1ZjAyN2Y3N2MwYmYxMzY5OTg1MmM4YzA2Zjc4ZTI3YmVm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-26T13:04:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-16T19:56:04Z"
      },
      "message": "rpc: bugfix: Properly use iswitness in converttopsbt\n\nAlso explain the param in all RPCs",
      "tree": {
        "sha": "0d64e4c73efcbc3879a575c7fa08cf186b179766",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d64e4c73efcbc3879a575c7fa08cf186b179766"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa499b5f027f77c0bf13699852c8c06f78e27bef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiadwv/VBjPKq3u5bALfif+DrdLRCwBrbcwEsv/I2hgj/ix2CWis6EnqbWsMtFI\nPniEnC5uV8hqGYKA4559xmtmisL65aj7AJRf7GfBMhT8LhTstfn42t+FQvQJax4e\nLsUf5qLULh4xR+VN99+VH5FZR4V0gJ+q5m596DZ/LBWqUsfzyq0hxoHj8iNvdTdx\n9hiLybF+LgQKaup04UN2iFQSuwNZ/XD9DcYdDGi/BLMf3NNjF69JSJ9Jc8uJlX2q\nLeb+ITFnd+9He4CLIFCJeeNA5kmKXtUiAJbUu4I1EdairobSEGOsYLHBexeUPlZm\niIINzPXSTFPe/yliAYVSfYRr+70mpCR0hOjvE0oxnLvziiAT2nmfkY1l9Q5b6+GM\nX7ddBw6lVH0MY8A0kS8t/y3df+L7BWud1wiWWDkaPVSqOonhAL49I43ng9/mdgUO\nOeGzSk+Q8/bHfPKDaUM3KS/+0G/BE6Z/9/MQGXL9iUlZvGIcSugbkERRCLWSfboR\nGrpkEbyG\n=eo6c\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d64e4c73efcbc3879a575c7fa08cf186b179766\nparent fa5c5cd141f0265a5693234690ac757b811157d8\nauthor MarcoFalke <falke.marco@gmail.com> 1556283848 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1558036564 -0400\n\nrpc: bugfix: Properly use iswitness in converttopsbt\n\nAlso explain the param in all RPCs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa499b5f027f77c0bf13699852c8c06f78e27bef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa499b5f027f77c0bf13699852c8c06f78e27bef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa499b5f027f77c0bf13699852c8c06f78e27bef/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa5c5cd141f0265a5693234690ac757b811157d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5c5cd141f0265a5693234690ac757b811157d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5c5cd141f0265a5693234690ac757b811157d8"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 26,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4b1398d6a131f0b04d909c7c3701bac155cfa9f5",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa499b5f027f77c0bf13699852c8c06f78e27bef/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa499b5f027f77c0bf13699852c8c06f78e27bef/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa499b5f027f77c0bf13699852c8c06f78e27bef",
        "patch": "@@ -435,8 +435,13 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n                 \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction hex string\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction\\n\"\n-            \"                         If iswitness is not present, heuristic tests will be used in decoding\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                        \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n+                        \"If true, only witness deserialization will be tried.\\n\"\n+                        \"If false, only non-witness deserialization will be tried.\\n\"\n+                        \"This boolean should reflect whether the transaction has inputs\\n\"\n+                        \"(e.g. fully valid, or on-chain transactions), if known by the caller.\"\n+                    },\n                 },\n                 RPCResult{\n             \"{\\n\"\n@@ -1422,12 +1427,15 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n                 \"createpsbt and walletcreatefundedpsbt should be used for new applications.\\n\",\n                 {\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of a raw transaction\"},\n-                    {\"permitsigdata\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, any signatures in the input will be discarded and conversion.\\n\"\n+                    {\"permitsigdata\", RPCArg::Type::BOOL, /* default */ \"false\", \"If true, any signatures in the input will be discarded and conversion\\n\"\n                             \"                              will continue. If false, RPC will fail if any signatures are present.\"},\n                     {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n-                            \"                              If iswitness is not present, heuristic tests will be used in decoding. If true, only witness deserializaion\\n\"\n-                            \"                              will be tried. If false, only non-witness deserialization will be tried. Only has an effect if\\n\"\n-                            \"                              permitsigdata is true.\"},\n+                        \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n+                        \"If true, only witness deserialization will be tried.\\n\"\n+                        \"If false, only non-witness deserialization will be tried.\\n\"\n+                        \"This boolean should reflect whether the transaction has inputs\\n\"\n+                        \"(e.g. fully valid, or on-chain transactions), if known by the caller.\"\n+                    },\n                 },\n                 RPCResult{\n                             \"  \\\"psbt\\\"        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n@@ -1444,16 +1452,15 @@ UniValue converttopsbt(const JSONRPCRequest& request)\n         throw std::runtime_error(help.ToString());\n     }\n \n-\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VBOOL}, true);\n \n     // parse hex string from parameter\n     CMutableTransaction tx;\n     bool permitsigdata = request.params[1].isNull() ? false : request.params[1].get_bool();\n     bool witness_specified = !request.params[2].isNull();\n     bool iswitness = witness_specified ? request.params[2].get_bool() : false;\n-    bool try_witness = permitsigdata ? (witness_specified ? iswitness : true) : false;\n-    bool try_no_witness = permitsigdata ? (witness_specified ? !iswitness : true) : true;\n+    const bool try_witness = witness_specified ? iswitness : true;\n+    const bool try_no_witness = witness_specified ? !iswitness : true;\n     if (!DecodeHexTx(tx, request.params[0].get_str(), try_no_witness, try_witness)) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     }"
      },
      {
        "sha": "96f1051f176f6c1d7f4ff4660b54f215e4cdc052",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa499b5f027f77c0bf13699852c8c06f78e27bef/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa499b5f027f77c0bf13699852c8c06f78e27bef/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa499b5f027f77c0bf13699852c8c06f78e27bef",
        "patch": "@@ -3030,8 +3030,13 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"         \\\"CONSERVATIVE\\\"\"},\n                         },\n                         \"options\"},\n-                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction \\n\"\n-                            \"                              If iswitness is not present, heuristic tests will be used in decoding\"},\n+                    {\"iswitness\", RPCArg::Type::BOOL, /* default */ \"depends on heuristic tests\", \"Whether the transaction hex is a serialized witness transaction.\\n\"\n+                        \"If iswitness is not present, heuristic tests will be used in decoding.\\n\"\n+                        \"If true, only witness deserialization will be tried.\\n\"\n+                        \"If false, only non-witness deserialization will be tried.\\n\"\n+                        \"This boolean should reflect whether the transaction has inputs\\n\"\n+                        \"(e.g. fully valid, or on-chain transactions), if known by the caller.\"\n+                    },\n                 },\n                 RPCResult{\n                             \"{\\n\""
      },
      {
        "sha": "430be6dd37b835b36a451f944db88080da06e0ab",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa499b5f027f77c0bf13699852c8c06f78e27bef/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa499b5f027f77c0bf13699852c8c06f78e27bef/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fa499b5f027f77c0bf13699852c8c06f78e27bef",
        "patch": "@@ -152,9 +152,10 @@ def run_test(self):\n \n         # Make sure that a non-psbt with signatures cannot be converted\n         # Error could be either \"TX decode failed\" (segwit inputs causes parsing to fail) or \"Inputs must not have scriptSigs and scriptWitnesses\"\n+        # We must set iswitness=True because the serialized transaction has inputs and is therefore a witness transaction\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])\n-        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, signedtx['hex'])\n-        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, signedtx['hex'], False)\n+        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, hexstring=signedtx['hex'], iswitness=True)\n+        assert_raises_rpc_error(-22, \"\", self.nodes[0].converttopsbt, hexstring=signedtx['hex'], permitsigdata=False, iswitness=True)\n         # Unless we allow it to convert and strip signatures\n         self.nodes[0].converttopsbt(signedtx['hex'], True)\n "
      }
    ]
  }
]