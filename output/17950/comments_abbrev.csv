Empact,2020-01-17 19:36:56,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-575765874,575765874,
kristapsk,2020-01-18 11:25:39,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-575890127,575890127,
sipa,2020-01-18 17:49:19,"Concept ACK, but I strongly disagree with the chosen policies about passwords. For example, a sufficiently long passphrase of chosen lowercase-only words can be extremely high in entropy, but would be classified as ""weak"" here. It'd would be highly unfortunate to discourage good practices.",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-575922580,575922580,
emilengler,2020-01-19 07:48:56,"@sipa \n> Concept ACK, but I strongly disagree with the chosen policies about passwords. For example, a sufficiently long passphrase of chosen lowercase-only words can be extremely high in entropy, but would be classified as ""weak"" here. It'd would be highly unfortunate to discourage good practices.\n\nThanks for the feedback. I will re-think the strength measure the next days",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-575976833,575976833,
jonasschnelli,2020-01-20 04:42:19,"~~Concept ACK...~~\n~~Expect bike-shedding for the actual strength-logic.~~\n\nThis actual solves #5278 (an issue from 2014).",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-576103580,576103580,
luke-jr,2020-01-27 16:03:58,"Agreed with @sipa\n\nThere are dedicated libraries for this purpose, so I'm not sure it can be reasonably simplified such that we want to roll our own crypto here...\n\nMaybe we should just link CrackLib?",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-578818804,578818804,
practicalswift,2020-01-27 18:00:38,"> Maybe we should just link CrackLib?\n\nLike many C code bases born in the 1990's CrackLib doesn't really live up to today's standards for secure or robust coding. See the ""assumed length of password"" discussions in the comments of [CrackLib's `fascist.c`(!)](https://github.com/cracklib/cracklib/blob/8e921bfbc9ea3f1bbd6695eefa5f81f1e878d069/src/lib/fascist.c) as a small example :)",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-578874117,578874117,
luke-jr,2020-01-27 18:15:09,"@practicalswift I don't see what discussions you're referring to (or any discussions at all at the link). In any case, the input is being provided by the user himself, so this isn't a real concern...?",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-578880745,578880745,
emilengler,2020-01-27 18:25:53,This topic needs discussion. I personally think we should only use a library with a permissive license + a very small one (only one file). I don't think it would be worth maintaining another subtree just for a small feature in the GUI,https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-578885435,578885435,
luke-jr,2020-01-27 20:03:42,"Dependencies shouldn't be bundled at all, just picked up by configure and linked to when available.\n\nBut yes, the LGPL impact on gitian builds might need discussion. I wonder if there are any alternatives to CrackLib.",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-578926992,578926992,
emilengler,2020-01-27 20:15:04,"@luke-jr There's a JS library called zxcvbn from Dropbox.\nThere is a C-port of it here: https://github.com/tsyrogit/zxcvbn-c\n\nIt's also MIT",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-578931739,578931739,
practicalswift,2020-01-27 21:24:16,"> @practicalswift I don't see what discussions you're referring to (or any discussions at all at the link). In any case, the input is being provided by the user himself, so this isn't a real concern...?\n\nSorry for my sloppy wording: I should have said ""reasoning about string length in [`fascist.c`](https://github.com/cracklib/cracklib/blob/8e921bfbc9ea3f1bbd6695eefa5f81f1e878d069/src/lib/fasci",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-578959860,578959860,
luke-jr,2020-01-27 21:33:27,">Sorry for my sloppy wording: I should have said ""reasoning about string length in fascist.c"" instead of ""discussions about string length in fascist.c"" :)\n\nYou mean that it only looks at the first 1024 characters? tbh, that seems more than sufficient...?\n\n> I guess most input was assumed to be local and thus somewhat trusted back then.\n\nIn our case, it *is* local. And skimming the link",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-578963709,578963709,
practicalswift,2020-01-27 22:53:59,"> > And perhaps more importantly and regardless of code quality: what was consider a non-weak password in 1993 is not necessarily non-weak in 2020 :)\n> \n> It's not like it's been unmaintained since 1993... Last update was in 2019 from the looks of it.\n\nAs far as I can tell the fixes since 1993 have been of the type ""plug this implementation flaw"" rather than modernising the definition of w",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-578994606,578994606,
luke-jr,2020-01-28 04:41:47,It doesn't look like bullying in context... but we're getting off on a tangent here,https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-579077219,579077219,
luke-jr,2020-01-28 04:47:04,"On another note: wallet encryption is significantly different from other cases where one has a password. It mainly only protects against people sitting at your PC for a few minutes - not against malware or remote crackers. The adversary is real humans, not automated password-cracking software.\n\nWith that in mind, it makes more sense to use a simple, easy to remember password, NOT one with high",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-579078292,579078292,
luke-jr,2020-02-03 23:53:34,"> As far as I can tell the fixes since 1993 have been of the type ""plug this implementation flaw"" rather than modernising the definition of what constitutes a weak/non-weak password. \n\nIn any case, 1993 standards are probably still better than any simple algorithm we throw together here.\n\nAlso stumbled across libpwquality, which is BSD-licensed and slightly newer (2011?).\n\n(None of thi",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-581676009,581676009,
emilengler,2020-02-04 09:46:13,"I will have a look at these libraries but I'm a bit curious about how we should include them.\n\n1. Make a subtree and include it staticly into the source\n2. Add a dependency and check for it with the build system\n\nAnyway I still think that these two feature might be a bit to overkill for a small GUI feature though.",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-581825252,581825252,
laanwj,2020-02-05 13:47:21,"> Concept ACK, but I strongly disagree with the chosen policies about passwords. For example, a sufficiently long passphrase of chosen lowercase-only words can be extremely high in entropy, but would be classified as ""weak"" here. It'd would be highly unfortunate to discourage good practices.\n\nExactly. weak concept-ACK, but what exactly constitutes a strong password is a common topic of heated ",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-582414946,582414946,
emilengler,2020-02-05 15:41:29,"> Exactly. weak concept-ACK, but what exactly constitutes a strong password is a common topic of heated discussion and bound to be controversial.\n\nI agree on this point. I plan on re-doing the password strength measure this weekend with more advanced checks. I'm still curios if we should add a dict (using the OS dict file) to check for words in passwords",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-582468765,582468765,
luke-jr,2020-02-05 17:40:59,"If we're doing this, a library should be a dependency, but can be an optional feature omitted when not available.\n\nIt's possible no library exists for the criteria we want, though, since we're outside the norm in that regard.\n\nAn ideal wallet passphrase probably *should* use only dictionary words, for example.",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-582525741,582525741,
jonasschnelli,2020-02-06 19:54:58,"Todays IRC meeting discussions on this topic:\n\n```html\n[20:35:16]  <wumpus>	#topic the library for #17950 (emilengler)\n[20:35:18]  <gribble>	https://github.com/bitcoin/bitcoin/issues/17950 | gui: Check the strength of an encryption password by emilengler · Pull Request #17950 · bitcoin/bitcoin · GitHub\n[20:35:33]  <wumpus>	I *really* do not like introducing a dependency for this\n[20:35",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-583081308,583081308,
DrahtBot,2020-03-03 05:01:40,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-593768827,593768827,
fanquake,2020-07-15 06:52:53,"If this is followed-up on, I'm going to suggest re-opening in the new gui repo: https://github.com/bitcoin-core/gui. \n\nI'm in agreement with others that adding a new dependency for this doesn't seem like a great idea. As was also alluded too above, this is the kind of change that is open for plenty of bike-shedding in regards to password strength etc, so ideally we wouldn't be spending lots of",https://github.com/bitcoin/bitcoin/pull/17950#issuecomment-658581763,658581763,
promag,2020-01-17 17:24:26,should clear the label?,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368049639,368049639,src/qt/askpassphrasedialog.cpp
promag,2020-01-17 17:37:54,this should be `updatePasswordStrengthIndicator` or similar.,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368055023,368055023,src/qt/askpassphrasedialog.cpp
promag,2020-01-17 17:39:59,Move to .cpp and just forward declare QLineEdit.,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368055778,368055778,src/qt/askpassphrasedialog.h
emilengler,2020-01-17 20:46:22,"Yes, thanks will add this",https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368129308,368129308,src/qt/askpassphrasedialog.cpp
emilengler,2020-01-17 20:50:08,It is required in this file because of `QLineEdit` is a parameter of `updatePasswordStrengthIndicator`,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368130647,368130647,src/qt/askpassphrasedialog.h
promag,2020-01-17 21:18:53,"It's a pointer to QLineEdit, the compiler doesn't need the definition so a forward declaration is enough.",https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368140527,368140527,src/qt/askpassphrasedialog.h
kristapsk,2020-01-18 11:24:30,"I agree with @promag here, it's already done this way with `WalletModel` in the same files.",https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368221928,368221928,src/qt/askpassphrasedialog.h
emilengler,2020-01-18 13:34:42,But the `updatePasswordStrengthIndicator` needs access to the `ui` variable. I could give it over a parameter the current solution is more elegant IMO,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368227243,368227243,src/qt/askpassphrasedialog.h
paymog,2020-01-18 20:38:28,"should we add digit checks too? Seems like right now we only consider lowercase, uppercase, special characters and length.",https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368247331,368247331,src/qt/askpassphrasedialog.cpp
promag,2020-01-18 22:01:32,"Right, so instead of this:\n```cpp\nthis->updatePasswordStrengthIndicator(ui->passEdit2);\n```\njust do\n```cpp\n// receive password as const QString&\nthis->updatePasswordStrengthIndicator(ui->passEdit2->text());\n```\nor \n```cpp\n// access ui->passEdit2 directly\nthis->updatePasswordStrengthIndicator(); \n```\nand in either cases you should add `#include <QLineEdit>` in src/qt/ask",https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368251005,368251005,src/qt/askpassphrasedialog.h
emilengler,2020-01-19 07:49:24,Thanks will add this later,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368273163,368273163,src/qt/askpassphrasedialog.cpp
hebasto,2020-01-20 05:48:26,Here and after `this->` seems redundant.,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368378088,368378088,src/qt/askpassphrasedialog.cpp
hebasto,2020-01-20 05:53:08,style nit: `QLineEdit* lineedit`,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368378828,368378828,src/qt/askpassphrasedialog.cpp
hebasto,2020-01-20 06:00:18,`pass.empty()` ?,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368380036,368380036,src/qt/askpassphrasedialog.cpp
hebasto,2020-01-20 06:02:39,Could `10` be a named constant?,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368380449,368380449,src/qt/askpassphrasedialog.cpp
hebasto,2020-01-20 06:03:30,Comment is inconsistent with code.,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368380600,368380600,src/qt/askpassphrasedialog.cpp
elichai,2020-01-20 09:41:31,"nit 10, not 8",https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368449483,368449483,src/qt/askpassphrasedialog.cpp
emilengler,2020-01-20 11:08:56,hebasto already mentioned it. Will update it,https://github.com/bitcoin/bitcoin/pull/17950#discussion_r368491558,368491558,src/qt/askpassphrasedialog.cpp
