[
  {
    "sha": "7cd069d8ef900c6c6b904ddd6fbd64e14bd0f53e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2QwNjlkOGVmOTAwYzZjNmI5MDRkZGQ2ZmJkNjRlMTRiZDBmNTNl",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2019-08-07T14:07:03Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2019-08-13T15:04:10Z"
      },
      "message": "Add test for AddTimeData",
      "tree": {
        "sha": "09ccfad8a825e2a469e935ca0447b2860edef19d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09ccfad8a825e2a469e935ca0447b2860edef19d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cd069d8ef900c6c6b904ddd6fbd64e14bd0f53e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd069d8ef900c6c6b904ddd6fbd64e14bd0f53e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cd069d8ef900c6c6b904ddd6fbd64e14bd0f53e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cd069d8ef900c6c6b904ddd6fbd64e14bd0f53e/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5fdda68c6d2313edb74443f0d1e6d2ce2d97f5e"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 64,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7b00222ab7688f7fcec2e55f13848f7a3c6968e7",
        "filename": "src/test/timedata_tests.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 1,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cd069d8ef900c6c6b904ddd6fbd64e14bd0f53e/src/test/timedata_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cd069d8ef900c6c6b904ddd6fbd64e14bd0f53e/src/test/timedata_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/timedata_tests.cpp?ref=7cd069d8ef900c6c6b904ddd6fbd64e14bd0f53e",
        "patch": "@@ -2,8 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n-#include <timedata.h>\n+\n+#include <netaddress.h>\n+#include <noui.h>\n #include <test/setup_common.h>\n+#include <timedata.h>\n+#include <warnings.h>\n+\n+#include <string>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -34,4 +40,61 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n     BOOST_CHECK_EQUAL(filter.median(), 7);\n }\n \n+static void MultiAddTimeData(int n, int64_t offset)\n+{\n+    static int cnt = 0;\n+    for (int i = 0; i < n; ++i) {\n+        CNetAddr addr;\n+        addr.SetInternal(std::to_string(++cnt));\n+        AddTimeData(addr, offset);\n+    }\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(addtimedata)\n+{\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), 0);\n+\n+    //Part 1: Add large offsets to test a warning message that our clock may be wrong.\n+    MultiAddTimeData(3, DEFAULT_MAX_TIME_ADJUSTMENT + 1);\n+    // Filter size is 1 + 3 = 4: It is always initialized with a single element (offset 0)\n+\n+    noui_suppress();\n+    MultiAddTimeData(1, DEFAULT_MAX_TIME_ADJUSTMENT + 1); //filter size 5\n+    noui_reconnect();\n+\n+    BOOST_CHECK(GetWarnings(\"gui\").find(\"clock is wrong\") != std::string::npos);\n+\n+    // nTimeOffset is not changed if the median of offsets exceeds DEFAULT_MAX_TIME_ADJUSTMENT\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), 0);\n+\n+    // Part 2: Test positive and negative medians by adding more offsets\n+    MultiAddTimeData(4, 100); // filter size 9\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), 100);\n+    MultiAddTimeData(10, -100); //filter size 19\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), -100);\n+\n+    // Part 3: Test behaviour when filter has reached maximum number of offsets\n+    const int MAX_SAMPLES = 200;\n+    int nfill = (MAX_SAMPLES - 3 - 19) / 2; //89\n+    MultiAddTimeData(nfill, 100);\n+    MultiAddTimeData(nfill, -100); //filter size MAX_SAMPLES - 3\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), -100);\n+\n+    MultiAddTimeData(2, 100);\n+    //filter size MAX_SAMPLES -1, median is the initial 0 offset\n+    //since we added same number of positive/negative offsets\n+\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), 0);\n+\n+    // After the number of offsets has reached MAX_SAMPLES -1 (=199), nTimeOffset will never change\n+    // because it is only updated when the number of elements in the filter becomes odd. It was decided\n+    // not to fix this because it prevents possible attacks. See the comment in AddTimeData() or issue #4521\n+    // for a more detailed explanation.\n+    MultiAddTimeData(2, 100); // filter median is 100 now, but nTimeOffset will not change\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), 0);\n+\n+    // We want this test to end with nTimeOffset==0, otherwise subsequent tests of the suite will fail.\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]