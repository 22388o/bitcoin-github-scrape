[
  {
    "sha": "1c06aa98c63fff02679d446588fad06ae8cd706f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzA2YWE5OGM2M2ZmZjAyNjc5ZDQ0NjU4OGZhZDA2YWU4Y2Q3MDZm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-07T01:40:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-07T01:43:55Z"
      },
      "message": "Always print full hashes (tx, block, inv)",
      "tree": {
        "sha": "505b78cebe55e09d00d54521c434cc0af2397165",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/505b78cebe55e09d00d54521c434cc0af2397165"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c06aa98c63fff02679d446588fad06ae8cd706f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c06aa98c63fff02679d446588fad06ae8cd706f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c06aa98c63fff02679d446588fad06ae8cd706f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c06aa98c63fff02679d446588fad06ae8cd706f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab806a69a23c47e75821aa8a1fcd8d7f9e32999e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab806a69a23c47e75821aa8a1fcd8d7f9e32999e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab806a69a23c47e75821aa8a1fcd8d7f9e32999e"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 44,
      "deletions": 54
    },
    "files": [
      {
        "sha": "ddf7797f9b29180391bf75f984d0a0c1543aab1b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 29,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c06aa98c63fff02679d446588fad06ae8cd706f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c06aa98c63fff02679d446588fad06ae8cd706f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1c06aa98c63fff02679d446588fad06ae8cd706f",
        "patch": "@@ -297,7 +297,7 @@ bool AddOrphanTx(const CDataStream& vMsg)\n     // at most 500 megabytes of orphans:\n     if (pvMsg->size() > 5000)\n     {\n-        printf(\"ignoring large orphan tx (size: %\"PRIszu\", hash: %s)\\n\", pvMsg->size(), hash.ToString().substr(0,10).c_str());\n+        printf(\"ignoring large orphan tx (size: %\"PRIszu\", hash: %s)\\n\", pvMsg->size(), hash.ToString().c_str());\n         delete pvMsg;\n         return false;\n     }\n@@ -306,7 +306,7 @@ bool AddOrphanTx(const CDataStream& vMsg)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         mapOrphanTransactionsByPrev[txin.prevout.hash].insert(make_pair(hash, pvMsg));\n \n-    printf(\"stored orphan tx %s (mapsz %\"PRIszu\")\\n\", hash.ToString().substr(0,10).c_str(),\n+    printf(\"stored orphan tx %s (mapsz %\"PRIszu\")\\n\", hash.ToString().c_str(),\n         mapOrphanTransactions.size());\n     return true;\n }\n@@ -770,7 +770,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!tx.CheckInputs(state, view, true, SCRIPT_VERIFY_P2SH))\n         {\n-            return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n+            return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().c_str());\n         }\n     }\n \n@@ -792,7 +792,7 @@ bool CTxMemPool::accept(CValidationState &state, CTransaction &tx, bool fCheckIn\n     SyncWithWallets(hash, tx, NULL, true);\n \n     printf(\"CTxMemPool::accept() : accepted %s (poolsz %\"PRIszu\")\\n\",\n-           hash.ToString().substr(0,10).c_str(),\n+           hash.ToString().c_str(),\n            mapTx.size());\n     return true;\n }\n@@ -1198,11 +1198,11 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n         uiInterface.NotifyBlocksChanged();\n     }\n     printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s  date=%s\\n\",\n-      BlockHashStr(pindexNew->GetBlockHash()).c_str(), pindexNew->nHeight,\n+      pindexNew->GetBlockHash().ToString().c_str(), pindexNew->nHeight,\n       pindexNew->bnChainWork.ToString().c_str(), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n       pindexNew->GetBlockTime()).c_str());\n     printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s  date=%s\\n\",\n-      BlockHashStr(hashBestChain).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n+      hashBestChain.ToString().c_str(), nBestHeight, bnBestChainWork.ToString().c_str(),\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n     if (pindexBest && bnBestInvalidWork > bnBestChainWork + pindexBest->GetBlockWork() * 6)\n         printf(\"InvalidChainFound: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.\\n\");\n@@ -1366,7 +1366,7 @@ bool CTransaction::HaveInputs(CCoinsViewCache &inputs) const\n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags, nHashType))\n-        return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString().substr(0,10).c_str());\n+        return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString().c_str());\n     return true;\n }\n \n@@ -1385,7 +1385,7 @@ bool CTransaction::CheckInputs(CValidationState &state, CCoinsViewCache &inputs,\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!HaveInputs(inputs))\n-            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", GetHash().ToString().substr(0,10).c_str()));\n+            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", GetHash().ToString().c_str()));\n \n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n@@ -1411,12 +1411,12 @@ bool CTransaction::CheckInputs(CValidationState &state, CCoinsViewCache &inputs,\n         }\n \n         if (nValueIn < GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", GetHash().ToString().substr(0,10).c_str()));\n+            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", GetHash().ToString().c_str()));\n \n         // Tally transaction fees\n         int64 nTxFee = nValueIn - GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", GetHash().ToString().substr(0,10).c_str()));\n+            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", GetHash().ToString().c_str()));\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n             return state.DoS(100, error(\"CheckInputs() : nFees out of range\"));\n@@ -1750,8 +1750,8 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     reverse(vConnect.begin(), vConnect.end());\n \n     if (vDisconnect.size() > 0) {\n-        printf(\"REORGANIZE: Disconnect %\"PRIszu\" blocks; %s..%s\\n\", vDisconnect.size(), BlockHashStr(pfork->GetBlockHash()).c_str(), BlockHashStr(pindexBest->GetBlockHash()).c_str());\n-        printf(\"REORGANIZE: Connect %\"PRIszu\" blocks; %s..%s\\n\", vConnect.size(), BlockHashStr(pfork->GetBlockHash()).c_str(), BlockHashStr(pindexNew->GetBlockHash()).c_str());\n+        printf(\"REORGANIZE: Disconnect %\"PRIszu\" blocks; %s..\\n\", vDisconnect.size(), pfork->GetBlockHash().ToString().c_str());\n+        printf(\"REORGANIZE: Connect %\"PRIszu\" blocks; ..%s\\n\", vConnect.size(), pindexNew->GetBlockHash().ToString().c_str());\n     }\n \n     // Disconnect shorter branch\n@@ -1762,7 +1762,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n             return state.Abort(_(\"Failed to read block\"));\n         int64 nStart = GetTimeMicros();\n         if (!block.DisconnectBlock(state, pindex, view))\n-            return error(\"SetBestBlock() : DisconnectBlock %s failed\", BlockHashStr(pindex->GetBlockHash()).c_str());\n+            return error(\"SetBestBlock() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().c_str());\n         if (fBenchmark)\n             printf(\"- Disconnect: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n \n@@ -1786,7 +1786,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n                 InvalidChainFound(pindexNew);\n                 InvalidBlockFound(pindex);\n             }\n-            return error(\"SetBestBlock() : ConnectBlock %s failed\", BlockHashStr(pindex->GetBlockHash()).c_str());\n+            return error(\"SetBestBlock() : ConnectBlock %s failed\", pindex->GetBlockHash().ToString().c_str());\n         }\n         if (fBenchmark)\n             printf(\"- Connect: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n@@ -1862,7 +1862,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     nTimeBestReceived = GetTime();\n     nTransactionsUpdated++;\n     printf(\"SetBestChain: new best=%s  height=%d  work=%s  tx=%lu  date=%s  progress=%f\\n\",\n-      BlockHashStr(hashBestChain).c_str(), nBestHeight, bnBestChainWork.ToString().c_str(), (unsigned long)pindexNew->nChainTx,\n+      hashBestChain.ToString().c_str(), nBestHeight, bnBestChainWork.ToString().c_str(), (unsigned long)pindexNew->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str(),\n       Checkpoints::GuessVerificationProgress(pindexBest));\n \n@@ -1901,7 +1901,7 @@ bool CBlock::AddToBlockIndex(CValidationState &state, const CDiskBlockPos &pos)\n     // Check for duplicate\n     uint256 hash = GetHash();\n     if (mapBlockIndex.count(hash))\n-        return state.Invalid(error(\"AddToBlockIndex() : %s already exists\", BlockHashStr(hash).c_str()));\n+        return state.Invalid(error(\"AddToBlockIndex() : %s already exists\", hash.ToString().c_str()));\n \n     // Construct new block index object\n     CBlockIndex* pindexNew = new CBlockIndex(*this);\n@@ -2222,9 +2222,9 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n     if (mapBlockIndex.count(hash))\n-        return state.Invalid(error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, BlockHashStr(hash).c_str()));\n+        return state.Invalid(error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString().c_str()));\n     if (mapOrphanBlocks.count(hash))\n-        return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", BlockHashStr(hash).c_str()));\n+        return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString().c_str()));\n \n     // Preliminary checks\n     if (!pblock->CheckBlock(state))\n@@ -2253,7 +2253,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     // If we don't already have its previous block, shunt it off to holding area until we get it\n     if (pblock->hashPrevBlock != 0 && !mapBlockIndex.count(pblock->hashPrevBlock))\n     {\n-        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", BlockHashStr(pblock->hashPrevBlock).c_str());\n+        printf(\"ProcessBlock: ORPHAN BLOCK, prev=%s\\n\", pblock->hashPrevBlock.ToString().c_str());\n \n         // Accept orphans as long as there is a node to request its parents from\n         if (pfrom) {\n@@ -2589,7 +2589,7 @@ bool static LoadBlockIndexDB()\n          pindex = pindexPrev;\n     }\n     printf(\"LoadBlockIndexDB(): hashBestChain=%s  height=%d date=%s\\n\",\n-        BlockHashStr(hashBestChain).c_str(), nBestHeight,\n+        hashBestChain.ToString().c_str(), nBestHeight,\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexBest->GetBlockTime()).c_str());\n \n     return true;\n@@ -3426,20 +3426,20 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (pindex)\n             pindex = pindex->pnext;\n         int nLimit = 500;\n-        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), BlockHashStr(hashStop).c_str(), nLimit);\n+        printf(\"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().c_str(), nLimit);\n         for (; pindex; pindex = pindex->pnext)\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n-                printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, BlockHashStr(pindex->GetBlockHash()).c_str());\n+                printf(\"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n                 break;\n             }\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n             if (--nLimit <= 0)\n             {\n                 // When this block is requested, we'll send an inv that'll make them\n                 // getblocks the next batch of inventory.\n-                printf(\"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, BlockHashStr(pindex->GetBlockHash()).c_str());\n+                printf(\"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString().c_str());\n                 pfrom->hashContinue = pindex->GetBlockHash();\n                 break;\n             }\n@@ -3473,7 +3473,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         vector<CBlock> vHeaders;\n         int nLimit = 2000;\n-        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), BlockHashStr(hashStop).c_str());\n+        printf(\"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString().c_str());\n         for (; pindex; pindex = pindex->pnext)\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n@@ -3522,7 +3522,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n                     if (tx.AcceptToMemoryPool(stateDummy, true, true, &fMissingInputs2))\n                     {\n-                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+                        printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().c_str());\n                         RelayTransaction(tx, inv.hash, vMsg);\n                         mapAlreadyAskedFor.erase(inv);\n                         vWorkQueue.push_back(inv.hash);\n@@ -3532,7 +3532,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     {\n                         // invalid or too-little-fee orphan\n                         vEraseQueue.push_back(inv.hash);\n-                        printf(\"   removed orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+                        printf(\"   removed orphan tx %s\\n\", inv.hash.ToString().c_str());\n                     }\n                 }\n             }\n@@ -3560,7 +3560,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         CBlock block;\n         vRecv >> block;\n \n-        printf(\"received block %s\\n\", BlockHashStr(block.GetHash()).c_str());\n+        printf(\"received block %s\\n\", block.GetHash().ToString().c_str());\n         // block.print();\n \n         CInv inv(MSG_BLOCK, block.GetHash());\n@@ -4107,9 +4107,9 @@ class COrphan\n     void print() const\n     {\n         printf(\"COrphan(hash=%s, dPriority=%.1f, dFeePerKb=%.1f)\\n\",\n-               ptx->GetHash().ToString().substr(0,10).c_str(), dPriority, dFeePerKb);\n+               ptx->GetHash().ToString().c_str(), dPriority, dFeePerKb);\n         BOOST_FOREACH(uint256 hash, setDependsOn)\n-            printf(\"   setDependsOn %s\\n\", hash.ToString().substr(0,10).c_str());\n+            printf(\"   setDependsOn %s\\n\", hash.ToString().c_str());\n     }\n };\n "
      },
      {
        "sha": "83d98638ce016280ff94de4c36b6dd6d4d979492",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c06aa98c63fff02679d446588fad06ae8cd706f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c06aa98c63fff02679d446588fad06ae8cd706f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1c06aa98c63fff02679d446588fad06ae8cd706f",
        "patch": "@@ -195,11 +195,6 @@ bool AbortNode(const std::string &msg);\n \n \n \n-static inline std::string BlockHashStr(const uint256& hash)\n-{\n-    return hash.ToString();\n-}\n-\n bool GetWalletFile(CWallet* pwallet, std::string &strWalletFileOut);\n \n struct CDiskBlockPos\n@@ -301,7 +296,7 @@ class COutPoint\n \n     std::string ToString() const\n     {\n-        return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10).c_str(), n);\n+        return strprintf(\"COutPoint(%s, %u)\", hash.ToString().c_str(), n);\n     }\n \n     void print() const\n@@ -635,7 +630,7 @@ class CTransaction\n     {\n         std::string str;\n         str += strprintf(\"CTransaction(hash=%s, ver=%d, vin.size=%\"PRIszu\", vout.size=%\"PRIszu\", nLockTime=%u)\\n\",\n-            GetHash().ToString().substr(0,10).c_str(),\n+            GetHash().ToString().c_str(),\n             nVersion,\n             vin.size(),\n             vout.size(),\n@@ -1472,10 +1467,10 @@ class CBlock : public CBlockHeader\n     void print() const\n     {\n         printf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%\"PRIszu\")\\n\",\n-            BlockHashStr(GetHash()).c_str(),\n+            GetHash().ToString().c_str(),\n             nVersion,\n-            BlockHashStr(hashPrevBlock).c_str(),\n-            hashMerkleRoot.ToString().substr(0,10).c_str(),\n+            hashPrevBlock.ToString().c_str(),\n+            hashMerkleRoot.ToString().c_str(),\n             nTime, nBits, nNonce,\n             vtx.size());\n         for (unsigned int i = 0; i < vtx.size(); i++)\n@@ -1485,7 +1480,7 @@ class CBlock : public CBlockHeader\n         }\n         printf(\"  vMerkleTree: \");\n         for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n-            printf(\"%s \", vMerkleTree[i].ToString().substr(0,10).c_str());\n+            printf(\"%s \", vMerkleTree[i].ToString().c_str());\n         printf(\"\\n\");\n     }\n \n@@ -1785,8 +1780,8 @@ class CBlockIndex\n     {\n         return strprintf(\"CBlockIndex(pprev=%p, pnext=%p, nHeight=%d, merkle=%s, hashBlock=%s)\",\n             pprev, pnext, nHeight,\n-            hashMerkleRoot.ToString().substr(0,10).c_str(),\n-            BlockHashStr(GetBlockHash()).c_str());\n+            hashMerkleRoot.ToString().c_str(),\n+            GetBlockHash().ToString().c_str());\n     }\n \n     void print() const\n@@ -1867,7 +1862,7 @@ class CDiskBlockIndex : public CBlockIndex\n         str += CBlockIndex::ToString();\n         str += strprintf(\"\\n                hashBlock=%s, hashPrev=%s)\",\n             GetBlockHash().ToString().c_str(),\n-            BlockHashStr(hashPrev).c_str());\n+            hashPrev.ToString().c_str());\n         return str;\n     }\n "
      },
      {
        "sha": "88bbe49afd5a67a5e39bc9c99951b16ac2943557",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c06aa98c63fff02679d446588fad06ae8cd706f/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c06aa98c63fff02679d446588fad06ae8cd706f/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=1c06aa98c63fff02679d446588fad06ae8cd706f",
        "patch": "@@ -142,12 +142,7 @@ const char* CInv::GetCommand() const\n \n std::string CInv::ToString() const\n {\n-    if (type == MSG_BLOCK)\n-        return strprintf(\"%s %s\", GetCommand(), BlockHashStr(hash).c_str());\n-    if (type == MSG_TX)\n-        return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,10).c_str());\n-\n-    return strprintf(\"%s %s\", GetCommand(), hash.ToString().substr(0,20).c_str());\n+    return strprintf(\"%s %s\", GetCommand(), hash.ToString().c_str());\n }\n \n void CInv::print() const"
      },
      {
        "sha": "e150a5035da7679ec0321709032bc5faec2dc393",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c06aa98c63fff02679d446588fad06ae8cd706f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c06aa98c63fff02679d446588fad06ae8cd706f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1c06aa98c63fff02679d446588fad06ae8cd706f",
        "patch": "@@ -420,7 +420,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                 }\n                 else\n                     printf(\"AddToWallet() : found %s in block %s not in index\\n\",\n-                           wtxIn.GetHash().ToString().substr(0,10).c_str(),\n+                           wtxIn.GetHash().ToString().c_str(),\n                            wtxIn.hashBlock.ToString().c_str());\n             }\n         }\n@@ -449,7 +449,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         }\n \n         //// debug print\n-        printf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString().substr(0,10).c_str(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n+        printf(\"AddToWallet %s  %s%s\\n\", wtxIn.GetHash().ToString().c_str(), (fInsertedNew ? \"new\" : \"\"), (fUpdated ? \"update\" : \"\"));\n \n         // Write to disk\n         if (fInsertedNew || fUpdated)\n@@ -845,7 +845,7 @@ void CWalletTx::RelayWalletTransaction()\n     {\n         if (GetDepthInMainChain() == 0) {\n             uint256 hash = GetHash();\n-            printf(\"Relaying wtx %s\\n\", hash.ToString().substr(0,10).c_str());\n+            printf(\"Relaying wtx %s\\n\", hash.ToString().c_str());\n             RelayTransaction((CTransaction)*this, hash);\n         }\n     }"
      },
      {
        "sha": "2e007557b054188693b5192cd7b53b09c6a7497a",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c06aa98c63fff02679d446588fad06ae8cd706f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c06aa98c63fff02679d446588fad06ae8cd706f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1c06aa98c63fff02679d446588fad06ae8cd706f",
        "patch": "@@ -704,7 +704,7 @@ class COutput\n \n     std::string ToString() const\n     {\n-        return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString().substr(0,10).c_str(), i, nDepth, FormatMoney(tx->vout[i].nValue).c_str());\n+        return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString().c_str(), i, nDepth, FormatMoney(tx->vout[i].nValue).c_str());\n     }\n \n     void print() const"
      },
      {
        "sha": "81a21443a120356ad5e4f661dd0faa63cf1e0dc0",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c06aa98c63fff02679d446588fad06ae8cd706f/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c06aa98c63fff02679d446588fad06ae8cd706f/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=1c06aa98c63fff02679d446588fad06ae8cd706f",
        "patch": "@@ -240,7 +240,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n             //    wtx.vout[0].nValue,\n             //    DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n-            //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n+            //    wtx.hashBlock.ToString().c_str(),\n             //    wtx.mapValue[\"message\"].c_str());\n         }\n         else if (strType == \"acentry\")"
      }
    ]
  }
]