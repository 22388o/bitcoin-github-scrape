MarcoFalke,2018-05-02T12:34:45Z,"Could you please add a benchmark to `./src/bench/checkblock.cpp`, so it is easier to see how much this improves?",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-385962450,385962450,
laanwj,2018-05-02T12:38:10Z,"Sure, though I'm not sure how to do that; none of the benches actually uses `ReadBlockFromDisk`, I would have to set up a fake block index or such.\n\n(I also don't think it will work on `block413567` as-is because it has no magic/size header, and is not a file on disk, though it's easy enough to write a temporary file of course). [When doing this from memory there's effectively nothing to bench",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-385963284,385963284,
MarcoFalke,2018-05-02T14:24:32Z,Concept ACK. Would be nice to see how much the additional savings are on top of #13098.,https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-385995721,385995721,
laanwj,2018-05-02T14:28:32Z,"> Concept ACK. Would be nice to see how much the additional savings are on top of #13098.\n\nAt least it's a lot simpler.",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-385997120,385997120,
laanwj,2018-05-02T16:25:11Z,"> Couldn't we serve corrupted blocks?\n\nYes, that's a possibility, though only if the underlying storage is corrupted. I've posited the idea to add a CRC32C to the on-disk blocks at some point (which is quick to verify, especially with specialized instructions, and should protect against accidental corruptions), but that's quite an invasive change. It's something that could be done later.\n\n",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-386037456,386037456,
MarcoFalke,2018-05-02T16:46:20Z,"> The only option to verify with the current information would be to do a Merkle tree check\n\nI don't see that we currently do this, so it wouldn't make anything worse here.",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-386043952,386043952,
gmaxwell,2018-05-02T17:53:29Z,"I think serving a corrupted block if our state is corrupted is fine, the peer will just disconnect us and go get the block from someone else, seems pretty harmless!\n\nThis is a much smaller change than I was expecting-- in particular I forgot there was a size, light review ACK. ",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-386064649,386064649,
jonasschnelli,2018-05-03T06:44:11Z,"utACK 4c790dff7481d1464a906ad6b17a3179a7da3431\n\nThis would probably also speedup an external indexing daemon via p2p (see experiment in https://github.com/jonasschnelli/bitcoincore-indexd [**very WIP**])\n\nHere a flamegraph of serving the first 200k blocks via p2p localhost (though the real deser/ser starts probably at higher up in the chain).",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-386204255,386204255,
laanwj,2018-05-03T08:49:25Z,"OK, thanks for review everyone, removed WIP tag and pushed commits with the following changes:\n- Remove extraneous debug log message\n- Check nSize against MAX_SIZE\n- Move deserialization of msg_start_in, and size into exception try\n- Improved variable and parameter naming\n\nWill squash if no further issues.\n\n> This would probably also speedup an external indexing daemon via p2p (see",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-386229535,386229535,
MarcoFalke,2018-05-04T00:33:55Z,"Running with e0223ebf0c58f7beedea91df48e9586154cd4436 and just looking at the wall clock time for reading+optional deserialization shows for me on an ssd:\n\n![ssd](https://user-images.githubusercontent.com/6399679/39608643-e4666006-4f10-11e8-8f98-4de0b2765f16.png)\n\nEdit: Note that this was done with full fake blocks and not real blocks from the network.\n\n",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-386476909,386476909,
laanwj,2018-05-04T15:53:25Z,"Thanks for benchmarking @MarcoFalke.\n\nI used [a patched version](https://github.com/laanwj/bitcoincore-indexd/tree/bench) of @jonasschnelli's bitcoincore-indexd to benchmark the time for fetching block 0..473600 through P2P, with no processing client-side. The result is:\n```\nWith patch:\nreal    63m51.273s\n\nWithout patch:\nreal    70m28.956s\n```\n10% speedup. And in my case is the",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-386644732,386644732,
jonasschnelli,2018-05-07T15:10:18Z,"Did 10 rounds of requesting blocks in range 490'000 up to 500'000 on master and got.\nSetup:\n- Non VM machine\n- SSD 1400MB/s\n- Intel(R) Xeon(R) CPU E3-1275 v5 @ 3.60GHz\n- txindex was enabled\n- connect=0 --whitebind=127.0.0.1:8333\n- no other resource intense applications where running on that system\n- used a modified version of `https://github.com/laanwj/bitcoincore-indexd`\n\n### ",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-387096890,387096890,
laanwj,2018-05-09T05:35:34Z,"@jonasschnelli That's really strange. As reported, I did see some actual speed-ups where using this.\nMaybe someone else can try some measurements, or we should just close, I don't know.",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-387625250,387625250,
jonasschnelli,2018-05-09T08:47:31Z,"If someone wants to compare master against this PR built in the same environment:\n\nPR: https://bitcoin.jonasschnelli.ch/build/600\nmaster: https://bitcoin.jonasschnelli.ch/build/599",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-387668563,387668563,
MarcoFalke,2018-05-09T18:12:05Z,"I updated my benchmark to also include the time it takes to `Make` (serialize) the net message:\n\n![net message serialization times](https://user-images.githubusercontent.com/6399679/39831568-e6e2cda2-5392-11e8-9fb0-784b4052d2fe.png)\n\n",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-387827645,387827645,
MarcoFalke,2018-05-09T18:15:29Z,"I think we should definitively look into why it is *slower* to sync, since that indicates a problem (potentially in our code) exists elsewhere.",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-387828680,387828680,
laanwj,2018-05-13T17:45:40Z,"I did the same experiment as @jonasschnelli, a modified `bitcoincore-indexd` that requests block 490000..500000 (https://github.com/laanwj/bitcoincore-indexd/tree/bench). Tried both cases 5 times;\n```\nwith patch:\nreal    0m55.928s\nreal    0m55.986s\nreal    0m55.913s\nreal    0m55.844s\nreal    0m55.790s\n\nwithout patch (using the commit before):\nreal    2m47.673s\nreal    2m46.32",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-388643795,388643795,
jonasschnelli,2018-05-14T15:19:01Z,"I think this is a clear benefit for spinning disk and probably also for ssd in non absurd localhost cases.\n\nutACK\n\n",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-388855548,388855548,
MarcoFalke,2018-05-14T15:27:19Z,@jonasschnelli Did you have a chance to look into why your result was unexpected?,https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-388858562,388858562,
jonasschnelli,2018-05-14T15:40:19Z,@Marcofalke: no. I haven't but I'm willing to do as soon as someone could confirm my results (SSD test).,https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-388863028,388863028,
MarcoFalke,2018-05-14T16:04:55Z,"Sure, will do\n\nOn Mon, May 14, 2018, 11:41 Jonas Schnelli <notifications@github.com> wrote:\n\n> @MarcoFalke <https://github.com/MarcoFalke>: no. I haven't but I'm\n> willing to do as soon as someone could confirm my results (SSD test).\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/1315",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-388871401,388871401,
MarcoFalke,2018-05-14T21:04:56Z,"For clarity: 598db means master@598db and 9893e means this pull request. I used @laanwj's branch of bitcoincore-indexd.\n\n![10k block fetch times 490k-500k](https://user-images.githubusercontent.com/6399679/40023302-9b7d7786-5798-11e8-84a6-1ec1ab632353.png)\n",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-388962412,388962412,
MarcoFalke,2018-05-14T21:06:28Z,"@jonasschnelli I coulnd't find the branch you were using. Mind to share, otherwise I can't reproduce?",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-388962821,388962821,
laanwj,2018-05-15T06:05:18Z,"Same experiment as https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-388643795 on i.MX6Q ARM board w/ USB2 spinning disk:\n```\nwith patch:\nreal    10m18.368s\nreal    11m14.600s\nreal    10m12.006s\nreal    10m21.668s\nreal    10m11.070s\n\nwithout patch (using the commit before):\nreal    27m30.574s\nreal    26m27.591s\nreal    25m38.311s\nreal    25m36.661s\nreal    25m4",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-389052920,389052920,
laanwj,2018-05-15T06:13:48Z,"squashed, no other changes --\n9893e712e9e04e8b9478e36e0b5d843899540bd2 → 0bf431870e45d8e20c4671e51a782ebf97b75fac",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-389054434,389054434,
jonasschnelli,2018-05-15T18:23:09Z,"I guess my setup was either faulty or there is a performance loss with that particular setup (>1000MB/s IO r&w on very fast CPUs).\nHowever, this PR is a clear and significant win!",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-389265594,389265594,
MarcoFalke,2018-05-15T18:57:47Z,"@jonasschnelli I can't explain why, but you might want to try to drop the files cached in memory with `sync && sudo sh -c 'echo 3 > /proc/sys/vm/drop_caches'`. For me this was *speeding up* the sync on an ssd.",https://github.com/bitcoin/bitcoin/pull/13151#issuecomment-389276281,389276281,
promag,2018-05-02T14:00:40Z,"Just to throw out the idea, `mmap` wouldn't pay off right?",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185505648,185505648,src/validation.cpp
laanwj,2018-05-02T14:07:09Z,"I don't think that's a win here, as the entire block is read consecutively - could even be slower as it'd have to create and destroy the mapping. Also it's not portable.",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185507798,185507798,src/validation.cpp
MarcoFalke,2018-05-02T14:23:43Z,"Shouldn't this compare against the serialization flags of the block on disk? Currently you are assuming that all blocks are serialized as witness blocks on disk, but this is not true for all ""early"" blocks. ",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185513478,185513478,src/net_processing.cpp
laanwj,2018-05-02T14:32:02Z,"Yes I'm not convinced this logic is correct. It seems to work, though, even for the initial blocks.\n\nEdit: What is the operation to convert from a non-witness block to witness block with no witnesses? I suppose this could still be done without a full round-trip?",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185516723,185516723,src/net_processing.cpp
sipa,2018-05-02T16:12:15Z,"@laanwj It's always correct to give the raw blocks we store to peers that ask for witnesses (even if the block does not have a witness).\n\nConverting extended format to basic format is a lot more complicated. You could have a special CTransaction which skips the witness fields instead of reading/deserializing them, but I don't see how to do it without going through some form of serialization code",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185553215,185553215,src/net_processing.cpp
laanwj,2018-05-02T16:22:47Z,"@sipa Thanks.\n\n> Converting extended format to basic format is a lot more complicated. You could have a special CTransaction which skips the witness fields instead of reading/deserializing them, but I don't see how to do it without going through some form of serialization code.\n\nRight, that case should fall back to deserialization->serialization right now. I don't think we can do much bett",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185556438,185556438,src/net_processing.cpp
TheBlueMatt,2018-05-02T19:49:45Z,Probably want to check the size is sane before we do this.,https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185618019,185618019,src/validation.cpp
MarcoFalke,2018-05-02T20:20:13Z,Should probably remove this debug logging,https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185626068,185626068,src/net_processing.cpp
MarcoFalke,2018-05-02T20:24:19Z,Leaving out the less common edge case (non-witness peers) seems fine for now.,https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185627336,185627336,src/net_processing.cpp
laanwj,2018-05-03T05:41:25Z,"Yes, definitely. I added it while WIP so that people testing this can be sure that the code actually triggers and they're testing the right thing.",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185700387,185700387,src/net_processing.cpp
laanwj,2018-05-03T05:42:59Z,"Good point. What constant would be appropriate here? \nEdit: I'll go with MAX_SIZE from serialize.h.",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185700508,185700508,src/validation.cpp
laanwj,2018-05-03T05:47:37Z,"~~Another thing I wondered here: what is the C++11 proper way to allocate a vector (or a RAII memory area) without zeroing it? I think that's unnecessary here.~~\nThat was a bad idea: even though we handle errors while reading, as this data is sent directly over P2P, zeroing is defense-in-depth against heartbleed-style issues here",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185700927,185700927,src/validation.cpp
laanwj,2018-05-03T08:25:23Z,I guess this deserialization logic should be within the try {}.,https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185725419,185725419,src/validation.cpp
sipa,2018-05-03T23:25:33Z,Nit: braces around then-branch if on a separate line.,https://github.com/bitcoin/bitcoin/pull/13151#discussion_r185962354,185962354,src/net_processing.cpp
promag,2018-05-07T13:39:41Z,"nit, space after catch `} catch (...`.",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r186425140,186425140,src/validation.cpp
promag,2018-05-07T13:43:20Z,"> Zeroing of memory is intentional \n\nWhy?",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r186426186,186426186,src/validation.cpp
laanwj,2018-05-07T14:01:55Z,To avoid heartbleed-type leaks as this data goes directly over the network.,https://github.com/bitcoin/bitcoin/pull/13151#discussion_r186431924,186431924,src/validation.cpp
sipa,2018-05-13T19:39:49Z,"Unsure if we care, but we could also check whether SegWit was active for the requested block, and if not, we can serve without deserialization even when witnesses are not requested.",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r187811270,187811270,src/net_processing.cpp
laanwj,2018-05-14T14:58:54Z,"@sipa Yes, that would be something that could be done here.",https://github.com/bitcoin/bitcoin/pull/13151#discussion_r187985516,187985516,src/net_processing.cpp
