[
  {
    "sha": "0bf431870e45d8e20c4671e51a782ebf97b75fac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmY0MzE4NzBlNDVkOGUyMGM0NjcxZTUxYTc4MmViZjk3Yjc1ZmFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-02T12:10:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-15T06:11:56Z"
      },
      "message": "net: Serve blocks directly from disk when possible\n\nIn `ProcessGetBlockData`, send the block data directly from disk if\ntype MSG_WITNESS_BLOCK is requested. This is a valid shortcut as the\non-disk format matches the network format.\n\nThis is expected to increase performance because a deserialization and\nsubsequent serialization roundtrip is avoided.",
      "tree": {
        "sha": "44e2e163ef3cffeb6af12a93293a964328b7a9dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44e2e163ef3cffeb6af12a93293a964328b7a9dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bf431870e45d8e20c4671e51a782ebf97b75fac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf431870e45d8e20c4671e51a782ebf97b75fac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bf431870e45d8e20c4671e51a782ebf97b75fac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bf431870e45d8e20c4671e51a782ebf97b75fac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "598db389c33e5e90783ef1223df2eeab095ed622",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598db389c33e5e90783ef1223df2eeab095ed622",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/598db389c33e5e90783ef1223df2eeab095ed622"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 107,
      "deletions": 47
    },
    "files": [
      {
        "sha": "2091f1da1faa78f2ef18af2d82393b9b4579405b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 47,
        "changes": 106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf431870e45d8e20c4671e51a782ebf97b75fac/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf431870e45d8e20c4671e51a782ebf97b75fac/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0bf431870e45d8e20c4671e51a782ebf97b75fac",
        "patch": "@@ -1070,12 +1070,13 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     bool send = false;\n     std::shared_ptr<const CBlock> a_recent_block;\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n     bool fWitnessesPresentInARecentCompactBlock;\n+    const Consensus::Params& consensusParams = chainparams.GetConsensus();\n     {\n         LOCK(cs_most_recent_block);\n         a_recent_block = most_recent_block;\n@@ -1142,60 +1143,71 @@ void static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensus\n         std::shared_ptr<const CBlock> pblock;\n         if (a_recent_block && a_recent_block->GetHash() == pindex->GetBlockHash()) {\n             pblock = a_recent_block;\n+        } else if (inv.type == MSG_WITNESS_BLOCK) {\n+            // Fast-path: in this case it is possible to serve the block directly from disk,\n+            // as the network format matches the format on disk\n+            std::vector<uint8_t> block_data;\n+            if (!ReadRawBlockFromDisk(block_data, pindex, chainparams.MessageStart())) {\n+                assert(!\"cannot load block from disk\");\n+            }\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, MakeSpan(block_data)));\n+            // Don't set pblock as we've sent the block\n         } else {\n             // Send block from disk\n             std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n             if (!ReadBlockFromDisk(*pblockRead, pindex, consensusParams))\n                 assert(!\"cannot load block from disk\");\n             pblock = pblockRead;\n         }\n-        if (inv.type == MSG_BLOCK)\n-            connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n-        else if (inv.type == MSG_WITNESS_BLOCK)\n-            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n-        else if (inv.type == MSG_FILTERED_BLOCK)\n-        {\n-            bool sendMerkleBlock = false;\n-            CMerkleBlock merkleBlock;\n+        if (pblock) {\n+            if (inv.type == MSG_BLOCK)\n+                connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n+            else if (inv.type == MSG_WITNESS_BLOCK)\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n+            else if (inv.type == MSG_FILTERED_BLOCK)\n             {\n-                LOCK(pfrom->cs_filter);\n-                if (pfrom->pfilter) {\n-                    sendMerkleBlock = true;\n-                    merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n+                bool sendMerkleBlock = false;\n+                CMerkleBlock merkleBlock;\n+                {\n+                    LOCK(pfrom->cs_filter);\n+                    if (pfrom->pfilter) {\n+                        sendMerkleBlock = true;\n+                        merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n+                    }\n+                }\n+                if (sendMerkleBlock) {\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                    // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                    // This avoids hurting performance by pointlessly requiring a round-trip\n+                    // Note that there is currently no way for a node to request any single transactions we didn't send here -\n+                    // they must either disconnect and retry or request the full block.\n+                    // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                    // however we MUST always provide at least what the remote peer needs\n+                    typedef std::pair<unsigned int, uint256> PairType;\n+                    for (PairType& pair : merkleBlock.vMatchedTxn)\n+                        connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n                 }\n+                // else\n+                    // no response\n             }\n-            if (sendMerkleBlock) {\n-                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n-                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n-                // This avoids hurting performance by pointlessly requiring a round-trip\n-                // Note that there is currently no way for a node to request any single transactions we didn't send here -\n-                // they must either disconnect and retry or request the full block.\n-                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n-                // however we MUST always provide at least what the remote peer needs\n-                typedef std::pair<unsigned int, uint256> PairType;\n-                for (PairType& pair : merkleBlock.vMatchedTxn)\n-                    connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n-            }\n-            // else\n-                // no response\n-        }\n-        else if (inv.type == MSG_CMPCT_BLOCK)\n-        {\n-            // If a peer is asking for old blocks, we're almost guaranteed\n-            // they won't have a useful mempool to match against a compact block,\n-            // and we don't feel like constructing the object for them, so\n-            // instead we respond with the full, non-compact block.\n-            bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n-            int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-            if (CanDirectFetch(consensusParams) && pindex->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n-                if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == pindex->GetBlockHash()) {\n-                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+            else if (inv.type == MSG_CMPCT_BLOCK)\n+            {\n+                // If a peer is asking for old blocks, we're almost guaranteed\n+                // they won't have a useful mempool to match against a compact block,\n+                // and we don't feel like constructing the object for them, so\n+                // instead we respond with the full, non-compact block.\n+                bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n+                int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n+                if (CanDirectFetch(consensusParams) && pindex->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n+                    if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == pindex->GetBlockHash()) {\n+                        connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                    } else {\n+                        CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n+                        connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                    }\n                 } else {\n-                    CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n-                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n                 }\n-            } else {\n-                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n             }\n         }\n \n@@ -1213,7 +1225,7 @@ void static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensus\n     }\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -1262,7 +1274,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n         const CInv &inv = *it;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {\n             it++;\n-            ProcessGetBlockData(pfrom, consensusParams, inv, connman, interruptMsgProc);\n+            ProcessGetBlockData(pfrom, chainparams, inv, connman, interruptMsgProc);\n         }\n     }\n \n@@ -1971,7 +1983,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n-        ProcessGetData(pfrom, chainparams.GetConsensus(), connman, interruptMsgProc);\n+        ProcessGetData(pfrom, chainparams, connman, interruptMsgProc);\n     }\n \n \n@@ -2941,7 +2953,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fMoreWork = false;\n \n     if (!pfrom->vRecvGetData.empty())\n-        ProcessGetData(pfrom, chainparams.GetConsensus(), connman, interruptMsgProc);\n+        ProcessGetData(pfrom, chainparams, connman, interruptMsgProc);\n \n     if (pfrom->fDisconnect)\n         return false;"
      },
      {
        "sha": "69a201d9881e638e929432fd074ab1226596ed7f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf431870e45d8e20c4671e51a782ebf97b75fac/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf431870e45d8e20c4671e51a782ebf97b75fac/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0bf431870e45d8e20c4671e51a782ebf97b75fac",
        "patch": "@@ -1125,6 +1125,52 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n     return true;\n }\n \n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start)\n+{\n+    CDiskBlockPos hpos = pos;\n+    hpos.nPos -= 8; // Seek back 8 bytes for meta header\n+    CAutoFile filein(OpenBlockFile(hpos, true), SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed for %s\", __func__, pos.ToString());\n+    }\n+\n+    try {\n+        CMessageHeader::MessageStartChars blk_start;\n+        unsigned int blk_size;\n+\n+        filein >> blk_start >> blk_size;\n+\n+        if (memcmp(blk_start, message_start, CMessageHeader::MESSAGE_START_SIZE)) {\n+            return error(\"%s: Block magic mismatch for %s: %s versus expected %s\", __func__, pos.ToString(),\n+                    HexStr(blk_start, blk_start + CMessageHeader::MESSAGE_START_SIZE),\n+                    HexStr(message_start, message_start + CMessageHeader::MESSAGE_START_SIZE));\n+        }\n+\n+        if (blk_size > MAX_SIZE) {\n+            return error(\"%s: Block data is larger than maximum deserialization size for %s: %s versus %s\", __func__, pos.ToString(),\n+                    blk_size, MAX_SIZE);\n+        }\n+\n+        block.resize(blk_size); // Zeroing of memory is intentional here\n+        filein.read((char*)block.data(), blk_size);\n+    } catch(const std::exception& e) {\n+        return error(\"%s: Read from block file failed: %s for %s\", __func__, e.what(), pos.ToString());\n+    }\n+\n+    return true;\n+}\n+\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)\n+{\n+    CDiskBlockPos block_pos;\n+    {\n+        LOCK(cs_main);\n+        block_pos = pindex->GetBlockPos();\n+    }\n+\n+    return ReadRawBlockFromDisk(block, block_pos, message_start);\n+}\n+\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n {\n     int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;"
      },
      {
        "sha": "b5ab10786a2749822e18987594c9ea254f2b602a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bf431870e45d8e20c4671e51a782ebf97b75fac/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bf431870e45d8e20c4671e51a782ebf97b75fac/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0bf431870e45d8e20c4671e51a782ebf97b75fac",
        "patch": "@@ -398,6 +398,8 @@ void InitScriptExecutionCache();\n /** Functions for disk access for blocks */\n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n \n /** Functions for validating blocks and updating the block tree */\n "
      }
    ]
  }
]