[
  {
    "sha": "618d07faa2cc2f061a2e8035c3edbffc192480d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MThkMDdmYWEyY2MyZjA2MWEyZTgwMzVjM2VkYmZmYzE5MjQ4MGQ3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-07-11T14:34:21Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-04-06T21:36:46Z"
      },
      "message": "MOVEONLY: tx functions to consensus/tx_verify.o\n\nFunctions related to transaction verification.",
      "tree": {
        "sha": "62691192bc28a8b89b98fa8e922662b8f8864235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62691192bc28a8b89b98fa8e922662b8f8864235"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/618d07faa2cc2f061a2e8035c3edbffc192480d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJY5rT0AAoJEIhmwY6hyUSifyoQANFvF3DcsvDDgU03NrEJaS+S\nRzQELKSSAecgt0oKdSRTD64k6YIAhO6RhWGL1yRjsaIpIElyK5ZDpDZbFu4J39zp\nrHU0FLk1te2/4GJ5J++rBD5InEh8w10wOgWQfWwiCFaGg+VwYLMFqMc7Mh6oVNNc\nKrG0gGf21RaSWI3Psfdb82z4cvmC6MYHB4j9Yhsnqpty405li99CdGhGbTBHaU86\nkEfLhDHZA2JjsrYBRYBwmSSH/SFzJyZSSSSh2d/s9IOgodnXObZOlGBTeEa+VSaG\nCPZDmPLhIW8VlIC46WBjANFkbfWVG2KRyDSNiQSo3jUZNRs2sWwEQ7MbgHVWPhqu\nXiJrgmr5vV93FOuMhB85bPB1gjxw9dGX9o9KsIAWRD7IH34ckhwKrDyrZBHJ+XQe\nZ5iJI0R5jmddKD8pidEI0RDHjvNmZ54HF2+y5nshNEVAmC8rnwACHayJY81rwSNz\nRsXeXTDp/VKjyePZ06jHa/RuBSwB/yhBwMzyyNLyUfixdIB9+0tT4EpiMkqAmRp6\n2WaadWkKrT3fxxd0kzUDiMXEKjoR52rB6QzzIqrYeLbNnrZnO3KIG/Pk/pBsOK1s\npdDUk0YV6v7/j3rDTabh+Lfbry8tJeF9Ebq3GTjJL/r/tC5NzoPjLGwR6VONdAS3\n3diPFHPEZzmavorej/fC\n=931g\n-----END PGP SIGNATURE-----",
        "payload": "tree 62691192bc28a8b89b98fa8e922662b8f8864235\nparent 8c28670e92b6422eb7576f074446238f9f221999\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1468247661 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1491514606 +0200\n\nMOVEONLY: tx functions to consensus/tx_verify.o\n\nFunctions related to transaction verification.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618d07faa2cc2f061a2e8035c3edbffc192480d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/618d07faa2cc2f061a2e8035c3edbffc192480d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618d07faa2cc2f061a2e8035c3edbffc192480d7/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c28670e92b6422eb7576f074446238f9f221999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c28670e92b6422eb7576f074446238f9f221999",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c28670e92b6422eb7576f074446238f9f221999"
      }
    ],
    "stats": {
      "total": 633,
      "additions": 336,
      "deletions": 297
    },
    "files": [
      {
        "sha": "401705bafa4f3b7f06711ff8231aceb3525b4dfd",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -95,6 +95,7 @@ BITCOIN_CORE_H = \\\n   compat/sanity.h \\\n   compressor.h \\\n   consensus/consensus.h \\\n+  consensus/tx_verify.h \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n@@ -183,6 +184,7 @@ libbitcoin_server_a_SOURCES = \\\n   blockencodings.cpp \\\n   chain.cpp \\\n   checkpoints.cpp \\\n+  consensus/tx_verify.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\"
      },
      {
        "sha": "043f4cf95c2619c992519529af4799471eeeda94",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "added",
        "additions": 246,
        "deletions": 0,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2017-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"tx_verify.h\"\n+\n+#include \"consensus.h\"\n+#include \"primitives/transaction.h\"\n+#include \"script/interpreter.h\"\n+#include \"validation.h\"\n+\n+// TODO remove the following dependencies\n+#include \"chain.h\"\n+#include \"coins.h\"\n+#include \"utilmoneystr.h\"\n+ \n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+{\n+    if (tx.nLockTime == 0)\n+        return true;\n+    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n+        return true;\n+    for (const auto& txin : tx.vin) {\n+        if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n+            return false;\n+    }\n+    return true;\n+}\n+\n+std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    assert(prevHeights->size() == tx.vin.size());\n+\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    // The semantics of nLockTime are the last invalid height/time, so\n+    // use -1 to have the effect of any height or time being valid.\n+    int nMinHeight = -1;\n+    int64_t nMinTime = -1;\n+\n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n+    // Do not enforce sequence numbers as a relative lock time\n+    // unless we have been instructed to\n+    if (!fEnforceBIP68) {\n+        return std::make_pair(nMinHeight, nMinTime);\n+    }\n+\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n+            // The height of this input is not relevant for sequence locks\n+            (*prevHeights)[txinIndex] = 0;\n+            continue;\n+        }\n+\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            // NOTE: Subtract 1 to maintain nLockTime semantics\n+            // BIP 68 relative lock times have the semantics of calculating\n+            // the first block or time at which the transaction would be\n+            // valid. When calculating the effective block time or height\n+            // for the entire transaction, we switch to using the\n+            // semantics of nLockTime which is the last invalid block\n+            // time or height.  Thus we subtract 1 from the calculated\n+            // time or height.\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n+    }\n+\n+    return std::make_pair(nMinHeight, nMinTime);\n+}\n+\n+bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n+{\n+    assert(block.pprev);\n+    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n+    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n+        return false;\n+\n+    return true;\n+}\n+\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n+{\n+    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n+}\n+\n+unsigned int GetLegacySigOpCount(const CTransaction& tx)\n+{\n+    unsigned int nSigOps = 0;\n+    for (const auto& txin : tx.vin)\n+    {\n+        nSigOps += txin.scriptSig.GetSigOpCount(false);\n+    }\n+    for (const auto& txout : tx.vout)\n+    {\n+        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n+    }\n+    return nSigOps;\n+}\n+\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n+{\n+    if (tx.IsCoinBase())\n+        return 0;\n+\n+    unsigned int nSigOps = 0;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        if (prevout.scriptPubKey.IsPayToScriptHash())\n+            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+    }\n+    return nSigOps;\n+}\n+\n+int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)\n+{\n+    int64_t nSigOps = GetLegacySigOpCount(tx) * WITNESS_SCALE_FACTOR;\n+\n+    if (tx.IsCoinBase())\n+        return nSigOps;\n+\n+    if (flags & SCRIPT_VERIFY_P2SH) {\n+        nSigOps += GetP2SHSigOpCount(tx, inputs) * WITNESS_SCALE_FACTOR;\n+    }\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n+        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, &tx.vin[i].scriptWitness, flags);\n+    }\n+    return nSigOps;\n+}\n+\n+bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)\n+{\n+    // Basic checks that don't depend on any context\n+    if (tx.vin.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n+    if (tx.vout.empty())\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n+    // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n+\n+    // Check for negative or overflow output values\n+    CAmount nValueOut = 0;\n+    for (const auto& txout : tx.vout)\n+    {\n+        if (txout.nValue < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n+        if (txout.nValue > MAX_MONEY)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+        nValueOut += txout.nValue;\n+        if (!MoneyRange(nValueOut))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+    }\n+\n+    // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n+    if (fCheckDuplicateInputs) {\n+        std::set<COutPoint> vInOutPoints;\n+        for (const auto& txin : tx.vin)\n+        {\n+            if (!vInOutPoints.insert(txin.prevout).second)\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+        }\n+    }\n+\n+    if (tx.IsCoinBase())\n+    {\n+        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n+    }\n+    else\n+    {\n+        for (const auto& txin : tx.vin)\n+            if (txin.prevout.IsNull())\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n+    }\n+\n+    return true;\n+}\n+\n+bool Consensus::CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n+{\n+        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n+        // for an attacker to attempt to split the network.\n+        if (!inputs.HaveInputs(tx))\n+            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n+\n+        CAmount nValueIn = 0;\n+        CAmount nFees = 0;\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+        {\n+            const COutPoint &prevout = tx.vin[i].prevout;\n+            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n+            assert(coins);\n+\n+            // If prev is coinbase, check that it's matured\n+            if (coins->IsCoinBase()) {\n+                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n+                    return state.Invalid(false,\n+                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n+                        strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n+            }\n+\n+            // Check for negative or overflow input values\n+            nValueIn += coins->vout[prevout.n].nValue;\n+            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+\n+        }\n+\n+        if (nValueIn < tx.GetValueOut())\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n+                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n+\n+        // Tally transaction fees\n+        CAmount nTxFee = nValueIn - tx.GetValueOut();\n+        if (nTxFee < 0)\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n+        nFees += nTxFee;\n+        if (!MoneyRange(nFees))\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+    return true;\n+}"
      },
      {
        "sha": "d46d3294ca25039e8ebdaf1d0cd4d73abebb3597",
        "filename": "src/consensus/tx_verify.h",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2017-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSENSUS_TX_VERIFY_H\n+#define BITCOIN_CONSENSUS_TX_VERIFY_H\n+\n+#include <stdint.h>\n+#include <vector>\n+\n+class CBlockIndex;\n+class CCoinsViewCache;\n+class CTransaction;\n+class CValidationState;\n+\n+/** Transaction validation functions */\n+\n+/** Context-independent validity checks */\n+bool CheckTransaction(const CTransaction& tx, CValidationState& state, bool fCheckDuplicateInputs=true);\n+\n+namespace Consensus {\n+/**\n+ * Check whether all inputs of this transaction are valid (no double spends and amounts)\n+ * This does not modify the UTXO set. This does not check scripts and sigs.\n+ * Preconditions: tx.IsCoinBase() is false.\n+ */\n+bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n+} // namespace Consensus\n+\n+/** Auxiliary functions for transaction validation (ideally should not be exposed) */\n+\n+/**\n+ * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n+ * @return number of sigops this transaction's outputs will produce when spent\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetLegacySigOpCount(const CTransaction& tx);\n+\n+/**\n+ * Count ECDSA signature operations in pay-to-script-hash inputs.\n+ * \n+ * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n+ * @return maximum number of sigops required to validate this transaction's inputs\n+ * @see CTransaction::FetchInputs\n+ */\n+unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+\n+/**\n+ * Compute total signature operation cost of a transaction.\n+ * @param[in] tx     Transaction for which we are computing the cost\n+ * @param[in] inputs Map of previous transactions that have outputs we're spending\n+ * @param[out] flags Script verification flags\n+ * @return Total signature operation cost of tx\n+ */\n+int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags);\n+\n+/**\n+ * Check if transaction is final and can be included in a block with the\n+ * specified height and time. Consensus critical.\n+ */\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n+\n+/**\n+ * Calculates the block height and previous block's median time past at\n+ * which the transaction will be considered final in the context of BIP 68.\n+ * Also removes from the vector of input heights any entries which did not\n+ * correspond to sequence locked inputs as they do not affect the calculation.\n+ */\n+std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+\n+bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair);\n+/**\n+ * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n+ * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n+ */\n+bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n+\n+#endif // BITCOIN_CONSENSUS_TX_VERIFY_H"
      },
      {
        "sha": "8f17c575cba44d1f3fc13ddd9aafbdc8b6a79e1d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -10,6 +10,7 @@\n #include \"chainparams.h\"\n #include \"coins.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/tx_verify.h\"\n #include \"consensus/merkle.h\"\n #include \"consensus/validation.h\"\n #include \"hash.h\""
      },
      {
        "sha": "a9d69bb29e0cf2cd33c85ffa7f66e53950fb5f94",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -6,6 +6,7 @@\n #include \"coins.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n+#include \"consensus/tx_verify.h\"\n #include \"consensus/validation.h\"\n #include \"validation.h\"\n #include \"miner.h\""
      },
      {
        "sha": "ede68f23d796b0379cc1bc1fdaa2e4cb24eb1ba6",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/tx_verify.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\""
      },
      {
        "sha": "2f7c22084e03eab5dc499ab9a4db80d8787e1a68",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"consensus/tx_verify.h\"\n #include \"consensus/validation.h\"\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n-#include \"validation.h\" // For CheckTransaction\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\""
      },
      {
        "sha": "92781d763dfebe76d65627fd9c08091c8f53a5e9",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"validation.h\"\n+#include \"consensus/tx_verify.h\"\n #include \"pubkey.h\"\n #include \"key.h\"\n #include \"script/script.h\""
      },
      {
        "sha": "67610301d7e5684fa05d9585296c00a7bfe514de",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -8,11 +8,12 @@\n \n #include \"clientversion.h\"\n #include \"checkqueue.h\"\n+#include \"consensus/tx_verify.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"validation.h\" // For CheckTransaction\n+#include \"validation.h\"\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\""
      },
      {
        "sha": "beb2e0482cd0b728f478d664947106d85cd5e6b4",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/tx_verify.h\"\n #include \"consensus/validation.h\"\n #include \"validation.h\"\n #include \"policy/policy.h\""
      },
      {
        "sha": "c9dda96e88b903674c1f4c66587cf5a73c1f51ce",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 243,
        "changes": 244,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -11,6 +11,7 @@\n #include \"checkqueue.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/merkle.h\"\n+#include \"consensus/tx_verify.h\"\n #include \"consensus/validation.h\"\n #include \"fs.h\"\n #include \"hash.h\"\n@@ -219,19 +220,6 @@ enum FlushStateMode {\n bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int nManualPruneHeight=0);\n void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeight);\n \n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n-{\n-    if (tx.nLockTime == 0)\n-        return true;\n-    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n-        return true;\n-    for (const auto& txin : tx.vin) {\n-        if (!(txin.nSequence == CTxIn::SEQUENCE_FINAL))\n-            return false;\n-    }\n-    return true;\n-}\n-\n bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n@@ -264,89 +252,6 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-/**\n- * Calculates the block height and previous block's median time past at\n- * which the transaction will be considered final in the context of BIP 68.\n- * Also removes from the vector of input heights any entries which did not\n- * correspond to sequence locked inputs as they do not affect the calculation.\n- */\n-static std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n-{\n-    assert(prevHeights->size() == tx.vin.size());\n-\n-    // Will be set to the equivalent height- and time-based nLockTime\n-    // values that would be necessary to satisfy all relative lock-\n-    // time constraints given our view of block chain history.\n-    // The semantics of nLockTime are the last invalid height/time, so\n-    // use -1 to have the effect of any height or time being valid.\n-    int nMinHeight = -1;\n-    int64_t nMinTime = -1;\n-\n-    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n-    // we would be doing a signed comparison and half the range of nVersion\n-    // wouldn't support BIP 68.\n-    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n-                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n-\n-    // Do not enforce sequence numbers as a relative lock time\n-    // unless we have been instructed to\n-    if (!fEnforceBIP68) {\n-        return std::make_pair(nMinHeight, nMinTime);\n-    }\n-\n-    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n-        const CTxIn& txin = tx.vin[txinIndex];\n-\n-        // Sequence numbers with the most significant bit set are not\n-        // treated as relative lock-times, nor are they given any\n-        // consensus-enforced meaning at this point.\n-        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG) {\n-            // The height of this input is not relevant for sequence locks\n-            (*prevHeights)[txinIndex] = 0;\n-            continue;\n-        }\n-\n-        int nCoinHeight = (*prevHeights)[txinIndex];\n-\n-        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n-            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n-            // NOTE: Subtract 1 to maintain nLockTime semantics\n-            // BIP 68 relative lock times have the semantics of calculating\n-            // the first block or time at which the transaction would be\n-            // valid. When calculating the effective block time or height\n-            // for the entire transaction, we switch to using the\n-            // semantics of nLockTime which is the last invalid block\n-            // time or height.  Thus we subtract 1 from the calculated\n-            // time or height.\n-\n-            // Time-based relative lock-times are measured from the\n-            // smallest allowed timestamp of the block containing the\n-            // txout being spent, which is the median time past of the\n-            // block prior.\n-            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n-        } else {\n-            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n-        }\n-    }\n-\n-    return std::make_pair(nMinHeight, nMinTime);\n-}\n-\n-static bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)\n-{\n-    assert(block.pprev);\n-    int64_t nBlockTime = block.pprev->GetMedianTimePast();\n-    if (lockPair.first >= block.nHeight || lockPair.second >= nBlockTime)\n-        return false;\n-\n-    return true;\n-}\n-\n-bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)\n-{\n-    return EvaluateSequenceLocks(block, CalculateSequenceLocks(tx, flags, prevHeights, block));\n-}\n-\n bool TestLockPointValidity(const LockPoints* lp)\n {\n     AssertLockHeld(cs_main);\n@@ -436,107 +341,6 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n }\n \n \n-unsigned int GetLegacySigOpCount(const CTransaction& tx)\n-{\n-    unsigned int nSigOps = 0;\n-    for (const auto& txin : tx.vin)\n-    {\n-        nSigOps += txin.scriptSig.GetSigOpCount(false);\n-    }\n-    for (const auto& txout : tx.vout)\n-    {\n-        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n-    }\n-    return nSigOps;\n-}\n-\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n-{\n-    if (tx.IsCoinBase())\n-        return 0;\n-\n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n-    }\n-    return nSigOps;\n-}\n-\n-int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)\n-{\n-    int64_t nSigOps = GetLegacySigOpCount(tx) * WITNESS_SCALE_FACTOR;\n-\n-    if (tx.IsCoinBase())\n-        return nSigOps;\n-\n-    if (flags & SCRIPT_VERIFY_P2SH) {\n-        nSigOps += GetP2SHSigOpCount(tx, inputs) * WITNESS_SCALE_FACTOR;\n-    }\n-\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        const CTxOut &prevout = inputs.GetOutputFor(tx.vin[i]);\n-        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, &tx.vin[i].scriptWitness, flags);\n-    }\n-    return nSigOps;\n-}\n-\n-\n-\n-\n-\n-bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fCheckDuplicateInputs)\n-{\n-    // Basic checks that don't depend on any context\n-    if (tx.vin.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n-    if (tx.vout.empty())\n-        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n-    // Size limits (this doesn't take the witness into account, as that hasn't been checked for malleability)\n-    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) > MAX_BLOCK_BASE_SIZE)\n-        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n-\n-    // Check for negative or overflow output values\n-    CAmount nValueOut = 0;\n-    for (const auto& txout : tx.vout)\n-    {\n-        if (txout.nValue < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n-        if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(nValueOut))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n-    }\n-\n-    // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n-    if (fCheckDuplicateInputs) {\n-        std::set<COutPoint> vInOutPoints;\n-        for (const auto& txin : tx.vin)\n-        {\n-            if (!vInOutPoints.insert(txin.prevout).second)\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n-        }\n-    }\n-\n-    if (tx.IsCoinBase())\n-    {\n-        if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n-    }\n-    else\n-    {\n-        for (const auto& txin : tx.vin)\n-            if (txin.prevout.IsNull())\n-                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n-    }\n-\n-    return true;\n-}\n-\n void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n     int expired = pool.Expire(GetTime() - age);\n     if (expired != 0) {\n@@ -1343,52 +1147,6 @@ int GetSpendHeight(const CCoinsViewCache& inputs)\n     return pindexPrev->nHeight + 1;\n }\n \n-namespace Consensus {\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight)\n-{\n-        // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n-        // for an attacker to attempt to split the network.\n-        if (!inputs.HaveInputs(tx))\n-            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n-\n-        CAmount nValueIn = 0;\n-        CAmount nFees = 0;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-        {\n-            const COutPoint &prevout = tx.vin[i].prevout;\n-            const CCoins *coins = inputs.AccessCoins(prevout.hash);\n-            assert(coins);\n-\n-            // If prev is coinbase, check that it's matured\n-            if (coins->IsCoinBase()) {\n-                if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(false,\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n-                        strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n-            }\n-\n-            // Check for negative or overflow input values\n-            nValueIn += coins->vout[prevout.n].nValue;\n-            if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n-\n-        }\n-\n-        if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n-                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n-\n-        // Tally transaction fees\n-        CAmount nTxFee = nValueIn - tx.GetValueOut();\n-        if (nTxFee < 0)\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n-        nFees += nTxFee;\n-        if (!MoneyRange(nFees))\n-            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n-    return true;\n-}\n-}// namespace Consensus\n-\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())"
      },
      {
        "sha": "60491818a80a95acf381e01d7928cf6ba32108a4",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 50,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -336,30 +336,6 @@ ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::D\n /** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n-/** \n- * Count ECDSA signature operations the old-fashioned (pre-0.6) way\n- * @return number of sigops this transaction's outputs will produce when spent\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetLegacySigOpCount(const CTransaction& tx);\n-\n-/**\n- * Count ECDSA signature operations in pay-to-script-hash inputs.\n- * \n- * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n- * @return maximum number of sigops required to validate this transaction's inputs\n- * @see CTransaction::FetchInputs\n- */\n-unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n-\n-/**\n- * Compute total signature operation cost of a transaction.\n- * @param[in] tx     Transaction for which we are computing the cost\n- * @param[in] inputs Map of previous transactions that have outputs we're spending\n- * @param[out] flags Script verification flags\n- * @return Total signature operation cost of tx\n- */\n-int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags);\n \n /**\n  * Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n@@ -374,26 +350,6 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n \n /** Transaction validation functions */\n \n-/** Context-independent validity checks */\n-bool CheckTransaction(const CTransaction& tx, CValidationState& state, bool fCheckDuplicateInputs=true);\n-\n-namespace Consensus {\n-\n-/**\n- * Check whether all inputs of this transaction are valid (no double spends and amounts)\n- * This does not modify the UTXO set. This does not check scripts and sigs.\n- * Preconditions: tx.IsCoinBase() is false.\n- */\n-bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight);\n-\n-} // namespace Consensus\n-\n-/**\n- * Check if transaction is final and can be included in a block with the\n- * specified height and time. Consensus critical.\n- */\n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n-\n /**\n  * Check if transaction will be final in the next block to be created.\n  *\n@@ -408,12 +364,6 @@ bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n  */\n bool TestLockPointValidity(const LockPoints* lp);\n \n-/**\n- * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.\n- * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.\n- */\n-bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block);\n-\n /**\n  * Check if transaction will be BIP 68 final in the next block to be created.\n  *"
      },
      {
        "sha": "1beeaa042ee54528db292c4e4ed8d41065e014b6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618d07faa2cc2f061a2e8035c3edbffc192480d7/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=618d07faa2cc2f061a2e8035c3edbffc192480d7",
        "patch": "@@ -6,9 +6,9 @@\n #include \"wallet/walletdb.h\"\n \n #include \"base58.h\"\n+#include \"consensus/tx_verify.h\"\n #include \"consensus/validation.h\"\n #include \"fs.h\"\n-#include \"validation.h\" // For CheckTransaction\n #include \"protocol.h\"\n #include \"serialize.h\"\n #include \"sync.h\""
      }
    ]
  }
]