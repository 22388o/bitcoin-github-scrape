[
  {
    "sha": "fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUxMzdjMTFkMmQ0YWNjZDliZmM2OGIzNDk4ZTdlMTY4MjljM2Fi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-28T15:58:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-28T15:57:08Z"
      },
      "message": "[doc] Remove unused clang format dev script\n\nAlso, update the clang format file to reflect the current coding\nstyle mentioned in the developer notes.",
      "tree": {
        "sha": "a712302f90b56aef5f25ce086c10f1dd645f2fb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a712302f90b56aef5f25ce086c10f1dd645f2fb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 6,
      "deletions": 71
    },
    "files": [
      {
        "sha": "34f2af68666a9d51419a463ed89f7361464fd5d8",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "patch": "@@ -8,11 +8,6 @@ check-doc.py\n Check if all command line args are documented. The return value indicates the\n number of undocumented args.\n \n-clang-format.py\n-===============\n-\n-A script to format cpp source code according to [.clang-format](../../src/.clang-format). This should only be applied to new files or files which are currently not actively developed on. Also, git subtrees are not subject to formatting.\n-\n clang-format-diff.py\n ===================\n \n@@ -24,6 +19,7 @@ the script should be called from the git root folder as follows.\n ```\n git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n ```\n+\n copyright\\_header.py\n ====================\n "
      },
      {
        "sha": "cee99047ac67e69fe767a910ac56811e574cfc8d",
        "filename": "contrib/devtools/clang-format.py",
        "status": "removed",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/contrib/devtools/clang-format.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/contrib/devtools/clang-format.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format.py?ref=a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "patch": "@@ -1,62 +0,0 @@\n-#!/usr/bin/env python\n-'''\n-Wrapper script for clang-format\n-\n-Copyright (c) 2015 MarcoFalke\n-Copyright (c) 2015 The Bitcoin Core developers\n-Distributed under the MIT software license, see the accompanying\n-file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-\n-import os\n-import sys\n-import subprocess\n-\n-tested_versions = ['3.6.0', '3.6.1', '3.6.2'] # A set of versions known to produce the same output\n-accepted_file_extensions = ('.h', '.cpp') # Files to format\n-\n-def check_clang_format_version(clang_format_exe):\n-    try:\n-        output = subprocess.check_output([clang_format_exe, '-version'])\n-        for ver in tested_versions:\n-            if ver in output:\n-                print \"Detected clang-format version \" + ver\n-                return\n-        raise RuntimeError(\"Untested version: \" + output)\n-    except Exception as e:\n-        print 'Could not verify version of ' + clang_format_exe + '.'\n-        raise e\n-\n-def check_command_line_args(argv):\n-    required_args = ['{clang-format-exe}', '{files}']\n-    example_args = ['clang-format-3.x', 'src/main.cpp', 'src/wallet/*']\n-\n-    if(len(argv) < len(required_args) + 1):\n-        for word in (['Usage:', argv[0]] + required_args):\n-            print word,\n-        print ''\n-        for word in (['E.g:', argv[0]] + example_args):\n-            print word,\n-        print ''\n-        sys.exit(1)\n-\n-def run_clang_format(clang_format_exe, files):\n-    for target in files:\n-        if os.path.isdir(target):\n-            for path, dirs, files in os.walk(target):\n-                run_clang_format(clang_format_exe, (os.path.join(path, f) for f in files))\n-        elif target.endswith(accepted_file_extensions):\n-            print \"Format \" + target\n-            subprocess.check_call([clang_format_exe, '-i', '-style=file', target], stdout=open(os.devnull, 'wb'), stderr=subprocess.STDOUT)\n-        else:\n-            print \"Skip \" + target\n-\n-def main(argv):\n-    check_command_line_args(argv)\n-    clang_format_exe = argv[1]\n-    files = argv[2:]\n-    check_clang_format_version(clang_format_exe)\n-    run_clang_format(clang_format_exe, files)\n-\n-if __name__ == \"__main__\":\n-    main(sys.argv)"
      },
      {
        "sha": "989ad8d03ebdeb1f43f40c06dcf9c7b91392bff0",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "patch": "@@ -4,10 +4,11 @@ Developer Notes\n Various coding styles have been used during the history of the codebase,\n and the result is not very consistent. However, we're now trying to converge to\n a single style, so please use it in new code. Old code will be converted\n-gradually.\n+gradually and you are encouraged to use the provided\n+[clang-format-diff script](/contrib/devtools/README.md#clang-format-diffpy)\n+to clean up the patch automatically before submitting a pull request.\n+\n - Basic rules specified in [src/.clang-format](/src/.clang-format).\n-  Use a recent clang-format to format automatically using one of the [dev scripts]\n-  (/contrib/devtools/README.md#clang-formatpy).\n   - Braces on new lines for namespaces, classes, functions, methods.\n   - Braces on the same line for everything else.\n   - 4 space indentation (no tabs) for every block except namespaces."
      },
      {
        "sha": "fc53509138fad0ad50144b8210ff23a90b155db0",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "patch": "@@ -6,7 +6,7 @@ AlignTrailingComments: true\n AllowAllParametersOfDeclarationOnNextLine: false\n AllowShortBlocksOnASingleLine: false\n AllowShortFunctionsOnASingleLine: All\n-AllowShortIfStatementsOnASingleLine: false\n+AllowShortIfStatementsOnASingleLine: true\n AllowShortLoopsOnASingleLine: false\n AlwaysBreakBeforeMultilineStrings: false\n AlwaysBreakTemplateDeclarations: true"
      }
    ]
  },
  {
    "sha": "0fea960ca917b73aff853fe88476174c8a313863",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmVhOTYwY2E5MTdiNzNhZmY4NTNmZTg4NDc2MTc0YzhhMzEzODYz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-29T15:05:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-29T15:05:37Z"
      },
      "message": "Merge #9510: [trivial] Fix typos in comments\n\ncc16d99 [trivial] Fix typos in comments (practicalswift)",
      "tree": {
        "sha": "e07bb46576b327b22a3b2d0c8d51b7be29a13280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e07bb46576b327b22a3b2d0c8d51b7be29a13280"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fea960ca917b73aff853fe88476174c8a313863",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYjgTBAAoJEC1/I3LlD+E3zKIH/ije9pVMoo3HEPWsdSzR9KMV\nCI1fcbxINwgXwnDs24kAOe6jzMghp63P+xm5RNn5GoNMrHkp7J0KbGAyLo9bWKrN\nWdw1XI/tIeNk/ooqDRt/5SD42v/6SEMqFBxxjjPNZxMSPEhpqQPoKJfnMsWtrjsp\nUdYiWLBXcDj88ZHOljRTbD3PC9HUCRqaOReTNDrV6W/gRVgHLJmla9zwe8b7U+WO\nSfKabzQP5U303iBXdelvMkIT+5ivKzLa2w9FJsaadn0XVIFb8+O9AQ1uuoOpW28G\niobMikZWg++rD1D/pxsCptR2EpognnoTR/cT4dHt5PoeZxlHcVwyc1ESQ9WXlhY=\n=v+aR\n-----END PGP SIGNATURE-----",
        "payload": "tree e07bb46576b327b22a3b2d0c8d51b7be29a13280\nparent a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef\nparent cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0\nauthor MarcoFalke <falke.marco@gmail.com> 1485702306 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1485702337 +0100\n\nMerge #9510: [trivial] Fix typos in comments\n\ncc16d99 [trivial] Fix typos in comments (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fea960ca917b73aff853fe88476174c8a313863",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fea960ca917b73aff853fe88476174c8a313863",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fea960ca917b73aff853fe88476174c8a313863/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      },
      {
        "sha": "cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc16d99f1dc8305b1b255f1cc0f2b1516aa77ed0"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "69f0e9247af978552d4640d97fe8fed0cbe8192f",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -24,7 +24,7 @@ input=/home/example/.bitcoin/blocks\n output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n \n-# Maxmimum size in bytes of out-of-order blocks cache in memory\n+# Maximum size in bytes of out-of-order blocks cache in memory\n out_of_order_cache_sz = 100000000\n \n # Do we want the reverse the hash bytes coming from getblockhash?"
      },
      {
        "sha": "ab84bf8e35605d88df241568d0e1ac52c644e625",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -255,7 +255,7 @@ bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimeP\n     int nId;\n     CAddrInfo* pinfo = Find(addr, &nId);\n \n-    // Do not set a penality for a source's self-announcement\n+    // Do not set a penalty for a source's self-announcement\n     if (addr == source) {\n         nTimePenalty = 0;\n     }"
      },
      {
        "sha": "3998283bb13ebc015056ab4080b998ea57d56719",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -147,7 +147,7 @@ template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtK\n     K GetKey() {\n         K ret;\n         if (vchData.size() == Size) {\n-            //if base58 encouded data not holds a ext key, return a !IsValid() key\n+            // If base58 encoded data does not hold an ext key, return a !IsValid() key\n             ret.Decode(&vchData[0]);\n         }\n         return ret;"
      },
      {
        "sha": "a549ec29eaafdf97eac290251c3f7f8d33519a6f",
        "filename": "src/bench/perf.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/bench/perf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/bench/perf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/perf.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -6,7 +6,7 @@\n \n #if defined(__i386__) || defined(__x86_64__)\n \n-/* These architectures support quering the cycle counter\n+/* These architectures support querying the cycle counter\n  * from user space, no need for any syscall overhead.\n  */\n void perf_init(void) { }"
      },
      {
        "sha": "5a1d80d421210907ce3bedb3bcd32f5a738d3467",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -99,7 +99,7 @@ class BlockTransactions {\n     }\n };\n \n-// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownlaodedBlock\n+// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownloadedBlock\n struct PrefilledTransaction {\n     // Used as an offset since last prefilled tx in CBlockHeaderAndShortTxIDs,\n     // as a proper transaction-in-block-index in PartiallyDownloadedBlock"
      },
      {
        "sha": "6240e82857eb99c6fe2f371a058211b4a77469ff",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -47,7 +47,7 @@ struct Params {\n     /** Block height at which BIP66 becomes active */\n     int BIP66Height;\n     /**\n-     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n+     * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n      * Examples: 1916 for 95%, 1512 for testchains.\n      */"
      },
      {
        "sha": "ff47e9776b643db85d72405385ee339da5ad33b8",
        "filename": "src/cuckoocache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/cuckoocache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/cuckoocache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/cuckoocache.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -257,7 +257,7 @@ class cache\n      *\n      * First, epoch_check decrements and checks the cheap heuristic, and then does\n      * a more expensive scan if the cheap heuristic runs out. If the expensive\n-     * scan suceeds, the epochs are aged and old elements are allow_erased. The\n+     * scan succeeds, the epochs are aged and old elements are allow_erased. The\n      * cheap heuristic is reset to retrigger after the worst case growth of the\n      * current epoch's elements would exceed the epoch_size.\n      */\n@@ -395,7 +395,7 @@ class cache\n             * 1) On first iteration, last_loc == invalid(), find returns last, so\n             *    last_loc defaults to locs[0].\n             * 2) On further iterations, where last_loc == locs[k], last_loc will\n-            *    go to locs[k+1 % 8], i.e., next of the 8 indicies wrapping around\n+            *    go to locs[k+1 % 8], i.e., next of the 8 indices wrapping around\n             *    to 0 if needed.\n             *\n             * This prevents moving the element we just put in."
      },
      {
        "sha": "daac7a0f1a7034b97c131203d6ef83d9142d45ef",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -25,7 +25,7 @@\n static const char* WWW_AUTH_HEADER_DATA = \"Basic realm=\\\"jsonrpc\\\"\";\n \n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n- * re-lock the wellet.\n+ * re-lock the wallet.\n  */\n class HTTPRPCTimer : public RPCTimerBase\n {"
      },
      {
        "sha": "e936e068f44ae657dd4f82649c26140fe61fbf44",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -1553,7 +1553,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n-        // Only advertize witness capabilities if they have a reasonable start time.\n+        // Only advertise witness capabilities if they have a reasonable start time.\n         // This allows us to have the code merged without a defined softfork, by setting its\n         // end time to 0.\n         // Note that setting NODE_WITNESS is never required: the only downside from not"
      },
      {
        "sha": "a85c2b7452e356fdc028bb1604a0f45caa2c5d88",
        "filename": "src/netaddress.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/netaddress.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/netaddress.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -49,7 +49,7 @@ class CNetAddr\n         bool IsIPv4() const;    // IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)\n         bool IsIPv6() const;    // IPv6 address (not mapped IPv4, not Tor)\n         bool IsRFC1918() const; // IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)\n-        bool IsRFC2544() const; // IPv4 inter-network communcations (192.18.0.0/15)\n+        bool IsRFC2544() const; // IPv4 inter-network communications (192.18.0.0/15)\n         bool IsRFC6598() const; // IPv4 ISP-level NAT (100.64.0.0/10)\n         bool IsRFC5737() const; // IPv4 documentation addresses (192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24)\n         bool IsRFC3849() const; // IPv6 documentation address (2001:0DB8::/32)"
      },
      {
        "sha": "4b34e73eb7a454aa8b7a579dd618c5b5052aef24",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -64,7 +64,7 @@ class BanTablePriv\n         }\n \n         if (sortColumn >= 0)\n-            // sort cachedBanlist (use stable sort to prevent rows jumping around unneceesarily)\n+            // sort cachedBanlist (use stable sort to prevent rows jumping around unnecessarily)\n             qStableSort(cachedBanlist.begin(), cachedBanlist.end(), BannedNodeLessThan(sortColumn, sortOrder));\n     }\n "
      },
      {
        "sha": "9d46280a37b4099234502d89c8569c8c43d540c6",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -21,10 +21,10 @@\n //\n // When startup is finished and the main window is\n // shown, a signal is sent to slot uiReady(), which\n-// emits a receivedURL() signal for any payment\n+// emits a receivedURI() signal for any payment\n // requests that happened during startup.\n //\n-// After startup, receivedURL() happens as usual.\n+// After startup, receivedURI() happens as usual.\n //\n // This class has one more feature: a static\n // method that finds URIs passed in the command line"
      },
      {
        "sha": "1c0ed663c1fdfb596eaf88e2ba561998812d7b67",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -608,7 +608,7 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n         // set nMinimumTotalFee to 0 to not accidentally pay a custom fee\n         CoinControlDialog::coinControl->nMinimumTotalFee = 0;\n \n-        // show the estimated reuquired time for confirmation\n+        // show the estimated required time for confirmation\n         ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget * Params().GetConsensus().nPowTargetSpacing) + \" / \" + tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else"
      },
      {
        "sha": "7ab4125284666b293f62309ae62c2099a3b1de25",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -39,7 +39,7 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n \n     QString version = tr(PACKAGE_NAME) + \" \" + tr(\"version\") + \" \" + QString::fromStdString(FormatFullVersion());\n     /* On x86 add a bit specifier to the version so that users can distinguish between\n-     * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambigious.\n+     * 32 and 64 bit builds. On other architectures, 32/64 bit may be more ambiguous.\n      */\n #if defined(__x86_64__)\n     version += \" \" + tr(\"(%1-bit)\").arg(64);"
      },
      {
        "sha": "35747552feaf0587f907c2bb593b986c041865be",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -150,7 +150,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n         obj.push_back(Pair(\"version\", stats.nVersion));\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifiying the JSON output by putting special characters in\n+        // corrupting or modifying the JSON output by putting special characters in\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));"
      },
      {
        "sha": "9f4741b1cd95d17bd0117de1dc64db920d3a24c2",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -129,7 +129,7 @@ const char* GetOpName(opcodetype opcode)\n     case OP_CHECKMULTISIG          : return \"OP_CHECKMULTISIG\";\n     case OP_CHECKMULTISIGVERIFY    : return \"OP_CHECKMULTISIGVERIFY\";\n \n-    // expanson\n+    // expansion\n     case OP_NOP1                   : return \"OP_NOP1\";\n     case OP_CHECKLOCKTIMEVERIFY    : return \"OP_CHECKLOCKTIMEVERIFY\";\n     case OP_CHECKSEQUENCEVERIFY    : return \"OP_CHECKSEQUENCEVERIFY\";"
      },
      {
        "sha": "9661a665140499148dc2cf8e803f2aea160a4845",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(sizes)\n \n BOOST_AUTO_TEST_CASE(floats_conversion)\n {\n-    // Choose values that map unambigiously to binary floating point to avoid\n+    // Choose values that map unambiguously to binary floating point to avoid\n     // rounding issues at the compiler side.\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x00000000), 0.0F);\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x3f000000), 0.5F);\n@@ -109,7 +109,7 @@ BOOST_AUTO_TEST_CASE(floats_conversion)\n \n BOOST_AUTO_TEST_CASE(doubles_conversion)\n {\n-    // Choose values that map unambigiously to binary floating point to avoid\n+    // Choose values that map unambiguously to binary floating point to avoid\n     // rounding issues at the compiler side.\n     BOOST_CHECK_EQUAL(ser_uint64_to_double(0x0000000000000000ULL), 0.0);\n     BOOST_CHECK_EQUAL(ser_uint64_to_double(0x3fe0000000000000ULL), 0.5);"
      },
      {
        "sha": "c49c5d9eb2a83f39838a8d0e0a9e763a9b4508b3",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -372,7 +372,7 @@ class TorController\n     struct event *reconnect_ev;\n     float reconnect_timeout;\n     CService service;\n-    /** Cooie for SAFECOOKIE auth */\n+    /** Cookie for SAFECOOKIE auth */\n     std::vector<uint8_t> cookie;\n     /** ClientNonce for SAFECOOKIE auth */\n     std::vector<uint8_t> clientNonce;"
      },
      {
        "sha": "db1a02455f862fa1ac1b8bee2e316e123de1471c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -355,7 +355,7 @@ enum class MemPoolRemovalReason {\n  * Transactions are added when they are seen on the network (or created by the\n  * local node), but not all transactions seen are added to the pool. For\n  * example, the following new transactions will not be added to the mempool:\n- * - a transaction which doesn't make the mimimum fee requirements.\n+ * - a transaction which doesn't meet the minimum fee requirements.\n  * - a new transaction that double-spends an input of a transaction already in\n  * the pool where the new transaction does not meet the Replace-By-Fee\n  * requirements as defined in BIP 125."
      },
      {
        "sha": "c7b3e4f168655260f38c381b050706d18d23ce5a",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -63,7 +63,7 @@ void MilliSleep(int64_t n)\n {\n \n /**\n- * Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n+ * Boost's sleep_for was uninterruptible when backed by nanosleep from 1.50\n  * until fixed in 1.52. Use the deprecated sleep method for the broken case.\n  * See: https://svn.boost.org/trac/boost/ticket/7238\n  */"
      },
      {
        "sha": "517202a9bb84a6441e011f00b9f2ae21d060628a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fea960ca917b73aff853fe88476174c8a313863/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fea960ca917b73aff853fe88476174c8a313863/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0fea960ca917b73aff853fe88476174c8a313863",
        "patch": "@@ -2576,7 +2576,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // BIP125 defines opt-in RBF as any nSequence < maxint-1, so\n                 // we use the highest possible value in that range (maxint-2)\n                 // to avoid conflicting with other possible uses of nSequence,\n-                // and in the spirit of \"smallest posible change from prior\n+                // and in the spirit of \"smallest possible change from prior\n                 // behavior.\"\n                 for (const auto& coin : setCoins)\n                     txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(),"
      }
    ]
  },
  {
    "sha": "5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjYyZTNlYjYzODFlNDU1YTFiODNhYjZmYjM2OGExMzIxMjRkMmEz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-29T17:19:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-29T17:19:55Z"
      },
      "message": "Fix typos",
      "tree": {
        "sha": "eef3a02c5c59b6d75a3c35b7f3ad4cba38d9d8a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eef3a02c5c59b6d75a3c35b7f3ad4cba38d9d8a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fea960ca917b73aff853fe88476174c8a313863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fea960ca917b73aff853fe88476174c8a313863",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fea960ca917b73aff853fe88476174c8a313863"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6ee5df47039e6f732b46e421d02f81bf5ccbf24a",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -41,7 +41,7 @@ Options:\n -c|--commit\tIndicate that the version argument is for a commit or branch\n -u|--url\tSpecify the URL of the repository. Default is https://github.com/bitcoin/bitcoin\n -v|--verify \tVerify the gitian build\n--b|--build\tDo a gitiain build\n+-b|--build\tDo a gitian build\n -s|--sign\tMake signed binaries for Windows and Mac OSX\n -B|--buildsign\tBuild both signed and unsigned binaries\n -o|--os\t\tSpecify which Operating Systems the build is for. Default is lwx. l for linux, w for windows, x for osx"
      },
      {
        "sha": "5995f9f438983b6050c361459af41c1eb5056fee",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -340,7 +340,7 @@ def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploym\n         # install_name_tool the new id into the binary\n         changeInstallName(framework.installName, framework.deployedInstallName, binaryPath, verbose)\n         \n-        # Copy farmework to app bundle.\n+        # Copy framework to app bundle.\n         deployedBinaryPath = copyFramework(framework, bundlePath, verbose)\n         # Skip the rest if already was deployed.\n         if deployedBinaryPath is None:\n@@ -492,7 +492,7 @@ ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, h\n ap.add_argument(\"-sign\", dest=\"sign\", action=\"store_true\", default=False, help=\"sign .app bundle with codesign tool\")\n ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n-ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's ressources; the language list must be separated with commas, not with whitespace\")\n+ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's resources; the language list must be separated with commas, not with whitespace\")\n ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")"
      },
      {
        "sha": "e1fd0b317b0ed8329856048f1f20aaef58eac0cc",
        "filename": "contrib/rpm/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/rpm/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/contrib/rpm/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/README.md?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -31,7 +31,7 @@ through `Source23` are used.\n Sources 30-39 should be reserved for SELinux related files. Currently only\n `Source30` through `Source32` are used. Until those files are in a tagged\n release, the full URL specified in the RPM spec file will not work. You can get\n-them from the git ropository where you retrieved this file.\n+them from the git repository where you retrieved this file.\n \n Sources 100+ are for files that are not source tarballs and are not maintained\n in the bitcoin git repository. At present only an SVG version of the Bitcoin"
      },
      {
        "sha": "8d50144c21f9bd3726b9b12e09e8c3ff44d6e595",
        "filename": "share/certs/PrivateKeyNotes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/share/certs/PrivateKeyNotes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/share/certs/PrivateKeyNotes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/certs/PrivateKeyNotes.md?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -2,7 +2,7 @@ Code-signing private key notes\n ==\n \n The private keys for these certificates were generated on Gavin's main work machine,\n-following the certificate authoritys' recommendations for generating certificate\n+following the certificate authority's recommendations for generating certificate\n signing requests.\n \n For OSX, the private key was generated by Keychain.app on Gavin's main work machine."
      },
      {
        "sha": "1c1acb6b1038b9f5f6d4134979e434bdb0e823c3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -770,7 +770,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     if (!clientModel)\n         return;\n \n-    // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbelled text)\n+    // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbled text)\n     statusBar()->clearMessage();\n \n     // Acquire current block source"
      },
      {
        "sha": "5d6c0e2e31f252a5a0d06be45c0e46e53d8fc712",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -536,7 +536,7 @@ int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)\n     return nResult;\n }\n \n-// Make sure we don't make the columns wider than the tables viewport width.\n+// Make sure we don't make the columns wider than the table's viewport width.\n void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n {\n     disconnectViewHeadersSignals();\n@@ -570,7 +570,7 @@ void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int o\n     }\n }\n \n-// When the tabless geometry is ready, we manually perform the stretch of the \"Message\" column,\n+// When the table's geometry is ready, we manually perform the stretch of the \"Message\" column,\n // as the \"Stretch\" resize mode does not allow for interactive resizing.\n void TableViewLastColumnResizingFixer::on_geometriesChanged()\n {"
      },
      {
        "sha": "913aa5e24bf113349a030be978b0f5e7a43d23d7",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f62e3eb6381e455a1b83ab6fb368a132124d2a3/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "patch": "@@ -140,7 +140,7 @@ namespace GUIUtil\n      * Also makes sure the column widths are never larger than the table's viewport.\n      * In Qt, all columns are resizable from the right, but it's not intuitive resizing the last column from the right.\n      * Usually our second to last columns behave as if stretched, and when on strech mode, columns aren't resizable\n-     * interactively or programatically.\n+     * interactively or programmatically.\n      *\n      * This helper object takes care of this issue.\n      *"
      }
    ]
  },
  {
    "sha": "720b5794803444f7afd965490975f46bc23fdab2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjBiNTc5NDgwMzQ0NGY3YWZkOTY1NDkwOTc1ZjQ2YmMyM2ZkYWIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T08:00:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T08:15:29Z"
      },
      "message": "Merge #9646: depends: Fix cross build for qt5.7\n\nb5f374f qt: fix build with zlib for target (Cory Fields)\n8efa34f depends: add a zlib build (Cory Fields)\n342eb96 build: find qt's renamed helper libs from 5.7 (Cory Fields)",
      "tree": {
        "sha": "f148c60dd3a58537f4b46e09f23b037c1828c42a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f148c60dd3a58537f4b46e09f23b037c1828c42a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/720b5794803444f7afd965490975f46bc23fdab2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjvYhAAoJEHSBCwEjRsmmS74H/1+Pql009foJRGhTTXnHR2II\nniPfv0ekM7+f8iTW5TnCZ8l8PpEcCxFNALXyoYZHKbjtrRH5Y32uKzqwtqvAHGWX\nimu1Wl56dM+6bJMBsV5/tPrWnI2kQ6xX/cgIMgk/yQctQSrOFvTseQ7U6dnChB+0\nub5LKwfkQE771CIhckgjJPv4/yyo6RWG9kOBY4S66qAma+107pqfJsyFWK/bx8zb\nyjFJvGzA+xw0oBj4PRhE5cYYLg9+UG5pEI6aQaXi/CrTraJYZVOTkKnTPeNnHd7Q\n3nwKXZaFwJ8gowup0G7qLxyba+eVRgotPZ89AowFZ2rSidT+c2dAG60tHkXjdP8=\n=2F+H\n-----END PGP SIGNATURE-----",
        "payload": "tree f148c60dd3a58537f4b46e09f23b037c1828c42a\nparent 0fea960ca917b73aff853fe88476174c8a313863\nparent b5f374fef71ba2ba99e3d9629b66fd1491fd7c90\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485763251 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485764129 +0100\n\nMerge #9646: depends: Fix cross build for qt5.7\n\nb5f374f qt: fix build with zlib for target (Cory Fields)\n8efa34f depends: add a zlib build (Cory Fields)\n342eb96 build: find qt's renamed helper libs from 5.7 (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/720b5794803444f7afd965490975f46bc23fdab2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/720b5794803444f7afd965490975f46bc23fdab2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/720b5794803444f7afd965490975f46bc23fdab2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fea960ca917b73aff853fe88476174c8a313863",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fea960ca917b73aff853fe88476174c8a313863",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fea960ca917b73aff853fe88476174c8a313863"
      },
      {
        "sha": "b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5f374fef71ba2ba99e3d9629b66fd1491fd7c90"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 43,
      "deletions": 15
    },
    "files": [
      {
        "sha": "f43fc3037f3d583eeefe358c8102540a30da7e39",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -473,8 +473,8 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   ])\n \n   BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([png] ,[main],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([jpeg] ,[main],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([jpeg_create_decompress] ,[qtjpeg jpeg],,AC_MSG_WARN([libjpeg not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n   BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))"
      },
      {
        "sha": "088723ebd0d56d6bc2ca2eba20597d52e142ac02",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -2,7 +2,7 @@ packages:=boost openssl libevent zeromq\n native_packages := native_ccache\n \n qt_native_packages = native_protobuf\n-qt_packages = qrencode protobuf\n+qt_packages = qrencode protobuf zlib\n \n qt_x86_64_linux_packages:=qt expat dbus libxcb xcb_proto libXau xproto freetype fontconfig libX11 xextproto libXext xtrans\n qt_i686_linux_packages:=$(qt_x86_64_linux_packages)"
      },
      {
        "sha": "bbfdb766ed694025c0124140c00b3044ca362d02",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -4,7 +4,7 @@ $(package)_download_path=http://download.qt.io/official_releases/qt/5.7/$($(pack\n $(package)_suffix=opensource-src-$($(package)_version).tar.gz\n $(package)_file_name=qtbase-$($(package)_suffix)\n $(package)_sha256_hash=95f83e532d23b3ddbde7973f380ecae1bac13230340557276f75f2e37984e410\n-$(package)_dependencies=openssl\n+$(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n@@ -73,7 +73,7 @@ $(package)_config_opts += -prefix $(host_prefix)\n $(package)_config_opts += -qt-libpng\n $(package)_config_opts += -qt-libjpeg\n $(package)_config_opts += -qt-pcre\n-$(package)_config_opts += -qt-zlib\n+$(package)_config_opts += -system-zlib\n $(package)_config_opts += -reduce-exports\n $(package)_config_opts += -static\n $(package)_config_opts += -silent\n@@ -140,19 +140,22 @@ define $(package)_preprocess_cmds\n   patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n-  echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n-  sed -i.old \"s|QMAKE_CFLAGS            = |QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_LFLAGS            = |QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n-  sed -i.old \"s|QMAKE_CXXFLAGS          = |QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n+  echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  sed -i.old \"s|QMAKE_CFLAGS            = |!host_build: QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_LFLAGS            = |!host_build: QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_CXXFLAGS          = |!host_build: QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n+\n endef\n \n define $(package)_config_cmds\n   export PKG_CONFIG_SYSROOT_DIR=/ && \\\n   export PKG_CONFIG_LIBDIR=$(host_prefix)/lib/pkgconfig && \\\n   export PKG_CONFIG_PATH=$(host_prefix)/share/pkgconfig  && \\\n   ./configure $($(package)_config_opts) && \\\n+  echo \"host_build: QT_CONFIG ~= s/system-zlib/zlib\" >> mkspecs/qconfig.pri && \\\n+  echo \"CONFIG += force_bootstrap\" >> mkspecs/qconfig.pri && \\\n   $(MAKE) sub-src-clean && \\\n   cd ../qttranslations && ../qtbase/bin/qmake qttranslations.pro -o Makefile && \\\n   cd translations && ../../qtbase/bin/qmake translations.pro -o Makefile && cd ../.. &&\\"
      },
      {
        "sha": "7ff5d00bbdc6494f43cf5a164509377dff6c6d49",
        "filename": "depends/packages/zlib.mk",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/zlib.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/depends/packages/zlib.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zlib.mk?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -0,0 +1,25 @@\n+package=zlib\n+$(package)_version=1.2.11\n+$(package)_download_path=http://www.zlib.net\n+$(package)_file_name=$(package)-$($(package)_version).tar.gz\n+$(package)_sha256_hash=c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1\n+\n+define $(package)_set_vars\n+$(package)_build_opts= CC=\"$($(package)_cc)\"\n+$(package)_build_opts+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags) -fPIC\"\n+$(package)_build_opts+=AR=\"$($(package)_ar)\"\n+$(package)_build_opts+=RANLIB=\"$($(package)_ranlib)\"\n+endef\n+\n+define $(package)_config_cmds\n+  ./configure --static --prefix=$(host_prefix)\n+endef\n+\n+define $(package)_build_cmds\n+  $(MAKE) $($(package)_build_opts) libz.a\n+endef\n+\n+define $(package)_stage_cmds\n+  $(MAKE) DESTDIR=$($(package)_staging_dir) install $($(package)_build_opts)\n+endef\n+"
      },
      {
        "sha": "ca70d30b15e9c4115f1e7c2ac885858244fd123b",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/720b5794803444f7afd965490975f46bc23fdab2/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/720b5794803444f7afd965490975f46bc23fdab2/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=720b5794803444f7afd965490975f46bc23fdab2",
        "patch": "@@ -14,10 +14,10 @@ QMAKE_MAC_SDK.macosx.Path = $${MAC_SDK_PATH}\n QMAKE_MAC_SDK.macosx.platform_name = macosx\n QMAKE_MAC_SDK.macosx.SDKVersion = $${MAC_SDK_VERSION}\n QMAKE_MAC_SDK.macosx.PlatformPath = /phony\n-QMAKE_CFLAGS += -target $${MAC_TARGET}\n-QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n-QMAKE_CXXFLAGS += $$QMAKE_CFLAGS\n-QMAKE_LFLAGS += -target $${MAC_TARGET} -mlinker-version=$${MAC_LD64_VERSION}\n+!host_build: QMAKE_CFLAGS += -target $${MAC_TARGET}\n+!host_build: QMAKE_OBJECTIVE_CFLAGS += $$QMAKE_CFLAGS\n+!host_build: QMAKE_CXXFLAGS += $$QMAKE_CFLAGS\n+!host_build: QMAKE_LFLAGS += -target $${MAC_TARGET} -mlinker-version=$${MAC_LD64_VERSION}\n QMAKE_AR = $${CROSS_COMPILE}ar cq\n QMAKE_RANLIB=$${CROSS_COMPILE}ranlib\n QMAKE_LIBTOOL=$${CROSS_COMPILE}libtool"
      }
    ]
  },
  {
    "sha": "d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmM5ZTRkNDIyOTE3NDIyNWFkMGMzZWQ5ZGMzNjYzMjRlZDVkZDNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T09:07:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T09:38:56Z"
      },
      "message": "Merge #9615: Wallet incremental fee\n\n4b189c1 Change bumpfee result value from 'oldfee' to 'origfee'. (Alex Morcos)\n0c0c63f Introduce WALLET_INCREMENTAL_RELAY_FEE (Alex Morcos)\ne8021ec Use CWallet::GetMinimumFee in bumpfee (Alex Morcos)\nae9719a Refactor GetMinimumFee to give option of providing targetFee (Alex Morcos)\nfe8e8ef [rpc] Add incremental relay fee to getnetworkinfo (Alex Morcos)\n6b331e6 Fix to have miner test aware of new separate block min tx fee (Alex Morcos)\nde6400d Fix missing use of dustRelayFee (Alex Morcos)\n5b15870 Use incrementalRelayFee for BIP 125 replacement (Alex Morcos)",
      "tree": {
        "sha": "4aec2a7be4890d08e514f0b115f9e3ec53d3331c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4aec2a7be4890d08e514f0b115f9e3ec53d3331c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjwmwAAoJEHSBCwEjRsmmqMoH/2Gh6nZG7+Ofg9BPfR2Jcz7l\nhseLxcaTFs8sCvJfK0h5dif1BTQLcFMNcj/yvx5NM2m+s5WNllK68XQrUdLVUnRG\nH10v0IO7UD3O4FkwPxkn92h/xpqafhFZyL3aL2f/1HgTlz0ThuOM0d+tl9QSKkt0\niFOIpV8ggF+SXDqlps83UK/J12PxzdIUSz+vKXf0Lez5EjTLHoiFCUc01WJQoXmM\nrp9PmAp5Dv9G6eR8eB1GhCqyX/pYoSBmPXKK6vF2Gi+BdJBqsQPBA9bvecBm7iZx\nWFaxtDwYu0r9FIiAe0ojTb4JbXF343KMhG8T+oHM90I7IN8iBk5bz2u+gHJQXWg=\n=QDYg\n-----END PGP SIGNATURE-----",
        "payload": "tree 4aec2a7be4890d08e514f0b115f9e3ec53d3331c\nparent 720b5794803444f7afd965490975f46bc23fdab2\nparent 4b189c13401bcd350c05cf8194beaeb3d18b3ebc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485767241 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485769136 +0100\n\nMerge #9615: Wallet incremental fee\n\n4b189c1 Change bumpfee result value from 'oldfee' to 'origfee'. (Alex Morcos)\n0c0c63f Introduce WALLET_INCREMENTAL_RELAY_FEE (Alex Morcos)\ne8021ec Use CWallet::GetMinimumFee in bumpfee (Alex Morcos)\nae9719a Refactor GetMinimumFee to give option of providing targetFee (Alex Morcos)\nfe8e8ef [rpc] Add incremental relay fee to getnetworkinfo (Alex Morcos)\n6b331e6 Fix to have miner test aware of new separate block min tx fee (Alex Morcos)\nde6400d Fix missing use of dustRelayFee (Alex Morcos)\n5b15870 Use incrementalRelayFee for BIP 125 replacement (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "720b5794803444f7afd965490975f46bc23fdab2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/720b5794803444f7afd965490975f46bc23fdab2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/720b5794803444f7afd965490975f46bc23fdab2"
      },
      {
        "sha": "4b189c13401bcd350c05cf8194beaeb3d18b3ebc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b189c13401bcd350c05cf8194beaeb3d18b3ebc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b189c13401bcd350c05cf8194beaeb3d18b3ebc"
      }
    ],
    "stats": {
      "total": 106,
      "additions": 70,
      "deletions": 36
    },
    "files": [
      {
        "sha": "f590db5efaa7474c438a6b4a70a55d9a32a16e2a",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -10,6 +10,7 @@\n #include \"net.h\"\n #include \"net_processing.h\"\n #include \"netbase.h\"\n+#include \"policy/policy.h\"\n #include \"protocol.h\"\n #include \"sync.h\"\n #include \"timedata.h\"\n@@ -417,6 +418,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\"\n@@ -447,6 +449,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n     }\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n     obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK())));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "f856d8a91a704b20b29c42cf74e2f06d7d9def64",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -9,6 +9,7 @@\n #include \"consensus/validation.h\"\n #include \"validation.h\"\n #include \"miner.h\"\n+#include \"policy/policy.h\"\n #include \"pubkey.h\"\n #include \"script/standard.h\"\n #include \"txmempool.h\"\n@@ -24,6 +25,8 @@\n \n BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n \n+static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n+\n static\n struct {\n     unsigned char extranonce;\n@@ -112,16 +115,16 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n \n-    // Test that a package below the min relay fee doesn't get included\n+    // Test that a package below the block min tx fee doesn't get included\n     tx.vin[0].prevout.hash = hashHighFeeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000; // 0 fee\n     uint256 hashFreeTx = tx.GetHash();\n     mempool.addUnchecked(hashFreeTx, entry.Fee(0).FromTx(tx));\n     size_t freeTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n     // Calculate a fee on child transaction that will put the package just\n-    // below the min relay fee (assuming 1 child tx of the same size).\n-    CAmount feeToUse = minRelayTxFee.GetFee(2*freeTxSize) - 1;\n+    // below the block min tx fee (assuming 1 child tx of the same size).\n+    CAmount feeToUse = blockMinFeeRate.GetFee(2*freeTxSize) - 1;\n \n     tx.vin[0].prevout.hash = hashFreeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n@@ -158,7 +161,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     // This tx can't be mined by itself\n     tx.vin[0].prevout.hash = hashFreeTx2;\n     tx.vout.resize(1);\n-    feeToUse = minRelayTxFee.GetFee(freeTxSize);\n+    feeToUse = blockMinFeeRate.GetFee(freeTxSize);\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx2, entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));"
      },
      {
        "sha": "3142b32914475252f42706d139f1a1fcbc5bdc0a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -932,14 +932,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // Finally in addition to paying more fees than the conflicts the\n             // new transaction must pay for its own bandwidth.\n             CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-            if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n+            if (nDeltaFees < ::incrementalRelayFee.GetFee(nSize))\n             {\n                 return state.DoS(0, false,\n                         REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                         strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                               hash.ToString(),\n                               FormatMoney(nDeltaFees),\n-                              FormatMoney(::minRelayTxFee.GetFee(nSize))));\n+                              FormatMoney(::incrementalRelayFee.GetFee(nSize))));\n             }\n         }\n "
      },
      {
        "sha": "bfc738afadfb874eb88be42bae508aa986f82e25",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 28,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -2682,8 +2682,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n             \"The user can specify a confirmation target for estimatefee.\\n\"\n             \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n-            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n-            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n+            \"returned by getnetworkinfo) to enter the node's mempool.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. txid                  (string, required) The txid to be bumped\\n\"\n             \"2. options               (object, optional)\\n\"\n@@ -2704,8 +2704,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n-            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n-            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n@@ -2769,6 +2769,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n     }\n \n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n     // optional parameters\n     bool specifiedConfirmTarget = false;\n     int newConfirmTarget = nTxConfirmTarget;\n@@ -2794,10 +2798,11 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             }\n         } else if (options.exists(\"totalFee\")) {\n             totalFee = options[\"totalFee\"].get_int64();\n-            if (totalFee <= 0) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n-            } else if (totalFee > maxTxFee) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+            CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n+            if (totalFee < requiredFee ) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                                   strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+                                             FormatMoney(requiredFee)));\n             }\n         }\n \n@@ -2806,42 +2811,53 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n-    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n-    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n-\n     // calculate the old fee and fee-rate\n     CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(nOldFee, txSize);\n     CAmount nNewFee;\n     CFeeRate nNewFeeRate;\n+    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n+    // future proof against changes to network wide policy for incremental relay\n+    // fee that our node may not be aware of.\n+    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n+    if (::incrementalRelayFee > walletIncrementalRelayFee) {\n+        walletIncrementalRelayFee = ::incrementalRelayFee;\n+    }\n \n     if (totalFee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + ::incrementalRelayFee.GetFee(maxNewTxSize);\n         if (totalFee < minTotalFee) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n         }\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n-        if (!specifiedConfirmTarget && payTxFee.GetFeePerK() != 0) {\n-            nNewFeeRate = payTxFee;\n-        } else {\n-            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        // if user specified a confirm target then don't consider any global payTxFee\n+        if (specifiedConfirmTarget) {\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool, CAmount(0));\n         }\n-        if (nNewFeeRate.GetFeePerK() == 0) {\n-            nNewFeeRate = CWallet::fallbackFee;\n+        // otherwise use the regular wallet logic to select payTxFee or default confirm target\n+        else {\n+            nNewFee = CWallet::GetMinimumFee(maxNewTxSize, newConfirmTarget, mempool);\n         }\n \n-        // new fee rate must be at least old rate + minimum relay rate\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n-        }\n+        nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n-        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+        // New fee rate must be at least old rate + minimum incremental relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK());\n+            nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+        }\n     }\n \n+    // Check that in all cases the new fee doesn't violate maxTxFee\n+     if (nNewFee > maxTxFee) {\n+         throw JSONRPCError(RPC_MISC_ERROR,\n+                            strprintf(\"Specified or calculated fee %s is too high (cannot be higher than maxTxFee %s)\",\n+                                      FormatMoney(nNewFee), FormatMoney(maxTxFee)));\n+     }\n+\n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n     // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n@@ -2864,7 +2880,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n-    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+    if (poutput->nValue <= poutput->GetDustThreshold(::dustRelayFee)) {\n         LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n         nNewFee += poutput->nValue;\n         tx.vout.erase(tx.vout.begin() + nOutput);\n@@ -2913,7 +2929,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n-    result.push_back(Pair(\"oldfee\", ValueFromAmount(nOldFee)));\n+    result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n \n     return result;"
      },
      {
        "sha": "9a5f35b6e3702045a0310023885451abbc40a478",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -2802,8 +2802,13 @@ CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n \n CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n {\n-    // payTxFee is user-set \"I want to pay this much\"\n-    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n+    // payTxFee is the user-set global for desired feerate\n+    return GetMinimumFee(nTxBytes, nConfirmTarget, pool, payTxFee.GetFee(nTxBytes));\n+}\n+\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, CAmount targetFee)\n+{\n+    CAmount nFeeNeeded = targetFee;\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0) {\n         int estimateFoundTarget = nConfirmTarget;"
      },
      {
        "sha": "200ec0cba2bc444be183ea79775cabeff6b213fa",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "patch": "@@ -48,6 +48,8 @@ static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n static const CAmount DEFAULT_FALLBACK_FEE = 20000;\n //! -mintxfee default\n static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n+//! minimum recommended increment for BIP 125 replacement txs\n+static const CAmount WALLET_INCREMENTAL_RELAY_FEE = 5000;\n //! target minimum change amount\n static const CAmount MIN_CHANGE = CENT;\n //! final minimum change amount after paying for fees\n@@ -802,6 +804,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * and the required fee\n      */\n     static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n+    /**\n+     * Estimate the minimum fee considering required fee and targetFee or if 0\n+     * then fee estimation for nConfirmTarget\n+     */\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, CAmount targetFee);\n     /**\n      * Return the minimum required fee taking into account the\n      * floating relay fee and user set minimum transaction fee"
      }
    ]
  },
  {
    "sha": "36966a1c0e6415964008c679c1a01d9883486e87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjk2NmExYzBlNjQxNTk2NDAwOGM2NzljMWEwMWQ5ODgzNDg2ZTg3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T11:44:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T11:48:43Z"
      },
      "message": "Merge #9626: Clean up a few CConnman cs_vNodes/CNode things\n\n2366180 Do not add to vNodes until fOneShot/fFeeler/fAddNode have been set (Matt Corallo)\n3c37dc4 Ensure cs_vNodes is held when using the return value from FindNode (Matt Corallo)\n5be0190 Delete some unused (and broken) functions in CConnman (Matt Corallo)",
      "tree": {
        "sha": "38605d1ae60dee2ff6943b4a2535a6c163164b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38605d1ae60dee2ff6943b4a2535a6c163164b85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36966a1c0e6415964008c679c1a01d9883486e87",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjygbAAoJEHSBCwEjRsmmU/0H/j711RE/EGSSM94Gsr2L3fe2\nkaCTCsqvYX/QaI+3dqdxP1WNoCN1mOirzyyefrgZmGPCDUJE+SNgAqwjx5Y0Wc9k\nP5rBS54aou1MdUxUlGbM57Z8uKNlsS9HZch2Pn4p5344n721luFq87X7UObkAWS1\nrd9AQXZ8utO8jo0w2D5RmDVYBuLNHiyd3bmk4oXizoV/z1cyitXKZRs9FVDUBBY8\nC/vMgFnkW/CdTvWQLwBvz4tqYq/h9TO2NDGQnwtgYdiBv5bjs+dK5O5JJCtxaPf1\nV/jZW1GXrvXm2iZ6/LlCTZWWNK+V76usmfVg0Up+iGGLPjm7ptSQuzUmySwlUk8=\n=Yda0\n-----END PGP SIGNATURE-----",
        "payload": "tree 38605d1ae60dee2ff6943b4a2535a6c163164b85\nparent d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b\nparent 236618061a445d2cb11e722cfac5fdae5be26abb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485776648 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485776923 +0100\n\nMerge #9626: Clean up a few CConnman cs_vNodes/CNode things\n\n2366180 Do not add to vNodes until fOneShot/fFeeler/fAddNode have been set (Matt Corallo)\n3c37dc4 Ensure cs_vNodes is held when using the return value from FindNode (Matt Corallo)\n5be0190 Delete some unused (and broken) functions in CConnman (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36966a1c0e6415964008c679c1a01d9883486e87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36966a1c0e6415964008c679c1a01d9883486e87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36966a1c0e6415964008c679c1a01d9883486e87/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2c9e4d4229174225ad0c3ed9dc366324ed5dd3b"
      },
      {
        "sha": "236618061a445d2cb11e722cfac5fdae5be26abb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/236618061a445d2cb11e722cfac5fdae5be26abb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/236618061a445d2cb11e722cfac5fdae5be26abb"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 14,
      "deletions": 46
    },
    "files": [
      {
        "sha": "df88b12c76fd566bd2405f7396307c1a12990a16",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 42,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36966a1c0e6415964008c679c1a01d9883486e87/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36966a1c0e6415964008c679c1a01d9883486e87/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=36966a1c0e6415964008c679c1a01d9883486e87",
        "patch": "@@ -342,8 +342,8 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         CNode* pnode = FindNode((CService)addrConnect);\n         if (pnode)\n         {\n-            pnode->AddRef();\n-            return pnode;\n+            LogPrintf(\"Failed to open new connection, already connected\\n\");\n+            return NULL;\n         }\n     }\n \n@@ -369,18 +369,16 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             // In that case, drop the connection that was just created, and return the existing CNode instead.\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n+            LOCK(cs_vNodes);\n             CNode* pnode = FindNode((CService)addrConnect);\n             if (pnode)\n             {\n-                pnode->AddRef();\n-                {\n-                    LOCK(cs_vNodes);\n-                    if (pnode->addrName.empty()) {\n-                        pnode->addrName = std::string(pszDest);\n-                    }\n+                if (pnode->addrName.empty()) {\n+                    pnode->addrName = std::string(pszDest);\n                 }\n                 CloseSocket(hSocket);\n-                return pnode;\n+                LogPrintf(\"Failed to open new connection, already connected\\n\");\n+                return NULL;\n             }\n         }\n \n@@ -393,11 +391,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->nTimeConnected = GetSystemTimeInSeconds();\n         pnode->AddRef();\n-        GetNodeSignals().InitializeNode(pnode, *this);\n-        {\n-            LOCK(cs_vNodes);\n-            vNodes.push_back(pnode);\n-        }\n \n         return pnode;\n     } else if (!proxyConnectionFailed) {\n@@ -1840,6 +1833,12 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (fAddnode)\n         pnode->fAddnode = true;\n \n+    {\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(pnode);\n+    }\n+    GetNodeSignals().InitializeNode(pnode, *this);\n+\n     return true;\n }\n \n@@ -2371,26 +2370,9 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     }\n }\n \n-bool CConnman::DisconnectAddress(const CNetAddr& netAddr)\n-{\n-    if (CNode* pnode = FindNode(netAddr)) {\n-        pnode->fDisconnect = true;\n-        return true;\n-    }\n-    return false;\n-}\n-\n-bool CConnman::DisconnectSubnet(const CSubNet& subNet)\n-{\n-    if (CNode* pnode = FindNode(subNet)) {\n-        pnode->fDisconnect = true;\n-        return true;\n-    }\n-    return false;\n-}\n-\n bool CConnman::DisconnectNode(const std::string& strNode)\n {\n+    LOCK(cs_vNodes);\n     if (CNode* pnode = FindNode(strNode)) {\n         pnode->fDisconnect = true;\n         return true;\n@@ -2409,16 +2391,6 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n-void CConnman::RelayTransaction(const CTransaction& tx)\n-{\n-    CInv inv(MSG_TX, tx.GetHash());\n-    LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-    {\n-        pnode->PushInventory(inv);\n-    }\n-}\n-\n void CConnman::RecordBytesRecv(uint64_t bytes)\n {\n     LOCK(cs_totalBytesRecv);"
      },
      {
        "sha": "0b8efcc882ad50be9422084adc9963df9d8eade1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36966a1c0e6415964008c679c1a01d9883486e87/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36966a1c0e6415964008c679c1a01d9883486e87/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=36966a1c0e6415964008c679c1a01d9883486e87",
        "patch": "@@ -243,8 +243,6 @@ class CConnman\n         post();\n     };\n \n-    void RelayTransaction(const CTransaction& tx);\n-\n     // Addrman functions\n     size_t GetAddressCount() const;\n     void SetServices(const CService &addr, ServiceFlags nServices);\n@@ -286,10 +284,8 @@ class CConnman\n \n     size_t GetNodeCount(NumConnections num);\n     void GetNodeStats(std::vector<CNodeStats>& vstats);\n-    bool DisconnectAddress(const CNetAddr& addr);\n     bool DisconnectNode(const std::string& node);\n     bool DisconnectNode(NodeId id);\n-    bool DisconnectSubnet(const CSubNet& subnet);\n \n     unsigned int GetSendBufferSize() const;\n "
      }
    ]
  },
  {
    "sha": "668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjhkZTcwYmUwMzlhNGYxZmZjZjIwYWVhZTJhMjJlZTcxZmM1NWE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-30T12:13:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-30T12:13:20Z"
      },
      "message": "Merge #9644: [refactor] Remove using namespace <xxx> from src/\n\nb7b48c8 Refactor: Remove using namespace <xxx> from src/*.cpp. (Karl-Johan Alm)",
      "tree": {
        "sha": "e6baaf60d95d75452af3ebacd57da5479d4a3ebd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6baaf60d95d75452af3ebacd57da5479d4a3ebd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYjy3gAAoJEC1/I3LlD+E3/tAIAIyNgZED0//5K1J/nHv5dy6Z\n3Bavi/eu4RiAiQsd9JG8F0PNjt5TAEw45gaCSFgBmWpGXF2ofi5ZHePyOZLC3bn/\nkLF+AphTGHuak5YPoou0u6Hosnw0V6KlLncs0WNCVVa4qtkgD5wzafn6Rjz+1CUV\nzX6Mw9qPh0IXsk2Zj0/xr3h6K2T7rG5vN+tdMsC7BGyo4hc+tb7fEpKqPSrHg+F2\npxCrg3fuNXnnhKF3p5mmSdOe4vqzTf9dGPvdTO8ZP+/yjo8QiyGArMqajYzAWsI8\nZQIP8j+sZ/lXwhhbM1/t0831GtR8h2oQ1cSI5xpxUz+hJcEbj6+9tvf8BGzZUTQ=\n=Sc8+\n-----END PGP SIGNATURE-----",
        "payload": "tree e6baaf60d95d75452af3ebacd57da5479d4a3ebd\nparent 36966a1c0e6415964008c679c1a01d9883486e87\nparent b7b48c8bbdf7a90861610b035d8b0a247ef78c45\nauthor MarcoFalke <falke.marco@gmail.com> 1485778387 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1485778400 +0100\n\nMerge #9644: [refactor] Remove using namespace <xxx> from src/\n\nb7b48c8 Refactor: Remove using namespace <xxx> from src/*.cpp. (Karl-Johan Alm)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36966a1c0e6415964008c679c1a01d9883486e87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36966a1c0e6415964008c679c1a01d9883486e87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36966a1c0e6415964008c679c1a01d9883486e87"
      },
      {
        "sha": "b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7b48c8bbdf7a90861610b035d8b0a247ef78c45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7b48c8bbdf7a90861610b035d8b0a247ef78c45"
      }
    ],
    "stats": {
      "total": 385,
      "additions": 179,
      "deletions": 206
    },
    "files": [
      {
        "sha": "8d47cb76e8a58bebaf10b494776d240ea6793ca5",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 15,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -19,23 +19,21 @@\n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n #define LN2 0.6931471805599453094172321214581765680755001343602552\n \n-using namespace std;\n-\n CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :\n     /**\n      * The ideal size for a bloom filter with a given number of elements and false positive rate is:\n      * - nElements * log(fp rate) / ln(2)^2\n      * We ignore filter parameters which will create a bloom filter larger than the protocol limits\n      */\n-    vData(min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n+    vData(std::min((unsigned int)(-1  / LN2SQUARED * nElements * log(nFPRate)), MAX_BLOOM_FILTER_SIZE * 8) / 8),\n     /**\n      * The ideal number of hash functions is filter size * ln(2) / number of elements\n      * Again, we ignore filter parameters which will create a bloom filter with more hash functions than the protocol limits\n      * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n      */\n     isFull(false),\n     isEmpty(true),\n-    nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n+    nHashFuncs(std::min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n     nTweak(nTweakIn),\n     nFlags(nFlagsIn)\n {\n@@ -58,7 +56,7 @@ inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash) % (vData.size() * 8);\n }\n \n-void CBloomFilter::insert(const vector<unsigned char>& vKey)\n+void CBloomFilter::insert(const std::vector<unsigned char>& vKey)\n {\n     if (isFull)\n         return;\n@@ -75,17 +73,17 @@ void CBloomFilter::insert(const COutPoint& outpoint)\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    vector<unsigned char> data(stream.begin(), stream.end());\n+    std::vector<unsigned char> data(stream.begin(), stream.end());\n     insert(data);\n }\n \n void CBloomFilter::insert(const uint256& hash)\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n+    std::vector<unsigned char> data(hash.begin(), hash.end());\n     insert(data);\n }\n \n-bool CBloomFilter::contains(const vector<unsigned char>& vKey) const\n+bool CBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n {\n     if (isFull)\n         return true;\n@@ -105,13 +103,13 @@ bool CBloomFilter::contains(const COutPoint& outpoint) const\n {\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << outpoint;\n-    vector<unsigned char> data(stream.begin(), stream.end());\n+    std::vector<unsigned char> data(stream.begin(), stream.end());\n     return contains(data);\n }\n \n bool CBloomFilter::contains(const uint256& hash) const\n {\n-    vector<unsigned char> data(hash.begin(), hash.end());\n+    std::vector<unsigned char> data(hash.begin(), hash.end());\n     return contains(data);\n }\n \n@@ -154,7 +152,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n         // This means clients don't have to update the filter themselves when a new relevant tx \n         // is discovered in order to find spending transactions, which avoids round-tripping and race conditions.\n         CScript::const_iterator pc = txout.scriptPubKey.begin();\n-        vector<unsigned char> data;\n+        std::vector<unsigned char> data;\n         while (pc < txout.scriptPubKey.end())\n         {\n             opcodetype opcode;\n@@ -168,7 +166,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n                 else if ((nFlags & BLOOM_UPDATE_MASK) == BLOOM_UPDATE_P2PUBKEY_ONLY)\n                 {\n                     txnouttype type;\n-                    vector<vector<unsigned char> > vSolutions;\n+                    std::vector<std::vector<unsigned char> > vSolutions;\n                     if (Solver(txout.scriptPubKey, type, vSolutions) &&\n                             (type == TX_PUBKEY || type == TX_MULTISIG))\n                         insert(COutPoint(hash, i));\n@@ -189,7 +187,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n \n         // Match if the filter contains any arbitrary script data element in any scriptSig in tx\n         CScript::const_iterator pc = txin.scriptSig.begin();\n-        vector<unsigned char> data;\n+        std::vector<unsigned char> data;\n         while (pc < txin.scriptSig.end())\n         {\n             opcodetype opcode;\n@@ -280,7 +278,7 @@ void CRollingBloomFilter::insert(const std::vector<unsigned char>& vKey)\n \n void CRollingBloomFilter::insert(const uint256& hash)\n {\n-    vector<unsigned char> vData(hash.begin(), hash.end());\n+    std::vector<unsigned char> vData(hash.begin(), hash.end());\n     insert(vData);\n }\n \n@@ -300,7 +298,7 @@ bool CRollingBloomFilter::contains(const std::vector<unsigned char>& vKey) const\n \n bool CRollingBloomFilter::contains(const uint256& hash) const\n {\n-    vector<unsigned char> vData(hash.begin(), hash.end());\n+    std::vector<unsigned char> vData(hash.begin(), hash.end());\n     return contains(vData);\n }\n "
      },
      {
        "sha": "a5b369c4fc4c3e11eb6e33a0e5fc47a9e90b8752",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -5,8 +5,6 @@\n \n #include \"chain.h\"\n \n-using namespace std;\n-\n /**\n  * CChain implementation\n  */"
      },
      {
        "sha": "a5f232c22857a05b55ae3f79a3106122300065ea",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 16,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -20,13 +20,11 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/assign/list_of.hpp>\n \n-using namespace std;\n-\n CScript ParseScript(const std::string& s)\n {\n     CScript result;\n \n-    static map<string, opcodetype> mapOpNames;\n+    static std::map<std::string, opcodetype> mapOpNames;\n \n     if (mapOpNames.empty())\n     {\n@@ -39,15 +37,15 @@ CScript ParseScript(const std::string& s)\n             const char* name = GetOpName((opcodetype)op);\n             if (strcmp(name, \"OP_UNKNOWN\") == 0)\n                 continue;\n-            string strName(name);\n+            std::string strName(name);\n             mapOpNames[strName] = (opcodetype)op;\n             // Convenience: OP_ADD and just ADD are both recognized:\n             boost::algorithm::replace_first(strName, \"OP_\", \"\");\n             mapOpNames[strName] = (opcodetype)op;\n         }\n     }\n \n-    vector<string> words;\n+    std::vector<std::string> words;\n     boost::algorithm::split(words, s, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n \n     for (std::vector<std::string>::const_iterator w = words.begin(); w != words.end(); ++w)\n@@ -57,16 +55,16 @@ CScript ParseScript(const std::string& s)\n             // Empty string, ignore. (boost::split given '' will return one word)\n         }\n         else if (all(*w, boost::algorithm::is_digit()) ||\n-            (boost::algorithm::starts_with(*w, \"-\") && all(string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n+            (boost::algorithm::starts_with(*w, \"-\") && all(std::string(w->begin()+1, w->end()), boost::algorithm::is_digit())))\n         {\n             // Number\n             int64_t n = atoi64(*w);\n             result << n;\n         }\n-        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(string(w->begin()+2, w->end())))\n+        else if (boost::algorithm::starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(std::string(w->begin()+2, w->end())))\n         {\n             // Raw hex data, inserted NOT pushed onto stack:\n-            std::vector<unsigned char> raw = ParseHex(string(w->begin()+2, w->end()));\n+            std::vector<unsigned char> raw = ParseHex(std::string(w->begin()+2, w->end()));\n             result.insert(result.end(), raw.begin(), raw.end());\n         }\n         else if (w->size() >= 2 && boost::algorithm::starts_with(*w, \"'\") && boost::algorithm::ends_with(*w, \"'\"))\n@@ -83,7 +81,7 @@ CScript ParseScript(const std::string& s)\n         }\n         else\n         {\n-            throw runtime_error(\"script parse error\");\n+            throw std::runtime_error(\"script parse error\");\n         }\n     }\n \n@@ -95,7 +93,7 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTry\n     if (!IsHex(strHexTx))\n         return false;\n \n-    vector<unsigned char> txData(ParseHex(strHexTx));\n+    std::vector<unsigned char> txData(ParseHex(strHexTx));\n \n     if (fTryNoWitness) {\n         CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n@@ -138,9 +136,9 @@ bool DecodeHexBlk(CBlock& block, const std::string& strHexBlk)\n     return true;\n }\n \n-uint256 ParseHashUV(const UniValue& v, const string& strName)\n+uint256 ParseHashUV(const UniValue& v, const std::string& strName)\n {\n-    string strHex;\n+    std::string strHex;\n     if (v.isStr())\n         strHex = v.getValStr();\n     return ParseHashStr(strHex, strName);  // Note: ParseHashStr(\"\") throws a runtime_error\n@@ -149,19 +147,19 @@ uint256 ParseHashUV(const UniValue& v, const string& strName)\n uint256 ParseHashStr(const std::string& strHex, const std::string& strName)\n {\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n-        throw runtime_error(strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n \n     uint256 result;\n     result.SetHex(strHex);\n     return result;\n }\n \n-vector<unsigned char> ParseHexUV(const UniValue& v, const string& strName)\n+std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)\n {\n-    string strHex;\n+    std::string strHex;\n     if (v.isStr())\n         strHex = v.getValStr();\n     if (!IsHex(strHex))\n-        throw runtime_error(strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n     return ParseHex(strHex);\n }"
      },
      {
        "sha": "b0993a131f02a8be24b33d36b8b43c60225d12de",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 22,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -18,16 +18,14 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n-using namespace std;\n-\n-string FormatScript(const CScript& script)\n+std::string FormatScript(const CScript& script)\n {\n-    string ret;\n+    std::string ret;\n     CScript::const_iterator it = script.begin();\n     opcodetype op;\n     while (it != script.end()) {\n         CScript::const_iterator it2 = it;\n-        vector<unsigned char> vch;\n+        std::vector<unsigned char> vch;\n         if (script.GetOp2(it, op, &vch)) {\n             if (op == OP_0) {\n                 ret += \"0 \";\n@@ -36,9 +34,9 @@ string FormatScript(const CScript& script)\n                 ret += strprintf(\"%i \", op - OP_1NEGATE - 1);\n                 continue;\n             } else if (op >= OP_NOP && op <= OP_NOP10) {\n-                string str(GetOpName(op));\n-                if (str.substr(0, 3) == string(\"OP_\")) {\n-                    ret += str.substr(3, string::npos) + \" \";\n+                std::string str(GetOpName(op));\n+                if (str.substr(0, 3) == std::string(\"OP_\")) {\n+                    ret += str.substr(3, std::string::npos) + \" \";\n                     continue;\n                 }\n             }\n@@ -55,14 +53,14 @@ string FormatScript(const CScript& script)\n     return ret.substr(0, ret.size() - 1);\n }\n \n-const map<unsigned char, string> mapSigHashTypes =\n+const std::map<unsigned char, std::string> mapSigHashTypes =\n     boost::assign::map_list_of\n-    (static_cast<unsigned char>(SIGHASH_ALL), string(\"ALL\"))\n-    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), string(\"ALL|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE), string(\"NONE\"))\n-    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), string(\"NONE|ANYONECANPAY\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE), string(\"SINGLE\"))\n-    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), string(\"SINGLE|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_ALL), std::string(\"ALL\"))\n+    (static_cast<unsigned char>(SIGHASH_ALL|SIGHASH_ANYONECANPAY), std::string(\"ALL|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE), std::string(\"NONE\"))\n+    (static_cast<unsigned char>(SIGHASH_NONE|SIGHASH_ANYONECANPAY), std::string(\"NONE|ANYONECANPAY\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE), std::string(\"SINGLE\"))\n+    (static_cast<unsigned char>(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY), std::string(\"SINGLE|ANYONECANPAY\"))\n     ;\n \n /**\n@@ -72,11 +70,11 @@ const map<unsigned char, string> mapSigHashTypes =\n  *                                     of a signature. Only pass true for scripts you believe could contain signatures. For example,\n  *                                     pass false, or omit the this argument (defaults to false), for scriptPubKeys.\n  */\n-string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n+std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n {\n-    string str;\n+    std::string str;\n     opcodetype opcode;\n-    vector<unsigned char> vch;\n+    std::vector<unsigned char> vch;\n     CScript::const_iterator pc = script.begin();\n     while (pc < script.end()) {\n         if (!str.empty()) {\n@@ -87,12 +85,12 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n             return str;\n         }\n         if (0 <= opcode && opcode <= OP_PUSHDATA4) {\n-            if (vch.size() <= static_cast<vector<unsigned char>::size_type>(4)) {\n+            if (vch.size() <= static_cast<std::vector<unsigned char>::size_type>(4)) {\n                 str += strprintf(\"%d\", CScriptNum(vch, false).getint());\n             } else {\n                 // the IsUnspendable check makes sure not to try to decode OP_RETURN data that may match the format of a signature\n                 if (fAttemptSighashDecode && !script.IsUnspendable()) {\n-                    string strSigHashDecode;\n+                    std::string strSigHashDecode;\n                     // goal: only attempt to decode a defined sighash type from data that looks like a signature within a scriptSig.\n                     // this won't decode correctly formatted public keys in Pubkey or Multisig scripts due to\n                     // the restrictions on the pubkey formats (see IsCompressedOrUncompressedPubKey) being incongruous with the\n@@ -116,7 +114,7 @@ string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode)\n     return str;\n }\n \n-string EncodeHexTx(const CTransaction& tx, const int serialFlags)\n+std::string EncodeHexTx(const CTransaction& tx, const int serialFlags)\n {\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION | serialFlags);\n     ssTx << tx;\n@@ -127,7 +125,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n                         UniValue& out, bool fIncludeHex)\n {\n     txnouttype type;\n-    vector<CTxDestination> addresses;\n+    std::vector<CTxDestination> addresses;\n     int nRequired;\n \n     out.pushKV(\"asm\", ScriptToAsmStr(scriptPubKey));"
      },
      {
        "sha": "d7d60b0fbcec3ca6cdb4d5515c567823b6a134b2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 16,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -65,8 +65,6 @@\n #include \"zmq/zmqnotificationinterface.h\"\n #endif\n \n-using namespace std;\n-\n bool fFeeEstimatesInitialized = false;\n static const bool DEFAULT_PROXYRANDOMIZE = true;\n static const bool DEFAULT_REST_ENABLE = false;\n@@ -310,10 +308,10 @@ void OnRPCStopped()\n void OnRPCPreCommand(const CRPCCommand& cmd)\n {\n     // Observe safe mode\n-    string strWarning = GetWarnings(\"rpc\");\n+    std::string strWarning = GetWarnings(\"rpc\");\n     if (strWarning != \"\" && !GetBoolArg(\"-disablesafemode\", DEFAULT_DISABLE_SAFEMODE) &&\n         !cmd.okSafeMode)\n-        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, string(\"Safe mode: \") + strWarning);\n+        throw JSONRPCError(RPC_FORBIDDEN_BY_SAFE_MODE, std::string(\"Safe mode: \") + strWarning);\n }\n \n std::string HelpMessage(HelpMessageMode mode)\n@@ -322,7 +320,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n-    string strUsage = HelpMessageGroup(_(\"Options:\"));\n+    std::string strUsage = HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n     strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n@@ -436,7 +434,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n+    std::string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n@@ -576,15 +574,14 @@ struct CImportingNow\n // works correctly.\n void CleanupBlockRevFiles()\n {\n-    using namespace boost::filesystem;\n-    map<string, path> mapBlockFiles;\n+    std::map<std::string, boost::filesystem::path> mapBlockFiles;\n \n     // Glob all blk?????.dat and rev?????.dat files from the blocks directory.\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    path blocksdir = GetDataDir() / \"blocks\";\n-    for (directory_iterator it(blocksdir); it != directory_iterator(); it++) {\n+    boost::filesystem::path blocksdir = GetDataDir() / \"blocks\";\n+    for (boost::filesystem::directory_iterator it(blocksdir); it != boost::filesystem::directory_iterator(); it++) {\n         if (is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n             it->path().filename().string().substr(8,4) == \".dat\")\n@@ -601,7 +598,7 @@ void CleanupBlockRevFiles()\n     // keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)\n     // start removing block files.\n     int nContigCounter = 0;\n-    BOOST_FOREACH(const PAIRTYPE(string, path)& item, mapBlockFiles) {\n+    BOOST_FOREACH(const PAIRTYPE(std::string, boost::filesystem::path)& item, mapBlockFiles) {\n         if (atoi(item.first) == nContigCounter) {\n             nContigCounter++;\n             continue;\n@@ -894,8 +891,8 @@ bool AppInitParameterInteraction()\n     fDebug = mapMultiArgs.count(\"-debug\");\n     // Special-case: if -debug=0/-nodebug is set, turn off debugging messages\n     if (fDebug) {\n-        const vector<string>& categories = mapMultiArgs.at(\"-debug\");\n-        if (GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), string(\"0\")) != categories.end())\n+        const std::vector<std::string>& categories = mapMultiArgs.at(\"-debug\");\n+        if (GetBoolArg(\"-nodebug\", false) || find(categories.begin(), categories.end(), std::string(\"0\")) != categories.end())\n             fDebug = false;\n     }\n \n@@ -1063,7 +1060,7 @@ bool AppInitParameterInteraction()\n         if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n-        const vector<string>& deployments = mapMultiArgs.at(\"-bip9params\");\n+        const std::vector<std::string>& deployments = mapMultiArgs.at(\"-bip9params\");\n         for (auto i : deployments) {\n             std::vector<std::string> vDeploymentParams;\n             boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n@@ -1208,9 +1205,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n-    std::vector<string> uacomments;\n+    std::vector<std::string> uacomments;\n     if (mapMultiArgs.count(\"-uacomment\")) {\n-        BOOST_FOREACH(string cmt, mapMultiArgs.at(\"-uacomment\"))\n+        BOOST_FOREACH(std::string cmt, mapMultiArgs.at(\"-uacomment\"))\n         {\n             if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n                 return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));"
      },
      {
        "sha": "e3f3e4621ad8c9f19bb7ae3d256d068b77313782",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -9,14 +9,12 @@\n #include \"consensus/consensus.h\"\n #include \"utilstrencodings.h\"\n \n-using namespace std;\n-\n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n {\n     header = block.GetBlockHeader();\n \n-    vector<bool> vMatch;\n-    vector<uint256> vHashes;\n+    std::vector<bool> vMatch;\n+    std::vector<uint256> vHashes;\n \n     vMatch.reserve(block.vtx.size());\n     vHashes.reserve(block.vtx.size());\n@@ -27,7 +25,7 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n         if (filter.IsRelevantAndUpdate(*block.vtx[i]))\n         {\n             vMatch.push_back(true);\n-            vMatchedTxn.push_back(make_pair(i, hash));\n+            vMatchedTxn.push_back(std::make_pair(i, hash));\n         }\n         else\n             vMatch.push_back(false);\n@@ -41,8 +39,8 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n {\n     header = block.GetBlockHeader();\n \n-    vector<bool> vMatch;\n-    vector<uint256> vHashes;\n+    std::vector<bool> vMatch;\n+    std::vector<uint256> vHashes;\n \n     vMatch.reserve(block.vtx.size());\n     vHashes.reserve(block.vtx.size());"
      },
      {
        "sha": "d01edd93b52e65b3178b6cbd4e9db4a01b62375c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -31,8 +31,6 @@\n #include <queue>\n #include <utility>\n \n-using namespace std;\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // BitcoinMiner\n@@ -500,7 +498,7 @@ void BlockAssembler::addPackageTxs()\n         }\n \n         // Package can be added. Sort the entries in a valid order.\n-        vector<CTxMemPool::txiter> sortedEntries;\n+        std::vector<CTxMemPool::txiter> sortedEntries;\n         SortForBlock(ancestors, iter, sortedEntries);\n \n         for (size_t i=0; i<sortedEntries.size(); ++i) {\n@@ -529,7 +527,7 @@ void BlockAssembler::addPriorityTxs()\n     fNeedSizeAccounting = true;\n \n     // This vector will be sorted into a priority queue:\n-    vector<TxCoinAgePriority> vecPriority;\n+    std::vector<TxCoinAgePriority> vecPriority;\n     TxCoinAgePriorityCompare pricomparer;\n     std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash> waitPriMap;\n     typedef std::map<CTxMemPool::txiter, double, CTxMemPool::CompareIteratorByHash>::iterator waitPriIter;"
      },
      {
        "sha": "b9667eb6c64b7e7092ae8a62e291d71ab578d1bc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 53,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -32,8 +32,6 @@\n \n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n@@ -55,8 +53,8 @@ struct COrphanTx {\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n-map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n-map<COutPoint, set<map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n+std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(cs_main);\n+std::map<COutPoint, std::set<std::map<uint256, COrphanTx>::iterator, IteratorComparator>> mapOrphanTransactionsByPrev GUARDED_BY(cs_main);\n void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n static size_t vExtraTxnForCompactIt = 0;\n@@ -76,7 +74,7 @@ namespace {\n      * Set mapBlockSource[hash].second to false if the node should not be\n      * punished if the block is invalid.\n      */\n-    map<uint256, std::pair<NodeId, bool>> mapBlockSource;\n+    std::map<uint256, std::pair<NodeId, bool>> mapBlockSource;\n \n     /**\n      * Filter for transactions that were recently rejected by\n@@ -108,10 +106,10 @@ namespace {\n         bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.\n         std::unique_ptr<PartiallyDownloadedBlock> partialBlock;  //!< Optional, used for CMPCTBLOCK downloads\n     };\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n     /** Stack of nodes which we have set to announce using compact blocks */\n-    list<NodeId> lNodesAnnouncingHeaderAndIDs;\n+    std::list<NodeId> lNodesAnnouncingHeaderAndIDs;\n \n     /** Number of preferable block download peers. */\n     int nPreferredDownload = 0;\n@@ -135,7 +133,7 @@ namespace {\n \n struct CBlockReject {\n     unsigned char chRejectCode;\n-    string strRejectReason;\n+    std::string strRejectReason;\n     uint256 hashBlock;\n };\n \n@@ -172,7 +170,7 @@ struct CNodeState {\n     bool fSyncStarted;\n     //! Since when we're stalling block download progress (in microseconds), or 0.\n     int64_t nStallingSince;\n-    list<QueuedBlock> vBlocksInFlight;\n+    std::list<QueuedBlock> vBlocksInFlight;\n     //! When the first entry in vBlocksInFlight started downloading. Don't care when vBlocksInFlight is empty.\n     int64_t nDownloadingSince;\n     int nBlocksInFlight;\n@@ -224,11 +222,11 @@ struct CNodeState {\n };\n \n /** Map maintaining per-node state. Requires cs_main. */\n-map<NodeId, CNodeState> mapNodeState;\n+std::map<NodeId, CNodeState> mapNodeState;\n \n // Requires cs_main.\n CNodeState *State(NodeId pnode) {\n-    map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n+    std::map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n     if (it == mapNodeState.end())\n         return NULL;\n     return &it->second;\n@@ -310,7 +308,7 @@ void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n bool MarkBlockAsReceived(const uint256& hash) {\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n         state->nBlocksInFlightValidHeaders -= itInFlight->second.second->fValidatedHeaders;\n@@ -334,12 +332,12 @@ bool MarkBlockAsReceived(const uint256& hash) {\n // Requires cs_main.\n // returns false, still setting pit, if the block was already in flight from the same peer\n // pit will only be valid as long as the same cs_main lock is being held\n-bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex *pindex = NULL, list<QueuedBlock>::iterator **pit = NULL) {\n+bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Params& consensusParams, const CBlockIndex* pindex = NULL, std::list<QueuedBlock>::iterator** pit = NULL) {\n     CNodeState *state = State(nodeid);\n     assert(state != NULL);\n \n     // Short-circuit most stuff in case its from the same node\n-    map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n+    std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end() && itInFlight->second.first == nodeid) {\n         *pit = &itInFlight->second.second;\n         return false;\n@@ -348,7 +346,7 @@ bool MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, const Consensus::Pa\n     // Make sure it's not listed somewhere already.\n     MarkBlockAsReceived(hash);\n \n-    list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n+    std::list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(),\n             {hash, pindex, pindex != NULL, std::unique_ptr<PartiallyDownloadedBlock>(pit ? new PartiallyDownloadedBlock(&mempool) : NULL)});\n     state->nBlocksInFlight++;\n     state->nBlocksInFlightValidHeaders += it->fValidatedHeaders;\n@@ -640,7 +638,7 @@ bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRE\n \n int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n+    std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.find(hash);\n     if (it == mapOrphanTransactions.end())\n         return 0;\n     BOOST_FOREACH(const CTxIn& txin, it->second.tx->vin)\n@@ -659,10 +657,10 @@ int static EraseOrphanTx(uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n void EraseOrphansFor(NodeId peer)\n {\n     int nErased = 0;\n-    map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+    std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n     while (iter != mapOrphanTransactions.end())\n     {\n-        map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        std::map<uint256, COrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n         if (maybeErase->second.fromPeer == peer)\n         {\n             nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n@@ -681,10 +679,10 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n         // Sweep out expired orphan pool entries:\n         int nErased = 0;\n         int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n-        map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n+        std::map<uint256, COrphanTx>::iterator iter = mapOrphanTransactions.begin();\n         while (iter != mapOrphanTransactions.end())\n         {\n-            map<uint256, COrphanTx>::iterator maybeErase = iter++;\n+            std::map<uint256, COrphanTx>::iterator maybeErase = iter++;\n             if (maybeErase->second.nTimeExpire <= nNow) {\n                 nErased += EraseOrphanTx(maybeErase->second.tx->GetHash());\n             } else {\n@@ -699,7 +697,7 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n     {\n         // Evict a random orphan:\n         uint256 randomhash = GetRandHash();\n-        map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        std::map<uint256, COrphanTx>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n         if (it == mapOrphanTransactions.end())\n             it = mapOrphanTransactions.begin();\n         EraseOrphanTx(it->first);\n@@ -961,7 +959,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n-    vector<CInv> vNotFound;\n+    std::vector<CInv> vNotFound;\n     CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     LOCK(cs_main);\n \n@@ -1083,7 +1081,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // Bypass PushInventory, this must send even if redundant,\n                         // and we want it right after the last block so they don't\n                         // wait for other stuff first.\n-                        vector<CInv> vInv;\n+                        std::vector<CInv> vInv;\n                         vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n                         connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n                         pfrom->hashContinue.SetNull();\n@@ -1160,7 +1158,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (IsArgSet(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -1190,7 +1188,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\")));\n+            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n@@ -1311,7 +1309,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->fSuccessfullyConnected = true;\n \n-        string remoteAddr;\n+        std::string remoteAddr;\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n@@ -1352,7 +1350,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n-        pfrom->SetRecvVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n+        pfrom->SetRecvVersion(std::min(pfrom->nVersion, PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound) {\n             // Mark this node as currently connected, so we update its timestamp later.\n@@ -1385,7 +1383,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::ADDR)\n     {\n-        vector<CAddress> vAddr;\n+        std::vector<CAddress> vAddr;\n         vRecv >> vAddr;\n \n         // Don't want addr from older versions unless seeding\n@@ -1399,7 +1397,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         // Store the new addresses\n-        vector<CAddress> vAddrOk;\n+        std::vector<CAddress> vAddrOk;\n         int64_t nNow = GetAdjustedTime();\n         int64_t nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n@@ -1462,7 +1460,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::INV)\n     {\n-        vector<CInv> vInv;\n+        std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n@@ -1529,7 +1527,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::GETDATA)\n     {\n-        vector<CInv> vInv;\n+        std::vector<CInv> vInv;\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n@@ -1691,7 +1689,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n-        vector<CBlock> vHeaders;\n+        std::vector<CBlock> vHeaders;\n         int nLimit = MAX_HEADERS_RESULTS;\n         LogPrint(\"net\", \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->id);\n         for (; pindex; pindex = chainActive.Next(pindex))\n@@ -1727,8 +1725,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n-        deque<COutPoint> vWorkQueue;\n-        vector<uint256> vEraseQueue;\n+        std::deque<COutPoint> vWorkQueue;\n+        std::vector<uint256> vEraseQueue;\n         CTransactionRef ptx;\n         vRecv >> ptx;\n         const CTransaction& tx = *ptx;\n@@ -1761,7 +1759,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n-            set<NodeId> setMisbehaving;\n+            std::set<NodeId> setMisbehaving;\n             while (!vWorkQueue.empty()) {\n                 auto itByPrev = mapOrphanTransactionsByPrev.find(vWorkQueue.front());\n                 vWorkQueue.pop_front();\n@@ -1955,7 +1953,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         assert(pindex);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n-        std::map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n+        std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n         if (pindex->nStatus & BLOCK_HAVE_DATA) // Nothing to do here\n@@ -1990,7 +1988,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         if (pindex->nHeight <= chainActive.Height() + 2) {\n             if ((!fAlreadyInFlight && nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) ||\n                  (fAlreadyInFlight && blockInFlightIt->second.first == pfrom->GetId())) {\n-                list<QueuedBlock>::iterator *queuedBlockIt = NULL;\n+                std::list<QueuedBlock>::iterator* queuedBlockIt = NULL;\n                 if (!MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex, &queuedBlockIt)) {\n                     if (!(*queuedBlockIt)->partialBlock)\n                         (*queuedBlockIt)->partialBlock.reset(new PartiallyDownloadedBlock(&mempool));\n@@ -2108,7 +2106,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             LOCK(cs_main);\n \n-            map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n+            std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n             if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n                     it->second.first != pfrom->GetId()) {\n                 LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n@@ -2265,7 +2263,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // If this set of headers is valid and ends in a block with at least as\n         // much work as our tip, download as much as possible.\n         if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n-            vector<const CBlockIndex *> vToFetch;\n+            std::vector<const CBlockIndex*> vToFetch;\n             const CBlockIndex *pindexWalk = pindexLast;\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n             while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n@@ -2286,7 +2284,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         pindexLast->GetBlockHash().ToString(),\n                         pindexLast->nHeight);\n             } else {\n-                vector<CInv> vGetData;\n+                std::vector<CInv> vGetData;\n                 // Download as much as possible, from earliest to latest.\n                 BOOST_REVERSE_FOREACH(const CBlockIndex *pindex, vToFetch) {\n                     if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n@@ -2365,7 +2363,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->fSentAddr = true;\n \n         pfrom->vAddrToSend.clear();\n-        vector<CAddress> vAddr = connman.GetAddresses();\n+        std::vector<CAddress> vAddr = connman.GetAddresses();\n         FastRandomContext insecure_rand;\n         BOOST_FOREACH(const CAddress &addr, vAddr)\n             pfrom->PushAddress(addr, insecure_rand);\n@@ -2496,7 +2494,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::FILTERADD)\n     {\n-        vector<unsigned char> vData;\n+        std::vector<unsigned char> vData;\n         vRecv >> vData;\n \n         // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n@@ -2534,10 +2532,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     {\n         if (fDebug) {\n             try {\n-                string strMsg; unsigned char ccode; string strReason;\n+                std::string strMsg; unsigned char ccode; std::string strReason;\n                 vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n \n-                ostringstream ss;\n+                std::ostringstream ss;\n                 ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n \n                 if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n@@ -2635,7 +2633,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n             LogPrintf(\"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->id);\n             return fMoreWork;\n         }\n-        string strCommand = hdr.GetCommand();\n+        std::string strCommand = hdr.GetCommand();\n \n         // Message size\n         unsigned int nMessageSize = hdr.nMessageSize;\n@@ -2664,7 +2662,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n         }\n         catch (const std::ios_base::failure& e)\n         {\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, string(\"error parsing message\")));\n+            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n@@ -2761,7 +2759,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         CNodeState &state = *State(pto->GetId());\n \n         BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n         state.rejects.clear();\n \n         if (state.fShouldBan) {\n@@ -2794,7 +2792,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         if (pto->nNextAddrSend < nNow) {\n             pto->nNextAddrSend = PoissonNextSend(nNow, AVG_ADDRESS_BROADCAST_INTERVAL);\n-            vector<CAddress> vAddr;\n+            std::vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n             BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n             {\n@@ -2862,7 +2860,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             // blocks, or if the peer doesn't want headers, just\n             // add all to the inv queue.\n             LOCK(pto->cs_inventory);\n-            vector<CBlock> vHeaders;\n+            std::vector<CBlock> vHeaders;\n             bool fRevertToInv = ((!state.fPreferHeaders &&\n                                  (!state.fPreferHeaderAndIDs || pto->vBlockHashesToAnnounce.size() > 1)) ||\n                                 pto->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n@@ -2994,7 +2992,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         // Message: inventory\n         //\n-        vector<CInv> vInv;\n+        std::vector<CInv> vInv;\n         {\n             LOCK(pto->cs_inventory);\n             vInv.reserve(std::max<size_t>(pto->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n@@ -3059,7 +3057,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             // Determine transactions to relay\n             if (fSendTrickle) {\n                 // Produce a vector with all candidates for sending\n-                vector<std::set<uint256>::iterator> vInvTx;\n+                std::vector<std::set<uint256>::iterator> vInvTx;\n                 vInvTx.reserve(pto->setInventoryTxToSend.size());\n                 for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); it++) {\n                     vInvTx.push_back(it);\n@@ -3153,9 +3151,9 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n         //\n         // Message: getdata (blocks)\n         //\n-        vector<CInv> vGetData;\n+        std::vector<CInv> vGetData;\n         if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-            vector<const CBlockIndex*> vToDownload;\n+            std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n             BOOST_FOREACH(const CBlockIndex *pindex, vToDownload) {"
      },
      {
        "sha": "54eefcafe364fc570afbebcff49505725760774d",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 27,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -20,8 +20,6 @@\n \n #include <univalue.h>\n \n-using namespace std;\n-\n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n \n enum RetFormat {\n@@ -64,7 +62,7 @@ extern UniValue mempoolToJSON(bool fVerbose = false);\n extern void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n extern UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n \n-static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, string message)\n+static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string message)\n {\n     req->WriteHeader(\"Content-Type\", \"text/plain\");\n     req->WriteReply(status, message + \"\\r\\n\");\n@@ -92,9 +90,9 @@ static enum RetFormat ParseDataFormat(std::string& param, const std::string& str\n     return rf_names[0].rf;\n }\n \n-static string AvailableDataFormatsString()\n+static std::string AvailableDataFormatsString()\n {\n-    string formats = \"\";\n+    std::string formats = \"\";\n     for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n         if (strlen(rf_names[i].name) > 0) {\n             formats.append(\".\");\n@@ -108,7 +106,7 @@ static string AvailableDataFormatsString()\n     return formats;\n }\n \n-static bool ParseHashStr(const string& strReq, uint256& v)\n+static bool ParseHashStr(const std::string& strReq, uint256& v)\n {\n     if (!IsHex(strReq) || (strReq.size() != 64))\n         return false;\n@@ -132,7 +130,7 @@ static bool rest_headers(HTTPRequest* req,\n         return false;\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n-    vector<string> path;\n+    std::vector<std::string> path;\n     boost::split(path, param, boost::is_any_of(\"/\"));\n \n     if (path.size() != 2)\n@@ -142,7 +140,7 @@ static bool rest_headers(HTTPRequest* req,\n     if (count < 1 || count > 2000)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n \n-    string hashStr = path[1];\n+    std::string hashStr = path[1];\n     uint256 hash;\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n@@ -168,14 +166,14 @@ static bool rest_headers(HTTPRequest* req,\n \n     switch (rf) {\n     case RF_BINARY: {\n-        string binaryHeader = ssHeader.str();\n+        std::string binaryHeader = ssHeader.str();\n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, binaryHeader);\n         return true;\n     }\n \n     case RF_HEX: {\n-        string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n@@ -185,7 +183,7 @@ static bool rest_headers(HTTPRequest* req,\n         BOOST_FOREACH(const CBlockIndex *pindex, headers) {\n             jsonHeaders.push_back(blockheaderToJSON(pindex));\n         }\n-        string strJSON = jsonHeaders.write() + \"\\n\";\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -232,22 +230,22 @@ static bool rest_block(HTTPRequest* req,\n \n     switch (rf) {\n     case RF_BINARY: {\n-        string binaryBlock = ssBlock.str();\n+        std::string binaryBlock = ssBlock.str();\n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, binaryBlock);\n         return true;\n     }\n \n     case RF_HEX: {\n-        string strHex = HexStr(ssBlock.begin(), ssBlock.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssBlock.begin(), ssBlock.end()) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n     }\n \n     case RF_JSON: {\n         UniValue objBlock = blockToJSON(block, pblockindex, showTxDetails);\n-        string strJSON = objBlock.write() + \"\\n\";\n+        std::string strJSON = objBlock.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -287,7 +285,7 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n         JSONRPCRequest jsonRequest;\n         jsonRequest.params = UniValue(UniValue::VARR);\n         UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n-        string strJSON = chainInfoObject.write() + \"\\n\";\n+        std::string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -312,7 +310,7 @@ static bool rest_mempool_info(HTTPRequest* req, const std::string& strURIPart)\n     case RF_JSON: {\n         UniValue mempoolInfoObject = mempoolInfoToJSON();\n \n-        string strJSON = mempoolInfoObject.write() + \"\\n\";\n+        std::string strJSON = mempoolInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -337,7 +335,7 @@ static bool rest_mempool_contents(HTTPRequest* req, const std::string& strURIPar\n     case RF_JSON: {\n         UniValue mempoolObject = mempoolToJSON(true);\n \n-        string strJSON = mempoolObject.write() + \"\\n\";\n+        std::string strJSON = mempoolObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -372,14 +370,14 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n \n     switch (rf) {\n     case RF_BINARY: {\n-        string binaryTx = ssTx.str();\n+        std::string binaryTx = ssTx.str();\n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, binaryTx);\n         return true;\n     }\n \n     case RF_HEX: {\n-        string strHex = HexStr(ssTx.begin(), ssTx.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssTx.begin(), ssTx.end()) + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n         return true;\n@@ -388,7 +386,7 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     case RF_JSON: {\n         UniValue objTx(UniValue::VOBJ);\n         TxToJSON(*tx, hashBlock, objTx);\n-        string strJSON = objTx.write() + \"\\n\";\n+        std::string strJSON = objTx.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;\n@@ -410,7 +408,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n \n-    vector<string> uriParts;\n+    std::vector<std::string> uriParts;\n     if (param.length() > 1)\n     {\n         std::string strUriParams = param.substr(1);\n@@ -424,7 +422,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     bool fInputParsed = false;\n     bool fCheckMemPool = false;\n-    vector<COutPoint> vOutPoints;\n+    std::vector<COutPoint> vOutPoints;\n \n     // parse/deserialize input\n     // input-format = output-format, rest/getutxos/bin requires binary input, gives binary output, ...\n@@ -498,8 +496,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Error: max outpoints exceeded (max: %d, tried: %d)\", MAX_GETUTXOS_OUTPOINTS, vOutPoints.size()));\n \n     // check spentness and form a bitmap (as well as a JSON capable human-readable string representation)\n-    vector<unsigned char> bitmap;\n-    vector<CCoin> outs;\n+    std::vector<unsigned char> bitmap;\n+    std::vector<CCoin> outs;\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n@@ -546,7 +544,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         // use exact same output as mentioned in Bip64\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n-        string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n+        std::string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n         req->WriteReply(HTTP_OK, ssGetUTXOResponseString);\n@@ -556,7 +554,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     case RF_HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n         ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n-        string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n+        std::string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n         req->WriteReply(HTTP_OK, strHex);\n@@ -588,7 +586,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n         objGetUTXOResponse.push_back(Pair(\"utxos\", utxos));\n \n         // return json string\n-        string strJSON = objGetUTXOResponse.write() + \"\\n\";\n+        std::string strJSON = objGetUTXOResponse.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);\n         return true;"
      },
      {
        "sha": "2ff6437c732cc4571bc3671574f39f6c53bedb11",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -17,8 +17,6 @@\n \n #include <boost/foreach.hpp>\n \n-using namespace std;\n-\n static CCriticalSection cs_nTimeOffset;\n static int64_t nTimeOffset = 0;\n \n@@ -51,7 +49,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n {\n     LOCK(cs_nTimeOffset);\n     // Ignore duplicates\n-    static set<CNetAddr> setKnown;\n+    static std::set<CNetAddr> setKnown;\n     if (setKnown.size() == BITCOIN_TIMEDATA_MAX_SAMPLES)\n         return;\n     if (!setKnown.insert(ip).second)"
      },
      {
        "sha": "1a30bb58ad80bcdd4b6b92aa46573f8d51523a27",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -14,8 +14,6 @@\n \n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n static const char DB_COINS = 'c';\n static const char DB_BLOCK_FILES = 'f';\n static const char DB_TXINDEX = 't';\n@@ -32,11 +30,11 @@ CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(Get\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    return db.Read(make_pair(DB_COINS, txid), coins);\n+    return db.Read(std::make_pair(DB_COINS, txid), coins);\n }\n \n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n-    return db.Exists(make_pair(DB_COINS, txid));\n+    return db.Exists(std::make_pair(DB_COINS, txid));\n }\n \n uint256 CCoinsViewDB::GetBestBlock() const {\n@@ -53,9 +51,9 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n             if (it->second.coins.IsPruned())\n-                batch.Erase(make_pair(DB_COINS, it->first));\n+                batch.Erase(std::make_pair(DB_COINS, it->first));\n             else\n-                batch.Write(make_pair(DB_COINS, it->first), it->second.coins);\n+                batch.Write(std::make_pair(DB_COINS, it->first), it->second.coins);\n             changed++;\n         }\n         count++;\n@@ -73,7 +71,7 @@ CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWra\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n-    return Read(make_pair(DB_BLOCK_FILES, nFile), info);\n+    return Read(std::make_pair(DB_BLOCK_FILES, nFile), info);\n }\n \n bool CBlockTreeDB::WriteReindexing(bool fReindexing) {\n@@ -139,23 +137,23 @@ void CCoinsViewDBCursor::Next()\n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n     CDBBatch batch(*this);\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n-        batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n+        batch.Write(std::make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n     batch.Write(DB_LAST_BLOCK, nLastFile);\n     for (std::vector<const CBlockIndex*>::const_iterator it=blockinfo.begin(); it != blockinfo.end(); it++) {\n-        batch.Write(make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n+        batch.Write(std::make_pair(DB_BLOCK_INDEX, (*it)->GetBlockHash()), CDiskBlockIndex(*it));\n     }\n     return WriteBatch(batch, true);\n }\n \n bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n-    return Read(make_pair(DB_TXINDEX, txid), pos);\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n     CDBBatch batch(*this);\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n-        batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n+        batch.Write(std::make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n }\n \n@@ -175,7 +173,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts(boost::function<CBlockIndex*(const uint256\n {\n     std::unique_ptr<CDBIterator> pcursor(NewIterator());\n \n-    pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n+    pcursor->Seek(std::make_pair(DB_BLOCK_INDEX, uint256()));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {"
      },
      {
        "sha": "a1a37dac755b1eff45b4422d1645b6dc84f7aae0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -18,8 +18,6 @@\n #include \"utiltime.h\"\n #include \"version.h\"\n \n-using namespace std;\n-\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  CAmount _inChainInputValue,\n@@ -658,7 +656,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     const int64_t nSpendHeight = GetSpendHeight(mempoolDuplicate);\n \n     LOCK(cs);\n-    list<const CTxMemPoolEntry*> waitingOnDependants;\n+    std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->GetTxSize();\n@@ -816,7 +814,7 @@ std::vector<CTxMemPool::indexed_transaction_set::const_iterator> CTxMemPool::Get\n     return iters;\n }\n \n-void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n+void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n {\n     LOCK(cs);\n     auto iters = GetSortedDepthAndScore();\n@@ -920,7 +918,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);"
      },
      {
        "sha": "fe8f8365be098b3c3ef90bcd2a04ccb09b7cea5b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 24,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/668de70be039a4f1ffcf20aeae2a22ee71fc55a8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "patch": "@@ -46,8 +46,6 @@\n #include <boost/math/distributions/poisson.hpp>\n #include <boost/thread.hpp>\n \n-using namespace std;\n-\n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n@@ -90,7 +88,7 @@ static void CheckBlockIndex(const Consensus::Params& consensusParams);\n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n \n-const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n // Internal stuff\n namespace {\n@@ -123,11 +121,11 @@ namespace {\n      * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n      * missing the data for the block.\n      */\n-    set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n     /** All pairs A->B, where A (or one of its ancestors) misses transactions, but B has transactions.\n      * Pruned nodes may have entries where B is missing data.\n      */\n-    multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n+    std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n \n     CCriticalSection cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n@@ -151,10 +149,10 @@ namespace {\n     arith_uint256 nLastPreciousChainwork = 0;\n \n     /** Dirty block index entries. */\n-    set<CBlockIndex*> setDirtyBlockIndex;\n+    std::set<CBlockIndex*> setDirtyBlockIndex;\n \n     /** Dirty block file entries. */\n-    set<int> setDirtyFileInfo;\n+    std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n /* Use this class to start tracking transactions that are removed from the\n@@ -517,7 +515,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state, bool fChe\n \n     // Check for duplicate inputs - note that this check is slow so we skip it in CheckBlock\n     if (fCheckDuplicateInputs) {\n-        set<COutPoint> vInOutPoints;\n+        std::set<COutPoint> vInOutPoints;\n         for (const auto& txin : tx.vin)\n         {\n             if (!vInOutPoints.insert(txin.prevout).second)\n@@ -596,7 +594,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     }\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    string reason;\n+    std::string reason;\n     if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n@@ -611,7 +609,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n     // Check for conflicts with in-memory transactions\n-    set<uint256> setConflicts;\n+    std::set<uint256> setConflicts;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     BOOST_FOREACH(const CTxIn &txin, tx.vin)\n@@ -831,7 +829,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fReplacementTransaction)\n         {\n             CFeeRate newFeeRate(nModifiedFees, nSize);\n-            set<uint256> setConflictsParents;\n+            std::set<uint256> setConflictsParents;\n             const int maxDescendantsToVisit = 100;\n             CTxMemPool::setEntries setIterConflicting;\n             BOOST_FOREACH(const uint256 &hashConflicting, setConflicts)\n@@ -2052,13 +2050,13 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode, int n\n         {\n             std::vector<std::pair<int, const CBlockFileInfo*> > vFiles;\n             vFiles.reserve(setDirtyFileInfo.size());\n-            for (set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n-                vFiles.push_back(make_pair(*it, &vinfoBlockFile[*it]));\n+            for (std::set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n+                vFiles.push_back(std::make_pair(*it, &vinfoBlockFile[*it]));\n                 setDirtyFileInfo.erase(it++);\n             }\n             std::vector<const CBlockIndex*> vBlocks;\n             vBlocks.reserve(setDirtyBlockIndex.size());\n-            for (set<CBlockIndex*>::iterator it = setDirtyBlockIndex.begin(); it != setDirtyBlockIndex.end(); ) {\n+            for (std::set<CBlockIndex*>::iterator it = setDirtyBlockIndex.begin(); it != setDirtyBlockIndex.end(); ) {\n                 vBlocks.push_back(*it);\n                 setDirtyBlockIndex.erase(it++);\n             }\n@@ -2670,7 +2668,7 @@ CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n     // to avoid miners withholding blocks but broadcasting headers, to get a\n     // competitive advantage.\n     pindexNew->nSequenceId = 0;\n-    BlockMap::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n+    BlockMap::iterator mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n     BlockMap::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n     if (miPrev != mapBlockIndex.end())\n@@ -2707,7 +2705,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n \n     if (pindexNew->pprev == NULL || pindexNew->pprev->nChainTx) {\n         // If pindexNew is the genesis block or all parents are BLOCK_VALID_TRANSACTIONS.\n-        deque<CBlockIndex*> queue;\n+        std::deque<CBlockIndex*> queue;\n         queue.push_back(pindexNew);\n \n         // Recursively process any descendant blocks that now may be eligible to be connected.\n@@ -3329,7 +3327,7 @@ void PruneOneBlockFile(const int fileNumber)\n \n void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)\n {\n-    for (set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n+    for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n         boost::filesystem::remove(GetBlockPosFilename(pos, \"blk\"));\n         boost::filesystem::remove(GetBlockPosFilename(pos, \"rev\"));\n@@ -3347,7 +3345,7 @@ void FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nManualPruneHeig\n         return;\n \n     // last block to prune is the lesser of (user-specified height, MIN_BLOCKS_TO_KEEP from the tip)\n-    unsigned int nLastBlockWeCanPrune = min((unsigned)nManualPruneHeight, chainActive.Tip()->nHeight - MIN_BLOCKS_TO_KEEP);\n+    unsigned int nLastBlockWeCanPrune = std::min((unsigned)nManualPruneHeight, chainActive.Tip()->nHeight - MIN_BLOCKS_TO_KEEP);\n     int count=0;\n     for (int fileNumber = 0; fileNumber < nLastBlockFile; fileNumber++) {\n         if (vinfoBlockFile[fileNumber].nSize == 0 || vinfoBlockFile[fileNumber].nHeightLast > nLastBlockWeCanPrune)\n@@ -3474,8 +3472,8 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n-        throw runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n-    mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n+        throw std::runtime_error(std::string(__func__) + \": new CBlockIndex failed\");\n+    mi = mapBlockIndex.insert(std::make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n \n     return pindexNew;\n@@ -3489,12 +3487,12 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     boost::this_thread::interruption_point();\n \n     // Calculate nChainWork\n-    vector<pair<int, CBlockIndex*> > vSortedByHeight;\n+    std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n     vSortedByHeight.reserve(mapBlockIndex.size());\n     BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n-        vSortedByHeight.push_back(make_pair(pindex->nHeight, pindex));\n+        vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n     BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n@@ -3545,7 +3543,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n \n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n-    set<int> setBlkDataFiles;\n+    std::set<int> setBlkDataFiles;\n     BOOST_FOREACH(const PAIRTYPE(uint256, CBlockIndex*)& item, mapBlockIndex)\n     {\n         CBlockIndex* pindex = item.second;\n@@ -3932,7 +3930,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                 NotifyHeaderTip();\n \n                 // Recursively process earlier encountered successors of this block\n-                deque<uint256> queue;\n+                std::deque<uint256> queue;\n                 queue.push_back(hash);\n                 while (!queue.empty()) {\n                     uint256 head = queue.front();"
      }
    ]
  },
  {
    "sha": "71fc17f6673eae2e44d226e21692283a85786c44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWZjMTdmNjY3M2VhZTJlNDRkMjI2ZTIxNjkyMjgzYTg1Nzg2YzQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T12:28:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T12:33:00Z"
      },
      "message": "qt: periodic translations update",
      "tree": {
        "sha": "c936d46415615007df140bf7e23f11aa6c4d4513",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c936d46415615007df140bf7e23f11aa6c4d4513"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71fc17f6673eae2e44d226e21692283a85786c44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjzJ9AAoJEHSBCwEjRsmmE0kIALaRrDTaKkoV5gWVhTx/kId6\nXRl3XyUhdfK/BFlRlNEA2drY9roUV+rY99wbfTMWarn12N7rhM6+Ij6OyK1BaqPe\nJHLo5NZr4LtEDPC84EbEoqlKB3NW5F+4ShX7hMVFcSj3siMJ+zS/vuwqYS0fOAXH\n4y0tB+uyjeGW717eb3JioaHTxLt/O+EiCzMWC+O/GVeZ+1hdFc9Aa5dWGjgq4IHG\n1bdOzkR9EHgJuDmZjNMnCAx7G/63ZqFBMv9+3R/nttRp5KuWHF5Wa/UO/L4nipmR\nCfEpun3f66y0S7ZuWEqgQdjW1JUQ7RPF6Oc8RS0XKXQRh89b+IAvxS9BH8ZWsR0=\n=5TtN\n-----END PGP SIGNATURE-----",
        "payload": "tree c936d46415615007df140bf7e23f11aa6c4d4513\nparent 668de70be039a4f1ffcf20aeae2a22ee71fc55a8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485779324 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485779580 +0100\n\nqt: periodic translations update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fc17f6673eae2e44d226e21692283a85786c44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71fc17f6673eae2e44d226e21692283a85786c44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fc17f6673eae2e44d226e21692283a85786c44/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/668de70be039a4f1ffcf20aeae2a22ee71fc55a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/668de70be039a4f1ffcf20aeae2a22ee71fc55a8"
      }
    ],
    "stats": {
      "total": 651,
      "additions": 450,
      "deletions": 201
    },
    "files": [
      {
        "sha": "9726987b63b22ef829ddede88a3d8f2838fcbf30",
        "filename": "src/qt/locale/bitcoin_af.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_af.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_af.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_af.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -381,10 +381,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Blokke op skyf word geprosesseer...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Geen blokbron beskikbaar...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 agter</translation>"
      },
      {
        "sha": "9b865f29bff632d3c88ed2e3e7f750e6b37d1000",
        "filename": "src/qt/locale/bitcoin_ar.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ar.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ar.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ar.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -421,10 +421,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0643\u062a\u0644 \u0639\u0644\u0649 \u0627\u0644\u0642\u0631\u0635...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0644\u0627 \u064a\u0648\u062c\u062f \u0623\u064a \u0645\u0635\u062f\u0631 \u0627\u0644\u0643\u062a\u0644\u0629</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>\u062e\u0644\u0641 %1</translation>"
      },
      {
        "sha": "62f2ffc9e64da559375a5de9f1b2081c5aa65725",
        "filename": "src/qt/locale/bitcoin_be_BY.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_be_BY.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_be_BY.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_be_BY.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -389,10 +389,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>\u041e\u043f\u0446\u044b\u0456 \u043a\u0430\u043c\u0430\u043d\u0434\u043d\u0430\u0433\u0430 \u0440\u0430\u0434\u043a\u0430</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u041a\u0440\u044b\u043d\u0456\u0446\u0430 \u0431\u043b\u043e\u043a\u0430\u045e \u043d\u0435\u0434\u0430\u0441\u044f\u0436\u043d\u0430\u044f...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u0442\u0430\u043c\u0443</translation>"
      },
      {
        "sha": "c5716983043df30f71037557f5ccf468a7f5e2d7",
        "filename": "src/qt/locale/bitcoin_bg.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_bg.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_bg.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_bg.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -421,10 +421,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0432\u0430\u043d\u0435 \u043d\u0430 \u0431\u043b\u043e\u043a\u043e\u0432\u0435 \u043d\u0430 \u0434\u0438\u0441\u043a\u0430...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u041b\u0438\u043f\u0441\u0432\u0430 \u0438\u0437\u0442\u043e\u0447\u043d\u0438\u043a \u043d\u0430 \u0431\u043b\u043e\u043a\u043e\u0432\u0435\u0442\u0435...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u0437\u0430\u0434</translation>"
      },
      {
        "sha": "84f51d18a866e6cd5664eb040239bcf063d33375",
        "filename": "src/qt/locale/bitcoin_ca.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>S'estan processant els blocs al disc...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>No hi ha cap font de bloc disponible...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>S'ha processat %n bloc de l'historial de transacci\u00f3.</numerusform><numerusform>S'han processat %n blocs de l'historial de transacci\u00f3.</numerusform></translation>"
      },
      {
        "sha": "0123f8faab974fe4c6a8a4e277a89f8f6399e60d",
        "filename": "src/qt/locale/bitcoin_ca@valencia.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca@valencia.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca@valencia.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca@valencia.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -393,10 +393,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>Opcions de la &amp;l\u00ednia d'ordes</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>No hi ha cap font de bloc disponible...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 darrere</translation>"
      },
      {
        "sha": "8cbb57bd3539d28d7ab770d39a21c76312300994",
        "filename": "src/qt/locale/bitcoin_ca_ES.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ca_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ca_ES.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>S'estan processant els blocs al disc...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>No hi ha cap font de bloc disponible...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>S'ha processat %n bloc de l'historial de transacci\u00f3.</numerusform><numerusform>S'han processat %n blocs de l'historial de transacci\u00f3.</numerusform></translation>"
      },
      {
        "sha": "67c595ab34ec7c3e2c3678964fd96e5ab29d6eee",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Zpracov\u00e1v\u00e1m bloky na disku...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nen\u00ed dostupn\u00fd \u017e\u00e1dn\u00fd zdroj blok\u016f...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Zpracov\u00e1n %n blok transak\u010dn\u00ed historie.</numerusform><numerusform>Zpracov\u00e1ny %n bloky transak\u010dn\u00ed historie.</numerusform><numerusform>Zpracov\u00e1no %n blok\u016f transak\u010dn\u00ed historie.</numerusform></translation>\n@@ -2204,6 +2200,14 @@\n         <source>Warning: Unknown change address</source>\n         <translation>Upozorn\u011bn\u00ed: Nezn\u00e1m\u00e1 adresa pro drobn\u00e9</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Potvr\u010f vlastn\u00ed adresu pro drobn\u00e9</translation>\n+    </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>Adresa, kterou jsi zvolil pro drobn\u00e9, nen\u00ed sou\u010d\u00e1st\u00ed t\u00e9to pen\u011b\u017eenky. Potenci\u00e1ln\u011b v\u0161echny prost\u0159edky z tv\u00e9 pen\u011b\u017eenky mohou b\u00fdt na tuto adresu odesl\u00e1ny. Souhlas\u00ed\u0161, aby se tak stalo?</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(bez ozna\u010den\u00ed)</translation>\n@@ -3121,6 +3125,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>Pou\u017e\u00edt UPnP k namapov\u00e1n\u00ed naslouchac\u00edho portu (v\u00fdchoz\u00ed: 1, pokud naslouch\u00e1 a nepou\u017e\u00edv\u00e1 -proxy)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>U\u017eivatelsk\u00e9 jm\u00e9no a zaha\u0161ovan\u00e9 heslo pro JSON-RPC spojen\u00ed. Pole &lt;userpw&gt; m\u00e1 form\u00e1t: &lt;U\u017dIVATELSK\u00c9_JM\u00c9NO&gt;:&lt;S\u016eL&gt;$&lt;HA\u0160&gt;. Pomocn\u00fd pythonn\u00ed skript je p\u0159ilo\u017een v share/rpcuser. Klient se pak u\u017e p\u0159ipojuje norm\u00e1ln\u011b pomoc\u00ed p\u00e1ru argument\u016f rpcuser=&lt;U\u017dIVATELSK\u00c9_JM\u00c9NO&gt;/rpcpassword=&lt;HESLO&gt;. Tuto volbu lze pou\u017e\u00edt i v\u00edcekr\u00e1t</translation>\n+    </message>\n     <message>\n         <source>Wallet will not create transactions that violate mempool chain limits (default: %u)</source>\n         <translation>Pen\u011b\u017eenka nebude vytv\u00e1\u0159et transakce, kter\u00e9 by poru\u0161ovaly limity transak\u010dn\u00edho z\u00e1sobn\u00edku na \u0159et\u011bzce (v\u00fdchoz\u00ed: %u)</translation>"
      },
      {
        "sha": "54ef4a2bdf5c5a9535e013b9f752422f5284ddf3",
        "filename": "src/qt/locale/bitcoin_da.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_da.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_da.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_da.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Klik for a aktivere netv\u00e6rksaktivitet igen.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synkroniserer hoveder (%1%)\u2026</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Genindekserer blokke p\u00e5 disken\u2026</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Bearbejder blokke p\u00e5 disken\u2026</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ingen blokkilde tilg\u00e6ngelig\u2026</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Bearbejdede %n blok med transaktionshistorik.</numerusform><numerusform>Bearbejdede %n blokke med transaktionshistorik.</numerusform></translation>\n@@ -485,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1-klient</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Forbinder til knuder\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Indhenter\u2026</translation>\n@@ -3093,6 +3097,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Udf\u00f8r kommando, n\u00e5r en transaktion i tegnebogen \u00e6ndres (%s i kommandoen erstattes med TxID)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>Ekstra transaktioner, der skal beholdes i hukommelsen til kompakte blokgenopbygninger (standard: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Hvis denne blok er i k\u00e6den, s\u00e5 antag at den og dens forg\u00e6ngere er gyldige, og spring potentielt deres scriptverificering over (0 for at verificere alle, standard: %s, testnet: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>Justering af maksimalt tilladt gennemsnitlig afvigelse fra peer-tid. Den lokale opfattelse af tid kan blive p\u00e5virket frem eller tilbage af peers med denne m\u00e6ngde tid. (standard: %u sekunder)</translation>\n@@ -3109,6 +3121,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>Overvej venligst at bidrage til udviklingen, hvis du finder %s brugbar. Bes\u00f8g %s for yderligere information om softwaren.</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>Reduc\u00e9r pladskravene ved at besk\u00e6re (slette, \"prune\") gamle blokke. Dette tillader pruneblockchain-RPC'en at blive kaldt for at slette specifikke blokke, og det aktiverer automatisk besk\u00e6ring af gamle blokke, hvis en m\u00e5lst\u00f8rrelse i MiB er angivet. Denne tilstand er ikke kompatibel med -txindex og -rescan. Advarsel: Fortrydelse af denne indstilling kr\u00e6ver download af hele blokk\u00e6den igen. (standard: 0 = sl\u00e5 besk\u00e6ring af blokke fra, 1 = tillad manuel besk\u00e6ring via RPC, &gt;%u = besk\u00e6r automatisk blokfiler for at bliver under den angivne m\u00e5lst\u00f8rrelse i MiB)</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>S\u00e6t den laveste gebyrrate (i %s/kB) for transaktioner, der skal inkluderes i blokoprettelse. (standard: %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>S\u00e6t antallet af scriptverificeringstr\u00e5de (%u til %d, 0 = auto, &lt;0 = efterlad det antal kernet fri, standard: %d)</translation>"
      },
      {
        "sha": "af79d4773633cf8af7096723d50358251bb74a0e",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Klicken zum Aktivieren der Netzwerkaktivit\u00e4t.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Kopfdaten werden synchronisiert (%1%)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Reindiziere Bl\u00f6cke auf Datentr\u00e4ger...</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Verarbeite Bl\u00f6cke auf Datentr\u00e4ger...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Keine Blockquelle verf\u00fcgbar...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n Block des Transaktionsverlaufs verarbeitet.</numerusform><numerusform>%n Bl\u00f6cke des Transaktionsverlaufs verarbeitet.</numerusform></translation>\n@@ -485,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 Client</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Verbinde mit Netzwerk...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Hole auf...</translation>\n@@ -2192,6 +2196,10 @@\n         <source>Warning: Unknown change address</source>\n         <translation>Warnung: Unbekannte Wechselgeld-Adresse</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Best\u00e4tige benutzerdefinierte Wechselgeld-Adresse</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(keine Bezeichnung)</translation>\n@@ -3101,6 +3109,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>UPnP verwenden, um eine Portweiterleitung einzurichten (Standard: 1, wenn abgeh\u00f6rt wird und -proxy nicht gesetzt ist)</translation>\n     </message>\n+    <message>\n+        <source>Username and hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times</source>\n+        <translation>Benutzername und gehashtes Passwort f\u00fcr JSON-RPC Verbindungen. Das Feld &lt;userpw&gt; kommt im Format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. Ein kanonisches Pythonskript ist in share/rpcuser inbegriffen. Der client benutzt wie gehabt, die rpcuser/rpcpassword Parameter. Diese Option kann mehrere Male spezifiziert werden</translation>\n+    </message>\n     <message>\n         <source>Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.</source>\n         <translation>Warnung: Das Netzwerk scheint nicht vollst\u00e4ndig \u00fcbereinzustimmen! Einige Miner scheinen Probleme zu haben.</translation>"
      },
      {
        "sha": "0390a378e7717b6232a11ad4f18e70e1b0c1f552",
        "filename": "src/qt/locale/bitcoin_el_GR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_el_GR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_el_GR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el_GR.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -245,10 +245,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;\u0395\u03c0\u03b9\u03bb\u03bf\u03b3\u03ad\u03c2 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\u03c2 \u03b5\u03bd\u03c4\u03bf\u03bb\u03ce\u03bd</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0397 \u03c0\u03b7\u03b3\u03ae \u03c4\u03bf\u03c5 \u03bc\u03c0\u03bb\u03bf\u03ba \u03b4\u03b5\u03bd \u03b5\u03b9\u03bd\u03b1\u03b9 \u03b4\u03b9\u03b1\u03b8\u03ad\u03c3\u03b9\u03bc\u03b7... </translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u03c0\u03af\u03c3\u03c9</translation>"
      },
      {
        "sha": "cc834a8b96af40d10f3f57564dc8010ca32feff1",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -299,7 +299,7 @@\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+356\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+357\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n@@ -1134,7 +1134,7 @@\n     <message>\n         <location line=\"+7\"/>\n         <location line=\"+26\"/>\n-        <location filename=\"../modaloverlay.cpp\" line=\"+136\"/>\n+        <location filename=\"../modaloverlay.cpp\" line=\"+138\"/>\n         <source>Unknown...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2533,7 +2533,7 @@\n     <name>SendCoinsDialog</name>\n     <message>\n         <location filename=\"../forms/sendcoinsdialog.ui\" line=\"+14\"/>\n-        <location filename=\"../sendcoinsdialog.cpp\" line=\"+553\"/>\n+        <location filename=\"../sendcoinsdialog.cpp\" line=\"+554\"/>\n         <source>Send Coins</source>\n         <translation>Send Coins</translation>\n     </message>"
      },
      {
        "sha": "8af5db3e645ebf502d136fa12fe83c003f99a1ef",
        "filename": "src/qt/locale/bitcoin_en_GB.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_en_GB.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_en_GB.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en_GB.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -333,10 +333,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Processing blocks on disk...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>No block source available...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Processed %n block of transaction history.</numerusform><numerusform>Processed %n blocks of transaction history.</numerusform></translation>"
      },
      {
        "sha": "b4ed5e7fd503fe47e05f48742d2168cb9095e7fa",
        "filename": "src/qt/locale/bitcoin_eo.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_eo.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_eo.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_eo.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -241,10 +241,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;Komandliniaj agordaj\u0302oj</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Neniu fonto de blokoj trovebla...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>mankas %1</translation>"
      },
      {
        "sha": "fc71bf841be38ae8141fdc1bbb6ff2fb0638bea1",
        "filename": "src/qt/locale/bitcoin_es.ts",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Pulsar para volver a habilitar la actividad de red.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Sincronizando cabeceras (%1%)</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Reindexando bloques en disco...</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Procesando bloques en disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ninguna fuente de bloques disponible...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n bloque procesado del historial de transacciones.</numerusform><numerusform>%n bloques procesados del historial de transacciones.</numerusform></translation>\n@@ -3618,6 +3618,11 @@\n         <source>Output debugging information (default: %u, supplying &lt;category&gt; is optional)</source>\n         <translation>Mostrar depuraci\u00f3n (por defecto: %u, proporcionar &lt;category&gt; es opcional)</translation>\n     </message>\n+    <message>\n+        <source>Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)</source>\n+        <translation>https://www.transifex.com/joyful-world/breaking-english/\n+Establecer la serializaci\u00f3n de las transacciones sin procesar o el bloque hex devuelto en non-verbose mode, non-segwit(O) o segwit(1) (default: %d)</translation>\n+    </message>\n     <message>\n         <source>Support filtering of blocks and transaction with bloom filters (default: %u)</source>\n         <translation>Admite filtrado de bloques, y transacciones con filtros Bloom. Reduce la carga de red. ( por defecto :%u)</translation>"
      },
      {
        "sha": "77e6ef16f3390d616e0788828447784c7afa7a6b",
        "filename": "src/qt/locale/bitcoin_es_DO.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es_DO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es_DO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_DO.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -237,10 +237,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;Opciones de linea de comando</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ninguna fuente de bloques disponible ...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 atr\u00e1s</translation>"
      },
      {
        "sha": "7865483183d9fb6161876fbb559cda7e804223a0",
        "filename": "src/qt/locale/bitcoin_es_ES.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_es_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_ES.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -429,10 +429,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Procesando bloques en disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ninguna fuente de bloques disponible ...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n bloque procesado del historial de transacciones.</numerusform><numerusform>%n bloques procesados del historial de transacciones.</numerusform></translation>"
      },
      {
        "sha": "f95b01d33b9179dce5eb5e8f0ce9223310ef7d16",
        "filename": "src/qt/locale/bitcoin_et.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_et.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_et.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -385,10 +385,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>K\u00f5vakettal olevate plokkide t\u00f6\u00f6tlemine...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Plokkide allikas pole saadaval...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>T\u00f6\u00f6deldud %n plokk transaktsioonide ajaloost.</numerusform><numerusform>T\u00f6\u00f6deldud %n plokki transaktsioonide ajaloost.</numerusform></translation>"
      },
      {
        "sha": "c9cfad0f2a56c11099c561fc5bff786d87858454",
        "filename": "src/qt/locale/bitcoin_fa.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fa.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fa.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fa.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -357,10 +357,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u067e\u0631\u062f\u0627\u0632\u0634 \u0628\u0644\u0648\u06a9\u200c\u0647\u0627 \u0631\u0648\u06cc \u062f\u06cc\u0633\u06a9...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0645\u0646\u0628\u0639\u06cc \u0628\u0631\u0627\u06cc \u062f\u0631\u06cc\u0627\u0641\u062a \u0628\u0644\u0627\u06a9 \u062f\u0631 \u062f\u0633\u062a\u0631\u0633 \u0646\u06cc\u0633\u062a...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u067e\u0631\u062f\u0627\u0632\u0634 %n  \u0628\u0644\u0627\u06a9 \u0627\u0632 \u062a\u0627\u0631\u06cc\u062e\u0686\u0647 \u06cc \u062a\u0631\u0627\u06a9\u0646\u0634 \u0647\u0627 </numerusform></translation>"
      },
      {
        "sha": "ef76abc098e13bddc0d401d29e71718efc7d60a6",
        "filename": "src/qt/locale/bitcoin_fi.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fi.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fi.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fi.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -273,10 +273,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>K\u00e4sitell\u00e4\u00e4n lohkoja levyll\u00e4...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Lohkojen l\u00e4hdett\u00e4 ei saatavilla...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Prosessoitu %n lohko rahansiirtohistoriasta.</numerusform><numerusform>Prosessoitu %n lohkoa rahansiirtohistoriasta.</numerusform></translation>"
      },
      {
        "sha": "92682ff297a455694365e109e8619b814905a50b",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Traitement des blocs sur le disque...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Aucune source de blocs disponible...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n bloc d'historique transactionnel a \u00e9t\u00e9 trait\u00e9</numerusform><numerusform>%n blocs d'historique transactionnel ont \u00e9t\u00e9 trait\u00e9s</numerusform></translation>\n@@ -485,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>Client %1</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Connexion aux pairs...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Rattrapage\u2026</translation>\n@@ -3093,6 +3093,10 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Ex\u00e9cuter la commande lorsqu'une transaction de porte-monnaie change (%s dans la commande est remplac\u00e9e par TxID)</translation>\n     </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Si ce bloc est dans la cha\u00eene, supposer qu'il est valide, ainsi que ces anc\u00eatres, et ignorer potentiellement la v\u00e9rification de leur script (0 pour tout v\u00e9rifier, valeur par d\u00e9faut : %s, r\u00e9seau de test : %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>R\u00e9glage moyen maximal autoris\u00e9 de d\u00e9calage de l'heure d'un pair. La perspective locale du temps peut \u00eatre influenc\u00e9e par les pairs, en avance ou en retard, de cette valeur. (Par d\u00e9faut : %u secondes)</translation>"
      },
      {
        "sha": "4d02aa5114d620da54ccad3452270128dfd73888",
        "filename": "src/qt/locale/bitcoin_fr_FR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fr_FR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_fr_FR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr_FR.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -261,10 +261,6 @@\n         <source>Indexing blocks on disk...</source>\n         <translation>Indexation des blocs sur le disque...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Aucun bloc source disponible</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>en retard de %1</translation>"
      },
      {
        "sha": "ff0804d79b52b83798a41dbc3d2a065fa207dfad",
        "filename": "src/qt/locale/bitcoin_gl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_gl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_gl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_gl.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -225,10 +225,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>Opci\u00f3ns da li\u00f1a de comandos</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Non hai orixe de bloques dispo\u00f1ible...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 detr\u00e1s</translation>"
      },
      {
        "sha": "78ef446ff1b29db9671fa1786e9472e52f4a3a86",
        "filename": "src/qt/locale/bitcoin_he.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_he.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_he.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_he.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -317,10 +317,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u05de\u05e2\u05d1\u05d3 \u05d1\u05dc\u05d5\u05e7\u05d9\u05dd \u05e2\u05dc \u05d4\u05d3\u05d9\u05e1\u05e7...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u05d0\u05d9\u05df \u05de\u05e7\u05d5\u05e8 \u05de\u05e7\u05d8\u05e2\u05d9\u05dd \u05d6\u05de\u05d9\u05df\u2026</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u05de\u05d0\u05d7\u05d5\u05e8</translation>"
      },
      {
        "sha": "28270e8c2e159e9014ee313fa66d8aab800477ac",
        "filename": "src/qt/locale/bitcoin_hu.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_hu.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_hu.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hu.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -257,10 +257,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n akt\u00edv kapcsolat a Bitcoin h\u00e1l\u00f3zathoz</numerusform><numerusform>%n akt\u00edv kapcsolat a Bitcoin h\u00e1l\u00f3zathoz</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Blokk forr\u00e1sa ismeretlen...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n blokk feldolgozva a tranzakci\u00f3 el\u0151zm\u00e9nyb\u0151l.</numerusform><numerusform>%n blokk feldolgozva a tranzakci\u00f3 el\u0151zm\u00e9nyb\u0151l.</numerusform></translation>"
      },
      {
        "sha": "fd77f07cd854fa228cf0cc46caec9cfd8e713285",
        "filename": "src/qt/locale/bitcoin_id_ID.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_id_ID.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_id_ID.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_id_ID.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -253,10 +253,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n koneksi aktif ke jaringan Bitcoin</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Sumber blok tidak tersedia...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n blok dari riwayat transaksi diproses.</numerusform></translation>"
      },
      {
        "sha": "484e7f86bd2bc88597c9c9182a7919d5d13377c7",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -401,10 +401,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Processando i blocchi su disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nessuna fonte di blocchi disponibile...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Elaborato %n blocco dello storico transazioni.</numerusform><numerusform>Elaborati %n blocchi dello storico transazioni.</numerusform></translation>"
      },
      {
        "sha": "f81818896fcf1afc104a9f2363563e98ee2ec5ef",
        "filename": "src/qt/locale/bitcoin_ja.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ja.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ja.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u6d3b\u52d5\u3092\u518d\u3073\u6709\u52b9\u5316\u3057\u307e\u3059\u3002</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>\u672a\u77e5\u3002\u30d8\u30c3\u30c0\u3092\u540c\u671f\u3057\u3066\u3044\u307e\u3059 (%1%)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>\u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u30d6\u30ed\u30c3\u30af\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u518d\u4f5c\u6210\u4e2d...</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u30d6\u30ed\u30c3\u30af\u3092\u51e6\u7406\u3057\u3066\u3044\u307e\u3059...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u5229\u7528\u53ef\u80fd\u306a\u30d6\u30ed\u30c3\u30af\u304c\u3042\u308a\u307e\u305b\u3093...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5c65\u6b74\u306e %n \u30d6\u30ed\u30c3\u30af\u3092\u51e6\u7406\u3057\u307e\u3057\u305f\u3002</numerusform></translation>\n@@ -485,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u30af\u30e9\u30a4\u30a2\u30f3\u30c8</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u30d4\u30a2\u306b\u63a5\u7d9a\u3057\u3066\u3044\u307e\u3059...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u8ffd\u8de1\u4e2d...</translation>\n@@ -3093,6 +3097,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>\u30a6\u30a9\u30ec\u30c3\u30c8\u306e\u53d6\u5f15\u3092\u5909\u66f4\u3059\u308b\u969b\u306b\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c (cmd \u306e %s \u306f TxID \u306b\u7f6e\u63db\u3055\u308c\u308b)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>\u30b3\u30f3\u30d1\u30af\u30c8\u30d6\u30ed\u30c3\u30af\u518d\u69cb\u6210\u306e\u305f\u3081\u306b\u8ffd\u52a0\u306e\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u30e1\u30e2\u30ea\u5185\u306b\u4fdd\u7ba1\u3057\u3066\u304a\u304f (\u30c7\u30d5\u30a9\u30eb\u30c8: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>\u3053\u306e\u30d6\u30ed\u30c3\u30af\u304c\u30d6\u30ed\u30c3\u30af\u30c1\u30a7\u30fc\u30f3\u5185\u306b\u542b\u307e\u308c\u3066\u3044\u305f\u5834\u5408\u306b\u306f\u3001\u3053\u306e\u30d6\u30ed\u30c3\u30af\u304a\u3088\u3073\u305d\u308c\u4ee5\u524d\u306e\u3059\u3079\u3066\u306e\u30d6\u30ed\u30c3\u30af\u3092\u6709\u52b9\u3067\u3042\u308b\u3068\u307f\u306a\u3057\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u691c\u8a3c\u3092\u7701\u7565\u3059\u308b (0\u306a\u3089\u3059\u3079\u3066\u3092\u691c\u8a3c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8: %s\u3001\u30c6\u30b9\u30c8\u30cd\u30c3\u30c8: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>\u6642\u9593\u30aa\u30d5\u30bb\u30c3\u30c8\u8abf\u6574\u5024\u306e\u30d4\u30a2\u4e2d\u592e\u5024\u306b\u5bfe\u3059\u308b\u6700\u5927\u306e\u8a31\u5bb9\u5024\u3002\u30ed\u30fc\u30ab\u30eb\u6642\u9593\u306e\u898b\u8fbc\u307f\u5024\u306f\u3001\u63a5\u7d9a\u3059\u308b\u30d4\u30a2\u306b\u3088\u308a\u524d\u65b9\u306a\u3044\u3057\u5f8c\u65b9\u3078\u5f71\u97ff\u3055\u308c\u307e\u3059\u3002(\u521d\u671f\u5024: %u \u79d2)</translation>"
      },
      {
        "sha": "14378ebea16a66256f75a9cb4d9f9e893a205ec2",
        "filename": "src/qt/locale/bitcoin_ka.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ka.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ka.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ka.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -237,10 +237,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>\u10e1\u10d0\u10d9\u10dd\u10db\u10d0\u10dc\u10d3\u10dd \u10e1\u10e2\u10e0\u10d8\u10e5\u10dd\u10dc\u10d8\u10e1 \u10dd\u10de&amp;\u10ea\u10d8\u10d4\u10d1\u10d8</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u10d1\u10da\u10dd\u10d9\u10d4\u10d1\u10d8\u10e1 \u10ec\u10e7\u10d0\u10e0\u10dd \u10db\u10d8\u10e3\u10ec\u10d5\u10d3\u10dd\u10db\u10d4\u10da\u10d8\u10d0...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u10d2\u10d0\u10d5\u10da\u10d8\u10da\u10d8\u10d0</translation>"
      },
      {
        "sha": "9b5c1c077ef518d069eb1f7c0f45ae37fb1012b2",
        "filename": "src/qt/locale/bitcoin_ko_KR.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ko_KR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ko_KR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ko_KR.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -429,10 +429,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\ub514\uc2a4\ud06c\uc5d0\uc11c \ube14\ub85d \ucc98\ub9ac\uc911...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ube14\ub85d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n \ube14\ub7ed \ub9cc\ud07c\uc758 \uac70\ub798 \uae30\ub85d\uc774 \ucc98\ub9ac\ub428.</numerusform></translation>"
      },
      {
        "sha": "d84dd7e4e229d4f2e70e178b22274439db49e0bf",
        "filename": "src/qt/locale/bitcoin_la.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_la.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_la.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_la.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -193,10 +193,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>Optiones mandati initiantis</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nulla fons frustorum absens...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 post</translation>"
      },
      {
        "sha": "2953da443ab5c0e4d31e36654d5c9ccb309c2730",
        "filename": "src/qt/locale/bitcoin_lv_LV.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_lv_LV.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_lv_LV.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_lv_LV.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -229,10 +229,6 @@\n         <source>&amp;Command-line options</source>\n         <translation>&amp;Komandrindas iesp\u0113jas</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nav pieejams neviens bloku avots...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 aizmugur\u0113</translation>"
      },
      {
        "sha": "183cbac80aaedf6e978e40af982dfeb36186af5f",
        "filename": "src/qt/locale/bitcoin_nb.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_nb.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_nb.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nb.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -265,10 +265,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n aktiv forbindelse til Bitcoin-nettverket</numerusform><numerusform>%n aktive forbindelser til Bitcoin-nettverket</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ingen kilde for blokker tilgjengelig...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Lastet %n blokk med transaksjonshistorikk.</numerusform><numerusform>Lastet %n blokker med transaksjonshistorikk.</numerusform></translation>"
      },
      {
        "sha": "2b625b5a078b93ee259c984b43c49ed45e19a471",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -429,10 +429,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Bezig met verwerken van blokken op harde schijf...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Geen bron voor blokken beschikbaar...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n blok aan transactiegeschiedenis verwerkt.</numerusform><numerusform>%n blokken aan transactiegeschiedenis verwerkt.</numerusform></translation>"
      },
      {
        "sha": "46348140700e77fce82d5e84956636beb4904a4d",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 73,
        "deletions": 5,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -167,14 +167,34 @@\n         <source>Confirm wallet encryption</source>\n         <translation>Potwierd\u017a szyfrowanie portfela</translation>\n     </message>\n+    <message>\n+        <source>Warning: If you encrypt your wallet and lose your passphrase, you will &lt;b&gt;LOSE ALL OF YOUR BITCOINS&lt;/b&gt;!</source>\n+        <translation>Uwaga: je\u015bli zaszyfrujesz sw\u00f3j portfel i zgubisz has\u0142o &lt;b&gt;STRACISZ WSZYSTKIE SWOJE BITCOINY&lt;/b&gt;!</translation>\n+    </message>\n+    <message>\n+        <source>Are you sure you wish to encrypt your wallet?</source>\n+        <translation>Jeste\u015b pewien, \u017ce chcesz zaszyfrowa\u0107 sw\u00f3j portfel?</translation>\n+    </message>\n     <message>\n         <source>Wallet encrypted</source>\n         <translation>Portfel zaszyfrowany</translation>\n     </message>\n+    <message>\n+        <source>%1 will close now to finish the encryption process. Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.</source>\n+        <translation>%1 zamknie si\u0119 aby doko\u0144czy\u0107 proces szyfrowania. Pami\u0119taj, \u017ce szyfrowanie portfela nie zabezpiecza w pe\u0142ni Twoich bitcoin\u00f3w przed kradzie\u017c\u0105 przez wirusy lub trojany mog\u0105ce zainfekowa\u0107 Tw\u00f3j komputer.</translation>\n+    </message>\n+    <message>\n+        <source>IMPORTANT: Any previous backups you have made of your wallet file should be replaced with the newly generated, encrypted wallet file. For security reasons, previous backups of the unencrypted wallet file will become useless as soon as you start using the new, encrypted wallet.</source>\n+        <translation>WA\u017bNE: Wszystkie wykonane wcze\u015bniej kopie pliku portfela powinny by\u0107 zamienione na nowe, szyfrowane pliki. Z powod\u00f3w bezpiecze\u0144stwa, poprzednie kopie nieszyfrowanych plik\u00f3w portfela stan\u0105 si\u0119 bezu\u017cyteczne jak tylko zaczniesz korzysta\u0107 z nowego, szyfrowanego portfela.</translation>\n+    </message>\n     <message>\n         <source>Wallet encryption failed</source>\n         <translation>Szyfrowanie portfela nie powiod\u0142o si\u0119</translation>\n     </message>\n+    <message>\n+        <source>Wallet encryption failed due to an internal error. Your wallet was not encrypted.</source>\n+        <translation>Szyfrowanie portfela nie powiod\u0142o si\u0119 z powodu wewn\u0119trznego b\u0142\u0119du. Tw\u00f3j portfel nie zosta\u0142 zaszyfrowany.</translation>\n+    </message>\n     <message>\n         <source>The supplied passphrases do not match.</source>\n         <translation>Podane has\u0142a nie s\u0105 takie same.</translation>\n@@ -409,10 +429,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Przetwarzanie blocks on disk...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Brak dost\u0119pnych \u017ar\u00f3de\u0142 blok\u00f3w...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Przetworzono %n blok\u00f3w historii transakcji.</numerusform><numerusform>Przetworzono %n blok\u00f3w historii transakcji.</numerusform><numerusform>Przetworzono %n blok\u00f3w historii transakcji.</numerusform></translation>\n@@ -1980,10 +1996,34 @@\n         <source>%1 to %2</source>\n         <translation>%1 do %2</translation>\n     </message>\n+    <message>\n+        <source>or</source>\n+        <translation>lub</translation>\n+    </message>\n+    <message>\n+        <source>The amount to pay must be larger than 0.</source>\n+        <translation>Kwota do zap\u0142acenia musi by\u0107 wi\u0119ksza od 0.</translation>\n+    </message>\n+    <message>\n+        <source>Transaction creation failed!</source>\n+        <translation>Utworzenie transakcji nie powiod\u0142o si\u0119!</translation>\n+    </message>\n     <message>\n         <source>Payment request expired.</source>\n         <translation>\u017b\u0105danie p\u0142atno\u015bci up\u0142yn\u0119\u0142o.</translation>\n     </message>\n+    <message>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>Zap\u0142a\u0107 tylko wymagan\u0105 op\u0142at\u0119 w wysoko\u015bci %1</translation>\n+    </message>\n+    <message>\n+        <source>Warning: Invalid Bitcoin address</source>\n+        <translation>Ostrze\u017cenie: nieprawid\u0142owy adres Bitcoin</translation>\n+    </message>\n+    <message>\n+        <source>Warning: Unknown change address</source>\n+        <translation>Ostrze\u017cenie: Nieznany adres reszty</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(brak etykiety)</translation>\n@@ -2070,7 +2110,11 @@\n     </context>\n <context>\n     <name>SendConfirmationDialog</name>\n-    </context>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Tak</translation>\n+    </message>\n+</context>\n <context>\n     <name>ShutdownWindow</name>\n     <message>\n@@ -2169,6 +2213,22 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Reset all verify message fields</source>\n         <translation>Resetuje wszystkie pola weryfikacji wiadomo\u015bci</translation>\n     </message>\n+    <message>\n+        <source>Wallet unlock was cancelled.</source>\n+        <translation>Odblokowanie portfela zosta\u0142o anulowane.</translation>\n+    </message>\n+    <message>\n+        <source>Private key for the entered address is not available.</source>\n+        <translation>Klucz prywatny dla podanego adresu nie jest dost\u0119pny.</translation>\n+    </message>\n+    <message>\n+        <source>Message signing failed.</source>\n+        <translation>Podpisanie wiadomo\u015bci nie powiod\u0142o si\u0119.</translation>\n+    </message>\n+    <message>\n+        <source>Message signed.</source>\n+        <translation>Wiadomo\u015b\u0107 podpisana.</translation>\n+    </message>\n     </context>\n <context>\n     <name>SplashScreen</name>\n@@ -2730,6 +2790,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Uruchom polecenie przy otrzymaniu odpowiedniego powiadomienia lub gdy zobaczymy naprawd\u0119 d\u0142ugie rozga\u0142\u0119zienie (%s w poleceniu jest podstawiane za komunikat)</translation>\n     </message>\n+    <message>\n+        <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n+        <translation>Op\u0142aty (w %s/Kb) mniejsze ni\u017c ta, b\u0119d\u0105 traktowane jako zerowe przy tworzeniu, przesy\u0142aniu i zatwierdzaniu transakcji (domy\u015blnie: %s)</translation>\n+    </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n         <translation>Je\u017celi nie ustawiono paytxfee, do\u0142\u0105cz wystarczaj\u0105ca op\u0142at\u0119, aby transakcja mog\u0142a zosta\u0107 zatwierdzona w ci\u0105gu \u015bredniej ilo\u015bci n blok\u00f3w (domy\u015blnie: %u)</translation>\n@@ -2750,6 +2814,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>The transaction amount is too small to send after the fee has been deducted</source>\n         <translation>Zbyt niska kwota transakcji do wys\u0142ania po odj\u0119ciu op\u0142aty</translation>\n     </message>\n+    <message>\n+        <source>Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start</source>\n+        <translation>U\u017cyj hierarchicznej deterministycznej metody generowania kluczy (HD) zgodnie z BIP32. Ma znaczenie tylko podczas tworzenia portfela/pierwszego startu.</translation>\n+    </message>\n     <message>\n         <source>Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway</source>\n         <translation>W\u0119z\u0142y z bia\u0142ej listy nie mog\u0105 zosta\u0107 zbanowane za ataki DoS, a ich transakcje b\u0119d\u0105 zawsze przekazywane, nawet je\u017celi b\u0119d\u0105 znajdywa\u0107 si\u0119 ju\u017c w pami\u0119ci, przydatne np. dla bramek p\u0142atniczych</translation>"
      },
      {
        "sha": "c6370353030e6a6bd210c194d76a19e7819d5410",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -325,6 +325,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Clique para ativar a atividade de rede.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Sincronizando cabe\u00e7ahos (%1%)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Reindexando blocos no disco...</translation>\n@@ -437,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Processando blocos no disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nenhum servidor dispon\u00edvel...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n bloco processado do hist\u00f3rico de transa\u00e7\u00f5es.</numerusform><numerusform>%n blocos processados do hist\u00f3rico de transa\u00e7\u00f5es.</numerusform></translation>\n@@ -481,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>%1</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Conectando...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Recuperando o atraso ...</translation>\n@@ -3085,6 +3089,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Executa um comando quando uma transa\u00e7\u00e3o da carteira mudar (%s no comando ser\u00e1 substitu\u00eddo por TxID)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>Transa\u00e7\u00f5es extras para manter na mem\u00f3ria para reconstru\u00e7\u00f5es de blocos compactos (padr\u00e3o: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Se\u00a0este bloco est\u00e1 no blockchain, assume-se que ele e seus ancestrais s\u00e3o v\u00e1lidos e podem ignorar a verifica\u00e7\u00e3o de scripts (0 para verificar todos, padr\u00e3o: %s, testnet: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>A media m\u00e1xima permitida de peer time compensa o ajuste. Perspectiva local de hor\u00e1rio pode ser influenciada por pares \u00e0 frente ou atr\u00e1s neste montante. (padr\u00e3o: %u segundos)</translation>"
      },
      {
        "sha": "c97272d4b73b35ea6a1335f13142ddc827f323db",
        "filename": "src/qt/locale/bitcoin_pt_PT.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pt_PT.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_pt_PT.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_PT.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -417,10 +417,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>A processar blocos no disco...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nenhuma fonte de blocos dispon\u00edvel...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Processado %n bloco do hist\u00f3rico de transa\u00e7\u00f5es.</numerusform><numerusform>Processados %n blocos do hist\u00f3rico de transa\u00e7\u00f5es.</numerusform></translation>"
      },
      {
        "sha": "3d3a4b04316fcac64a4359b6cdc768be27c7ce26",
        "filename": "src/qt/locale/bitcoin_ro_RO.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ro_RO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ro_RO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ro_RO.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -253,10 +253,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n conexiune activ\u0103 c\u0103tre re\u0163eaua Bitcoin</numerusform><numerusform>%n conexiuni active c\u0103tre re\u0163eaua Bitcoin</numerusform><numerusform>%n de conexiuni active c\u0103tre re\u0163eaua Bitcoin</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nici o surs\u0103 de bloc disponibil\u0103...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>S-a procesat %n bloc din istoricul tranzac\u0163iilor.</numerusform><numerusform>S-au procesat %n blocuri din istoricul tranzac\u0163iilor.</numerusform><numerusform>S-au procesat %n de blocuri din istoricul tranzac\u0163iilor.</numerusform></translation>"
      },
      {
        "sha": "b5f40fc0589007f64a96ba5f14abf6c88bccd3d8",
        "filename": "src/qt/locale/bitcoin_ru.ts",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ru.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_ru.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ru.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -63,7 +63,7 @@\n     </message>\n     <message>\n         <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n-        <translation>\u042d\u0442\u043e \u0432\u0430\u0448\u0438 \u0430\u0434\u0440\u0435\u0441\u0430 Bitcoin \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439. \u0412\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430.</translation>\n+        <translation>\u042d\u0442\u043e \u0432\u0430\u0448\u0438 \u0430\u0434\u0440\u0435\u0441\u0430 Bitcoin \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0435\u0439. \u0412\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435 \u0441\u0443\u043c\u043c\u0443 \u0438 \u0430\u0434\u0440\u0435\u0441 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430.</translation>\n     </message>\n     <message>\n         <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0431\u043b\u043e\u043a\u043e\u0432 \u043d\u0430 \u0434\u0438\u0441\u043a\u0435...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0431\u043b\u043e\u043a\u043e\u0432 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d %n \u0431\u043b\u043e\u043a \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e %n \u0431\u043b\u043e\u043a\u0430 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e %n \u0431\u043b\u043e\u043a\u043e\u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e %n \u0431\u043b\u043e\u043a\u043e\u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439.</numerusform></translation>\n@@ -485,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u043a\u043b\u0438\u0435\u043d\u0442</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043f\u0438\u0440\u0430\u043c...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u0421\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f...</translation>"
      },
      {
        "sha": "87dc620f0e1bf9854680283ca3fe38f106f4978e",
        "filename": "src/qt/locale/bitcoin_sk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sk.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -277,10 +277,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Spracov\u00e1vam bloky na disku...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Nedostupn\u00fd zdroj blokov...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Spracovan\u00fdch %n blok transak\u010dnej hist\u00f3rie.</numerusform><numerusform>Spracovan\u00fdch %n bloky transak\u010dnej hist\u00f3rie.</numerusform><numerusform>Spracovan\u00fdch %n blokov transak\u010dnej hist\u00f3rie.</numerusform></translation>"
      },
      {
        "sha": "8a21f978ef1323846d38dd01c41552e2a510a3eb",
        "filename": "src/qt/locale/bitcoin_sl_SI.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sl_SI.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sl_SI.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sl_SI.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -261,10 +261,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Obdelava blokov na disku ...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ni virov za prenos blokov ...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n obdelan blok zgodovine transakcij.</numerusform><numerusform>%n obdelana bloka zgodovine transakcij.</numerusform><numerusform>%n obdelani bloki zgodovine transakcij.</numerusform><numerusform>%n obdelanih blokov zgodovine transakcij.</numerusform></translation>"
      },
      {
        "sha": "f880dd227e582e897a33f1338e37ba818f46136b",
        "filename": "src/qt/locale/bitcoin_sr.ts",
        "status": "modified",
        "additions": 50,
        "deletions": 2,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sr.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -37,6 +37,22 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;\u0418\u0437\u0431\u0440\u0438\u0448\u0438</translation>\n     </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Izbirajte adresu za slanje</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>Izbirajte adresu za primanje</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Adresa za slanje</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Adresa za primanje</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n@@ -145,6 +161,10 @@\n         <source>Tabs toolbar</source>\n         <translation>\u0422\u0440\u0430\u043a\u0430 \u0441\u0430 \u043a\u0430\u0440\u0442\u0438\u0446\u0430\u043c\u0430</translation>\n     </message>\n+    <message>\n+        <source>Error</source>\n+        <translation>Gre\u0161ka</translation>\n+    </message>\n     <message>\n         <source>Up to date</source>\n         <translation>\u0410\u0436\u0443\u0440\u043d\u043e</translation>\n@@ -220,6 +240,10 @@\n     </context>\n <context>\n     <name>Intro</name>\n+    <message>\n+        <source>Error</source>\n+        <translation>Gre\u0161ka</translation>\n+    </message>\n     </context>\n <context>\n     <name>ModalOverlay</name>\n@@ -278,6 +302,14 @@\n     </context>\n <context>\n     <name>RPCConsole</name>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Da</translation>\n+    </message>\n+    <message>\n+        <source>No</source>\n+        <translation>Ne</translation>\n+    </message>\n     </context>\n <context>\n     <name>ReceiveCoinsDialog</name>\n@@ -293,6 +325,10 @@\n         <source>&amp;Message:</source>\n         <translation>Poruka:</translation>\n     </message>\n+    <message>\n+        <source>Show</source>\n+        <translation>Prika\u017ei</translation>\n+    </message>\n     </context>\n <context>\n     <name>ReceiveRequestDialog</name>\n@@ -348,7 +384,11 @@\n     </context>\n <context>\n     <name>SendConfirmationDialog</name>\n-    </context>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Da</translation>\n+    </message>\n+</context>\n <context>\n     <name>ShutdownWindow</name>\n     </context>\n@@ -431,6 +471,10 @@\n         <source>Loading addresses...</source>\n         <translation>u\u010ditavam adrese....</translation>\n     </message>\n+    <message>\n+        <source>Insufficient funds</source>\n+        <translation>Nedovoljno sredstava</translation>\n+    </message>\n     <message>\n         <source>Loading block index...</source>\n         <translation>U\u010ditavam blok indeksa...</translation>\n@@ -447,5 +491,9 @@\n         <source>Done loading</source>\n         <translation>Zavr\u0161eno u\u010ditavanje</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Error</source>\n+        <translation>Gre\u0161ka</translation>\n+    </message>\n+</context>\n </TS>\n\\ No newline at end of file"
      },
      {
        "sha": "2986115a62096cd171508800934150fac120a6b9",
        "filename": "src/qt/locale/bitcoin_sv.ts",
        "status": "modified",
        "additions": 189,
        "deletions": 9,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sv.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_sv.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sv.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -318,6 +318,22 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Open &amp;URI...</source>\n         <translation>\u00d6ppna &amp;URI...</translation>\n     </message>\n+    <message>\n+        <source>Click to disable network activity.</source>\n+        <translation>Klicka f\u00f6r att inaktivera n\u00e4tverksaktivitet.</translation>\n+    </message>\n+    <message>\n+        <source>Network activity disabled.</source>\n+        <translation>N\u00e4tverksaktivitet inaktiverad.</translation>\n+    </message>\n+    <message>\n+        <source>Click to enable network activity again.</source>\n+        <translation>Klicka f\u00f6r att aktivera n\u00e4tverksaktivitet igen.</translation>\n+    </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synkar huvuden (%1%)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>\u00c5terindexerar block p\u00e5 disken...</translation>\n@@ -430,10 +446,6 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Processing blocks on disk...</source>\n         <translation>Bearbetar block p\u00e5 disken...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Ingen block-k\u00e4lla tillg\u00e4nglig...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Bearbetade %n block av transaktionshistoriken.</numerusform><numerusform>Bearbetade %n block av transaktionshistoriken.</numerusform></translation>\n@@ -474,6 +486,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>%1 client</source>\n         <translation>%1-klient</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Ansluter till noder...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>H\u00e4mtar senaste...</translation>\n@@ -607,6 +623,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Copy amount</source>\n         <translation>Kopiera belopp</translation>\n     </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Kopiera transaktions-ID</translation>\n+    </message>\n+    <message>\n+        <source>yes</source>\n+        <translation>ja</translation>\n+    </message>\n+    <message>\n+        <source>no</source>\n+        <translation>nej</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(Ingen etikett)</translation>\n@@ -634,6 +662,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>&amp;Address</source>\n         <translation>&amp;Adress</translation>\n     </message>\n+    <message>\n+        <source>Could not unlock wallet.</source>\n+        <translation>Kunde inte l\u00e5sa upp pl\u00e5nboken.</translation>\n+    </message>\n     </context>\n <context>\n     <name>FreespaceChecker</name>\n@@ -762,15 +794,35 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Form</source>\n         <translation>Formul\u00e4r</translation>\n     </message>\n+    <message>\n+        <source>Number of blocks left</source>\n+        <translation>Antal block kvar</translation>\n+    </message>\n+    <message>\n+        <source>Unknown...</source>\n+        <translation>Ok\u00e4nt...</translation>\n+    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Sista blocktid</translation>\n     </message>\n+    <message>\n+        <source>Progress</source>\n+        <translation>F\u00f6rlopp</translation>\n+    </message>\n+    <message>\n+        <source>calculating...</source>\n+        <translation>ber\u00e4knar...</translation>\n+    </message>\n     <message>\n         <source>Hide</source>\n         <translation>G\u00f6m</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Unknown. Syncing Headers (%1)...</source>\n+        <translation>Ok\u00e4nd. Synkar huvuden (%1)...</translation>\n+    </message>\n+</context>\n <context>\n     <name>OpenURIDialog</name>\n     <message>\n@@ -1102,6 +1154,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n </context>\n <context>\n     <name>PaymentServer</name>\n+    <message>\n+        <source>URI handling</source>\n+        <translation>URI-hantering</translation>\n+    </message>\n+    <message>\n+        <source>Refund from %1</source>\n+        <translation>\u00c5terbetalning fr\u00e5n %1</translation>\n+    </message>\n+    <message>\n+        <source>Bad response from server %1</source>\n+        <translation>Felaktigt svar fr\u00e5n server %1</translation>\n+    </message>\n     </context>\n <context>\n     <name>PeerTableModel</name>\n@@ -1113,7 +1177,11 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Node/Service</source>\n         <translation>Nod/Tj\u00e4nst</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Ping</source>\n+        <translation>Ping</translation>\n+    </message>\n+</context>\n <context>\n     <name>QObject</name>\n     <message>\n@@ -1152,14 +1220,42 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>%1 ms</source>\n         <translation>%1 ms</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n second(s)</source>\n+        <translation><numerusform>%n sekund</numerusform><numerusform>%n sekunder</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n minute(s)</source>\n+        <translation><numerusform>%n minut</numerusform><numerusform>%n minuter</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n hour(s)</source>\n+        <translation><numerusform>%n timme</numerusform><numerusform>%n timmar</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n day(s)</source>\n+        <translation><numerusform>%n dag</numerusform><numerusform>%n dagar</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n week(s)</source>\n+        <translation><numerusform>%n vecka</numerusform><numerusform>%n veckor</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 och %2</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n year(s)</source>\n+        <translation><numerusform>%n \u00e5r</numerusform><numerusform>%n \u00e5r</numerusform></translation>\n+    </message>\n     </context>\n <context>\n     <name>QObject::QObject</name>\n-    </context>\n+    <message>\n+        <source>Error: %1</source>\n+        <translation>Fel: %1</translation>\n+    </message>\n+</context>\n <context>\n     <name>QRImageWidget</name>\n     </context>\n@@ -1512,10 +1608,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Remove</source>\n         <translation>Ta bort</translation>\n     </message>\n+    <message>\n+        <source>Copy URI</source>\n+        <translation>Kopiera URI</translation>\n+    </message>\n     <message>\n         <source>Copy label</source>\n         <translation>Kopiera etikett</translation>\n     </message>\n+    <message>\n+        <source>Copy message</source>\n+        <translation>Kopiera meddelande</translation>\n+    </message>\n     <message>\n         <source>Copy amount</source>\n         <translation>Kopiera belopp</translation>\n@@ -1539,6 +1643,14 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>&amp;Save Image...</source>\n         <translation>&amp;Spara Bild...</translation>\n     </message>\n+    <message>\n+        <source>Payment information</source>\n+        <translation>Betalinformaton</translation>\n+    </message>\n+    <message>\n+        <source>URI</source>\n+        <translation>URI</translation>\n+    </message>\n     <message>\n         <source>Address</source>\n         <translation>Adress</translation>\n@@ -1547,17 +1659,33 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Label</source>\n         <translation>Etikett</translation>\n     </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>Meddelande</translation>\n+    </message>\n     </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>Etikett</translation>\n     </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>Meddelande</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(Ingen etikett)</translation>\n     </message>\n+    <message>\n+        <source>(no message)</source>\n+        <translation>(inget meddelande)</translation>\n+    </message>\n     </context>\n <context>\n     <name>SendCoinsDialog</name>\n@@ -1705,6 +1833,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Copy amount</source>\n         <translation>Kopiera belopp</translation>\n     </message>\n+    <message>\n+        <source>%1 to %2</source>\n+        <translation>%1 till %2</translation>\n+    </message>\n+    <message>\n+        <source>or</source>\n+        <translation>eller</translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n block(s)</source>\n+        <translation><numerusform>%n block</numerusform><numerusform>%n block</numerusform></translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(Ingen etikett)</translation>\n@@ -1791,7 +1931,11 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n     </context>\n <context>\n     <name>SendConfirmationDialog</name>\n-    </context>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Ja</translation>\n+    </message>\n+</context>\n <context>\n     <name>ShutdownWindow</name>\n     <message>\n@@ -1889,7 +2033,19 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Reset all verify message fields</source>\n         <translation>Rensa alla f\u00e4lt</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Message signed.</source>\n+        <translation>Meddelande signerat.</translation>\n+    </message>\n+    <message>\n+        <source>The signature could not be decoded.</source>\n+        <translation>Signaturen kunde inte avkodas.</translation>\n+    </message>\n+    <message>\n+        <source>Message verified.</source>\n+        <translation>Meddelande verifierat.</translation>\n+    </message>\n+</context>\n <context>\n     <name>SplashScreen</name>\n     <message>\n@@ -1906,6 +2062,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n </context>\n <context>\n     <name>TransactionDesc</name>\n+    <message>\n+        <source>Status</source>\n+        <translation>Status</translation>\n+    </message>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>Meddelande</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionDescDialog</name>\n@@ -1916,6 +2084,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n     </context>\n <context>\n     <name>TransactionTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>Etikett</translation>\n@@ -1939,10 +2111,18 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Copy amount</source>\n         <translation>Kopiera belopp</translation>\n     </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Kopiera transaktions-ID</translation>\n+    </message>\n     <message>\n         <source>Comma separated file (*.csv)</source>\n         <translation>Kommaseparerad fil (*.csv)</translation>\n     </message>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>Etikett</translation>"
      },
      {
        "sha": "ea84d11d39b314583622ebee529ce8516bef7650",
        "filename": "src/qt/locale/bitcoin_th_TH.ts",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_th_TH.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_th_TH.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_th_TH.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -41,6 +41,18 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;\u0e25\u0e1a</translation>\n     </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e48\u0e07\u0e40\u0e2b\u0e23\u0e35\u0e22\u0e0d\u0e44\u0e1b\u0e44\u0e27\u0e49</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e48\u0e07\u0e40\u0e2b\u0e23\u0e35\u0e22\u0e0d\u0e44\u0e1b\u0e44\u0e27\u0e49</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>\u0e2a\u0e48\u0e07\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n@@ -273,10 +285,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u0e01\u0e33\u0e25\u0e31\u0e07\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e01\u0e32\u0e23\u0e01\u0e31\u0e1a\u0e1a\u0e25\u0e47\u0e2d\u0e01\u0e43\u0e19\u0e14\u0e34\u0e2a\u0e01\u0e4c...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0e44\u0e21\u0e48\u0e21\u0e35\u0e1a\u0e25\u0e47\u0e2d\u0e01\u0e40\u0e23\u0e34\u0e48\u0e21\u0e15\u0e49\u0e19 \u0e43\u0e2b\u0e49\u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n \u0e1a\u0e25\u0e47\u0e2d\u0e01\u0e43\u0e19\u0e1b\u0e23\u0e30\u0e27\u0e31\u0e15\u0e34\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23 \u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e1a\u0e23\u0e49\u0e2d\u0e22\u0e41\u0e25\u0e49\u0e27</numerusform></translation>"
      },
      {
        "sha": "c37a518968e085108d07c3c105e740484e3ef033",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -361,10 +361,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>Bloklar diske yaz\u0131d\u0131r\u0131l\u0131yor...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>Hi\u00e7bir blok kayna\u011f\u0131 mevcut de\u011fil...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Muamele tarih\u00e7esinden %n blok i\u015flendi.</numerusform><numerusform>Muamele tarih\u00e7esinden %n blok i\u015flendi</numerusform></translation>"
      },
      {
        "sha": "2c017fc52e2e664b523694210de3c718d3639995",
        "filename": "src/qt/locale/bitcoin_uk.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_uk.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_uk.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uk.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -257,10 +257,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u0435 \u0437'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0437 \u043c\u0435\u0440\u0435\u0436\u0435\u044e Bitcoin</numerusform><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u0456 \u0437'\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0437 \u043c\u0435\u0440\u0435\u0436\u0435\u044e Bitcoin</numerusform><numerusform>%n \u0430\u043a\u0442\u0438\u0432\u043d\u0438\u0445 \u0437'\u0454\u0434\u043d\u0430\u043d\u044c \u0437 \u043c\u0435\u0440\u0435\u0436\u0435\u044e Bitcoin</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u041d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e \u0436\u043e\u0434\u043d\u043e\u0433\u043e \u0434\u0436\u0435\u0440\u0435\u043b\u0430 \u0431\u043b\u043e\u043a\u0456\u0432...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u041e\u0431\u0440\u043e\u0431\u043b\u0435\u043d\u043e %n \u0431\u043b\u043e\u043a \u0456\u0441\u0442\u043e\u0440\u0456\u0457 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0456\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u043e\u0431\u043b\u0435\u043d\u043e %n \u0431\u043b\u043e\u043a\u0438 \u0456\u0441\u0442\u043e\u0440\u0456\u0457 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0456\u0439.</numerusform><numerusform>\u041e\u0431\u0440\u043e\u0431\u043b\u0435\u043d\u043e %n \u0431\u043b\u043e\u043a\u0456\u0432 \u0456\u0441\u0442\u043e\u0440\u0456\u0457 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0456\u0439.</numerusform></translation>"
      },
      {
        "sha": "3898c441af1f1b6f7148415397b1f4e60b2c1aa2",
        "filename": "src/qt/locale/bitcoin_uz@Cyrl.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_uz@Cyrl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_uz@Cyrl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_uz@Cyrl.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -245,10 +245,6 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n \u0442\u0430 Bitcoin \u0442\u0430\u0440\u043c\u043e\u0493\u0438\u0433\u0430 \u0444\u0430\u043e\u043b \u0443\u043b\u0430\u043d\u0438\u0448 \u043c\u0430\u0432\u0436\u0443\u0434</numerusform></translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u0411\u043b\u043e\u043a \u043c\u0430\u043d\u0431\u0430\u043b\u0430\u0440\u0438 \u043c\u0430\u0432\u0436\u0443\u0434 \u044d\u043c\u0430\u0441...</translation>\n-    </message>\n     <message>\n         <source>%1 behind</source>\n         <translation>%1 \u043e\u0440\u049b\u0430\u0434\u0430</translation>"
      },
      {
        "sha": "e98bc080e269471180225adb029568aee24ba5d4",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -441,10 +441,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u6b63\u5728\u5904\u7406\u6570\u636e\u5757...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u6c92\u6709\u53ef\u7528\u7684\u533a\u5757\u6765\u6e90...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u5df2\u5904\u7406 %n \u4e2a\u4ea4\u6613\u5386\u53f2\u6570\u636e\u5757\u3002</numerusform></translation>"
      },
      {
        "sha": "bd0533a83eaa39ad41e03ae87b7321cce4962709",
        "filename": "src/qt/locale/bitcoin_zh_TW.ts",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_zh_TW.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/src/qt/locale/bitcoin_zh_TW.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_TW.ts?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>\u6309\u4e00\u4e0b\u5c31\u53c8\u6703\u4f7f\u7528\u7db2\u8def\u3002</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>\u6b63\u5728\u540c\u6b65\u524d\u5c0e\u8cc7\u6599(%1%)\u4e2d...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>\u6b63\u5728\u70ba\u78c1\u789f\u88e1\u7684\u5340\u584a\u91cd\u5efa\u7d22\u5f15...</translation>\n@@ -441,10 +445,6 @@\n         <source>Processing blocks on disk...</source>\n         <translation>\u6b63\u5728\u8655\u7406\u78c1\u789f\u88e1\u7684\u5340\u584a\u8cc7\u6599...</translation>\n     </message>\n-    <message>\n-        <source>No block source available...</source>\n-        <translation>\u6c92\u6709\u53ef\u7528\u7684\u5340\u584a\u4f86\u6e90...</translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>\u5df2\u7d93\u8655\u7406\u4e86 %n \u500b\u5340\u584a\u7684\u4ea4\u6613\u7d00\u9304\u3002</numerusform></translation>\n@@ -485,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u5ba2\u6236\u7aef\u8edf\u9ad4</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u6b63\u5728\u8ddf\u5176\u4ed6\u7bc0\u9ede\u9023\u7dda\u4e2d...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u6b63\u5728\u8d95\u9032\u5ea6...</translation>\n@@ -3090,6 +3094,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>\u7576\u9322\u5305\u6709\u4ea4\u6613\u6539\u8b8a\u6642\u8981\u57f7\u884c\u7684\u6307\u4ee4(\u6307\u4ee4\u4e2d\u7684 %s \u6703\u88ab\u53d6\u4ee3\u6210\u4ea4\u6613\u8b58\u5225\u78bc)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>\u70ba\u4e86\u5c07\u6458\u8981\u5340\u584a\u5b8c\u6574\u56de\u7d44\u800c\u984d\u5916\u4fdd\u7559\u5728\u8a18\u61b6\u9ad4\u4e2d\u7684\u4ea4\u6613\u6578\u91cf(\u9810\u8a2d\u503c: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>\u5047\u8a2d\u5df2\u7d93\u5728\u5340\u584a\u93c8\u4e2d\u7684\u5340\u584a\u4ee5\u53ca\u5176\u5148\u524d\u7684\u5340\u584a\u90fd\u5408\u6cd5\uff0c\u56e0\u6b64\u5c0d\u5b83\u5011\u7565\u904e\u6307\u4ee4\u78bc\u9a57\u8b49(0 \u8868\u793a\u4e00\u5f8b\u8981\u9a57\u8b49\uff0c\u9810\u8a2d\u503c: %s, \u6e2c\u8a66\u7db2\u8def: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>\u8ddf\u5176\u4ed6\u7bc0\u9ede\u7684\u6642\u9593\u5dee\u6700\u9ad8\u53ef\u63a5\u53d7\u7684\u4e2d\u4f4d\u6578\u503c\u3002\u672c\u6a5f\u6240\u8a8d\u70ba\u7684\u6642\u9593\u53ef\u80fd\u6703\u88ab\u5176\u4ed6\u7bc0\u9ede\u5f71\u97ff\uff0c\u5f80\u524d\u6216\u5f80\u5f8c\u5728\u9019\u500b\u503c\u4e4b\u5167\u3002(\u9810\u8a2d\u503c: %u \u79d2)</translation>\n@@ -3384,7 +3396,7 @@\n     </message>\n     <message>\n         <source>Use the test chain</source>\n-        <translation>\u4f7f\u7528\u6e2c\u8a66\u93c8</translation>\n+        <translation>\u4f7f\u7528\u6e2c\u8a66\u5340\u584a\u93c8</translation>\n     </message>\n     <message>\n         <source>User Agent comment (%s) contains unsafe characters.</source>"
      }
    ]
  },
  {
    "sha": "53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2FiMTJkOTMxOGQ1ZDE5NWNjYzc3MDI4YjBlM2FlNjZkYzZlMWZk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-30T12:49:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-01-30T12:50:01Z"
      },
      "message": "Merge #9649: [doc] Remove unused clang format dev script\n\nfa5137c [doc] Remove unused clang format dev script (MarcoFalke)",
      "tree": {
        "sha": "5cfc1e547de4c0354691e90c078d0aef4fbce031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cfc1e547de4c0354691e90c078d0aef4fbce031"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYjzZ5AAoJEC1/I3LlD+E3RTsIAIcj7TiOMfs+ut4Gf3B3F3aC\nMiaMVzUW5Kca2LHb0KO39tVtJrqXMkWOkFGN9h4BxCuoY2Jb+qSlpNnI31eq8CEp\no/NinTqChMhOlP2Y08KkJCwWeBTREdy83ooZ9X4EVfmSU2rSSpGwiOFJ5a25HSqZ\nRZJlkKA+NxpjgbJ2h7ZxuKGTQbAYvuGIeeZzghs6SbocRe0/HknwpPZ36fiJU3nX\n4uRaKa7KFMH8mw2C9Xeq/wcah9AKjfBlrVLQkr3wB/DWpXssM7oHcG/zxCm9FKH1\nIEC4kxe/ViY25VjATmjIsUoeYZ/PEpSHdU5t4kJcIvhSOknb+mzG8ZYAGvyE9/0=\n=tCvt\n-----END PGP SIGNATURE-----",
        "payload": "tree 5cfc1e547de4c0354691e90c078d0aef4fbce031\nparent 71fc17f6673eae2e44d226e21692283a85786c44\nparent fa5137c11d2d4accd9bfc68b3498e7e16829c3ab\nauthor MarcoFalke <falke.marco@gmail.com> 1485780574 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1485780601 +0100\n\nMerge #9649: [doc] Remove unused clang format dev script\n\nfa5137c [doc] Remove unused clang format dev script (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71fc17f6673eae2e44d226e21692283a85786c44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71fc17f6673eae2e44d226e21692283a85786c44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71fc17f6673eae2e44d226e21692283a85786c44"
      },
      {
        "sha": "fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5137c11d2d4accd9bfc68b3498e7e16829c3ab"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 6,
      "deletions": 71
    },
    "files": [
      {
        "sha": "34f2af68666a9d51419a463ed89f7361464fd5d8",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "patch": "@@ -8,11 +8,6 @@ check-doc.py\n Check if all command line args are documented. The return value indicates the\n number of undocumented args.\n \n-clang-format.py\n-===============\n-\n-A script to format cpp source code according to [.clang-format](../../src/.clang-format). This should only be applied to new files or files which are currently not actively developed on. Also, git subtrees are not subject to formatting.\n-\n clang-format-diff.py\n ===================\n \n@@ -24,6 +19,7 @@ the script should be called from the git root folder as follows.\n ```\n git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n ```\n+\n copyright\\_header.py\n ====================\n "
      },
      {
        "sha": "cee99047ac67e69fe767a910ac56811e574cfc8d",
        "filename": "contrib/devtools/clang-format.py",
        "status": "removed",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71fc17f6673eae2e44d226e21692283a85786c44/contrib/devtools/clang-format.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71fc17f6673eae2e44d226e21692283a85786c44/contrib/devtools/clang-format.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format.py?ref=71fc17f6673eae2e44d226e21692283a85786c44",
        "patch": "@@ -1,62 +0,0 @@\n-#!/usr/bin/env python\n-'''\n-Wrapper script for clang-format\n-\n-Copyright (c) 2015 MarcoFalke\n-Copyright (c) 2015 The Bitcoin Core developers\n-Distributed under the MIT software license, see the accompanying\n-file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-\n-import os\n-import sys\n-import subprocess\n-\n-tested_versions = ['3.6.0', '3.6.1', '3.6.2'] # A set of versions known to produce the same output\n-accepted_file_extensions = ('.h', '.cpp') # Files to format\n-\n-def check_clang_format_version(clang_format_exe):\n-    try:\n-        output = subprocess.check_output([clang_format_exe, '-version'])\n-        for ver in tested_versions:\n-            if ver in output:\n-                print \"Detected clang-format version \" + ver\n-                return\n-        raise RuntimeError(\"Untested version: \" + output)\n-    except Exception as e:\n-        print 'Could not verify version of ' + clang_format_exe + '.'\n-        raise e\n-\n-def check_command_line_args(argv):\n-    required_args = ['{clang-format-exe}', '{files}']\n-    example_args = ['clang-format-3.x', 'src/main.cpp', 'src/wallet/*']\n-\n-    if(len(argv) < len(required_args) + 1):\n-        for word in (['Usage:', argv[0]] + required_args):\n-            print word,\n-        print ''\n-        for word in (['E.g:', argv[0]] + example_args):\n-            print word,\n-        print ''\n-        sys.exit(1)\n-\n-def run_clang_format(clang_format_exe, files):\n-    for target in files:\n-        if os.path.isdir(target):\n-            for path, dirs, files in os.walk(target):\n-                run_clang_format(clang_format_exe, (os.path.join(path, f) for f in files))\n-        elif target.endswith(accepted_file_extensions):\n-            print \"Format \" + target\n-            subprocess.check_call([clang_format_exe, '-i', '-style=file', target], stdout=open(os.devnull, 'wb'), stderr=subprocess.STDOUT)\n-        else:\n-            print \"Skip \" + target\n-\n-def main(argv):\n-    check_command_line_args(argv)\n-    clang_format_exe = argv[1]\n-    files = argv[2:]\n-    check_clang_format_version(clang_format_exe)\n-    run_clang_format(clang_format_exe, files)\n-\n-if __name__ == \"__main__\":\n-    main(sys.argv)"
      },
      {
        "sha": "989ad8d03ebdeb1f43f40c06dcf9c7b91392bff0",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "patch": "@@ -4,10 +4,11 @@ Developer Notes\n Various coding styles have been used during the history of the codebase,\n and the result is not very consistent. However, we're now trying to converge to\n a single style, so please use it in new code. Old code will be converted\n-gradually.\n+gradually and you are encouraged to use the provided\n+[clang-format-diff script](/contrib/devtools/README.md#clang-format-diffpy)\n+to clean up the patch automatically before submitting a pull request.\n+\n - Basic rules specified in [src/.clang-format](/src/.clang-format).\n-  Use a recent clang-format to format automatically using one of the [dev scripts]\n-  (/contrib/devtools/README.md#clang-formatpy).\n   - Braces on new lines for namespaces, classes, functions, methods.\n   - Braces on the same line for everything else.\n   - 4 space indentation (no tabs) for every block except namespaces."
      },
      {
        "sha": "fc53509138fad0ad50144b8210ff23a90b155db0",
        "filename": "src/.clang-format",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/src/.clang-format",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd/src/.clang-format",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/.clang-format?ref=53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "patch": "@@ -6,7 +6,7 @@ AlignTrailingComments: true\n AllowAllParametersOfDeclarationOnNextLine: false\n AllowShortBlocksOnASingleLine: false\n AllowShortFunctionsOnASingleLine: All\n-AllowShortIfStatementsOnASingleLine: false\n+AllowShortIfStatementsOnASingleLine: true\n AllowShortLoopsOnASingleLine: false\n AlwaysBreakBeforeMultilineStrings: false\n AlwaysBreakTemplateDeclarations: true"
      }
    ]
  },
  {
    "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTlmMGQ3YWQ0NDNmZjcyMDg3YzZmODBlOWZhYjY1Y2FjZTBiZjE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T12:56:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-01-30T12:56:24Z"
      },
      "message": "Merge #9647: Skip RAII event tests if libevent is built without event_set_mem_functions\n\n95f97f4 Skip RAII event tests if libevent is built without event_set_mem_functions (Luke Dashjr)",
      "tree": {
        "sha": "f9a300f6f587cc14a999a9c77682f61212d18016",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9a300f6f587cc14a999a9c77682f61212d18016"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYjzf4AAoJEHSBCwEjRsmmsP8H/2CtZDub59oaF488O66uC+fa\nRCaQnMa2+KRpOlFgzNIPra2VvpKmrfuv+N0akFuW4Qvet4BL3w2W6HEBWM1ZJ6cV\nWTF0sm3YlAISYdBImT2puuLyotvsw/o9i2+wgImM5fbHkL5RUrvMFcWEFebNhofG\nX2KzL2FrncsIsLZ4WL8UEw6NgQvblw1raiSlYdHI2HIauxQI7rA46JMb0X4nJuog\nfGoEYOpkznY7GJwvBu+/CpGDrYcPtXQk/sU0PRliW3BtGdr4vaWzq4j3O70lkRUC\np/qpWTAw/ryRnu6davRFHtggJTPrjan3Xf5s86Tx7BwemzdU+7tcCvfP0v+h6PI=\n=sp1X\n-----END PGP SIGNATURE-----",
        "payload": "tree f9a300f6f587cc14a999a9c77682f61212d18016\nparent 53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd\nparent 95f97f4b94b9d534cf61c3c82ff728eff00423e5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485780981 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485780984 +0100\n\nMerge #9647: Skip RAII event tests if libevent is built without event_set_mem_functions\n\n95f97f4 Skip RAII event tests if libevent is built without event_set_mem_functions (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53ab12d9318d5d195ccc77028b0e3ae66dc6e1fd"
      },
      {
        "sha": "95f97f4b94b9d534cf61c3c82ff728eff00423e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95f97f4b94b9d534cf61c3c82ff728eff00423e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95f97f4b94b9d534cf61c3c82ff728eff00423e5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0f40874f55c10494ce4766848e1a58ee68bda6aa",
        "filename": "src/test/raii_event_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e99f0d7ad443ff72087c6f80e9fab65cace0bf19/src/test/raii_event_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e99f0d7ad443ff72087c6f80e9fab65cace0bf19/src/test/raii_event_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/raii_event_tests.cpp?ref=e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "patch": "@@ -3,6 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <event2/event.h>\n+\n+#ifdef EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED\n+// It would probably be ideal to define dummy test(s) that report skipped, but boost::test doesn't seem to make that practical (at least not in versions available with common distros)\n+\n #include <map>\n #include <stdlib.h>\n \n@@ -86,3 +90,5 @@ BOOST_AUTO_TEST_CASE(raii_event_order)\n }\n \n BOOST_AUTO_TEST_SUITE_END()\n+\n+#endif  // EVENT_SET_MEM_FUNCTIONS_IMPLEMENTED"
      }
    ]
  },
  {
    "sha": "d625b907a1800a5a30c4ad285641c7418d2c28c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjI1YjkwN2ExODAwYTVhMzBjNGFkMjg1NjQxYzc0MThkMmMyOGMx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-26T17:57:04Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-01-30T16:47:10Z"
      },
      "message": "wallet: Refactor dummy signature signing for reusability",
      "tree": {
        "sha": "ab77fc0f12bd438e34a52882fbc97e667948a0cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab77fc0f12bd438e34a52882fbc97e667948a0cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d625b907a1800a5a30c4ad285641c7418d2c28c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 30,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a7b8022bd9c79e025ab601e8cc3563170239f022",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "patch": "@@ -2583,21 +2583,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                                               std::numeric_limits<unsigned int>::max() - (fWalletRbf ? 2 : 1)));\n \n                 // Fill in dummy signatures for fee calculation.\n-                int nIn = 0;\n-                for (const auto& coin : setCoins)\n-                {\n-                    const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n-                    SignatureData sigdata;\n-\n-                    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n-                    {\n-                        strFailReason = _(\"Signing transaction failed\");\n-                        return false;\n-                    } else {\n-                        UpdateTransaction(txNew, nIn, sigdata);\n-                    }\n-\n-                    nIn++;\n+                if (!DummySignTx(txNew, setCoins)) {\n+                    strFailReason = _(\"Signing transaction failed\");\n+                    return false;\n                 }\n \n                 unsigned int nBytes = GetVirtualTransactionSize(txNew);"
      },
      {
        "sha": "1de04ae16a3889ba69fff022cba1ba0e240afebd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d625b907a1800a5a30c4ad285641c7418d2c28c1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "patch": "@@ -13,6 +13,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #include \"script/ismine.h\"\n+#include \"script/sign.h\"\n #include \"wallet/crypter.h\"\n #include \"wallet/walletdb.h\"\n #include \"wallet/rpcwallet.h\"\n@@ -796,6 +797,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);\n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB *pwalletdb);\n+    template <typename ContainerType>\n+    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins);\n \n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n@@ -1028,4 +1031,28 @@ class CAccount\n     }\n };\n \n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+// ContainerType is meant to hold pair<CWalletTx *, int>, and be iterable\n+// so that each entry corresponds to each vIn, in order.\n+template <typename ContainerType>\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins)\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& coin : coins)\n+    {\n+        const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n+        SignatureData sigdata;\n+\n+        if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+        {\n+            return false;\n+        } else {\n+            UpdateTransaction(txNew, nIn, sigdata);\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "178454dde93ffa55343c17fcc6414f1f982f71e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzg0NTRkZGU5M2ZmYTU1MzQzYzE3ZmNjNjQxNGYxZjk4MmY3MWUz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T00:09:29Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T00:09:29Z"
      },
      "message": "Contrib: Add jtimon pgp keys for commit sigs and future gitian builds",
      "tree": {
        "sha": "7c2d1e9e5e70fc82f266b9c49d90c026fda4b9be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c2d1e9e5e70fc82f266b9c49d90c026fda4b9be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/178454dde93ffa55343c17fcc6414f1f982f71e3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYj9W5AAoJEIhmwY6hyUSiw1sP/j4bK8GQr/4tPCQzdm0Ee+Vv\npWQWLrMYJ2AZ8e31DcAElgvT2UPCOP502l5G4DS91olZNPX5tSNYNqOQaiolF8qJ\nBbp4U/sBRKI5xHuAAOQ9jMA4SDB4XRlQvM0Zd8fxQmQgaOtVCDBU7YX8DeLLCq37\nx0bdCXiLpe1+/f/lpNTeq+ccR0IcKu9wpmzIDzDCpJULpHIJkqlrheXHpI+GaRwO\nHur4SwM8iGBgDCAkDv+bKDMMPov2Asgav3j+zrerdS4veXo2gXgPXm1QRMCgFiZM\nCXSN+KoRs3ZsA2f0YmxHp2XnVB0SMhzi1wsOkIX7U0s41jwVlXxmSQzOGTMJ1JoL\n1rgn83vSOaipp7+BF+uXhuevQLYgkzXPh9Qh2tf5/onuwz4SOnzp44gGiGqlTewM\nimwWCwO9uphUx4MQpdaU/AbvIErzQYbf0XYF7UJp03kV24RYSpGMtO2zWlLux9yM\nk4rp3Yn0mPgJzEPPlaXUIeGXBjKOguaja5pF+v2aqm2jUrc3e99eRpoiZ5DCmwBd\nQwQ8VpWXaRPVqTGO7F8kxGXbNTh5eVwC4cVEkkDUf4BWKj2h63j8owYcNY4W5pYm\nqDM8NqlKmJIknHEsclDl3RhuPJuGzEflUXQpbRx1H3ekS7A4t8EpC9lvuPbmTdqS\n1N+vGrPtTRtfDPCbElh/\n=uGyT\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c2d1e9e5e70fc82f266b9c49d90c026fda4b9be\nparent e99f0d7ad443ff72087c6f80e9fab65cace0bf19\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485821369 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485821369 +0100\n\nContrib: Add jtimon pgp keys for commit sigs and future gitian builds\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/178454dde93ffa55343c17fcc6414f1f982f71e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/178454dde93ffa55343c17fcc6414f1f982f71e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/178454dde93ffa55343c17fcc6414f1f982f71e3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "88d0de1503bb6a6bed7710b68b5526e85a855812",
        "filename": "contrib/gitian-keys/jtimon-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/178454dde93ffa55343c17fcc6414f1f982f71e3/contrib/gitian-keys/jtimon-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/178454dde93ffa55343c17fcc6414f1f982f71e3/contrib/gitian-keys/jtimon-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jtimon-key.pgp?ref=178454dde93ffa55343c17fcc6414f1f982f71e3"
      }
    ]
  },
  {
    "sha": "d45955fa0992639d6c9856a73c5f7599cc14f811",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDU5NTVmYTA5OTI2MzlkNmM5ODU2YTczYzVmNzU5OWNjMTRmODEx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-24T01:32:52Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T22:20:26Z"
      },
      "message": "Net: CConnman: Make some methods const",
      "tree": {
        "sha": "a0a9863ae62314e35fe33f572cda41b9cdfc0d13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0a9863ae62314e35fe33f572cda41b9cdfc0d13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d45955fa0992639d6c9856a73c5f7599cc14f811",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYkQ2qAAoJEIhmwY6hyUSiz9AP+wbkpExJs9XQR4JqJGVJFwux\n/6Eq7cmu+Rd2qa4KLcBDOWl/Z/DNO439a6Y3M30K+yKmEPmrdQ7gMbXePQQ8XtLe\n+lX7vBlUnOUSVfUPOWhNEaV780J7dLmP/n1hxP+V0X0rvnr5q8D2Oy6u57tA0ghT\nUnOjjyzCG8ZH3HZ+KSLxuo21VrNA4AlwR+U+uao7iKaOMzUViI782KTkunbf3I6O\nrKMbJnelG5uJh2+MwBhb6HNdGGlQTiDUPkm74kjCwyaSIXpu1rqzVBz/B2xdg+x5\ngh2xsCevAg6g99BnUhGKoNNT/vIgVB/l4dcTJpEPIsse0Z7CVzVvTvWMf0tYf6zL\nxuz7HoONYPzrYjmI5I/H7FF6murvxAV5RpfvD0Xxlgxzugh4Lq93jJhwTiPea7Ub\nWR0RRL6BhEFHS+ojhnMNPKhnGH5zLA+zPeF/wYXudPCUXHQknzZsXqW8hm7bIXeC\nDbmQARk+A9M8RE61fKTzBbjalB2Lv3Gg95RoNOgzGWrfD2953PtbfbHA8DTSpbXK\nGr99lOkC1Gv+bkWWecDghxlGrR2cYYn/j/KcAApNpOZBdhGyiWJ2L0HA92U9sXBY\nvX0ISqMazw8Fbvf1smTtJM5RQmuSJB4yWWYIVaMLAS5pLYAkLYr90lt3xjGKi7b6\nclnXE8CuQ6c9eA4FujpO\n=Onlg\n-----END PGP SIGNATURE-----",
        "payload": "tree a0a9863ae62314e35fe33f572cda41b9cdfc0d13\nparent e99f0d7ad443ff72087c6f80e9fab65cace0bf19\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485221572 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485901226 +0100\n\nNet: CConnman: Make some methods const\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d45955fa0992639d6c9856a73c5f7599cc14f811",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d45955fa0992639d6c9856a73c5f7599cc14f811",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d45955fa0992639d6c9856a73c5f7599cc14f811/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5a5d94cd118d62ab5e0000243a47e18dd4171dc9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d45955fa0992639d6c9856a73c5f7599cc14f811/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d45955fa0992639d6c9856a73c5f7599cc14f811/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d45955fa0992639d6c9856a73c5f7599cc14f811",
        "patch": "@@ -754,7 +754,7 @@ const uint256& CNetMessage::GetMessageHash() const\n \n \n // requires LOCK(cs_vSend)\n-size_t CConnman::SocketSendData(CNode *pnode)\n+size_t CConnman::SocketSendData(CNode *pnode) const\n {\n     auto it = pnode->vSendMsg.begin();\n     size_t nSentSize = 0;\n@@ -2687,12 +2687,12 @@ int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }\n \n-CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id)\n+CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const\n {\n     return CSipHasher(nSeed0, nSeed1).Write(id);\n }\n \n-uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad)\n+uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n {\n     std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n "
      },
      {
        "sha": "6228f7b50840954ea2999fae84d4619f1a5a5504",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d45955fa0992639d6c9856a73c5f7599cc14f811/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d45955fa0992639d6c9856a73c5f7599cc14f811/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d45955fa0992639d6c9856a73c5f7599cc14f811",
        "patch": "@@ -321,7 +321,7 @@ class CConnman\n     int GetBestHeight() const;\n \n     /** Get a unique deterministic randomizer. */\n-    CSipHasher GetDeterministicRandomizer(uint64_t id);\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const;\n \n     unsigned int GetReceiveFloodSize() const;\n \n@@ -342,7 +342,7 @@ class CConnman\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n-    uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n+    uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\n \n     CNode* FindNode(const CNetAddr& ip);\n     CNode* FindNode(const CSubNet& subNet);\n@@ -357,7 +357,7 @@ class CConnman\n \n     NodeId GetNewNodeId();\n \n-    size_t SocketSendData(CNode *pnode);\n+    size_t SocketSendData(CNode *pnode) const;\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist"
      }
    ]
  },
  {
    "sha": "fc7f2ffad481870e62ab2f798f941577983c5a39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzdmMmZmYWQ0ODE4NzBlNjJhYjJmNzk4Zjk0MTU3Nzk4M2M1YTM5",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T21:57:40Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T22:29:28Z"
      },
      "message": "Net: Make CNetMsgMaker more const",
      "tree": {
        "sha": "e259ea9e8005549726a713339046281f35086bb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e259ea9e8005549726a713339046281f35086bb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc7f2ffad481870e62ab2f798f941577983c5a39",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYkQ/LAAoJEIhmwY6hyUSiI+gQAI2MfSdlCakRNNM3oFsxt35q\nvpucb0oPngt1WdDksekT5SNwuoURAvnXtU47v/op+4/N5ZpvM/kBnSqxadv3tEtR\nPGKTGLqqJGd4Hl9QVoqjbEcFdXTbllKq2vsrLsnMV6If3qixP+eQV0XSfgrUoXvk\nEQfCo/s0wbbzUkKQ67oG+pbKgEbRAa1LS/ty4JciEhvN9iAsE05josG1KIzOeo43\no8BmLiVgIE1aqePwNIo9tM3nFvX3K5rF3GhG/E5d8zIMtPLXR0aL30N2F8Xwsbns\nhaBx88f7WKFxbh7bodX6J+7XQzRBAfx07kTxFDugR+3574IZdzC5Medj3YhfjdWG\nEZ7vDcXDiCujg50osRkNsM3zlcczKkoKZJkp1Ps2sCgjER1jusKQjWtI8JTH0FaT\n/bX/GbyihpEAC6uZvpmDSTJU/R5j7+o3n44x5NnMf/xzwwE6owXg0Fy6P0I13glU\nMEqOzTaeYHbKO05ZdidtapSe9KXTOjG5YQXvV+9qsYQ1fpQcOhjBntWZtSoNI+hW\nN+StVlfUKXPPNNGWibCOlWrRIc7LO5/8Njd2Djs6hLFlvICtw6/yr8OwUQ8HesOL\nzetJCW8lQguET5k4jHZ6lJ7MHqwJ+0vOhIUBaPost4fhZuN+V5Fextef5wyq9MyN\nJe50D+IQvjf1zKwWlQGK\n=yZUb\n-----END PGP SIGNATURE-----",
        "payload": "tree e259ea9e8005549726a713339046281f35086bb4\nparent d45955fa0992639d6c9856a73c5f7599cc14f811\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485899860 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485901768 +0100\n\nNet: Make CNetMsgMaker more const\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7f2ffad481870e62ab2f798f941577983c5a39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc7f2ffad481870e62ab2f798f941577983c5a39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7f2ffad481870e62ab2f798f941577983c5a39/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d45955fa0992639d6c9856a73c5f7599cc14f811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d45955fa0992639d6c9856a73c5f7599cc14f811",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d45955fa0992639d6c9856a73c5f7599cc14f811"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "99577933810ab636ce623133aa24ff38a86d7dec",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc7f2ffad481870e62ab2f798f941577983c5a39/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc7f2ffad481870e62ab2f798f941577983c5a39/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fc7f2ffad481870e62ab2f798f941577983c5a39",
        "patch": "@@ -778,7 +778,7 @@ static uint256 most_recent_block_hash;\n \n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n-    CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n+    const CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n \n     LOCK(cs_main);\n \n@@ -960,7 +960,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     LOCK(cs_main);\n \n     while (it != pfrom->vRecvGetData.end()) {\n@@ -1153,7 +1153,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n         resp.txn[i] = block.vtx[req.indexes[i]];\n     }\n     LOCK(cs_main);\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     int nSendFlags = State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n@@ -1346,7 +1346,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n     }\n \n     // At this point, the outgoing message serialization version can't change.\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n@@ -2721,7 +2721,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             return true;\n \n         // If we get here, the outgoing message serialization version is set and can't change.\n-        CNetMsgMaker msgMaker(pto->GetSendVersion());\n+        const CNetMsgMaker msgMaker(pto->GetSendVersion());\n \n         //\n         // Message: ping"
      },
      {
        "sha": "8e8a6e4a026ee824795e2af21c3eec1c7e761299",
        "filename": "src/netmessagemaker.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc7f2ffad481870e62ab2f798f941577983c5a39/src/netmessagemaker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc7f2ffad481870e62ab2f798f941577983c5a39/src/netmessagemaker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netmessagemaker.h?ref=fc7f2ffad481870e62ab2f798f941577983c5a39",
        "patch": "@@ -15,7 +15,7 @@ class CNetMsgMaker\n     CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}\n \n     template <typename... Args>\n-    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args)\n+    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args) const\n     {\n         CSerializedNetMsg msg;\n         msg.command = std::move(sCommand);\n@@ -24,7 +24,7 @@ class CNetMsgMaker\n     }\n \n     template <typename... Args>\n-    CSerializedNetMsg Make(std::string sCommand, Args&&... args)\n+    CSerializedNetMsg Make(std::string sCommand, Args&&... args) const\n     {\n         return Make(0, std::move(sCommand), std::forward<Args>(args)...);\n     }"
      }
    ]
  },
  {
    "sha": "0729102f99241b9716456ad40bf778c09f650b1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzI5MTAyZjk5MjQxYjk3MTY0NTZhZDQwYmY3NzhjMDlmNjUwYjFi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T22:07:20Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-01-31T22:45:47Z"
      },
      "message": "Net: pass interruptMsgProc as const where possible",
      "tree": {
        "sha": "75e5d3dae5e83419f3a9eaa97c12797f29076bbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75e5d3dae5e83419f3a9eaa97c12797f29076bbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0729102f99241b9716456ad40bf778c09f650b1b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYkROdAAoJEIhmwY6hyUSiMD8P/ilxxESMM/MsATDwM3xJIf5T\nYbW2Pm25bIydq8pbEUFizO/Ls4CTEZzeSJwXkC15PxAvPjLAfcg7v+TzPclMLQYB\n4XwMo9nwUlZ7+NMJ/TAjEhI2UA3vds2+Hc17v0o7/bK/wms1y8I0TJeRBJwx/eQh\n2X9nR/Mj+a2eWHpPgRvQSCrc1vDfTmeNZCAAN18brigpheklSCbxWpkniBp54Sf3\nzkvTICPI2KKGW6V1TDd9NXtUv98Fk9DMfDO1h7owMQ/+p7TtlK9AIzQe7hJefgNe\n9hVuPFRVi0ZwwoXV5tK/stKzXdnNH2kxSnCF/awOoLJ9lR2xyhlTNwLEVJG3LHXQ\nZ04Vp2IRSVOqfmSqmCH9EbJpZzJh4GMR5TlBqMlk8cgAdxdQblMHks8GLPaR57P0\nGgVCJjlUJm24PG6n4qnvTeGNSarb51vlkANLUBzMuCrwIUZPV4elMQCKvFRjrz2F\nh6jiun3iHFhygKE/2p0W49BS3M9jr5NfLrioRtH3aO8t6UnNeONMKyigQiKTC8tz\nGJ/hTKxmCuxNpREmkD2dxF9rSSZkX8haV/vflpHe+04Nm19bSmWjJMdFuqICQ6h4\nLzKUEYSMbA53llgMuZpq5oFqvKejAsYCBpfTLn5WYQWtqQQCi307Q+QEe9dfmP4V\n6Etejir6ya9UMOWqIojI\n=XAnl\n-----END PGP SIGNATURE-----",
        "payload": "tree 75e5d3dae5e83419f3a9eaa97c12797f29076bbd\nparent fc7f2ffad481870e62ab2f798f941577983c5a39\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485900440 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1485902747 +0100\n\nNet: pass interruptMsgProc as const where possible\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0729102f99241b9716456ad40bf778c09f650b1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0729102f99241b9716456ad40bf778c09f650b1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0729102f99241b9716456ad40bf778c09f650b1b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc7f2ffad481870e62ab2f798f941577983c5a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7f2ffad481870e62ab2f798f941577983c5a39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc7f2ffad481870e62ab2f798f941577983c5a39"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1cc86a662684d3845ed3ef4a9b10b2c237702ec8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0729102f99241b9716456ad40bf778c09f650b1b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0729102f99241b9716456ad40bf778c09f650b1b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0729102f99241b9716456ad40bf778c09f650b1b",
        "patch": "@@ -956,7 +956,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n@@ -1158,7 +1158,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (IsArgSet(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -2579,7 +2579,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n     return true;\n }\n \n-bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     //\n@@ -2712,7 +2712,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {"
      },
      {
        "sha": "9e3f1b715667a9216d69cbccaab59bd906bf21b3",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0729102f99241b9716456ad40bf778c09f650b1b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0729102f99241b9716456ad40bf778c09f650b1b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=0729102f99241b9716456ad40bf778c09f650b1b",
        "patch": "@@ -49,7 +49,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n void Misbehaving(NodeId nodeid, int howmuch);\n \n /** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interrupt);\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interrupt);\n /**\n  * Send queued protocol messages to be sent to a give node.\n  *\n@@ -58,6 +58,6 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n  * @param[in]   interrupt       Interrupt condition for processing threads\n  * @return                      True if there is more work to be done\n  */\n-bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interrupt);\n+bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interrupt);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "f62659448cdfd752447117fb73ab5328fbe3e41d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjI2NTk0NDhjZGZkNzUyNDQ3MTE3ZmI3M2FiNTMyOGZiZTNlNDFk",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-26T17:59:32Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-01T01:03:45Z"
      },
      "message": "rpc: bumpfee: use correct maximum signed tx size for fee calculation\n\nMore accurate than simply adding one byte per input, and properly handles the\ncase where the original transaction happened to have very small signatures",
      "tree": {
        "sha": "0f255ce9d302ff9ae07368cb0c278ce60583a063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f255ce9d302ff9ae07368cb0c278ce60583a063"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f62659448cdfd752447117fb73ab5328fbe3e41d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62659448cdfd752447117fb73ab5328fbe3e41d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f62659448cdfd752447117fb73ab5328fbe3e41d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62659448cdfd752447117fb73ab5328fbe3e41d/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d625b907a1800a5a30c4ad285641c7418d2c28c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d625b907a1800a5a30c4ad285641c7418d2c28c1"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 35,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4f763fd6e2f3a2a4cb741b2548ad6028fc7ebac7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f62659448cdfd752447117fb73ab5328fbe3e41d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f62659448cdfd752447117fb73ab5328fbe3e41d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f62659448cdfd752447117fb73ab5328fbe3e41d",
        "patch": "@@ -2664,6 +2664,33 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).\n+// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n+// be IsAllFromMe).\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx)\n+{\n+    CMutableTransaction txNew(tx);\n+    std::vector<pair<CWalletTx *, unsigned int>> vCoins;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        vCoins.emplace_back(make_pair(&(mi->second), input.prevout.n));\n+    }\n+    if (!pwalletMain->DummySignTx(txNew, vCoins)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that cannot be signed\");\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp)) {\n@@ -2769,9 +2796,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n     }\n \n-    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx);\n \n     // optional parameters\n     bool specifiedConfirmTarget = false;\n@@ -2845,8 +2872,12 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK());\n+        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n+        // in that unit (fee per kb).\n+        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n+        // add 1 satoshi to the result, because it may have been rounded down.\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n             nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "9522b53a91f28032c34b94662d50b000534708ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTIyYjUzYTkxZjI4MDMyYzM0Yjk0NjYyZDUwYjAwMDUzNDcwOGNl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-01-26T17:57:42Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-01T01:03:45Z"
      },
      "message": "rpc: bumpfee: handle errors more gracefully",
      "tree": {
        "sha": "b9fb2476ca21c7d62366eab57aef7cdf5ec791a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9fb2476ca21c7d62366eab57aef7cdf5ec791a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9522b53a91f28032c34b94662d50b000534708ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9522b53a91f28032c34b94662d50b000534708ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9522b53a91f28032c34b94662d50b000534708ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9522b53a91f28032c34b94662d50b000534708ce/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f62659448cdfd752447117fb73ab5328fbe3e41d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f62659448cdfd752447117fb73ab5328fbe3e41d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f62659448cdfd752447117fb73ab5328fbe3e41d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8b135b0e0f7e3bb5836feb88b57e13505ac86d4c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9522b53a91f28032c34b94662d50b000534708ce/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9522b53a91f28032c34b94662d50b000534708ce/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9522b53a91f28032c34b94662d50b000534708ce",
        "patch": "@@ -2733,6 +2733,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n             \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n             \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n+            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n@@ -2945,23 +2946,32 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n     CValidationState state;\n-    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid()) {\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        // NOTE: CommitTransaction never returns false, so this should never happen.\n         throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n     }\n \n+    UniValue vErrors(UniValue::VARR);\n+    if (state.IsInvalid()) {\n+        // This can happen if the mempool rejected the transaction.  Report\n+        // what happened in the \"errors\" response.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n+    }\n+\n     // mark the original tx as bumped\n     if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction\n         // replaced does not succeed for some reason.\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n     }\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n     result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n+    result.push_back(Pair(\"errors\", vErrors));\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTgxZWNiYzMzZWRkOWQ2MjU3ZTUwYjExZDg4NTRmYmNjYWY4YWQ4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-30T22:57:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-01T02:03:14Z"
      },
      "message": "Use configparser in rpc-tests.py\n\nRemove the use of wildcard imports in rpc-tests.py and replace with\nconfigparser.",
      "tree": {
        "sha": "630822a42a8ccb6798efed9e3beeca675e265ba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630822a42a8ccb6798efed9e3beeca675e265ba9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 41,
      "deletions": 36
    },
    "files": [
      {
        "sha": "1ee2dfb734ede01f76a6f192be0441a372bea756",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -227,9 +227,6 @@ EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n-# This file is problematic for out-of-tree builds if it exists.\n-DISTCLEANFILES = qa/pull-tester/tests_config.pyc\n-\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n DISTCHECK_CONFIGURE_FLAGS = --enable-man"
      },
      {
        "sha": "1452ff74c0c644e1d7ac52209cf1cbbc5d7a8d16",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -1087,7 +1087,7 @@ AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n-AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n+AC_CONFIG_FILES([qa/pull-tester/tests_config.ini],[chmod +x qa/pull-tester/tests_config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_LINKS([qa/pull-tester/rpc-tests.py:qa/pull-tester/rpc-tests.py])\n "
      },
      {
        "sha": "52157474074cbbfb8a75dea870304a7cf5f9fbe1",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -21,6 +21,7 @@\n \n \"\"\"\n \n+import configparser\n import os\n import time\n import shutil\n@@ -29,26 +30,22 @@\n import tempfile\n import re\n \n-sys.path.append(\"qa/pull-tester/\")\n-from tests_config import *\n-\n BOLD = (\"\",\"\")\n if os.name == 'posix':\n     # primitive formatting on supported\n     # terminal via ANSI escape sequences:\n     BOLD = ('\\033[0m', '\\033[1m')\n \n-RPC_TESTS_DIR = SRCDIR + '/qa/rpc-tests/'\n+# Read config generated by configure.\n+config = configparser.ConfigParser()\n+config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n+\n+ENABLE_WALLET = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n+ENABLE_UTILS = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n+ENABLE_BITCOIND = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n+ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\"\n \n-#If imported values are not defined then set to zero (or disabled)\n-if 'ENABLE_WALLET' not in vars():\n-    ENABLE_WALLET=0\n-if 'ENABLE_BITCOIND' not in vars():\n-    ENABLE_BITCOIND=0\n-if 'ENABLE_UTILS' not in vars():\n-    ENABLE_UTILS=0\n-if 'ENABLE_ZMQ' not in vars():\n-    ENABLE_ZMQ=0\n+RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n \n ENABLE_COVERAGE=0\n \n@@ -76,15 +73,15 @@\n \n #Set env vars\n if \"BITCOIND\" not in os.environ:\n-    os.environ[\"BITCOIND\"] = BUILDDIR + '/src/bitcoind' + EXEEXT\n+    os.environ[\"BITCOIND\"] = config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"]\n \n-if EXEEXT == \".exe\" and \"-win\" not in opts:\n+if config[\"environment\"][\"EXEEXT\"] == \".exe\" and \"-win\" not in opts:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n     print(\"Win tests currently disabled by default.  Use -win option to enable\")\n     sys.exit(0)\n \n-if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n+if not (ENABLE_WALLET and ENABLE_UTILS and ENABLE_BITCOIND):\n     print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n     sys.exit(0)\n \n@@ -209,8 +206,8 @@ def runtests():\n     if ENABLE_COVERAGE:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n-    flags = [\"--srcdir=%s/src\" % BUILDDIR] + passon_args\n-    flags.append(\"--cachedir=%s/qa/cache\" % BUILDDIR)\n+    flags = [\"--srcdir=%s/src\" % config[\"environment\"][\"BUILDDIR\"]] + passon_args\n+    flags.append(\"--cachedir=%s/qa/cache\" % config[\"environment\"][\"BUILDDIR\"])\n     if coverage:\n         flags.append(coverage.flag)\n "
      },
      {
        "sha": "8317caaeb514a3ad47d0e238a05a4773d92173aa",
        "filename": "qa/pull-tester/tests_config.ini.in",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/tests_config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8/qa/pull-tester/tests_config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.ini.in?ref=1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "patch": "@@ -0,0 +1,25 @@\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# These environment variables are set by the build process and read by\n+# rpc-tests.py\n+\n+[DEFAULT]\n+# Provides default values for whether different components are enabled\n+ENABLE_WALLET=False\n+ENABLE_UTILS=False\n+ENABLE_BITCOIND=False\n+ENABLE_ZMQ=False\n+\n+[environment]\n+SRCDIR=@abs_top_srcdir@\n+BUILDDIR=@abs_top_builddir@\n+EXEEXT=@EXEEXT@\n+\n+[components]\n+# Which components are enabled. These are commented out by `configure` if they were disabled when running config.\n+@ENABLE_WALLET_TRUE@ENABLE_WALLET=True\n+@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=True\n+@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=True\n+@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=True"
      },
      {
        "sha": "a0d0a3d98a86becd64c699fa8bb67bb2ae79629c",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=a7ea2f8fdbe9392bcbd4a219a42ebd9518d2e2ef",
        "patch": "@@ -1,14 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-SRCDIR=\"@abs_top_srcdir@\"\n-BUILDDIR=\"@abs_top_builddir@\"\n-EXEEXT=\"@EXEEXT@\"\n-\n-# These will turn into comments if they were disabled when configuring.\n-@ENABLE_WALLET_TRUE@ENABLE_WALLET=1\n-@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=1\n-@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n-@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1"
      }
    ]
  },
  {
    "sha": "7bfb77045c4b06db3597c023de97411ed287e252",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmZiNzcwNDVjNGIwNmRiMzU5N2MwMjNkZTk3NDExZWQyODdlMjUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-01T07:41:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-01T07:42:53Z"
      },
      "message": "Merge #9640: Bumpfee: bugfixes for error handling and feerate calculation\n\n9522b53 rpc: bumpfee: handle errors more gracefully (Suhas Daftuar)\nf626594 rpc: bumpfee: use correct maximum signed tx size for fee calculation (Suhas Daftuar)\nd625b90 wallet: Refactor dummy signature signing for reusability (Suhas Daftuar)",
      "tree": {
        "sha": "b9fb2476ca21c7d62366eab57aef7cdf5ec791a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9fb2476ca21c7d62366eab57aef7cdf5ec791a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bfb77045c4b06db3597c023de97411ed287e252",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkZF9AAoJEHSBCwEjRsmmFBEIAIbEaG0k973KJLuouy82AYCs\nKLOzmS18uwZFoQEApn73iT1xYMJs4z2XQ5zDOGEb5v6rWIP4jojIyuFxm/WSDk1m\ni0jSdXhdjdDriqnZjmTguw/LXFonLoz/GDlxXZZQ+EoJ2zAHZOqb2O/cm0af0Uyd\n8CbP5zFFiWUXNfCrfiQ1xbKlopCIzQmKsM5tH9fyKqcUCZscTpGoxFBPFT7bmFvx\nIIzTauxHpvXfAgEPJKVznSE4usqioVBh8YAx2eh1TTBGj+2UteEqCvmyleTeBc0u\nBcqrljUaNex8tTdcty+OPz3bWnQ0WYr/j9Z5AkB/PcSUz/AlYWH/dUo0UojqIWU=\n=JpIP\n-----END PGP SIGNATURE-----",
        "payload": "tree b9fb2476ca21c7d62366eab57aef7cdf5ec791a9\nparent e99f0d7ad443ff72087c6f80e9fab65cace0bf19\nparent 9522b53a91f28032c34b94662d50b000534708ce\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485934881 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485934973 +0100\n\nMerge #9640: Bumpfee: bugfixes for error handling and feerate calculation\n\n9522b53 rpc: bumpfee: handle errors more gracefully (Suhas Daftuar)\nf626594 rpc: bumpfee: use correct maximum signed tx size for fee calculation (Suhas Daftuar)\nd625b90 wallet: Refactor dummy signature signing for reusability (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bfb77045c4b06db3597c023de97411ed287e252",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bfb77045c4b06db3597c023de97411ed287e252",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bfb77045c4b06db3597c023de97411ed287e252/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e99f0d7ad443ff72087c6f80e9fab65cace0bf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e99f0d7ad443ff72087c6f80e9fab65cace0bf19"
      },
      {
        "sha": "9522b53a91f28032c34b94662d50b000534708ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9522b53a91f28032c34b94662d50b000534708ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9522b53a91f28032c34b94662d50b000534708ce"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 77,
      "deletions": 21
    },
    "files": [
      {
        "sha": "8b135b0e0f7e3bb5836feb88b57e13505ac86d4c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 6,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7bfb77045c4b06db3597c023de97411ed287e252",
        "patch": "@@ -2664,6 +2664,33 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).\n+// NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n+// be IsAllFromMe).\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx)\n+{\n+    CMutableTransaction txNew(tx);\n+    std::vector<pair<CWalletTx *, unsigned int>> vCoins;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        vCoins.emplace_back(make_pair(&(mi->second), input.prevout.n));\n+    }\n+    if (!pwalletMain->DummySignTx(txNew, vCoins)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that cannot be signed\");\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     if (!EnsureWalletIsAvailable(request.fHelp)) {\n@@ -2706,6 +2733,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n             \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n             \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n+            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n@@ -2769,9 +2797,9 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n     }\n \n-    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx);\n \n     // optional parameters\n     bool specifiedConfirmTarget = false;\n@@ -2845,8 +2873,12 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + walletIncrementalRelayFee.GetFeePerK());\n+        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n+        // in that unit (fee per kb).\n+        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n+        // add 1 satoshi to the result, because it may have been rounded down.\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n             nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n         }\n     }\n@@ -2914,23 +2946,32 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n     CValidationState state;\n-    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid()) {\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        // NOTE: CommitTransaction never returns false, so this should never happen.\n         throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n     }\n \n+    UniValue vErrors(UniValue::VARR);\n+    if (state.IsInvalid()) {\n+        // This can happen if the mempool rejected the transaction.  Report\n+        // what happened in the \"errors\" response.\n+        vErrors.push_back(strprintf(\"Error: The transaction was rejected: %s\", FormatStateMessage(state)));\n+    }\n+\n     // mark the original tx as bumped\n     if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction\n         // replaced does not succeed for some reason.\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n+        vErrors.push_back(\"Error: Created new bumpfee transaction but could not mark the original transaction as replaced.\");\n     }\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"txid\", wtxBumped.GetHash().GetHex()));\n     result.push_back(Pair(\"origfee\", ValueFromAmount(nOldFee)));\n     result.push_back(Pair(\"fee\", ValueFromAmount(nNewFee)));\n+    result.push_back(Pair(\"errors\", vErrors));\n \n     return result;\n }"
      },
      {
        "sha": "a7b8022bd9c79e025ab601e8cc3563170239f022",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7bfb77045c4b06db3597c023de97411ed287e252",
        "patch": "@@ -2583,21 +2583,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                                               std::numeric_limits<unsigned int>::max() - (fWalletRbf ? 2 : 1)));\n \n                 // Fill in dummy signatures for fee calculation.\n-                int nIn = 0;\n-                for (const auto& coin : setCoins)\n-                {\n-                    const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n-                    SignatureData sigdata;\n-\n-                    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n-                    {\n-                        strFailReason = _(\"Signing transaction failed\");\n-                        return false;\n-                    } else {\n-                        UpdateTransaction(txNew, nIn, sigdata);\n-                    }\n-\n-                    nIn++;\n+                if (!DummySignTx(txNew, setCoins)) {\n+                    strFailReason = _(\"Signing transaction failed\");\n+                    return false;\n                 }\n \n                 unsigned int nBytes = GetVirtualTransactionSize(txNew);"
      },
      {
        "sha": "1de04ae16a3889ba69fff022cba1ba0e240afebd",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bfb77045c4b06db3597c023de97411ed287e252/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7bfb77045c4b06db3597c023de97411ed287e252",
        "patch": "@@ -13,6 +13,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n #include \"script/ismine.h\"\n+#include \"script/sign.h\"\n #include \"wallet/crypter.h\"\n #include \"wallet/walletdb.h\"\n #include \"wallet/rpcwallet.h\"\n@@ -796,6 +797,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);\n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB *pwalletdb);\n+    template <typename ContainerType>\n+    bool DummySignTx(CMutableTransaction &txNew, const ContainerType &coins);\n \n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n@@ -1028,4 +1031,28 @@ class CAccount\n     }\n };\n \n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+// ContainerType is meant to hold pair<CWalletTx *, int>, and be iterable\n+// so that each entry corresponds to each vIn, in order.\n+template <typename ContainerType>\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins)\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& coin : coins)\n+    {\n+        const CScript& scriptPubKey = coin.first->tx->vout[coin.second].scriptPubKey;\n+        SignatureData sigdata;\n+\n+        if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+        {\n+            return false;\n+        } else {\n+            UpdateTransaction(txNew, nIn, sigdata);\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "77bd8c4cab67b6df6a09f856534653c7e064d6ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2JkOGM0Y2FiNjdiNmRmNmEwOWY4NTY1MzQ2NTNjN2UwNjRkNmVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-01T10:33:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-01T10:41:00Z"
      },
      "message": "Merge #9625: Increase minimum debug.log size to 10MB after shrink.\n\n29fb311 Increase minimum debug.log size to 10MB after shrink. (Alex Morcos)",
      "tree": {
        "sha": "d178cf918598660ff40bc061c42f00b04008d7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d178cf918598660ff40bc061c42f00b04008d7db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkbs8AAoJEHSBCwEjRsmmnI4IAJYP15iCR6oF0X+BYFTyNvLd\nbgHeezeLBuCD0kB1O2bpYThFSSPyxM/zMje6Bxz9G9QrwmF5MBGfkEc+iGtLQ2uk\n3141JpOJDxVbdh99aa2rilZAKvTdtC165CXQLipV9sujNwqVIcQsbTqJdsZdWodQ\nu5vSD/8Ud/sd6N6CdqYjlbUMAOjZ2U36CnMy8+OP7IhKJNkDZl1JCkKI6ZnGAv3D\n9M42stDQgaLJZerPgFqAgdy1vzOeI4jB/pi+6/wzEY9mPsGk5GTyxpffm8P7mMtS\n+opdoreC03so2s1Jxs3P9Y5VVcfdHFCkntIH0Bbsy9r6xE7GRix8a670u+gs2hQ=\n=10Y+\n-----END PGP SIGNATURE-----",
        "payload": "tree d178cf918598660ff40bc061c42f00b04008d7db\nparent 7bfb77045c4b06db3597c023de97411ed287e252\nparent 29fb311858f098e79ed5334a128f2b0c8c88b235\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1485945231 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1485945660 +0100\n\nMerge #9625: Increase minimum debug.log size to 10MB after shrink.\n\n29fb311 Increase minimum debug.log size to 10MB after shrink. (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bfb77045c4b06db3597c023de97411ed287e252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bfb77045c4b06db3597c023de97411ed287e252",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bfb77045c4b06db3597c023de97411ed287e252"
      },
      {
        "sha": "29fb311858f098e79ed5334a128f2b0c8c88b235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fb311858f098e79ed5334a128f2b0c8c88b235",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29fb311858f098e79ed5334a128f2b0c8c88b235"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7c108ac4a63817510f8222807704f530441fd57f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77bd8c4cab67b6df6a09f856534653c7e064d6ec/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77bd8c4cab67b6df6a09f856534653c7e064d6ec/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "patch": "@@ -1146,8 +1146,11 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif\n-    if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n+    if (GetBoolArg(\"-shrinkdebugfile\", !fDebug)) {\n+        // Do this first since it both loads a bunch of debug.log into memory,\n+        // and because this needs to happen before any other debug.log printing\n         ShrinkDebugFile();\n+    }\n \n     if (fPrintToDebugLog)\n         OpenDebugLog();"
      },
      {
        "sha": "ba157625d8055a1f934bb2e691fad3f5ab976ad6",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77bd8c4cab67b6df6a09f856534653c7e064d6ec/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77bd8c4cab67b6df6a09f856534653c7e064d6ec/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "patch": "@@ -723,13 +723,17 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n \n void ShrinkDebugFile()\n {\n+    // Amount of debug.log to save at end when shrinking (must fit in memory)\n+    constexpr size_t RECENT_DEBUG_HISTORY_SIZE = 10 * 1000000;\n     // Scroll debug.log if it's getting too big\n     boost::filesystem::path pathLog = GetDataDir() / \"debug.log\";\n     FILE* file = fopen(pathLog.string().c_str(), \"r\");\n-    if (file && boost::filesystem::file_size(pathLog) > 10 * 1000000)\n+    // If debug.log file is more than 10% bigger the RECENT_DEBUG_HISTORY_SIZE\n+    // trim it down by saving only the last RECENT_DEBUG_HISTORY_SIZE bytes\n+    if (file && boost::filesystem::file_size(pathLog) > 11 * (RECENT_DEBUG_HISTORY_SIZE / 10))\n     {\n         // Restart the file with some of the end\n-        std::vector <char> vch(200000,0);\n+        std::vector<char> vch(RECENT_DEBUG_HISTORY_SIZE, 0);\n         fseek(file, -((long)vch.size()), SEEK_END);\n         int nBytes = fread(vch.data(), 1, vch.size(), file);\n         fclose(file);"
      }
    ]
  },
  {
    "sha": "3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWJhODhkNDRjZGZkOWQ0ZDJiZmMxOWNkNjA0OWQ5MGVlMDVmYzFj",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-02-01T17:18:31Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-02-01T17:18:31Z"
      },
      "message": "clarify listunspent amount description",
      "tree": {
        "sha": "05e650b48583862cb94739d5f0d43f05f15beca5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05e650b48583862cb94739d5f0d43f05f15beca5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b68f898efa095dce03533be8ac015c1faef23053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b68f898efa095dce03533be8ac015c1faef23053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b68f898efa095dce03533be8ac015c1faef23053"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8272bdc43fa2d4d7fa1cdfa628fc16153fa9ba50",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
        "patch": "@@ -2402,7 +2402,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n             \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n             \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\""
      }
    ]
  },
  {
    "sha": "3e900acafaa2d40218d8b6167f1a80affd84c8c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTkwMGFjYWZhYTJkNDAyMThkOGI2MTY3ZjFhODBhZmZkODRjOGM0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-31T19:59:32Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-01T23:22:27Z"
      },
      "message": "Require merge commits merge branches on top of other merge commits\n\nSpecifically, require that the left branch (first restult of git\nshow -s --format=format:%P) is a signed merge commit, instead of\nallowing either. This is fine for now, but might need to be relaxed\nin the future.\n\nAlso fixes an out-of-file-descriptors issue by holding too many\nopen FDs writing to /dev/null",
      "tree": {
        "sha": "fbda39c30b410283bd42b58c2db7ef872dc63b13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbda39c30b410283bd42b58c2db7ef872dc63b13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e900acafaa2d40218d8b6167f1a80affd84c8c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e900acafaa2d40218d8b6167f1a80affd84c8c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e900acafaa2d40218d8b6167f1a80affd84c8c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e900acafaa2d40218d8b6167f1a80affd84c8c4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77bd8c4cab67b6df6a09f856534653c7e064d6ec"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b2cebdf1a0f9f09661404e378c3250d72ac1c80d",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e900acafaa2d40218d8b6167f1a80affd84c8c4/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e900acafaa2d40218d8b6167f1a80affd84c8c4/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=3e900acafaa2d40218d8b6167f1a80affd84c8c4",
        "patch": "@@ -28,9 +28,10 @@ IS_SIGNED () {\n \tlocal PARENTS\n \tPARENTS=$(git show -s --format=format:%P $1)\n \tfor PARENT in $PARENTS; do\n-\t\tif IS_SIGNED $PARENT > /dev/null; then\n+\t\tif IS_SIGNED $PARENT; then\n \t\t\treturn 0;\n \t\tfi\n+\t\tbreak\n \tdone\n \tif ! \"$HAVE_FAILED\"; then\n \t\techo \"No parent of $1 was signed with a trusted key!\" > /dev/stderr"
      }
    ]
  },
  {
    "sha": "ba94426d531d45643e37567412c3f9d97f71ae5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTk0NDI2ZDUzMWQ0NTY0M2UzNzU2NzQxMmMzZjlkOTdmNzFhZTVm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-31T20:32:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-01T23:22:55Z"
      },
      "message": "Test that pushes to bitcoin/bitcoin are signed per verify-commits",
      "tree": {
        "sha": "d7f55c438470d0021187d18b5ace12e61b828807",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7f55c438470d0021187d18b5ace12e61b828807"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba94426d531d45643e37567412c3f9d97f71ae5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba94426d531d45643e37567412c3f9d97f71ae5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba94426d531d45643e37567412c3f9d97f71ae5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba94426d531d45643e37567412c3f9d97f71ae5f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e900acafaa2d40218d8b6167f1a80affd84c8c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e900acafaa2d40218d8b6167f1a80affd84c8c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e900acafaa2d40218d8b6167f1a80affd84c8c4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ccd249092527d5174c705db522db246debdd3ff9",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba94426d531d45643e37567412c3f9d97f71ae5f/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba94426d531d45643e37567412c3f9d97f71ae5f/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ba94426d531d45643e37567412c3f9d97f71ae5f",
        "patch": "@@ -51,6 +51,9 @@ before_script:\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n script:\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git fetch --unshallow; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then contrib/verify-commits/verify-commits.sh; fi\n     - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST"
      }
    ]
  },
  {
    "sha": "e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzBkOTI4N2ZkNDhhZmNiZWViYzUwNjI4NzBlYjZmZmE1ZDI2NDRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:13:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:13:21Z"
      },
      "message": "Merge #9663: [RPC] clarify listunspent amount description\n\n3eba88d clarify listunspent amount description (Gregory Sanders)",
      "tree": {
        "sha": "8946ef6d662b9b5a46c5717cac42a0d95e1dc723",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8946ef6d662b9b5a46c5717cac42a0d95e1dc723"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkvgxAAoJEHSBCwEjRsmm/YAH/iIBedfMLRTYY5BP4xE7GF7d\n8OFgVv8FO6YniE6zy+6ztIFmS57D4sulGDfNGV2/6SbAstU9h51FN1daUmESeStF\nZFH9TXv8PrPToawJ6oZPeL8epuEAoQ+EGTSgMmnlCsmjdShr/etkUAKtdqppniaP\nyWP32ScfxVatGzPiBYydRvKAArJ++v7fhkyHa+MpTwCt3HnXaTaNDrpcCjyv4oFz\nmgphatriwCEhy/5/ZgiHxlwB+4bIgWfPVaYSdETLjKapSxkn3S61eMHTUEjcTvFx\nPZaEZeqU0KLKaf/tHvQ/wzE5pyJYA/AuW87KHP5wnWfOBWIF1tlktKYUlGI+VJI=\n=RISD\n-----END PGP SIGNATURE-----",
        "payload": "tree 8946ef6d662b9b5a46c5717cac42a0d95e1dc723\nparent 77bd8c4cab67b6df6a09f856534653c7e064d6ec\nparent 3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486026787 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486026801 +0100\n\nMerge #9663: [RPC] clarify listunspent amount description\n\n3eba88d clarify listunspent amount description (Gregory Sanders)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d9287fd48afcbeebc5062870eb6ffa5d2644a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77bd8c4cab67b6df6a09f856534653c7e064d6ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77bd8c4cab67b6df6a09f856534653c7e064d6ec"
      },
      {
        "sha": "3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eba88d44cdfd9d4d2bfc19cd6049d90ee05fc1c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "36753d111632ee83662253aad053c83a0c3b028e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e30d9287fd48afcbeebc5062870eb6ffa5d2644a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e30d9287fd48afcbeebc5062870eb6ffa5d2644a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
        "patch": "@@ -2416,7 +2416,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n             \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n             \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n             \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n             \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\""
      }
    ]
  },
  {
    "sha": "ae972a5e996a8883369c424348682a2c1597877e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTk3MmE1ZTk5NmE4ODgzMzY5YzQyNDM0ODY4MmEyYzE1OTc4Nzdl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:19:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:19:15Z"
      },
      "message": "Merge #9580: Fix various minor linearization script issues\n\nb9d95bd Fix various minor linearization script issues (Douglas Roark)",
      "tree": {
        "sha": "24433e1c4e49940b1ea59898ed8054d096e14136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24433e1c4e49940b1ea59898ed8054d096e14136"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae972a5e996a8883369c424348682a2c1597877e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkvmTAAoJEHSBCwEjRsmmcSwIAIjxu46EHiHRDpUdJnPWmG+Y\nq50/9gWOz95UclhVUmXs4S2qRolZRgmmqbU2uFbNt8ekKUTcoU9ruhkADsy+1RXZ\neLHAb7NVFHRUYijonNCUORwe52bF4F171dGuF1HSS/MQXs83HgVcmelgEbCCFKh+\n6Dn09Knb9kilo+7zmm8zpgDGl8pZormFpdzg6kvQdZMqNgd7lkF1nAyTbBtMusJU\njgzvz2WolQPAO/4yU9UF8Ef2rZTmUWw+4HvfsUYlpCOGLbvSnFLzfOD+bQfqoic3\n6bBHhM6AsYmsCuyI2mk1lSg4rrf6/fY/txeCSiBVzLeGeM7nNOwNatQQC90wCik=\n=aLpp\n-----END PGP SIGNATURE-----",
        "payload": "tree 24433e1c4e49940b1ea59898ed8054d096e14136\nparent e30d9287fd48afcbeebc5062870eb6ffa5d2644a\nparent b9d95bd9a1b3e8613373ecd228805518f2852985\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486027146 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486027155 +0100\n\nMerge #9580: Fix various minor linearization script issues\n\nb9d95bd Fix various minor linearization script issues (Douglas Roark)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae972a5e996a8883369c424348682a2c1597877e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae972a5e996a8883369c424348682a2c1597877e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae972a5e996a8883369c424348682a2c1597877e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e30d9287fd48afcbeebc5062870eb6ffa5d2644a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e30d9287fd48afcbeebc5062870eb6ffa5d2644a"
      },
      {
        "sha": "b9d95bd9a1b3e8613373ecd228805518f2852985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9d95bd9a1b3e8613373ecd228805518f2852985",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9d95bd9a1b3e8613373ecd228805518f2852985"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 41,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0971e7816b48f62a3881368f7e5f0503b692a3d7",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=ae972a5e996a8883369c424348682a2c1597877e",
        "patch": "@@ -32,15 +32,21 @@ Required configuration file settings:\n * `output`: Output directory for linearized `blocks/blkNNNNN.dat` output.\n \n Optional config file setting for linearize-data:\n-* `file_timestamp`: Set each file's last-modified time to that of the most\n-recent block in that file.\n+* `debug_output`: Some printouts may not always be desired. If true, such output\n+will be printed.\n+* `file_timestamp`: Set each file's last-accessed and last-modified times,\n+respectively, to the current time and to the timestamp of the most recent block\n+written to the script's blockchain.\n * `genesis`: The hash of the genesis block in the blockchain.\n * `input`: bitcoind blocks/ directory containing blkNNNNN.dat\n * `hashlist`: text file containing list of block hashes created by\n linearize-hashes.py.\n * `max_out_sz`: Maximum size for files created by the `output_file` option.\n (Default: `1000*1000*1000 bytes`)\n * `netmagic`: Network magic number.\n+* `out_of_order_cache_sz`: If out-of-order blocks are being read, the block can\n+be written to a cache so that the blockchain doesn't have to be seeked again.\n+This option specifies the cache size. (Default: `100*1000*1000 bytes`)\n * `rev_hash_bytes`: If true, the block hash list written by linearize-hashes.py\n will be byte-reversed when read by linearize-data.py. See the linearize-hashes\n entry for more information."
      },
      {
        "sha": "2cc910edfed158643d45a17d9b63bec6a39db378",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=ae972a5e996a8883369c424348682a2c1597877e",
        "patch": "@@ -1,4 +1,3 @@\n-\n # bitcoind RPC settings (linearize-hashes)\n rpcuser=someuser\n rpcpassword=somepassword\n@@ -21,6 +20,9 @@ input=/home/example/.bitcoin/blocks\n #genesis=000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\n #input=/home/example/.bitcoin/testnet3/blocks\n \n+# \"output\" option causes blockchain files to be written to the given location,\n+# with \"output_file\" ignored. If not used, \"output_file\" is used instead.\n+# output=/home/example/blockchain_directory\n output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n \n@@ -29,3 +31,12 @@ out_of_order_cache_sz = 100000000\n \n # Do we want the reverse the hash bytes coming from getblockhash?\n rev_hash_bytes = False\n+\n+# On a new month, do we want to set the access and modify times of the new\n+# blockchain file?\n+file_timestamp = 0\n+# Do we want to split the blockchain files given a new month or specific height?\n+split_timestamp = 0\n+\n+# Do we want debug printouts?\n+debug_output = False"
      },
      {
        "sha": "afcec2b60ae4f5d4ceae805bc076dbf39c982c62",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 21,
        "deletions": 15,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae972a5e996a8883369c424348682a2c1597877e/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=ae972a5e996a8883369c424348682a2c1597877e",
        "patch": "@@ -134,32 +134,32 @@ def writeBlock(self, inhdr, blk_hdr, rawblock):\n \t\tif not self.fileOutput and ((self.outsz + blockSizeOnDisk) > self.maxOutSz):\n \t\t\tself.outF.close()\n \t\t\tif self.setFileTime:\n-\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n+\t\t\t\tos.utime(self.outFname, (int(time.time()), self.highTS))\n \t\t\tself.outF = None\n \t\t\tself.outFname = None\n \t\t\tself.outFn = self.outFn + 1\n \t\t\tself.outsz = 0\n \n \t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n \t\tif self.timestampSplit and (blkDate > self.lastDate):\n-\t\t\tprint(\"New month \" + blkDate.strftime(\"%Y-%m\") + \" @ \" + hash_str)\n-\t\t\tlastDate = blkDate\n-\t\t\tif outF:\n-\t\t\t\toutF.close()\n-\t\t\t\tif setFileTime:\n-\t\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n+\t\t\tprint(\"New month \" + blkDate.strftime(\"%Y-%m\") + \" @ \" + self.hash_str)\n+\t\t\tself.lastDate = blkDate\n+\t\t\tif self.outF:\n+\t\t\t\tself.outF.close()\n+\t\t\t\tif self.setFileTime:\n+\t\t\t\t\tos.utime(self.outFname, (int(time.time()), self.highTS))\n \t\t\t\tself.outF = None\n \t\t\t\tself.outFname = None\n \t\t\t\tself.outFn = self.outFn + 1\n \t\t\t\tself.outsz = 0\n \n \t\tif not self.outF:\n \t\t\tif self.fileOutput:\n-\t\t\t\toutFname = self.settings['output_file']\n+\t\t\t\tself.outFname = self.settings['output_file']\n \t\t\telse:\n-\t\t\t\toutFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n-\t\t\tprint(\"Output file \" + outFname)\n-\t\t\tself.outF = open(outFname, \"wb\")\n+\t\t\t\tself.outFname = os.path.join(self.settings['output'], \"blk%05d.dat\" % self.outFn)\n+\t\t\tprint(\"Output file \" + self.outFname)\n+\t\t\tself.outF = open(self.outFname, \"wb\")\n \n \t\tself.outF.write(inhdr)\n \t\tself.outF.write(blk_hdr)\n@@ -223,13 +223,16 @@ def run(self):\n \t\t\tblk_hdr = self.inF.read(80)\n \t\t\tinExtent = BlockExtent(self.inFn, self.inF.tell(), inhdr, blk_hdr, inLen)\n \n-\t\t\thash_str = calc_hash_str(blk_hdr)\n-\t\t\tif not hash_str in blkmap:\n-\t\t\t\tprint(\"Skipping unknown block \" + hash_str)\n+\t\t\tself.hash_str = calc_hash_str(blk_hdr)\n+\t\t\tif not self.hash_str in blkmap:\n+\t\t\t\t# Because blocks can be written to files out-of-order as of 0.10, the script\n+\t\t\t\t# may encounter blocks it doesn't know about. Treat as debug output.\n+\t\t\t\tif settings['debug_output'] == 'true':\n+\t\t\t\t\tprint(\"Skipping unknown block \" + self.hash_str)\n \t\t\t\tself.inF.seek(inLen, os.SEEK_CUR)\n \t\t\t\tcontinue\n \n-\t\t\tblkHeight = self.blkmap[hash_str]\n+\t\t\tblkHeight = self.blkmap[self.hash_str]\n \t\t\tself.blkCountIn += 1\n \n \t\t\tif self.blkCountOut == blkHeight:\n@@ -295,12 +298,15 @@ def run(self):\n \t\tsettings['max_out_sz'] = 1000 * 1000 * 1000\n \tif 'out_of_order_cache_sz' not in settings:\n \t\tsettings['out_of_order_cache_sz'] = 100 * 1000 * 1000\n+\tif 'debug_output' not in settings:\n+\t\tsettings['debug_output'] = 'false'\n \n \tsettings['max_out_sz'] = int(settings['max_out_sz'])\n \tsettings['split_timestamp'] = int(settings['split_timestamp'])\n \tsettings['file_timestamp'] = int(settings['file_timestamp'])\n \tsettings['netmagic'] = unhexlify(settings['netmagic'].encode('utf-8'))\n \tsettings['out_of_order_cache_sz'] = int(settings['out_of_order_cache_sz'])\n+\tsettings['debug_output'] = settings['debug_output'].lower()\n \n \tif 'output_file' not in settings and 'output' not in settings:\n \t\tprint(\"Missing output file / directory\")"
      }
    ]
  },
  {
    "sha": "4e19efba033167ee530d36e22f404b74b09f7955",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTE5ZWZiYTAzMzE2N2VlNTMwZDM2ZTIyZjQwNGI3NGIwOWY3OTU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T09:21:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T10:57:40Z"
      },
      "message": "Merge #9556: Remove redundant semicolons\n\n8fc6989 Remove redundant semicolons (practicalswift)",
      "tree": {
        "sha": "fd08c1a26178d215c70b90b85d1c7f7cb526125e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd08c1a26178d215c70b90b85d1c7f7cb526125e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e19efba033167ee530d36e22f404b74b09f7955",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkxCkAAoJEHSBCwEjRsmmDXoH/06IYCzh3LCWPUp6f+Pj7MjE\nK57T/VVPDkXbEzB2uhavcT/GNCvZ4mke7wZF5J+4+sDGHyao4vKIIgXmnzo62jWS\nFJO849MDtCwDvOTk/zGEflLIwfsO/CqCfZ5LXganBlzVeAZLmKcUV3eu8ryoqyvx\ntZBTlbbGJzVltz58rNVpSD4WinUnI10YTnYoELXmv0UxOvQv72CP31QQSX2E6OCu\nr31Dcg2C6lv698/qrknyef97XNEnbDky5auu4xAS96cIIbiGtBlp12dIXhGGyXvv\nhqKcp4ULLofarUbQrD5UihxPb5LZSDQMK1oorMN35n12IP4ohfCxRDJCxzE17NI=\n=a7Tj\n-----END PGP SIGNATURE-----",
        "payload": "tree fd08c1a26178d215c70b90b85d1c7f7cb526125e\nparent ae972a5e996a8883369c424348682a2c1597877e\nparent 8fc698935f01a9f0675e509761fb69be8d43e80a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486027266 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486033060 +0100\n\nMerge #9556: Remove redundant semicolons\n\n8fc6989 Remove redundant semicolons (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e19efba033167ee530d36e22f404b74b09f7955",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e19efba033167ee530d36e22f404b74b09f7955",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e19efba033167ee530d36e22f404b74b09f7955/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae972a5e996a8883369c424348682a2c1597877e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae972a5e996a8883369c424348682a2c1597877e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae972a5e996a8883369c424348682a2c1597877e"
      },
      {
        "sha": "8fc698935f01a9f0675e509761fb69be8d43e80a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fc698935f01a9f0675e509761fb69be8d43e80a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fc698935f01a9f0675e509761fb69be8d43e80a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a14a2386a264f7c2dacd298545bf7697c87be825",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e19efba033167ee530d36e22f404b74b09f7955/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e19efba033167ee530d36e22f404b74b09f7955/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=4e19efba033167ee530d36e22f404b74b09f7955",
        "patch": "@@ -57,7 +57,7 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n             k1 = ROTL32(k1, 15);\n             k1 *= c2;\n             h1 ^= k1;\n-        };\n+        }\n     }\n \n     //----------"
      },
      {
        "sha": "c594daca0d0dd116b6ebf2e599a621245a9be712",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e19efba033167ee530d36e22f404b74b09f7955/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e19efba033167ee530d36e22f404b74b09f7955/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4e19efba033167ee530d36e22f404b74b09f7955",
        "patch": "@@ -697,15 +697,15 @@ class submitblock_StateCatcher : public CValidationInterface\n     bool found;\n     CValidationState state;\n \n-    submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {};\n+    submitblock_StateCatcher(const uint256 &hashIn) : hash(hashIn), found(false), state() {}\n \n protected:\n     virtual void BlockChecked(const CBlock& block, const CValidationState& stateIn) {\n         if (block.GetHash() != hash)\n             return;\n         found = true;\n         state = stateIn;\n-    };\n+    }\n };\n \n UniValue submitblock(const JSONRPCRequest& request)"
      },
      {
        "sha": "e2b5573abd8c76fd0634de48f88ecbabd51c92c0",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e19efba033167ee530d36e22f404b74b09f7955/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e19efba033167ee530d36e22f404b74b09f7955/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=4e19efba033167ee530d36e22f404b74b09f7955",
        "patch": "@@ -292,7 +292,7 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n         blocksToMine--;\n         nTime += 600;\n         nHeight += 1;\n-    };\n+    }\n \n     nTime = nTimeout;\n     // FAILED is only triggered at the end of a period, so CBV should be setting"
      }
    ]
  },
  {
    "sha": "7c93952feccb66254268c110e09797da3d337f7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzkzOTUyZmVjY2I2NjI1NDI2OGMxMTBlMDk3OTdkYTNkMzM3Zjdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T12:04:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T12:04:53Z"
      },
      "message": "Merge #9656: Check verify-commits on pushes to master\n\nba94426 Test that pushes to bitcoin/bitcoin are signed per verify-commits (Matt Corallo)\n3e900ac Require merge commits merge branches on top of other merge commits (Matt Corallo)",
      "tree": {
        "sha": "ccd9bc9db1dde81e392f59a8368510d5b825a7ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccd9bc9db1dde81e392f59a8368510d5b825a7ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c93952feccb66254268c110e09797da3d337f7f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkyBlAAoJEHSBCwEjRsmmEjYIAIW9BVMhWyZQNXe2zFhqVWKF\nAKIJC87LjoHbWmq5HowzOS4YvGJkyllgeTZtTNnl9j52082fi+rgPYjr1jHKKv7R\n0FxZHzWlAEBq6dXIQbhl+m7XSZ+jvgh54jKwLxj/oai9ajtyhv+cvmg/oWqTQ2yf\nrbuZOcmFWu03LIiGg6dPm1iapP7Ok6RCkJgqke8/brxAkdPRYviMLTPZfD0+B/7A\nz3U9rv8y4rhrq2zmnSDLeIpQw9nPvnm+yFZNYnT8ubdOQNy0z2Bnqk7Jgxk9serx\nXWYQe3kmh0ZtUcDjmuF/uN0NqLQqkYj7DgXFbei4rhv7HfeFDCpc2BMsjVLPdP4=\n=WMpN\n-----END PGP SIGNATURE-----",
        "payload": "tree ccd9bc9db1dde81e392f59a8368510d5b825a7ef\nparent 4e19efba033167ee530d36e22f404b74b09f7955\nparent ba94426d531d45643e37567412c3f9d97f71ae5f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486037075 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486037093 +0100\n\nMerge #9656: Check verify-commits on pushes to master\n\nba94426 Test that pushes to bitcoin/bitcoin are signed per verify-commits (Matt Corallo)\n3e900ac Require merge commits merge branches on top of other merge commits (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c93952feccb66254268c110e09797da3d337f7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c93952feccb66254268c110e09797da3d337f7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c93952feccb66254268c110e09797da3d337f7f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e19efba033167ee530d36e22f404b74b09f7955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e19efba033167ee530d36e22f404b74b09f7955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e19efba033167ee530d36e22f404b74b09f7955"
      },
      {
        "sha": "ba94426d531d45643e37567412c3f9d97f71ae5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba94426d531d45643e37567412c3f9d97f71ae5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba94426d531d45643e37567412c3f9d97f71ae5f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ccd249092527d5174c705db522db246debdd3ff9",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c93952feccb66254268c110e09797da3d337f7f/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c93952feccb66254268c110e09797da3d337f7f/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=7c93952feccb66254268c110e09797da3d337f7f",
        "patch": "@@ -51,6 +51,9 @@ before_script:\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n script:\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git fetch --unshallow; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then contrib/verify-commits/verify-commits.sh; fi\n     - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST"
      },
      {
        "sha": "b2cebdf1a0f9f09661404e378c3250d72ac1c80d",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c93952feccb66254268c110e09797da3d337f7f/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c93952feccb66254268c110e09797da3d337f7f/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=7c93952feccb66254268c110e09797da3d337f7f",
        "patch": "@@ -28,9 +28,10 @@ IS_SIGNED () {\n \tlocal PARENTS\n \tPARENTS=$(git show -s --format=format:%P $1)\n \tfor PARENT in $PARENTS; do\n-\t\tif IS_SIGNED $PARENT > /dev/null; then\n+\t\tif IS_SIGNED $PARENT; then\n \t\t\treturn 0;\n \t\tfi\n+\t\tbreak\n \tdone\n \tif ! \"$HAVE_FAILED\"; then\n \t\techo \"No parent of $1 was signed with a trusted key!\" > /dev/stderr"
      }
    ]
  },
  {
    "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzJlZGQ5ZjY3MDdkMTZjMDNlY2ZiYTA5NGIxY2ZlYzJkZGM0ZGNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T12:25:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T12:25:59Z"
      },
      "message": "Merge #9654: Add jtimon pgp keys for commit sigs and future gitian builds\n\n178454d Contrib: Add jtimon pgp keys for commit sigs and future gitian builds (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "2aa3b10ff7085d0b0777ed82076ad52ec0d9add2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2aa3b10ff7085d0b0777ed82076ad52ec0d9add2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYkyVXAAoJEHSBCwEjRsmmt5gH/16VID43DCGs7W1kWyCdkOvJ\nPYJ6fe6k7thKg3rVCLgBoSV8f5ikHYWVVBrJz3s3s39sKVb+hZd4LLOI9eWaoYOG\n5pkFN+tar5boiIWNcM7CIlwykHDvSQp4nE/WO7ewWr7GhstF516P0FItCm17ZfHs\nbkJw6R6N1ZXFiLsGd45gZ+T9iQ/6eM3y+co0iHrNdQC4XBpk9HjPb7w4MGMFND6H\n0UQcnAsPhjHVC3U70v3OgOQWh/Rsds3hXQXnCNHQNJh11lG670zcczpWBA2eCMPg\n6iDUYvkH+Nb7wl+QO5NBoM5OS3yUh29DYpCxzyyGbAdYQSaep6JHyiqdN0IvvlE=\n=eS0p\n-----END PGP SIGNATURE-----",
        "payload": "tree 2aa3b10ff7085d0b0777ed82076ad52ec0d9add2\nparent 7c93952feccb66254268c110e09797da3d337f7f\nparent 178454dde93ffa55343c17fcc6414f1f982f71e3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486038352 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486038359 +0100\n\nMerge #9654: Add jtimon pgp keys for commit sigs and future gitian builds\n\n178454d Contrib: Add jtimon pgp keys for commit sigs and future gitian builds (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c93952feccb66254268c110e09797da3d337f7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c93952feccb66254268c110e09797da3d337f7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c93952feccb66254268c110e09797da3d337f7f"
      },
      {
        "sha": "178454dde93ffa55343c17fcc6414f1f982f71e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/178454dde93ffa55343c17fcc6414f1f982f71e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/178454dde93ffa55343c17fcc6414f1f982f71e3"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "88d0de1503bb6a6bed7710b68b5526e85a855812",
        "filename": "contrib/gitian-keys/jtimon-key.pgp",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce/contrib/gitian-keys/jtimon-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce/contrib/gitian-keys/jtimon-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/jtimon-key.pgp?ref=1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ]
  },
  {
    "sha": "885cfdd2179a2aae733d0690f5a2ef23d181768e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODVjZmRkMjE3OWEyYWFlNzMzZDA2OTBmNWEyZWYyM2QxODE3Njhl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T18:51:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T18:51:57Z"
      },
      "message": "Fix super-unlikely race introduced in 236618061a445d2cb11e72\n\nOnce the CNode has been added to vNodes, it is possible that it is\ndisconnected+deleted in the socket handler thread. However, after\nthat we now call InitializeNode, which accesses the pnode.\n\nhelgrind managed to tickle this case (somehow), but I suspect it\nrequires in immensely braindead scheduler.",
      "tree": {
        "sha": "e7ccb13171258fa0d9736c27dd713836fb17e8b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7ccb13171258fa0d9736c27dd713836fb17e8b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/885cfdd2179a2aae733d0690f5a2ef23d181768e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885cfdd2179a2aae733d0690f5a2ef23d181768e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/885cfdd2179a2aae733d0690f5a2ef23d181768e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885cfdd2179a2aae733d0690f5a2ef23d181768e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "35d3348adcb3c3af7eeacdbc2248cf168b1389d0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/885cfdd2179a2aae733d0690f5a2ef23d181768e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/885cfdd2179a2aae733d0690f5a2ef23d181768e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=885cfdd2179a2aae733d0690f5a2ef23d181768e",
        "patch": "@@ -1833,11 +1833,11 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (fAddnode)\n         pnode->fAddnode = true;\n \n+    GetNodeSignals().InitializeNode(pnode, *this);\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n-    GetNodeSignals().InitializeNode(pnode, *this);\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGZmMDM0NGFlYmJkZWJkZmE3NDMzZDg1NWIwYWE5ZGU2YzRiZWQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-15T00:41:37Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T18:56:05Z"
      },
      "message": "Dont deserialize nVersion into CNode, should fix #9212",
      "tree": {
        "sha": "586c959f54a062154d05ceed8689ba676f27ddd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/586c959f54a062154d05ceed8689ba676f27ddd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "6dcb907bcfceb0498d0df667cf221b2f4a089212",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
        "patch": "@@ -1199,7 +1199,8 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         uint64_t nServiceInt;\n-        vRecv >> pfrom->nVersion >> nServiceInt >> nTime >> addrMe;\n+        int nVersion;\n+        vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n         pfrom->nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n@@ -1214,18 +1215,18 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             return false;\n         }\n \n-        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n+        if (nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n+            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, nVersion);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n \n-        if (pfrom->nVersion == 10300)\n-            pfrom->nVersion = 300;\n+        if (nVersion == 10300)\n+            nVersion = 300;\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n@@ -1277,7 +1278,8 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n \n         // Change version\n         connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n-        int nSendVersion = std::min(pfrom->nVersion, PROTOCOL_VERSION);\n+        int nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n+        pfrom->nVersion = nVersion;\n         pfrom->SetSendVersion(nSendVersion);\n \n         if (!pfrom->fInbound)"
      }
    ]
  },
  {
    "sha": "9fc7f0bce94f1cea0239b1543227f22a3f3b9274",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmM3ZjBiY2U5NGYxY2VhMDIzOWIxNTQzMjI3ZjIyYTNmM2I5Mjc0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-23T23:39:07Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-02T20:00:25Z"
      },
      "message": "Bugfix: RPC/Mining: GBT should return 1 MB sizelimit before segwit activates",
      "tree": {
        "sha": "16d1f860a1acbdfae9f4581ad2b10ced4f79d72f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16d1f860a1acbdfae9f4581ad2b10ced4f79d72f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fc7f0bce94f1cea0239b1543227f22a3f3b9274",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fc7f0bce94f1cea0239b1543227f22a3f3b9274",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fc7f0bce94f1cea0239b1543227f22a3f3b9274",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fc7f0bce94f1cea0239b1543227f22a3f3b9274/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "77cd282a3da4ce78b61413c4cfb3b942b8097eb2",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fc7f0bce94f1cea0239b1543227f22a3f3b9274/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fc7f0bce94f1cea0239b1543227f22a3f3b9274/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9fc7f0bce94f1cea0239b1543227f22a3f3b9274",
        "patch": "@@ -676,8 +676,12 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n-    result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+    if (fPreSegWit) {\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_BASE_SIZE));\n+    } else {\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n+        result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+    }\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      }
    ]
  },
  {
    "sha": "2046617b5e06ddb7f960b28219c155995542f029",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDQ2NjE3YjVlMDZkZGI3Zjk2MGIyODIxOWMxNTU5OTU1NDJmMDI5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-18T23:15:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:13:52Z"
      },
      "message": "net: deserialize the entire version message locally\n\nThis avoids having some vars set if the version negotiation fails.\n\nAlso copy it all into CNode at the same site. nVersion and\nfSuccessfullyConnected are set last, as they are the gates for the other vars.\nMake them atomic for that reason.",
      "tree": {
        "sha": "53a62fc8ab3fc3361f026f7c1f6429d0456a5887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53a62fc8ab3fc3361f026f7c1f6429d0456a5887"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2046617b5e06ddb7f960b28219c155995542f029",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2046617b5e06ddb7f960b28219c155995542f029",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2046617b5e06ddb7f960b28219c155995542f029",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2046617b5e06ddb7f960b28219c155995542f029/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80ff0344aebbdebdfa7433d855b0aa9de6c4bed3"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 36,
      "deletions": 29
    },
    "files": [
      {
        "sha": "c51ae5a18dff426e3ebf436056fa75769a695444",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2046617b5e06ddb7f960b28219c155995542f029/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2046617b5e06ddb7f960b28219c155995542f029/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2046617b5e06ddb7f960b28219c155995542f029",
        "patch": "@@ -627,7 +627,7 @@ class CNode\n     const CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n-    int nVersion;\n+    std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n@@ -639,7 +639,7 @@ class CNode\n     bool fAddnode;\n     bool fClient;\n     const bool fInbound;\n-    bool fSuccessfullyConnected;\n+    std::atomic_bool fSuccessfullyConnected;\n     std::atomic_bool fDisconnect;\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message"
      },
      {
        "sha": "d1e6b1ae045a6ff1ceccb8f4f2ea0fb41306fb5d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 27,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2046617b5e06ddb7f960b28219c155995542f029/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2046617b5e06ddb7f960b28219c155995542f029/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2046617b5e06ddb7f960b28219c155995542f029",
        "patch": "@@ -1199,16 +1199,23 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         uint64_t nServiceInt;\n+        ServiceFlags nServices;\n         int nVersion;\n+        int nSendVersion;\n+        std::string strSubVer;\n+        int nStartingHeight = -1;\n+        bool fRelay = true;\n+\n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n-        pfrom->nServices = ServiceFlags(nServiceInt);\n+        nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n+        nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n-            connman.SetServices(pfrom->addr, pfrom->nServices);\n+            connman.SetServices(pfrom->addr, nServices);\n         }\n-        if (pfrom->nServicesExpected & ~pfrom->nServices)\n+        if (pfrom->nServicesExpected & ~nServices)\n         {\n-            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, pfrom->nServices, pfrom->nServicesExpected);\n+            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, nServices, pfrom->nServicesExpected);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n                                strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n             pfrom->fDisconnect = true;\n@@ -1230,20 +1237,13 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n-            vRecv >> LIMITED_STRING(pfrom->strSubVer, MAX_SUBVERSION_LENGTH);\n-            pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n+            vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n         }\n         if (!vRecv.empty()) {\n-            vRecv >> pfrom->nStartingHeight;\n+            vRecv >> nStartingHeight;\n         }\n-        {\n-            LOCK(pfrom->cs_filter);\n-            if (!vRecv.empty())\n-                vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n-            else\n-                pfrom->fRelayTxes = true;\n-        }\n-\n+        if (!vRecv.empty())\n+            vRecv >> fRelay;\n         // Disconnect if we connected to ourself\n         if (pfrom->fInbound && !connman.CheckIncomingNonce(nNonce))\n         {\n@@ -1252,7 +1252,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             return true;\n         }\n \n-        pfrom->addrLocal = addrMe;\n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n             SeenLocal(addrMe);\n@@ -1262,9 +1261,25 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         if (pfrom->fInbound)\n             PushNodeVersion(pfrom, connman, GetAdjustedTime());\n \n-        pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n+        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+\n+        pfrom->nServices = nServices;\n+        pfrom->addrLocal = addrMe;\n+        pfrom->strSubVer = strSubVer;\n+        pfrom->cleanSubVer = SanitizeString(strSubVer);\n+        pfrom->nStartingHeight = nStartingHeight;\n+        pfrom->fClient = !(nServices & NODE_NETWORK);\n+        {\n+            LOCK(pfrom->cs_filter);\n+            pfrom->fRelayTxes = fRelay; // set to true after we get the first filter* message\n+        }\n+\n+        // Change version\n+        pfrom->SetSendVersion(nSendVersion);\n+        pfrom->nVersion = nVersion;\n+        pfrom->fSuccessfullyConnected = true;\n \n-        if((pfrom->nServices & NODE_WITNESS))\n+        if((nServices & NODE_WITNESS))\n         {\n             LOCK(cs_main);\n             State(pfrom->GetId())->fHaveWitness = true;\n@@ -1276,12 +1291,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n         }\n \n-        // Change version\n-        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n-        int nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n-        pfrom->nVersion = nVersion;\n-        pfrom->SetSendVersion(nSendVersion);\n-\n         if (!pfrom->fInbound)\n         {\n             // Advertise our address\n@@ -1309,8 +1318,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             connman.MarkAddressGood(pfrom->addr);\n         }\n \n-        pfrom->fSuccessfullyConnected = true;\n-\n         std::string remoteAddr;\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n@@ -1352,7 +1359,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n-        pfrom->SetRecvVersion(std::min(pfrom->nVersion, PROTOCOL_VERSION));\n+        pfrom->SetRecvVersion(std::min(pfrom->nVersion.load(), PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound) {\n             // Mark this node as currently connected, so we update its timestamp later."
      }
    ]
  },
  {
    "sha": "12752af0cc99745d6273ef072645d999c26a9ef7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjc1MmFmMGNjOTk3NDVkNjI3M2VmMDcyNjQ1ZDk5OWMyNmE5ZWY3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-21T01:34:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:14:16Z"
      },
      "message": "net: don't run callbacks on nodes that haven't completed the version handshake\n\nSince ForEach* are can be used to send messages to  all nodes, the caller may\nend up sending a message before the version handshake is complete. To limit\nthis, filter out these nodes. While we're at it, may as well filter out\ndisconnected nodes as well.\n\nDelete unused methods rather than updating them.",
      "tree": {
        "sha": "a7e0a2f8beec66f4486fef0ced9450a16b616731",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7e0a2f8beec66f4486fef0ced9450a16b616731"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12752af0cc99745d6273ef072645d999c26a9ef7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12752af0cc99745d6273ef072645d999c26a9ef7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12752af0cc99745d6273ef072645d999c26a9ef7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12752af0cc99745d6273ef072645d999c26a9ef7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2046617b5e06ddb7f960b28219c155995542f029",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2046617b5e06ddb7f960b28219c155995542f029",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2046617b5e06ddb7f960b28219c155995542f029"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 25,
      "deletions": 57
    },
    "files": [
      {
        "sha": "19358dd5b795a1632c07711edaff1e1ebc6c8945",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=12752af0cc99745d6273ef072645d999c26a9ef7",
        "patch": "@@ -2630,6 +2630,11 @@ void CNode::AskFor(const CInv& inv)\n     mapAskFor.insert(std::make_pair(nRequestTime, inv));\n }\n \n+bool CConnman::NodeFullyConnected(const CNode* pnode)\n+{\n+    return pnode && pnode->fSuccessfullyConnected && !pnode->fDisconnect;\n+}\n+\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n@@ -2680,7 +2685,7 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n             break;\n         }\n     }\n-    return found != nullptr && func(found);\n+    return found != nullptr && NodeFullyConnected(found) && func(found);\n }\n \n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {"
      },
      {
        "sha": "05f178f9c50faa55d2ae5ef10f6eee0de52d9c06",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 19,
        "deletions": 56,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12752af0cc99745d6273ef072645d999c26a9ef7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=12752af0cc99745d6273ef072645d999c26a9ef7",
        "patch": "@@ -161,85 +161,45 @@ class CConnman\n \n     void PushMessage(CNode* pnode, CSerializedNetMsg&& msg);\n \n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func)\n-    {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func) const\n-    {\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post)\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post) const\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n     template<typename Callable>\n     void ForEachNode(Callable&& func)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable>\n     void ForEachNode(Callable&& func) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n@@ -372,6 +332,9 @@ class CConnman\n     void RecordBytesRecv(uint64_t bytes);\n     void RecordBytesSent(uint64_t bytes);\n \n+    // Whether the node should be passed out in ForEach* callbacks\n+    static bool NodeFullyConnected(const CNode* pnode);\n+\n     // Network usage totals\n     CCriticalSection cs_totalBytesRecv;\n     CCriticalSection cs_totalBytesSent;"
      }
    ]
  },
  {
    "sha": "7a8c2519015650acd51eaf42719f04e53f839bbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YThjMjUxOTAxNTY1MGFjZDUxZWFmNDI3MTlmMDRlNTNmODM5YmJl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-26T17:35:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:14:16Z"
      },
      "message": "net: Disallow sending messages until the version handshake is complete\n\nThis is a change in behavior, though it's much more sane now than before.",
      "tree": {
        "sha": "a0dde75654c96f4c40654e083217d4c63fc7f747",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0dde75654c96f4c40654e083217d4c63fc7f747"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a8c2519015650acd51eaf42719f04e53f839bbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8c2519015650acd51eaf42719f04e53f839bbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8c2519015650acd51eaf42719f04e53f839bbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8c2519015650acd51eaf42719f04e53f839bbe/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12752af0cc99745d6273ef072645d999c26a9ef7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12752af0cc99745d6273ef072645d999c26a9ef7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12752af0cc99745d6273ef072645d999c26a9ef7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a7acd6edffd13a4d061c36d81d35b8aaa616a757",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a8c2519015650acd51eaf42719f04e53f839bbe/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a8c2519015650acd51eaf42719f04e53f839bbe/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7a8c2519015650acd51eaf42719f04e53f839bbe",
        "patch": "@@ -1277,7 +1277,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         // Change version\n         pfrom->SetSendVersion(nSendVersion);\n         pfrom->nVersion = nVersion;\n-        pfrom->fSuccessfullyConnected = true;\n \n         if((nServices & NODE_WITNESS))\n         {\n@@ -1387,6 +1386,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             nCMPCTBLOCKVersion = 1;\n             connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n+        pfrom->fSuccessfullyConnected = true;\n     }\n \n \n@@ -2725,8 +2725,8 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n-        // Don't send anything until we get its version message\n-        if (pto->nVersion == 0 || pto->fDisconnect)\n+        // Don't send anything until the version handshake is complete\n+        if (!pto->fSuccessfullyConnected || pto->fDisconnect)\n             return true;\n \n         // If we get here, the outgoing message serialization version is set and can't change."
      },
      {
        "sha": "a8f09ba6aef7a74d5b6c4a46fd2fa2803ec92fce",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a8c2519015650acd51eaf42719f04e53f839bbe/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a8c2519015650acd51eaf42719f04e53f839bbe/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=7a8c2519015650acd51eaf42719f04e53f839bbe",
        "patch": "@@ -55,6 +55,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n@@ -65,6 +66,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n     dummyNode2.nVersion = 1;\n+    dummyNode2.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n@@ -85,6 +87,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100);\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n@@ -110,6 +113,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode, *connman);\n     dummyNode.nVersion = 1;\n+    dummyNode.fSuccessfullyConnected = true;\n \n     Misbehaving(dummyNode.GetId(), 100);\n     SendMessages(&dummyNode, *connman, interruptDummy);"
      }
    ]
  },
  {
    "sha": "08bb6f4ed48359aedd869450b99799b9c734084b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGJiNmY0ZWQ0ODM1OWFlZGQ4Njk0NTBiOTk3OTliOWM3MzQwODRi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T19:33:41Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-02T21:14:16Z"
      },
      "message": "net: log an error rather than asserting if send version is misused\n\nAlso cleaned up the comments and moved from the header to the .cpp so that\nlogging headers aren't needed from net.h",
      "tree": {
        "sha": "57b415e1f950001d44192ec2d071875661a27f19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57b415e1f950001d44192ec2d071875661a27f19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08bb6f4ed48359aedd869450b99799b9c734084b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bb6f4ed48359aedd869450b99799b9c734084b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08bb6f4ed48359aedd869450b99799b9c734084b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bb6f4ed48359aedd869450b99799b9c734084b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a8c2519015650acd51eaf42719f04e53f839bbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8c2519015650acd51eaf42719f04e53f839bbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8c2519015650acd51eaf42719f04e53f839bbe"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 29,
      "deletions": 19
    },
    "files": [
      {
        "sha": "db914096f8896c52b65fb723c417570c83348eec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=08bb6f4ed48359aedd869450b99799b9c734084b",
        "patch": "@@ -689,6 +689,33 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     return true;\n }\n \n+void CNode::SetSendVersion(int nVersionIn)\n+{\n+    // Send version may only be changed in the version message, and\n+    // only one version message is allowed per session. We can therefore\n+    // treat this value as const and even atomic as long as it's only used\n+    // once a version message has been successfully processed. Any attempt to\n+    // set this twice is an error.\n+    if (nSendVersion != 0) {\n+        error(\"Send version already set for node: %i. Refusing to change from %i to %i\", id, nSendVersion, nVersionIn);\n+    } else {\n+        nSendVersion = nVersionIn;\n+    }\n+}\n+\n+int CNode::GetSendVersion() const\n+{\n+    // The send version should always be explicitly set to\n+    // INIT_PROTO_VERSION rather than using this value until SetSendVersion\n+    // has been called.\n+    if (nSendVersion == 0) {\n+        error(\"Requesting unset send version for node: %i. Using %i\", id, INIT_PROTO_VERSION);\n+        return INIT_PROTO_VERSION;\n+    }\n+    return nSendVersion;\n+}\n+\n+\n int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n {\n     // copy data to temporary parsing buffer"
      },
      {
        "sha": "1e3033785ef40401fb6d8f68bb21bcd9528968a0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 19,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08bb6f4ed48359aedd869450b99799b9c734084b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=08bb6f4ed48359aedd869450b99799b9c734084b",
        "patch": "@@ -723,25 +723,8 @@ class CNode\n     {\n         return nRecvVersion;\n     }\n-    void SetSendVersion(int nVersionIn)\n-    {\n-        // Send version may only be changed in the version message, and\n-        // only one version message is allowed per session. We can therefore\n-        // treat this value as const and even atomic as long as it's only used\n-        // once the handshake is complete. Any attempt to set this twice is an\n-        // error.\n-        assert(nSendVersion == 0);\n-        nSendVersion = nVersionIn;\n-    }\n-\n-    int GetSendVersion() const\n-    {\n-        // The send version should always be explicitly set to\n-        // INIT_PROTO_VERSION rather than using this value until the handshake\n-        // is complete.\n-        assert(nSendVersion != 0);\n-        return nSendVersion;\n-    }\n+    void SetSendVersion(int nVersionIn);\n+    int GetSendVersion() const;\n \n     CNode* AddRef()\n     {"
      }
    ]
  },
  {
    "sha": "7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWEwYWQ1MzlmZjgzZjA5Y2Y2MTdhOWZiN2M0ZDc3NGU0NWVmZGMw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-06-06T18:45:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:32:27Z"
      },
      "message": "Fail in DecodeHexTx if there is extra data at the end",
      "tree": {
        "sha": "341c591b9f6a281ec39ffa612808c9780b8b12a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/341c591b9f6a281ec39ffa612808c9780b8b12a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a8d667e3bc74e71824fd919beaf81e7e73053022",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
        "patch": "@@ -111,6 +111,8 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTry\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     try {\n         ssData >> tx;\n+        if (!ssData.empty())\n+            return false;\n     }\n     catch (const std::exception&) {\n         return false;"
      }
    ]
  },
  {
    "sha": "922bea90c274d45b13812a031242964aa15b6c1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjJiZWE5MGMyNzRkNDViMTM4MTJhMDMxMjQyOTY0YWExNWI2YzFk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-01-28T16:32:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:32:27Z"
      },
      "message": "Better handle invalid parameters to signrawtransaction\n\nThis silently skips trying to merge signatures from inputs which\ndo not exist from transactions provided to signrawtransaction,\ninstead of hitting an assert.",
      "tree": {
        "sha": "346f2e9d3d3ec0179eecfe2a3e50d7a76a1dae94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/346f2e9d3d3ec0179eecfe2a3e50d7a76a1dae94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/922bea90c274d45b13812a031242964aa15b6c1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/922bea90c274d45b13812a031242964aa15b6c1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/922bea90c274d45b13812a031242964aa15b6c1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/922bea90c274d45b13812a031242964aa15b6c1d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ea0ad539ff83f09cf617a9fb7c4d774e45efdc0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "21396ebb09b78f9e625846adeb5763a778fa2b58",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/922bea90c274d45b13812a031242964aa15b6c1d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/922bea90c274d45b13812a031242964aa15b6c1d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=922bea90c274d45b13812a031242964aa15b6c1d",
        "patch": "@@ -835,7 +835,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+            if (txv.vin.size() > i) {\n+                sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+            }\n         }\n \n         UpdateTransaction(mergedTx, i, sigdata);"
      }
    ]
  },
  {
    "sha": "691710a648c54c96c302ebbe666da85cfaada5f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTE3MTBhNjQ4YzU0Yzk2YzMwMmViYmU2NjZkYTg1Y2ZhYWRhNWY5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T20:11:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:32:28Z"
      },
      "message": "[qa] Test that decoderawtransaction throws with extra data appended",
      "tree": {
        "sha": "363c7864c6279624bd5d4a2c948c0aa461d30dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/363c7864c6279624bd5d4a2c948c0aa461d30dc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/691710a648c54c96c302ebbe666da85cfaada5f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691710a648c54c96c302ebbe666da85cfaada5f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/691710a648c54c96c302ebbe666da85cfaada5f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691710a648c54c96c302ebbe666da85cfaada5f9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "922bea90c274d45b13812a031242964aa15b6c1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/922bea90c274d45b13812a031242964aa15b6c1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/922bea90c274d45b13812a031242964aa15b6c1d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "009f01f79b53007ebc6d068b405f5d9c71f7c283",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/691710a648c54c96c302ebbe666da85cfaada5f9/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/691710a648c54c96c302ebbe666da85cfaada5f9/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=691710a648c54c96c302ebbe666da85cfaada5f9",
        "patch": "@@ -78,6 +78,16 @@ def script_verification_error_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+\n+        # Make sure decoderawtransaction is at least marginally sane\n+        decodedRawTx = self.nodes[0].decoderawtransaction(rawTx)\n+        for i, inp in enumerate(inputs):\n+            assert_equal(decodedRawTx[\"vin\"][i][\"txid\"], inp[\"txid\"])\n+            assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n+\n+        # Make sure decoderawtransaction throws if there is extra data\n+        assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+\n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n \n         # 3) The transaction has no complete set of signatures"
      }
    ]
  },
  {
    "sha": "ec4f7e433e5b1724ca427e73fb264de693e82235",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzRmN2U0MzNlNWIxNzI0Y2E0MjdlNzNmYjI2NGRlNjkzZTgyMjM1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T21:24:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:32:28Z"
      },
      "message": "[qa] Add second input to signrawtransaction test case",
      "tree": {
        "sha": "d4ffb1e47d199f1ef5749a878010414da97c3f6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4ffb1e47d199f1ef5749a878010414da97c3f6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec4f7e433e5b1724ca427e73fb264de693e82235",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec4f7e433e5b1724ca427e73fb264de693e82235",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec4f7e433e5b1724ca427e73fb264de693e82235",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec4f7e433e5b1724ca427e73fb264de693e82235/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "691710a648c54c96c302ebbe666da85cfaada5f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/691710a648c54c96c302ebbe666da85cfaada5f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/691710a648c54c96c302ebbe666da85cfaada5f9"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1705ab96c41dcb262a6d99952893fbfe21919db2",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec4f7e433e5b1724ca427e73fb264de693e82235/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec4f7e433e5b1724ca427e73fb264de693e82235/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=ec4f7e433e5b1724ca427e73fb264de693e82235",
        "patch": "@@ -26,12 +26,14 @@ def successful_signing_test(self):\n \n         1) The transaction has a complete set of signatures\n         2) No script verification error occurred\"\"\"\n-        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N']\n+        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N', 'cVKpPfVKSJxKqVpE9awvXNWuLHCa5j5tiE7K6zbUSptFpTEtiFrA']\n \n         inputs = [\n-            # Valid pay-to-pubkey script\n+            # Valid pay-to-pubkey scripts\n             {'txid': '9b907ef1e3c26fc71fe4a4b3580bc75264112f95050014157059c736f0202e71', 'vout': 0,\n-             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'}\n+             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'},\n+            {'txid': '83a4f6a6b73660e13ee6cb3c6063fa3759c50c9b7521d0536022961898f4fb02', 'vout': 0,\n+             'scriptPubKey': '76a914669b857c03a5ed269d5d85a1ffac9ed5d663072788ac'},\n         ]\n \n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}"
      }
    ]
  },
  {
    "sha": "4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWMwNTdkZmE3MmZiYjkxMGZlYzY5MzA1YWYxZmY2ZDVlMDNjYTMw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-02T22:34:22Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-02T22:34:22Z"
      },
      "message": "[wallet] Set correct metadata on bumpfee wallet transactions\n\nPreserve comment, order form, and account strings from the original wallet\ntransaction. Also set fTimeReceivedIsTxTime and fFromMe fields for consistency\nwith CWallet::CreateTransaction. The latter two fields don't influence current\nwallet behavior, but do record that the transaction originated in the wallet\ninstead of coming from the network or sendrawtransaction.",
      "tree": {
        "sha": "5af99d42db58e14be8b403783411c0af67dfd3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5af99d42db58e14be8b403783411c0af67dfd3c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ac282796c1460e717485d1798fea4e35197691fe",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
        "patch": "@@ -69,6 +69,7 @@ def run_test(self):\n         test_rebumping(rbf_node, dest_address)\n         test_rebumping_not_replaceable(rbf_node, dest_address)\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n+        test_bumpfee_metadata(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n         print(\"Success\")\n \n@@ -257,6 +258,14 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n             if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)\n \n \n+def test_bumpfee_metadata(rbf_node, dest_address):\n+    rbfid = rbf_node.sendtoaddress(dest_address, 0.00090000, \"comment value\", \"to value\")\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    bumped_wtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n+    assert_equal(bumped_wtx[\"comment\"], \"comment value\")\n+    assert_equal(bumped_wtx[\"to\"], \"to value\")\n+\n+\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     rbf_node.walletlock()"
      },
      {
        "sha": "45b572aa2e2e6cff596552d8dd332728644c4d27",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ec057dfa72fbb910fec69305af1ff6d5e03ca30/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
        "patch": "@@ -2944,7 +2944,12 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // commit/broadcast the tx\n     CReserveKey reservekey(pwalletMain);\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue = wtx.mapValue;\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    wtxBumped.vOrderForm = wtx.vOrderForm;\n+    wtxBumped.strFromAccount = wtx.strFromAccount;\n+    wtxBumped.fTimeReceivedIsTxTime = true;\n+    wtxBumped.fFromMe = true;\n     CValidationState state;\n     if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen."
      }
    ]
  },
  {
    "sha": "6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGJmZTA4YzI5NTM1YmI3YjAzNTlkZThmZTIyYWNlZGNiZjM1MzJh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T21:24:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T22:40:49Z"
      },
      "message": "[qa] test signrawtransaction merge with missing inputs",
      "tree": {
        "sha": "578be411a76bd269454aac797efe135d7e376cda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/578be411a76bd269454aac797efe135d7e376cda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbfe08c29535bb7b0359de8fe22acedcbf3532a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec4f7e433e5b1724ca427e73fb264de693e82235",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec4f7e433e5b1724ca427e73fb264de693e82235",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec4f7e433e5b1724ca427e73fb264de693e82235"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "109312bd5f2dfd4b05a6bcda0a5c068c1e21b4f8",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dbfe08c29535bb7b0359de8fe22acedcbf3532a/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dbfe08c29535bb7b0359de8fe22acedcbf3532a/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
        "patch": "@@ -48,6 +48,22 @@ def successful_signing_test(self):\n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n+        # Check that signrawtransaction doesn't blow up on garbage merge attempts\n+        dummyTxInconsistent = self.nodes[0].createrawtransaction([inputs[0]], outputs)\n+        rawTxUnsigned = self.nodes[0].signrawtransaction(rawTx + dummyTxInconsistent, inputs)\n+\n+        assert 'complete' in rawTxUnsigned\n+        assert_equal(rawTxUnsigned['complete'], False)\n+\n+        # Check that signrawtransaction properly merges unsigned and signed txn, even with garbage in the middle\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTxUnsigned[\"hex\"] + dummyTxInconsistent + rawTxSigned[\"hex\"], inputs)\n+\n+        assert 'complete' in rawTxSigned2\n+        assert_equal(rawTxSigned2['complete'], True)\n+\n+        assert 'errors' not in rawTxSigned2\n+\n+\n     def script_verification_error_test(self):\n         \"\"\"Creates and signs a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n "
      }
    ]
  },
  {
    "sha": "fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDEzZWNhMTQ3YmU4MGYzZWJkMWE1YTFkYjFjZTc1YmJlZWIxOTUz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T01:03:46Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T01:03:46Z"
      },
      "message": "Lock cs_vSend and cs_inventory in a consistent order even in TRY",
      "tree": {
        "sha": "20264c24f6a72441d97670f977f9a8cc86ed89aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20264c24f6a72441d97670f977f9a8cc86ed89aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5cddc6f44dcc026a342f0d90643ec39441207c3a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
        "patch": "@@ -1070,12 +1070,13 @@ void CConnman::ThreadSocketHandler()\n                 {\n                     bool fDelete = false;\n                     {\n-                        TRY_LOCK(pnode->cs_vSend, lockSend);\n-                        if (lockSend)\n+                        TRY_LOCK(pnode->cs_inventory, lockInv);\n+                        if (lockInv)\n                         {\n-                                TRY_LOCK(pnode->cs_inventory, lockInv);\n-                                if (lockInv)\n-                                    fDelete = true;\n+                            TRY_LOCK(pnode->cs_vSend, lockSend);\n+                            if (lockSend) {\n+                                fDelete = true;\n+                            }\n                         }\n                     }\n                     if (fDelete)"
      }
    ]
  },
  {
    "sha": "8465631845eac3db834942a4feb50f65c3401c68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDY1NjMxODQ1ZWFjM2RiODM0OTQyYTRmZWI1MGY2NWMzNDAxYzY4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T03:22:01Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T03:31:27Z"
      },
      "message": "Always enforce lock strict lock ordering (try or not)",
      "tree": {
        "sha": "cdd5873fa56481570050a64ef6216cf5a880e5de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdd5873fa56481570050a64ef6216cf5a880e5de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8465631845eac3db834942a4feb50f65c3401c68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8465631845eac3db834942a4feb50f65c3401c68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8465631845eac3db834942a4feb50f65c3401c68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8465631845eac3db834942a4feb50f65c3401c68/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd13eca147be80f3ebd1a5a1db1ce75bbeeb1953"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 1,
      "deletions": 25
    },
    "files": [
      {
        "sha": "25773f08e9830f69322cff0294ec5fe2cdb986b8",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 25,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8465631845eac3db834942a4feb50f65c3401c68/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8465631845eac3db834942a4feb50f65c3401c68/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=8465631845eac3db834942a4feb50f65c3401c68",
        "patch": "@@ -77,52 +77,28 @@ boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n-    // We attempt to not assert on probably-not deadlocks by assuming that\n-    // a try lock will immediately have otherwise bailed if it had\n-    // failed to get the lock\n-    // We do this by, for the locks which triggered the potential deadlock,\n-    // in either lockorder, checking that the second of the two which is locked\n-    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n-    bool firstLocked = false;\n-    bool secondLocked = false;\n-    bool onlyMaybeDeadlock = false;\n-\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    firstLocked = false;\n-    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    assert(onlyMaybeDeadlock);\n+    assert(false);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)"
      }
    ]
  },
  {
    "sha": "7b2d96b634f9fd283480caf3bece56138d0587e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjJkOTZiNjM0ZjlmZDI4MzQ4MGNhZjNiZWNlNTYxMzhkMDU4N2Uz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T18:48:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-03T18:50:17Z"
      },
      "message": "Access WorkQueue::running only within the cs lock.\n\nThis removes a \"race\" between Interrupt() and Run(), though it\nshould not effect any of our supported platforms.",
      "tree": {
        "sha": "d98da761bff6f498388ea56ef6d0b11649a92881",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d98da761bff6f498388ea56ef6d0b11649a92881"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b2d96b634f9fd283480caf3bece56138d0587e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b2d96b634f9fd283480caf3bece56138d0587e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b2d96b634f9fd283480caf3bece56138d0587e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b2d96b634f9fd283480caf3bece56138d0587e3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e1763c6ad276ca3b00b4a707f7b8a8af2d90bbc4",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b2d96b634f9fd283480caf3bece56138d0587e3/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b2d96b634f9fd283480caf3bece56138d0587e3/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=7b2d96b634f9fd283480caf3bece56138d0587e3",
        "patch": "@@ -118,7 +118,7 @@ class WorkQueue\n     void Run()\n     {\n         ThreadCounter count(*this);\n-        while (running) {\n+        while (true) {\n             std::unique_ptr<WorkItem> i;\n             {\n                 std::unique_lock<std::mutex> lock(cs);"
      }
    ]
  },
  {
    "sha": "a3511628d0976c15ab71c244853cdda4b25e2ad4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzUxMTYyOGQwOTc2YzE1YWI3MWMyNDQ4NTNjZGRhNGIyNWUyYWQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:37:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:37:26Z"
      },
      "message": "Merge #9679: Access WorkQueue::running only within the cs lock\n\n7b2d96b Access WorkQueue::running only within the cs lock. (Matt Corallo)",
      "tree": {
        "sha": "d98da761bff6f498388ea56ef6d0b11649a92881",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d98da761bff6f498388ea56ef6d0b11649a92881"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3511628d0976c15ab71c244853cdda4b25e2ad4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYla7mAAoJEHSBCwEjRsmmzsQIAKHdryMcI1s8Q14W52QomRIp\nPJ4G4n4H2VC9Da2hOmnqErsZ45Kp1xhdHcYYZ0ob3PXbFO/GH4XqPSps8UlyQm8H\nTwW0xZgyE6Fyy4AS+kIjRPjl34mjso4oN+H5+TlD0NPTRbFhEal73+66di6qSIQR\n/+5cvLRQQ11uyW3d8kicAzeqqM0Cn8bxc8PjSeRR/a2EVh5iZ4JnB9gUvkT/qmFU\nY3HzK5sfgfPKC7uznVabsxY1VvAInPNLIF9Hzi6VvpegrqIMWL8yA2R4tVG3+WHy\npwBTAnMBfCqhfUp6tDz8+ZegZYT9H8LarLLYQbfEkUxKZ3sY6LV5zAR+OEnuRTM=\n=txox\n-----END PGP SIGNATURE-----",
        "payload": "tree d98da761bff6f498388ea56ef6d0b11649a92881\nparent 1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce\nparent 7b2d96b634f9fd283480caf3bece56138d0587e3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486204634 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486204646 +0100\n\nMerge #9679: Access WorkQueue::running only within the cs lock\n\n7b2d96b Access WorkQueue::running only within the cs lock. (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3511628d0976c15ab71c244853cdda4b25e2ad4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3511628d0976c15ab71c244853cdda4b25e2ad4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3511628d0976c15ab71c244853cdda4b25e2ad4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      },
      {
        "sha": "7b2d96b634f9fd283480caf3bece56138d0587e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b2d96b634f9fd283480caf3bece56138d0587e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b2d96b634f9fd283480caf3bece56138d0587e3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e1763c6ad276ca3b00b4a707f7b8a8af2d90bbc4",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3511628d0976c15ab71c244853cdda4b25e2ad4/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3511628d0976c15ab71c244853cdda4b25e2ad4/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=a3511628d0976c15ab71c244853cdda4b25e2ad4",
        "patch": "@@ -118,7 +118,7 @@ class WorkQueue\n     void Run()\n     {\n         ThreadCounter count(*this);\n-        while (running) {\n+        while (true) {\n             std::unique_ptr<WorkItem> i;\n             {\n                 std::unique_lock<std::mutex> lock(cs);"
      }
    ]
  },
  {
    "sha": "496691741dfe252ff477913a89e5363aa7030d71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTY2OTE3NDFkZmUyNTJmZjQ3NzkxM2E4OWU1MzYzYWE3MDMwZDcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:37:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:38:02Z"
      },
      "message": "Merge #9609: net: fix remaining net assertions\n\n08bb6f4 net: log an error rather than asserting if send version is misused (Cory Fields)\n7a8c251 net: Disallow sending messages until the version handshake is complete (Cory Fields)\n12752af net: don't run callbacks on nodes that haven't completed the version handshake (Cory Fields)\n2046617 net: deserialize the entire version message locally (Cory Fields)\n80ff034 Dont deserialize nVersion into CNode, should fix #9212 (Matt Corallo)",
      "tree": {
        "sha": "22dcb0fe82ecb66a9f7dcab96e45312582c71a6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22dcb0fe82ecb66a9f7dcab96e45312582c71a6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/496691741dfe252ff477913a89e5363aa7030d71",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYla8KAAoJEHSBCwEjRsmm+jIIAJVmUnGgRV5bZzvYNvulbbTy\nMGfqrqET1Kbf205zhIRFqX+0VLi1sR3gvT+3LhjvWBW1wYErmJHVXT1VAwT0You4\nHO/YI607XlTyhvNYQGqjN39eEq08+atMuPQql2NIPGjCvX2BFQwKveIXC7n24ETM\nA3F8EKDaLu0P0TBPqhONZ0WQ2ZGT8K5ct9/GP5xb+Jvr9ODLDy7sH6zqvokObFU6\nmPMG9mxtcBz63nzZ4VVD6alm2q8GZrjVs6/VLKRJli09XIODHc+YQtaAzxjpo73Q\nfSf1aVSwIRTwr3eSgbIlwpIl/AuwpbpY9dYoNlLFn9LnOgZA4NG9RwHkAYblyx0=\n=s1aq\n-----END PGP SIGNATURE-----",
        "payload": "tree 22dcb0fe82ecb66a9f7dcab96e45312582c71a6d\nparent a3511628d0976c15ab71c244853cdda4b25e2ad4\nparent 08bb6f4ed48359aedd869450b99799b9c734084b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486204677 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486204682 +0100\n\nMerge #9609: net: fix remaining net assertions\n\n08bb6f4 net: log an error rather than asserting if send version is misused (Cory Fields)\n7a8c251 net: Disallow sending messages until the version handshake is complete (Cory Fields)\n12752af net: don't run callbacks on nodes that haven't completed the version handshake (Cory Fields)\n2046617 net: deserialize the entire version message locally (Cory Fields)\n80ff034 Dont deserialize nVersion into CNode, should fix #9212 (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/496691741dfe252ff477913a89e5363aa7030d71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/496691741dfe252ff477913a89e5363aa7030d71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/496691741dfe252ff477913a89e5363aa7030d71/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3511628d0976c15ab71c244853cdda4b25e2ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3511628d0976c15ab71c244853cdda4b25e2ad4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3511628d0976c15ab71c244853cdda4b25e2ad4"
      },
      {
        "sha": "08bb6f4ed48359aedd869450b99799b9c734084b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08bb6f4ed48359aedd869450b99799b9c734084b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08bb6f4ed48359aedd869450b99799b9c734084b"
      }
    ],
    "stats": {
      "total": 213,
      "additions": 102,
      "deletions": 111
    },
    "files": [
      {
        "sha": "db914096f8896c52b65fb723c417570c83348eec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 1,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496691741dfe252ff477913a89e5363aa7030d71/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496691741dfe252ff477913a89e5363aa7030d71/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=496691741dfe252ff477913a89e5363aa7030d71",
        "patch": "@@ -689,6 +689,33 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     return true;\n }\n \n+void CNode::SetSendVersion(int nVersionIn)\n+{\n+    // Send version may only be changed in the version message, and\n+    // only one version message is allowed per session. We can therefore\n+    // treat this value as const and even atomic as long as it's only used\n+    // once a version message has been successfully processed. Any attempt to\n+    // set this twice is an error.\n+    if (nSendVersion != 0) {\n+        error(\"Send version already set for node: %i. Refusing to change from %i to %i\", id, nSendVersion, nVersionIn);\n+    } else {\n+        nSendVersion = nVersionIn;\n+    }\n+}\n+\n+int CNode::GetSendVersion() const\n+{\n+    // The send version should always be explicitly set to\n+    // INIT_PROTO_VERSION rather than using this value until SetSendVersion\n+    // has been called.\n+    if (nSendVersion == 0) {\n+        error(\"Requesting unset send version for node: %i. Using %i\", id, INIT_PROTO_VERSION);\n+        return INIT_PROTO_VERSION;\n+    }\n+    return nSendVersion;\n+}\n+\n+\n int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n {\n     // copy data to temporary parsing buffer\n@@ -2630,6 +2657,11 @@ void CNode::AskFor(const CInv& inv)\n     mapAskFor.insert(std::make_pair(nRequestTime, inv));\n }\n \n+bool CConnman::NodeFullyConnected(const CNode* pnode)\n+{\n+    return pnode && pnode->fSuccessfullyConnected && !pnode->fDisconnect;\n+}\n+\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n@@ -2680,7 +2712,7 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n             break;\n         }\n     }\n-    return found != nullptr && func(found);\n+    return found != nullptr && NodeFullyConnected(found) && func(found);\n }\n \n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {"
      },
      {
        "sha": "1e3033785ef40401fb6d8f68bb21bcd9528968a0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 23,
        "deletions": 77,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496691741dfe252ff477913a89e5363aa7030d71/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496691741dfe252ff477913a89e5363aa7030d71/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=496691741dfe252ff477913a89e5363aa7030d71",
        "patch": "@@ -161,85 +161,45 @@ class CConnman\n \n     void PushMessage(CNode* pnode, CSerializedNetMsg&& msg);\n \n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func)\n-    {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable>\n-    bool ForEachNodeContinueIf(Callable&& func) const\n-    {\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!func(node))\n-                return false;\n-        return true;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post)\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n-    template<typename Callable, typename CallableAfter>\n-    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post) const\n-    {\n-        bool ret = true;\n-        LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            if(!pre(node)) {\n-                ret = false;\n-                break;\n-            }\n-        post();\n-        return ret;\n-    };\n-\n     template<typename Callable>\n     void ForEachNode(Callable&& func)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable>\n     void ForEachNode(Callable&& func) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            func(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                func(node);\n+        }\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n     {\n         LOCK(cs_vNodes);\n-        for (const auto& node : vNodes)\n-            pre(node);\n+        for (auto&& node : vNodes) {\n+            if (NodeFullyConnected(node))\n+                pre(node);\n+        }\n         post();\n     };\n \n@@ -372,6 +332,9 @@ class CConnman\n     void RecordBytesRecv(uint64_t bytes);\n     void RecordBytesSent(uint64_t bytes);\n \n+    // Whether the node should be passed out in ForEach* callbacks\n+    static bool NodeFullyConnected(const CNode* pnode);\n+\n     // Network usage totals\n     CCriticalSection cs_totalBytesRecv;\n     CCriticalSection cs_totalBytesSent;\n@@ -627,7 +590,7 @@ class CNode\n     const CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n-    int nVersion;\n+    std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n@@ -639,7 +602,7 @@ class CNode\n     bool fAddnode;\n     bool fClient;\n     const bool fInbound;\n-    bool fSuccessfullyConnected;\n+    std::atomic_bool fSuccessfullyConnected;\n     std::atomic_bool fDisconnect;\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n@@ -760,25 +723,8 @@ class CNode\n     {\n         return nRecvVersion;\n     }\n-    void SetSendVersion(int nVersionIn)\n-    {\n-        // Send version may only be changed in the version message, and\n-        // only one version message is allowed per session. We can therefore\n-        // treat this value as const and even atomic as long as it's only used\n-        // once the handshake is complete. Any attempt to set this twice is an\n-        // error.\n-        assert(nSendVersion == 0);\n-        nSendVersion = nVersionIn;\n-    }\n-\n-    int GetSendVersion() const\n-    {\n-        // The send version should always be explicitly set to\n-        // INIT_PROTO_VERSION rather than using this value until the handshake\n-        // is complete.\n-        assert(nSendVersion != 0);\n-        return nSendVersion;\n-    }\n+    void SetSendVersion(int nVersionIn);\n+    int GetSendVersion() const;\n \n     CNode* AddRef()\n     {"
      },
      {
        "sha": "a7acd6edffd13a4d061c36d81d35b8aaa616a757",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 33,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496691741dfe252ff477913a89e5363aa7030d71/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496691741dfe252ff477913a89e5363aa7030d71/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=496691741dfe252ff477913a89e5363aa7030d71",
        "patch": "@@ -1199,50 +1199,51 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         CAddress addrFrom;\n         uint64_t nNonce = 1;\n         uint64_t nServiceInt;\n-        vRecv >> pfrom->nVersion >> nServiceInt >> nTime >> addrMe;\n-        pfrom->nServices = ServiceFlags(nServiceInt);\n+        ServiceFlags nServices;\n+        int nVersion;\n+        int nSendVersion;\n+        std::string strSubVer;\n+        int nStartingHeight = -1;\n+        bool fRelay = true;\n+\n+        vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n+        nSendVersion = std::min(nVersion, PROTOCOL_VERSION);\n+        nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n-            connman.SetServices(pfrom->addr, pfrom->nServices);\n+            connman.SetServices(pfrom->addr, nServices);\n         }\n-        if (pfrom->nServicesExpected & ~pfrom->nServices)\n+        if (pfrom->nServicesExpected & ~nServices)\n         {\n-            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, pfrom->nServices, pfrom->nServicesExpected);\n+            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, nServices, pfrom->nServicesExpected);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n                                strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n \n-        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n+        if (nVersion < MIN_PEER_PROTO_VERSION)\n         {\n             // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n+            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, nVersion);\n             connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             pfrom->fDisconnect = true;\n             return false;\n         }\n \n-        if (pfrom->nVersion == 10300)\n-            pfrom->nVersion = 300;\n+        if (nVersion == 10300)\n+            nVersion = 300;\n         if (!vRecv.empty())\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n-            vRecv >> LIMITED_STRING(pfrom->strSubVer, MAX_SUBVERSION_LENGTH);\n-            pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n+            vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n         }\n         if (!vRecv.empty()) {\n-            vRecv >> pfrom->nStartingHeight;\n+            vRecv >> nStartingHeight;\n         }\n-        {\n-            LOCK(pfrom->cs_filter);\n-            if (!vRecv.empty())\n-                vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n-            else\n-                pfrom->fRelayTxes = true;\n-        }\n-\n+        if (!vRecv.empty())\n+            vRecv >> fRelay;\n         // Disconnect if we connected to ourself\n         if (pfrom->fInbound && !connman.CheckIncomingNonce(nNonce))\n         {\n@@ -1251,7 +1252,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             return true;\n         }\n \n-        pfrom->addrLocal = addrMe;\n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n             SeenLocal(addrMe);\n@@ -1261,9 +1261,24 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         if (pfrom->fInbound)\n             PushNodeVersion(pfrom, connman, GetAdjustedTime());\n \n-        pfrom->fClient = !(pfrom->nServices & NODE_NETWORK);\n+        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n \n-        if((pfrom->nServices & NODE_WITNESS))\n+        pfrom->nServices = nServices;\n+        pfrom->addrLocal = addrMe;\n+        pfrom->strSubVer = strSubVer;\n+        pfrom->cleanSubVer = SanitizeString(strSubVer);\n+        pfrom->nStartingHeight = nStartingHeight;\n+        pfrom->fClient = !(nServices & NODE_NETWORK);\n+        {\n+            LOCK(pfrom->cs_filter);\n+            pfrom->fRelayTxes = fRelay; // set to true after we get the first filter* message\n+        }\n+\n+        // Change version\n+        pfrom->SetSendVersion(nSendVersion);\n+        pfrom->nVersion = nVersion;\n+\n+        if((nServices & NODE_WITNESS))\n         {\n             LOCK(cs_main);\n             State(pfrom->GetId())->fHaveWitness = true;\n@@ -1275,11 +1290,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n         UpdatePreferredDownload(pfrom, State(pfrom->GetId()));\n         }\n \n-        // Change version\n-        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n-        int nSendVersion = std::min(pfrom->nVersion, PROTOCOL_VERSION);\n-        pfrom->SetSendVersion(nSendVersion);\n-\n         if (!pfrom->fInbound)\n         {\n             // Advertise our address\n@@ -1307,8 +1317,6 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             connman.MarkAddressGood(pfrom->addr);\n         }\n \n-        pfrom->fSuccessfullyConnected = true;\n-\n         std::string remoteAddr;\n         if (fLogIPs)\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n@@ -1350,7 +1358,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n-        pfrom->SetRecvVersion(std::min(pfrom->nVersion, PROTOCOL_VERSION));\n+        pfrom->SetRecvVersion(std::min(pfrom->nVersion.load(), PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound) {\n             // Mark this node as currently connected, so we update its timestamp later.\n@@ -1378,6 +1386,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n             nCMPCTBLOCKVersion = 1;\n             connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n+        pfrom->fSuccessfullyConnected = true;\n     }\n \n \n@@ -2716,8 +2725,8 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n-        // Don't send anything until we get its version message\n-        if (pto->nVersion == 0 || pto->fDisconnect)\n+        // Don't send anything until the version handshake is complete\n+        if (!pto->fSuccessfullyConnected || pto->fDisconnect)\n             return true;\n \n         // If we get here, the outgoing message serialization version is set and can't change."
      },
      {
        "sha": "a8f09ba6aef7a74d5b6c4a46fd2fa2803ec92fce",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/496691741dfe252ff477913a89e5363aa7030d71/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/496691741dfe252ff477913a89e5363aa7030d71/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=496691741dfe252ff477913a89e5363aa7030d71",
        "patch": "@@ -55,6 +55,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n@@ -65,6 +66,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n     dummyNode2.nVersion = 1;\n+    dummyNode2.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n@@ -85,6 +87,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100);\n     SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n@@ -110,6 +113,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode, *connman);\n     dummyNode.nVersion = 1;\n+    dummyNode.fSuccessfullyConnected = true;\n \n     Misbehaving(dummyNode.GetId(), 100);\n     SendMessages(&dummyNode, *connman, interruptDummy);"
      }
    ]
  },
  {
    "sha": "7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODIxZGIzMGUxNjE0OWEzZDhiN2Y0NjdhNGU1YWMyNzZhZjZjY2Jk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:39:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-04T10:39:17Z"
      },
      "message": "Merge #9671: Fix super-unlikely race introduced in 236618061a445d2cb11e72\n\n885cfdd Fix super-unlikely race introduced in 236618061a445d2cb11e72 (Matt Corallo)",
      "tree": {
        "sha": "625caa1ca255af87d1e0892d9bec5c8872688db8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/625caa1ca255af87d1e0892d9bec5c8872688db8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYla9VAAoJEHSBCwEjRsmm/LIIAJaEih1U6X0xyMrdm9SLb942\nFEKI1XEXYVRtFZ//G9g/K90dsyAiuEgJiC/7iLuiZPejREOK14ij8LiPtVvM+OHg\ntx2XXSEaDfrnHj5sJNQHISqbDoSK5VtrN2D252uNjBc3c4DJdXGPI3/9fvICLTgv\nIQj13a8150LKFWqjgQa8qgcE66GdW28oSkFxbUGRRrmeQ+yUP1tVpmAXgpY4BR4b\nOMWigzgazdi2dSZC97f/lvkOu0ZEPqdMl8AfUGwo2D0fWQd/qkw87aB2CZ8AsNfy\nHR8rp0sTdJv41k05FcbE9oUFMV2fiUxbS/kvbjN23+iSjf9QGfaEhFxwi+9RDJ4=\n=hgXL\n-----END PGP SIGNATURE-----",
        "payload": "tree 625caa1ca255af87d1e0892d9bec5c8872688db8\nparent 496691741dfe252ff477913a89e5363aa7030d71\nparent 885cfdd2179a2aae733d0690f5a2ef23d181768e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486204752 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486204757 +0100\n\nMerge #9671: Fix super-unlikely race introduced in 236618061a445d2cb11e72\n\n885cfdd Fix super-unlikely race introduced in 236618061a445d2cb11e72 (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "496691741dfe252ff477913a89e5363aa7030d71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/496691741dfe252ff477913a89e5363aa7030d71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/496691741dfe252ff477913a89e5363aa7030d71"
      },
      {
        "sha": "885cfdd2179a2aae733d0690f5a2ef23d181768e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/885cfdd2179a2aae733d0690f5a2ef23d181768e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/885cfdd2179a2aae733d0690f5a2ef23d181768e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1559bd20cdf66c8a9eb10d312fa6ca1d4f72fc08",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7821db30e16149a3d8b7f467a4e5ac276af6ccbd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7821db30e16149a3d8b7f467a4e5ac276af6ccbd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "patch": "@@ -1860,11 +1860,11 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (fAddnode)\n         pnode->fAddnode = true;\n \n+    GetNodeSignals().InitializeNode(pnode, *this);\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n     }\n-    GetNodeSignals().InitializeNode(pnode, *this);\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "2a962d4540a253f63803d1f145fa26b938e69633",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTk2MmQ0NTQwYTI1M2Y2MzgwM2QxZjE0NWZhMjZiOTM4ZTY5NjMz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-04T21:44:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-04T21:44:05Z"
      },
      "message": "Fixup style a bit by moving { to the same line as if statements",
      "tree": {
        "sha": "79ec56379d85434fd8b7672647754fb529b246ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79ec56379d85434fd8b7672647754fb529b246ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a962d4540a253f63803d1f145fa26b938e69633",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962d4540a253f63803d1f145fa26b938e69633",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a962d4540a253f63803d1f145fa26b938e69633",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962d4540a253f63803d1f145fa26b938e69633/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8465631845eac3db834942a4feb50f65c3401c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8465631845eac3db834942a4feb50f65c3401c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8465631845eac3db834942a4feb50f65c3401c68"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "704d3b8d34fd848de48dd3f98d4fc534a5242b7a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a962d4540a253f63803d1f145fa26b938e69633/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a962d4540a253f63803d1f145fa26b938e69633/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2a962d4540a253f63803d1f145fa26b938e69633",
        "patch": "@@ -1066,21 +1066,18 @@ void CConnman::ThreadSocketHandler()\n             BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n-                if (pnode->GetRefCount() <= 0)\n-                {\n+                if (pnode->GetRefCount() <= 0) {\n                     bool fDelete = false;\n                     {\n                         TRY_LOCK(pnode->cs_inventory, lockInv);\n-                        if (lockInv)\n-                        {\n+                        if (lockInv) {\n                             TRY_LOCK(pnode->cs_vSend, lockSend);\n                             if (lockSend) {\n                                 fDelete = true;\n                             }\n                         }\n                     }\n-                    if (fDelete)\n-                    {\n+                    if (fDelete) {\n                         vNodesDisconnected.remove(pnode);\n                         DeleteNode(pnode);\n                     }"
      }
    ]
  },
  {
    "sha": "ac719c936dee55f386a8be88fe298d1b44b467dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzcxOWM5MzZkZWU1NWYzODZhOGJlODhmZTI5OGQxYjQ0YjQ2N2Rj",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-02-05T17:37:13Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-02-05T17:37:13Z"
      },
      "message": "Init ECC context for test_bitcoin_fuzzy.\n\nThis avoids calling things like pubkey_parse with a null context argument.",
      "tree": {
        "sha": "25a7d4d60c2ac724a290ec68e8fd15a8d1a9b8c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25a7d4d60c2ac724a290ec68e8fd15a8d1a9b8c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac719c936dee55f386a8be88fe298d1b44b467dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac719c936dee55f386a8be88fe298d1b44b467dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac719c936dee55f386a8be88fe298d1b44b467dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac719c936dee55f386a8be88fe298d1b44b467dc/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7821db30e16149a3d8b7f467a4e5ac276af6ccbd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c4983f6f5ccdf213f3d4044720634ab5a516e89f",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac719c936dee55f386a8be88fe298d1b44b467dc/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac719c936dee55f386a8be88fe298d1b44b467dc/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=ac719c936dee55f386a8be88fe298d1b44b467dc",
        "patch": "@@ -18,6 +18,7 @@\n #include \"streams.h\"\n #include \"undo.h\"\n #include \"version.h\"\n+#include \"pubkey.h\"\n \n #include <stdint.h>\n #include <unistd.h>\n@@ -60,6 +61,7 @@ bool read_stdin(std::vector<char> &data) {\n \n int main(int argc, char **argv)\n {\n+    ECCVerifyHandle globalVerifyHandle;\n     std::vector<char> buffer;\n     if (!read_stdin(buffer)) return 0;\n "
      }
    ]
  },
  {
    "sha": "923dc447eaa8e017985b2afbbb12dd1283fbea0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjNkYzQ0N2VhYThlMDE3OTg1YjJhZmJiYjEyZGQxMjgzZmJlYTBl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-05T19:58:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-05T20:08:08Z"
      },
      "message": "Merge #9578: Add missing mempool lock for CalculateMemPoolAncestors\n\n003cd60 Add missing mempool lock for CalculateMemPoolAncestors (Matt Corallo)",
      "tree": {
        "sha": "140832de7142baf9334e2b51b302fc7ab347ad37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/140832de7142baf9334e2b51b302fc7ab347ad37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/923dc447eaa8e017985b2afbbb12dd1283fbea0e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYl4YpAAoJENuhpnN5oakxeeQP/1jtSWrpTJxeM5IPc44QW5Ii\nDapMmIPsZvP4MShsGp3Urm+QKpSsZ630RuuvVcUbnua66h7Z4TowEBBPuv0LOY6p\nTyP8m6VTLBLcG/QjG98E/7UJjcsUY+cWR0mdUade9jcIIAFGpM34t4C09kmJxjyl\nO0zQIzmkIpbtrVL9QIFgZ2AQAy6yqD12mBuGc4j0/ILcIfO5VdCgwrhroZT1nCB2\nzxsGtDV47gKjkqixHjb7uuqP07vdAIZ1rqReRsSs3tHGCACSyoOEVr3euPjUe1xd\nlO/7h+qT8HeZHkiz0L6griupRWA96q/s5rfvW6+Ufs2R/VxJhgcn5rSfsA7SQCOV\nETmZftGGAMhEJsJ3AHkt1wMDXlAyP1oWhkHhB4lbw8J/oZ75r+7I5SBtHcF5B+pR\nPdc/mfPtpgHTn9FaxksOe+xoF35D68ULNG/kQeoobiKdIjQl91WPMC1r/6Aig/Fe\nEPIfCgpWsFMkbqzQ4sGIM+zcOtcvef1JiLDrX+bYhCJq/zSj1ultGqPBtgGtKkhh\ny6z1DAQ+NQU6pOZZIzF6vYNetLOJYj9l4RmXqJq1kk2uKtbLEk5qg9b+bj10A3u3\nrO8Cu3lSy5UbMIh3n9aLlaUdavwc0ajXn9bY8VLKtoniyytPXCzGlGOprZHsZoZI\nsEaQoz0u7MY2wWObRbOQ\n=RtwK\n-----END PGP SIGNATURE-----",
        "payload": "tree 140832de7142baf9334e2b51b302fc7ab347ad37\nparent 7821db30e16149a3d8b7f467a4e5ac276af6ccbd\nparent 003cd60cc3697df25bb9dfa0bae0616a462af7ab\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1486324727 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1486325288 -0800\n\nMerge #9578: Add missing mempool lock for CalculateMemPoolAncestors\n\n003cd60 Add missing mempool lock for CalculateMemPoolAncestors (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923dc447eaa8e017985b2afbbb12dd1283fbea0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/923dc447eaa8e017985b2afbbb12dd1283fbea0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923dc447eaa8e017985b2afbbb12dd1283fbea0e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7821db30e16149a3d8b7f467a4e5ac276af6ccbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7821db30e16149a3d8b7f467a4e5ac276af6ccbd"
      },
      {
        "sha": "003cd60cc3697df25bb9dfa0bae0616a462af7ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003cd60cc3697df25bb9dfa0bae0616a462af7ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/003cd60cc3697df25bb9dfa0bae0616a462af7ab"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "236527a2ba87da1dc954a3a50f59e63d8ad80fb2",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/923dc447eaa8e017985b2afbbb12dd1283fbea0e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/923dc447eaa8e017985b2afbbb12dd1283fbea0e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=923dc447eaa8e017985b2afbbb12dd1283fbea0e",
        "patch": "@@ -171,6 +171,8 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n \n bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n {\n+    LOCK(cs);\n+\n     setEntries parentHashes;\n     const CTransaction &tx = entry.GetTx();\n "
      }
    ]
  },
  {
    "sha": "fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzY3Y2QyMmY4M2Y1ZDExODZiN2Q3ODdjZGY0ZGUyYzFmMTk4M2Q1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T07:55:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T08:22:14Z"
      },
      "message": "Merge #9691: Init ECC context for test_bitcoin_fuzzy.\n\nac719c9 Init ECC context for test_bitcoin_fuzzy. (Gregory Maxwell)",
      "tree": {
        "sha": "8874dc116667e1f58fc5616e4d9069030a520af1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8874dc116667e1f58fc5616e4d9069030a520af1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmDI2AAoJEHSBCwEjRsmmR28IAIU08v7XTs7RTSRlv8ykY5Is\n1GsF+VD7wLvit9GpNvpzD+D8kAacdyZXXMgsRFeDfwfqtdhoGrE8BDjjfTY1/VrM\njGTiX5LqOfSw0qARj84sp/eUUtTAfQ5jcKk/YyHMdPg/N/SFW6+yHXRVQ4fT1X0J\n9yLpx+qQE5+I3zNKwLPusFQp9HMM01V6p9MBTn7yQuHs9wRLCMsv520ua2yVjXGb\nLLiqEjo8sp/1R+iG/q+fZA6rcAcqn9fOVmuOS622WplJDinzxDYVvuEcGIs1fDAt\nstpXQUwasdLdvmXwFQRN7KRtbTBp+MaH6qeoCiFp6NLMjBV2kNPLLTm4EA2viz4=\n=CnPR\n-----END PGP SIGNATURE-----",
        "payload": "tree 8874dc116667e1f58fc5616e4d9069030a520af1\nparent 923dc447eaa8e017985b2afbbb12dd1283fbea0e\nparent ac719c936dee55f386a8be88fe298d1b44b467dc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486367759 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486369334 +0100\n\nMerge #9691: Init ECC context for test_bitcoin_fuzzy.\n\nac719c9 Init ECC context for test_bitcoin_fuzzy. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "923dc447eaa8e017985b2afbbb12dd1283fbea0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923dc447eaa8e017985b2afbbb12dd1283fbea0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/923dc447eaa8e017985b2afbbb12dd1283fbea0e"
      },
      {
        "sha": "ac719c936dee55f386a8be88fe298d1b44b467dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac719c936dee55f386a8be88fe298d1b44b467dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac719c936dee55f386a8be88fe298d1b44b467dc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c4983f6f5ccdf213f3d4044720634ab5a516e89f",
        "filename": "src/test/test_bitcoin_fuzzy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5/src/test/test_bitcoin_fuzzy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5/src/test/test_bitcoin_fuzzy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin_fuzzy.cpp?ref=fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
        "patch": "@@ -18,6 +18,7 @@\n #include \"streams.h\"\n #include \"undo.h\"\n #include \"version.h\"\n+#include \"pubkey.h\"\n \n #include <stdint.h>\n #include <unistd.h>\n@@ -60,6 +61,7 @@ bool read_stdin(std::vector<char> &data) {\n \n int main(int argc, char **argv)\n {\n+    ECCVerifyHandle globalVerifyHandle;\n     std::vector<char> buffer;\n     if (!read_stdin(buffer)) return 0;\n "
      }
    ]
  },
  {
    "sha": "8d6447ecf79cd9a875552f0940098394085345e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDY0NDdlY2Y3OWNkOWE4NzU1NTJmMDk0MDA5ODM5NDA4NTM0NWUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T11:48:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T11:48:55Z"
      },
      "message": "Merge #9673: Set correct metadata on bumpfee wallet transactions\n\n4ec057d [wallet] Set correct metadata on bumpfee wallet transactions (Russell Yanofsky)",
      "tree": {
        "sha": "1e424e221dbf4e8cf8f3cf8a651dcb8457576baf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e424e221dbf4e8cf8f3cf8a651dcb8457576baf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d6447ecf79cd9a875552f0940098394085345e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmGKnAAoJEHSBCwEjRsmmmp8IAMU2FpThsU5GFHBALquBh8NQ\nWCq8o00n9N0GU8jO2NQ4T8H0CCHJgU2Rlld68xTJ+3kJge8qtLFGWENPr9IOK+8v\n4jN/gH6/knmJulfTbOXulsI1sHL1YkOHsEWvoWqBKKiVQwi3QCUsdavmtFEx7PXG\nqqSyf7nuW5ebnBeS+jSSzoaRIObXcIY9yZ34pAgFdvBVaWj14jL0fEwSZYlo/d1y\nwqhaAPxfDYlI32QIPv7oe6mruAtoCyLS8CpT/ehc4McRBBCpUmc8xVL6Tk/F9KIc\ndIblWIX2xPcXNt3OfA2Xi9oA94sYCQhxr+ZFCrIhqdFMODS6ladduv+kZYVJi30=\n=UMXs\n-----END PGP SIGNATURE-----",
        "payload": "tree 1e424e221dbf4e8cf8f3cf8a651dcb8457576baf\nparent fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5\nparent 4ec057dfa72fbb910fec69305af1ff6d5e03ca30\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486381721 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486381735 +0100\n\nMerge #9673: Set correct metadata on bumpfee wallet transactions\n\n4ec057d [wallet] Set correct metadata on bumpfee wallet transactions (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d6447ecf79cd9a875552f0940098394085345e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d6447ecf79cd9a875552f0940098394085345e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d6447ecf79cd9a875552f0940098394085345e1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc67cd22f83f5d1186b7d787cdf4de2c1f1983d5"
      },
      {
        "sha": "4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ec057dfa72fbb910fec69305af1ff6d5e03ca30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ec057dfa72fbb910fec69305af1ff6d5e03ca30"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ac282796c1460e717485d1798fea4e35197691fe",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6447ecf79cd9a875552f0940098394085345e1/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6447ecf79cd9a875552f0940098394085345e1/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=8d6447ecf79cd9a875552f0940098394085345e1",
        "patch": "@@ -69,6 +69,7 @@ def run_test(self):\n         test_rebumping(rbf_node, dest_address)\n         test_rebumping_not_replaceable(rbf_node, dest_address)\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n+        test_bumpfee_metadata(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n         print(\"Success\")\n \n@@ -257,6 +258,14 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n             if t[\"txid\"] == rbfid and t[\"address\"] == rbf_node_address and t[\"spendable\"]), 1)\n \n \n+def test_bumpfee_metadata(rbf_node, dest_address):\n+    rbfid = rbf_node.sendtoaddress(dest_address, 0.00090000, \"comment value\", \"to value\")\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    bumped_wtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n+    assert_equal(bumped_wtx[\"comment\"], \"comment value\")\n+    assert_equal(bumped_wtx[\"to\"], \"to value\")\n+\n+\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n     rbf_node.walletlock()"
      },
      {
        "sha": "45b572aa2e2e6cff596552d8dd332728644c4d27",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d6447ecf79cd9a875552f0940098394085345e1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d6447ecf79cd9a875552f0940098394085345e1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8d6447ecf79cd9a875552f0940098394085345e1",
        "patch": "@@ -2944,7 +2944,12 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // commit/broadcast the tx\n     CReserveKey reservekey(pwalletMain);\n     CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue = wtx.mapValue;\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    wtxBumped.vOrderForm = wtx.vOrderForm;\n+    wtxBumped.strFromAccount = wtx.strFromAccount;\n+    wtxBumped.fTimeReceivedIsTxTime = true;\n+    wtxBumped.fFromMe = true;\n     CValidationState state;\n     if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen."
      }
    ]
  },
  {
    "sha": "986ba005eda65cf91f698cccaab792da569022f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODZiYTAwNWVkYTY1Y2Y5MWY2OThjY2NhYWI3OTJkYTU2OTAyMmY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T11:54:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:20:05Z"
      },
      "message": "Merge #9651: Fix typos\n\n5f62e3e Fix typos (practicalswift)",
      "tree": {
        "sha": "277503a56ccd798651ca32a1e5cb693c4fd88789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/277503a56ccd798651ca32a1e5cb693c4fd88789"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/986ba005eda65cf91f698cccaab792da569022f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmHgFAAoJEHSBCwEjRsmmG6IH/0eBG1NnRORBEEYYzkJpWJHW\nAri+uT9GNLpRcsc26Q4XLY3sg/sXm8/s802KIqrg0fVP9WREoCn/4p8DvQNxqbBw\n1KrzXfyrGVcSPU6aSlmN0vgKjKCCyGnUSS67ay0p6iKtn1U86QOp+FwHOm51e3G6\nPaLLWNbLfVXxZfIQ+yzlKkIygELmBQ78ruQArNA1+VBHmixWDDZuKPWLAa6jVPdi\nQP2iGch4U41X6lyhWSw3P8713GncPSuuXbz2X9gfCnKX9cex8Cql/nH31q7e0Kmh\nJ7hTi8Sk2DbrIxIxC5FTQ8/MVrw8lrafgkR+t7qgKDSXjynykakXriM0ra1Fbck=\n=kFLS\n-----END PGP SIGNATURE-----",
        "payload": "tree 277503a56ccd798651ca32a1e5cb693c4fd88789\nparent 8d6447ecf79cd9a875552f0940098394085345e1\nparent 5f62e3eb6381e455a1b83ab6fb368a132124d2a3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486382042 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486387205 +0100\n\nMerge #9651: Fix typos\n\n5f62e3e Fix typos (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/986ba005eda65cf91f698cccaab792da569022f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/986ba005eda65cf91f698cccaab792da569022f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/986ba005eda65cf91f698cccaab792da569022f9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d6447ecf79cd9a875552f0940098394085345e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d6447ecf79cd9a875552f0940098394085345e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d6447ecf79cd9a875552f0940098394085345e1"
      },
      {
        "sha": "5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f62e3eb6381e455a1b83ab6fb368a132124d2a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f62e3eb6381e455a1b83ab6fb368a132124d2a3"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6ee5df47039e6f732b46e421d02f81bf5ccbf24a",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -41,7 +41,7 @@ Options:\n -c|--commit\tIndicate that the version argument is for a commit or branch\n -u|--url\tSpecify the URL of the repository. Default is https://github.com/bitcoin/bitcoin\n -v|--verify \tVerify the gitian build\n--b|--build\tDo a gitiain build\n+-b|--build\tDo a gitian build\n -s|--sign\tMake signed binaries for Windows and Mac OSX\n -B|--buildsign\tBuild both signed and unsigned binaries\n -o|--os\t\tSpecify which Operating Systems the build is for. Default is lwx. l for linux, w for windows, x for osx"
      },
      {
        "sha": "5995f9f438983b6050c361459af41c1eb5056fee",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -340,7 +340,7 @@ def deployFrameworks(frameworks, bundlePath, binaryPath, strip, verbose, deploym\n         # install_name_tool the new id into the binary\n         changeInstallName(framework.installName, framework.deployedInstallName, binaryPath, verbose)\n         \n-        # Copy farmework to app bundle.\n+        # Copy framework to app bundle.\n         deployedBinaryPath = copyFramework(framework, bundlePath, verbose)\n         # Skip the rest if already was deployed.\n         if deployedBinaryPath is None:\n@@ -492,7 +492,7 @@ ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, h\n ap.add_argument(\"-sign\", dest=\"sign\", action=\"store_true\", default=False, help=\"sign .app bundle with codesign tool\")\n ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n-ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's ressources; the language list must be separated with commas, not with whitespace\")\n+ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's resources; the language list must be separated with commas, not with whitespace\")\n ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")"
      },
      {
        "sha": "e1fd0b317b0ed8329856048f1f20aaef58eac0cc",
        "filename": "contrib/rpm/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/contrib/rpm/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/contrib/rpm/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/rpm/README.md?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -31,7 +31,7 @@ through `Source23` are used.\n Sources 30-39 should be reserved for SELinux related files. Currently only\n `Source30` through `Source32` are used. Until those files are in a tagged\n release, the full URL specified in the RPM spec file will not work. You can get\n-them from the git ropository where you retrieved this file.\n+them from the git repository where you retrieved this file.\n \n Sources 100+ are for files that are not source tarballs and are not maintained\n in the bitcoin git repository. At present only an SVG version of the Bitcoin"
      },
      {
        "sha": "8d50144c21f9bd3726b9b12e09e8c3ff44d6e595",
        "filename": "share/certs/PrivateKeyNotes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/share/certs/PrivateKeyNotes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/share/certs/PrivateKeyNotes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/certs/PrivateKeyNotes.md?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -2,7 +2,7 @@ Code-signing private key notes\n ==\n \n The private keys for these certificates were generated on Gavin's main work machine,\n-following the certificate authoritys' recommendations for generating certificate\n+following the certificate authority's recommendations for generating certificate\n signing requests.\n \n For OSX, the private key was generated by Keychain.app on Gavin's main work machine."
      },
      {
        "sha": "1c1acb6b1038b9f5f6d4134979e434bdb0e823c3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -770,7 +770,7 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     if (!clientModel)\n         return;\n \n-    // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbelled text)\n+    // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbled text)\n     statusBar()->clearMessage();\n \n     // Acquire current block source"
      },
      {
        "sha": "5d6c0e2e31f252a5a0d06be45c0e46e53d8fc712",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -536,7 +536,7 @@ int TableViewLastColumnResizingFixer::getAvailableWidthForColumn(int column)\n     return nResult;\n }\n \n-// Make sure we don't make the columns wider than the tables viewport width.\n+// Make sure we don't make the columns wider than the table's viewport width.\n void TableViewLastColumnResizingFixer::adjustTableColumnsWidth()\n {\n     disconnectViewHeadersSignals();\n@@ -570,7 +570,7 @@ void TableViewLastColumnResizingFixer::on_sectionResized(int logicalIndex, int o\n     }\n }\n \n-// When the tabless geometry is ready, we manually perform the stretch of the \"Message\" column,\n+// When the table's geometry is ready, we manually perform the stretch of the \"Message\" column,\n // as the \"Stretch\" resize mode does not allow for interactive resizing.\n void TableViewLastColumnResizingFixer::on_geometriesChanged()\n {"
      },
      {
        "sha": "913aa5e24bf113349a030be978b0f5e7a43d23d7",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/986ba005eda65cf91f698cccaab792da569022f9/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/986ba005eda65cf91f698cccaab792da569022f9/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=986ba005eda65cf91f698cccaab792da569022f9",
        "patch": "@@ -140,7 +140,7 @@ namespace GUIUtil\n      * Also makes sure the column widths are never larger than the table's viewport.\n      * In Qt, all columns are resizable from the right, but it's not intuitive resizing the last column from the right.\n      * Usually our second to last columns behave as if stretched, and when on strech mode, columns aren't resizable\n-     * interactively or programatically.\n+     * interactively or programmatically.\n      *\n      * This helper object takes care of this issue.\n      *"
      }
    ]
  },
  {
    "sha": "09e0c28f8566d9614084e5f52739f6241d80685a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWUwYzI4Zjg1NjZkOTYxNDA4NGU1ZjUyNzM5ZjYyNDFkODA2ODVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:31:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:34:53Z"
      },
      "message": "Merge #9659: Net: Turn some methods and params/variables const\n\n0729102 Net: pass interruptMsgProc as const where possible (Jorge Tim\u00f3n)\nfc7f2ff Net: Make CNetMsgMaker more const (Jorge Tim\u00f3n)\nd45955f Net: CConnman: Make some methods const (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "f4a3b7a961db349d0b34fa57a6876cd3914027a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4a3b7a961db349d0b34fa57a6876cd3914027a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09e0c28f8566d9614084e5f52739f6241d80685a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmHt9AAoJEHSBCwEjRsmmkuoH/iqpv2WqkgfDXserjcUgBRxR\n3KQhEjUzsvi6b3uHfnZ7RzfSEos11BwcREygoCYiRykltEVYOQRKoGG3uDupe9AP\nBU9BiULxTqlxzhYodkQL2gGqruL2PuppNEWWKmm27iwMHnSibOROVNoKuDP/YWsp\nNup47Q3EEqLyDlIkeuBhMj+Lbt2WqlzLBsfZR0HiFfMfzvsMr9IA76mpgEemOyPX\n6o0fpiNHrOgGwnbnKmYu9JVHtIVGDDbDUJOKtm6MHP61jDWjeDS/YpSboEHuyBTN\nnXOevDyISxtLLKy0ZBSy/StYosVaYwN0sG3hXi5fz0SwZR0+I3bZU3Esrn3YufU=\n=+WWN\n-----END PGP SIGNATURE-----",
        "payload": "tree f4a3b7a961db349d0b34fa57a6876cd3914027a0\nparent 986ba005eda65cf91f698cccaab792da569022f9\nparent 0729102f99241b9716456ad40bf778c09f650b1b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486387897 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486388093 +0100\n\nMerge #9659: Net: Turn some methods and params/variables const\n\n0729102 Net: pass interruptMsgProc as const where possible (Jorge Tim\u00f3n)\nfc7f2ff Net: Make CNetMsgMaker more const (Jorge Tim\u00f3n)\nd45955f Net: CConnman: Make some methods const (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e0c28f8566d9614084e5f52739f6241d80685a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09e0c28f8566d9614084e5f52739f6241d80685a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e0c28f8566d9614084e5f52739f6241d80685a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "986ba005eda65cf91f698cccaab792da569022f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/986ba005eda65cf91f698cccaab792da569022f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/986ba005eda65cf91f698cccaab792da569022f9"
      },
      {
        "sha": "0729102f99241b9716456ad40bf778c09f650b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0729102f99241b9716456ad40bf778c09f650b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0729102f99241b9716456ad40bf778c09f650b1b"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4d0d781d6d2e8732b8c23adbe862fb16015ac483",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -781,7 +781,7 @@ const uint256& CNetMessage::GetMessageHash() const\n \n \n // requires LOCK(cs_vSend)\n-size_t CConnman::SocketSendData(CNode *pnode)\n+size_t CConnman::SocketSendData(CNode *pnode) const\n {\n     auto it = pnode->vSendMsg.begin();\n     size_t nSentSize = 0;\n@@ -2719,12 +2719,12 @@ int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }\n \n-CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id)\n+CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const\n {\n     return CSipHasher(nSeed0, nSeed1).Write(id);\n }\n \n-uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad)\n+uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n {\n     std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n "
      },
      {
        "sha": "38f8d82ceb306a617840553f8a03abea12dd1335",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -281,7 +281,7 @@ class CConnman\n     int GetBestHeight() const;\n \n     /** Get a unique deterministic randomizer. */\n-    CSipHasher GetDeterministicRandomizer(uint64_t id);\n+    CSipHasher GetDeterministicRandomizer(uint64_t id) const;\n \n     unsigned int GetReceiveFloodSize() const;\n \n@@ -302,7 +302,7 @@ class CConnman\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n-    uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n+    uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\n \n     CNode* FindNode(const CNetAddr& ip);\n     CNode* FindNode(const CSubNet& subNet);\n@@ -317,7 +317,7 @@ class CConnman\n \n     NodeId GetNewNodeId();\n \n-    size_t SocketSendData(CNode *pnode);\n+    size_t SocketSendData(CNode *pnode) const;\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist"
      },
      {
        "sha": "3a89c7ac423780b035357397c4a1f2219880c9d7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -778,7 +778,7 @@ static uint256 most_recent_block_hash;\n \n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n-    CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n+    const CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n \n     LOCK(cs_main);\n \n@@ -956,11 +956,11 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     LOCK(cs_main);\n \n     while (it != pfrom->vRecvGetData.end()) {\n@@ -1153,12 +1153,12 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n         resp.txn[i] = block.vtx[req.indexes[i]];\n     }\n     LOCK(cs_main);\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     int nSendFlags = State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n     connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (IsArgSet(\"-dropmessagestest\") && GetRand(GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -1354,7 +1354,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n     }\n \n     // At this point, the outgoing message serialization version can't change.\n-    CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n \n     if (strCommand == NetMsgType::VERACK)\n     {\n@@ -2588,7 +2588,7 @@ bool static ProcessMessage(CNode* pfrom, std::string strCommand, CDataStream& vR\n     return true;\n }\n \n-bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     //\n@@ -2721,7 +2721,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n+bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n@@ -2730,7 +2730,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n             return true;\n \n         // If we get here, the outgoing message serialization version is set and can't change.\n-        CNetMsgMaker msgMaker(pto->GetSendVersion());\n+        const CNetMsgMaker msgMaker(pto->GetSendVersion());\n \n         //\n         // Message: ping"
      },
      {
        "sha": "9e3f1b715667a9216d69cbccaab59bd906bf21b3",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -49,7 +49,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n void Misbehaving(NodeId nodeid, int howmuch);\n \n /** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interrupt);\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interrupt);\n /**\n  * Send queued protocol messages to be sent to a give node.\n  *\n@@ -58,6 +58,6 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n  * @param[in]   interrupt       Interrupt condition for processing threads\n  * @return                      True if there is more work to be done\n  */\n-bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interrupt);\n+bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interrupt);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "8e8a6e4a026ee824795e2af21c3eec1c7e761299",
        "filename": "src/netmessagemaker.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09e0c28f8566d9614084e5f52739f6241d80685a/src/netmessagemaker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09e0c28f8566d9614084e5f52739f6241d80685a/src/netmessagemaker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netmessagemaker.h?ref=09e0c28f8566d9614084e5f52739f6241d80685a",
        "patch": "@@ -15,7 +15,7 @@ class CNetMsgMaker\n     CNetMsgMaker(int nVersionIn) : nVersion(nVersionIn){}\n \n     template <typename... Args>\n-    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args)\n+    CSerializedNetMsg Make(int nFlags, std::string sCommand, Args&&... args) const\n     {\n         CSerializedNetMsg msg;\n         msg.command = std::move(sCommand);\n@@ -24,7 +24,7 @@ class CNetMsgMaker\n     }\n \n     template <typename... Args>\n-    CSerializedNetMsg Make(std::string sCommand, Args&&... args)\n+    CSerializedNetMsg Make(std::string sCommand, Args&&... args) const\n     {\n         return Make(0, std::move(sCommand), std::forward<Args>(args)...);\n     }"
      }
    ]
  },
  {
    "sha": "40f7e27d25ff74f023371ba607f727375581cb7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGY3ZTI3ZDI1ZmY3NGYwMjMzNzFiYTYwN2Y3MjczNzU1ODFjYjdh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:35:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:51:00Z"
      },
      "message": "Merge #9650: Better handle invalid parameters to signrawtransaction\n\n6dbfe08 [qa] test signrawtransaction merge with missing inputs (Matt Corallo)\nec4f7e4 [qa] Add second input to signrawtransaction test case (Matt Corallo)\n691710a [qa] Test that decoderawtransaction throws with extra data appended (Matt Corallo)\n922bea9 Better handle invalid parameters to signrawtransaction (Matt Corallo)\n7ea0ad5 Fail in DecodeHexTx if there is extra data at the end (Matt Corallo)",
      "tree": {
        "sha": "233ed140671895319bb9a0eb019e6f5475514e78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/233ed140671895319bb9a0eb019e6f5475514e78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40f7e27d25ff74f023371ba607f727375581cb7a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmH9EAAoJEHSBCwEjRsmm4SAH/iRVbfrgQgtJwXc5A6cenu8Q\n+iSRHxBdyOnwdxARGAHnYiv5nC/W8cru20fyZwheCTXGqhBMV5zV8wdNk6AxauUI\ns9KEd3MDrlf1ZkaJ5VioSvP9/76VXvrb3ma3YXK9jG+uWcA2nnx0IPvWc4JiK0/+\nbJhmRKQ/Rwrrlbt/ftgvbDNKt7WIhuoPvO1Xr0c1U+11R/FAe27OGvh4Ha/3by6p\nwfeXVKKroeAyFurMEcFV/hg02kmNYBtolcDyNydoCOgJyfmpkUJkzJRlqhiMJNUz\nE2AUtZLiGMIdEYO4IFy2hMEgsV82ysWzu11P42nnklNR5DhE3xjlhUUvFMbn4LQ=\n=oGN4\n-----END PGP SIGNATURE-----",
        "payload": "tree 233ed140671895319bb9a0eb019e6f5475514e78\nparent 09e0c28f8566d9614084e5f52739f6241d80685a\nparent 6dbfe08c29535bb7b0359de8fe22acedcbf3532a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486388144 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486389060 +0100\n\nMerge #9650: Better handle invalid parameters to signrawtransaction\n\n6dbfe08 [qa] test signrawtransaction merge with missing inputs (Matt Corallo)\nec4f7e4 [qa] Add second input to signrawtransaction test case (Matt Corallo)\n691710a [qa] Test that decoderawtransaction throws with extra data appended (Matt Corallo)\n922bea9 Better handle invalid parameters to signrawtransaction (Matt Corallo)\n7ea0ad5 Fail in DecodeHexTx if there is extra data at the end (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f7e27d25ff74f023371ba607f727375581cb7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40f7e27d25ff74f023371ba607f727375581cb7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f7e27d25ff74f023371ba607f727375581cb7a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09e0c28f8566d9614084e5f52739f6241d80685a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09e0c28f8566d9614084e5f52739f6241d80685a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09e0c28f8566d9614084e5f52739f6241d80685a"
      },
      {
        "sha": "6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbfe08c29535bb7b0359de8fe22acedcbf3532a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbfe08c29535bb7b0359de8fe22acedcbf3532a"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 36,
      "deletions": 4
    },
    "files": [
      {
        "sha": "109312bd5f2dfd4b05a6bcda0a5c068c1e21b4f8",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 31,
        "deletions": 3,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f7e27d25ff74f023371ba607f727375581cb7a/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f7e27d25ff74f023371ba607f727375581cb7a/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=40f7e27d25ff74f023371ba607f727375581cb7a",
        "patch": "@@ -26,12 +26,14 @@ def successful_signing_test(self):\n \n         1) The transaction has a complete set of signatures\n         2) No script verification error occurred\"\"\"\n-        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N']\n+        privKeys = ['cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N', 'cVKpPfVKSJxKqVpE9awvXNWuLHCa5j5tiE7K6zbUSptFpTEtiFrA']\n \n         inputs = [\n-            # Valid pay-to-pubkey script\n+            # Valid pay-to-pubkey scripts\n             {'txid': '9b907ef1e3c26fc71fe4a4b3580bc75264112f95050014157059c736f0202e71', 'vout': 0,\n-             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'}\n+             'scriptPubKey': '76a91460baa0f494b38ce3c940dea67f3804dc52d1fb9488ac'},\n+            {'txid': '83a4f6a6b73660e13ee6cb3c6063fa3759c50c9b7521d0536022961898f4fb02', 'vout': 0,\n+             'scriptPubKey': '76a914669b857c03a5ed269d5d85a1ffac9ed5d663072788ac'},\n         ]\n \n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n@@ -46,6 +48,22 @@ def successful_signing_test(self):\n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n+        # Check that signrawtransaction doesn't blow up on garbage merge attempts\n+        dummyTxInconsistent = self.nodes[0].createrawtransaction([inputs[0]], outputs)\n+        rawTxUnsigned = self.nodes[0].signrawtransaction(rawTx + dummyTxInconsistent, inputs)\n+\n+        assert 'complete' in rawTxUnsigned\n+        assert_equal(rawTxUnsigned['complete'], False)\n+\n+        # Check that signrawtransaction properly merges unsigned and signed txn, even with garbage in the middle\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTxUnsigned[\"hex\"] + dummyTxInconsistent + rawTxSigned[\"hex\"], inputs)\n+\n+        assert 'complete' in rawTxSigned2\n+        assert_equal(rawTxSigned2['complete'], True)\n+\n+        assert 'errors' not in rawTxSigned2\n+\n+\n     def script_verification_error_test(self):\n         \"\"\"Creates and signs a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -78,6 +96,16 @@ def script_verification_error_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n+\n+        # Make sure decoderawtransaction is at least marginally sane\n+        decodedRawTx = self.nodes[0].decoderawtransaction(rawTx)\n+        for i, inp in enumerate(inputs):\n+            assert_equal(decodedRawTx[\"vin\"][i][\"txid\"], inp[\"txid\"])\n+            assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n+\n+        # Make sure decoderawtransaction throws if there is extra data\n+        assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+\n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n \n         # 3) The transaction has no complete set of signatures"
      },
      {
        "sha": "a8d667e3bc74e71824fd919beaf81e7e73053022",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f7e27d25ff74f023371ba607f727375581cb7a/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f7e27d25ff74f023371ba607f727375581cb7a/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=40f7e27d25ff74f023371ba607f727375581cb7a",
        "patch": "@@ -111,6 +111,8 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& strHexTx, bool fTry\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     try {\n         ssData >> tx;\n+        if (!ssData.empty())\n+            return false;\n     }\n     catch (const std::exception&) {\n         return false;"
      },
      {
        "sha": "21396ebb09b78f9e625846adeb5763a778fa2b58",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f7e27d25ff74f023371ba607f727375581cb7a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f7e27d25ff74f023371ba607f727375581cb7a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=40f7e27d25ff74f023371ba607f727375581cb7a",
        "patch": "@@ -835,7 +835,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         // ... and merge in other signatures:\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n-            sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+            if (txv.vin.size() > i) {\n+                sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(txv, i));\n+            }\n         }\n \n         UpdateTransaction(mergedTx, i, sigdata);"
      }
    ]
  },
  {
    "sha": "91bfffff5d1de034661e7fd6b319447b47ae6e33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWJmZmZmZjVkMWRlMDM0NjYxZTdmZDZiMzE5NDQ3YjQ3YWU2ZTMz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-31T18:15:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T13:51:27Z"
      },
      "message": "Use argparse in rpc_tests.py\n\nThis commit replaces the roll-your-own argument parsing in rpc_tests.py\nwith Python's standard library argparse.",
      "tree": {
        "sha": "88b40a8e9353f40181f692f4e6e86676da157a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88b40a8e9353f40181f692f4e6e86676da157a58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91bfffff5d1de034661e7fd6b319447b47ae6e33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1581ecbc33edd9d6257e50b11d8854fbccaf8ad8"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 44,
      "deletions": 39
    },
    "files": [
      {
        "sha": "862859919ae0c42935d4bac173222a503a368836",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 44,
        "deletions": 39,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91bfffff5d1de034661e7fd6b319447b47ae6e33/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91bfffff5d1de034661e7fd6b319447b47ae6e33/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=91bfffff5d1de034661e7fd6b319447b47ae6e33",
        "patch": "@@ -21,6 +21,7 @@\n \n \"\"\"\n \n+import argparse\n import configparser\n import os\n import time\n@@ -30,6 +31,19 @@\n import tempfile\n import re\n \n+# Parse arguments and pass through unrecognised args\n+parser = argparse.ArgumentParser(add_help=False)\n+parser.add_argument('--coverage', action='store_true')\n+parser.add_argument('-extended', action='store_true')\n+parser.add_argument('--help', '-h', '-?', action='store_true')\n+parser.add_argument('--parallel', type=int, default=4)\n+parser.add_argument('-win', action='store_true')\n+(args, unknown_args) = parser.parse_known_args()\n+\n+#Create a set to store arguments and create the passon string\n+tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n+passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n+\n BOLD = (\"\",\"\")\n if os.name == 'posix':\n     # primitive formatting on supported\n@@ -47,35 +61,14 @@\n \n RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n \n-ENABLE_COVERAGE=0\n-\n-#Create a set to store arguments and create the passon string\n-opts = set()\n-passon_args = []\n-PASSON_REGEX = re.compile(\"^--\")\n-PARALLEL_REGEX = re.compile('^-parallel=')\n-\n-print_help = False\n-run_parallel = 4\n-\n-for arg in sys.argv[1:]:\n-    if arg == \"--help\" or arg == \"-h\" or arg == \"-?\":\n-        print_help = True\n-        break\n-    if arg == '--coverage':\n-        ENABLE_COVERAGE = 1\n-    elif PASSON_REGEX.match(arg):\n-        passon_args.append(arg)\n-    elif PARALLEL_REGEX.match(arg):\n-        run_parallel = int(arg.split(sep='=', maxsplit=1)[1])\n-    else:\n-        opts.add(arg)\n+print_help = args.help\n+run_parallel = args.parallel\n \n #Set env vars\n if \"BITCOIND\" not in os.environ:\n     os.environ[\"BITCOIND\"] = config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"]\n \n-if config[\"environment\"][\"EXEEXT\"] == \".exe\" and \"-win\" not in opts:\n+if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n     print(\"Win tests currently disabled by default.  Use -win option to enable\")\n@@ -95,7 +88,7 @@\n         # ENABLE_ZMQ=0\n         raise\n \n-testScripts = [\n+BASE_SCRIPTS= [\n     # longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n@@ -152,10 +145,9 @@\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n ]\n-if ENABLE_ZMQ:\n-    testScripts.append('zmq_test.py')\n+ZMQ_SCRIPTS = [\"zmq_test.py\"]\n \n-testScriptsExt = [\n+EXTENDED_SCRIPTS = [\n     'pruning.py',\n     # vv Tests less than 20m vv\n     'smartfees.py',\n@@ -184,26 +176,39 @@\n     'replace-by-fee.py',\n ]\n \n+ALL_SCRIPTS = BASE_SCRIPTS + ZMQ_SCRIPTS + EXTENDED_SCRIPTS\n \n def runtests():\n-    test_list = []\n-    if '-extended' in opts:\n-        test_list = testScripts + testScriptsExt\n-    elif len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts):\n-        test_list = testScripts\n+    # Build list of tests\n+    if len(tests) != 0:\n+        # Individual tests have been specified. Run specified tests that exist\n+        # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n+        test_list = [t for t in ALL_SCRIPTS if\n+                (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n+        if len(test_list) == 0:\n+            print(\"No valid test scripts specified. Check that your test is in one \"\n+                  \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n+            sys.exit(0)\n     else:\n-        for t in testScripts + testScriptsExt:\n-            if t in opts or re.sub(\".py$\", \"\", t) in opts:\n-                test_list.append(t)\n-\n-    if print_help:\n+        # No individual tests have been specified. Run base tests, and\n+        # optionally ZMQ tests and extended tests.\n+        test_list = BASE_SCRIPTS\n+        if ENABLE_ZMQ:\n+            test_list += ZMQ_SCRIPTS\n+        if args.extended:\n+            test_list += EXTENDED_SCRIPTS\n+            # TODO: BASE_SCRIPTS and EXTENDED_SCRIPTS are sorted by runtime\n+            # (for parallel running efficiency). This combined list will is no\n+            # longer sorted.\n+\n+    if args.help:\n         # Only print help of the first script and exit\n         subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n     coverage = None\n \n-    if ENABLE_COVERAGE:\n+    if args.coverage:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n     flags = [\"--srcdir=%s/src\" % config[\"environment\"][\"BUILDDIR\"]] + passon_args"
      }
    ]
  },
  {
    "sha": "afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmQzOGU3Y2M4NzVlNzlmMjgyZWJmMWM2M2ZhMTBiZjJkMmFmOGQy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-31T19:32:49Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T13:55:16Z"
      },
      "message": "Improve rpc-tests.py arguments\n\nA few miscellaneous improvements to rpc-tests.py command line arguments:\n\n - make all arguments start with double dash for consistency\n - improve help text and output\n - add nozmq argument to explicitly exclude the ZMQ tests\n - change 'parallel' to 'jobs'",
      "tree": {
        "sha": "d20eed45965e575aba67357b36daaa91ddd5bc2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d20eed45965e575aba67357b36daaa91ddd5bc2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91bfffff5d1de034661e7fd6b319447b47ae6e33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91bfffff5d1de034661e7fd6b319447b47ae6e33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91bfffff5d1de034661e7fd6b319447b47ae6e33"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 23,
      "deletions": 25
    },
    "files": [
      {
        "sha": "637999ae48ada7fe3f5a2c13242bb0c59f1446d1",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 23,
        "deletions": 25,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
        "patch": "@@ -2,19 +2,11 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n \"\"\"\n-Run Regression Test Suite\n+rpc-tests.py - run regression test suite\n \n This module calls down into individual test cases via subprocess. It will\n-forward all unrecognized arguments onto the individual test scripts, other\n-than:\n-\n-    - `-extended`: run the \"extended\" test suite in addition to the basic one.\n-    - `-win`: signal that this is running in a Windows environment, and we\n-      should run the tests.\n-    - `--coverage`: this generates a basic coverage report for the RPC\n-      interface.\n+forward all unrecognized arguments onto the individual test scripts.\n \n For a description of arguments recognized by test scripts, see\n `qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n@@ -32,12 +24,18 @@\n import re\n \n # Parse arguments and pass through unrecognised args\n-parser = argparse.ArgumentParser(add_help=False)\n-parser.add_argument('--coverage', action='store_true')\n-parser.add_argument('-extended', action='store_true')\n-parser.add_argument('--help', '-h', '-?', action='store_true')\n-parser.add_argument('--parallel', type=int, default=4)\n-parser.add_argument('-win', action='store_true')\n+parser = argparse.ArgumentParser(add_help=False,\n+                                 usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n+                                 description=__doc__,\n+                                 epilog='''\n+Help text and arguments for individual test script:''',\n+                                 formatter_class=argparse.RawTextHelpFormatter)\n+parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n+parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n+parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n (args, unknown_args) = parser.parse_known_args()\n \n #Create a set to store arguments and create the passon string\n@@ -57,12 +55,12 @@\n ENABLE_WALLET = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n ENABLE_UTILS = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n ENABLE_BITCOIND = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n-ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\"\n+ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n \n RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n \n print_help = args.help\n-run_parallel = args.parallel\n+jobs = args.jobs\n \n #Set env vars\n if \"BITCOIND\" not in os.environ:\n@@ -71,7 +69,7 @@\n if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n     # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n     # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print(\"Win tests currently disabled by default.  Use -win option to enable\")\n+    print(\"Win tests currently disabled by default.  Use --win option to enable\")\n     sys.exit(0)\n \n if not (ENABLE_WALLET and ENABLE_UTILS and ENABLE_BITCOIND):\n@@ -83,9 +81,8 @@\n     try:\n         import zmq\n     except ImportError:\n-        print(\"ERROR: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \"\n-              \"to run zmq tests, see dependency info in /qa/README.md.\")\n-        # ENABLE_ZMQ=0\n+        print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n+              \"To run zmq tests, see dependency info in /qa/README.md.\")\n         raise\n \n BASE_SCRIPTS= [\n@@ -202,7 +199,8 @@ def runtests():\n             # longer sorted.\n \n     if args.help:\n-        # Only print help of the first script and exit\n+        # Print help for rpc-tests.py, then print help of the first script and exit.\n+        parser.print_help()\n         subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n@@ -216,15 +214,15 @@ def runtests():\n     if coverage:\n         flags.append(coverage.flag)\n \n-    if len(test_list) > 1 and run_parallel > 1:\n+    if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n         subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n \n     #Run Tests\n     max_len_name = len(max(test_list, key=len))\n     time_sum = 0\n     time0 = time.time()\n-    job_queue = RPCTestHandler(run_parallel, test_list, flags)\n+    job_queue = RPCTestHandler(jobs, test_list, flags)\n     results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n     all_passed = True\n     for _ in range(len(test_list)):"
      }
    ]
  },
  {
    "sha": "870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzBjZDJiNThhYmEzMGVjZDU3YzYyNGFiMWYxNzI0YjMyMzVjYjRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:57:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T13:58:02Z"
      },
      "message": "Merge #9378: [trivial] Add documentation for CWalletTx::fFromMe member.\n\n39c77b0 Add documentation for CWalletTx::fFromMe member. (Russell Yanofsky)",
      "tree": {
        "sha": "b5ae2e0aaa770c34cb9018e8bfb2320a5823909e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5ae2e0aaa770c34cb9018e8bfb2320a5823909e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmIDqAAoJEHSBCwEjRsmmbF8H/0KY1lHP9iKtfFpA3UlTIaxg\ncIhB2Ib6eGyDwwMTE3Bs2ZQCdWtxQc+c6zHs1ST3p/bEd1ZyXsg/C/8YecSuV80R\nvR8zO4XQeVcaDyKcI/HuhWbCCFNKeRBaT4XMGOjeO8Z3YfrjEYIwztIGafWDPC02\nNWcirvK0DQsUgIVI+oeZGF6mjT5jkDM4bQ0ONGjZneHP+utnXhR3cqidPE5Yzcir\nNO5btuaSHhKEzKxRixH2NwCfcsNz4jqV0CVo2JRqg0JdvXDMTlVdk//8Ys9Ng+Ty\nCfeuPZ295nZdUaLRSUBhnT28NcLEtbYLo3vyT2ht1HcU30LQIodi5/4CUNtgpTU=\n=jLHw\n-----END PGP SIGNATURE-----",
        "payload": "tree b5ae2e0aaa770c34cb9018e8bfb2320a5823909e\nparent 40f7e27d25ff74f023371ba607f727375581cb7a\nparent 39c77b00e3d61dfea1f45be5d3b77e5adea7b91a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486389464 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486389482 +0100\n\nMerge #9378: [trivial] Add documentation for CWalletTx::fFromMe member.\n\n39c77b0 Add documentation for CWalletTx::fFromMe member. (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40f7e27d25ff74f023371ba607f727375581cb7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f7e27d25ff74f023371ba607f727375581cb7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40f7e27d25ff74f023371ba607f727375581cb7a"
      },
      {
        "sha": "39c77b00e3d61dfea1f45be5d3b77e5adea7b91a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39c77b00e3d61dfea1f45be5d3b77e5adea7b91a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39c77b00e3d61dfea1f45be5d3b77e5adea7b91a"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ea4787c3639cce1b17a9357b57446d7299245b3f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870cd2b58aba30ecd57c624ab1f1724b3235cb4d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870cd2b58aba30ecd57c624ab1f1724b3235cb4d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "patch": "@@ -261,6 +261,11 @@ class CWalletTx : public CMerkleTx\n     unsigned int fTimeReceivedIsTxTime;\n     unsigned int nTimeReceived; //!< time received by this node\n     unsigned int nTimeSmart;\n+    /**\n+     * From me flag is set to 1 for transactions that were created by the wallet\n+     * on this bitcoin node, and set to 0 for transactions that were created\n+     * externally and came in through the network or sendrawtransaction RPC.\n+     */\n     char fFromMe;\n     std::string strFromAccount;\n     int64_t nOrderPos; //!< position in ordered transaction list"
      }
    ]
  },
  {
    "sha": "3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGUzY2NkZmFhYTVlZGNmNGUwOTI0ODYwZDk2MGU3ZTBkYjVhOWI5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T14:07:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-06T14:07:14Z"
      },
      "message": "Refactor rpc-tests.py\n\n- add main()\n- remove global variables",
      "tree": {
        "sha": "ef9ac5296e1beaa04f5eaf77214f2c660410a705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef9ac5296e1beaa04f5eaf77214f2c660410a705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd38e7cc875e79f282ebf1c63fa10bf2d2af8d2"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 100,
      "deletions": 85
    },
    "files": [
      {
        "sha": "1b4c905641170ed7fa708f4e2e6ec2e75a79f22f",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 100,
        "deletions": 85,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
        "patch": "@@ -23,69 +23,8 @@\n import tempfile\n import re\n \n-# Parse arguments and pass through unrecognised args\n-parser = argparse.ArgumentParser(add_help=False,\n-                                 usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n-                                 description=__doc__,\n-                                 epilog='''\n-Help text and arguments for individual test script:''',\n-                                 formatter_class=argparse.RawTextHelpFormatter)\n-parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n-parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n-parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n-parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n-parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n-parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n-(args, unknown_args) = parser.parse_known_args()\n-\n-#Create a set to store arguments and create the passon string\n-tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n-passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n-\n-BOLD = (\"\",\"\")\n-if os.name == 'posix':\n-    # primitive formatting on supported\n-    # terminal via ANSI escape sequences:\n-    BOLD = ('\\033[0m', '\\033[1m')\n-\n-# Read config generated by configure.\n-config = configparser.ConfigParser()\n-config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n-\n-ENABLE_WALLET = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n-ENABLE_UTILS = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n-ENABLE_BITCOIND = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n-ENABLE_ZMQ = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n-\n-RPC_TESTS_DIR = config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/'\n-\n-print_help = args.help\n-jobs = args.jobs\n-\n-#Set env vars\n-if \"BITCOIND\" not in os.environ:\n-    os.environ[\"BITCOIND\"] = config[\"environment\"][\"BUILDDIR\"] + '/src/bitcoind' + config[\"environment\"][\"EXEEXT\"]\n-\n-if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n-    # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n-    # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print(\"Win tests currently disabled by default.  Use --win option to enable\")\n-    sys.exit(0)\n-\n-if not (ENABLE_WALLET and ENABLE_UTILS and ENABLE_BITCOIND):\n-    print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-    sys.exit(0)\n-\n-# python3-zmq may not be installed. Handle this gracefully and with some helpful info\n-if ENABLE_ZMQ:\n-    try:\n-        import zmq\n-    except ImportError:\n-        print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n-              \"To run zmq tests, see dependency info in /qa/README.md.\")\n-        raise\n-\n BASE_SCRIPTS= [\n+    # Scripts that are run by the travis build process\n     # longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n@@ -142,9 +81,15 @@\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n ]\n-ZMQ_SCRIPTS = [\"zmq_test.py\"]\n+\n+ZMQ_SCRIPTS = [\n+    # ZMQ test can only be run if bitcoin was built with zmq-enabled.\n+    # call rpc_tests.py with -nozmq to explicitly exclude these tests.\n+    \"zmq_test.py\"]\n \n EXTENDED_SCRIPTS = [\n+    # These tests are not run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'pruning.py',\n     # vv Tests less than 20m vv\n     'smartfees.py',\n@@ -175,7 +120,55 @@\n \n ALL_SCRIPTS = BASE_SCRIPTS + ZMQ_SCRIPTS + EXTENDED_SCRIPTS\n \n-def runtests():\n+def main():\n+    # Parse arguments and pass through unrecognised args\n+    parser = argparse.ArgumentParser(add_help=False,\n+                                     usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n+                                     description=__doc__,\n+                                     epilog='''\n+    Help text and arguments for individual test script:''',\n+                                     formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+    parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+    parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n+    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+    parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n+    parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n+    (args, unknown_args) = parser.parse_known_args()\n+\n+    # Create a set to store arguments and create the passon string\n+    tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n+    passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n+\n+    # Read config generated by configure.\n+    config = configparser.ConfigParser()\n+    config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n+\n+    enable_wallet = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n+    enable_utils = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n+    enable_bitcoind = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n+    enable_zmq = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n+\n+    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n+        # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n+        # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n+        print(\"Win tests currently disabled by default.  Use --win option to enable\")\n+        sys.exit(0)\n+\n+    if not (enable_wallet and enable_utils and enable_bitcoind):\n+        print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n+        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+        sys.exit(0)\n+\n+    # python3-zmq may not be installed. Handle this gracefully and with some helpful info\n+    if enable_zmq:\n+        try:\n+            import zmq\n+        except ImportError:\n+            print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n+                  \"To run zmq tests, see dependency info in /qa/README.md.\")\n+            raise\n+\n     # Build list of tests\n     if len(tests) != 0:\n         # Individual tests have been specified. Run specified tests that exist\n@@ -185,12 +178,15 @@ def runtests():\n         if len(test_list) == 0:\n             print(\"No valid test scripts specified. Check that your test is in one \"\n                   \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n+            print(\"Scripts not found:\")\n+            print(tests)\n             sys.exit(0)\n+\n     else:\n         # No individual tests have been specified. Run base tests, and\n         # optionally ZMQ tests and extended tests.\n         test_list = BASE_SCRIPTS\n-        if ENABLE_ZMQ:\n+        if enable_zmq:\n             test_list += ZMQ_SCRIPTS\n         if args.extended:\n             test_list += EXTENDED_SCRIPTS\n@@ -201,30 +197,47 @@ def runtests():\n     if args.help:\n         # Print help for rpc-tests.py, then print help of the first script and exit.\n         parser.print_help()\n-        subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n+        subprocess.check_call((config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/' + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n-    coverage = None\n+    runtests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n+\n+def runtests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n+    BOLD = (\"\",\"\")\n+    if os.name == 'posix':\n+        # primitive formatting on supported\n+        # terminal via ANSI escape sequences:\n+        BOLD = ('\\033[0m', '\\033[1m')\n+\n+    #Set env vars\n+    if \"BITCOIND\" not in os.environ:\n+        os.environ[\"BITCOIND\"] = build_dir + '/src/bitcoind' + exeext\n+\n+    tests_dir = src_dir + '/qa/rpc-tests/'\n \n-    if args.coverage:\n+    flags = [\"--srcdir=\" + src_dir] + args\n+    flags.append(\"--cachedir=%s/qa/cache\" % build_dir)\n+\n+    if enable_coverage:\n         coverage = RPCCoverage()\n-        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n-    flags = [\"--srcdir=%s/src\" % config[\"environment\"][\"BUILDDIR\"]] + passon_args\n-    flags.append(\"--cachedir=%s/qa/cache\" % config[\"environment\"][\"BUILDDIR\"])\n-    if coverage:\n         flags.append(coverage.flag)\n+        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n+    else:\n+        coverage = None\n \n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n-        subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n+        subprocess.check_output([tests_dir + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    max_len_name = len(max(test_list, key=len))\n+    all_passed = True\n     time_sum = 0\n     time0 = time.time()\n-    job_queue = RPCTestHandler(jobs, test_list, flags)\n+\n+    job_queue = RPCTestHandler(jobs, tests_dir, test_list, flags)\n+\n+    max_len_name = len(max(test_list, key=len))\n     results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n-    all_passed = True\n     for _ in range(len(test_list)):\n         (name, stdout, stderr, passed, duration) = job_queue.get_next()\n         all_passed = all_passed and passed\n@@ -233,8 +246,10 @@ def runtests():\n         print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n         print('' if passed else stdout + '\\n', end='')\n         print('' if stderr == '' else 'stderr:\\n' + stderr + '\\n', end='')\n-        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n         print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+\n     results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n     print(results)\n     print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n@@ -247,15 +262,15 @@ def runtests():\n \n     sys.exit(not all_passed)\n \n-\n class RPCTestHandler:\n     \"\"\"\n     Trigger the testscrips passed in via the list.\n     \"\"\"\n \n-    def __init__(self, num_tests_parallel, test_list=None, flags=None):\n+    def __init__(self, num_tests_parallel, tests_dir, test_list=None, flags=None):\n         assert(num_tests_parallel >= 1)\n         self.num_jobs = num_tests_parallel\n+        self.tests_dir = tests_dir\n         self.test_list = test_list\n         self.flags = flags\n         self.num_running = 0\n@@ -275,7 +290,7 @@ def get_next(self):\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n+                              subprocess.Popen((self.tests_dir + t).split() + self.flags + port_seed,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),\n@@ -340,10 +355,10 @@ def _get_uncovered_rpc_commands(self):\n \n         \"\"\"\n         # This is shared from `qa/rpc-tests/test-framework/coverage.py`\n-        REFERENCE_FILENAME = 'rpc_interface.txt'\n-        COVERAGE_FILE_PREFIX = 'coverage.'\n+        reference_filename = 'rpc_interface.txt'\n+        coverage_file_prefix = 'coverage.'\n \n-        coverage_ref_filename = os.path.join(self.dir, REFERENCE_FILENAME)\n+        coverage_ref_filename = os.path.join(self.dir, reference_filename)\n         coverage_filenames = set()\n         all_cmds = set()\n         covered_cmds = set()\n@@ -356,7 +371,7 @@ def _get_uncovered_rpc_commands(self):\n \n         for root, dirs, files in os.walk(self.dir):\n             for filename in files:\n-                if filename.startswith(COVERAGE_FILE_PREFIX):\n+                if filename.startswith(coverage_file_prefix):\n                     coverage_filenames.add(os.path.join(root, filename))\n \n         for filename in coverage_filenames:\n@@ -367,4 +382,4 @@ def _get_uncovered_rpc_commands(self):\n \n \n if __name__ == '__main__':\n-    runtests()\n+    main()"
      }
    ]
  },
  {
    "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjQ2NGRhNWU0YWE4YzE5ZDRmZmYzODU5ZGNkZWU4MjJlMmFmNzhj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T14:01:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-06T15:14:17Z"
      },
      "message": "Merge #9227: Make nWalletDBUpdated atomic to avoid a potential race.\n\nd63ff62 Make nWalletDBUpdated atomic to avoid a potential race. (Patrick Strateman)",
      "tree": {
        "sha": "00784ec6963a8370dc424c679856abd61331874e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00784ec6963a8370dc424c679856abd61331874e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmJLJAAoJEHSBCwEjRsmms6AH/26zTashm69W7W/8IwkDssLF\nE482XeQTPMKcCbqOqXJ+YmMkJBhUx1Y4n4UesZyc6fZZ0mSxo6xL01Ua8fp18mPj\ntxFHdrokc4PmvjZx931jGo0tdLOPZMtlQPInANNz+NGBk5UV+hMTcM7X3uzA7Mds\nFLwbXBF+iIaZoAsFtzQYLk/BFRew92G7dorfjWIZ02G8WpkbGJQQw99DT8f4gXFb\neuelWUlUeZ8nX14V8p8YjYgrUlqG9al2Y4sGRaircFhGOhSgLtlZ1zVqmHOfIiQq\noAflPVx3L2Cx2YRJrqlzHXGs2utHOHRosakJTMi5QVLWGRiG49giwTXdNZnk2ek=\n=YaN3\n-----END PGP SIGNATURE-----",
        "payload": "tree 00784ec6963a8370dc424c679856abd61331874e\nparent 870cd2b58aba30ecd57c624ab1f1724b3235cb4d\nparent d63ff6265b0c6ae30efcbb9120d4db419606198a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486389709 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486394057 +0100\n\nMerge #9227: Make nWalletDBUpdated atomic to avoid a potential race.\n\nd63ff62 Make nWalletDBUpdated atomic to avoid a potential race. (Patrick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/870cd2b58aba30ecd57c624ab1f1724b3235cb4d"
      },
      {
        "sha": "d63ff6265b0c6ae30efcbb9120d4db419606198a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d63ff6265b0c6ae30efcbb9120d4db419606198a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d63ff6265b0c6ae30efcbb9120d4db419606198a"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 43,
      "deletions": 33
    },
    "files": [
      {
        "sha": "7d1b429b3069635f49b5d9c9d8470b12fe3a9af1",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -24,9 +24,6 @@\n using namespace std;\n \n \n-unsigned int nWalletDBUpdated;\n-\n-\n //\n // CDB\n //"
      },
      {
        "sha": "b4ce044e7f58da2eea808d3e253f87d20bd892d2",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -23,8 +23,6 @@\n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n static const bool DEFAULT_WALLET_PRIVDB = true;\n \n-extern unsigned int nWalletDBUpdated;\n-\n class CDBEnv\n {\n private:"
      },
      {
        "sha": "a5e8752fc0daaa1e82af2a6bc5f8276c7cdc922e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -3691,7 +3691,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         walletInstance->ScanForWalletTransactions(pindexRescan, true);\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->SetBestChain(chainActive.GetLocator());\n-        nWalletDBUpdated++;\n+        CWalletDB::IncrementUpdateCounter();\n \n         // Restore wallet transaction metadata after -zapwallettxes=1\n         if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")"
      },
      {
        "sha": "b00ce36b708b2bc9405fe6fca928c45d539d88ad",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 26,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -15,6 +15,8 @@\n #include \"utiltime.h\"\n #include \"wallet/wallet.h\"\n \n+#include <atomic>\n+\n #include <boost/version.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n@@ -24,51 +26,53 @@ using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n \n+static std::atomic<unsigned int> nWalletDBUpdateCounter;\n+\n //\n // CWalletDB\n //\n \n bool CWalletDB::WriteName(const string& strAddress, const string& strName)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(make_pair(string(\"name\"), strAddress), strName);\n }\n \n bool CWalletDB::EraseName(const string& strAddress)\n {\n     // This should only be used for sending addresses, never for receiving addresses,\n     // receiving addresses must always have an address book entry if they're not change return.\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(make_pair(string(\"name\"), strAddress));\n }\n \n bool CWalletDB::WritePurpose(const string& strAddress, const string& strPurpose)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(make_pair(string(\"purpose\"), strAddress), strPurpose);\n }\n \n bool CWalletDB::ErasePurpose(const string& strPurpose)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(make_pair(string(\"purpose\"), strPurpose));\n }\n \n bool CWalletDB::WriteTx(const CWalletTx& wtx)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"tx\"), wtx.GetHash()), wtx);\n }\n \n bool CWalletDB::EraseTx(uint256 hash)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(std::make_pair(std::string(\"tx\"), hash));\n }\n \n bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n \n     if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n                keyMeta, false))\n@@ -88,7 +92,7 @@ bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,\n                                 const CKeyMetadata &keyMeta)\n {\n     const bool fEraseUnencryptedKey = true;\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n \n     if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n             keyMeta))\n@@ -106,31 +110,31 @@ bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey,\n \n bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n }\n \n bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n bool CWalletDB::WriteWatchOnly(const CScript &dest)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     Write(std::string(\"bestblock\"), CBlockLocator()); // Write empty block locator so versions that require a merkle branch automatically rescan\n     return Write(std::string(\"bestblock_nomerkle\"), locator);\n }\n@@ -143,13 +147,13 @@ bool CWalletDB::ReadBestBlock(CBlockLocator& locator)\n \n bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::string(\"orderposnext\"), nOrderPosNext);\n }\n \n bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::string(\"defaultkey\"), vchPubKey);\n }\n \n@@ -160,13 +164,13 @@ bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)\n \n bool CWalletDB::WritePool(int64_t nPool, const CKeyPool& keypool)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n }\n \n bool CWalletDB::ErasePool(int64_t nPool)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(std::make_pair(std::string(\"pool\"), nPool));\n }\n \n@@ -780,20 +784,20 @@ void ThreadFlushWalletDB()\n     if (!GetBoolArg(\"-flushwallet\", DEFAULT_FLUSHWALLET))\n         return;\n \n-    unsigned int nLastSeen = nWalletDBUpdated;\n-    unsigned int nLastFlushed = nWalletDBUpdated;\n+    unsigned int nLastSeen = CWalletDB::GetUpdateCounter();\n+    unsigned int nLastFlushed = CWalletDB::GetUpdateCounter();\n     int64_t nLastWalletUpdate = GetTime();\n     while (true)\n     {\n         MilliSleep(500);\n \n-        if (nLastSeen != nWalletDBUpdated)\n+        if (nLastSeen != CWalletDB::GetUpdateCounter())\n         {\n-            nLastSeen = nWalletDBUpdated;\n+            nLastSeen = CWalletDB::GetUpdateCounter();\n             nLastWalletUpdate = GetTime();\n         }\n \n-        if (nLastFlushed != nWalletDBUpdated && GetTime() - nLastWalletUpdate >= 2)\n+        if (nLastFlushed != CWalletDB::GetUpdateCounter() && GetTime() - nLastWalletUpdate >= 2)\n         {\n             TRY_LOCK(bitdb.cs_db,lockDb);\n             if (lockDb)\n@@ -815,7 +819,7 @@ void ThreadFlushWalletDB()\n                     if (_mi != bitdb.mapFileUseCount.end())\n                     {\n                         LogPrint(\"db\", \"Flushing %s\\n\", strFile);\n-                        nLastFlushed = nWalletDBUpdated;\n+                        nLastFlushed = CWalletDB::GetUpdateCounter();\n                         int64_t nStart = GetTimeMillis();\n \n                         // Flush wallet file so it's self contained\n@@ -922,19 +926,29 @@ bool CWalletDB::Recover(CDBEnv& dbenv, const std::string& filename)\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n }\n \n bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }\n \n \n bool CWalletDB::WriteHDChain(const CHDChain& chain)\n {\n-    nWalletDBUpdated++;\n+    nWalletDBUpdateCounter++;\n     return Write(std::string(\"hdchain\"), chain);\n }\n+\n+void CWalletDB::IncrementUpdateCounter()\n+{\n+    nWalletDBUpdateCounter++;\n+}\n+\n+unsigned int CWalletDB::GetUpdateCounter()\n+{\n+    return nWalletDBUpdateCounter;\n+}"
      },
      {
        "sha": "8437a95ba7744b9393085f0b38065b0a3b929c50",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02464da5e4aa8c19d4fff3859dcdee822e2af78c/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "patch": "@@ -176,10 +176,11 @@ class CWalletDB : public CDB\n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);\n \n+    static void IncrementUpdateCounter();\n+    static unsigned int GetUpdateCounter();\n private:\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);\n-\n };\n \n void ThreadFlushWalletDB();"
      }
    ]
  },
  {
    "sha": "45e2e085612463dd9cca9f1b221733afa6d52991",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWUyZTA4NTYxMjQ2M2RkOWNjYTlmMWIyMjE3MzNhZmE2ZDUyOTkx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T18:47:24Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T19:48:50Z"
      },
      "message": "net: rearrange so that socket accesses can be grouped together",
      "tree": {
        "sha": "61a599d965a34037f358eb5c03489d82206da0d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61a599d965a34037f358eb5c03489d82206da0d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45e2e085612463dd9cca9f1b221733afa6d52991",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45e2e085612463dd9cca9f1b221733afa6d52991",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45e2e085612463dd9cca9f1b221733afa6d52991",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45e2e085612463dd9cca9f1b221733afa6d52991/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 23,
      "deletions": 14
    },
    "files": [
      {
        "sha": "b47514fd925d580b372fe4a7430957f16caa2647",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 14,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45e2e085612463dd9cca9f1b221733afa6d52991/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45e2e085612463dd9cca9f1b221733afa6d52991/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=45e2e085612463dd9cca9f1b221733afa6d52991",
        "patch": "@@ -1152,9 +1152,6 @@ void CConnman::ThreadSocketHandler()\n             {\n                 if (pnode->hSocket == INVALID_SOCKET)\n                     continue;\n-                FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-                have_fds = true;\n \n                 // Implement the following logic:\n                 // * If there is data to send, select() for sending data. As this only\n@@ -1166,16 +1163,24 @@ void CConnman::ThreadSocketHandler()\n                 //   receiving data.\n                 // * Hand off all complete messages to the processor, to be handled without\n                 //   blocking here.\n+\n+                bool select_recv = !pnode->fPauseRecv;\n+                bool select_send;\n                 {\n                     LOCK(pnode->cs_vSend);\n-                    if (!pnode->vSendMsg.empty()) {\n-                        FD_SET(pnode->hSocket, &fdsetSend);\n-                        continue;\n-                    }\n+                    select_send = !pnode->vSendMsg.empty();\n                 }\n-                {\n-                    if (!pnode->fPauseRecv)\n-                        FD_SET(pnode->hSocket, &fdsetRecv);\n+\n+                FD_SET(pnode->hSocket, &fdsetError);\n+                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n+                have_fds = true;\n+\n+                if (select_send) {\n+                    FD_SET(pnode->hSocket, &fdsetSend);\n+                    continue;\n+                }\n+                if (select_recv) {\n+                    FD_SET(pnode->hSocket, &fdsetRecv);\n                 }\n             }\n         }\n@@ -1229,9 +1234,15 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Receive\n             //\n+            bool recvSet = false;\n+            bool sendSet = false;\n+            bool errorSet = false;\n             if (pnode->hSocket == INVALID_SOCKET)\n                 continue;\n-            if (FD_ISSET(pnode->hSocket, &fdsetRecv) || FD_ISSET(pnode->hSocket, &fdsetError))\n+            recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n+            sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n+            errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            if (recvSet || errorSet)\n             {\n                 {\n                     {\n@@ -1286,9 +1297,7 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Send\n             //\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n-            if (FD_ISSET(pnode->hSocket, &fdsetSend))\n+            if (sendSet)\n             {\n                 LOCK(pnode->cs_vSend);\n                 size_t nBytes = SocketSendData(pnode);"
      }
    ]
  },
  {
    "sha": "9a0b784deaab6b9fffcab227d928987b981d0572",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTBiNzg0ZGVhYWI2YjlmZmZjYWIyMjdkOTI4OTg3Yjk4MWQwNTcy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T19:05:45Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T19:48:50Z"
      },
      "message": "net: add a lock around hSocket",
      "tree": {
        "sha": "798813108d73e10d0bf9ee61be34efd4657d11a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/798813108d73e10d0bf9ee61be34efd4657d11a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a0b784deaab6b9fffcab227d928987b981d0572",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0b784deaab6b9fffcab227d928987b981d0572",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a0b784deaab6b9fffcab227d928987b981d0572",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0b784deaab6b9fffcab227d928987b981d0572/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45e2e085612463dd9cca9f1b221733afa6d52991",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45e2e085612463dd9cca9f1b221733afa6d52991",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45e2e085612463dd9cca9f1b221733afa6d52991"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 29,
      "deletions": 15
    },
    "files": [
      {
        "sha": "2625cccaa3a922c400157297bbc7de1c87424c54",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 15,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a0b784deaab6b9fffcab227d928987b981d0572/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a0b784deaab6b9fffcab227d928987b981d0572/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9a0b784deaab6b9fffcab227d928987b981d0572",
        "patch": "@@ -425,6 +425,7 @@ void CConnman::DumpBanlist()\n void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n+    LOCK(cs_hSocket);\n     if (hSocket != INVALID_SOCKET)\n     {\n         LogPrint(\"net\", \"disconnecting peer=%d\\n\", id);\n@@ -789,7 +790,13 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n     while (it != pnode->vSendMsg.end()) {\n         const auto &data = *it;\n         assert(data.size() > pnode->nSendOffset);\n-        int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+        int nBytes = 0;\n+        {\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                break;\n+            nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+        }\n         if (nBytes > 0) {\n             pnode->nLastSend = GetSystemTimeInSeconds();\n             pnode->nSendBytes += nBytes;\n@@ -1150,9 +1157,6 @@ void CConnman::ThreadSocketHandler()\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n             {\n-                if (pnode->hSocket == INVALID_SOCKET)\n-                    continue;\n-\n                 // Implement the following logic:\n                 // * If there is data to send, select() for sending data. As this only\n                 //   happens when optimistic write failed, we choose to first drain the\n@@ -1171,6 +1175,10 @@ void CConnman::ThreadSocketHandler()\n                     select_send = !pnode->vSendMsg.empty();\n                 }\n \n+                LOCK(pnode->cs_hSocket);\n+                if (pnode->hSocket == INVALID_SOCKET)\n+                    continue;\n+\n                 FD_SET(pnode->hSocket, &fdsetError);\n                 hSocketMax = std::max(hSocketMax, pnode->hSocket);\n                 have_fds = true;\n@@ -1237,18 +1245,27 @@ void CConnman::ThreadSocketHandler()\n             bool recvSet = false;\n             bool sendSet = false;\n             bool errorSet = false;\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n-            recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n-            sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n-            errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            {\n+                LOCK(pnode->cs_hSocket);\n+                if (pnode->hSocket == INVALID_SOCKET)\n+                    continue;\n+                recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n+                sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n+                errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            }\n             if (recvSet || errorSet)\n             {\n                 {\n                     {\n                         // typical socket buffer is 8K-64K\n                         char pchBuf[0x10000];\n-                        int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                        int nBytes = 0;\n+                        {\n+                            LOCK(pnode->cs_hSocket);\n+                            if (pnode->hSocket == INVALID_SOCKET)\n+                                continue;\n+                            nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                        }\n                         if (nBytes > 0)\n                         {\n                             bool notify = false;\n@@ -2286,8 +2303,7 @@ void CConnman::Stop()\n \n     // Close sockets\n     BOOST_FOREACH(CNode* pnode, vNodes)\n-        if (pnode->hSocket != INVALID_SOCKET)\n-            CloseSocket(pnode->hSocket);\n+        pnode->CloseSocketDisconnect();\n     BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n         if (hListenSocket.socket != INVALID_SOCKET)\n             if (!CloseSocket(hListenSocket.socket))\n@@ -2688,9 +2704,6 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        if(pnode->hSocket == INVALID_SOCKET) {\n-            return;\n-        }\n         bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per command"
      },
      {
        "sha": "e5a19e0f43ef484525e5b4c531c9c3e4941b4f7c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a0b784deaab6b9fffcab227d928987b981d0572/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a0b784deaab6b9fffcab227d928987b981d0572/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9a0b784deaab6b9fffcab227d928987b981d0572",
        "patch": "@@ -572,6 +572,7 @@ class CNode\n     uint64_t nSendBytes;\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n+    CCriticalSection cs_hSocket;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg;"
      }
    ]
  },
  {
    "sha": "8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzEzZGU4M2EwNzZjMGU4ZTgwZjNiYjBhNmVkZjFmMTdkMzg1NmRi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T09:41:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T12:01:41Z"
      },
      "message": "build: Add options to override BDB cflags/libs\n\nAdd environment settings to specify the CFLAGS and LIBS to be used for\nBerkeleyDB directly. These will completely by-pass autodetection in the\nsame way as other similar flags.\n\n```\nBDB_CFLAGS  C compiler flags for BerkeleyDB, bypasses autodetection\nBDB_LIBS    Linker flags for BerkeleyDB, bypasses autodetection\n```\n\nImplements #3921.",
      "tree": {
        "sha": "68f3a96c4c1aa59d13f687e710bd8dcc6667afbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68f3a96c4c1aa59d13f687e710bd8dcc6667afbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8713de83a076c0e8e80f3bb0a6edf1f17d3856db/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 64,
      "deletions": 56
    },
    "files": [
      {
        "sha": "980f1e8f19cd2f1351be332d4908f7ba75ce4cfb",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 64,
        "deletions": 56,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8713de83a076c0e8e80f3bb0a6edf1f17d3856db/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8713de83a076c0e8e80f3bb0a6edf1f17d3856db/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
        "patch": "@@ -3,68 +3,76 @@ dnl Distributed under the MIT software license, see the accompanying\n dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n AC_DEFUN([BITCOIN_FIND_BDB48],[\n-  AC_MSG_CHECKING([for Berkeley DB C++ headers])\n-  BDB_CPPFLAGS=\n-  BDB_LIBS=\n-  bdbpath=X\n-  bdb48path=X\n-  bdbdirlist=\n-  for _vn in 4.8 48 4 5 ''; do\n-    for _pfx in b lib ''; do\n-      bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+  AC_ARG_VAR(BDB_CFLAGS, [C compiler flags for BerkeleyDB, bypasses autodetection])\n+  AC_ARG_VAR(BDB_LIBS, [Linker flags for BerkeleyDB, bypasses autodetection])\n+\n+  if test \"x$BDB_CFLAGS\" = \"x\"; then\n+    AC_MSG_CHECKING([for Berkeley DB C++ headers])\n+    BDB_CPPFLAGS=\n+    bdbpath=X\n+    bdb48path=X\n+    bdbdirlist=\n+    for _vn in 4.8 48 4 5 ''; do\n+      for _pfx in b lib ''; do\n+        bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+      done\n+    done\n+    for searchpath in $bdbdirlist ''; do\n+      test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n+          #error \"failed to find bdb 4.8+\"\n+        #endif\n+      ]])],[\n+        if test \"x$bdbpath\" = \"xX\"; then\n+          bdbpath=\"${searchpath}\"\n+        fi\n+      ],[\n+        continue\n+      ])\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n+          #error \"failed to find bdb 4.8\"\n+        #endif\n+      ]])],[\n+        bdb48path=\"${searchpath}\"\n+        break\n+      ],[])\n     done\n-  done\n-  for searchpath in $bdbdirlist ''; do\n-    test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n-        #error \"failed to find bdb 4.8+\"\n-      #endif\n-    ]])],[\n-      if test \"x$bdbpath\" = \"xX\"; then\n-        bdbpath=\"${searchpath}\"\n-      fi\n-    ],[\n-      continue\n-    ])\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n-        #error \"failed to find bdb 4.8\"\n-      #endif\n-    ]])],[\n-      bdb48path=\"${searchpath}\"\n-      break\n-    ],[])\n-  done\n-  if test \"x$bdbpath\" = \"xX\"; then\n-    AC_MSG_RESULT([no])\n-    AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n-  elif test \"x$bdb48path\" = \"xX\"; then\n-    BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n-    AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n-      AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n-    ],[\n-      AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n-    ])\n+    if test \"x$bdbpath\" = \"xX\"; then\n+      AC_MSG_RESULT([no])\n+      AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    elif test \"x$bdb48path\" = \"xX\"; then\n+      BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n+      AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n+        AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n+      ],[\n+        AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n+      ])\n+    else\n+      BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n+      bdbpath=\"${bdb48path}\"\n+    fi\n   else\n-    BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n-    bdbpath=\"${bdb48path}\"\n+    BDB_CPPFLAGS=${BDB_CFLAGS}\n   fi\n   AC_SUBST(BDB_CPPFLAGS)\n   \n-  # TODO: Ideally this could find the library version and make sure it matches the headers being used\n-  for searchlib in db_cxx-4.8 db_cxx; do\n-    AC_CHECK_LIB([$searchlib],[main],[\n-      BDB_LIBS=\"-l${searchlib}\"\n-      break\n-    ])\n-  done\n   if test \"x$BDB_LIBS\" = \"x\"; then\n-      AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    # TODO: Ideally this could find the library version and make sure it matches the headers being used\n+    for searchlib in db_cxx-4.8 db_cxx; do\n+      AC_CHECK_LIB([$searchlib],[main],[\n+        BDB_LIBS=\"-l${searchlib}\"\n+        break\n+      ])\n+    done\n+    if test \"x$BDB_LIBS\" = \"x\"; then\n+        AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    fi\n   fi\n   AC_SUBST(BDB_LIBS)\n ])"
      }
    ]
  },
  {
    "sha": "5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2MyZWJiNjE5YjZiYzcxMjVlNmE1ZjgzZjg2MGRmY2FhNzU5ZDkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T09:58:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T12:01:41Z"
      },
      "message": "Update OpenBSD and FreeBSD build steps\n\nRe-try with most recent versions, and use BDB_CFLAGS/BDB_LIBS to\ndirectly point at BerkeleyDB instead of CPPFLAGS hacks.",
      "tree": {
        "sha": "da367badf48c3712b9ae98ca3adc53c6157b39ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da367badf48c3712b9ae98ca3adc53c6157b39ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8713de83a076c0e8e80f3bb0a6edf1f17d3856db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8713de83a076c0e8e80f3bb0a6edf1f17d3856db"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f4a9826d8079a57185be0e43a57a87854dc3140c",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 5.9)\n+(updated for OpenBSD 6.0)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n@@ -124,7 +124,7 @@ To configure with wallet:\n ```bash\n ./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n     CC=egcc CXX=eg++ CPP=ecpp \\\n-    LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n To configure without wallet:\n@@ -142,6 +142,8 @@ gmake check\n Clang (not currently working)\n ------------------------------\n \n+WARNING: This is outdated, needs to be updated for OpenBSD 6.0 and re-tried.\n+\n Using a newer g++ results in linking the new code to a new libstdc++.\n Libraries built with the old g++, will still import the old library.\n This gives conflicts, necessitating rebuild of all C++ dependencies of the application."
      },
      {
        "sha": "31a88a1b18c64c214aad5ea5ad75ac79d25aa57a",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
        "patch": "@@ -315,7 +315,7 @@ For further documentation on the depends system see [README.md](../depends/READM\n Building on FreeBSD\n --------------------\n \n-(Updated as of FreeBSD 10.3)\n+(Updated as of FreeBSD 11.0)\n \n Clang is installed by default as `cc` compiler, this makes it easier to get\n started than on [OpenBSD](build-openbsd.md). Installing dependencies:\n@@ -337,7 +337,7 @@ with 4.8-built Bitcoin Core is needed follow the steps under \"Berkeley DB\" above\n Then build using:\n \n     ./autogen.sh\n-    ./configure --with-incompatible-bdb CPPFLAGS=-I/usr/local/include/db5 LDFLAGS=-L/usr/local/lib/db5\n+    ./configure --with-incompatible-bdb BDB_CFLAGS=\"-I/usr/local/include/db5\" BDB_LIBS=\"-L/usr/local/lib -ldb_cxx-5\"\n     make\n \n *Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement)."
      }
    ]
  },
  {
    "sha": "729de15b6365face6ae9e12a03624da33a6302f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjlkZTE1YjYzNjVmYWNlNmFlOWUxMmEwMzYyNGRhMzNhNjMwMmYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T12:03:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T12:03:57Z"
      },
      "message": "Merge #9604: [Trivial] add comment about setting peer as HB peer.\n\ndd5b011 [Trivial] add comment about setting peer as HB peer. (John Newbery)",
      "tree": {
        "sha": "7c93bffbb4ce457da7b6b957f4fbd935613f4462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c93bffbb4ce457da7b6b957f4fbd935613f4462"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/729de15b6365face6ae9e12a03624da33a6302f0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmbetAAoJEHSBCwEjRsmmORsIAII0DsYucc5oQ1kdTBzwW+Vt\nBynxZ9iYG/CK/k994ovdE5zVsoJH+chvP6++/f630WyYzEJ06IasFwAFRtrZXwp9\nMotHDeq+4FUepTEs+pA1ButvIU2BlxXdG4S2aRMPM4tQqqhhm00ztuumnb4R3nu1\n8FFdOEQV/RJ2mHAqKOXuy85n5lWjifcpgr+3OIwo3/VE+7bu5OzYdWcecjAY3DdV\n83qVMVfpEaYRhovnDTWungSUbqSyLDq+W/iCnZakGPcG8dm4hgjLC2NRyW/uGmCi\nKv1a8nJ9vQLKPe1OvtYyj8xKUqJyPRiZfAZs3PfLDjQxd/9XnFBVblCKmWiBGeA=\n=Mhs7\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c93bffbb4ce457da7b6b957f4fbd935613f4462\nparent 02464da5e4aa8c19d4fff3859dcdee822e2af78c\nparent dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486469001 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486469037 +0100\n\nMerge #9604: [Trivial] add comment about setting peer as HB peer.\n\ndd5b011 [Trivial] add comment about setting peer as HB peer. (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/729de15b6365face6ae9e12a03624da33a6302f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      },
      {
        "sha": "dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd5b0114cf9021e8639e48c2a33f0aaf82aeb14e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bb14e69d83c236601661be0003f2ccea33e0a14f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729de15b6365face6ae9e12a03624da33a6302f0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729de15b6365face6ae9e12a03624da33a6302f0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=729de15b6365face6ae9e12a03624da33a6302f0",
        "patch": "@@ -863,7 +863,15 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n                 Misbehaving(it->second.first, nDoS);\n         }\n     }\n-    else if (state.IsValid() && !IsInitialBlockDownload() && mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n+    // Check that:\n+    // 1. The block is valid\n+    // 2. We're not in initial block download\n+    // 3. This is currently the best block we're aware of. We haven't updated\n+    //    the tip yet so we have no way to check this directly here. Instead we\n+    //    just check that there are currently no other blocks in flight.\n+    else if (state.IsValid() &&\n+             !IsInitialBlockDownload() &&\n+             mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n         if (it != mapBlockSource.end()) {\n             MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, *connman);\n         }"
      }
    ]
  },
  {
    "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzA5ZmU3ZmZjNDRhZTE0YmJkMjQwM2NkZmJmYTRmY2Y5NGNlZjZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T14:25:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T14:28:50Z"
      },
      "message": "Merge #9532: Remove unused variables\n\n90fd29b Remove unused int64_t nSinceLastSeen (practicalswift)\nac4a095 Remove unused Python variables (practicalswift)",
      "tree": {
        "sha": "9f6005c08a05024d07bcbf358f9b170d3c77f857",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f6005c08a05024d07bcbf358f9b170d3c77f857"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmdmiAAoJEHSBCwEjRsmmMwMIAMa1ffF08b4/Q0/BCnRChV51\ngiiA4DQhTR2Atbfcjt8xYudpyExTa1HvobgZ+eUdGp0hpuia1HHB5xwy6Vw7G1H4\numtWiggcwEyI2TSJOpW5L1VWD5rwh4vK3JGp/Z9hmERXuradyWX1kUTTPWtRubFk\nUqnxaccWcCWuXxnMUanMB/ZfIKu2HymVzPdqjTjWGENtWNFGvkPeG3SPb+Z6etVf\nAf3gbq4ejL2YlQMKIoAA1n6C8Uz9HmlBDLy7PYyEMCWhoOvbUobGemTUwlc4guNc\nGTQnuLhgDODfnAnyZIc78CvXQRs7MT2a7Vo8P1y8YqQ+OnXSwkW1dl0szTbAH+s=\n=c/FM\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f6005c08a05024d07bcbf358f9b170d3c77f857\nparent 729de15b6365face6ae9e12a03624da33a6302f0\nparent 90fd29bd0dcbaf5d5c4ef9e69824297c35f0b88e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486477526 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486477730 +0100\n\nMerge #9532: Remove unused variables\n\n90fd29b Remove unused int64_t nSinceLastSeen (practicalswift)\nac4a095 Remove unused Python variables (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729de15b6365face6ae9e12a03624da33a6302f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729de15b6365face6ae9e12a03624da33a6302f0"
      },
      {
        "sha": "90fd29bd0dcbaf5d5c4ef9e69824297c35f0b88e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90fd29bd0dcbaf5d5c4ef9e69824297c35f0b88e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90fd29bd0dcbaf5d5c4ef9e69824297c35f0b88e"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 2,
      "deletions": 11
    },
    "files": [
      {
        "sha": "0d09692b36f03bcd73c2f1db4788551512c7282b",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -84,7 +84,6 @@ def b58decode_chk(v):\n     result = b58decode(v)\n     if result is None:\n         return None\n-    h3 = checksum(result[:-4])\n     if result[-4:] == checksum(result[:-4]):\n         return result[:-4]\n     else:"
      },
      {
        "sha": "ac0701e6be6070addb4a66441b675f5b84fc554b",
        "filename": "contrib/testgen/gen_base58_test_vectors.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/contrib/testgen/gen_base58_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/contrib/testgen/gen_base58_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_base58_test_vectors.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -45,7 +45,6 @@ def is_valid(v):\n     result = b58decode_chk(v)\n     if result is None:\n         return False\n-    valid = False\n     for template in templates:\n         prefix = str(bytearray(template[0]))\n         suffix = str(bytearray(template[2]))"
      },
      {
        "sha": "8b1403083f29832edf8c621173ff5b7c1b5db7d8",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -22,7 +22,7 @@ def __init__(self):\n     def setup_network(self):\n         self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n-        with open(self.alert_filename, 'w', encoding='utf8') as f:\n+        with open(self.alert_filename, 'w', encoding='utf8'):\n             pass  # Just open then close to create zero-length file\n         self.nodes.append(start_node(0, self.options.tmpdir,\n                             [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))"
      },
      {
        "sha": "2f339bb54f6a1ec430e97581fdde649e7d300a16",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -951,7 +951,6 @@ def test_tx_relay_after_segwit_activation(self):\n         tx.rehash()\n \n         tx_hash = tx.sha256\n-        tx_value = tx.vout[0].nValue\n \n         # Verify that unnecessary witnesses are rejected.\n         self.test_node.announce_tx_and_wait_for_getdata(tx)"
      },
      {
        "sha": "1b90b23330f046400fb79b21dbb39ace6fbfa96e",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -14,7 +14,6 @@ def get_sub_array_from_array(object_array, to_match):\n         Finds and returns a sub array from an array of arrays.\n         to_match should be a unique idetifier of a sub array\n     '''\n-    num_matched = 0\n     for item in object_array:\n         all_match = True\n         for key,value in to_match.items():\n@@ -104,7 +103,7 @@ def run_test(self):\n         received_by_account_json = get_sub_array_from_array(self.nodes[1].listreceivedbyaccount(),{\"account\":account})\n         if len(received_by_account_json) == 0:\n             raise AssertionError(\"No accounts found in node\")\n-        balance_by_account = rec_by_accountArr = self.nodes[1].getreceivedbyaccount(account)\n+        balance_by_account = self.nodes[1].getreceivedbyaccount(account)\n \n         txid = self.nodes[0].sendtoaddress(addr, 0.1)\n         self.sync_all()"
      },
      {
        "sha": "2b29dfdd2bd923ce65536757e3e0d5b0ce9db87e",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -393,7 +393,6 @@ def test_too_many_replacements(self):\n         utxo = make_utxo(self.nodes[0], initial_nValue)\n         fee = int(0.0001*COIN)\n         split_value = int((initial_nValue-fee)/(MAX_REPLACEMENT_LIMIT+1))\n-        actual_fee = initial_nValue - split_value*(MAX_REPLACEMENT_LIMIT+1)\n \n         outputs = []\n         for i in range(MAX_REPLACEMENT_LIMIT+1):"
      },
      {
        "sha": "c82e0adffa52335a0527fc961801ffc3b9bc8864",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -359,7 +359,6 @@ def run_test (self):\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\":singletxid, \"vout\":0}], {chain_addrs[0]:node0_balance/2-Decimal('0.01'), chain_addrs[1]:node0_balance/2-Decimal('0.01')})\n         signedtx = self.nodes[0].signrawtransaction(rawtx)\n         singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n-        txids = [singletxid, singletxid]\n         self.nodes[0].generate(1)\n \n         # Make a long chain of unconfirmed payments without hitting mempool limit"
      },
      {
        "sha": "f3c238fbb2cb054e123b25d411b48a0666709bac",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "patch": "@@ -54,11 +54,8 @@ double CAddrInfo::GetChance(int64_t nNow) const\n {\n     double fChance = 1.0;\n \n-    int64_t nSinceLastSeen = nNow - nTime;\n     int64_t nSinceLastTry = nNow - nLastTry;\n \n-    if (nSinceLastSeen < 0)\n-        nSinceLastSeen = 0;\n     if (nSinceLastTry < 0)\n         nSinceLastTry = 0;\n "
      }
    ]
  },
  {
    "sha": "a47da4b6fecaba81dafe777b25be24e04a428e37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDdkYTRiNmZlY2FiYTgxZGFmZTc3N2IyNWJlMjRlMDRhNDI4ZTM3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-03T08:20:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-07T14:46:38Z"
      },
      "message": "Use z = std::max(x - y, 0); instead of z = x - y; if (z < 0) z = 0;",
      "tree": {
        "sha": "2ef78a9d89b312b71aa06316443ce2de96d58c8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ef78a9d89b312b71aa06316443ce2de96d58c8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a47da4b6fecaba81dafe777b25be24e04a428e37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a47da4b6fecaba81dafe777b25be24e04a428e37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a47da4b6fecaba81dafe777b25be24e04a428e37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a47da4b6fecaba81dafe777b25be24e04a428e37/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b6ab4c6305184ca31ebe27282bb58a38a3ec7f3a",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a47da4b6fecaba81dafe777b25be24e04a428e37/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a47da4b6fecaba81dafe777b25be24e04a428e37/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=a47da4b6fecaba81dafe777b25be24e04a428e37",
        "patch": "@@ -53,11 +53,7 @@ bool CAddrInfo::IsTerrible(int64_t nNow) const\n double CAddrInfo::GetChance(int64_t nNow) const\n {\n     double fChance = 1.0;\n-\n-    int64_t nSinceLastTry = nNow - nLastTry;\n-\n-    if (nSinceLastTry < 0)\n-        nSinceLastTry = 0;\n+    int64_t nSinceLastTry = std::max<int64_t>(nNow - nLastTry, 0);\n \n     // deprioritize very recent attempts away\n     if (nSinceLastTry < 60 * 10)"
      },
      {
        "sha": "d4fd8bd37262cf9025737de0e27b5c29a7c42fb4",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a47da4b6fecaba81dafe777b25be24e04a428e37/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a47da4b6fecaba81dafe777b25be24e04a428e37/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a47da4b6fecaba81dafe777b25be24e04a428e37",
        "patch": "@@ -563,9 +563,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         }\n \n         // after fee\n-        nAfterFee = nAmount - nPayFee;\n-        if (nAfterFee < 0)\n-            nAfterFee = 0;\n+        nAfterFee = std::max<CAmount>(nAmount - nPayFee, 0);\n     }\n \n     // actually update labels"
      }
    ]
  },
  {
    "sha": "9949ebfa6a548260858df429f4d0e716e0a26065",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTQ5ZWJmYTZhNTQ4MjYwODU4ZGY0MjlmNGQwZTcxNmUwYTI2MDY1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T16:20:06Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T16:21:14Z"
      },
      "message": "[Trivial] Remove incorrect help message from gettxoutproof()",
      "tree": {
        "sha": "4fd2671123d75a81a0df0b2ac90d760df9a94a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fd2671123d75a81a0df0b2ac90d760df9a94a39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9949ebfa6a548260858df429f4d0e716e0a26065",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9949ebfa6a548260858df429f4d0e716e0a26065",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9949ebfa6a548260858df429f4d0e716e0a26065",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9949ebfa6a548260858df429f4d0e716e0a26065/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729de15b6365face6ae9e12a03624da33a6302f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729de15b6365face6ae9e12a03624da33a6302f0"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bf16f27498f8778dfa573568cdaf8f0c80a2ec2f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9949ebfa6a548260858df429f4d0e716e0a26065/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9949ebfa6a548260858df429f4d0e716e0a26065/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9949ebfa6a548260858df429f4d0e716e0a26065",
        "patch": "@@ -245,7 +245,6 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n             \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n             \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n             \"specify the block in which the transaction is included manually (by blockhash).\\n\"\n-            \"\\nReturn the raw transaction data.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txids\\\"       (string) A json array of txids to filter\\n\"\n             \"    [\\n\""
      }
    ]
  },
  {
    "sha": "29c53289a9e6bb34a098ea87d923968e3ac6d75d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWM1MzI4OWE5ZTZiYjM0YTA5OGVhODdkOTIzOTY4ZTNhYzZkNzVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T18:07:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T18:07:29Z"
      },
      "message": "bench: Fix initialization order in registration\n\nThe initialization order of global data structures in different\nimplementation units is undefined. Making use of this is essentially\ngambling on what the linker does, the so-called [Static initialization\norder fiasco](https://isocpp.org/wiki/faq/ctors#static-init-order).\n\nIn this case it apparently worked on Linux but failed on OpenBSD and\nFreeBSD.\n\nTo create it on first use, make the registration structure local to\na function.\n\nFixes #8910.",
      "tree": {
        "sha": "5f9a42f47526e1daa742ac1adeb6617eef37740f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f9a42f47526e1daa742ac1adeb6617eef37740f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3c9df4f713c1408ebf8ffe4bc0fc1fe8d0217902",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "patch": "@@ -9,7 +9,10 @@\n #include <iomanip>\n #include <sys/time.h>\n \n-std::map<std::string, benchmark::BenchFunction> benchmark::BenchRunner::benchmarks;\n+benchmark::BenchRunner::BenchmarkMap &benchmark::BenchRunner::benchmarks() {\n+    static std::map<std::string, benchmark::BenchFunction> benchmarks_map;\n+    return benchmarks_map;\n+}\n \n static double gettimedouble(void) {\n     struct timeval tv;\n@@ -19,7 +22,7 @@ static double gettimedouble(void) {\n \n benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func)\n {\n-    benchmarks.insert(std::make_pair(name, func));\n+    benchmarks().insert(std::make_pair(name, func));\n }\n \n void\n@@ -29,12 +32,9 @@ benchmark::BenchRunner::RunAll(double elapsedTimeForOne)\n     std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \",\"\n               << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n \n-    for (std::map<std::string,benchmark::BenchFunction>::iterator it = benchmarks.begin();\n-         it != benchmarks.end(); ++it) {\n-\n-        State state(it->first, elapsedTimeForOne);\n-        benchmark::BenchFunction& func = it->second;\n-        func(state);\n+    for (const auto &p: benchmarks()) {\n+        State state(p.first, elapsedTimeForOne);\n+        p.second(state);\n     }\n     perf_fini();\n }"
      },
      {
        "sha": "0e7605c726779776554ff7af6a95778eae5d05e0",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "patch": "@@ -63,7 +63,8 @@ namespace benchmark {\n \n     class BenchRunner\n     {\n-        static std::map<std::string, BenchFunction> benchmarks;\n+        typedef std::map<std::string, BenchFunction> BenchmarkMap;\n+        static BenchmarkMap &benchmarks();\n \n     public:\n         BenchRunner(std::string name, BenchFunction func);"
      }
    ]
  },
  {
    "sha": "618ee9249b178d94911ea66cb4b5291f000ef1fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MThlZTkyNDliMTc4ZDk0OTExZWE2NmNiNGI1MjkxZjAwMGVmMWZi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T19:15:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T19:15:28Z"
      },
      "message": "Further-enforce lockordering by enforcing directly after TRY_LOCKs",
      "tree": {
        "sha": "dde47fee6a3afbdd91f54b35173e25812509de87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dde47fee6a3afbdd91f54b35173e25812509de87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/618ee9249b178d94911ea66cb4b5291f000ef1fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618ee9249b178d94911ea66cb4b5291f000ef1fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/618ee9249b178d94911ea66cb4b5291f000ef1fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618ee9249b178d94911ea66cb4b5291f000ef1fb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a962d4540a253f63803d1f145fa26b938e69633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a962d4540a253f63803d1f145fa26b938e69633",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a962d4540a253f63803d1f145fa26b938e69633"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 13,
      "deletions": 15
    },
    "files": [
      {
        "sha": "fce57f1df9f72ed068afae3a505a69dd67f6a1ac",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 15,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/618ee9249b178d94911ea66cb4b5291f000ef1fb/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/618ee9249b178d94911ea66cb4b5291f000ef1fb/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=618ee9249b178d94911ea66cb4b5291f000ef1fb",
        "patch": "@@ -110,21 +110,19 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n-    if (!fTry) {\n-        BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n-            if (i.first == c)\n-                break;\n-\n-            std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n-            if (lockdata.lockorders.count(p1))\n-                continue;\n-            lockdata.lockorders[p1] = (*lockstack);\n-\n-            std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            lockdata.invlockorders.insert(p2);\n-            if (lockdata.lockorders.count(p2))\n-                potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n-        }\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+        if (i.first == c)\n+            break;\n+\n+        std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n+        if (lockdata.lockorders.count(p1))\n+            continue;\n+        lockdata.lockorders[p1] = (*lockstack);\n+\n+        std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n+        lockdata.invlockorders.insert(p2);\n+        if (lockdata.lockorders.count(p2))\n+            potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2JkMTE5NmI3YTA3YjA4Y2ZkOTE0MTdmMmU4ZGRkMDlkOWYyMDgy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T20:23:17Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:44:46Z"
      },
      "message": "Disconnect peers which we do not receive VERACKs from within 60 sec",
      "tree": {
        "sha": "9498b7cb6c5713d3cbe88a94a7c131af0072dab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9498b7cb6c5713d3cbe88a94a7c131af0072dab8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3394f8a08ea43a72fa4d19c58fa3df51f31c0d78",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
        "patch": "@@ -1323,6 +1323,11 @@ void CConnman::ThreadSocketHandler()\n                     LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n                     pnode->fDisconnect = true;\n                 }\n+                else if (!pnode->fSuccessfullyConnected)\n+                {\n+                    LogPrintf(\"version handshake timeout from %d\\n\", pnode->id);\n+                    pnode->fDisconnect = true;\n+                }\n             }\n         }\n         {"
      }
    ]
  },
  {
    "sha": "d304fef3746039183f51b3ac8f4774dcf3a64f59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzA0ZmVmMzc0NjAzOTE4M2Y1MWIzYWM4ZjQ3NzRkY2YzYTY0ZjU5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-08T03:40:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-08T03:43:13Z"
      },
      "message": "Merge #9712: bench: Fix initialization order in registration\n\n29c5328 bench: Fix initialization order in registration (Wladimir J. van der Laan)",
      "tree": {
        "sha": "5f9a42f47526e1daa742ac1adeb6617eef37740f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f9a42f47526e1daa742ac1adeb6617eef37740f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYmpPRAAoJEC1/I3LlD+E3SxQH/2Sl1tFCn+tpnhnFAXtpbK2x\nDRCmvsMhxm+dknetT3aeXNtRW6XGfv0OKXT9/YSGnWTcEOkhwqOE33ulkzflexJo\n72pzBwQ5/a6HKxYshu+LUInGeqPJDSCA3oYX4pM4x2mvudiX8nLcfuwujSfbh71f\nsB7ConLmOD7g1r7kMdl5/4vSUMszIMZ4V/QPh+5Mqitk3f6F+ccLtgrnkO8Ncjk8\nzAkiiiLZSu9ZVkxLhuuTrZm/WJVAOpox660Jk7trCHw7ifSSLIH+vl48uljGm8Gz\njjpRY4uTAM2DwCNKKTuMuRcwsk/hUaVZ80isIw3y9ZMMoBkFwJZB+sGQrXVWN5Q=\n=3/Fu\n-----END PGP SIGNATURE-----",
        "payload": "tree 5f9a42f47526e1daa742ac1adeb6617eef37740f\nparent b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b\nparent 29c53289a9e6bb34a098ea87d923968e3ac6d75d\nauthor MarcoFalke <falke.marco@gmail.com> 1486525219 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1486525393 +0100\n\nMerge #9712: bench: Fix initialization order in registration\n\n29c5328 bench: Fix initialization order in registration (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d304fef3746039183f51b3ac8f4774dcf3a64f59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b"
      },
      {
        "sha": "29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29c53289a9e6bb34a098ea87d923968e3ac6d75d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3c9df4f713c1408ebf8ffe4bc0fc1fe8d0217902",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d304fef3746039183f51b3ac8f4774dcf3a64f59/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d304fef3746039183f51b3ac8f4774dcf3a64f59/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "patch": "@@ -9,7 +9,10 @@\n #include <iomanip>\n #include <sys/time.h>\n \n-std::map<std::string, benchmark::BenchFunction> benchmark::BenchRunner::benchmarks;\n+benchmark::BenchRunner::BenchmarkMap &benchmark::BenchRunner::benchmarks() {\n+    static std::map<std::string, benchmark::BenchFunction> benchmarks_map;\n+    return benchmarks_map;\n+}\n \n static double gettimedouble(void) {\n     struct timeval tv;\n@@ -19,7 +22,7 @@ static double gettimedouble(void) {\n \n benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func)\n {\n-    benchmarks.insert(std::make_pair(name, func));\n+    benchmarks().insert(std::make_pair(name, func));\n }\n \n void\n@@ -29,12 +32,9 @@ benchmark::BenchRunner::RunAll(double elapsedTimeForOne)\n     std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \",\"\n               << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n \n-    for (std::map<std::string,benchmark::BenchFunction>::iterator it = benchmarks.begin();\n-         it != benchmarks.end(); ++it) {\n-\n-        State state(it->first, elapsedTimeForOne);\n-        benchmark::BenchFunction& func = it->second;\n-        func(state);\n+    for (const auto &p: benchmarks()) {\n+        State state(p.first, elapsedTimeForOne);\n+        p.second(state);\n     }\n     perf_fini();\n }"
      },
      {
        "sha": "0e7605c726779776554ff7af6a95778eae5d05e0",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d304fef3746039183f51b3ac8f4774dcf3a64f59/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d304fef3746039183f51b3ac8f4774dcf3a64f59/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "patch": "@@ -63,7 +63,8 @@ namespace benchmark {\n \n     class BenchRunner\n     {\n-        static std::map<std::string, BenchFunction> benchmarks;\n+        typedef std::map<std::string, BenchFunction> BenchmarkMap;\n+        static BenchmarkMap &benchmarks();\n \n     public:\n         BenchRunner(std::string name, BenchFunction func);"
      }
    ]
  },
  {
    "sha": "6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTU1NTE1YTliOGYzY2Q0MzhjOWI4NTExMzFkMThlYmIxM2YxYTU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-08T13:18:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-08T13:38:28Z"
      },
      "message": "Merge #9705: build: Add options to override BDB cflags/libs\n\n5cc2ebb Update OpenBSD and FreeBSD build steps (Wladimir J. van der Laan)\n8713de8 build: Add options to override BDB cflags/libs (Wladimir J. van der Laan)",
      "tree": {
        "sha": "e84862e39c325cf6823b2fde2984213a5f026572",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e84862e39c325cf6823b2fde2984213a5f026572"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmx9UAAoJEHSBCwEjRsmmA2UH/iqj+CfEdZmNxscqUXCrNPi8\nXJitYn4Lnin3gLASBvPDLRpeMF+0Tg7HqXIXdsuBASKPw+ZYNLKSZ/HDADf6Uqxb\n4/vva6aIQRHGvVdKkYYFnZWnjZm10yMT8gvoHZDwrdEK8Vrd1aRQoJQ545oSXlOB\nmD7UJzuJbgpv230NImF+KHh5dLcqgFl4rYjAGhtjN4yEo8qhcHaam4n2yN6AebYy\nnO5vcpH78ZrMV72smkuUu39OJVJSaiQfitvZPrmv0h0rQe1O8RtPXQHPpQiXUBXi\nlrlDqpDGcI5rEQvtpcMA/sRHRqymFCRmNLnbWitG7u3xcgzWYspRR3RqTzbJ3mY=\n=2e8W\n-----END PGP SIGNATURE-----",
        "payload": "tree e84862e39c325cf6823b2fde2984213a5f026572\nparent d304fef3746039183f51b3ac8f4774dcf3a64f59\nparent 5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486559898 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486561108 +0100\n\nMerge #9705: build: Add options to override BDB cflags/libs\n\n5cc2ebb Update OpenBSD and FreeBSD build steps (Wladimir J. van der Laan)\n8713de8 build: Add options to override BDB cflags/libs (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d304fef3746039183f51b3ac8f4774dcf3a64f59"
      },
      {
        "sha": "5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cc2ebb619b6bc7125e6a5f83f860dfcaa759d93"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 70,
      "deletions": 60
    },
    "files": [
      {
        "sha": "980f1e8f19cd2f1351be332d4908f7ba75ce4cfb",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 64,
        "deletions": 56,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "patch": "@@ -3,68 +3,76 @@ dnl Distributed under the MIT software license, see the accompanying\n dnl file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n AC_DEFUN([BITCOIN_FIND_BDB48],[\n-  AC_MSG_CHECKING([for Berkeley DB C++ headers])\n-  BDB_CPPFLAGS=\n-  BDB_LIBS=\n-  bdbpath=X\n-  bdb48path=X\n-  bdbdirlist=\n-  for _vn in 4.8 48 4 5 ''; do\n-    for _pfx in b lib ''; do\n-      bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+  AC_ARG_VAR(BDB_CFLAGS, [C compiler flags for BerkeleyDB, bypasses autodetection])\n+  AC_ARG_VAR(BDB_LIBS, [Linker flags for BerkeleyDB, bypasses autodetection])\n+\n+  if test \"x$BDB_CFLAGS\" = \"x\"; then\n+    AC_MSG_CHECKING([for Berkeley DB C++ headers])\n+    BDB_CPPFLAGS=\n+    bdbpath=X\n+    bdb48path=X\n+    bdbdirlist=\n+    for _vn in 4.8 48 4 5 ''; do\n+      for _pfx in b lib ''; do\n+        bdbdirlist=\"$bdbdirlist ${_pfx}db${_vn}\"\n+      done\n+    done\n+    for searchpath in $bdbdirlist ''; do\n+      test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n+          #error \"failed to find bdb 4.8+\"\n+        #endif\n+      ]])],[\n+        if test \"x$bdbpath\" = \"xX\"; then\n+          bdbpath=\"${searchpath}\"\n+        fi\n+      ],[\n+        continue\n+      ])\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+        #include <${searchpath}db_cxx.h>\n+      ]],[[\n+        #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n+          #error \"failed to find bdb 4.8\"\n+        #endif\n+      ]])],[\n+        bdb48path=\"${searchpath}\"\n+        break\n+      ],[])\n     done\n-  done\n-  for searchpath in $bdbdirlist ''; do\n-    test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n-        #error \"failed to find bdb 4.8+\"\n-      #endif\n-    ]])],[\n-      if test \"x$bdbpath\" = \"xX\"; then\n-        bdbpath=\"${searchpath}\"\n-      fi\n-    ],[\n-      continue\n-    ])\n-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-      #include <${searchpath}db_cxx.h>\n-    ]],[[\n-      #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n-        #error \"failed to find bdb 4.8\"\n-      #endif\n-    ]])],[\n-      bdb48path=\"${searchpath}\"\n-      break\n-    ],[])\n-  done\n-  if test \"x$bdbpath\" = \"xX\"; then\n-    AC_MSG_RESULT([no])\n-    AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n-  elif test \"x$bdb48path\" = \"xX\"; then\n-    BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n-    AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n-      AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n-    ],[\n-      AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n-    ])\n+    if test \"x$bdbpath\" = \"xX\"; then\n+      AC_MSG_RESULT([no])\n+      AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    elif test \"x$bdb48path\" = \"xX\"; then\n+      BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n+      AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n+        AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n+      ],[\n+        AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n+      ])\n+    else\n+      BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n+      bdbpath=\"${bdb48path}\"\n+    fi\n   else\n-    BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n-    bdbpath=\"${bdb48path}\"\n+    BDB_CPPFLAGS=${BDB_CFLAGS}\n   fi\n   AC_SUBST(BDB_CPPFLAGS)\n   \n-  # TODO: Ideally this could find the library version and make sure it matches the headers being used\n-  for searchlib in db_cxx-4.8 db_cxx; do\n-    AC_CHECK_LIB([$searchlib],[main],[\n-      BDB_LIBS=\"-l${searchlib}\"\n-      break\n-    ])\n-  done\n   if test \"x$BDB_LIBS\" = \"x\"; then\n-      AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    # TODO: Ideally this could find the library version and make sure it matches the headers being used\n+    for searchlib in db_cxx-4.8 db_cxx; do\n+      AC_CHECK_LIB([$searchlib],[main],[\n+        BDB_LIBS=\"-l${searchlib}\"\n+        break\n+      ])\n+    done\n+    if test \"x$BDB_LIBS\" = \"x\"; then\n+        AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n+    fi\n   fi\n   AC_SUBST(BDB_LIBS)\n ])"
      },
      {
        "sha": "f4a9826d8079a57185be0e43a57a87854dc3140c",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 5.9)\n+(updated for OpenBSD 6.0)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n@@ -124,7 +124,7 @@ To configure with wallet:\n ```bash\n ./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n     CC=egcc CXX=eg++ CPP=ecpp \\\n-    LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n+    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n To configure without wallet:\n@@ -142,6 +142,8 @@ gmake check\n Clang (not currently working)\n ------------------------------\n \n+WARNING: This is outdated, needs to be updated for OpenBSD 6.0 and re-tried.\n+\n Using a newer g++ results in linking the new code to a new libstdc++.\n Libraries built with the old g++, will still import the old library.\n This gives conflicts, necessitating rebuild of all C++ dependencies of the application."
      },
      {
        "sha": "31a88a1b18c64c214aad5ea5ad75ac79d25aa57a",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a55515a9b8f3cd438c9b851131d18ebb13f1a58/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "patch": "@@ -315,7 +315,7 @@ For further documentation on the depends system see [README.md](../depends/READM\n Building on FreeBSD\n --------------------\n \n-(Updated as of FreeBSD 10.3)\n+(Updated as of FreeBSD 11.0)\n \n Clang is installed by default as `cc` compiler, this makes it easier to get\n started than on [OpenBSD](build-openbsd.md). Installing dependencies:\n@@ -337,7 +337,7 @@ with 4.8-built Bitcoin Core is needed follow the steps under \"Berkeley DB\" above\n Then build using:\n \n     ./autogen.sh\n-    ./configure --with-incompatible-bdb CPPFLAGS=-I/usr/local/include/db5 LDFLAGS=-L/usr/local/lib/db5\n+    ./configure --with-incompatible-bdb BDB_CFLAGS=\"-I/usr/local/include/db5\" BDB_LIBS=\"-L/usr/local/lib -ldb_cxx-5\"\n     make\n \n *Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement)."
      }
    ]
  },
  {
    "sha": "dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDE2M2Y1Nzg4Njk5MWYzZDU2NGM5YjBiMWJmMmNjYzhmNGJhNzg0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-08T13:46:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-08T13:46:43Z"
      },
      "message": "Merge #9674: Always enforce strict lock ordering (try or not)\n\n618ee92 Further-enforce lockordering by enforcing directly after TRY_LOCKs (Matt Corallo)\n2a962d4 Fixup style a bit by moving { to the same line as if statements (Matt Corallo)\n8465631 Always enforce lock strict lock ordering (try or not) (Matt Corallo)\nfd13eca Lock cs_vSend and cs_inventory in a consistent order even in TRY (Matt Corallo)",
      "tree": {
        "sha": "38a182fcb34ffc35c3eb59ce96c5e170e0bc3980",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38a182fcb34ffc35c3eb59ce96c5e170e0bc3980"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYmyFDAAoJEHSBCwEjRsmmdkkH/1Hl13jtx23gEvzpRdaOe+Xs\nmSB1RVUA/stzqL4LrEfMPQzDWDKaud1H9OZGVCosxb/C8DDaQh56LAV9AcoJ/T7w\na438PEeJs48U1LZxKYpVhpX8CUalaR82DlA+5xNtnpeVuBQI7K3MRUs0n48Vrs+g\nuNx3Lqv22/Ls7InBWsriU4Yf+QblB/ISUpAIA2W8e8CVwunabbMZwI7AZ5T4pVwQ\nZHUnd14qgSuuQBU5Ql5k33tQBoHKm5xU97L9TwbGQ29vGHQgI+XFPgDTS7bq25DT\nprK5Eqf1pK1d8+WWZjcE69CRweX837njIgXDto683rLNgVYmLP2VD8NBA2on8Dk=\n=191Y\n-----END PGP SIGNATURE-----",
        "payload": "tree 38a182fcb34ffc35c3eb59ce96c5e170e0bc3980\nparent 6a55515a9b8f3cd438c9b851131d18ebb13f1a58\nparent 618ee9249b178d94911ea66cb4b5291f000ef1fb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486561595 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486561603 +0100\n\nMerge #9674: Always enforce strict lock ordering (try or not)\n\n618ee92 Further-enforce lockordering by enforcing directly after TRY_LOCKs (Matt Corallo)\n2a962d4 Fixup style a bit by moving { to the same line as if statements (Matt Corallo)\n8465631 Always enforce lock strict lock ordering (try or not) (Matt Corallo)\nfd13eca Lock cs_vSend and cs_inventory in a consistent order even in TRY (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a55515a9b8f3cd438c9b851131d18ebb13f1a58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a55515a9b8f3cd438c9b851131d18ebb13f1a58"
      },
      {
        "sha": "618ee9249b178d94911ea66cb4b5291f000ef1fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/618ee9249b178d94911ea66cb4b5291f000ef1fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/618ee9249b178d94911ea66cb4b5291f000ef1fb"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 20,
      "deletions": 48
    },
    "files": [
      {
        "sha": "2242afb8634edf1ed6771db2078227109e00815b",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
        "patch": "@@ -1093,20 +1093,18 @@ void CConnman::ThreadSocketHandler()\n             BOOST_FOREACH(CNode* pnode, vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n-                if (pnode->GetRefCount() <= 0)\n-                {\n+                if (pnode->GetRefCount() <= 0) {\n                     bool fDelete = false;\n                     {\n-                        TRY_LOCK(pnode->cs_vSend, lockSend);\n-                        if (lockSend)\n-                        {\n-                                TRY_LOCK(pnode->cs_inventory, lockInv);\n-                                if (lockInv)\n-                                    fDelete = true;\n+                        TRY_LOCK(pnode->cs_inventory, lockInv);\n+                        if (lockInv) {\n+                            TRY_LOCK(pnode->cs_vSend, lockSend);\n+                            if (lockSend) {\n+                                fDelete = true;\n+                            }\n                         }\n                     }\n-                    if (fDelete)\n-                    {\n+                    if (fDelete) {\n                         vNodesDisconnected.remove(pnode);\n                         DeleteNode(pnode);\n                     }"
      },
      {
        "sha": "fce57f1df9f72ed068afae3a505a69dd67f6a1ac",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 38,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
        "patch": "@@ -77,52 +77,28 @@ boost::thread_specific_ptr<LockStack> lockstack;\n \n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\n {\n-    // We attempt to not assert on probably-not deadlocks by assuming that\n-    // a try lock will immediately have otherwise bailed if it had\n-    // failed to get the lock\n-    // We do this by, for the locks which triggered the potential deadlock,\n-    // in either lockorder, checking that the second of the two which is locked\n-    // is only a TRY_LOCK, ignoring locks if they are reentrant.\n-    bool firstLocked = false;\n-    bool secondLocked = false;\n-    bool onlyMaybeDeadlock = false;\n-\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    firstLocked = false;\n-    secondLocked = false;\n     LogPrintf(\"Current lock order is:\\n\");\n     BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n         if (i.first == mismatch.first) {\n             LogPrintf(\" (1)\");\n-            if (!firstLocked && secondLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            firstLocked = true;\n         }\n         if (i.first == mismatch.second) {\n             LogPrintf(\" (2)\");\n-            if (!secondLocked && firstLocked && i.second.fTry)\n-                onlyMaybeDeadlock = true;\n-            secondLocked = true;\n         }\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n-    assert(onlyMaybeDeadlock);\n+    assert(false);\n }\n \n static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n@@ -134,21 +110,19 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n-    if (!fTry) {\n-        BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n-            if (i.first == c)\n-                break;\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+        if (i.first == c)\n+            break;\n \n-            std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n-            if (lockdata.lockorders.count(p1))\n-                continue;\n-            lockdata.lockorders[p1] = (*lockstack);\n+        std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n+        if (lockdata.lockorders.count(p1))\n+            continue;\n+        lockdata.lockorders[p1] = (*lockstack);\n \n-            std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            lockdata.invlockorders.insert(p2);\n-            if (lockdata.lockorders.count(p2))\n-                potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n-        }\n+        std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n+        lockdata.invlockorders.insert(p2);\n+        if (lockdata.lockorders.count(p2))\n+            potential_deadlock_detected(p1, lockdata.lockorders[p2], lockdata.lockorders[p1]);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "9db8eecac1c713c760c0217b6acb7455c657fa8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGI4ZWVjYWMxYzcxM2M3NjBjMDIxN2I2YWNiNzQ1NWM2NTdmYThi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-07T14:56:53Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-08T15:24:02Z"
      },
      "message": "Fix RPC failure testing\n\nMake sure that RPC tests are actually checking failures correctly by:\n\n- Catching JSON RPC exceptions and verifying the error codes and messages.\n- Failing the test case if the JSON RPC exception isn't raised.",
      "tree": {
        "sha": "02faa45b0da7cd2271cf4a3b089e78dd0e308f4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02faa45b0da7cd2271cf4a3b089e78dd0e308f4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9db8eecac1c713c760c0217b6acb7455c657fa8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729de15b6365face6ae9e12a03624da33a6302f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729de15b6365face6ae9e12a03624da33a6302f0"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "da2d8f040f0a2c51121ac688b9dbfaf9067dbcef",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "patch": "@@ -37,7 +37,7 @@ def run_test(self):\n         h = node.help(command='getinfo')\n         assert(h.startswith('getinfo\\n'))\n \n-        assert_raises_jsonrpc(-8, node.help, random='getinfo')\n+        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getinfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "dc8555c44c08cb0a15fbaa9cdd579c7fa25f1521",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9db8eecac1c713c760c0217b6acb7455c657fa8b/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "patch": "@@ -550,13 +550,30 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, fun, *args, **kwds):\n-    '''Check for specific JSONRPC exception code'''\n+def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+    \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n+    and verifies that the error code and message are as expected. Throws AssertionError if\n+    no JSONRPCException was returned or if the error code/message are not as expected.\n+\n+    Args:\n+        code (int), optional: the error code returned by the RPC call (defined\n+            in src/rpc/protocol.h). Set to None if checking the error code is not required.\n+        message (string), optional: [a substring of] the error string returned by the\n+            RPC call. Set to None if checking the error string is not required\n+        fun (function): the function to call. This should be the name of an RPC.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n-        if e.error[\"code\"] != code:\n+        # JSONRPCException was thrown as expected. Check the code and message values are correct.\n+        if (code is not None) and (code != e.error[\"code\"]):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n+        if (message is not None) and (message not in e.error['message']):\n+            raise AssertionError(\"Expected substring not found:\"+e.error['message'])\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n     else:"
      }
    ]
  },
  {
    "sha": "8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWFiYTdhNmI3MzI3YTRjODMzMDhjNjhiNTBmMDdlZDRjMmFhNjc1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:35:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-08T17:05:13Z"
      },
      "message": "qa: mininode learns when a socket connects, not its first action",
      "tree": {
        "sha": "27f1a68f53e54b8817e835888f136d8a38588bca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27f1a68f53e54b8817e835888f136d8a38588bca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cbd1196b7a07b08cfd91417f2e8ddd09d9f2082"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 24,
      "deletions": 12
    },
    "files": [
      {
        "sha": "696a065282c624125718ba54bb58674723115bdf",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
        "patch": "@@ -1614,7 +1614,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1631,14 +1631,16 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n         self.disconnect = False\n         self.nServices = 0\n \n-        # stuff version msg into sendbuf\n-        vt = msg_version()\n-        vt.nServices = services\n-        vt.addrTo.ip = self.dstaddr\n-        vt.addrTo.port = self.dstport\n-        vt.addrFrom.ip = \"0.0.0.0\"\n-        vt.addrFrom.port = 0\n-        self.send_message(vt, True)\n+        if send_version:\n+            # stuff version msg into sendbuf\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            self.send_message(vt, True)\n+\n         print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n             + str(dstport))\n \n@@ -1652,8 +1654,9 @@ def show_debug_msg(self, msg):\n         self.log.debug(msg)\n \n     def handle_connect(self):\n-        self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n-        self.state = \"connected\"\n+        if self.state != \"connected\":\n+            self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n+            self.state = \"connected\"\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n@@ -1681,11 +1684,20 @@ def readable(self):\n \n     def writable(self):\n         with mininode_lock:\n+            pre_connection = self.state == \"connecting\"\n             length = len(self.sendbuf)\n-        return (length > 0)\n+        return (length > 0 or pre_connection)\n \n     def handle_write(self):\n         with mininode_lock:\n+            # asyncore does not expose socket connection, only the first read/write\n+            # event, thus we must check connection manually here to know when we\n+            # actually connect\n+            if self.state == \"connecting\":\n+                self.handle_connect()\n+            if not self.writable():\n+                return\n+\n             try:\n                 sent = self.send(self.sendbuf)\n             except:"
      }
    ]
  },
  {
    "sha": "b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDM2ZjkyZjcyNzY4NmNkOGExMGRkZmY1Y2QyMmVlNjM2NmZlOGM4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:40:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-08T17:05:13Z"
      },
      "message": "qa: Expose on-connection to mininode listeners",
      "tree": {
        "sha": "d09f40037676273d0567db612897e32d2d62e263",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d09f40037676273d0567db612897e32d2d62e263"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b436f92f727686cd8a10ddff5cd22ee6366fe8c8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8aaba7a6b7327a4c83308c68b50f07ed4c2aa675"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b563c58ae1e1a17e50caa42f165a28fd3d739d7",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b436f92f727686cd8a10ddff5cd22ee6366fe8c8/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b436f92f727686cd8a10ddff5cd22ee6366fe8c8/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
        "patch": "@@ -1540,6 +1540,7 @@ def on_ping(self, conn, message):\n         if conn.ver_send > BIP0031_VERSION:\n             conn.send_message(msg_pong(message.nonce))\n     def on_reject(self, conn, message): pass\n+    def on_open(self, conn): pass\n     def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n@@ -1657,6 +1658,7 @@ def handle_connect(self):\n         if self.state != \"connected\":\n             self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n             self.state = \"connected\"\n+            self.cb.on_open(self)\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \""
      }
    ]
  },
  {
    "sha": "c8cee26100c4f5196aff452d75a24ea7f1135595",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGNlZTI2MTAwYzRmNTE5NmFmZjQ1MmQ3NWEyNGVhN2YxMTM1NTk1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T04:07:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T18:51:05Z"
      },
      "message": "Qt/Intro: Update block chain size",
      "tree": {
        "sha": "6890f3df233dc1447c82ea9f2c1622d09700ad26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6890f3df233dc1447c82ea9f2c1622d09700ad26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8cee26100c4f5196aff452d75a24ea7f1135595",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8cee26100c4f5196aff452d75a24ea7f1135595",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8cee26100c4f5196aff452d75a24ea7f1135595",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8cee26100c4f5196aff452d75a24ea7f1135595/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4382fbef56a0e04b0ed834e8b3a3a16f81db149"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9c2aab602bdb0484935dd3ca67d1c069dd2dd740",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8cee26100c4f5196aff452d75a24ea7f1135595/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8cee26100c4f5196aff452d75a24ea7f1135595/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=c8cee26100c4f5196aff452d75a24ea7f1135595",
        "patch": "@@ -23,7 +23,7 @@\n \n static const uint64_t GB_BYTES = 1000000000LL;\n /* Minimum free space (in GB) needed for data directory */\n-static const uint64_t BLOCK_CHAIN_SIZE = 80;\n+static const uint64_t BLOCK_CHAIN_SIZE = 120;\n /* Minimum free space (in GB) needed for data directory when pruned; Does not include prune target */\n static const uint64_t CHAIN_STATE_SIZE = 2;\n /* Total required space (in GB) depending on user choice (prune, not prune) */"
      }
    ]
  },
  {
    "sha": "93ffba7163b4f3c0262c58c1e76e252350e4260e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2ZmYmE3MTYzYjRmM2MwMjYyYzU4YzFlNzZlMjUyMzUwZTQyNjBl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T04:00:16Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T18:51:05Z"
      },
      "message": "Bugfix: Qt/Intro: Chain state needs to be stored even with the full blockchain",
      "tree": {
        "sha": "03d387e395a9ad84798e40cfb895bd20530a1acd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03d387e395a9ad84798e40cfb895bd20530a1acd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93ffba7163b4f3c0262c58c1e76e252350e4260e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ffba7163b4f3c0262c58c1e76e252350e4260e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93ffba7163b4f3c0262c58c1e76e252350e4260e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ffba7163b4f3c0262c58c1e76e252350e4260e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8cee26100c4f5196aff452d75a24ea7f1135595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8cee26100c4f5196aff452d75a24ea7f1135595",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8cee26100c4f5196aff452d75a24ea7f1135595"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e45ba2d151292a0f995f61551f0bfb0007cae1fd",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93ffba7163b4f3c0262c58c1e76e252350e4260e/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93ffba7163b4f3c0262c58c1e76e252350e4260e/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=93ffba7163b4f3c0262c58c1e76e252350e4260e",
        "patch": "@@ -126,8 +126,10 @@ Intro::Intro(QWidget *parent) :\n     ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n-    if (pruneTarget)\n-        requiredSpace = CHAIN_STATE_SIZE + std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+    if (pruneTarget) {\n+        requiredSpace = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+    }\n+    requiredSpace += CHAIN_STATE_SIZE;\n     ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(tr(PACKAGE_NAME)).arg(requiredSpace));\n     startThread();\n }"
      }
    ]
  },
  {
    "sha": "a9baa6d742c0425af4fb048cbd85707143227e84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWJhYTZkNzQyYzA0MjVhZjRmYjA0OGNiZDg1NzA3MTQzMjI3ZTg0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T19:16:00Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T19:16:00Z"
      },
      "message": "Bugfix: Qt/Intro: Pruned nodes never require *more* space",
      "tree": {
        "sha": "0ea8c8162781158a50dedb6f46efd707b0fab03b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ea8c8162781158a50dedb6f46efd707b0fab03b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9baa6d742c0425af4fb048cbd85707143227e84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9baa6d742c0425af4fb048cbd85707143227e84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9baa6d742c0425af4fb048cbd85707143227e84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9baa6d742c0425af4fb048cbd85707143227e84/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93ffba7163b4f3c0262c58c1e76e252350e4260e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93ffba7163b4f3c0262c58c1e76e252350e4260e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93ffba7163b4f3c0262c58c1e76e252350e4260e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "96bddb81edf425f2a365176bbae3b632bf6f3edf",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9baa6d742c0425af4fb048cbd85707143227e84/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9baa6d742c0425af4fb048cbd85707143227e84/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=a9baa6d742c0425af4fb048cbd85707143227e84",
        "patch": "@@ -127,7 +127,10 @@ Intro::Intro(QWidget *parent) :\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n     if (pruneTarget) {\n-        requiredSpace = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+        uint64_t prunedGBs = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+        if (prunedGBs <= requiredSpace) {\n+            requiredSpace = prunedGBs;\n+        }\n     }\n     requiredSpace += CHAIN_STATE_SIZE;\n     ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(tr(PACKAGE_NAME)).arg(requiredSpace));"
      }
    ]
  },
  {
    "sha": "9adb694b171efd6c0f87f96436de92526f920383",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWRiNjk0YjE3MWVmZDZjMGY4N2Y5NjQzNmRlOTI1MjZmOTIwMzgz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T03:56:52Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T19:23:31Z"
      },
      "message": "Qt/Intro: Move sizeWarningLabel text into C++ code",
      "tree": {
        "sha": "00741bf7323275ca303abaaf1879660364836132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00741bf7323275ca303abaaf1879660364836132"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9adb694b171efd6c0f87f96436de92526f920383",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9adb694b171efd6c0f87f96436de92526f920383",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9adb694b171efd6c0f87f96436de92526f920383",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9adb694b171efd6c0f87f96436de92526f920383/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9baa6d742c0425af4fb048cbd85707143227e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9baa6d742c0425af4fb048cbd85707143227e84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9baa6d742c0425af4fb048cbd85707143227e84"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1ec0333a9ac9ee4a96abbbc578c7cc7a0b03deb3",
        "filename": "src/qt/forms/intro.ui",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adb694b171efd6c0f87f96436de92526f920383/src/qt/forms/intro.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adb694b171efd6c0f87f96436de92526f920383/src/qt/forms/intro.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/intro.ui?ref=9adb694b171efd6c0f87f96436de92526f920383",
        "patch": "@@ -55,9 +55,6 @@\n    </item>\n    <item>\n     <widget class=\"QLabel\" name=\"sizeWarningLabel\">\n-     <property name=\"text\">\n-      <string>%1 will download and store a copy of the Bitcoin block chain. At least %2GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</string>\n-     </property>\n      <property name=\"wordWrap\">\n       <bool>true</bool>\n      </property>"
      },
      {
        "sha": "aec9a97cfc498ff211feb327ba54e1a52375ea27",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9adb694b171efd6c0f87f96436de92526f920383/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9adb694b171efd6c0f87f96436de92526f920383/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=9adb694b171efd6c0f87f96436de92526f920383",
        "patch": "@@ -133,7 +133,11 @@ Intro::Intro(QWidget *parent) :\n         }\n     }\n     requiredSpace += CHAIN_STATE_SIZE;\n-    ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(tr(PACKAGE_NAME)).arg(requiredSpace));\n+    ui->sizeWarningLabel->setText(\n+        tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(tr(PACKAGE_NAME)) + \" \" +\n+        tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\").arg(requiredSpace) + \" \" +\n+        tr(\"The wallet will also be stored in this directory.\")\n+    );\n     startThread();\n }\n "
      }
    ]
  },
  {
    "sha": "50c56570b23c4ecbbf2a22f3b8b18d0a24050b93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGM1NjU3MGIyM2M0ZWNiYmYyYTIyZjNiOGIxOGQwYTI0MDUwYjkz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T04:05:55Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T19:24:43Z"
      },
      "message": "Qt/Intro: Storage shouldn't grow significantly with pruning enabled",
      "tree": {
        "sha": "120578b75d8d22b9d6dae18c727344313c32783a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/120578b75d8d22b9d6dae18c727344313c32783a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50c56570b23c4ecbbf2a22f3b8b18d0a24050b93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c56570b23c4ecbbf2a22f3b8b18d0a24050b93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50c56570b23c4ecbbf2a22f3b8b18d0a24050b93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c56570b23c4ecbbf2a22f3b8b18d0a24050b93/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9adb694b171efd6c0f87f96436de92526f920383",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9adb694b171efd6c0f87f96436de92526f920383",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9adb694b171efd6c0f87f96436de92526f920383"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e39c39bb0c8f3579dec5c011a3fcde5274116ed8",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50c56570b23c4ecbbf2a22f3b8b18d0a24050b93/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50c56570b23c4ecbbf2a22f3b8b18d0a24050b93/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=50c56570b23c4ecbbf2a22f3b8b18d0a24050b93",
        "patch": "@@ -126,16 +126,18 @@ Intro::Intro(QWidget *parent) :\n     ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n+    QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n     if (pruneTarget) {\n         uint64_t prunedGBs = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n         if (prunedGBs <= requiredSpace) {\n             requiredSpace = prunedGBs;\n+            storageRequiresMsg = tr(\"Approximately %1 GB of data will be stored in this directory.\");\n         }\n     }\n     requiredSpace += CHAIN_STATE_SIZE;\n     ui->sizeWarningLabel->setText(\n         tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(tr(PACKAGE_NAME)) + \" \" +\n-        tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\").arg(requiredSpace) + \" \" +\n+        storageRequiresMsg.arg(requiredSpace) + \" \" +\n         tr(\"The wallet will also be stored in this directory.\")\n     );\n     startThread();"
      }
    ]
  },
  {
    "sha": "36164faa338d387177c6328496f63ac11eda3b78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjE2NGZhYTMzOGQzODcxNzdjNjMyODQ5NmY2M2FjMTFlZGEzYjc4",
    "commit": {
      "author": {
        "name": "Koki Takahashi",
        "email": "Koki.Takahashi@jp.sony.com",
        "date": "2017-02-03T08:12:21Z"
      },
      "committer": {
        "name": "Koki Takahashi",
        "email": "k.takahashi@sonyged.com",
        "date": "2017-02-09T02:56:44Z"
      },
      "message": "Fix typo and spelling inconsistency in CONTRIBUTING.md\n\nFix spellings of GitHub\n\nRemove unnecessary changes\n\nFix GitHub spelling on doc/translation_process.md",
      "tree": {
        "sha": "cb2d0a6e0d860c952bf2af0ff2512bd0d397b9c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb2d0a6e0d860c952bf2af0ff2512bd0d397b9c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36164faa338d387177c6328496f63ac11eda3b78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36164faa338d387177c6328496f63ac11eda3b78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36164faa338d387177c6328496f63ac11eda3b78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36164faa338d387177c6328496f63ac11eda3b78/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7f97b108b1f5982414f63b5751f3e4d56fd45ff6",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -194,7 +194,7 @@ request. Typically reviewers will review the code for obvious errors, as well as\n test out the patch set and opine on the technical merits of the patch. Project\n maintainers take into account the peer review when determining if there is\n consensus to merge a pull request (remember that discussions may have been\n-spread out over github, mailing list and IRC discussions). The following\n+spread out over GitHub, mailing list and IRC discussions). The following\n language is used within pull-request comments:\n \n   - ACK means \"I have tested the code and I agree it should be merged\";"
      },
      {
        "sha": "6f750106e4710dbe29eb95ab0f0a54454d488657",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -3,7 +3,7 @@ Repository Tools\n \n ### [Developer tools](/contrib/devtools) ###\n Specific tools for developers working on this repository.\n-Contains the script `github-merge.py` for merging github pull requests securely and signing them using GPG.\n+Contains the script `github-merge.py` for merging GitHub pull requests securely and signing them using GPG.\n \n ### [Verify-Commits](/contrib/verify-commits) ###\n Tool to verify that every merge commit was signed by a developer using the above `github-merge.py` script."
      },
      {
        "sha": "67c5e15a15041f77122a8d0745a3164abde9e8d0",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -125,7 +125,7 @@ check or whatever).\n \n This means that there are no potential race conditions (where a\n pullreq gets updated while you're reviewing it, but before you click\n-merge), and when using GPG signatures, that even a compromised github\n+merge), and when using GPG signatures, that even a compromised GitHub\n couldn't mess with the sources.\n \n Setup"
      },
      {
        "sha": "3a7e4f73b3d60d5a88e20615205d77aa056a7c9f",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -448,7 +448,7 @@ Current subtrees include:\n   - Upstream at https://github.com/jgarzik/univalue ; report important PRs to Core to avoid delay.\n \n \n-Git and github tips\n+Git and GitHub tips\n ---------------------\n \n - For resolving merge/rebase conflicts, it can be useful to enable diff3 style using"
      },
      {
        "sha": "1702637d53ebd7a0c2f827ed114260d0f515ee51",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -4,7 +4,7 @@ Translations\n The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool.\n \n ### Helping to translate (using Transifex)\n-Transifex is setup to monitor the Github repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n+Transifex is setup to monitor the GitHub repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n \n Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n@@ -32,7 +32,7 @@ QToolBar *toolbar = addToolBar(tr(\"Tabs toolbar\"));\n ### Creating a pull-request\n For general PRs, you shouldn\u2019t include any updates to the translation source files. They will be updated periodically, primarily around pre-releases, allowing time for any new phrases to be translated before public releases. This is also important in avoiding translation related merge conflicts.\n \n-When an updated source file is merged into the Github repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n+When an updated source file is merged into the GitHub repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n \n To create the pull-request, use the following commands:\n ```"
      },
      {
        "sha": "1019ff6653b7842f0e18371bc577eeb1faebd313",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36164faa338d387177c6328496f63ac11eda3b78/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36164faa338d387177c6328496f63ac11eda3b78/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=36164faa338d387177c6328496f63ac11eda3b78",
        "patch": "@@ -1,4 +1,4 @@\n-# Block and Transaction Broadcasting With ZeroMQ\n+# Block and Transaction Broadcasting with ZeroMQ\n \n [ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n connections, inter-process communication, and shared-memory,\n@@ -50,7 +50,7 @@ during the *configure* step of building bitcoind:\n     $ ./configure --disable-zmq (other options)\n \n To actually enable operation, one must set the appropriate options on\n-the commandline or in the configuration file.\n+the command line or in the configuration file.\n \n ## Usage\n "
      }
    ]
  },
  {
    "sha": "f6d18f5b3397df0152243ed81dcc9d0c18a55e04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmQxOGY1YjMzOTdkZjAxNTIyNDNlZDgxZGNjOWQwYzE4YTU1ZTA0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-08T04:21:04Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-09T05:07:19Z"
      },
      "message": "Qt/Intro: Explain a bit more what will happen first time",
      "tree": {
        "sha": "bb30f4f714638c02f1e26574341630a138c02e5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb30f4f714638c02f1e26574341630a138c02e5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6d18f5b3397df0152243ed81dcc9d0c18a55e04",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6d18f5b3397df0152243ed81dcc9d0c18a55e04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6d18f5b3397df0152243ed81dcc9d0c18a55e04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6d18f5b3397df0152243ed81dcc9d0c18a55e04/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50c56570b23c4ecbbf2a22f3b8b18d0a24050b93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50c56570b23c4ecbbf2a22f3b8b18d0a24050b93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50c56570b23c4ecbbf2a22f3b8b18d0a24050b93"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 43,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cfdd8482e39586db428cea0086733d121e9f521a",
        "filename": "src/qt/forms/intro.ui",
        "status": "modified",
        "additions": 31,
        "deletions": 1,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6d18f5b3397df0152243ed81dcc9d0c18a55e04/src/qt/forms/intro.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6d18f5b3397df0152243ed81dcc9d0c18a55e04/src/qt/forms/intro.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/intro.ui?ref=f6d18f5b3397df0152243ed81dcc9d0c18a55e04",
        "patch": "@@ -7,7 +7,7 @@\n     <x>0</x>\n     <y>0</y>\n     <width>674</width>\n-    <height>363</height>\n+    <height>415</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -200,6 +200,36 @@\n      </item>\n     </layout>\n    </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation1\">\n+     <property name=\"text\">\n+      <string>When you click OK, %1 will begin to download and process the full %4 block chain (%2GB) starting with the earliest transactions in %3 when %4 initially launched.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation2\">\n+     <property name=\"text\">\n+      <string>This initial synchronisation is very demanding, and may expose hardware problems with your computer that had previously gone unnoticed. Each time you run %1, it will continue downloading where it left off.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation3\">\n+     <property name=\"text\">\n+      <string>If you have chosen to limit block chain storage (pruning), the historical data must still be downloaded and processed, but will be deleted afterward to keep your disk usage low.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n    <item>\n     <spacer name=\"verticalSpacer\">\n      <property name=\"orientation\">"
      },
      {
        "sha": "0ecdf76dfa754f2ace2df01bc059be03578e704b",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6d18f5b3397df0152243ed81dcc9d0c18a55e04/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6d18f5b3397df0152243ed81dcc9d0c18a55e04/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=f6d18f5b3397df0152243ed81dcc9d0c18a55e04",
        "patch": "@@ -124,6 +124,15 @@ Intro::Intro(QWidget *parent) :\n     ui->setupUi(this);\n     ui->welcomeLabel->setText(ui->welcomeLabel->text().arg(tr(PACKAGE_NAME)));\n     ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n+\n+    ui->lblExplanation1->setText(ui->lblExplanation1->text()\n+        .arg(tr(PACKAGE_NAME))\n+        .arg(BLOCK_CHAIN_SIZE)\n+        .arg(2009)\n+        .arg(tr(\"Bitcoin\"))\n+    );\n+    ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(tr(PACKAGE_NAME)));\n+\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n     QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n@@ -133,6 +142,9 @@ Intro::Intro(QWidget *parent) :\n             requiredSpace = prunedGBs;\n             storageRequiresMsg = tr(\"Approximately %1 GB of data will be stored in this directory.\");\n         }\n+        ui->lblExplanation3->setVisible(true);\n+    } else {\n+        ui->lblExplanation3->setVisible(false);\n     }\n     requiredSpace += CHAIN_STATE_SIZE;\n     ui->sizeWarningLabel->setText("
      }
    ]
  },
  {
    "sha": "36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmY5ZDNhZTZkYTQ4MzI1YjBhMzdhZDdmZDFhYmUyNjNhMGYyYzlh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T06:29:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T06:30:10Z"
      },
      "message": "Merge #9718: Qt/Intro: Various fixes\n\na9baa6d Bugfix: Qt/Intro: Pruned nodes never require *more* space (Luke Dashjr)\n93ffba7 Bugfix: Qt/Intro: Chain state needs to be stored even with the full blockchain (Luke Dashjr)\nc8cee26 Qt/Intro: Update block chain size (Luke Dashjr)",
      "tree": {
        "sha": "bb1270a3f1d2dabe008496c5e702d164ed30e90f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb1270a3f1d2dabe008496c5e702d164ed30e90f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYnAxyAAoJEHSBCwEjRsmmw3gH/1jmztkQlP7kX6Iz+7Dsx/WW\ns4/7hl6GX3+T1b7UYbrNlA+LwJK5VRe9Q8nZw6x0eTp/QRLxD8fdV1jp8gw6urJC\nQsSCQCCER2TVtxYqESRfkGMFTvAO54U7+vLTJwK7AynKIJIZbJOvImcWcdKBowzu\n8nYI0IspomRgnFoGGj2uBnbq2E77qbI0ekB4nPwLfsp/HGuXXVLdVOjx17R0qOOu\nj/tJ8rrU/FuSVd4LvwlmlnVEcrGahPlme+jNzSRPD5PlBvSbXmevsObk0M+NjtJN\nGFuqc3Zxafz0UHHOx9kBQ+iEsLxVOCGVklEDWYQS2O2q6ivmT7LbRPagid3qLU0=\n=k+7T\n-----END PGP SIGNATURE-----",
        "payload": "tree bb1270a3f1d2dabe008496c5e702d164ed30e90f\nparent dd163f57886991f3d564c9b0b1bf2ccc8f4ba784\nparent a9baa6d742c0425af4fb048cbd85707143227e84\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486621793 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486621810 +0100\n\nMerge #9718: Qt/Intro: Various fixes\n\na9baa6d Bugfix: Qt/Intro: Pruned nodes never require *more* space (Luke Dashjr)\n93ffba7 Bugfix: Qt/Intro: Chain state needs to be stored even with the full blockchain (Luke Dashjr)\nc8cee26 Qt/Intro: Update block chain size (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd163f57886991f3d564c9b0b1bf2ccc8f4ba784"
      },
      {
        "sha": "a9baa6d742c0425af4fb048cbd85707143227e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9baa6d742c0425af4fb048cbd85707143227e84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9baa6d742c0425af4fb048cbd85707143227e84"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6b5ac47f205f053b4653c639fb74cece90d18cde",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "patch": "@@ -23,7 +23,7 @@\n \n static const uint64_t GB_BYTES = 1000000000LL;\n /* Minimum free space (in GB) needed for data directory */\n-static const uint64_t BLOCK_CHAIN_SIZE = 80;\n+static const uint64_t BLOCK_CHAIN_SIZE = 120;\n /* Minimum free space (in GB) needed for data directory when pruned; Does not include prune target */\n static const uint64_t CHAIN_STATE_SIZE = 2;\n /* Total required space (in GB) depending on user choice (prune, not prune) */\n@@ -126,8 +126,13 @@ Intro::Intro(QWidget *parent) :\n     ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n-    if (pruneTarget)\n-        requiredSpace = CHAIN_STATE_SIZE + std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+    if (pruneTarget) {\n+        uint64_t prunedGBs = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n+        if (prunedGBs <= requiredSpace) {\n+            requiredSpace = prunedGBs;\n+        }\n+    }\n+    requiredSpace += CHAIN_STATE_SIZE;\n     ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(tr(PACKAGE_NAME)).arg(requiredSpace));\n     startThread();\n }"
      }
    ]
  },
  {
    "sha": "13f608582c1d941ad71cae49a79084f346da0938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2Y2MDg1ODJjMWQ5NDFhZDcxY2FlNDlhNzkwODRmMzQ2ZGEwOTM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T07:51:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T07:51:53Z"
      },
      "message": "netbase: Make InterruptibleRecv return an error code instead of bool",
      "tree": {
        "sha": "6636268954a92b9cc39a911ee21d15832b4e3129",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6636268954a92b9cc39a911ee21d15832b4e3129"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13f608582c1d941ad71cae49a79084f346da0938",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f608582c1d941ad71cae49a79084f346da0938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13f608582c1d941ad71cae49a79084f346da0938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f608582c1d941ad71cae49a79084f346da0938/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 27,
      "deletions": 18
    },
    "files": [
      {
        "sha": "414456a16c8f9f5d828c7e802472b565413dd256",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 18,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f608582c1d941ad71cae49a79084f346da0938/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f608582c1d941ad71cae49a79084f346da0938/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=13f608582c1d941ad71cae49a79084f346da0938",
        "patch": "@@ -198,6 +198,14 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n     return timeout;\n }\n \n+enum class IntrRecvError {\n+    OK,\n+    Timeout,\n+    Disconnected,\n+    NetworkError,\n+    Interrupted\n+};\n+\n /**\n  * Read bytes from socket. This will either read the full number of bytes requested\n  * or return False on error or timeout.\n@@ -209,7 +217,7 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n  *\n  * @note This function requires that hSocket is in non-blocking mode.\n  */\n-bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSocket)\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n@@ -222,30 +230,30 @@ bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSock\n             len -= ret;\n             data += ret;\n         } else if (ret == 0) { // Unexpected disconnection\n-            return false;\n+            return IntrRecvError::Disconnected;\n         } else { // Other error or blocking\n             int nErr = WSAGetLastError();\n             if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL) {\n                 if (!IsSelectableSocket(hSocket)) {\n-                    return false;\n+                    return IntrRecvError::NetworkError;\n                 }\n                 struct timeval tval = MillisToTimeval(std::min(endTime - curTime, maxWait));\n                 fd_set fdset;\n                 FD_ZERO(&fdset);\n                 FD_SET(hSocket, &fdset);\n                 int nRet = select(hSocket + 1, &fdset, NULL, NULL, &tval);\n                 if (nRet == SOCKET_ERROR) {\n-                    return false;\n+                    return IntrRecvError::NetworkError;\n                 }\n             } else {\n-                return false;\n+                return IntrRecvError::NetworkError;\n             }\n         }\n         if (interruptSocks5Recv)\n-            return false;\n+            return IntrRecvError::Interrupted;\n         curTime = GetTimeMillis();\n     }\n-    return len == 0;\n+    return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n struct ProxyCredentials\n@@ -272,6 +280,7 @@ std::string Socks5ErrorString(int err)\n /** Connect using SOCKS5 (as described in RFC1928) */\n static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)\n {\n+    IntrRecvError recvr;\n     LogPrint(\"net\", \"SOCKS5 connecting %s\\n\", strDest);\n     if (strDest.size() > 255) {\n         CloseSocket(hSocket);\n@@ -294,7 +303,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         return error(\"Error sending to proxy\");\n     }\n     char pchRet1[2];\n-    if (!InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+    if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n@@ -320,7 +329,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         }\n         LogPrint(\"proxy\", \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n         char pchRetA[2];\n-        if (!InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+        if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n             CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n         }\n@@ -349,9 +358,9 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         return error(\"Error sending to proxy\");\n     }\n     char pchRet2[4];\n-    if (!InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+    if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n-        return error(\"Error reading proxy response\");\n+        return error(\"Error while reading proxy response\");\n     }\n     if (pchRet2[0] != 0x05) {\n         CloseSocket(hSocket);\n@@ -370,26 +379,26 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     char pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case 0x01: ret = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x04: ret = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case 0x01: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case 0x04: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n         case 0x03:\n         {\n-            ret = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n-            if (!ret) {\n+            recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n+            if (recvr != IntrRecvError::OK) {\n                 CloseSocket(hSocket);\n                 return error(\"Error reading from proxy\");\n             }\n             int nRecv = pchRet3[0];\n-            ret = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n+            recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n             break;\n         }\n         default: CloseSocket(hSocket); return error(\"Error: malformed proxy response\");\n     }\n-    if (!ret) {\n+    if (recvr != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n-    if (!InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+    if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }"
      }
    ]
  },
  {
    "sha": "3ddfe298375c2484ac281d8a6d731ad8616f3542",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGRmZTI5ODM3NWMyNDg0YWMyODFkOGE2ZDczMWFkODYxNmYzNTQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T07:52:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T07:53:22Z"
      },
      "message": "netbase: Do not print an error on connection timeouts through proxy\n\nIf a timeout happens while reading the proxy response, this effectively\nmeans we timed out while connecting to the remote node. This is very\ncommon for Tor, so do not print an error message.",
      "tree": {
        "sha": "dcd28f2fc4e5481effaf87d771dc84e2cdc88f27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcd28f2fc4e5481effaf87d771dc84e2cdc88f27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ddfe298375c2484ac281d8a6d731ad8616f3542",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ddfe298375c2484ac281d8a6d731ad8616f3542",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ddfe298375c2484ac281d8a6d731ad8616f3542",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ddfe298375c2484ac281d8a6d731ad8616f3542/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f608582c1d941ad71cae49a79084f346da0938",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f608582c1d941ad71cae49a79084f346da0938",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f608582c1d941ad71cae49a79084f346da0938"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fc9a6ed0be8e3f8bcece8c50d369a00c49785562",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ddfe298375c2484ac281d8a6d731ad8616f3542/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ddfe298375c2484ac281d8a6d731ad8616f3542/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=3ddfe298375c2484ac281d8a6d731ad8616f3542",
        "patch": "@@ -360,7 +360,14 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     char pchRet2[4];\n     if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n-        return error(\"Error while reading proxy response\");\n+        if (recvr == IntrRecvError::Timeout) {\n+            /* If a timeout happens here, this effectively means we timed out while connecting\n+             * to the remote node. This is very common for Tor, so do not print an\n+             * error message. */\n+            return false;\n+        } else {\n+            return error(\"Error while reading proxy response\");\n+        }\n     }\n     if (pchRet2[0] != 0x05) {\n         CloseSocket(hSocket);"
      }
    ]
  },
  {
    "sha": "ca9955e706d346ea54ee128741444107af9b3977",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTk5NTVlNzA2ZDM0NmVhNTRlZTEyODc0MTQ0NDEwN2FmOWIzOTc3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-09T10:28:01Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-09T10:28:01Z"
      },
      "message": "Remove bitseed.xf2.org form the dns seed list",
      "tree": {
        "sha": "861ea1f799fc9d9c4d21d09bdc2828201e60d8c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/861ea1f799fc9d9c4d21d09bdc2828201e60d8c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca9955e706d346ea54ee128741444107af9b3977",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlicRDsACgkQKdS8tkFv\nU+xmqw//UJdLrlkU10tCE8oP7Nby7FiMYnycawC+3ta0xO0J/TMwFvxJIg/S57VX\ngnR0KsoKbaktZD1ORtUmzHRbLXpropxc7KfzxvPxsU8pDHepCmMgvGKI3QvC4hxP\nOKJWOGmCMWt43sADaBmuzjDdU2AgYyUYbxQfXPz+r/Og92J8dCcr/6Jlm0tiI3dR\niFPddhZ3ooHKVOTRJcaPGOeTLRPXiqUOb82i5bPFrqMBv7EbBh6oBvq2qOCymFLQ\n6JYjmhTinrc6TXqj7RI+A5dc6JMw3SQqYPRh6ijfDOnv+dEAGaDZEIP5hgC8zGcS\nzVcpv5K4+bl/XUkIOpPU1dCUzBnvm/uY2va+MgYjokV5kwYLGgysBjQ+cRCvt2I2\nM6B8br47mGGyuRjuCwmWRQ+eeaCM/n8eP/pncffv0pVw7epbEgFOmt+GogKX0ohX\nr47DCPZkWEz+wiisG5Xed0B2Qgl6jXw3NRWdsbQLOdwPNpuR8alO02oT21LQ1vPM\nV3iIuVS1W1xlURYyPs4t9MsoI/XnPaoVmNBb3fPycWpYb5NfmsuF3TzAsYyJwbJT\nUz/LeoqH9KxGj+aegTKQVaHJITydcs8s6dlQkzkQTjF2goEZht1O+z9RKRVoUGvx\nZyhl2C0d2R7BPNX+PvjHoYxrw9w9+mkFoAeV4cnEAOHBJqxABIk=\n=iTeX\n-----END PGP SIGNATURE-----",
        "payload": "tree 861ea1f799fc9d9c4d21d09bdc2828201e60d8c4\nparent 36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1486636081 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1486636081 +0100\n\nRemove bitseed.xf2.org form the dns seed list\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9955e706d346ea54ee128741444107af9b3977",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca9955e706d346ea54ee128741444107af9b3977",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9955e706d346ea54ee128741444107af9b3977/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6c6f677df79cf545ebba84778ed025c0be898acf",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca9955e706d346ea54ee128741444107af9b3977/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca9955e706d346ea54ee128741444107af9b3977/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ca9955e706d346ea54ee128741444107af9b3977",
        "patch": "@@ -124,7 +124,6 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n-        vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\")); // Jeff Garzik\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);"
      }
    ]
  },
  {
    "sha": "467df390f0a620859c46e49d0894b0b7f8dc55ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjdkZjM5MGYwYTYyMDg1OWM0NmU0OWQwODk0YjBiN2Y4ZGM1NWFk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-09T18:59:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-09T19:00:02Z"
      },
      "message": "Remove nonsense #undef foreach\n\nThis commit removes a preprocessor #undef for a macro that was never\ndefined. Should make no difference to compiled code.",
      "tree": {
        "sha": "a3bbdce7580ccbee2a9e96ed51009174cc5da789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3bbdce7580ccbee2a9e96ed51009174cc5da789"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/467df390f0a620859c46e49d0894b0b7f8dc55ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/467df390f0a620859c46e49d0894b0b7f8dc55ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/467df390f0a620859c46e49d0894b0b7f8dc55ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/467df390f0a620859c46e49d0894b0b7f8dc55ad/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729de15b6365face6ae9e12a03624da33a6302f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729de15b6365face6ae9e12a03624da33a6302f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729de15b6365face6ae9e12a03624da33a6302f0"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "50d719a456cdb2093277c9320d81015154d8df53",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/467df390f0a620859c46e49d0894b0b7f8dc55ad/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/467df390f0a620859c46e49d0894b0b7f8dc55ad/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=467df390f0a620859c46e49d0894b0b7f8dc55ad",
        "patch": "@@ -20,7 +20,6 @@\n #include \"sync.h\"\n #include \"random.h\"\n \n-#undef foreach\n #include \"boost/multi_index_container.hpp\"\n #include \"boost/multi_index/ordered_index.hpp\"\n #include \"boost/multi_index/hashed_index.hpp\""
      }
    ]
  },
  {
    "sha": "66f861ade9db108f979a9bdf8d90e8fca028e2a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmY4NjFhZGU5ZGIxMDhmOTc5YTliZGY4ZDkwZThmY2EwMjhlMmEz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:43:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-09T22:34:03Z"
      },
      "message": "Add a test for P2P inactivity timeouts",
      "tree": {
        "sha": "ca572ce1139535658ee44eafa7ee63d19ad204f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca572ce1139535658ee44eafa7ee63d19ad204f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66f861ade9db108f979a9bdf8d90e8fca028e2a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66f861ade9db108f979a9bdf8d90e8fca028e2a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66f861ade9db108f979a9bdf8d90e8fca028e2a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66f861ade9db108f979a9bdf8d90e8fca028e2a3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b436f92f727686cd8a10ddff5cd22ee6366fe8c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b436f92f727686cd8a10ddff5cd22ee6366fe8c8"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 104,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2cf4adb9a0431bb1e49b092bd40a4914b2e8b34a",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66f861ade9db108f979a9bdf8d90e8fca028e2a3/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66f861ade9db108f979a9bdf8d90e8fca028e2a3/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=66f861ade9db108f979a9bdf8d90e8fca028e2a3",
        "patch": "@@ -168,6 +168,7 @@\n     # vv Tests less than 2m vv\n     'bip68-sequence.py',\n     'getblocktemplate_longpoll.py',\n+    'p2p-timeouts.py',\n     # vv Tests less than 60s vv\n     'bip9-softforks.py',\n     'p2p-feefilter.py',"
      },
      {
        "sha": "f1b190587d8efa7d43584507b13e390ca3bbe711",
        "filename": "qa/rpc-tests/p2p-timeouts.py",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66f861ade9db108f979a9bdf8d90e8fca028e2a3/qa/rpc-tests/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66f861ade9db108f979a9bdf8d90e8fca028e2a3/qa/rpc-tests/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-timeouts.py?ref=66f861ade9db108f979a9bdf8d90e8fca028e2a3",
        "patch": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\" TimeoutsTest -- test various net timeouts (only in extended tests)\n+\n+- Create three bitcoind nodes:\n+\n+    no_verack_node - we never send a verack in response to their version\n+    no_version_node - we never send a version (only a ping)\n+    no_send_node - we never send any P2P message.\n+\n+- Start all three nodes\n+- Wait 1 second\n+- Assert that we're connected\n+- Send a ping to no_verack_node and no_version_node\n+- Wait 30 seconds\n+- Assert that we're still connected\n+- Send a ping to no_verack_node and no_version_node\n+- Wait 31 seconds\n+- Assert that we're no longer connected (timeout to receive version/verack is 60 seconds)\n+\"\"\"\n+\n+from time import sleep\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class TestNode(SingleNodeConnCB):\n+    def __init__(self):\n+        SingleNodeConnCB.__init__(self)\n+        self.connected = False\n+        self.received_version = False\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_close(self, conn):\n+        self.connected = False\n+\n+    def on_version(self, conn, message):\n+        # Don't send a verack in response\n+        self.received_version = True\n+\n+class TimeoutsTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.nodes = []\n+\n+        # Start up node0 to be a version 1, pre-segwit node.\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, \n+                [[\"-debug\", \"-logtimemicros=1\"]])\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        self.no_verack_node = TestNode() # never send verack\n+        self.no_version_node = TestNode() # never send version (just ping)\n+        self.no_send_node = TestNode() # never send anything\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_verack_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_version_node, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_send_node, send_version=False))\n+        self.no_verack_node.add_connection(connections[0])\n+        self.no_version_node.add_connection(connections[1])\n+        self.no_send_node.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        sleep(1)\n+\n+        assert(self.no_verack_node.connected)\n+        assert(self.no_version_node.connected)\n+        assert(self.no_send_node.connected)\n+\n+        ping_msg = msg_ping()\n+        connections[0].send_message(ping_msg)\n+        connections[1].send_message(ping_msg)\n+\n+        sleep(30)\n+\n+        assert(self.no_verack_node.received_version)\n+\n+        assert(self.no_verack_node.connected)\n+        assert(self.no_version_node.connected)\n+        assert(self.no_send_node.connected)\n+\n+        connections[0].send_message(ping_msg)\n+        connections[1].send_message(ping_msg)\n+\n+        sleep(31)\n+\n+        assert(not self.no_verack_node.connected)\n+        assert(not self.no_version_node.connected)\n+        assert(not self.no_send_node.connected)\n+\n+if __name__ == '__main__':\n+    TimeoutsTest().main()"
      }
    ]
  },
  {
    "sha": "33f3b21407a38faaaee2d72d16e8eb340fe74657",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2YzYjIxNDA3YTM4ZmFhYWVlMmQ3MmQxNmU4ZWIzNDBmZTc0NjU3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-10T08:14:17Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-10T08:14:21Z"
      },
      "message": "Merge #9730: Remove bitseed.xf2.org form the dns seed list\n\nca9955e Remove bitseed.xf2.org form the dns seed list (Jonas Schnelli)",
      "tree": {
        "sha": "861ea1f799fc9d9c4d21d09bdc2828201e60d8c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/861ea1f799fc9d9c4d21d09bdc2828201e60d8c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAliddl0ACgkQKdS8tkFv\nU+yYqQ/+K6jfgQVKjVsaf7QGZDWdYjecruCg5cwwQJh0WdwpG1Yrd5I1zVNEsht3\ngiHm0QslXtJlxP1E/huRSQM88igyDYK9pPBqfbXIpXSWe1Qs3tidcYnqk6bQhE1D\nBdxP1t2Q7WmFuBIZrcX10VNYJJu+ZBHQ/Ro6ODsa7Xeey01hB1uq8nNUnoTLNn7I\nrSmC05lcDKRkCtBRwRsAo6ifQVjAFv+Xvi+uGTM/pmkJMcSnzGUbdEsM2gNIiN3N\n0PgQwlN/k9ek+w2FgTShvibVnfq95l7UU5d31d9a4VadCHuqey6PjWF3xjBI2I+/\nkbX+MqbLm5MMnOUruQv3qic34QFsFDjD5K5Q4EkaVXLlJuA39OPP9vILpmhyBUKR\naIhyC8VpSHs7mRVQ0x85+CnrYTVELfhFAKCe9CTwpGyiRuzTHz2FfkLOQw0B7usU\nflX6M4jDpPFR2109FFUePk2iDFtCiWf+I7mS4uK+JxYT/+GYKW2gw0nB8UkU+SvS\nX032cg61OZZkYlFA2mK8V5K58T5KYJ6tgh++NZ63sj2VRj6m2PcNW2IMoCVkMqUl\n2VKxWefsDy5T2xPPpHAqBTdNpz/U58h5yD/1nQYmwTkk6P5Pkssn/i8uID54MfVF\nwNCkvDZlmcUx8KKdOpgRUl9kgDeUWgoLoCYAv5ogSJQdOHf1IoU=\n=ilul\n-----END PGP SIGNATURE-----",
        "payload": "tree 861ea1f799fc9d9c4d21d09bdc2828201e60d8c4\nparent 36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a\nparent ca9955e706d346ea54ee128741444107af9b3977\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1486714457 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1486714461 +0100\n\nMerge #9730: Remove bitseed.xf2.org form the dns seed list\n\nca9955e Remove bitseed.xf2.org form the dns seed list (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33f3b21407a38faaaee2d72d16e8eb340fe74657",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a"
      },
      {
        "sha": "ca9955e706d346ea54ee128741444107af9b3977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca9955e706d346ea54ee128741444107af9b3977",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca9955e706d346ea54ee128741444107af9b3977"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6c6f677df79cf545ebba84778ed025c0be898acf",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33f3b21407a38faaaee2d72d16e8eb340fe74657/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33f3b21407a38faaaee2d72d16e8eb340fe74657/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "patch": "@@ -124,7 +124,6 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n-        vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\")); // Jeff Garzik\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);"
      }
    ]
  },
  {
    "sha": "5e903a5ed96809af31cdcf6037e6c284832a02a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTkwM2E1ZWQ5NjgwOWFmMzFjZGNmNjAzN2U2YzI4NDgzMmEwMmE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T08:49:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T08:56:27Z"
      },
      "message": "devtools: Handle Qt formatting characters edge-case in update-translations.py\n\nIf both numeric format specifiers and \"others\" are used, assume we're\ndealing with a Qt-formatted message. In the case of Qt formatting (see\nhttps://doc.qt.io/qt-5/qstring.html#arg) only numeric formats are\nreplaced at all. This means \"(percentage: %1%)\" is valid (which was\nintroduced in #9461), without needing any kind of escaping that would be\nnecessary for strprintf.  Without this, this function would wrongly\ndetect '%)' as a printf format specifier.",
      "tree": {
        "sha": "79ca74509bdfd8b1a9a85091ae10af1b95b5f3da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79ca74509bdfd8b1a9a85091ae10af1b95b5f3da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e903a5ed96809af31cdcf6037e6c284832a02a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e903a5ed96809af31cdcf6037e6c284832a02a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e903a5ed96809af31cdcf6037e6c284832a02a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e903a5ed96809af31cdcf6037e6c284832a02a6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33f3b21407a38faaaee2d72d16e8eb340fe74657"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2011841005930eb975a54bcd59693c27b4a70f2c",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e903a5ed96809af31cdcf6037e6c284832a02a6/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e903a5ed96809af31cdcf6037e6c284832a02a6/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=5e903a5ed96809af31cdcf6037e6c284832a02a6",
        "patch": "@@ -65,6 +65,14 @@ def split_format_specifiers(specifiers):\n         else:\n             other.append(s)\n \n+    # If both numeric format specifiers and \"others\" are used, assume we're dealing\n+    # with a Qt-formatted message. In the case of Qt formatting (see https://doc.qt.io/qt-5/qstring.html#arg)\n+    # only numeric formats are replaced at all. This means \"(percentage: %1%)\" is valid, without needing\n+    # any kind of escaping that would be necessary for strprintf. Without this, this function\n+    # would wrongly detect '%)' as a printf format specifier.\n+    if numeric:\n+        other = []\n+\n     # numeric (Qt) can be present in any order, others (strprintf) must be in specified order\n     return set(numeric),other\n "
      }
    ]
  },
  {
    "sha": "7179e7ca0db493dccbfd88f64738252844aab6ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTc5ZTdjYTBkYjQ5M2RjY2JmZDg4ZjY0NzM4MjUyODQ0YWFiNmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T08:56:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T08:56:36Z"
      },
      "message": "qt: Periodic translations update",
      "tree": {
        "sha": "41bbae1ba75840706af3df05a5290ae265a02684",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41bbae1ba75840706af3df05a5290ae265a02684"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7179e7ca0db493dccbfd88f64738252844aab6ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7179e7ca0db493dccbfd88f64738252844aab6ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7179e7ca0db493dccbfd88f64738252844aab6ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7179e7ca0db493dccbfd88f64738252844aab6ff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e903a5ed96809af31cdcf6037e6c284832a02a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e903a5ed96809af31cdcf6037e6c284832a02a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e903a5ed96809af31cdcf6037e6c284832a02a6"
      }
    ],
    "stats": {
      "total": 1736,
      "additions": 1512,
      "deletions": 224
    },
    "files": [
      {
        "sha": "f38c425137020ded31353635e466c526a0127f0f",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Kliknut\u00edm op\u011bt umo\u017en\u00ed\u0161 spojen\u00ed do s\u00edt\u011b.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synchronizuji z\u00e1hlav\u00ed blok\u016f (%1 %)\u2026</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Vytv\u00e1\u0159\u00edm nov\u00fd index blok\u016f na disku...</translation>\n@@ -481,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 klient</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>P\u0159ipojuji se\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Stahuji...</translation>\n@@ -3089,6 +3097,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Spustit p\u0159\u00edkaz, kdy\u017e se objev\u00ed transakce t\u00fdkaj\u00edc\u00ed se pen\u011b\u017eenky (%s se v p\u0159\u00edkazu nahrad\u00ed za TxID)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>Po\u010det extra transakc\u00ed, kter\u00e9 se maj\u00ed dr\u017eet v pam\u011bti pro \u00fa\u010dely rekonstrukce kompaktn\u00edch blok\u016f (v\u00fdchoz\u00ed: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Pokud je tenhle blok v \u0159et\u011bzci, tak p\u0159edpokl\u00e1dat, \u017ee on i jeho n\u00e1sledn\u00edci jsou platn\u00ed, a potenci\u00e1ln\u011b p\u0159esko\u010dit ov\u011b\u0159ov\u00e1n\u00ed jejich skript\u016f (0 = ov\u011b\u0159ovat v\u0161e, v\u00fdchoz\u00ed: %s, testnet: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>Maxim\u00e1ln\u00ed povolen\u00e9 se\u0159izov\u00e1n\u00ed \u010dasu medi\u00e1nem \u010das\u016f prot\u011bj\u0161k\u016f. M\u00edstn\u00ed vn\u00edm\u00e1n\u00ed \u010dasu m\u016f\u017ee b\u00fdt ovlivn\u011bno prot\u011bj\u0161ky, a to dop\u0159edu nebo dozadu a\u017e o toto mno\u017estv\u00ed. (v\u00fdchoz\u00ed: %u vte\u0159in)</translation>\n@@ -3105,6 +3121,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>Pros\u00edme, zapoj se nebo p\u0159isp\u011bj, pokud ti %s p\u0159ijde u\u017eite\u010dn\u00fd. V\u00edce informac\u00ed o programu je na %s.</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>Omezit n\u00e1roky na \u00falo\u017en\u00fd prostor pro\u0159ez\u00e1v\u00e1n\u00edm (maz\u00e1n\u00edm) star\u00fdch blok\u016f. Tato volba tak\u00e9 umo\u017en\u00ed pou\u017e\u00edt RPC vol\u00e1n\u00ed pruneblockchain ke smaz\u00e1n\u00ed konkr\u00e9tn\u00edch blok\u016f a d\u00e1le automatick\u00e9 pro\u0159ez\u00e1v\u00e1n\u00ed star\u00fdch blok\u016f, pokud je zad\u00e1na c\u00edlov\u00e1 velikost soubor\u016f s bloky v MiB. Tento re\u017eim nen\u00ed slu\u010diteln\u00fd s -txindex ani -rescan. Upozorn\u011bn\u00ed: op\u011btovn\u00e1 zm\u011bna tohoto nastaven\u00ed bude vy\u017eadovat nov\u00e9 sta\u017een\u00ed cel\u00e9ho \u0159et\u011bzce blok\u016f. (v\u00fdchoz\u00ed: 0 = bloky nepro\u0159ez\u00e1vat, 1 = povolit ru\u010dn\u00ed pro\u0159ez\u00e1v\u00e1n\u00ed skrze RPC, &gt;%u = automatick\u00e9 pro\u0159ez\u00e1v\u00e1n\u00ed blok\u016f tak, aby byla udr\u017eena c\u00edlov\u00e1 velikost soubor\u016f s bloky, v MiB)</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>Nastavit nejni\u017e\u0161\u00ed akceptovateln\u00fd poplatek (v %s/kB) pro transakce, kter\u00e9 maj\u00ed b\u00fdt zahrnuty do nov\u00fdch blok\u016f. (v\u00fdchoz\u00ed: %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>Nastaven\u00ed po\u010dtu vl\u00e1ken pro verifikaci skript\u016f (%u a\u017e %d, 0 = automaticky, &lt;0 = nechat dan\u00fd po\u010det jader voln\u00fd, v\u00fdchoz\u00ed: %d)</translation>"
      },
      {
        "sha": "f62f1e4a734d39538a281a90f29a0d698cfd70b6",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -1083,7 +1083,7 @@\n         <translation>Use a custom data directory:</translation>\n     </message>\n     <message>\n-        <location filename=\"../intro.cpp\" line=\"+89\"/>\n+        <location filename=\"../intro.cpp\" line=\"+94\"/>\n         <source>Error: Specified data directory &quot;%1&quot; cannot be created.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>"
      },
      {
        "sha": "313d5e3be14b67ef1ec205503df3287884e24b26",
        "filename": "src/qt/locale/bitcoin_et.ts",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_et.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_et.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -214,6 +214,10 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/V\u00f5rgumask</translation>\n+    </message>\n     </context>\n <context>\n     <name>BitcoinGUI</name>\n@@ -787,6 +791,10 @@\n         <source>&amp;Window</source>\n         <translation>&amp;Aken</translation>\n     </message>\n+    <message>\n+        <source>Hide tray icon</source>\n+        <translation>Peida tegumiriba ikoon</translation>\n+    </message>\n     <message>\n         <source>Show only a tray icon after minimizing the window.</source>\n         <translation>Minimeeri systray alale.</translation>\n@@ -903,10 +911,30 @@\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n+    <message>\n+        <source>%1 ms</source>\n+        <translation>%1 ms</translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n hour(s)</source>\n+        <translation><numerusform>%n tund</numerusform><numerusform>%n tundi</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n day(s)</source>\n+        <translation><numerusform>%n p\u00e4ev</numerusform><numerusform>%n p\u00e4eva</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n week(s)</source>\n+        <translation><numerusform>%n n\u00e4dal</numerusform><numerusform>%n n\u00e4dalat</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 ja %2</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n year(s)</source>\n+        <translation><numerusform>%n aasta</numerusform><numerusform>%n aastat</numerusform></translation>\n+    </message>\n     </context>\n <context>\n     <name>QObject::QObject</name>"
      },
      {
        "sha": "21800231596a0bd70db1ab0f290fd1ec9bcf5534",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Cliquer pour r\u00e9activer l'activit\u00e9 r\u00e9seau.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synchronisation des en-t\u00eates (%1)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>R\u00e9indexation des blocs sur le disque...</translation>"
      },
      {
        "sha": "9f2c7626de09550ee73eb86eaed9c3acbc01bfc7",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -702,10 +702,6 @@\n         <source>Error</source>\n         <translation>Errore</translation>\n     </message>\n-    <message numerus=\"yes\">\n-        <source>%n GB of free space available</source>\n-        <translation><numerusform>GB di spazio libero disponibile</numerusform><numerusform>%n GB di spazio disponibile</numerusform></translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>(of %n GB needed)</source>\n         <translation><numerusform>(di %nGB richiesti)</numerusform><numerusform>(%n GB richiesti)</numerusform></translation>"
      },
      {
        "sha": "3202587cbd54bc3773667a348375112c358ded02",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 16,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -23,7 +23,7 @@\n     </message>\n     <message>\n         <source>C&amp;lose</source>\n-        <translation>Fechar</translation>\n+        <translation>&amp;Fechar</translation>\n     </message>\n     <message>\n         <source>Delete the currently selected address from the list</source>\n@@ -39,7 +39,7 @@\n     </message>\n     <message>\n         <source>&amp;Delete</source>\n-        <translation>&amp;Excluir</translation>\n+        <translation>E&amp;xcluir</translation>\n     </message>\n     <message>\n         <source>Choose the address to send coins to</source>\n@@ -102,15 +102,15 @@\n     <name>AddressTableModel</name>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Address</source>\n         <translation>Endere\u00e7o</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n </context>\n <context>\n@@ -231,7 +231,7 @@\n     <name>BitcoinGUI</name>\n     <message>\n         <source>Sign &amp;message...</source>\n-        <translation>&amp;Assinar mensagem...</translation>\n+        <translation>Assinar &amp;mensagem...</translation>\n     </message>\n     <message>\n         <source>Synchronizing with network...</source>\n@@ -375,7 +375,7 @@\n     </message>\n     <message>\n         <source>&amp;Show / Hide</source>\n-        <translation>&amp;Exibir/Ocultar</translation>\n+        <translation>&amp;Exibir / Ocultar</translation>\n     </message>\n     <message>\n         <source>Show or hide the main Window</source>\n@@ -479,7 +479,7 @@\n     </message>\n     <message>\n         <source>%1 client</source>\n-        <translation>%1</translation>\n+        <translation>%1 cliente</translation>\n     </message>\n     <message>\n         <source>Connecting to peers...</source>\n@@ -688,7 +688,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>change from %1 (%2)</source>\n@@ -1360,6 +1360,10 @@\n         <source>Node/Service</source>\n         <translation>N\u00f3/Servi\u00e7o</translation>\n     </message>\n+    <message>\n+        <source>NodeId</source>\n+        <translation>ID do n\u00f3</translation>\n+    </message>\n     <message>\n         <source>Ping</source>\n         <translation>Ping</translation>\n@@ -1900,7 +1904,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Message</source>\n@@ -1923,15 +1927,15 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Message</source>\n         <translation>Mensagem</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>(no message)</source>\n@@ -2210,7 +2214,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n </context>\n <context>\n@@ -2665,7 +2669,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message numerus=\"yes\">\n         <source>Open for %n more block(s)</source>\n@@ -2741,7 +2745,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>Transaction status. Hover over this field to show number of confirmations.</source>\n@@ -2888,7 +2892,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Address</source>\n@@ -3797,6 +3801,10 @@\n         <source>Relay non-P2SH multisig (default: %u)</source>\n         <translation>Retransmitir P2SH n\u00e3o multisig (padr\u00e3o: %u)</translation>\n     </message>\n+    <message>\n+        <source>Send transactions with full-RBF opt-in enabled (default: %u)</source>\n+        <translation>Ativar op\u00e7\u00e3o full-RBF nas transa\u00e7\u00f5es enviadas (padr\u00e3o: %u)</translation>\n+    </message>\n     <message>\n         <source>Set key pool size to &lt;n&gt; (default: %u)</source>\n         <translation>Defina o tamanho da chave para piscina&lt;n&gt; (padr\u00e3o: %u)</translation>\n@@ -3819,7 +3827,7 @@\n     </message>\n     <message>\n         <source>Specify pid file (default: %s)</source>\n-        <translation>Especificar aqrquivo pid (padr\u00e3o: %s)</translation>\n+        <translation>Especificar arquivo pid (padr\u00e3o: %s)</translation>\n     </message>\n     <message>\n         <source>Spend unconfirmed change when sending transactions (default: %u)</source>"
      },
      {
        "sha": "2de0d14ddd24bdc6adddf6d72c0d47729159291f",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 1406,
        "deletions": 202,
        "changes": 1608,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff"
      },
      {
        "sha": "20875c232722ac12e09037eafbc3d74e3942b401",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7179e7ca0db493dccbfd88f64738252844aab6ff/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=7179e7ca0db493dccbfd88f64738252844aab6ff",
        "patch": "@@ -481,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u5ba2\u6236</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u6b63\u5728\u8fde\u63a5\u5230\u8282\u70b9\u2026\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u66f4\u65b0\u4e2d...</translation>\n@@ -1927,7 +1931,11 @@\n         <source>(no amount requested)</source>\n         <translation>\uff08\u65e0\u8bf7\u6c42\u91d1\u989d\uff09</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Requested</source>\n+        <translation>\u603b\u989d</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsDialog</name>\n     <message>\n@@ -2178,6 +2186,10 @@\n         <source>Warning: Unknown change address</source>\n         <translation>\u8b66\u544a\uff1a\u672a\u77e5\u7684\u66f4\u6539\u5730\u5740</translation>\n     </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>\u4f60\u9009\u62e9\u7684\u627e\u96f6\u5730\u5740\u672a\u88ab\u5305\u542b\u5728\u672c\u94b1\u5305\u4e2d\uff0c\u4f60\u94b1\u5305\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u91d1\u989d\u5c06\u88ab\u53d1\u9001\u81f3\u8be5\u5730\u5740\u3002\u4f60\u786e\u5b9a\u8981\u8fd9\u6837\u505a\u5417\uff1f</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(\u65e0\u6807\u7b7e)</translation>\n@@ -2459,6 +2471,14 @@\n         <source>0/unconfirmed, %1</source>\n         <translation>0/\u672a\u786e\u8ba4\uff0c%1</translation>\n     </message>\n+    <message>\n+        <source>in memory pool</source>\n+        <translation>\u5728\u5185\u5b58\u6c60\u4e2d</translation>\n+    </message>\n+    <message>\n+        <source>not in memory pool</source>\n+        <translation>\u4e0d\u5728\u5185\u5b58\u6c60\u4e2d</translation>\n+    </message>\n     <message>\n         <source>abandoned</source>\n         <translation>\u5df2\u629b\u5f03</translation>\n@@ -3200,6 +3220,10 @@\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation>\u4f7f\u7528UPnp\u6620\u5c04\u76d1\u542c\u7aef\u53e3 (\u9ed8\u8ba4: %u) </translation>\n     </message>\n+    <message>\n+        <source>Use the test chain</source>\n+        <translation>\u4f7f\u7528\u6d4b\u8bd5\u94fe</translation>\n+    </message>\n     <message>\n         <source>User Agent comment (%s) contains unsafe characters.</source>\n         <translation>\u7528\u6237\u4ee3\u7406\u8bc4\u8bba(%s)\u5305\u542b\u4e0d\u5b89\u5168\u7684\u5b57\u7b26\u3002</translation>"
      }
    ]
  },
  {
    "sha": "4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGZhYzJjOTUwODRkZDBiY2YwZDdkNWRjMmU5ZDYwZjAyN2E3YmU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T09:16:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T09:29:09Z"
      },
      "message": "Update seeds tooling to Python 3\n\nAll the other tooling scripts require Python 3, it makes sense to do so\nhere too.\n\nAlso document the dependency on python3-dnspython.",
      "tree": {
        "sha": "066630f819c0c0e9ac20eb45330efac24bb93008",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/066630f819c0c0e9ac20eb45330efac24bb93008"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33f3b21407a38faaaee2d72d16e8eb340fe74657"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 18,
      "deletions": 13
    },
    "files": [
      {
        "sha": "aa97dafdb57b599809085cd744e78c2552c38a37",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "patch": "@@ -1,11 +1,16 @@\n-### Seeds ###\n+# Seeds\n \n Utility to generate the seeds.txt list that is compiled into the client\n (see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n \n The seeds compiled into the release are created from sipa's DNS seed data, like this:\n \n     curl -s http://bitcoin.sipa.be/seeds.txt > seeds_main.txt\n-    python makeseeds.py < seeds_main.txt > nodes_main.txt\n-    python generate-seeds.py . > ../../src/chainparamsseeds.h\n+    python3 makeseeds.py < seeds_main.txt > nodes_main.txt\n+    python3 generate-seeds.py . > ../../src/chainparamsseeds.h\n \n+## Dependencies\n+\n+Ubuntu:\n+\n+    sudo apt-get install python3-dnspython"
      },
      {
        "sha": "b0ac92ae0363902b9698ec169040d851bfb6a558",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2014 Wladimir J. van der Laan\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2017 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -31,7 +31,7 @@\n \n These should be pasted into `src/chainparamsseeds.h`.\n '''\n-from __future__ import print_function, division\n+\n from base64 import b32decode\n from binascii import a2b_hex\n import sys, os"
      },
      {
        "sha": "33fbb5851e739ccb0a4bcc8368081317ed2d7a0c",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2013-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -14,13 +14,13 @@\n \n # These are hosts that have been observed to be behaving strangely (e.g.\n # aggressively connecting to every node).\n-SUSPICIOUS_HOSTS = set([\n+SUSPICIOUS_HOSTS = {\n     \"130.211.129.106\", \"178.63.107.226\",\n     \"83.81.130.26\", \"88.198.17.7\", \"148.251.238.178\", \"176.9.46.6\",\n     \"54.173.72.127\", \"54.174.10.182\", \"54.183.64.54\", \"54.194.231.211\",\n     \"54.66.214.167\", \"54.66.220.137\", \"54.67.33.14\", \"54.77.251.214\",\n     \"54.94.195.96\", \"54.94.200.247\"\n-])\n+}\n \n import re\n import sys\n@@ -104,7 +104,7 @@ def filtermultiport(ips):\n     hist = collections.defaultdict(list)\n     for ip in ips:\n         hist[ip['sortkey']].append(ip)\n-    return [value[0] for (key,value) in hist.items() if len(value)==1]\n+    return [value[0] for (key,value) in list(hist.items()) if len(value)==1]\n \n # Based on Greg Maxwell's seed_filter.py\n def filterbyasn(ips, max_per_asn, max_total):\n@@ -164,9 +164,9 @@ def main():\n \n     for ip in ips:\n         if ip['net'] == 'ipv6':\n-            print '[%s]:%i' % (ip['ip'], ip['port'])\n+            print('[%s]:%i' % (ip['ip'], ip['port']))\n         else:\n-            print '%s:%i' % (ip['ip'], ip['port'])\n+            print('%s:%i' % (ip['ip'], ip['port']))\n \n if __name__ == '__main__':\n     main()"
      }
    ]
  },
  {
    "sha": "bfa9393c06decdcb679f82350102863f0b4ca7a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmE5MzkzYzA2ZGVjZGNiNjc5ZjgyMzUwMTAyODYzZjBiNGNhN2E4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T09:58:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T10:04:33Z"
      },
      "message": "contrib/seeds: Update PATTERN_AGENT\n\ngmaxwell: Adds the newest versions, drops everything multiple softforks ago.",
      "tree": {
        "sha": "e2c559f98e81b681ee885d915f5fc6317ccce3bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2c559f98e81b681ee885d915f5fc6317ccce3bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfa9393c06decdcb679f82350102863f0b4ca7a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa9393c06decdcb679f82350102863f0b4ca7a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa9393c06decdcb679f82350102863f0b4ca7a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa9393c06decdcb679f82350102863f0b4ca7a8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dfac2c95084dd0bcf0d7d5dc2e9d60f027a7be4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "afe902fd7f0630380a727270bcfe759fdbbd4dd5",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9393c06decdcb679f82350102863f0b4ca7a8/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9393c06decdcb679f82350102863f0b4ca7a8/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=bfa9393c06decdcb679f82350102863f0b4ca7a8",
        "patch": "@@ -3,6 +3,9 @@\n Utility to generate the seeds.txt list that is compiled into the client\n (see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n \n+Be sure to update `PATTERN_AGENT` in `makeseeds.py` to include the current version,\n+and remove old versions as necessary.\n+\n The seeds compiled into the release are created from sipa's DNS seed data, like this:\n \n     curl -s http://bitcoin.sipa.be/seeds.txt > seeds_main.txt"
      },
      {
        "sha": "34f0f576716ed1f1c5bb166477f8df3174ee59f9",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9393c06decdcb679f82350102863f0b4ca7a8/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9393c06decdcb679f82350102863f0b4ca7a8/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=bfa9393c06decdcb679f82350102863f0b4ca7a8",
        "patch": "@@ -30,7 +30,7 @@\n PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$\")\n PATTERN_IPV6 = re.compile(r\"^\\[([0-9a-z:]+)\\]:(\\d+)$\")\n PATTERN_ONION = re.compile(r\"^([abcdefghijklmnopqrstuvwxyz234567]{16}\\.onion):(\\d+)$\")\n-PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0\\.8\\.6\\/|\\/Satoshi:0\\.9\\.(2|3|4|5)\\/|\\/Satoshi:0\\.10\\.\\d{1,2}\\/|\\/Satoshi:0\\.11\\.\\d{1,2}\\/)$\")\n+PATTERN_AGENT = re.compile(r\"^(/Satoshi:0.12.(0|1|99)/|/Satoshi:0.13.(0|1|2|99)/)$\")\n \n def parseline(line):\n     sline = line.split()"
      }
    ]
  },
  {
    "sha": "a60677e394faf57968be57e44ece127c3bb6881f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjA2NzdlMzk0ZmFmNTc5NjhiZTU3ZTQ0ZWNlMTI3YzNiYjY4ODFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T09:29:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T10:04:34Z"
      },
      "message": "Pre-0.14.0 hardcoded seeds update",
      "tree": {
        "sha": "ed45a583362e013cf005459e701a818ddbdf6563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed45a583362e013cf005459e701a818ddbdf6563"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a60677e394faf57968be57e44ece127c3bb6881f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60677e394faf57968be57e44ece127c3bb6881f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a60677e394faf57968be57e44ece127c3bb6881f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60677e394faf57968be57e44ece127c3bb6881f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfa9393c06decdcb679f82350102863f0b4ca7a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa9393c06decdcb679f82350102863f0b4ca7a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa9393c06decdcb679f82350102863f0b4ca7a8"
      }
    ],
    "stats": {
      "total": 3662,
      "additions": 2062,
      "deletions": 1600
    },
    "files": [
      {
        "sha": "0451771daed4597c0a7b76e4a8a78fd603ee2a1b",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 1031,
        "deletions": 800,
        "changes": 1831,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a60677e394faf57968be57e44ece127c3bb6881f/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a60677e394faf57968be57e44ece127c3bb6881f/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=a60677e394faf57968be57e44ece127c3bb6881f",
        "patch": "@@ -1,937 +1,1168 @@\n-5.2.145.201:8333\n-5.22.142.214:8333\n-5.53.172.197:8333\n-5.189.161.164:8333\n-5.230.140.166:8333\n-5.231.3.130:8333\n-5.255.80.103:8333\n-14.202.230.49:8333\n-18.85.11.130:8333\n-23.91.97.25:8333\n-23.94.100.122:8333\n-23.95.99.132:8333\n-24.115.8.206:8333\n-24.127.128.191:8333\n-24.154.178.25:8333\n-24.207.103.43:8333\n-24.207.104.105:8333\n-24.210.230.150:8333\n-24.224.18.84:8333\n-24.246.168.106:8333\n-27.254.64.47:8333\n-31.6.71.123:8333\n-31.6.71.124:8333\n-31.14.134.13:8333\n-31.30.36.220:8333\n-31.164.6.104:8333\n+2.7.8.12:8333\n+2.228.70.198:8333\n+5.39.64.7:8333\n+5.45.80.34:38333\n+5.51.160.38:8333\n+5.61.33.33:8333\n+5.61.37.12:8333\n+5.95.80.47:8333\n+5.102.164.173:8333\n+5.175.71.130:8333\n+5.189.165.22:8333\n+5.199.130.228:8333\n+5.228.100.222:8333\n+5.255.64.231:8333\n+13.93.6.133:8333\n+18.85.34.10:8333\n+18.241.0.63:8333\n+23.28.128.65:8333\n+23.248.113.52:8333\n+23.253.151.73:8333\n+24.4.96.121:8333\n+24.69.65.191:8333\n+24.87.8.43:8333\n+24.150.224.110:8333\n+24.227.69.146:8333\n+27.0.235.33:8333\n 31.170.106.203:8333\n-31.185.134.201:8333\n-31.204.128.99:8333\n-31.204.128.219:8333\n-37.1.219.88:8333\n-37.97.132.109:8333\n-37.120.160.55:8333\n+31.184.197.96:8333\n+31.214.240.56:8333\n+37.1.202.134:8333\n+37.18.74.232:8333\n+37.34.48.17:8333\n+37.48.64.140:8333\n+37.97.141.116:8333\n+37.120.164.16:8333\n 37.120.169.123:8333\n-37.139.32.46:8333\n-37.221.163.218:8333\n-38.130.192.72:8333\n-41.75.96.80:8333\n-45.3.0.49:8333\n-45.33.72.185:8333\n-45.33.96.129:8333\n-45.56.4.63:8333\n-45.79.0.127:8333\n-45.79.80.102:8333\n-45.79.97.30:8333\n-45.79.132.219:8333\n-46.21.97.135:8333\n-46.28.205.67:8333\n-46.28.206.188:8333\n-46.29.20.209:8333\n-46.50.234.179:8333\n-46.101.160.168:8333\n-46.166.161.35:8333\n-46.166.161.103:8333\n-46.182.132.100:8333\n-46.218.227.92:8333\n-46.226.109.20:8333\n-46.227.66.132:8333\n-46.227.66.138:8333\n-46.229.165.154:8333\n-46.229.165.155:8333\n+37.143.9.128:8333\n+37.153.172.227:8333\n+37.193.227.16:8333\n+37.205.8.78:8333\n+37.220.0.114:8333\n+37.232.218.199:8333\n+38.140.161.53:8333\n+40.87.70.120:8333\n+41.162.163.93:8333\n+42.2.198.48:8333\n+45.20.67.1:8333\n+45.55.197.77:8333\n+45.56.97.63:8333\n+45.58.38.162:8333\n+45.63.1.33:8333\n+45.79.2.70:8333\n+46.16.240.98:8333\n+46.19.137.74:8333\n+46.28.206.146:8333\n+46.32.252.197:8333\n+46.59.13.59:8333\n+46.59.39.195:8333\n+46.148.16.210:8333\n+46.160.195.121:8333\n+46.166.142.21:8333\n+46.166.160.29:8330\n+46.188.44.20:8333\n 46.229.238.187:8333\n-46.234.104.48:8333\n-46.239.107.74:8333\n-46.244.0.138:8333\n-46.254.72.195:8333\n-50.5.13.44:8333\n-50.7.37.114:8333\n-50.30.37.103:8333\n-50.39.105.60:8333\n-50.106.40.231:8333\n-52.29.0.37:8333\n-52.76.192.246:8333\n-54.152.192.179:8333\n-54.169.64.174:8333\n-54.175.160.22:8333\n-54.199.128.0:8333\n-58.96.171.129:8333\n-58.161.238.57:8333\n-60.251.195.221:8333\n-61.35.225.19:8333\n+46.231.16.149:8333\n+47.88.100.130:8333\n+47.89.192.134:8333\n+47.185.194.160:8333\n+47.189.129.218:8333\n+49.65.2.140:8333\n+50.3.72.129:8333\n+50.31.99.225:8333\n+51.175.33.95:8333\n+52.1.165.219:8333\n+52.10.170.186:8333\n+52.51.128.216:8333\n+54.197.130.244:8333\n+58.59.2.22:8333\n+58.84.6.81:8333\n+59.125.8.143:8333\n+59.167.130.139:8333\n+61.47.2.20:8333\n 62.43.130.178:8333\n-62.65.39.12:8333\n+62.76.96.6:8333\n 62.107.200.30:8333\n+62.133.15.58:8333\n 62.133.194.2:8333\n-62.181.238.186:8333\n-62.183.22.50:8333\n-62.210.85.120:8333\n-62.210.162.89:8333\n+62.133.194.156:8333\n+62.138.1.95:8333\n+62.216.238.3:8333\n 62.238.34.125:8333\n-64.25.171.73:8333\n-64.27.166.30:8333\n-64.53.137.101:8333\n-64.71.72.44:8333\n+63.137.40.207:8333\n+63.231.96.109:8333\n+64.78.240.150:8333\n 64.83.225.146:8333\n-64.121.3.163:8333\n-64.203.102.86:8333\n-65.94.131.59:8333\n-65.188.136.233:8333\n-66.11.162.218:8333\n-66.23.228.133:8333\n-66.90.137.89:8333\n-66.114.33.49:8333\n-66.150.105.77:8333\n+64.137.236.68:8833\n+64.156.193.120:8333\n+66.79.160.82:8333\n+66.91.230.231:8333\n+66.135.128.121:8333\n 66.172.10.4:8333\n 66.194.38.250:8333\n 66.194.38.253:8333\n-66.194.38.254:8333\n-66.231.97.172:8333\n+66.215.34.26:8333\n 66.240.237.155:8333\n-67.159.13.34:8333\n-67.205.74.206:8333\n+67.205.96.108:8333\n+67.205.128.5:8333\n+67.219.233.140:8333\n 67.221.193.55:8333\n-67.227.72.17:8333\n-68.65.120.53:8333\n-68.65.205.226:9000\n-68.144.4.34:8333\n-69.39.49.199:8333\n+68.100.196.118:8333\n+68.132.193.222:8333\n+68.168.118.234:8333\n+69.11.97.43:8333\n+69.30.229.10:8333\n 69.50.171.205:8333\n-69.65.41.21:8333\n-69.113.98.61:8333\n-69.119.97.39:8333\n-69.146.70.124:8333\n-69.193.71.2:8333\n-70.46.10.237:8333\n-70.80.200.187:8333\n-70.185.97.117:8333\n-71.254.160.25:8333\n-72.28.203.5:8333\n-72.52.130.110:8333\n-72.83.194.122:8333\n-72.128.32.167:8333\n-72.179.136.80:8333\n-72.235.38.70:8333\n-74.50.44.193:8333\n-74.72.60.83:8333\n-74.80.234.116:8333\n-74.207.233.193:8333\n-75.112.233.128:8333\n-75.118.166.197:8333\n-75.140.0.241:8333\n-75.159.240.66:8333\n-75.174.5.26:8333\n-76.72.160.252:8333\n-76.72.160.254:8333\n-76.74.170.112:8333\n-76.79.201.54:8333\n-76.175.166.164:8333\n-76.179.105.27:8333\n-77.68.37.200:8333\n-77.234.49.196:8333\n-77.247.229.93:8333\n-78.24.72.78:8333\n-78.47.32.147:8333\n-78.84.100.95:8333\n-78.121.69.23:8333\n-78.129.167.5:8333\n-78.193.96.155:8333\n-79.19.37.179:8333\n+69.125.193.145:8333\n+69.162.139.125:8333\n+70.35.98.39:8333\n+70.112.32.29:8333\n+71.126.181.146:8333\n+72.180.32.105:8333\n+73.226.64.145:8333\n+74.83.140.242:8333\n+74.84.128.158:9333\n+74.122.237.124:8333\n+74.215.133.145:8333\n+75.76.101.169:8333\n+75.85.13.8:8333\n+75.86.168.13:8333\n+75.170.97.25:8333\n+75.177.137.134:8333\n+76.76.227.136:8333\n+77.53.136.6:8333\n+77.110.11.52:8333\n+78.25.32.206:8333\n+78.34.8.120:8333\n+78.46.32.99:8333\n+78.56.9.214:8333\n+78.56.229.177:8333\n+78.129.237.245:8333\n+78.196.172.45:8333\n 79.132.230.144:8333\n-79.133.43.63:8333\n-79.134.201.66:8333\n 79.169.35.235:8333\n-80.57.227.14:8333\n+79.172.194.219:8333\n 80.64.65.87:8333\n-80.86.92.70:8333\n-80.100.203.151:8333\n-80.101.32.121:8333\n-80.161.178.73:8333\n-80.240.129.170:8333\n-81.7.11.50:8333\n-81.7.11.55:8333\n-81.17.17.40:9333\n-81.30.39.83:8333\n-81.90.36.7:9444\n-81.136.224.77:8333\n-81.162.231.211:8333\n-81.184.0.143:8333\n-81.198.128.86:8333\n+80.89.137.115:8333\n+80.93.36.173:8333\n+80.101.167.100:8333\n+80.114.34.158:8333\n+80.127.136.50:8333\n+80.188.139.82:8333\n+80.222.39.77:8333\n+80.223.105.69:8333\n+80.229.151.187:8333\n+80.240.129.221:8333\n+81.7.10.238:8333\n+81.7.13.84:8333\n+81.27.96.92:8333\n+81.35.143.98:8333\n+81.82.201.5:8333\n+81.83.96.5:8333\n+81.169.227.36:8333\n+81.171.2.119:8333\n+81.171.38.130:8333\n+81.175.255.118:8333\n+81.207.8.49:8333\n+81.228.194.187:8333\n+82.9.1.77:8333\n 82.11.33.229:8333\n-82.79.128.134:8333\n-82.118.233.111:8333\n-82.135.139.30:8333\n+82.102.13.117:8333\n+82.116.203.240:8333\n+82.130.103.16:8333\n+82.136.65.227:8333\n+82.158.227.238:8333\n+82.197.212.25:8333\n 82.199.102.10:8333\n-82.221.106.17:8333\n-82.221.108.21:8333\n+82.200.204.41:8333\n+82.200.204.119:8333\n+82.221.105.223:8333\n 82.221.108.27:8333\n-83.137.41.3:8333\n-83.142.197.168:8333\n+82.221.111.136:8333\n+82.221.139.97:8333\n+83.137.41.10:8333\n 83.143.130.19:8333\n 83.150.9.196:8333\n-83.183.17.191:8333\n-83.227.173.83:8333\n-83.230.5.15:8333\n-83.233.105.151:443\n-83.246.75.8:8333\n-83.250.133.158:8333\n-83.255.66.118:8334\n-84.24.69.59:8333\n+83.169.2.43:8333\n+83.217.203.130:8333\n+83.249.88.52:8333\n+84.26.162.92:8333\n 84.42.193.6:8333\n-84.45.98.87:8333\n-84.54.128.11:8333\n-84.212.200.24:8333\n-84.215.198.109:8333\n-84.230.4.177:8333\n-85.95.228.83:8333\n-85.95.228.123:8333\n-85.114.128.134:8333\n-85.214.66.168:8333\n-85.214.147.162:8333\n-85.243.168.4:8333\n-86.1.0.18:8333\n-87.79.77.106:8333\n-87.91.156.110:8333\n-87.236.196.222:8333\n-88.85.75.152:8333\n-88.87.1.230:8333\n-88.87.92.102:8333\n-88.89.69.202:8333\n-88.97.72.229:8333\n-88.164.117.99:8333\n-88.198.32.131:8333\n+84.134.194.115:8333\n+84.201.32.115:8333\n+84.212.232.71:8333\n+84.238.140.176:8333\n+85.10.104.34:8333\n+85.21.144.226:8333\n+85.25.194.12:8333\n+85.144.79.190:8333\n+85.145.228.192:8333\n+85.194.238.130:8333\n+85.228.201.80:8333\n+85.229.228.174:8333\n+85.236.233.87:8333\n+86.80.204.185:8333\n+86.105.227.190:8333\n+86.135.39.40:8333\n+87.106.139.127:8333\n+87.120.8.5:8333\n+87.120.37.230:8333\n+87.239.101.102:8333\n+87.243.197.82:8333\n+88.112.112.173:8333\n+88.150.192.17:8333\n+88.185.155.134:8333\n+88.202.202.221:8333\n 88.202.230.87:8333\n-88.214.193.154:8343\n-88.214.194.226:8343\n-89.10.155.88:8333\n-89.46.101.44:8333\n-89.163.224.212:8333\n-89.174.248.20:8333\n-89.202.231.198:8333\n-89.212.75.6:8333\n+88.208.39.182:8333\n+89.34.99.41:8333\n+89.163.224.187:8333\n+89.169.233.150:8333\n+89.184.65.85:8333\n+89.212.91.219:8333\n+89.249.178.36:8333\n 90.149.38.172:8333\n-90.169.106.139:8333\n-91.64.101.150:8333\n-91.65.196.179:8333\n-91.121.80.17:8333\n-91.126.77.77:8333\n-91.145.76.156:8333\n-91.152.150.35:8333\n-91.192.137.17:8333\n-91.196.170.110:8333\n+91.65.97.157:8333\n+91.107.64.143:8333\n+91.114.35.107:8333\n+91.135.0.187:8333\n+91.145.110.95:8333\n+91.157.38.151:8333\n 91.197.44.133:8333\n-91.207.68.144:8333\n-91.210.105.28:8333\n-91.211.102.101:8333\n-91.211.106.34:8333\n-91.214.200.205:8333\n-91.220.43.146:8333\n-91.222.71.89:8333\n-91.224.140.242:8333\n-91.229.76.14:8333\n+91.205.176.54:8333\n+91.206.203.10:8333\n+91.206.203.18:8333\n+91.215.35.130:8333\n+91.219.239.159:8333\n+91.223.133.2:8333\n+91.223.133.40:8333\n+91.226.10.90:8333\n+91.240.141.169:8333\n 92.27.7.209:8333\n-92.51.167.88:8333\n-92.247.229.163:8333\n-93.84.114.106:8333\n-93.113.36.172:8333\n+92.89.67.207:8333\n+92.221.201.138:8333\n+93.95.187.122:8333\n+93.103.73.187:8333\n+93.123.80.47:8333\n 93.188.224.253:8333\n-94.75.239.69:8333\n-94.190.227.112:8333\n-94.214.2.74:8333\n-94.224.162.65:8333\n-94.236.198.253:8333\n+93.190.69.242:8333\n+94.19.12.244:8333\n+94.156.128.116:8333\n+94.177.171.73:8333\n+94.181.44.104:8333\n+94.237.26.173:8333\n 94.242.229.158:8333\n-95.84.138.99:8333\n-95.95.168.87:8333\n+94.255.128.98:8333\n+95.79.35.50:8333\n+95.91.41.39:8333\n 95.110.234.93:8333\n-95.130.9.200:8333\n-95.165.168.168:8333\n-95.170.235.254:8333\n-95.211.130.154:8333\n-96.46.68.104:8333\n-96.127.202.148:8333\n-97.76.171.35:8333\n-98.160.160.67:8333\n-99.126.197.187:8333\n-99.198.173.1:8333\n-101.100.174.138:8333\n-101.164.201.208:8333\n-103.224.165.48:8333\n-104.128.225.223:8333\n+95.128.48.209:8333\n+95.183.48.71:8333\n+96.23.67.85:8333\n+97.64.177.10:8333\n+97.104.201.95:8333\n+98.29.197.149:8333\n+98.169.2.107:8333\n+99.232.48.72:8333\n+101.100.141.55:8333\n+103.7.32.40:8333\n+103.53.225.69:8333\n+103.249.106.74:8333\n+104.128.224.13:8333\n 104.128.228.252:8333\n-104.131.192.94:8333\n-104.155.45.201:8334\n-104.194.28.195:8663\n-104.211.1.27:8333\n-104.221.38.177:8333\n-104.236.9.79:8333\n-104.236.129.178:8333\n-104.236.186.249:8333\n-104.236.194.15:8333\n-104.238.128.214:8333\n+104.155.1.158:8333\n+104.168.128.50:8333\n+104.199.160.228:8333\n+104.204.109.11:8333\n+104.219.251.118:8333\n+104.223.3.129:8333\n+104.223.3.219:8333\n 104.238.130.182:8333\n-106.38.234.84:8333\n-106.185.36.204:8333\n-106.185.38.67:8333\n-107.6.4.145:8333\n-107.150.2.6:8333\n-107.150.40.234:8333\n-107.170.13.184:8333\n-107.181.250.216:8333\n-107.191.101.111:8333\n-107.191.106.115:8333\n+104.245.99.227:8333\n+106.38.234.89:8333\n+106.104.134.218:8333\n+107.136.6.71:8333\n+107.150.45.210:8333\n+107.151.144.103:8333\n+107.170.44.99:8333\n+107.181.137.133:8333\n+107.191.102.13:8333\n+108.58.252.82:8333\n+108.59.9.167:8333\n 108.59.12.163:8333\n-108.161.129.247:8333\n-109.193.160.140:8333\n-109.197.13.54:8333\n-109.230.7.248:8333\n-109.234.106.191:8333\n-109.236.137.80:8333\n-109.251.161.121:8333\n-112.65.231.226:8333\n-115.70.166.57:8333\n-115.159.42.80:8333\n-117.18.73.34:8333\n-118.67.201.40:8333\n-118.100.86.246:8333\n-118.110.104.152:8333\n-119.224.64.141:8333\n+108.162.106.215:8333\n+108.168.133.164:8333\n+108.173.202.101:8333\n+108.180.110.190:8333\n+109.29.75.40:8333\n+109.120.194.136:8333\n+109.230.230.88:8333\n+109.235.67.115:8333\n+109.235.69.120:8333\n+109.236.90.199:8333\n+109.255.0.107:8333\n+110.10.130.12:8333\n+110.10.176.94:8333\n+110.132.172.251:8333\n+111.90.158.17:8333\n+115.66.205.171:8333\n+116.31.123.139:8333\n+118.192.48.46:8333\n+118.193.164.98:8333\n+119.29.156.231:8333\n+119.63.44.133:19980\n+119.81.99.27:8333\n+119.106.12.169:8333\n+119.147.137.155:19980\n+119.185.1.182:8333\n 120.55.193.136:8333\n-122.106.169.178:8333\n-123.203.174.15:8333\n-123.255.232.94:8333\n-124.148.165.165:8333\n-124.232.141.31:8333\n-128.30.92.69:8333\n-128.39.141.182:8333\n-128.84.167.20:8333\n-128.111.73.10:8333\n-128.127.38.195:8333\n+121.254.173.23:8333\n+121.254.173.40:8333\n+123.56.129.45:8333\n+123.203.163.128:8333\n+123.206.32.198:8333\n+124.189.160.221:8333\n+124.189.192.232:8333\n 128.140.224.162:8333\n-128.199.101.104:8333\n-128.233.224.35:8333\n-128.253.3.193:20020\n-130.180.228.138:8333\n-130.185.144.213:8333\n-130.255.73.207:8333\n-133.218.233.11:8333\n-134.249.128.23:8333\n-136.159.234.234:8333\n-137.116.160.176:8333\n-139.162.2.145:8333\n-139.162.23.117:8333\n-141.134.69.253:8333\n-141.255.162.215:8333\n-144.122.163.187:8333\n-145.131.3.54:8333\n-145.255.4.94:8333\n-146.0.32.101:8337\n-147.83.72.91:8333\n-148.103.28.68:8333\n-149.5.32.102:8333\n-149.210.164.195:8333\n-150.101.163.241:8333\n-151.236.11.189:8333\n-152.3.136.56:8333\n-154.20.208.25:8333\n-158.181.104.149:8333\n-159.253.96.226:8333\n-160.36.130.180:8333\n+128.199.68.205:8333\n+130.234.207.115:8333\n+131.113.41.123:8333\n+131.114.72.104:8333\n+132.204.108.155:8333\n+134.119.13.230:8333\n+134.213.133.206:8333\n+134.213.133.207:8333\n+135.23.5.3:8333\n+137.74.0.66:8333\n+138.68.1.45:8333\n+138.68.2.194:8333\n+138.68.64.19:8333\n+138.68.64.28:8333\n+139.59.42.248:8333\n+139.220.240.153:8333\n+140.112.107.118:8333\n+140.186.224.112:8333\n+141.52.64.141:8333\n+142.68.237.107:8333\n+142.217.12.106:8333\n+146.60.204.92:8333\n+146.185.161.209:8333\n+148.103.7.119:8333\n+149.210.133.244:8333\n+150.229.0.143:8333\n+151.231.238.25:8333\n+151.248.160.227:8333\n+153.230.228.15:8333\n+155.133.43.249:8333\n+158.58.238.145:8333\n+158.109.79.13:34821\n+159.203.70.208:8333\n+160.16.206.31:8333\n 162.209.1.233:8333\n 162.209.4.125:8333\n-162.209.106.123:8333\n-162.210.198.184:8333\n-162.248.99.164:53011\n+162.216.192.231:8333\n+162.243.100.111:8333\n+162.246.11.194:8333\n 162.248.102.117:8333\n-162.251.108.53:8333\n-163.44.2.48:8333\n-163.158.36.17:8333\n-166.230.71.67:8333\n-167.160.36.62:8333\n-167.160.169.92:8333\n-168.93.129.220:8333\n-169.55.99.84:8333\n-169.228.66.43:8333\n-172.9.169.242:8333\n-173.32.11.194:8333\n-173.230.228.136:8333\n-173.246.107.34:8333\n-173.254.235.34:8333\n-174.0.128.222:8333\n-174.25.130.148:8333\n-174.50.64.101:8333\n-175.140.232.141:8333\n-176.36.37.62:8333\n-176.46.9.96:8333\n-176.124.110.27:8333\n-177.39.16.102:8333\n-178.17.173.2:8333\n-178.62.5.248:8333\n-178.62.70.16:8333\n+162.252.46.83:8333\n+163.172.33.78:8333\n+163.172.194.30:8333\n+169.229.198.106:8333\n+170.75.195.168:8333\n+172.103.205.197:8333\n+172.245.225.126:8333\n+173.179.37.8:8333\n+173.208.203.74:8333\n+173.252.46.16:8333\n+174.117.141.124:8333\n+175.126.38.158:8333\n+175.126.38.177:8333\n+175.139.106.119:8333\n+175.140.232.66:8333\n+176.9.117.100:8333\n+176.36.33.121:8333\n+176.36.99.222:8333\n+176.56.227.36:8333\n+176.100.100.206:8333\n+176.106.144.183:8333\n+176.123.7.148:8333\n+176.126.167.10:8333\n+176.223.201.198:8333\n+178.62.68.62:8333\n+178.62.102.56:8333\n 178.62.203.185:8333\n-178.79.160.118:8333\n-178.169.206.244:8333\n-178.193.234.62:8333\n-178.199.96.108:8333\n-178.254.18.96:8333\n+178.124.197.101:8333\n+178.170.138.202:8333\n+178.175.129.18:8333\n+178.188.47.62:8333\n+178.199.240.22:8333\n+178.218.209.162:8333\n+178.237.35.34:8333\n+178.238.224.242:8333\n+178.254.34.144:8333\n 178.254.34.161:8333\n-178.255.41.123:8333\n-180.210.34.58:9801\n-182.92.226.212:8333\n-182.171.246.142:8333\n-184.23.8.9:8333\n-184.58.162.35:8333\n-184.154.9.170:8333\n-185.8.238.165:8333\n+179.43.183.2:8333\n+180.200.128.58:8333\n+182.93.34.130:8333\n+185.8.238.197:8333\n+185.11.139.172:8333\n 185.24.97.11:8333\n-185.31.137.139:8333\n-185.38.44.64:8333\n-185.53.128.180:8333\n-185.53.129.244:8333\n-185.77.129.119:8333\n-185.77.129.156:8333\n-185.82.203.92:8333\n-188.20.97.18:8333\n-188.126.8.14:8333\n-188.138.33.239:8333\n-188.155.136.70:8333\n+185.24.233.100:8333\n+185.25.48.71:8333\n+185.25.48.114:8333\n+185.28.76.179:8333\n+185.70.105.152:8339\n+185.77.128.69:8333\n+185.77.128.241:8333\n+185.86.79.87:8333\n+185.89.102.2:3333\n+185.89.102.53:3333\n+185.109.144.155:8333\n+185.117.75.50:8333\n+185.121.173.223:8333\n+185.128.41.157:8333\n+185.130.226.106:8333\n+185.145.130.76:8333\n+188.63.192.104:8333\n+188.113.164.231:8333\n 188.166.229.112:8333\n-188.182.108.129:8333\n-188.226.225.174:8010\n-188.242.171.8:8333\n-188.243.4.139:8333\n-190.10.9.234:8333\n-190.10.10.147:8333\n+188.214.128.77:8333\n+190.10.8.211:8333\n 190.81.160.184:8333\n-190.85.201.37:8333\n-192.34.227.230:8333\n-192.77.189.200:8333\n-192.124.224.7:8333\n-192.146.137.1:8333\n-192.203.228.71:8333\n-192.206.202.20:8333\n-193.0.109.3:8333\n-193.41.229.130:8333\n-193.41.229.156:8333\n+190.111.231.19:8333\n+192.131.44.93:8333\n+192.206.202.6:8333\n+192.227.245.133:8333\n+192.241.74.123:8333\n+192.241.74.126:8333\n+192.254.71.222:8333\n+193.10.64.85:8333\n+193.46.80.101:8333\n 193.49.43.219:8333\n-193.147.71.120:8333\n-193.179.65.233:8333\n+193.93.79.215:8333\n 193.183.99.46:8333\n-193.192.37.135:8333\n 193.234.224.195:8333\n-194.58.108.213:8333\n-194.187.96.2:8333\n-194.255.31.59:8333\n-195.36.6.101:8333\n-195.58.238.243:8333\n-195.197.175.190:8333\n-195.239.1.66:8333\n-198.48.196.230:8333\n-198.50.192.160:8333\n-198.57.210.27:8333\n-198.84.195.179:8333\n-198.167.140.8:8333\n+193.239.80.155:8333\n+194.63.140.208:8333\n+194.87.1.232:8333\n+194.187.227.18:8333\n+194.247.12.136:8333\n+195.91.176.86:8333\n+196.28.98.20:8333\n+198.44.249.35:8333\n+198.84.172.252:8333\n 198.204.224.106:8333\n-199.127.226.245:8333\n-199.201.110.8:8333\n-199.233.234.90:8333\n+198.211.97.46:8333\n+199.66.64.198:8333\n+199.101.100.58:8333\n+199.101.100.59:8333\n+199.127.224.50:8333\n+200.46.241.71:8333\n 200.116.98.185:8333\n-202.60.70.18:8333\n-203.151.140.14:8333\n-204.112.203.52:8333\n+203.9.225.13:8333\n+203.177.142.37:8333\n 205.200.247.149:8333\n-207.226.141.253:8333\n-207.255.42.202:8333\n-208.53.164.19:8333\n-208.66.68.127:8333\n-208.66.68.130:8333\n-208.71.171.232:8341\n-208.76.200.200:8333\n-208.82.98.189:8333\n-208.85.193.31:8333\n-208.111.48.41:8333\n-208.111.48.45:8333\n-209.34.232.72:8333\n-209.81.9.223:8333\n-209.90.224.2:8333\n+205.209.131.150:13838\n+206.53.64.74:8333\n+206.72.192.69:8333\n+206.123.112.180:8333\n+208.66.208.153:8333\n+208.68.174.76:8333\n+208.107.97.242:8333\n+208.111.48.132:8333\n+208.118.235.190:8333\n+209.6.205.126:8333\n+209.40.96.121:8333\n+209.58.130.137:8333\n+209.73.142.226:8333\n 209.90.224.4:8333\n-209.126.98.174:8333\n-209.136.72.69:8333\n-209.195.4.74:8333\n-209.197.13.62:8333\n-211.72.227.8:8333\n-212.51.144.42:8333\n-212.71.233.127:8333\n-212.126.14.122:8333\n-212.159.44.50:8333\n-213.5.36.58:8333\n-213.57.33.10:8333\n-213.66.205.194:8333\n-213.136.73.125:8333\n-213.155.3.216:8333\n-213.155.7.24:8333\n-213.167.17.6:8333\n-213.223.138.13:8333\n-216.15.78.182:8333\n-216.38.129.164:8333\n-216.48.168.8:8333\n-216.169.141.169:8333\n-216.245.206.181:8333\n-216.249.204.161:8333\n-216.250.138.230:8333\n+209.126.69.243:8333\n+209.126.108.91:8333\n+209.195.4.18:8333\n+209.250.6.190:8333\n+210.54.37.225:8333\n+210.223.3.44:8333\n+211.149.234.109:8333\n+212.51.140.183:8333\n+212.90.179.206:8333\n+212.93.226.90:8333\n+212.110.171.118:8333\n+212.202.132.17:8333\n+213.91.205.134:8333\n+213.165.68.218:8333\n+213.196.200.213:8333\n+216.59.4.212:8333\n+216.74.32.109:8333\n+216.158.225.70:8333\n+216.164.138.13:8333\n+216.167.236.247:8333\n+216.197.79.74:8333\n 217.11.225.189:8333\n-217.12.34.158:8333\n-217.12.202.33:8333\n-217.20.171.43:8333\n-217.23.1.126:8333\n-217.23.11.138:8333\n+217.12.199.207:8333\n+217.20.130.72:8333\n+217.23.6.148:8333\n+217.23.140.103:8333\n+217.28.96.180:8333\n+217.35.130.42:8333\n 217.111.66.79:8333\n-217.155.202.191:8333\n 217.158.9.102:8333\n-217.172.32.18:20993\n-220.245.196.37:8333\n-[2001:1291:2bf:1::100]:8333\n+217.168.143.169:8333\n+217.209.32.219:8333\n+218.161.33.165:8333\n+221.121.144.138:8333\n+[2001:0:4137:9e76:2048:3a84:bb91:e846]:8333\n+[2001:0:4137:9e76:2066:e9e:b489:f8b8]:8333\n+[2001:0:4137:9e76:3854:1211:b5ac:a96b]:8333\n+[2001:0:4137:9e76:4e3:1f66:cd4c:829f]:8333\n+[2001:0:4137:9e76:ad:1f4:9ea9:fa2e]:8333\n+[2001:0:4137:9e76:e5:baa:b66f:f418]:8333\n+[2001:0:53aa:64c:20a2:59c4:ad22:93ea]:8333\n+[2001:0:53aa:64c:59:617f:a10d:e0]:8333\n+[2001:0:5ef5:79fb:200f:3ae5:3cbc:74c9]:8333\n+[2001:0:5ef5:79fb:38f2:13b4:b208:5604]:8333\n+[2001:0:5ef5:79fd:200b:22a7:cc50:f52d]:8333\n+[2001:0:5ef5:79fd:24ef:1aef:a994:303d]:8333\n+[2001:0:5ef5:79fd:24fc:b5d:ad4f:4db2]:8333\n+[2001:0:5ef5:79fd:28bf:2d23:e02e:c3ef]:8333\n+[2001:0:5ef5:79fd:3cd0:3c2e:da44:a759]:8333\n+[2001:0:5ef5:79fd:87e:fd7:b1c2:1b4]:8333\n+[2001:0:9d38:6ab8:18db:3bda:ab90:e81e]:8333\n+[2001:0:9d38:6ab8:4e7:1660:862f:a6d7]:8333\n+[2001:0:9d38:6ab8:6:2b:5074:9588]:8333\n+[2001:0:9d38:6abd:10f8:a7d7:bb90:f524]:8333\n+[2001:13d8:1c01:1000::11]:8333\n+[2001:15c0:65ff:610::2]:8333\n+[2001:1608:10:156:ae::4adb]:8333\n+[2001:1620:b1b:8888:20d:b9ff:fe41:6710]:8333\n+[2001:1620:b1b:face:20d:b9ff:fe41:6710]:8333\n [2001:1620:f00:282::2]:8333\n [2001:1620:f00:8282::1]:8333\n-[2001:19f0:5000:8de8:5400:ff:fe12:55e4]:8333\n-[2001:19f0:6c00:9103:5400:ff:fe10:a8d3]:8333\n-[2001:1b60:3:172:142b:6dff:fe7a:117]:8333\n-[2001:410:a000:4050:8463:90b0:fffb:4e58]:8333\n+[2001:1680:101:1ae::1]:8333\n+[2001:16d8:ff00:85de:20c:29ff:fe52:9594]:8333\n+[2001:19f0:4400:434d:5400:ff:fe42:2678]:8333\n+[2001:19f0:5000:8c8b:5400:ff:fe1f:c023]:8333\n+[2001:19f0:5000:8ce6:5400:ff:fe1b:24a9]:8333\n+[2001:19f0:5:314:5400:ff:fe2c:42e8]:8333\n+[2001:19f0:5:51b:5400:ff:fe49:fe5b]:8333\n+[2001:19f0:5:bc:5400:ff:fe3b:9339]:8333\n+[2001:1af8:4020:a020:5::]:8333\n+[2001:1bc8:1a0:590e:2e0:f4ff:fe16:3a39]:8333\n+[2001:1c04:1401:8f00:f4fe:4fff:fe0c:df40]:8333\n+[2001:4128:6135:10:20c:29ff:fe69:9e81]:8333\n [2001:4128:6135:2010:21e:bff:fee8:a3c0]:8333\n-[2001:41d0:1008:761::17c]:8333\n+[2001:4128:6135:e001:5054:ff:fe37:e9eb]:8333\n+[2001:41d0:1000:1024::]:8333\n+[2001:41d0:1000:1433::]:8333\n+[2001:41d0:1004:22ae::]:8333\n+[2001:41d0:1004:2996::]:8333\n+[2001:41d0:1008:11e0::1a5c:6d9d]:8333\n+[2001:41d0:1008:11e0::b74:baf7]:8333\n+[2001:41d0:1008:237a::]:8333\n+[2001:41d0:1008:2752::]:8333\n+[2001:41d0:1008:494::]:8333\n [2001:41d0:1:45d8::1]:8333\n-[2001:41d0:1:6cd3::]:8333\n+[2001:41d0:1:5630::1]:8333\n+[2001:41d0:1:6f57::1]:8333\n+[2001:41d0:1:801e::1]:8333\n+[2001:41d0:1:8852::1]:8333\n [2001:41d0:1:8b26::1]:8333\n-[2001:41d0:1:afda::]:8200\n+[2001:41d0:1:a5b8::1]:8333\n [2001:41d0:1:b26b::1]:8333\n [2001:41d0:1:c139::1]:8333\n [2001:41d0:1:c8d7::1]:8333\n-[2001:41d0:1:f59f::33]:8333\n-[2001:41d0:1:f7cc::1]:8333\n-[2001:41d0:2:1021::1]:8333\n-[2001:41d0:2:37c3::]:8200\n-[2001:41d0:2:4797:2323:2323:2323:2323]:8333\n-[2001:41d0:2:53df::]:8333\n+[2001:41d0:1:d227::]:8333\n+[2001:41d0:1:dbc4::1]:8333\n+[2001:41d0:1:dc5d::1]:8333\n+[2001:41d0:1:e13b::1]:8333\n+[2001:41d0:1:ef5b::1]:8333\n+[2001:41d0:2:16be::1]:8333\n+[2001:41d0:2:203c::1]:8333\n+[2001:41d0:2:38c5::1]:8333\n+[2001:41d0:2:519::]:8333\n [2001:41d0:2:9c94::1]:8333\n-[2001:41d0:2:9d3e::1]:8333\n-[2001:41d0:2:a24f::]:8333\n-[2001:41d0:2:a35a::]:8333\n-[2001:41d0:2:b2b8::]:8333\n-[2001:41d0:2:c1d9::]:8333\n-[2001:41d0:2:c6e::]:8333\n+[2001:41d0:2:b792::]:8333\n+[2001:41d0:2:bf2a::]:8333\n+[2001:41d0:2:c793::]:8333\n [2001:41d0:2:c9bf::]:8333\n-[2001:41d0:2:f1a5::]:8333\n-[2001:41d0:52:a00::105f]:8333\n-[2001:41d0:52:cff::6f5]:8333\n-[2001:41d0:52:d00::6e2]:8333\n-[2001:41d0:8:3e75::1]:8333\n-[2001:41d0:8:62ab::1]:8333\n+[2001:41d0:303:4f0::]:8333\n+[2001:41d0:8:1a8a::1]:8333\n+[2001:41d0:8:3fa9::1]:8333\n+[2001:41d0:8:4670::1]:8333\n+[2001:41d0:8:4f48::1]:8333\n [2001:41d0:8:6728::]:8333\n-[2001:41d0:8:b30a::1]:8333\n-[2001:41d0:8:bc26::1]:8333\n-[2001:41d0:8:be9a::1]:8333\n-[2001:41d0:8:d984::]:8333\n-[2001:41d0:8:eb8b::]:8333\n-[2001:41d0:a:13a2::1]:8333\n-[2001:41d0:a:2b18::1]:8333\n-[2001:41d0:a:2d14::]:8333\n-[2001:41d0:a:4558::1df2:76d3]:8333\n-[2001:41d0:a:4aaa::]:8333\n-[2001:41d0:a:635b::1]:8333\n-[2001:41d0:a:63d8::1]:8333\n+[2001:41d0:8:72c2:d:242:ac11:2]:8333\n+[2001:41d0:8:8007::]:8333\n+[2001:41d0:8:a71c::]:8333\n+[2001:41d0:8:bccc::1]:8333\n+[2001:41d0:8:bd45::1]:8333\n+[2001:41d0:8:c67c::]:8333\n+[2001:41d0:8:de3d::1]:8333\n+[2001:41d0:8:e257::1]:8333\n+[2001:41d0:8:e3e4::1]:8333\n+[2001:41d0:a:14cc::1]:8333\n+[2001:41d0:a:15b2::1]:8333\n+[2001:41d0:a:1ac9::1]:8333\n+[2001:41d0:a:2496::1]:8333\n+[2001:41d0:a:308c::]:8333\n+[2001:41d0:a:5879::]:8333\n+[2001:41d0:a:6810::1]:8333\n+[2001:41d0:a:682d::1]:8333\n [2001:41d0:a:6c29::1]:8333\n-[2001:41d0:a:f9cd::1]:8333\n-[2001:41d0:d:20a4::]:8333\n+[2001:41d0:a:f52a::1]:8333\n+[2001:41d0:d:111c::]:8333\n+[2001:41d0:e:1388::1]:8333\n [2001:41d0:e:26b::1]:8333\n+[2001:41d0:e:f73::1]:8333\n [2001:41d0:fc8c:a200:7a24:afff:fe9d:c69b]:8333\n+[2001:41f0:61:0:72f3:95ff:fe09:7521]:8333\n [2001:41f0:61::7]:8333\n-[2001:41f0::2]:8333\n-[2001:44b8:41bd:6101:148e:4022:4950:e861]:8333\n-[2001:470:1:2f9:0:1:107a:a301]:8333\n-[2001:470:1f0b:ad6::2]:8333\n-[2001:470:1f11:12d5::ae1:5611]:8333\n+[2001:4428:200:8171:db6:2ff4:9c0e:a2da]:8333\n+[2001:470:1f07:151c:baac:6fff:feb7:3ba9]:8333\n+[2001:470:1f0b:ad6:a60:6eff:fec6:2323]:8333\n+[2001:470:1f11:617::10f]:8333\n+[2001:470:1f14:73e::2]:8333\n [2001:470:1f14:7d::2]:8333\n-[2001:470:27:ce::2]:8333\n+[2001:470:1f15:11f8::10]:8333\n+[2001:470:1f15:1b95:2c3e:8a9a:24e1:7084]:8333\n+[2001:470:1f15:e9b::3ef]:8333\n+[2001:470:1f1d:3a9::10]:8333\n+[2001:470:25:482::2]:8333\n+[2001:470:27:19f::2]:8333\n+[2001:470:27:665::2]:8333\n+[2001:470:28:365::4]:8333\n [2001:470:41:6::2]:8333\n-[2001:470:507d:0:6ab5:99ff:fe73:ac18]:8333\n-[2001:470:583e::2a]:8333\n-[2001:470:5f:5f::232]:8333\n-[2001:470:66:119::2]:8333\n-[2001:470:6c4f::cafe]:8333\n-[2001:470:6f:327:913b:7fe:8545:a4f5]:8333\n-[2001:470:7dda:1::1]:8333\n-[2001:470:95c1::2]:8333\n-[2001:470:b1d0:ffff::1000]:8333\n-[2001:470:d00d:0:3664:a9ff:fe9a:5150]:8333\n-[2001:470:fab7:1::1]:8333\n-[2001:4800:7819:104:be76:4eff:fe05:c828]:8333\n-[2001:4800:7819:104:be76:4eff:fe05:c9a0]:8333\n+[2001:470:727b::11:14]:8333\n+[2001:470:7:2f0::2]:8333\n+[2001:470:7:65::2]:8333\n+[2001:470:7f85::2]:8333\n+[2001:470:8:2e1:5825:39df:3e4c:54a8]:8333\n+[2001:470:8:2e1::43]:8333\n+[2001:470:8:2e1:ae2a:e257:4470:6350]:8333\n+[2001:470:a:c13::2]:8333\n [2001:4801:7819:74:b745:b9d5:ff10:a61a]:8333\n [2001:4801:7819:74:b745:b9d5:ff10:aaec]:8333\n [2001:4801:7828:104:be76:4eff:fe10:1325]:8333\n-[2001:4802:7800:1:be76:4eff:fe20:f023]:8333\n [2001:4802:7800:2:30d7:1775:ff20:1858]:8333\n-[2001:4802:7800:2:be76:4eff:fe20:6c26]:8333\n-[2001:4802:7802:101:be76:4eff:fe20:256]:8333\n-[2001:4802:7802:103:be76:4eff:fe20:2de8]:8333\n-[2001:4830:1100:2e8::2]:8333\n-[2001:4b98:dc2:41:216:3eff:fe56:f659]:8333\n-[2001:4ba0:fffa:5d::93]:8333\n-[2001:4ba0:ffff:1be:1:1005:0:1]:8333\n-[2001:4dd0:ff00:867f::3]:8333\n+[2001:4ba0:babe:832::]:8333\n+[2001:4ba0:cafe:379::1]:8333\n+[2001:4ba0:ffee:33::10]:8333\n [2001:4dd0:ff00:9a67::9]:8333\n-[2001:5c0:1400:b::3cc7]:8333\n [2001:610:1b19::3]:8333\n [2001:610:600:a41::2]:8333\n-[2001:67c:26b4::]:8333\n-[2001:8d8:840:500::39:1ae]:8333\n-[2001:8d8:965:4a00::10:9343]:8333\n-[2001:980:4650:1:2e0:53ff:fe13:2449]:8333\n+[2001:678:174:4021::2:8333]:8333\n+[2001:67c:16dc:1201:5054:ff:fe17:4dac]:8333\n+[2001:67c:2128:ffff:6062:36ff:fe30:6532]:8333\n+[2001:67c:2564:331:3547:6e28:85a4:fb27]:8333\n+[2001:6a0:200:368::2]:8333\n+[2001:718:801:311:5054:ff:fe19:c483]:8333\n+[2001:7b8:2ff:8f::2]:8333\n+[2001:8d8:8a6:4400::3f:86c]:8333\n+[2001:8d8:923:8400::87:ebd]:8333\n+[2001:960:66d::2]:8333\n [2001:981:46:1:ba27:ebff:fe5b:edee]:8333\n-[2001:9c8:53e9:369a:226:2dff:fe1b:7472]:8333\n-[2001:9d8:cafe:3::87]:8333\n-[2001:b10:11:21:3e07:54ff:fe48:7248]:8333\n-[2001:ba8:1f1:f34c::2]:8333\n-[2001:bc8:2310:100::1]:8333\n-[2001:bc8:3427:101:7a4f:8be:2611:6e79]:8333\n-[2001:bc8:3505:200::1]:8333\n-[2001:cc0:a004::30:1d]:8333\n-[2001:e42:102:1209:153:121:76:171]:8333\n-[2002:17ea:14eb::17ea:14eb]:8333\n-[2002:2f8:2bc5::2f8:2bc5]:8333\n-[2002:4047:482c::4047:482c]:8333\n-[2002:45c3:8cca::45c3:8cca]:8333\n-[2002:46bb:8a41:0:226:b0ff:feed:5f12]:8888\n-[2002:46bb:8c3c:0:8d55:8fbb:15fa:f4e0]:8765\n-[2002:4c48:a0fe::4c48:a0fe]:8333\n-[2002:4d44:25c8::4d44:25c8]:8333\n-[2002:505f:aaa2::505f:aaa2]:8333\n-[2002:5bc1:799d::5bc1:799d]:8333\n-[2002:6dec:5472::6dec:5472]:8333\n-[2002:8c6d:6521:9617:12bf:48ff:fed8:1724]:8333\n-[2002:ac52:94e2::ac52:94e2]:8333\n-[2002:af7e:3eca::af7e:3eca]:8333\n-[2002:b009:20c5::b009:20c5]:8333\n-[2002:c06f:39a0::c06f:39a0]:8333\n-[2002:c23a:738a::c23a:738a]:8333\n-[2002:c70f:7442::c70f:7442]:8333\n-[2002:cec5:be4f::cec5:be4f]:8333\n-[2002:d149:9e3a::d149:9e3a]:8333\n+[2001:ba8:1f1:f069::2]:8333\n+[2001:bc8:225f:10e:505:6573:7573:d0a]:8333\n+[2001:bc8:2706::1]:8333\n+[2001:bc8:323c:100::53]:8333\n+[2001:bc8:323c:100::80:4]:8333\n+[2001:bc8:323c:100::cafe]:8333\n+[2001:bc8:3680:4242::1]:8333\n+[2001:bc8:399f:f000::1]:8333\n+[2001:bc8:3cbf::5]:8333\n+[2001:bc8:4700:2300::19:807]:8333\n+[2001:e42:102:1805:160:16:206:31]:8333\n+[2002:12f1:3f::12f1:3f]:8333\n+[2002:1e2:5349::1e2:5349]:8333\n+[2002:1e2:5588::1e2:5588]:8333\n+[2002:2501:cf62::2501:cf62]:8333\n+[2002:268c:a135::268c:a135]:8333\n+[2002:2a33:99db::2a33:99db]:8332\n+[2002:2ebc:2c14::7]:8333\n+[2002:2f59:2c9c::2f59:2c9c]:11885\n+[2002:2f5a:3619::2f5a:3619]:8333\n+[2002:2f5a:36a4::2f5a:36a4]:8333\n+[2002:2f5a:429::2f5a:429]:8333\n+[2002:2f5a:562a::2f5a:562a]:8333\n+[2002:3a3b:216::3a3b:216]:8333\n+[2002:3dfa:5d23::3dfa:5d23]:8333\n+[2002:424f:a052::424f:a052]:8333\n+[2002:451e:e922::451e:e922]:8333\n+[2002:4540:4b30::4540:4b30]:8333\n+[2002:51ab:7cc::51ab:7cc]:8333\n+[2002:527:de11::527:de11]:8333\n+[2002:5395:7d01::5395:7d01]:8333\n+[2002:5395:7d2a::5395:7d2a]:8333\n+[2002:5669:e3be::5669:e3be]:8333\n+[2002:566a:5d6d::566a:5d6d]:8333\n+[2002:59b9:f820::59b9:f820]:8333\n+[2002:59f8:ac69::59f8:ac69]:8333\n+[2002:5bd4:b65a::5bd4:b65a]:8333\n+[2002:5c3f:39db::5c3f:39db]:8333\n+[2002:5d33:8d03::5d33:8d03]:8333\n+[2002:5d67:49bb::5d67:49bb]:8333\n+[2002:5dae:5d5f::5dae:5d5f]:8333\n+[2002:5dbe:8cc6::5dbe:8cc6]:8333\n+[2002:5dbe:9503::5dbe:9503]:8333\n+[2002:5fd3:8944::5fd3:8944]:8333\n+[2002:5fd3:9467::5fd3:9467]:8333\n+[2002:67f9:6a48::67f9:6a48]:8333\n+[2002:67f9:6a4a::67f9:6a4a]:8333\n+[2002:67f9:6a95::67f9:6a95]:8333\n+[2002:6a0e:3ea8::6a0e:3ea8]:10011\n+[2002:6b96:375a::6b96:375a]:8333\n+[2002:6ca8:cffb::6ca8:cffb]:8333\n+[2002:6caf:234::6caf:234]:8333\n+[2002:6dec:58f5::6dec:58f5]:8333\n+[2002:6dec:5ac7::6dec:5ac7]:8333\n+[2002:7237:4a02::7237:4a02]:20033\n+[2002:7237:94fd::7237:94fd]:10011\n+[2002:7237:e428::7237:e428]:8333\n+[2002:7237:fcf6::7237:fcf6]:20188\n+[2002:76c0:96e6::76c0:96e6]:8333\n+[2002:7819:7e80::7819:7e80]:7743\n+[2002:781a:ea86::781a:ea86]:8333\n+[2002:781a:f3c2::781a:f3c2]:14475\n+[2002:784c:c2c0::784c:c2c0]:8333\n+[2002:784c:ec97::784c:ec97]:8333\n+[2002:792b:261a::792b:261a]:8333\n+[2002:88f3:8cca::88f3:8cca]:8333\n+[2002:88f3:a83c::88f3:a83c]:8333\n+[2002:8ac9:516f::8ac9:516f]:8333\n+[2002:8b81:6d78::8b81:6d78]:50344\n+[2002:8b81:6e5c::8b81:6e5c]:38176\n+[2002:8bc4:90a6::8bc4:90a6]:8333\n+[2002:ac52:b854::ac52:b854]:8333\n+[2002:add0:c14a::add0:c14a]:8333\n+[2002:b07e:a70a::b07e:a70a]:8333\n+[2002:b27c:c565:1::250]:8333\n+[2002:b27c:c565::1]:8333\n+[2002:b94d:80f1::b94d:80f1]:8333\n+[2002:b982:e26a::b982:e26a]:8333\n+[2002:bcd5:3145::bcd5:3145]:8333\n+[2002:c08a:d22b::c08a:d22b]:8333\n+[2002:c0c7:f8e3::c0c7:f8e3]:32771\n+[2002:c1a9:fc5a::c1a9:fc5a]:8333\n+[2002:c23f:8fc5::c23f:8fc5]:8333\n+[2002:d395:ea6d::d395:ea6d]:8333\n [2002:d917:ca5::d917:ca5]:8333\n-[2400:8900::f03c:91ff:fe50:153f]:8333\n-[2400:8900::f03c:91ff:fe6e:823e]:8333\n-[2400:8900::f03c:91ff:fea8:1934]:8333\n-[2400:8901::f03c:91ff:fe26:c4d6]:8333\n+[2002:d917:e91::d917:e91]:8333\n+[2002:db71:f434::db71:f434]:8333\n+[2400:2651:161:1000:6847:d40f:aaa3:4848]:8333\n [2400:8901::f03c:91ff:fec8:4280]:8333\n-[2400:8901::f03c:91ff:fec8:660f]:8333\n-[2401:1800:7800:102:be76:4eff:fe1c:559]:8333\n [2401:1800:7800:102:be76:4eff:fe1c:a7d]:8333\n+[2401:2500:203:10:153:120:156:83]:8333\n+[2401:a400:3200:5600:14ee:f361:4bdc:1f7c]:8333\n+[2403:4200:403:2::ff]:8333\n [2405:aa00:2::40]:8333\n-[2600:3c00::f03c:91ff:fe18:59b2]:8333\n-[2600:3c00::f03c:91ff:fe26:bfb6]:8333\n-[2600:3c00::f03c:91ff:fe33:88e3]:8333\n-[2600:3c00::f03c:91ff:fe6e:7297]:8333\n-[2600:3c00::f03c:91ff:fe84:8a6e]:8333\n+[240b:10:ca20:f0:224:e8ff:fe1f:60d9]:8333\n+[240b:250:1e0:2400:b9ef:8fe3:a69a:7378]:8333\n+[240d:1a:302:8600:8876:a36d:12ee:f285]:8333\n+[2600:3c00::f03c:91ff:fe91:3e49]:8333\n+[2600:3c00::f03c:91ff:febb:981e]:8333\n [2600:3c01::f03c:91ff:fe18:6adf]:8333\n-[2600:3c01::f03c:91ff:fe26:c4b8]:8333\n-[2600:3c01::f03c:91ff:fe3b:1f76]:8333\n-[2600:3c01::f03c:91ff:fe50:5e06]:8333\n-[2600:3c01::f03c:91ff:fe61:289b]:8333\n [2600:3c01::f03c:91ff:fe69:89e9]:8333\n-[2600:3c01::f03c:91ff:fe84:ac15]:8333\n-[2600:3c01::f03c:91ff:fe98:68bb]:8333\n-[2600:3c02::f03c:91ff:fe26:713]:8333\n-[2600:3c02::f03c:91ff:fe26:c49e]:8333\n-[2600:3c02::f03c:91ff:fe84:97d8]:8333\n-[2600:3c02::f03c:91ff:fec8:8feb]:8333\n+[2600:3c01::f03c:91ff:fe91:6a29]:8333\n+[2600:3c01::f03c:91ff:fef1:1eaa]:8333\n [2600:3c03::f03c:91ff:fe18:da80]:8333\n-[2600:3c03::f03c:91ff:fe26:c49b]:8333\n-[2600:3c03::f03c:91ff:fe50:5fa7]:8333\n+[2600:3c03::f03c:91ff:fe28:1445]:8333\n [2600:3c03::f03c:91ff:fe67:d2e]:8333\n-[2600:3c03::f03c:91ff:fe6e:1803]:8333\n-[2600:3c03::f03c:91ff:fec8:4bbe]:8333\n-[2600:3c03::f03c:91ff:fee4:4e16]:8333\n-[2601:18d:8300:58a6::2e4]:8333\n-[2601:240:4600:40c0:250:56ff:fea4:6305]:8333\n-[2601:581:c200:a719:542c:9cd5:4852:f7d9]:8333\n-[2601:647:4900:85f1:ca2a:14ff:fe51:bb35]:8333\n-[2601:c2:c002:b300:54a0:15b5:19f7:530d]:8333\n-[2602:306:ccff:ad7f:b116:52be:64ba:db3a]:8333\n-[2602:ae:1982:9400:846:f78c:fec:4d57]:8333\n+[2600:3c03::f03c:91ff:fe89:116f]:8333\n+[2600:3c03::f03c:91ff:feb0:5fc4]:8333\n+[2600:3c03::f03c:91ff:fee0:233e]:8333\n+[2600:3c03::f03c:91ff:fee0:51]:8333\n+[2600:8805:2400:14e:226:4aff:fe02:2ba4]:8333\n+[2600:8807:5080:3301:1487:83b7:33d7:eb97]:8333\n+[2601:186:c100:6bcd:16bd:cea1:235d:1c19]:8333\n+[2601:18c:4200:28d0:e4d:e9ff:fec5:76d0]:8333\n+[2601:247:8201:6251:30e6:7b95:69bf:9248]:8333\n+[2601:602:9980:f78:211:11ff:fec5:1ae]:8333\n+[2602:ae:1993:de00:2c50:9a44:8f11:77a5]:8333\n+[2602:ff68:0:1:21e:bff:feca:db72]:8333\n+[2602:ff68:0:1:2bd:27ff:feb0:adf8]:8333\n+[2602:ff68:0:1::5]:8333\n+[2602:ff68:0:5:2bd:27ff:feb0:adf8]:8333\n [2602:ffc5:1f::1f:2d61]:8333\n [2602:ffc5:1f::1f:9211]:8333\n-[2602:ffc5::75d5:c1c3]:8333\n+[2602:ffc5::9e63:27a2]:8333\n+[2602:ffc5::c30:1c75]:8333\n [2602:ffc5::ffc5:b844]:8333\n [2602:ffe8:100:2::457:936b]:8333\n-[2602:ffe8:100:2::9d20:2e3c]:8333\n-[2602:ffea:1001:72b::578b]:8333\n-[2602:ffea:a::24c4:d9fd]:8333\n-[2604:0:c1:100:1ec1:deff:fe54:2235]:8333\n-[2604:180:1:1af::42a9]:8333\n-[2604:180:3:702::c9de]:8333\n-[2604:4080:1114:0:3285:a9ff:fe93:850c]:8333\n-[2604:6000:ffc0:3c:64a3:94d0:4f1d:1da8]:8333\n-[2605:6000:f380:9a01:ba09:8aff:fed4:3511]:8333\n-[2605:6001:e00f:7b00:c587:6d91:6eff:eeba]:8333\n-[2605:f700:c0:1::25c3:2a3e]:8333\n-[2606:6000:a441:9903:5054:ff:fe78:66ff]:8333\n-[2607:5300:100:200::1c83]:9334\n-[2607:5300:10::a1]:8333\n-[2607:5300:60:1c2f::1]:8333\n-[2607:5300:60:2b90::1]:8333\n-[2607:5300:60:3320::1]:8333\n-[2607:5300:60:385::1]:8333\n-[2607:5300:60:4a85::]:8333\n-[2607:5300:60:65e4::]:8333\n-[2607:5300:60:6918::]:8333\n-[2607:5300:60:711a:78::a7b5]:8333\n-[2607:5300:60:714::1]:8333\n-[2607:5300:60:870::1]:8333\n-[2607:5300:60:952e:3733::1414]:8333\n-[2607:f1c0:848:1000::48:943c]:8333\n-[2607:f2e0:f:5df::2]:8333\n-[2607:f748:1200:f8:21e:67ff:fe99:8f07]:8333\n-[2607:f948:0:1::7]:8333\n-[2607:ff68:100:36::131]:8333\n-[2803:6900:1::117]:8333\n-[2a00:1098:0:80:1000:25:0:1]:8333\n-[2a00:1178:2:43:5054:ff:fe84:f86f]:8333\n-[2a00:1178:2:43:5054:ff:fee7:2eb6]:8333\n-[2a00:1178:2:43:8983:cc27:d72:d97a]:8333\n-[2a00:1328:e100:cc42:230:48ff:fe92:55c]:8333\n+[2604:180:2:eee::ca46]:8333\n+[2604:880:d:85::be37]:8333\n+[2604:9a00:2100:a009:2::]:8333\n+[2604:a880:2:d0::301:8001]:8333\n+[2604:a880:2:d0::4a9:1001]:8333\n+[2604:a880:2:d0::53a:c001]:8333\n+[2604:a880:400:d0::ad7:e001]:8333\n+[2604:a880:400:d0::dcf:f001]:8333\n+[2605:4d00::50]:8333\n+[2605:6000:edc8:300::ddfe]:8333\n+[2605:6000:ffc0:70:74d5:225c:f553:5bb8]:8333\n+[2606:6000:c148:7003:5054:ff:fe78:66ff]:8333\n+[2606:6000:e6d6:d701:d428:5e44:a2c9:3ff6]:8333\n+[2606:c680:1:4a:2016:d1ff:fe93:52a7]:8333\n+[2607:5300:203:118:3733::1414]:8333\n+[2607:5300:60:13bb::1]:8333\n+[2607:5300:60:1966::1]:8333\n+[2607:5300:60:2218::]:8333\n+[2607:5300:60:3775::]:8333\n+[2607:5300:60:3ddf::]:8333\n+[2607:5300:60:a654::]:8333\n+[2607:5300:60:a7a3::]:8333\n+[2607:5300:60:ac0::1]:8333\n+[2607:5300:60:cf97::]:8333\n+[2607:f0d0:1901:19::6]:8333\n+[2607:f128:40:1202:69:162:139:125]:8333\n+[2607:f128:40:1703::2]:8333\n+[2607:f178:0:8::106]:8333\n+[2607:f1c0:84d:8900::7e:cad]:8333\n+[2607:f948:0:1::1:40]:8333\n+[2607:fcd0:100:2302::6094:635a]:8333\n+[2607:fcd0:100:6a00::3a96:1]:8333\n+[2607:fcd0:100:6a02::7ff0:1]:8333\n+[2607:fcd0:100:8203::8c58:dbc]:8333\n+[2607:fea8:1360:9c2:221a:6ff:fe47:776d]:8333\n+[2607:fea8:4da0:9ce:5114:a8ec:20f5:a50b]:8333\n+[2607:fea8:5df:fda0:feaa:14ff:feda:c79a]:8333\n+[2607:fea8:84c0:163:f42c:baff:fecc:6bbf]:8333\n+[2607:ff10:c5:502:225:90ff:fe32:d446]:8333\n+[2607:ff48:aa81:800::96cf:1]:8333\n+[2620:11c:5001:1118:d267:e5ff:fee9:e673]:8333\n+[2620:b8:4000:1000::93:1]:8333\n+[2800:1a0::9]:8333\n+[2a00:1178:2:43:19fd:d43e:b77:edeb]:8333\n+[2a00:1178:2:43:b4e3:e562:f811:d761]:8333\n [2a00:14f0:e000:80d2:cd1a::1]:8333\n+[2a00:1630:14::101]:8333\n [2a00:1630:2:1802:188:122:91:11]:8333\n-[2a00:18e0:0:1800::1]:8333\n-[2a00:18e0:0:dcc5:109:234:106:191]:8333\n-[2a00:1a28:1157:87::94c7]:8333\n+[2a00:1630:2:500::4]:8333\n+[2a00:1768:2001:24::148:218]:8333\n+[2a00:1768:2001:27::142:21]:8333\n+[2a00:1a48:7810:101:be76:4eff:fe08:c774]:8333\n [2a00:1ca8:37::a5fc:40d1]:8333\n [2a00:1ca8:37::ab6d:ce2c]:8333\n-[2a00:7143:100:0:216:3eff:fe2e:74a3]:8333\n-[2a00:7143:100:0:216:3eff:fed3:5c21]:8333\n-[2a00:7c80:0:45::123]:8333\n+[2a00:1dc0:2255:10::2]:8333\n+[2a00:7c80:0:71::8]:8333\n+[2a00:7c80:0:97::7]:8333\n+[2a00:bbe0:0:42:222:64ff:fe9a:e206]:8333\n+[2a00:c98:2050:a020:3::110]:8333\n+[2a00:dcc0:eda:98:183:193:1d24:b53a]:8333\n [2a00:dcc0:eda:98:183:193:c382:6bdb]:8333\n [2a00:dcc0:eda:98:183:193:f72e:d943]:8333\n-[2a00:f820:17::4af:1]:8333\n-[2a00:f940:2:1:2::101d]:8333\n-[2a00:f940:2:1:2::6ac]:8333\n-[2a01:1b0:7999:402::131]:8333\n-[2a01:238:42dd:f900:7a6c:2bc6:4041:c43]:8333\n-[2a01:238:4313:6300:2189:1c97:696b:5ea]:8333\n-[2a01:488:66:1000:5c33:91f9:0:1]:8333\n-[2a01:488:66:1000:b01c:178d:0:1]:8333\n+[2a00:f90:ff0:c100:53c4:97a7:8b59:796a]:8333\n+[2a01:238:435c:de00:b110:38cf:192d:b2c]:28333\n+[2a01:348:6:7cf::2]:8333\n+[2a01:368:e012:8888:216:3eff:fe24:1162]:8333\n+[2a01:488:66:1000:53a9:22b:0:1]:8333\n+[2a01:488:67:1000:523:ffa7:0:1]:8333\n+[2a01:488:67:1000:b01c:3379:0:1]:8333\n [2a01:4f8:100:34ce::2]:8333\n-[2a01:4f8:100:34e4::2]:8333\n [2a01:4f8:100:44e7::2]:8333\n-[2a01:4f8:100:510e::2]:8333\n-[2a01:4f8:100:5128::2]:8333\n-[2a01:4f8:110:5105::2]:8333\n-[2a01:4f8:110:516c::2]:8333\n+[2a01:4f8:10a:2e4::2]:8333\n+[2a01:4f8:10a:34e::2]:8333\n+[2a01:4f8:10a:51d::2]:8333\n+[2a01:4f8:10a:622::2]:8333\n+[2a01:4f8:10a:85f::2]:8333\n+[2a01:4f8:10a:864::2]:8333\n+[2a01:4f8:10a:d04::2]:8333\n+[2a01:4f8:110:334c::2]:8333\n+[2a01:4f8:110:536e::2]:8333\n [2a01:4f8:120:43e4::2]:8333\n-[2a01:4f8:120:62e6::2]:8333\n [2a01:4f8:120:702e::2]:8333\n-[2a01:4f8:120:8203::2]:8333\n-[2a01:4f8:121:234d::2]:8333\n-[2a01:4f8:121:261::2]:8333\n-[2a01:4f8:130:11ea::2]:8333\n+[2a01:4f8:121:4346::2]:8333\n [2a01:4f8:130:3332::2]:8333\n-[2a01:4f8:130:40ab::2]:8333\n-[2a01:4f8:130:632c::2]:8333\n-[2a01:4f8:130:6366::2]:8333\n-[2a01:4f8:130:934f::2]:8333\n+[2a01:4f8:131:33ad::2]:8333\n [2a01:4f8:131:33ad:fea1::666]:8333\n-[2a01:4f8:140:2195::2]:8333\n-[2a01:4f8:140:6333::2]:8333\n-[2a01:4f8:140:930d::2]:8333\n+[2a01:4f8:140:31b0::2]:8333\n+[2a01:4f8:140:4088::2]:8333\n+[2a01:4f8:140:931a::2]:8333\n [2a01:4f8:140:93b0::2]:8333\n-[2a01:4f8:141:1167::2]:8333\n+[2a01:4f8:141:13ad::c451]:8333\n [2a01:4f8:141:186::2]:8333\n-[2a01:4f8:141:53f0::2]:8333\n-[2a01:4f8:150:336a::2]:8333\n-[2a01:4f8:150:72ee::4202]:8333\n-[2a01:4f8:150:8324::2]:9001\n-[2a01:4f8:151:21ca::2]:8333\n-[2a01:4f8:151:41c2:0:5404:a67e:f250]:8333\n-[2a01:4f8:151:5128::2]:8333\n+[2a01:4f8:141:22ae::2]:8333\n+[2a01:4f8:141:322c::2]:8333\n+[2a01:4f8:150:11d4::2]:8333\n+[2a01:4f8:150:440f::2]:8333\n+[2a01:4f8:150:61ee::2]:8333\n+[2a01:4f8:150:726b::2]:8333\n+[2a01:4f8:151:30c9::2]:15000\n+[2a01:4f8:151:41a2::2]:8333\n+[2a01:4f8:151:41cc::2]:8333\n [2a01:4f8:151:52c6::154]:8333\n-[2a01:4f8:151:6347::2]:9001\n-[2a01:4f8:160:5136::2]:8333\n-[2a01:4f8:160:72c5::2858:e1c5]:8333\n-[2a01:4f8:160:72c5::593b:60d5]:8333\n+[2a01:4f8:151:600b::1:1]:8333\n+[2a01:4f8:151:7175::2]:8333\n+[2a01:4f8:160:41f0::1:33]:8333\n+[2a01:4f8:160:5328::27f0:187a]:8333\n [2a01:4f8:160:814f::2]:8333\n-[2a01:4f8:161:13d0::2]:8333\n-[2a01:4f8:161:228f::2]:8333\n-[2a01:4f8:161:51c4::2]:8333\n-[2a01:4f8:161:60a7::2]:8333\n+[2a01:4f8:161:21ad::333:30]:8333\n [2a01:4f8:161:7026::2]:8333\n-[2a01:4f8:161:9184::2]:8333\n-[2a01:4f8:162:2108::2]:8333\n-[2a01:4f8:162:218c::2]:8333\n-[2a01:4f8:162:4443::2]:8333\n-[2a01:4f8:162:51a3::2]:8333\n+[2a01:4f8:162:4110::2]:8333\n+[2a01:4f8:162:4348::2]:8333\n+[2a01:4f8:171:1c1b::2]:8333\n+[2a01:4f8:171:1c3::2]:8333\n+[2a01:4f8:171:2258::2]:8333\n+[2a01:4f8:171:2a70::2]:8333\n+[2a01:4f8:171:2e1b::2]:8333\n+[2a01:4f8:171:2f28::2]:8333\n+[2a01:4f8:171:3248::2]:8333\n+[2a01:4f8:171:380c::2]:8333\n [2a01:4f8:171:b93::2]:8333\n-[2a01:4f8:190:1483::1]:8333\n-[2a01:4f8:190:4495::2]:8333\n-[2a01:4f8:190:64c9::2]:8333\n+[2a01:4f8:171:d0a::2]:8333\n+[2a01:4f8:172:116c::2]:8333\n+[2a01:4f8:172:1287::2]:8333\n+[2a01:4f8:172:17a9::2]:8333\n+[2a01:4f8:172:1ca7::2]:8333\n+[2a01:4f8:172:2159::2]:8333\n+[2a01:4f8:172:3a41::2]:8333\n+[2a01:4f8:172:3b42::2]:8333\n+[2a01:4f8:172:3ec1::2]:8333\n+[2a01:4f8:172:3ec2::2]:8333\n+[2a01:4f8:172:aeb::2]:8333\n+[2a01:4f8:172:aec::2]:8333\n+[2a01:4f8:173:10ab::2]:8333\n+[2a01:4f8:173:1551::2]:8333\n+[2a01:4f8:173:1bca::2]:8333\n+[2a01:4f8:173:1e2e::2]:8333\n+[2a01:4f8:173:2162::2]:8333\n+[2a01:4f8:173:21e6::2]:8333\n+[2a01:4f8:173:42::2]:8333\n+[2a01:4f8:173:cc1::2]:8333\n+[2a01:4f8:190:1253::2]:8333\n+[2a01:4f8:190:24eb::2]:8333\n+[2a01:4f8:190:34f0::2]:8333\n+[2a01:4f8:190:528d::2]:8333\n [2a01:4f8:190:91ce::2]:8333\n [2a01:4f8:191:2194::83]:8333\n [2a01:4f8:191:40e8::2]:8333\n-[2a01:4f8:191:44b4::2]:8333\n-[2a01:4f8:191:8242::2]:8333\n-[2a01:4f8:191:83a2::2]:8333\n-[2a01:4f8:192:11b2::2]:8333\n+[2a01:4f8:191:8165::2]:22556\n+[2a01:4f8:191:81b7::2]:8333\n+[2a01:4f8:191:8328::3]:8333\n+[2a01:4f8:192:11b2::2]:8343\n [2a01:4f8:192:216c::2]:8333\n-[2a01:4f8:192:22b3::2]:8333\n+[2a01:4f8:192:22af::2]:8333\n+[2a01:4f8:192:2422::2]:8333\n+[2a01:4f8:192:34d0::2]:8333\n [2a01:4f8:192:440b::2]:8333\n+[2a01:4f8:192:5230::2]:8333\n [2a01:4f8:192:db::2]:8333\n [2a01:4f8:200:1012::2]:8333\n-[2a01:4f8:200:23d1::dead:beef]:8333\n-[2a01:4f8:200:506d::2]:8333\n-[2a01:4f8:200:51f0::2]:8333\n-[2a01:4f8:200:5389::2]:8333\n-[2a01:4f8:200:53e3::2]:8333\n-[2a01:4f8:200:6344::2]:8333\n-[2a01:4f8:200:6396::2]:8333\n-[2a01:4f8:200:63af::119]:8333\n-[2a01:4f8:200:71e3:78b4:f3ff:fead:e8cf]:8333\n-[2a01:4f8:201:214c::2]:8333\n-[2a01:4f8:201:233:1::3]:8333\n-[2a01:4f8:201:3e3::2]:8333\n+[2a01:4f8:200:414e::2]:8333\n+[2a01:4f8:200:416a::2]:8333\n+[2a01:4f8:201:21a7::2]:8333\n+[2a01:4f8:201:4017::11]:8333\n [2a01:4f8:201:6011::4]:8333\n [2a01:4f8:201:60d5::2]:8333\n-[2a01:4f8:202:265::2]:8333\n-[2a01:4f8:202:3115::2]:8333\n+[2a01:4f8:202:12d6::2]:8333\n [2a01:4f8:202:31e3::2]:8333\n-[2a01:4f8:202:31ef::2]:8333\n-[2a01:4f8:202:3392::2]:8333\n+[2a01:4f8:202:32c6::2]:8333\n [2a01:4f8:202:53c3::2]:8333\n-[2a01:4f8:202:63f4::2]:8333\n-[2a01:4f8:202:7227::2]:8333\n-[2a01:4f8:210:2227::2]:8333\n-[2a01:4f8:210:24aa::2]:8333\n [2a01:4f8:211:14cf::2]:8333\n-[2a01:4f8:211:181b::2]:8333\n-[2a01:4f8:212:289e::2]:8333\n-[2a01:4f8:212:33db::2]:18333\n-[2a01:4f8:a0:112f::2]:8333\n-[2a01:4f8:a0:3174::2]:8333\n-[2a01:4f8:a0:328c::2]:8333\n-[2a01:4f8:a0:5243::2]:8333\n-[2a01:4f8:c17:19b9::2]:8333\n-[2a01:4f8:c17:1a41::2]:8333\n-[2a01:4f8:c17:1a92::2]:8333\n-[2a01:4f8:c17:273::2]:8333\n-[2a01:4f8:c17:435::2]:8333\n-[2a01:4f8:c17:755::2]:8333\n-[2a01:4f8:c17:b54::2]:8333\n-[2a01:4f8:d16:9384::2]:8333\n+[2a01:4f8:211:1ec5::2]:8333\n+[2a01:4f8:211:483::2]:8333\n+[2a01:4f8:211:d99::8]:8333\n+[2a01:4f8:212:1826::2]:8333\n+[2a01:4f8:212:27a8::2]:8333\n+[2a01:4f8:221:801::2]:8333\n+[2a01:4f8:a0:12cc::2]:8333\n+[2a01:4f8:a0:746a:101:1:1:2]:8333\n+[2a01:4f8:a0:828a::2]:8333\n+[2a01:4f8:c17:2eef::2]:8333\n+[2a01:4f8:c17:2f3c::2]:3333\n+[2a01:4f8:c17:3b02::2]:8333\n+[2a01:4f8:c17:4245::2]:8333\n+[2a01:4f8:c17:464f::2]:8333\n+[2a01:4f8:c17:4a1c::2]:8333\n+[2a01:4f8:c17:4c5d::2]:8333\n+[2a01:4f8:c17:67f8::2]:8333\n+[2a01:4f8:c17:6dd0::2]:8333\n+[2a01:4f8:c17:710b::2]:8333\n+[2a01:4f8:c17:714::2]:8333\n+[2a01:4f8:c17:72c6::2]:8333\n [2a01:608:ffff:a009:8bf5:879d:e51a:f837]:8333\n-[2a01:680:10:10:f2de:f1ff:fec9:dc0]:8333\n-[2a01:7c8:aaac:1f6:5054:ff:fe30:e585]:8333\n-[2a01:7c8:aaac:20b:5054:ff:fe24:435e]:8333\n+[2a01:680:10:10::1]:8333\n+[2a01:6f0:ffff:120::8dcb]:8333\n+[2a01:79c:cebc:857c:98c1:88ff:fef5:90de]:8333\n+[2a01:79d:7377:2629:7e57:7e57:1:1]:8333\n [2a01:7c8:aaac:43d:5054:ff:fe4e:3dd4]:8333\n-[2a01:7c8:aaad:256::1]:8333\n-[2a01:7c8:aab6:ea:5054:ff:feff:eac3]:8333\n-[2a01:7c8:aab9:5a:5054:ff:fe89:7b26]:8333\n-[2a01:7c8:aabc:2c8:5054:ff:fe35:6581]:8333\n-[2a01:7e00::f03c:91ff:fe18:301e]:8333\n-[2a01:7e00::f03c:91ff:fe18:3942]:8333\n+[2a01:7c8:aab5:3e6:5054:ff:fed7:4e54]:8333\n+[2a01:7c8:aabd:3d5:5054:ff:fe95:f586]:8333\n+[2a01:7c8:aac1:453:d0d2:af96:fa88:5d0e]:8333\n+[2a01:7c8:aac3:663:5054:ff:fe25:8c69]:8333\n+[2a01:7c8:aac3:97:5054:ff:fea7:3780]:8333\n+[2a01:7c8:aac4:567:5054:ff:fedc:518a]:8333\n [2a01:7e00::f03c:91ff:fe26:8c87]:8333\n-[2a01:7e00::f03c:91ff:fe50:6206]:8333\n-[2a01:7e00::f03c:91ff:fe67:559d]:8333\n-[2a01:7e00::f03c:91ff:fe84:434f]:8333\n+[2a01:7e00::f03c:91ff:fe50:94b8]:8333\n+[2a01:7e00::f03c:91ff:fe55:2c]:8333\n [2a01:7e00::f03c:91ff:fe89:1143]:8333\n-[2a01:7e00::f03c:91ff:fe98:2505]:8333\n-[2a01:7e00::f03c:91ff:fedb:352e]:8333\n-[2a01:7e01::f03c:91ff:fec8:d7b5]:8333\n-[2a01:e34:ee33:1640:c504:f677:b28a:ba42]:8333\n-[2a01:e35:2e7e:bc0:e079:f55e:cef3:b5d7]:8333\n+[2a01:7e00::f03c:91ff:fe89:53fd]:8333\n+[2a01:7e00::f03c:91ff:fedf:b70f]:8333\n+[2a01:b000::4166:515b:ef9e:b3]:8333\n+[2a01:b2e0:2::40]:8333\n+[2a01:e34:ec29:24c0:f3:ddaf:9f59:586f]:8333\n+[2a01:e34:eed7:6670:ec1b:bf7c:b012:6069]:8333\n [2a01:e35:2ee5:610:21f:d0ff:fe4e:7460]:8333\n [2a01:e35:8a3f:47c0:c617:feff:fe3c:9fbd]:8333\n-[2a01:e35:8aca:6a0:211:aff:fe5e:295e]:8333\n-[2a02:180:a:18:81:7:11:50]:8333\n-[2a02:1810:1d87:6a00:5604:a6ff:fe60:d87d]:8333\n-[2a02:2168:1144:5c01:d63d:7eff:fedd:4f8e]:8333\n-[2a02:2498:6d7b:7001:b508:b39d:2cea:5b7a]:8333\n-[2a02:2528:503:2::15]:8333\n-[2a02:2528:fa:1a56:216:44ff:fe6a:d112]:8333\n-[2a02:27f8:2012:0:e9f7:268f:c441:6129]:8333\n+[2a01:e35:8bff:70b0:1e1b:dff:fe0b:236d]:8333\n+[2a02:1205:34c3:a4e0:d63d:7eff:fe98:10c8]:8333\n+[2a02:1205:34da:aa00:5882:249d:ddbf:bc43]:8333\n+[2a02:1205:5051:a640:d6ae:52ff:fea3:ac]:8333\n+[2a02:1205:c689:d980:baae:edff:feea:9445]:8333\n+[2a02:120b:2c2a:5ec0:10dd:31ff:fe42:5079]:8333\n+[2a02:120b:2c35:69d0:219:99ff:fe6b:4ec3]:8333\n+[2a02:120b:c3c2:ff60:21f:5bff:fec3:a7ad]:24312\n+[2a02:13b8:4000:1000:216:e6ff:fe92:8619]:8333\n+[2a02:13b8:4000:1000::27]:8333\n+[2a02:17d0:2a:4400:40f:3dd4:b053:47ad]:8333\n+[2a02:180:1:1::517:afb]:8333\n+[2a02:180:6:1::18]:8333\n+[2a02:1810:1d11:f900:6872:f28e:8126:f635]:8333\n+[2a02:27a8:0:1:52e5:49ff:fee3:3b49]:8333\n [2a02:348:86:3011::1]:8333\n-[2a02:4780:1:1::1:8a01]:8333\n-[2a02:578:5002:116::2]:8333\n+[2a02:390:9000:0:218:7dff:fe10:be33]:8333\n+[2a02:582:78c1:7600:2d49:6212:29d3:abb]:8333\n [2a02:6080::1:190b:69e3]:8333\n-[2a02:6080::1:e893:d9d6]:8333\n-[2a02:770:4000::139]:8333\n+[2a02:750:7:3305::575]:8333\n+[2a02:752:100:3::53]:8333\n+[2a02:7aa0:1201::7501:d950]:8333\n [2a02:7aa0:1201::deb3:81a2]:8333\n-[2a02:8010:b001::5860:59b5]:8333\n-[2a02:810d:21c0:f00:a248:1cff:feb8:5348]:8333\n-[2a02:a50::21b:24ff:fe93:4e39]:8333\n-[2a02:a80:0:1200::2]:8333\n-[2a02:c200:0:10:2:1:5830:1]:8333\n-[2a02:c200:0:10:2:5:4692:1]:8333\n-[2a02:c200:0:10:3:0:7158:1]:8333\n-[2a02:c200:0:10::2244:1]:8333\n-[2a02:c200:1:10:2:3:3339:1]:8333\n-[2a02:c200:1:10:2:3:7844:1]:8333\n-[2a02:c200:1:10:2:5:6288:1]:8333\n-[2a02:c200:1:10:3:0:5912:1]:8333\n+[2a02:7aa0:1619::a037:69a6]:8333\n+[2a02:810d:14c0:8694:d250:99ff:fe81:23d9]:8333\n+[2a02:a50::dacb:8aff:fe36:8d2d]:8333\n+[2a02:c200:0:10:3:0:2591:1]:8333\n+[2a02:c200:1:10:2:5:9982:1]:8333\n+[2a02:c200:1:10:3:0:9290:1]:8333\n+[2a02:c205:3000:7158::1]:8333\n+[2a02:c205:3001:4522::1]:8333\n+[2a02:c205:3001:6549::1]:8333\n+[2a02:c207:2008:3772::1]:8333\n+[2a02:c207:2008:6519::1]:8333\n+[2a02:c207:2009:213::1]:8333\n+[2a02:c207:2009:7858::1]:8333\n+[2a02:c207:2010:302::1]:8333\n+[2a02:c207:3001:5824::1]:8333\n+[2a02:ce80:0:20::1]:8333\n [2a03:4000:2:496::8]:8333\n+[2a03:4000:6:416c::53]:8333\n [2a03:4000:6:8009::1]:8333\n-[2a03:4000:6:8063::bcd0]:8333\n-[2a03:4900:fffc:b::2]:8333\n-[2a03:b0c0:1:d0::d:5001]:8333\n+[2a03:4000:9:8e::1]:8333\n+[2a03:7380:2140:17:51fe:3519:b571:4a13]:8333\n+[2a03:b0c0:0:1010::7a3:1001]:8333\n+[2a03:b0c0:0:1010::7aa:4001]:8333\n+[2a03:b0c0:3:d0::1b99:c001]:8333\n+[2a03:b0c0:3:d0::1b99:e001]:8333\n+[2a03:b0c0:3:d0::1b9a:3001]:8333\n+[2a03:b0c0:3:d0::2208:6001]:8333\n+[2a03:b0c0:3:d0::23f7:1001]:8333\n+[2a03:b0c0:3:d0::23f7:9001]:8333\n+[2a03:b0c0:3:d0::23fb:2001]:8333\n+[2a03:b0c0:3:d0::23fb:3001]:8333\n+[2a03:b0c0:3:d0::23fb:5001]:8333\n+[2a03:b0c0:3:d0::23fb:7001]:8333\n+[2a03:b0c0:3:d0::2400:1]:8333\n+[2a03:b0c0:3:d0::2400:3001]:8333\n+[2a03:b0c0:3:d0::2400:e001]:8333\n+[2a03:b0c0:3:d0::2401:e001]:8333\n+[2a03:b0c0:3:d0::2402:2001]:8333\n+[2a03:b0c0:3:d0::2402:8001]:8333\n+[2a03:b0c0:3:d0::2402:9001]:8333\n+[2a03:b0c0:3:d0::2402:b001]:8333\n+[2a03:b0c0:3:d0::2402:d001]:8333\n+[2a03:b0c0:3:d0::2403:1001]:8333\n+[2a03:b0c0:3:d0::2403:2001]:8333\n+[2a03:b0c0:3:d0::2403:4001]:8333\n+[2a03:b0c0:3:d0::2403:6001]:8333\n+[2a03:b0c0:3:d0::2403:a001]:8333\n+[2a03:b0c0:3:d0::2403:b001]:8333\n+[2a03:b0c0:3:d0::2403:f001]:8333\n+[2a03:b0c0:3:d0::2404:6001]:8333\n+[2a03:b0c0:3:d0::2404:b001]:8333\n [2a03:f80:ed15:149:154:155:235:1]:8333\n-[2a03:f80:ed15:149:154:155:241:1]:8333\n-[2a03:f80:ed16:ca7:ea75:b12d:2af:9e2a]:8333\n-[2a04:1980:3100:1aab:290:faff:fe70:a3d8]:8333\n-[2a04:1980:3100:1aab:e61d:2dff:fe29:f590]:8333\n-[2a04:2f80:6:200::89]:8333\n-[2a04:ac00:1:4a0b:5054:ff:fe00:5af5]:8333\n-[2a04:ad80:0:68::35da]:8333\n-3ffk7iumtx3cegbi.onion:8333\n+[2a04:1980:3100:1aac:e61d:2dff:fe29:f241]:8333\n+[2a04:1980:3100:1aac:e61d:2dff:fe29:f251]:8333\n+[2a04:2180:0:1::5a49:3c06]:8333\n+[2a04:2180:1:7::3]:8333\n+[2a04:2e00:5:2e:9a4b:e1ff:fe62:6dc0]:8333\n+[2a04:3542:1000:910:8492:b8ff:fe91:711d]:8333\n+[2a04:dbc3:fffe:0:e61f:13ff:fe95:8401]:8333\n+[2a06:9fc0:2a06:9fc0:2a06:9fc1:67c:e706]:8333\n+[2c0f:f738:2004:82::]:8333\n+2hryb3uh3tzwgnya.onion:8333\n 3nmbbakinewlgdln.onion:8333\n-4j77gihpokxu2kj4.onion:8333\n-546esc6botbjfbxb.onion:8333\n-5at7sq5nm76xijkd.onion:8333\n-77mx2jsxaoyesz2p.onion:8333\n-7g7j54btiaxhtsiy.onion:8333\n-a6obdgzn67l7exu3.onion:8333\n-ab64h7olpl7qpxci.onion:8333\n-am2a4rahltfuxz6l.onion:8333\n-azuxls4ihrr2mep7.onion:8333\n-bitcoin7bi4op7wb.onion:8333\n-bitcoinostk4e4re.onion:8333\n+3qeri3tmhzmpegyv.onion:8333\n+4wdknmecghcmclq5.onion:8333\n+53tsjt6zq3iasv5q.onion:8333\n+5cg7qeywvwo6vxpt.onion:8333\n+5gbcrgqxcbxj253s.onion:8333\n+6cn4ilbwkrkh7gwo.onion:8333\n+6e4jrnn7igeqxmlf.onion:8333\n+6ymgbvnn6d5nfmv4.onion:8333\n+6zsh3bfduhpo7ldl.onion:8333\n+72fq6phv4fg4rhvh.onion:8333\n+7gdqp6npusk4lfwk.onion:8333\n+a7emxol55e623lqc.onion:8333\n+assbiydziq77zaki.onion:8333\n+bafk5ioatlgt7dgl.onion:8333\n bk7yp6epnmcllq72.onion:8333\n-bmutjfrj5btseddb.onion:8333\n-ceeji4qpfs3ms3zc.onion:8333\n-clexmzqio7yhdao4.onion:8333\n+brwqezn6le54w2bb.onion:8333\n+bs4bq6s6qkvt5hpi.onion:8333\n+bup5n5e3kurvjzf3.onion:8333\n+c2tpqkaz4ihjzwgb.onion:8333\n+cernrmrk5zomzozn.onion:8333\n+cfyegj64ht3jpodr.onion:8333\n+cg5vg54cazzpvoug.onion:8333\n+cgk4u2lxrvml4jvb.onion:8333\n+cjygd7pu5lqkky5j.onion:8333\n+d6wubsdtr46dd5ki.onion:8333\n+dfq6yjc3aelplwr4.onion:8333\n+dqpxwlpnv3z3hznl.onion:8333\n+eamfospuveabaimd.onion:8333\n+ep2mjzox3kvb6ax4.onion:8333\n+fpbxb4wjudiw2w5a.onion:8333\n+fu5hfsbbf5jwsvhv.onion:8333\n+g4freoibsczujle3.onion:8333\n gb5ypqt63du3wfhn.onion:8333\n-h2vlpudzphzqxutd.onion:8333\n-n42h7r6oumcfsbrs.onion:4176\n-ncwk3lutemffcpc4.onion:8333\n+ggdy2pb2avlbtjwq.onion:8333\n+gh2aiddzxmvyrnue.onion:8333\n+gnxgylbgzvaazkq7.onion:8333\n+hnizdxnejel64ubk.onion:8333\n+htvdcmlc3abji2ab.onion:8443\n+hwuboois4gslupgx.onion:8333\n+hxz6gowludlj6d5a.onion:8333\n+j6umo4bnsztpsonc.onion:8333\n+jdunmaocwbbnw565.onion:8333\n+ktv3qlxl7xvmdlf4.onion:8333\n+kvd44sw7skb5folw.onion:8333\n+kwimnzm6vd4zakvl.onion:8333\n+la5xhk3lprxzxmz2.onion:8333\n+lc7cx67end26uutp.onion:8352\n+mwu5og2agcspmgkx.onion:8333\n+mzxkipiyekaoh7my.onion:8333\n+n6rwlrtwpqc7qwo7.onion:8333\n+nj36424yccqph62z.onion:8333\n+o256w7t3vcgktmxk.onion:8333\n+o4sl5na6jeqgi3l6.onion:8333\n okdzjarwekbshnof.onion:8333\n-pjghcivzkoersesd.onion:8333\n-rw7ocjltix26mefn.onion:8333\n-uws7itep7o3yinxo.onion:8333\n-vk3qjdehyy4dwcxw.onion:8333\n+oyebydl2pacx6v26.onion:8333\n+p5mx2imj75dpmime.onion:8333\n+psco6bxjewljrczx.onion:8333\n+pxtgswet6tlgrbwj.onion:8333\n+rb4v3fhgx2zr4rre.onion:8333\n+rjlnp3hwvrsmap6e.onion:8333\n+rlafimkctvz63llg.onion:8333\n+rxjvy5eyttep5tts.onion:8333\n+seoskudzk6vn6mqz.onion:8333\n+tpgdufxxsw3jkrdf.onion:8333\n+tuiyvqgi3o675pjb.onion:8333\n+tx4zd7d5exonnblh.onion:8333\n+uokg6avfgbhofls3.onion:8333\n+v3gjphgqy5hygcml.onion:8333\n+vhdoxqq63xr53ol7.onion:8333\n+visevrizz3quyagj.onion:8333\n vqpye2k5rcqvj5mq.onion:8333\n-wpi7rpvhnndl52ee.onion:8333\n+wfsx2gi7djhy22hk.onion:8333\n+wg6vwmbrzyyzapun.onion:8333\n+xub4w3w4wwk56xiq.onion:8333\n+ycivnom44dmxx4ob.onion:8333\n+ywskufc62bf2fum4.onion:8333\n+z4fax2vxg23t2ddf.onion:8333\n+zo5dklwelmdrpo5n.onion:8333"
      },
      {
        "sha": "396a411689a814025e1f9cfe6be15a4238e3ce9a",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 1031,
        "deletions": 800,
        "changes": 1831,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a60677e394faf57968be57e44ece127c3bb6881f/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a60677e394faf57968be57e44ece127c3bb6881f/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=a60677e394faf57968be57e44ece127c3bb6881f"
      }
    ]
  },
  {
    "sha": "056aba2b4fbdd91a4012aa38743fb8fac56d974b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTZhYmEyYjRmYmRkOTFhNDAxMmFhMzg3NDNmYjhmYWM1NmQ5NzRi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T08:16:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T11:32:52Z"
      },
      "message": "Remove fallbacks for boost_filesystem < v3\n\nMinimum boost version was bumped to 1.47.0 in #8920, which\nmeans the configure step won't even pass with older boost.\n\nThis version has boost filesystem v3, which means the\n(crappy) fallbacks for older versions can go.",
      "tree": {
        "sha": "0bbc0c040187c2b80cd961d05e09ba39179b8732",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bbc0c040187c2b80cd961d05e09ba39179b8732"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/056aba2b4fbdd91a4012aa38743fb8fac56d974b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/056aba2b4fbdd91a4012aa38743fb8fac56d974b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/056aba2b4fbdd91a4012aa38743fb8fac56d974b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/056aba2b4fbdd91a4012aa38743fb8fac56d974b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 0,
      "deletions": 39
    },
    "files": [
      {
        "sha": "8b93815b7b78b607613f765d06b5a67a97f2e265",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/056aba2b4fbdd91a4012aa38743fb8fac56d974b/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/056aba2b4fbdd91a4012aa38743fb8fac56d974b/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=056aba2b4fbdd91a4012aa38743fb8fac56d974b",
        "patch": "@@ -37,9 +37,7 @@\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n-#if BOOST_FILESYSTEM_VERSION >= 3\n #include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n-#endif\n #include <boost/scoped_array.hpp>\n \n #include <QAbstractItemView>\n@@ -67,9 +65,7 @@\n #include <QFontDatabase>\n #endif\n \n-#if BOOST_FILESYSTEM_VERSION >= 3\n static boost::filesystem::detail::utf8_codecvt_facet utf8;\n-#endif\n \n #if defined(Q_OS_MAC)\n extern double NSAppKitVersionNumber;\n@@ -860,7 +856,6 @@ void setClipboard(const QString& str)\n     QApplication::clipboard()->setText(str, QClipboard::Selection);\n }\n \n-#if BOOST_FILESYSTEM_VERSION >= 3\n boost::filesystem::path qstringToBoostPath(const QString &path)\n {\n     return boost::filesystem::path(path.toStdString(), utf8);\n@@ -870,18 +865,6 @@ QString boostPathToQString(const boost::filesystem::path &path)\n {\n     return QString::fromStdString(path.string(utf8));\n }\n-#else\n-#warning Conversion between boost path and QString can use invalid character encoding with boost_filesystem v2 and older\n-boost::filesystem::path qstringToBoostPath(const QString &path)\n-{\n-    return boost::filesystem::path(path.toStdString());\n-}\n-\n-QString boostPathToQString(const boost::filesystem::path &path)\n-{\n-    return QString::fromStdString(path.string());\n-}\n-#endif\n \n QString formatDurationStr(int secs)\n {"
      },
      {
        "sha": "e6d86229796b2e9f72c217364fd6d7872a056b74",
        "filename": "src/test/testutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/056aba2b4fbdd91a4012aa38743fb8fac56d974b/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/056aba2b4fbdd91a4012aa38743fb8fac56d974b/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=056aba2b4fbdd91a4012aa38743fb8fac56d974b",
        "patch": "@@ -11,23 +11,5 @@\n #include <boost/filesystem.hpp>\n \n boost::filesystem::path GetTempPath() {\n-#if BOOST_FILESYSTEM_VERSION == 3\n     return boost::filesystem::temp_directory_path();\n-#else\n-    // TODO: remove when we don't support filesystem v2 anymore\n-    boost::filesystem::path path;\n-#ifdef WIN32\n-    char pszPath[MAX_PATH] = \"\";\n-\n-    if (GetTempPathA(MAX_PATH, pszPath))\n-        path = boost::filesystem::path(pszPath);\n-#else\n-    path = boost::filesystem::path(\"/tmp\");\n-#endif\n-    if (path.empty() || !boost::filesystem::is_directory(path)) {\n-        LogPrintf(\"GetTempPath(): failed to find temp path\\n\");\n-        return boost::filesystem::path(\"\");\n-    }\n-    return path;\n-#endif\n }"
      },
      {
        "sha": "28992ce38a7ecb4a3e74924f73fb7a97db066546",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/056aba2b4fbdd91a4012aa38743fb8fac56d974b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/056aba2b4fbdd91a4012aa38743fb8fac56d974b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=056aba2b4fbdd91a4012aa38743fb8fac56d974b",
        "patch": "@@ -3874,11 +3874,7 @@ bool CWallet::BackupWallet(const std::string& strDest)\n                     pathDest /= strWalletFile;\n \n                 try {\n-#if BOOST_VERSION >= 104000\n                     boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n-#else\n-                    boost::filesystem::copy_file(pathSrc, pathDest);\n-#endif\n                     LogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n                     return true;\n                 } catch (const boost::filesystem::filesystem_error& e) {"
      }
    ]
  },
  {
    "sha": "2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDQ3YzEwMjRlNjA2OWJmZTYyZGRmZjY1YzRlMWFhZjI4ZjMyYjM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T11:38:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-10T11:42:53Z"
      },
      "message": "Merge #9698: net: fix socket close race\n\n9a0b784 net: add a lock around hSocket (Cory Fields)\n45e2e08 net: rearrange so that socket accesses can be grouped together (Cory Fields)",
      "tree": {
        "sha": "a929c469faa7df9271676e1024504092a72f92fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a929c469faa7df9271676e1024504092a72f92fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYnac9AAoJEHSBCwEjRsmmrKsH/3Nhg4shtoBks8iO/tN9ErCf\n++w7OSUElvCCkEpQb2B/CuA/4knAMJy5wFUGi3/RZYT8K6+n08BJN+Y/13tbR5OG\nlg7bxphtHKfpcIsIe7aLHeExCOAaImcQCFW0BktuaaLFbvknQgIEHZWT7ctixFSb\nsZThxh6NGIAbfh8rdDpoFJ8HcUOPmWGnjbpsehc2c0DPfyqQJdUod48QnxZO1MZ5\n9alQsTnFBll6l40lGap4aSHglyE8zE8lhPXFdporAAJqoYAMtDIbIzuGeUn6iIOF\nU/08+sNIrf6cjUNPrECjuw8vHkZVzByxPQAkdkSSgMxmqI/Hyhc0FLcyPgF6cQM=\n=oNsu\n-----END PGP SIGNATURE-----",
        "payload": "tree a929c469faa7df9271676e1024504092a72f92fb\nparent 33f3b21407a38faaaee2d72d16e8eb340fe74657\nparent 9a0b784deaab6b9fffcab227d928987b981d0572\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486726725 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486726973 +0100\n\nMerge #9698: net: fix socket close race\n\n9a0b784 net: add a lock around hSocket (Cory Fields)\n45e2e08 net: rearrange so that socket accesses can be grouped together (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33f3b21407a38faaaee2d72d16e8eb340fe74657",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33f3b21407a38faaaee2d72d16e8eb340fe74657"
      },
      {
        "sha": "9a0b784deaab6b9fffcab227d928987b981d0572",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a0b784deaab6b9fffcab227d928987b981d0572",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a0b784deaab6b9fffcab227d928987b981d0572"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 49,
      "deletions": 26
    },
    "files": [
      {
        "sha": "7c45cff1dd286a509ad50e4ba8303b449ab1dd98",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 26,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "patch": "@@ -425,6 +425,7 @@ void CConnman::DumpBanlist()\n void CNode::CloseSocketDisconnect()\n {\n     fDisconnect = true;\n+    LOCK(cs_hSocket);\n     if (hSocket != INVALID_SOCKET)\n     {\n         LogPrint(\"net\", \"disconnecting peer=%d\\n\", id);\n@@ -789,7 +790,13 @@ size_t CConnman::SocketSendData(CNode *pnode) const\n     while (it != pnode->vSendMsg.end()) {\n         const auto &data = *it;\n         assert(data.size() > pnode->nSendOffset);\n-        int nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+        int nBytes = 0;\n+        {\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                break;\n+            nBytes = send(pnode->hSocket, reinterpret_cast<const char*>(data.data()) + pnode->nSendOffset, data.size() - pnode->nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+        }\n         if (nBytes > 0) {\n             pnode->nLastSend = GetSystemTimeInSeconds();\n             pnode->nSendBytes += nBytes;\n@@ -1148,12 +1155,6 @@ void CConnman::ThreadSocketHandler()\n             LOCK(cs_vNodes);\n             BOOST_FOREACH(CNode* pnode, vNodes)\n             {\n-                if (pnode->hSocket == INVALID_SOCKET)\n-                    continue;\n-                FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-                have_fds = true;\n-\n                 // Implement the following logic:\n                 // * If there is data to send, select() for sending data. As this only\n                 //   happens when optimistic write failed, we choose to first drain the\n@@ -1164,16 +1165,28 @@ void CConnman::ThreadSocketHandler()\n                 //   receiving data.\n                 // * Hand off all complete messages to the processor, to be handled without\n                 //   blocking here.\n+\n+                bool select_recv = !pnode->fPauseRecv;\n+                bool select_send;\n                 {\n                     LOCK(pnode->cs_vSend);\n-                    if (!pnode->vSendMsg.empty()) {\n-                        FD_SET(pnode->hSocket, &fdsetSend);\n-                        continue;\n-                    }\n+                    select_send = !pnode->vSendMsg.empty();\n                 }\n-                {\n-                    if (!pnode->fPauseRecv)\n-                        FD_SET(pnode->hSocket, &fdsetRecv);\n+\n+                LOCK(pnode->cs_hSocket);\n+                if (pnode->hSocket == INVALID_SOCKET)\n+                    continue;\n+\n+                FD_SET(pnode->hSocket, &fdsetError);\n+                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n+                have_fds = true;\n+\n+                if (select_send) {\n+                    FD_SET(pnode->hSocket, &fdsetSend);\n+                    continue;\n+                }\n+                if (select_recv) {\n+                    FD_SET(pnode->hSocket, &fdsetRecv);\n                 }\n             }\n         }\n@@ -1227,15 +1240,30 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Receive\n             //\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n-            if (FD_ISSET(pnode->hSocket, &fdsetRecv) || FD_ISSET(pnode->hSocket, &fdsetError))\n+            bool recvSet = false;\n+            bool sendSet = false;\n+            bool errorSet = false;\n+            {\n+                LOCK(pnode->cs_hSocket);\n+                if (pnode->hSocket == INVALID_SOCKET)\n+                    continue;\n+                recvSet = FD_ISSET(pnode->hSocket, &fdsetRecv);\n+                sendSet = FD_ISSET(pnode->hSocket, &fdsetSend);\n+                errorSet = FD_ISSET(pnode->hSocket, &fdsetError);\n+            }\n+            if (recvSet || errorSet)\n             {\n                 {\n                     {\n                         // typical socket buffer is 8K-64K\n                         char pchBuf[0x10000];\n-                        int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                        int nBytes = 0;\n+                        {\n+                            LOCK(pnode->cs_hSocket);\n+                            if (pnode->hSocket == INVALID_SOCKET)\n+                                continue;\n+                            nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+                        }\n                         if (nBytes > 0)\n                         {\n                             bool notify = false;\n@@ -1284,9 +1312,7 @@ void CConnman::ThreadSocketHandler()\n             //\n             // Send\n             //\n-            if (pnode->hSocket == INVALID_SOCKET)\n-                continue;\n-            if (FD_ISSET(pnode->hSocket, &fdsetSend))\n+            if (sendSet)\n             {\n                 LOCK(pnode->cs_vSend);\n                 size_t nBytes = SocketSendData(pnode);\n@@ -2275,8 +2301,7 @@ void CConnman::Stop()\n \n     // Close sockets\n     BOOST_FOREACH(CNode* pnode, vNodes)\n-        if (pnode->hSocket != INVALID_SOCKET)\n-            CloseSocket(pnode->hSocket);\n+        pnode->CloseSocketDisconnect();\n     BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n         if (hListenSocket.socket != INVALID_SOCKET)\n             if (!CloseSocket(hListenSocket.socket))\n@@ -2677,9 +2702,6 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nBytesSent = 0;\n     {\n         LOCK(pnode->cs_vSend);\n-        if(pnode->hSocket == INVALID_SOCKET) {\n-            return;\n-        }\n         bool optimisticSend(pnode->vSendMsg.empty());\n \n         //log total amount of bytes per command"
      },
      {
        "sha": "e5a19e0f43ef484525e5b4c531c9c3e4941b4f7c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2447c1024e6069bfe62ddff65c4e1aaf28f32b38/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "patch": "@@ -572,6 +572,7 @@ class CNode\n     uint64_t nSendBytes;\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n+    CCriticalSection cs_hSocket;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg;"
      }
    ]
  },
  {
    "sha": "321d0fc6b6624c65508f8b9059418cb936f0bbbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjFkMGZjNmI2NjI0YzY1NTA4ZjhiOTA1OTQxOGNiOTM2ZjBiYmJl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-06T07:34:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:39Z"
      },
      "message": "net: fix a few races. Credit @TheBlueMatt\n\nThese are (afaik) all long-standing races or concurrent accesses. Going\nforward, we can clean these up so that they're not all individual atomic\naccesses.\n\n- Reintroduce cs_vRecv to guard receive-specific vars\n- Lock vRecv/vSend for CNodeStats\n- Make some vars atomic.\n- Only set the connection time in CNode's constructor so that it doesn't change",
      "tree": {
        "sha": "57a99a1ede16e5449db2d230ddbc7a3b561547be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57a99a1ede16e5449db2d230ddbc7a3b561547be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/321d0fc6b6624c65508f8b9059418cb936f0bbbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321d0fc6b6624c65508f8b9059418cb936f0bbbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/321d0fc6b6624c65508f8b9059418cb936f0bbbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321d0fc6b6624c65508f8b9059418cb936f0bbbe/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2447c1024e6069bfe62ddff65c4e1aaf28f32b38"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 22,
      "deletions": 15
    },
    "files": [
      {
        "sha": "c96ca469ff62eb8e1686e173333bed71e01d2bec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "patch": "@@ -389,7 +389,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n-        pnode->nTimeConnected = GetSystemTimeInSeconds();\n         pnode->AddRef();\n \n         return pnode;\n@@ -612,10 +611,16 @@ void CNode::copyStats(CNodeStats &stats)\n     X(fInbound);\n     X(fAddnode);\n     X(nStartingHeight);\n-    X(nSendBytes);\n-    X(mapSendBytesPerMsgCmd);\n-    X(nRecvBytes);\n-    X(mapRecvBytesPerMsgCmd);\n+    {\n+        LOCK(cs_vSend);\n+        X(mapSendBytesPerMsgCmd);\n+        X(nSendBytes);\n+    }\n+    {\n+        LOCK(cs_vRecv);\n+        X(mapRecvBytesPerMsgCmd);\n+        X(nRecvBytes);\n+    }\n     X(fWhitelisted);\n \n     // It is common for nodes with good ping times to suddenly become lagged,\n@@ -643,6 +648,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n {\n     complete = false;\n     int64_t nTimeMicros = GetTimeMicros();\n+    LOCK(cs_vRecv);\n     nLastRecv = nTimeMicros / 1000000;\n     nRecvBytes += nBytes;\n     while (nBytes > 0) {"
      },
      {
        "sha": "89501c764e50abb2bdd82d9927dd9a9aacbcc949",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "patch": "@@ -573,6 +573,7 @@ class CNode\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_hSocket;\n+    CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg;\n@@ -584,10 +585,10 @@ class CNode\n     uint64_t nRecvBytes;\n     std::atomic<int> nRecvVersion;\n \n-    int64_t nLastSend;\n-    int64_t nLastRecv;\n+    std::atomic<int64_t> nLastSend;\n+    std::atomic<int64_t> nLastRecv;\n     int64_t nTimeConnected;\n-    int64_t nTimeOffset;\n+    std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n@@ -614,7 +615,7 @@ class CNode\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n-    int nRefCount;\n+    std::atomic<int> nRefCount;\n     const NodeId id;\n \n     const uint64_t nKeyedNetGroup;\n@@ -665,15 +666,15 @@ class CNode\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n-    uint64_t nPingNonceSent;\n+    std::atomic<uint64_t> nPingNonceSent;\n     // Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n-    int64_t nPingUsecStart;\n+    std::atomic<int64_t> nPingUsecStart;\n     // Last measured round-trip time.\n-    int64_t nPingUsecTime;\n+    std::atomic<int64_t> nPingUsecTime;\n     // Best measured round-trip time.\n-    int64_t nMinPingUsecTime;\n+    std::atomic<int64_t> nMinPingUsecTime;\n     // Whether a ping is requested.\n-    bool fPingQueued;\n+    std::atomic<bool> fPingQueued;\n     // Minimum fee rate with which to filter inv's to this node\n     CAmount minFeeFilter;\n     CCriticalSection cs_feeFilter;"
      },
      {
        "sha": "e89a897bd544df74b5444fe706422ea2ab4f3bfe",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321d0fc6b6624c65508f8b9059418cb936f0bbbe/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "patch": "@@ -2450,7 +2450,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     if (pingUsecTime > 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom->nPingUsecTime = pingUsecTime;\n-                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime, pingUsecTime);\n+                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime.load(), pingUsecTime);\n                     } else {\n                         // This should never happen\n                         sProblem = \"Timing mishap\";"
      }
    ]
  },
  {
    "sha": "644f1234e22626a7b5618a1dae60a8457a4063b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDRmMTIzNGUyMjYyNmE3YjU2MThhMWRhZTYwYTg0NTdhNDA2M2Ix",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T16:42:49Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:40Z"
      },
      "message": "Make nTimeConnected const in CNode",
      "tree": {
        "sha": "1126ea900c892ed9ec77b62e11640e18bd5f7c0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1126ea900c892ed9ec77b62e11640e18bd5f7c0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/644f1234e22626a7b5618a1dae60a8457a4063b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/644f1234e22626a7b5618a1dae60a8457a4063b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/644f1234e22626a7b5618a1dae60a8457a4063b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/644f1234e22626a7b5618a1dae60a8457a4063b1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321d0fc6b6624c65508f8b9059418cb936f0bbbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/321d0fc6b6624c65508f8b9059418cb936f0bbbe"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0e6e00d58b7216511b7a979510f770b16c94df80",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/644f1234e22626a7b5618a1dae60a8457a4063b1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/644f1234e22626a7b5618a1dae60a8457a4063b1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=644f1234e22626a7b5618a1dae60a8457a4063b1",
        "patch": "@@ -2574,6 +2574,7 @@ unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :\n+    nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     fInbound(fInboundIn),\n     id(idIn),\n@@ -2593,7 +2594,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nLastRecv = 0;\n     nSendBytes = 0;\n     nRecvBytes = 0;\n-    nTimeConnected = GetSystemTimeInSeconds();\n     nTimeOffset = 0;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;"
      },
      {
        "sha": "4bbcfac88b13b0745516a409e111017d6792c006",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/644f1234e22626a7b5618a1dae60a8457a4063b1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/644f1234e22626a7b5618a1dae60a8457a4063b1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=644f1234e22626a7b5618a1dae60a8457a4063b1",
        "patch": "@@ -587,7 +587,7 @@ class CNode\n \n     std::atomic<int64_t> nLastSend;\n     std::atomic<int64_t> nLastRecv;\n-    int64_t nTimeConnected;\n+    const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n     std::string addrName;"
      }
    ]
  },
  {
    "sha": "ae683c1b1960b32134f5a5a29504691c91f39cf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTY4M2MxYjE5NjBiMzIxMzRmNWE1YTI5NTA0NjkxYzkxZjM5Y2Yz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T16:44:38Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:40Z"
      },
      "message": "Avoid copying CNodeStats to make helgrind OK with buggy std::string",
      "tree": {
        "sha": "28065ae3fc560bc8e36fb9b0568422d142ff3371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28065ae3fc560bc8e36fb9b0568422d142ff3371"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae683c1b1960b32134f5a5a29504691c91f39cf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae683c1b1960b32134f5a5a29504691c91f39cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae683c1b1960b32134f5a5a29504691c91f39cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae683c1b1960b32134f5a5a29504691c91f39cf3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "644f1234e22626a7b5618a1dae60a8457a4063b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/644f1234e22626a7b5618a1dae60a8457a4063b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/644f1234e22626a7b5618a1dae60a8457a4063b1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "b7243dce2050591a71f1ead56fada78e7b8f06c5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae683c1b1960b32134f5a5a29504691c91f39cf3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae683c1b1960b32134f5a5a29504691c91f39cf3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ae683c1b1960b32134f5a5a29504691c91f39cf3",
        "patch": "@@ -2420,9 +2420,8 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     vstats.reserve(vNodes.size());\n     for(std::vector<CNode*>::iterator it = vNodes.begin(); it != vNodes.end(); ++it) {\n         CNode* pnode = *it;\n-        CNodeStats stats;\n-        pnode->copyStats(stats);\n-        vstats.push_back(stats);\n+        vstats.emplace_back();\n+        pnode->copyStats(vstats.back());\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "512731bed0782f10092de35a960153b17ecc11eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTI3MzFiZWQwNzgyZjEwMDkyZGUzNWE5NjAxNTNiMTdlY2MxMWVi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T16:53:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:40Z"
      },
      "message": "Access fRelayTxes with cs_filter lock in copyStats",
      "tree": {
        "sha": "f2026be6a805a95efc78a6063a815e2f87bcbe15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2026be6a805a95efc78a6063a815e2f87bcbe15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/512731bed0782f10092de35a960153b17ecc11eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512731bed0782f10092de35a960153b17ecc11eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/512731bed0782f10092de35a960153b17ecc11eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512731bed0782f10092de35a960153b17ecc11eb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae683c1b1960b32134f5a5a29504691c91f39cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae683c1b1960b32134f5a5a29504691c91f39cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae683c1b1960b32134f5a5a29504691c91f39cf3"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ea8a2a0a4aefd912e6da77946a27853c770065e5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/512731bed0782f10092de35a960153b17ecc11eb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/512731bed0782f10092de35a960153b17ecc11eb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=512731bed0782f10092de35a960153b17ecc11eb",
        "patch": "@@ -600,7 +600,10 @@ void CNode::copyStats(CNodeStats &stats)\n     stats.nodeid = this->GetId();\n     X(nServices);\n     X(addr);\n-    X(fRelayTxes);\n+    {\n+        LOCK(cs_filter);\n+        X(fRelayTxes);\n+    }\n     X(nLastSend);\n     X(nLastRecv);\n     X(nTimeConnected);"
      }
    ]
  },
  {
    "sha": "96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmY0MmQ4YTEyODcxYjhkNWM0ZTMxZmQyN2Q4MTM1Zjk3YzZiM2Uw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:15:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:40Z"
      },
      "message": "Make nStartingHeight atomic",
      "tree": {
        "sha": "5935b61ce9d80ea69f50a206f9dae5cf982d2153",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5935b61ce9d80ea69f50a206f9dae5cf982d2153"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "512731bed0782f10092de35a960153b17ecc11eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/512731bed0782f10092de35a960153b17ecc11eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/512731bed0782f10092de35a960153b17ecc11eb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "566284c70b6d3610778fd152cc10a9dea088e022",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
        "patch": "@@ -628,7 +628,7 @@ class CNode\n \n public:\n     uint256 hashContinue;\n-    int nStartingHeight;\n+    std::atomic<int> nStartingHeight;\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;"
      }
    ]
  },
  {
    "sha": "0f3187261519c7568ef4211ce12b9740a3c1200f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjMxODcyNjE1MTljNzU2OGVmNDIxMWNlMTJiOTc0MGEzYzEyMDBm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:20:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Make nServices atomic",
      "tree": {
        "sha": "dde1f3a08dfe991f4ec9c901f739b3d047620398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dde1f3a08dfe991f4ec9c901f739b3d047620398"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f3187261519c7568ef4211ce12b9740a3c1200f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3187261519c7568ef4211ce12b9740a3c1200f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3187261519c7568ef4211ce12b9740a3c1200f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3187261519c7568ef4211ce12b9740a3c1200f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96f42d8a12871b8d5c4e31fd27d8135f97c6b3e0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cf742a8caa59c2c0ac0296b5b276f203e430a19d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f3187261519c7568ef4211ce12b9740a3c1200f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f3187261519c7568ef4211ce12b9740a3c1200f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0f3187261519c7568ef4211ce12b9740a3c1200f",
        "patch": "@@ -564,7 +564,7 @@ class CNode\n     friend class CConnman;\n public:\n     // socket\n-    ServiceFlags nServices;\n+    std::atomic<ServiceFlags> nServices;\n     ServiceFlags nServicesExpected;\n     SOCKET hSocket;\n     size_t nSendSize; // total size of all vSendMsg entries"
      }
    ]
  },
  {
    "sha": "22b4966a29501c4f3f2e970ac5008fbd91e665a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmI0OTY2YTI5NTAxYzRmM2YyZTk3MGFjNTAwOGZiZDkxZTY2NWE5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:08:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Move [clean|str]SubVer writes/copyStats into a lock",
      "tree": {
        "sha": "2beb02b98598c74d44f4471bf157405804b7c321",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2beb02b98598c74d44f4471bf157405804b7c321"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22b4966a29501c4f3f2e970ac5008fbd91e665a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22b4966a29501c4f3f2e970ac5008fbd91e665a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22b4966a29501c4f3f2e970ac5008fbd91e665a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22b4966a29501c4f3f2e970ac5008fbd91e665a9/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f3187261519c7568ef4211ce12b9740a3c1200f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f3187261519c7568ef4211ce12b9740a3c1200f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f3187261519c7568ef4211ce12b9740a3c1200f"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e7521f86d14373781e5dbdddf329d328a97bd245",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "patch": "@@ -610,7 +610,10 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nTimeOffset);\n     X(addrName);\n     X(nVersion);\n-    X(cleanSubVer);\n+    {\n+        LOCK(cs_SubVer);\n+        X(cleanSubVer);\n+    }\n     X(fInbound);\n     X(fAddnode);\n     X(nStartingHeight);"
      },
      {
        "sha": "ddc050eb1f67c299f8c135602b41fab648746d7e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "patch": "@@ -598,6 +598,7 @@ class CNode\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer, cleanSubVer;\n+    CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;"
      },
      {
        "sha": "b5feac2d5926662e6ea5d597490e05e2e3cfa170",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22b4966a29501c4f3f2e970ac5008fbd91e665a9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "patch": "@@ -1211,6 +1211,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         int nVersion;\n         int nSendVersion;\n         std::string strSubVer;\n+        std::string cleanSubVer;\n         int nStartingHeight = -1;\n         bool fRelay = true;\n \n@@ -1246,6 +1247,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n             vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n+            cleanSubVer = SanitizeString(strSubVer);\n         }\n         if (!vRecv.empty()) {\n             vRecv >> nStartingHeight;\n@@ -1273,8 +1275,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         pfrom->nServices = nServices;\n         pfrom->addrLocal = addrMe;\n-        pfrom->strSubVer = strSubVer;\n-        pfrom->cleanSubVer = SanitizeString(strSubVer);\n+        {\n+            LOCK(pfrom->cs_SubVer);\n+            pfrom->strSubVer = strSubVer;\n+            pfrom->cleanSubVer = cleanSubVer;\n+        }\n         pfrom->nStartingHeight = nStartingHeight;\n         pfrom->fClient = !(nServices & NODE_NETWORK);\n         {\n@@ -1330,7 +1335,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n         LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n-                  pfrom->cleanSubVer, pfrom->nVersion,\n+                  cleanSubVer, pfrom->nVersion,\n                   pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n                   remoteAddr);\n "
      }
    ]
  },
  {
    "sha": "d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGYyYjhhOGMwMzJiODNhM2JkOTA3NTBlNThhYmFlZWNlN2UzNGU3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T22:38:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Make nTimeBestReceived atomic",
      "tree": {
        "sha": "3c68096b426ed16e3be504c7f6cd4b767d05c1d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c68096b426ed16e3be504c7f6cd4b767d05c1d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22b4966a29501c4f3f2e970ac5008fbd91e665a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22b4966a29501c4f3f2e970ac5008fbd91e665a9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "62397e68ce0cbc75ae7a22bc8ed531eafd38b199",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
        "patch": "@@ -36,7 +36,7 @@\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n \n-int64_t nTimeBestReceived = 0; // Used only to inform the wallet of when we last received a block\n+std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n \n struct IteratorComparator\n {"
      }
    ]
  },
  {
    "sha": "036073bf87c07f8d69e39168dd93a52f1aafe85c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzYwNzNiZjg3YzA3ZjhkNjllMzkxNjhkZDkzYTUyZjFhYWZlODVj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:04:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Move CNode::addrName accesses behind locked accessors",
      "tree": {
        "sha": "95cdeea1af6e92752009b265b4f1b67e1d040f7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95cdeea1af6e92752009b265b4f1b67e1d040f7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/036073bf87c07f8d69e39168dd93a52f1aafe85c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036073bf87c07f8d69e39168dd93a52f1aafe85c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/036073bf87c07f8d69e39168dd93a52f1aafe85c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036073bf87c07f8d69e39168dd93a52f1aafe85c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8f2b8a8c032b83a3bd90750e58abaeece7e34e7"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 30,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8aa12619843fa9c409bbbcb12181973bbf5bd4a5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "patch": "@@ -307,9 +307,11 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n CNode* CConnman::FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-        if (pnode->addrName == addrName)\n+    BOOST_FOREACH(CNode* pnode, vNodes) {\n+        if (pnode->GetAddrName() == addrName) {\n             return (pnode);\n+        }\n+    }\n     return NULL;\n }\n \n@@ -373,9 +375,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             CNode* pnode = FindNode((CService)addrConnect);\n             if (pnode)\n             {\n-                if (pnode->addrName.empty()) {\n-                    pnode->addrName = std::string(pszDest);\n-                }\n+                pnode->MaybeSetAddrName(std::string(pszDest));\n                 CloseSocket(hSocket);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n                 return NULL;\n@@ -593,6 +593,19 @@ void CConnman::AddWhitelistedRange(const CSubNet &subnet) {\n     vWhitelistedRange.push_back(subnet);\n }\n \n+\n+std::string CNode::GetAddrName() const {\n+    LOCK(cs_addrName);\n+    return addrName;\n+}\n+\n+void CNode::MaybeSetAddrName(const std::string& addrNameIn) {\n+    LOCK(cs_addrName);\n+    if (addrName.empty()) {\n+        addrName = addrNameIn;\n+    }\n+}\n+\n #undef X\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats)\n@@ -608,7 +621,7 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nLastRecv);\n     X(nTimeConnected);\n     X(nTimeOffset);\n-    X(addrName);\n+    stats.addrName = GetAddrName();\n     X(nVersion);\n     {\n         LOCK(cs_SubVer);\n@@ -1798,8 +1811,9 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n             if (pnode->addr.IsValid()) {\n                 mapConnected[pnode->addr] = pnode->fInbound;\n             }\n-            if (!pnode->addrName.empty()) {\n-                mapConnectedByName[pnode->addrName] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n+            std::string addrName = pnode->GetAddrName();\n+            if (!addrName.empty()) {\n+                mapConnectedByName[std::move(addrName)] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n             }\n         }\n     }"
      },
      {
        "sha": "2cfc74e3d55c9c6f8565cec2f6e568c8c8d7b327",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "patch": "@@ -590,7 +590,6 @@ class CNode\n     const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n-    std::string addrName;\n     CService addrLocal;\n     std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n@@ -696,6 +695,9 @@ class CNode\n     const int nMyStartingHeight;\n     int nSendVersion;\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n+\n+    mutable CCriticalSection cs_addrName;\n+    std::string addrName;\n public:\n \n     NodeId GetId() const {\n@@ -798,6 +800,10 @@ class CNode\n     {\n         return nLocalServices;\n     }\n+\n+    std::string GetAddrName() const;\n+    //! Sets the addrName only if it was not previously set\n+    void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n "
      },
      {
        "sha": "b0c9b3c71ba170786e5cdab38b6ec439cd855d92",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/036073bf87c07f8d69e39168dd93a52f1aafe85c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "patch": "@@ -264,7 +264,7 @@ void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n \n void InitializeNode(CNode *pnode, CConnman& connman) {\n     CAddress addr = pnode->addr;\n-    std::string addrName = pnode->addrName;\n+    std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();\n     {\n         LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjJkYzdhNThjYjBhM2RmNTgxODhiNzQ4ZGY4ZTBkMDRiYTc2ZjAw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-06T17:18:51Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-10T16:32:41Z"
      },
      "message": "Move CNode::addrLocal access behind locked accessors",
      "tree": {
        "sha": "061df504e100195d1dc93313652c9e2a1ecdc545",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/061df504e100195d1dc93313652c9e2a1ecdc545"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/036073bf87c07f8d69e39168dd93a52f1aafe85c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/036073bf87c07f8d69e39168dd93a52f1aafe85c"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 29,
      "deletions": 7
    },
    "files": [
      {
        "sha": "505eb971c09e944d8bd90eb4f525d8b8e3131bf3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 4,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "patch": "@@ -164,8 +164,9 @@ int GetnScore(const CService& addr)\n // Is our peer's addrLocal potentially useful as an external IP source?\n bool IsPeerAddrLocalGood(CNode *pnode)\n {\n-    return fDiscover && pnode->addr.IsRoutable() && pnode->addrLocal.IsRoutable() &&\n-           !IsLimited(pnode->addrLocal.GetNetwork());\n+    CService addrLocal = pnode->GetAddrLocal();\n+    return fDiscover && pnode->addr.IsRoutable() && addrLocal.IsRoutable() &&\n+           !IsLimited(addrLocal.GetNetwork());\n }\n \n // pushes our own address to a peer\n@@ -180,7 +181,7 @@ void AdvertiseLocal(CNode *pnode)\n         if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n              GetRand((GetnScore(addrLocal) > LOCAL_MANUAL) ? 8:2) == 0))\n         {\n-            addrLocal.SetIP(pnode->addrLocal);\n+            addrLocal.SetIP(pnode->GetAddrLocal());\n         }\n         if (addrLocal.IsRoutable())\n         {\n@@ -606,6 +607,20 @@ void CNode::MaybeSetAddrName(const std::string& addrNameIn) {\n     }\n }\n \n+CService CNode::GetAddrLocal() const {\n+    LOCK(cs_addrLocal);\n+    return addrLocal;\n+}\n+\n+void CNode::SetAddrLocal(const CService& addrLocalIn) {\n+    LOCK(cs_addrLocal);\n+    if (addrLocal.IsValid()) {\n+        error(\"Addr local already set for node: %i. Refusing to change from %s to %s\", id, addrLocal.ToString(), addrLocalIn.ToString());\n+    } else {\n+        addrLocal = addrLocalIn;\n+    }\n+}\n+\n #undef X\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats)\n@@ -659,7 +674,8 @@ void CNode::copyStats(CNodeStats &stats)\n     stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)\n-    stats.addrLocal = addrLocal.IsValid() ? addrLocal.ToString() : \"\";\n+    CService addrLocalUnlocked = GetAddrLocal();\n+    stats.addrLocal = addrLocalUnlocked.IsValid() ? addrLocalUnlocked.ToString() : \"\";\n }\n #undef X\n "
      },
      {
        "sha": "29b6a44c88ff2a0dfbccc9f87720e5bbab5ef42c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "patch": "@@ -590,7 +590,6 @@ class CNode\n     const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n-    CService addrLocal;\n     std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n@@ -698,6 +697,9 @@ class CNode\n \n     mutable CCriticalSection cs_addrName;\n     std::string addrName;\n+\n+    CService addrLocal;\n+    mutable CCriticalSection cs_addrLocal;\n public:\n \n     NodeId GetId() const {\n@@ -731,6 +733,10 @@ class CNode\n     void SetSendVersion(int nVersionIn);\n     int GetSendVersion() const;\n \n+    CService GetAddrLocal() const;\n+    //! May not be called more than once\n+    void SetAddrLocal(const CService& addrLocalIn);\n+\n     CNode* AddRef()\n     {\n         nRefCount++;"
      },
      {
        "sha": "7d76aa0b4860ff34a098865e4d7a8a133df290e1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db2dc7a58cb0a3df58188b748df8e0d04ba76f00/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "patch": "@@ -1274,7 +1274,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n \n         pfrom->nServices = nServices;\n-        pfrom->addrLocal = addrMe;\n+        pfrom->SetAddrLocal(addrMe);\n         {\n             LOCK(pfrom->cs_SubVer);\n             pfrom->strSubVer = strSubVer;\n@@ -1315,7 +1315,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr, insecure_rand);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n-                    addr.SetIP(pfrom->addrLocal);\n+                    addr.SetIP(addrMe);\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr, insecure_rand);\n                 }"
      }
    ]
  },
  {
    "sha": "b860915f8b0dae98e57a254d11575ea41f5c5a79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODYwOTE1ZjhiMGRhZTk4ZTU3YTI1NGQxMTU3NWVhNDFmNWM1YTc5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-10T17:02:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-10T17:02:56Z"
      },
      "message": "Merge #9707: Fix RPC failure testing\n\n9db8eec Fix RPC failure testing (John Newbery)",
      "tree": {
        "sha": "743d0c2798aa8181e31cf08e9f9ddfd7745f4c2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/743d0c2798aa8181e31cf08e9f9ddfd7745f4c2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b860915f8b0dae98e57a254d11575ea41f5c5a79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYnfJAAAoJEC1/I3LlD+E3e6gIAJ/Ess2J4vcBmsvPmgAx3s/A\nOH8WygpzyKYZSWWhxcT8dzjmT/fKbROr/u95FtOvNppBqbR0PZ352L0ALJvaodll\nxN3vsQQ2BGU5bfo5pO/C2ktye92MmLHE8EV81YPw7uHtGkAftVjzL2fldE1ek09A\nA0B0Ikuyo5uKx/wevytTVSxFh+vdKOepb47sugPr8KdJL6NUfKgGB/n0Ch0acAuv\nxN19BQnFAxkvpLxePXYBz4b3pA5OZ1nJvM/xQEhFSK8YDL6LOg4ox1/BwcaIn2nf\nURhiS83Ta2jiPsAdUu1EqGOI2OW9iUR0zoumx6EPP1cqTHWG2Bgx//nc5hbzb5w=\n=pFZZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 743d0c2798aa8181e31cf08e9f9ddfd7745f4c2b\nparent 2447c1024e6069bfe62ddff65c4e1aaf28f32b38\nparent 9db8eecac1c713c760c0217b6acb7455c657fa8b\nauthor MarcoFalke <falke.marco@gmail.com> 1486746130 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1486746176 +0100\n\nMerge #9707: Fix RPC failure testing\n\n9db8eec Fix RPC failure testing (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b860915f8b0dae98e57a254d11575ea41f5c5a79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b860915f8b0dae98e57a254d11575ea41f5c5a79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b860915f8b0dae98e57a254d11575ea41f5c5a79/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2447c1024e6069bfe62ddff65c4e1aaf28f32b38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2447c1024e6069bfe62ddff65c4e1aaf28f32b38"
      },
      {
        "sha": "9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9db8eecac1c713c760c0217b6acb7455c657fa8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9db8eecac1c713c760c0217b6acb7455c657fa8b"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 21,
      "deletions": 4
    },
    "files": [
      {
        "sha": "da2d8f040f0a2c51121ac688b9dbfaf9067dbcef",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b860915f8b0dae98e57a254d11575ea41f5c5a79/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b860915f8b0dae98e57a254d11575ea41f5c5a79/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "patch": "@@ -37,7 +37,7 @@ def run_test(self):\n         h = node.help(command='getinfo')\n         assert(h.startswith('getinfo\\n'))\n \n-        assert_raises_jsonrpc(-8, node.help, random='getinfo')\n+        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getinfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "dc8555c44c08cb0a15fbaa9cdd579c7fa25f1521",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 20,
        "deletions": 3,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b860915f8b0dae98e57a254d11575ea41f5c5a79/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b860915f8b0dae98e57a254d11575ea41f5c5a79/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "patch": "@@ -550,13 +550,30 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, fun, *args, **kwds):\n-    '''Check for specific JSONRPC exception code'''\n+def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+    \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n+    and verifies that the error code and message are as expected. Throws AssertionError if\n+    no JSONRPCException was returned or if the error code/message are not as expected.\n+\n+    Args:\n+        code (int), optional: the error code returned by the RPC call (defined\n+            in src/rpc/protocol.h). Set to None if checking the error code is not required.\n+        message (string), optional: [a substring of] the error string returned by the\n+            RPC call. Set to None if checking the error string is not required\n+        fun (function): the function to call. This should be the name of an RPC.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n-        if e.error[\"code\"] != code:\n+        # JSONRPCException was thrown as expected. Check the code and message values are correct.\n+        if (code is not None) and (code != e.error[\"code\"]):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n+        if (message is not None) and (message not in e.error['message']):\n+            raise AssertionError(\"Expected substring not found:\"+e.error['message'])\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \"+type(e).__name__)\n     else:"
      }
    ]
  },
  {
    "sha": "442887f27fb5809e72862d4385eba86588bc97d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDI4ODdmMjdmYjU4MDllNzI4NjJkNDM4NWViYTg2NTg4YmM5N2Qw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-03T21:23:13Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Require timestamps for importmulti keys\n\nAdditionally, accept a \"now\" timestamp, to allow avoiding rescans for keys\nwhich are known never to have been used.\n\nNote that the behavior when \"now\" is specified is slightly different than the\nprevious behavior when no timestamp was specified at all. Previously, when no\ntimestamp was specified, it would avoid rescanning during the importmulti call,\nbut set the key's nCreateTime value to 1, which would not prevent future block\nreads in later ScanForWalletTransactions calls. With this change, passing a\n\"now\" timestamp will set the key's nCreateTime to the current block time\ninstead of 1.\n\nFixes #9491",
      "tree": {
        "sha": "203a8fb48e26aaa644aa5f21c9a3bf92ef886786",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/203a8fb48e26aaa644aa5f21c9a3bf92ef886786"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/442887f27fb5809e72862d4385eba86588bc97d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/442887f27fb5809e72862d4385eba86588bc97d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02464da5e4aa8c19d4fff3859dcdee822e2af78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02464da5e4aa8c19d4fff3859dcdee822e2af78c"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 64,
      "deletions": 9
    },
    "files": [
      {
        "sha": "8f60e63e2e50dd7ecc7c2f84b5aace5a68d83440",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -33,6 +33,7 @@ def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node,\n             \"scriptPubKey\": {\n                 \"address\": address\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [pubkey] if data == Data.pub else [],\n             \"keys\": [key] if data == Data.priv else [],\n             \"label\": label,"
      },
      {
        "sha": "b4d4b6c5b8048faee3fcc2b895d37e51446fb4cc",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 34,
        "deletions": 3,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -52,7 +52,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n@@ -65,6 +66,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -76,7 +78,8 @@ def run_test (self):\n         print(\"Should not import a scriptPubKey without internal flag\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n-            \"scriptPubKey\": address['scriptPubKey']\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n@@ -93,6 +96,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -106,6 +110,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -120,6 +125,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }]\n         result = self.nodes[1].importmulti(request)\n@@ -137,6 +143,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -151,6 +158,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"watchonly\": True\n         }])\n@@ -166,6 +174,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n@@ -179,6 +188,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -203,7 +213,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n@@ -229,6 +240,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -253,6 +265,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n@@ -277,6 +290,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])],\n             \"watchonly\": True\n@@ -294,6 +308,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -310,6 +325,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -330,6 +346,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -346,6 +363,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ],\n             \"internal\": True\n         }])\n@@ -356,5 +374,18 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n \n+        # Bad or missing timestamps\n+        print(\"Should throw on invalid or missing timestamp values\")\n+        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+            }])\n+        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+                \"timestamp\": \"\",\n+            }])\n+\n+\n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      },
      {
        "sha": "4674c95bfe606e1eabe9cdf78f7c588e08936448",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/442887f27fb5809e72862d4385eba86588bc97d0/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/442887f27fb5809e72862d4385eba86588bc97d0/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=442887f27fb5809e72862d4385eba86588bc97d0",
        "patch": "@@ -640,7 +640,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue processImport(const UniValue& data) {\n+UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n+{\n     try {\n         bool success = false;\n \n@@ -659,7 +660,6 @@ UniValue processImport(const UniValue& data) {\n         const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n         const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > 1 ? data[\"timestamp\"].get_int64() : 1;\n \n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n         bool isP2SH = strRedeemScript.length() > 0;\n@@ -958,6 +958,20 @@ UniValue processImport(const UniValue& data) {\n     }\n }\n \n+int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n+{\n+    if (data.exists(\"timestamp\")) {\n+        const UniValue& timestamp = data[\"timestamp\"];\n+        if (timestamp.isNum()) {\n+            return timestamp.get_int64();\n+        } else if (timestamp.isStr() && timestamp.get_str() == \"now\") {\n+            return now;\n+        }\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected number or \\\"now\\\" timestamp value for key. got type %s\", uvTypeName(timestamp.type())));\n+    }\n+    throw JSONRPCError(RPC_TYPE_ERROR, \"Missing required timestamp field for key\");\n+}\n+\n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n     // clang-format off\n@@ -970,13 +984,17 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  [     (array of json objects)\\n\"\n             \"    {\\n\"\n             \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n+            \"      \\\"timestamp\\\": timestamp | \\\"now\\\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+            \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n+            \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n+            \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n             \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n-            \"      \\\"timestamp\\\": 1454686740,                                (integer, optional, default now) Timestamp\\n\"\n             \"    }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n@@ -1015,6 +1033,12 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n     EnsureWalletIsUnlocked();\n \n+    // Verify all timestamps are present before importing any keys.\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetBlockTime() : 0;\n+    for (const UniValue& data : requests.getValues()) {\n+        GetImportTimestamp(data, now);\n+    }\n+\n     bool fRunScan = false;\n     const int64_t minimumTimestamp = 1;\n     int64_t nLowestTimestamp = 0;\n@@ -1028,7 +1052,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     UniValue response(UniValue::VARR);\n \n     BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n-        const UniValue result = processImport(data);\n+        const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n+        const UniValue result = ProcessImport(data, timestamp);\n         response.push_back(result);\n \n         if (!fRescan) {\n@@ -1041,8 +1066,6 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n \n         // Get the lowest timestamp.\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > minimumTimestamp ? data[\"timestamp\"].get_int64() : minimumTimestamp;\n-\n         if (timestamp < nLowestTimestamp) {\n             nLowestTimestamp = timestamp;\n         }"
      }
    ]
  },
  {
    "sha": "3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2Y5OTE3NTZjZjM1N2I2NTFjNjQxNWUzZDk1MGU1YWE5ZDM1NWFi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-06T16:13:05Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Add test to check new importmulti \"now\" value\n\nEasiest way to test this was to expose the timestamp via the validateaddress\nRPC (which was already looking up and returning key metadata).",
      "tree": {
        "sha": "f38afae8fed8244798b0e85eb7d64e24a8a2ed01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f38afae8fed8244798b0e85eb7d64e24a8a2ed01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf991756cf357b651c6415e3d950e5aa9d355ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "442887f27fb5809e72862d4385eba86588bc97d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/442887f27fb5809e72862d4385eba86588bc97d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/442887f27fb5809e72862d4385eba86588bc97d0"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b9874ccb855dd6a650e4dc4318a4afa8a29dc334",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf991756cf357b651c6415e3d950e5aa9d355ab/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf991756cf357b651c6415e3d950e5aa9d355ab/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "patch": "@@ -139,6 +139,7 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['time']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -150,6 +151,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # Address + Private key + watchonly\n         print(\"Should not import an address with private key and with watchonly\")"
      },
      {
        "sha": "25fad3c2e38e315efe901a9080f3499274e9179c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf991756cf357b651c6415e3d950e5aa9d355ab/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf991756cf357b651c6415e3d950e5aa9d355ab/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "patch": "@@ -167,6 +167,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n@@ -204,10 +205,16 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n         CKeyID keyID;\n-        if (pwalletMain && address.GetKeyID(keyID) && pwalletMain->mapKeyMetadata.count(keyID) && !pwalletMain->mapKeyMetadata[keyID].hdKeypath.empty())\n-        {\n-            ret.push_back(Pair(\"hdkeypath\", pwalletMain->mapKeyMetadata[keyID].hdKeypath));\n-            ret.push_back(Pair(\"hdmasterkeyid\", pwalletMain->mapKeyMetadata[keyID].hdMasterKeyID.GetHex()));\n+        if (pwalletMain) {\n+            const auto& meta = pwalletMain->mapKeyMetadata;\n+            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it != meta.end()) {\n+                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n+                if (!it->second.hdKeypath.empty()) {\n+                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n+                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+                }\n+            }\n         }\n #endif\n     }"
      }
    ]
  },
  {
    "sha": "266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjZhODExNGNiZTJhODdhNmM4NGQ3NjkwYTc3MTZhMThkNzgyYzU2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-07T16:08:08Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:40:28Z"
      },
      "message": "Use MTP for importmulti \"now\" timestamps",
      "tree": {
        "sha": "772a6f3de292c0c246d151ab23babce021f21748",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/772a6f3de292c0c246d151ab23babce021f21748"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/266a8114cbe2a87a6c84d7690a7716a18d782c56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf991756cf357b651c6415e3d950e5aa9d355ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf991756cf357b651c6415e3d950e5aa9d355ab"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "52e40d6c1cc3d07fe4c17649cf6f6d8741299d86",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/266a8114cbe2a87a6c84d7690a7716a18d782c56/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/266a8114cbe2a87a6c84d7690a7716a18d782c56/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "patch": "@@ -139,7 +139,7 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['time']\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']"
      },
      {
        "sha": "9310a320c76c4737eaabcadcde7eccc3c43f9033",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/266a8114cbe2a87a6c84d7690a7716a18d782c56/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/266a8114cbe2a87a6c84d7690a7716a18d782c56/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "patch": "@@ -1034,7 +1034,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     EnsureWalletIsUnlocked();\n \n     // Verify all timestamps are present before importing any keys.\n-    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetBlockTime() : 0;\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n     for (const UniValue& data : requests.getValues()) {\n         GetImportTimestamp(data, now);\n     }"
      }
    ]
  },
  {
    "sha": "a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTgzNzBlNmEyZDRkY2U1MGVlZmJjYWI1YmRlOWYxNGZhY2VmOGZj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-11-08T21:28:20Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T20:49:00Z"
      },
      "message": "Dedup nTimeFirstKey update logic\n\nAlso make nTimeFirstKey member variable private.\n\nThis is just a cleanup change, it doesn't change behavior in any significant\nway.",
      "tree": {
        "sha": "b5c4fd59bba41e4383f1536d908f0fcedbe176f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5c4fd59bba41e4383f1536d908f0fcedbe176f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/266a8114cbe2a87a6c84d7690a7716a18d782c56"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 24,
      "deletions": 23
    },
    "files": [
      {
        "sha": "f358d720cd930be66c33a03804ae359eea566785",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -143,7 +143,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \n         // whenever a key is imported, we need to scan the whole chain\n-        pwalletMain->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+        pwalletMain->UpdateTimeFirstKey(1);\n \n         if (fRescan) {\n             pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n@@ -500,8 +500,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - 7200)\n         pindex = pindex->pprev;\n \n-    if (!pwalletMain->nTimeFirstKey || nTimeBegin < pwalletMain->nTimeFirstKey)\n-        pwalletMain->nTimeFirstKey = nTimeBegin;\n+    pwalletMain->UpdateTimeFirstKey(nTimeBegin);\n \n     LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n     pwalletMain->ScanForWalletTransactions(pindex);\n@@ -782,9 +781,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                     }\n \n-                    if (timestamp < pwalletMain->nTimeFirstKey) {\n-                        pwalletMain->nTimeFirstKey = timestamp;\n-                    }\n+                    pwalletMain->UpdateTimeFirstKey(timestamp);\n                 }\n             }\n \n@@ -912,9 +909,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                 }\n \n-                if (timestamp < pwalletMain->nTimeFirstKey) {\n-                    pwalletMain->nTimeFirstKey = timestamp;\n-                }\n+                pwalletMain->UpdateTimeFirstKey(timestamp);\n \n                 success = true;\n             }"
      },
      {
        "sha": "192af22cb83968dfdbaa2748c846e829497bf5c6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -113,8 +113,7 @@ CPubKey CWallet::GenerateNewKey()\n     assert(secret.VerifyPubKey(pubkey));\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n-    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n-        nTimeFirstKey = nCreationTime;\n+    UpdateTimeFirstKey(nCreationTime);\n \n     if (!AddKeyPubKey(secret, pubkey))\n         throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n@@ -210,9 +209,7 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    if (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n-        nTimeFirstKey = meta.nCreateTime;\n-\n+    UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[pubkey.GetID()] = meta;\n     return true;\n }\n@@ -222,6 +219,18 @@ bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigne\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n+void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n+{\n+    AssertLockHeld(cs_wallet);\n+    if (nCreateTime <= 1) {\n+        // Cannot determine birthday information, so set the wallet birthday to\n+        // the beginning of time.\n+        nTimeFirstKey = 1;\n+    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n+        nTimeFirstKey = nCreateTime;\n+    }\n+}\n+\n bool CWallet::AddCScript(const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))"
      },
      {
        "sha": "8d3ee9dddcf6e1732b21c8fcaeec2204ad9ab5b9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -611,6 +611,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n     std::set<int64_t> setKeyPool;\n+\n+    int64_t nTimeFirstKey;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -688,8 +691,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<COutPoint> setLockedCoins;\n \n-    int64_t nTimeFirstKey;\n-\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n@@ -730,6 +731,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);"
      },
      {
        "sha": "15e1e4c45f6e080a5e5662350d038f91f81649cf",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a58370e6a2d4dce50eefbcab5bde9f14facef8fc/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "patch": "@@ -357,7 +357,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             // Watch-only addresses have no birthday information for now,\n             // so set the wallet birthday to the beginning of time.\n-            pwallet->nTimeFirstKey = 1;\n+            pwallet->UpdateTimeFirstKey(1);\n         }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n@@ -467,11 +467,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             wss.nKeyMeta++;\n \n             pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n-\n-            // find earliest key creation time, as wallet birthday\n-            if (!pwallet->nTimeFirstKey ||\n-                (keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n-                pwallet->nTimeFirstKey = keyMeta.nCreateTime;\n         }\n         else if (strType == \"defaultkey\")\n         {\n@@ -626,7 +621,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n-        pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+        pwallet->UpdateTimeFirstKey(1);\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet[hash]);"
      }
    ]
  },
  {
    "sha": "a80f98b1c7a49432dc53d18d0fb51ac334de96be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODBmOThiMWM3YTQ5NDMyZGM1M2QxOGQwZmI1MWFjMzM0ZGU5NmJl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-11-08T21:55:02Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-10T21:11:19Z"
      },
      "message": "Use importmulti timestamp when importing watch only keys\n\nWhen importing a watch-only address over importmulti with a specific timestamp,\nthe wallet's nTimeFirstKey is currently set to 1. After this change, the\nprovided timestamp will be used and stored as metadata associated with\nwatch-only key. This can improve wallet performance because it can avoid the\nneed to scan the entire blockchain for watch only addresses when timestamps are\nprovided.\n\nAlso adds timestamp to validateaddress return value (needed for tests).\n\nFixes #9034.",
      "tree": {
        "sha": "ee85a02c68e6157baabd8d7c06b0af3e96b04ec9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee85a02c68e6157baabd8d7c06b0af3e96b04ec9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a58370e6a2d4dce50eefbcab5bde9f14facef8fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a58370e6a2d4dce50eefbcab5bde9f14facef8fc"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 107,
      "deletions": 35
    },
    "files": [
      {
        "sha": "02a932e737f06aa1be7cec27ba98f246299ce578",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -20,6 +20,7 @@ def run_test (self):\n         print (\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n         # keyword definition\n         PRIV_KEY = 'privkey'\n@@ -59,6 +60,9 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n+        watchonly_address = address['address']\n+        watchonly_timestamp = timestamp\n \n \n         # ScriptPubKey + internal\n@@ -73,6 +77,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + !internal\n         print(\"Should not import a scriptPubKey without internal flag\")\n@@ -87,6 +92,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Public key + !Internal\n@@ -103,6 +109,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n \n         # ScriptPubKey + Public key + internal\n@@ -119,6 +126,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Public key + !internal\n         print(\"Should not import a scriptPubKey without internal and with public key\")\n@@ -135,11 +143,11 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -170,6 +178,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # ScriptPubKey + Private key + internal\n         print(\"Should import a scriptPubKey with internal and with private key\")\n@@ -184,6 +193,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Private key + !internal\n         print(\"Should not import a scriptPubKey without internal and with private key\")\n@@ -199,6 +209,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # P2SH address\n@@ -209,6 +220,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh\")\n@@ -222,6 +234,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n         assert_equal(address_assert['isscript'], True)\n         assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n         assert_equal(p2shunspent['solvable'], False)\n@@ -235,6 +248,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script\")\n@@ -246,6 +260,8 @@ def run_test (self):\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -260,6 +276,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n@@ -272,6 +289,8 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -319,6 +338,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Public key + internal + Wrong pubkey\n@@ -338,6 +358,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Private key + !watchonly + Wrong private key\n@@ -357,6 +378,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Private key + internal + Wrong private key\n@@ -375,6 +397,15 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n+\n+        # restart nodes to check for proper serialization/deserialization of watch only address\n+        stop_nodes(self.nodes)\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], watchonly_timestamp);\n \n         # Bad or missing timestamps\n         print(\"Should throw on invalid or missing timestamp values\")"
      },
      {
        "sha": "6fd50127bd5b3bb915e9e784d8d201227ddcaa67",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -208,6 +208,9 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain) {\n             const auto& meta = pwalletMain->mapKeyMetadata;\n             auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it == meta.end()) {\n+                it = meta.find(CScriptID(scriptPubKey));\n+            }\n             if (it != meta.end()) {\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n                 if (!it->second.hdKeypath.empty()) {"
      },
      {
        "sha": "0a3225937e1b2be773ee7aafedfdb6c22afc1e20",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -161,7 +161,7 @@ void ImportScript(const CScript& script, const string& strLabel, bool isRedeemSc\n \n     pwalletMain->MarkDirty();\n \n-    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n+    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, 0 /* nCreateTime */))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n \n     if (isRedeemScript) {\n@@ -575,15 +575,17 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    std::map<CKeyID, int64_t> mapKeyBirth;\n+    std::map<CTxDestination, int64_t> mapKeyBirth;\n     std::set<CKeyID> setKeyPool;\n     pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n     pwalletMain->GetAllReserveKeys(setKeyPool);\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n-        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n+    for (const auto& entry : mapKeyBirth) {\n+        if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n+            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n+        }\n     }\n     mapKeyBirth.clear();\n     std::sort(vKeyBirth.begin(), vKeyBirth.end());\n@@ -720,7 +722,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -737,7 +739,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -830,7 +832,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript)) {\n+                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -848,7 +850,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey)) {\n+                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -922,7 +924,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script)) {\n+                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n "
      },
      {
        "sha": "f8f5a9306dc1c631301489adac23f3e8e771d024",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -206,11 +206,11 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     return false;\n }\n \n-bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     UpdateTimeFirstKey(meta.nCreateTime);\n-    mapKeyMetadata[pubkey.GetID()] = meta;\n+    mapKeyMetadata[keyID] = meta;\n     return true;\n }\n \n@@ -256,15 +256,22 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CScript &dest)\n+bool CWallet::AddWatchOnly(const CScript& dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n-    nTimeFirstKey = 1; // No birthday information for watch-only keys.\n+    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n+    UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+    return CWalletDB(strWalletFile).WriteWatchOnly(dest, meta);\n+}\n+\n+bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n+{\n+    mapKeyMetadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    return AddWatchOnly(dest);\n }\n \n bool CWallet::RemoveWatchOnly(const CScript &dest)\n@@ -3425,14 +3432,16 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n     void operator()(const CNoDestination &none) {}\n };\n \n-void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n+void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n-    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n-        if (it->second.nCreateTime)\n-            mapKeyBirth[it->first] = it->second.nCreateTime;\n+    for (const auto& entry : mapKeyMetadata) {\n+        if (entry.second.nCreateTime) {\n+            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n+        }\n+    }\n \n     // map in which we'll infer heights of other keys\n     CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin"
      },
      {
        "sha": "990c3bdf4196a48224dbc3e7736a5feecbaa8ffc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -614,6 +614,17 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     int64_t nTimeFirstKey;\n \n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) override;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -638,7 +649,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n             mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n     }\n \n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+    // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n+    // key metadata.\n+    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -728,7 +741,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n@@ -750,7 +763,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n     bool RemoveWatchOnly(const CScript &dest);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n@@ -759,7 +772,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n \n     /** \n      * Increment the next transaction order id"
      },
      {
        "sha": "106a59d5623046e21fa3c9513b50044a9a474a18",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 11,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -120,15 +120,19 @@ bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n     return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n-bool CWalletDB::WriteWatchOnly(const CScript &dest)\n+bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Write(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta))\n+        return false;\n     return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Erase(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest))))\n+        return false;\n     return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n@@ -259,14 +263,15 @@ class CWalletScanState {\n public:\n     unsigned int nKeys;\n     unsigned int nCKeys;\n+    unsigned int nWatchKeys;\n     unsigned int nKeyMeta;\n     bool fIsEncrypted;\n     bool fAnyUnordered;\n     int nFileVersion;\n     vector<uint256> vWalletUpgrade;\n \n     CWalletScanState() {\n-        nKeys = nCKeys = nKeyMeta = 0;\n+        nKeys = nCKeys = nWatchKeys = nKeyMeta = 0;\n         fIsEncrypted = false;\n         fAnyUnordered = false;\n         nFileVersion = 0;\n@@ -348,16 +353,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"watchs\")\n         {\n+            wss.nWatchKeys++;\n             CScript script;\n             ssKey >> *(CScriptBase*)(&script);\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n                 pwallet->LoadWatchOnly(script);\n-\n-            // Watch-only addresses have no birthday information for now,\n-            // so set the wallet birthday to the beginning of time.\n-            pwallet->UpdateTimeFirstKey(1);\n         }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n@@ -458,15 +460,27 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             wss.fIsEncrypted = true;\n         }\n-        else if (strType == \"keymeta\")\n+        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n         {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n+            CTxDestination keyID;\n+            if (strType == \"keymeta\")\n+            {\n+              CPubKey vchPubKey;\n+              ssKey >> vchPubKey;\n+              keyID = vchPubKey.GetID();\n+            }\n+            else if (strType == \"watchmeta\")\n+            {\n+              CScript script;\n+              ssKey >> *(CScriptBase*)(&script);\n+              keyID = CScriptID(script);\n+            }\n+\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n \n-            pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n+            pwallet->LoadKeyMetadata(keyID, keyMeta);\n         }\n         else if (strType == \"defaultkey\")\n         {\n@@ -620,7 +634,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n+    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n         pwallet->UpdateTimeFirstKey(1);\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)"
      },
      {
        "sha": "c7c65465df9a8fafb104c7a1e3875af71e60d1c8",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a80f98b1c7a49432dc53d18d0fb51ac334de96be/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "patch": "@@ -135,7 +135,7 @@ class CWalletDB : public CDB\n \n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n-    bool WriteWatchOnly(const CScript &script);\n+    bool WriteWatchOnly(const CScript &script, const CKeyMetadata &keymeta);\n     bool EraseWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);"
      }
    ]
  },
  {
    "sha": "a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDZlZGU5YTEzOGQwZmI4NmIwZGUxN2M0MmI5MzZkOWZlNmUyMTU4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-10T23:53:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-11T00:58:55Z"
      },
      "message": "Merge #9708: Clean up all known races/platform-specific UB at the time PR was opened\n\ndb2dc7a Move CNode::addrLocal access behind locked accessors (Matt Corallo)\n036073b Move CNode::addrName accesses behind locked accessors (Matt Corallo)\nd8f2b8a Make nTimeBestReceived atomic (Matt Corallo)\n22b4966 Move [clean|str]SubVer writes/copyStats into a lock (Matt Corallo)\n0f31872 Make nServices atomic (Matt Corallo)\n96f42d8 Make nStartingHeight atomic (Matt Corallo)\n512731b Access fRelayTxes with cs_filter lock in copyStats (Matt Corallo)\nae683c1 Avoid copying CNodeStats to make helgrind OK with buggy std::string (Matt Corallo)\n644f123 Make nTimeConnected const in CNode (Matt Corallo)\n321d0fc net: fix a few races. Credit @TheBlueMatt (Cory Fields)",
      "tree": {
        "sha": "10645c8703ca75cd91609812c4c5d9804b6e09c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10645c8703ca75cd91609812c4c5d9804b6e09c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYnmHQAAoJENuhpnN5oakxCCkP/iPePjc3F1Ay60ja7Vd82W60\nBfuyR7SWZ7ol25WAGrgfccJvdYvGaJZu1mDlZuiSrguNjh8fGUqW22/EQ5rAMuHz\nBmR2cMm7w+DLlSUUTf2oZmPer43sCNs6uW+MfqUel91DHvwbEBY+6vQxblDFP6ng\nodPraWLHmgfkPc+iCjLABA5bcepgLkQGX7J3HSq+IWG5wNAXMH4rDR4VVtY62LFt\nz4caVPbK2594tGQlNWTJGs5DjSyPV/uLoAOpB9i6FS2zm92HitcaPfO9pdOsgZWd\npkXQQFibN4P30+9QhGyErHkgM8jFOU9HYHHOP2aQLBTZ2+cTyQH8hViJuFi7TKOV\nng9UFN2lnHs/cz8RDUXI66k+lvL0b5j2fX9RmxlHfGMh0fSRzj7UJq6a2T1ycN2X\nO6weK6pUUFSb25GxOLiVssaO1zFY/1ARnlUOL6yCXXdKFYIZyyuAm4Y2lLuFa41p\nPQqo6dc9H69KCK/ELewV2gDZcDRxHxTyZCAtY5/87QC2H2YPHaDws6uDxbV5nJZh\njMZK07cn0JSBvzIZI097OxDhXSfZjwYJdtNNqv1PZo74ExpFHjrHOi86vIkN1llc\nF7wLy9Ni8R1J9tvh535FCVFXmfNXe30OlCm3Oqmy57y2EE5c263Er/Y2qjNj31GL\n6Gr5rDLisIEgJ55IE1DH\n=0Dlc\n-----END PGP SIGNATURE-----",
        "payload": "tree 10645c8703ca75cd91609812c4c5d9804b6e09c4\nparent b860915f8b0dae98e57a254d11575ea41f5c5a79\nparent db2dc7a58cb0a3df58188b748df8e0d04ba76f00\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1486770811 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1486774735 -0800\n\nMerge #9708: Clean up all known races/platform-specific UB at the time PR was opened\n\ndb2dc7a Move CNode::addrLocal access behind locked accessors (Matt Corallo)\n036073b Move CNode::addrName accesses behind locked accessors (Matt Corallo)\nd8f2b8a Make nTimeBestReceived atomic (Matt Corallo)\n22b4966 Move [clean|str]SubVer writes/copyStats into a lock (Matt Corallo)\n0f31872 Make nServices atomic (Matt Corallo)\n96f42d8 Make nStartingHeight atomic (Matt Corallo)\n512731b Access fRelayTxes with cs_filter lock in copyStats (Matt Corallo)\nae683c1 Avoid copying CNodeStats to make helgrind OK with buggy std::string (Matt Corallo)\n644f123 Make nTimeConnected const in CNode (Matt Corallo)\n321d0fc net: fix a few races. Credit @TheBlueMatt (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b860915f8b0dae98e57a254d11575ea41f5c5a79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b860915f8b0dae98e57a254d11575ea41f5c5a79"
      },
      {
        "sha": "db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db2dc7a58cb0a3df58188b748df8e0d04ba76f00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db2dc7a58cb0a3df58188b748df8e0d04ba76f00"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 105,
      "deletions": 45
    },
    "files": [
      {
        "sha": "505eb971c09e944d8bd90eb4f525d8b8e3131bf3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 23,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "patch": "@@ -164,8 +164,9 @@ int GetnScore(const CService& addr)\n // Is our peer's addrLocal potentially useful as an external IP source?\n bool IsPeerAddrLocalGood(CNode *pnode)\n {\n-    return fDiscover && pnode->addr.IsRoutable() && pnode->addrLocal.IsRoutable() &&\n-           !IsLimited(pnode->addrLocal.GetNetwork());\n+    CService addrLocal = pnode->GetAddrLocal();\n+    return fDiscover && pnode->addr.IsRoutable() && addrLocal.IsRoutable() &&\n+           !IsLimited(addrLocal.GetNetwork());\n }\n \n // pushes our own address to a peer\n@@ -180,7 +181,7 @@ void AdvertiseLocal(CNode *pnode)\n         if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n              GetRand((GetnScore(addrLocal) > LOCAL_MANUAL) ? 8:2) == 0))\n         {\n-            addrLocal.SetIP(pnode->addrLocal);\n+            addrLocal.SetIP(pnode->GetAddrLocal());\n         }\n         if (addrLocal.IsRoutable())\n         {\n@@ -307,9 +308,11 @@ CNode* CConnman::FindNode(const CSubNet& subNet)\n CNode* CConnman::FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-        if (pnode->addrName == addrName)\n+    BOOST_FOREACH(CNode* pnode, vNodes) {\n+        if (pnode->GetAddrName() == addrName) {\n             return (pnode);\n+        }\n+    }\n     return NULL;\n }\n \n@@ -373,9 +376,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             CNode* pnode = FindNode((CService)addrConnect);\n             if (pnode)\n             {\n-                if (pnode->addrName.empty()) {\n-                    pnode->addrName = std::string(pszDest);\n-                }\n+                pnode->MaybeSetAddrName(std::string(pszDest));\n                 CloseSocket(hSocket);\n                 LogPrintf(\"Failed to open new connection, already connected\\n\");\n                 return NULL;\n@@ -389,7 +390,6 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n-        pnode->nTimeConnected = GetSystemTimeInSeconds();\n         pnode->AddRef();\n \n         return pnode;\n@@ -594,28 +594,67 @@ void CConnman::AddWhitelistedRange(const CSubNet &subnet) {\n     vWhitelistedRange.push_back(subnet);\n }\n \n+\n+std::string CNode::GetAddrName() const {\n+    LOCK(cs_addrName);\n+    return addrName;\n+}\n+\n+void CNode::MaybeSetAddrName(const std::string& addrNameIn) {\n+    LOCK(cs_addrName);\n+    if (addrName.empty()) {\n+        addrName = addrNameIn;\n+    }\n+}\n+\n+CService CNode::GetAddrLocal() const {\n+    LOCK(cs_addrLocal);\n+    return addrLocal;\n+}\n+\n+void CNode::SetAddrLocal(const CService& addrLocalIn) {\n+    LOCK(cs_addrLocal);\n+    if (addrLocal.IsValid()) {\n+        error(\"Addr local already set for node: %i. Refusing to change from %s to %s\", id, addrLocal.ToString(), addrLocalIn.ToString());\n+    } else {\n+        addrLocal = addrLocalIn;\n+    }\n+}\n+\n #undef X\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);\n     X(addr);\n-    X(fRelayTxes);\n+    {\n+        LOCK(cs_filter);\n+        X(fRelayTxes);\n+    }\n     X(nLastSend);\n     X(nLastRecv);\n     X(nTimeConnected);\n     X(nTimeOffset);\n-    X(addrName);\n+    stats.addrName = GetAddrName();\n     X(nVersion);\n-    X(cleanSubVer);\n+    {\n+        LOCK(cs_SubVer);\n+        X(cleanSubVer);\n+    }\n     X(fInbound);\n     X(fAddnode);\n     X(nStartingHeight);\n-    X(nSendBytes);\n-    X(mapSendBytesPerMsgCmd);\n-    X(nRecvBytes);\n-    X(mapRecvBytesPerMsgCmd);\n+    {\n+        LOCK(cs_vSend);\n+        X(mapSendBytesPerMsgCmd);\n+        X(nSendBytes);\n+    }\n+    {\n+        LOCK(cs_vRecv);\n+        X(mapRecvBytesPerMsgCmd);\n+        X(nRecvBytes);\n+    }\n     X(fWhitelisted);\n \n     // It is common for nodes with good ping times to suddenly become lagged,\n@@ -635,14 +674,16 @@ void CNode::copyStats(CNodeStats &stats)\n     stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)\n-    stats.addrLocal = addrLocal.IsValid() ? addrLocal.ToString() : \"\";\n+    CService addrLocalUnlocked = GetAddrLocal();\n+    stats.addrLocal = addrLocalUnlocked.IsValid() ? addrLocalUnlocked.ToString() : \"\";\n }\n #undef X\n \n bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n {\n     complete = false;\n     int64_t nTimeMicros = GetTimeMicros();\n+    LOCK(cs_vRecv);\n     nLastRecv = nTimeMicros / 1000000;\n     nRecvBytes += nBytes;\n     while (nBytes > 0) {\n@@ -1786,8 +1827,9 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n             if (pnode->addr.IsValid()) {\n                 mapConnected[pnode->addr] = pnode->fInbound;\n             }\n-            if (!pnode->addrName.empty()) {\n-                mapConnectedByName[pnode->addrName] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n+            std::string addrName = pnode->GetAddrName();\n+            if (!addrName.empty()) {\n+                mapConnectedByName[std::move(addrName)] = std::make_pair(pnode->fInbound, static_cast<const CService&>(pnode->addr));\n             }\n         }\n     }\n@@ -2414,9 +2456,8 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     vstats.reserve(vNodes.size());\n     for(std::vector<CNode*>::iterator it = vNodes.begin(); it != vNodes.end(); ++it) {\n         CNode* pnode = *it;\n-        CNodeStats stats;\n-        pnode->copyStats(stats);\n-        vstats.push_back(stats);\n+        vstats.emplace_back();\n+        pnode->copyStats(vstats.back());\n     }\n }\n \n@@ -2568,6 +2609,7 @@ unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :\n+    nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     fInbound(fInboundIn),\n     id(idIn),\n@@ -2587,7 +2629,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nLastRecv = 0;\n     nSendBytes = 0;\n     nRecvBytes = 0;\n-    nTimeConnected = GetSystemTimeInSeconds();\n     nTimeOffset = 0;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;"
      },
      {
        "sha": "29b6a44c88ff2a0dfbccc9f87720e5bbab5ef42c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 28,
        "deletions": 14,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "patch": "@@ -564,7 +564,7 @@ class CNode\n     friend class CConnman;\n public:\n     // socket\n-    ServiceFlags nServices;\n+    std::atomic<ServiceFlags> nServices;\n     ServiceFlags nServicesExpected;\n     SOCKET hSocket;\n     size_t nSendSize; // total size of all vSendMsg entries\n@@ -573,6 +573,7 @@ class CNode\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_hSocket;\n+    CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg;\n@@ -584,19 +585,18 @@ class CNode\n     uint64_t nRecvBytes;\n     std::atomic<int> nRecvVersion;\n \n-    int64_t nLastSend;\n-    int64_t nLastRecv;\n-    int64_t nTimeConnected;\n-    int64_t nTimeOffset;\n+    std::atomic<int64_t> nLastSend;\n+    std::atomic<int64_t> nLastRecv;\n+    const int64_t nTimeConnected;\n+    std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n-    std::string addrName;\n-    CService addrLocal;\n     std::atomic<int> nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer, cleanSubVer;\n+    CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n@@ -614,7 +614,7 @@ class CNode\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n-    int nRefCount;\n+    std::atomic<int> nRefCount;\n     const NodeId id;\n \n     const uint64_t nKeyedNetGroup;\n@@ -627,7 +627,7 @@ class CNode\n \n public:\n     uint256 hashContinue;\n-    int nStartingHeight;\n+    std::atomic<int> nStartingHeight;\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n@@ -665,15 +665,15 @@ class CNode\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n-    uint64_t nPingNonceSent;\n+    std::atomic<uint64_t> nPingNonceSent;\n     // Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n-    int64_t nPingUsecStart;\n+    std::atomic<int64_t> nPingUsecStart;\n     // Last measured round-trip time.\n-    int64_t nPingUsecTime;\n+    std::atomic<int64_t> nPingUsecTime;\n     // Best measured round-trip time.\n-    int64_t nMinPingUsecTime;\n+    std::atomic<int64_t> nMinPingUsecTime;\n     // Whether a ping is requested.\n-    bool fPingQueued;\n+    std::atomic<bool> fPingQueued;\n     // Minimum fee rate with which to filter inv's to this node\n     CAmount minFeeFilter;\n     CCriticalSection cs_feeFilter;\n@@ -694,6 +694,12 @@ class CNode\n     const int nMyStartingHeight;\n     int nSendVersion;\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n+\n+    mutable CCriticalSection cs_addrName;\n+    std::string addrName;\n+\n+    CService addrLocal;\n+    mutable CCriticalSection cs_addrLocal;\n public:\n \n     NodeId GetId() const {\n@@ -727,6 +733,10 @@ class CNode\n     void SetSendVersion(int nVersionIn);\n     int GetSendVersion() const;\n \n+    CService GetAddrLocal() const;\n+    //! May not be called more than once\n+    void SetAddrLocal(const CService& addrLocalIn);\n+\n     CNode* AddRef()\n     {\n         nRefCount++;\n@@ -796,6 +806,10 @@ class CNode\n     {\n         return nLocalServices;\n     }\n+\n+    std::string GetAddrName() const;\n+    //! Sets the addrName only if it was not previously set\n+    void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n "
      },
      {
        "sha": "7d76aa0b4860ff34a098865e4d7a8a133df290e1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a06ede9a138d0fb86b0de17c42b936d9fe6e2158/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "patch": "@@ -36,7 +36,7 @@\n # error \"Bitcoin cannot be compiled without assertions.\"\n #endif\n \n-int64_t nTimeBestReceived = 0; // Used only to inform the wallet of when we last received a block\n+std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n \n struct IteratorComparator\n {\n@@ -264,7 +264,7 @@ void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n \n void InitializeNode(CNode *pnode, CConnman& connman) {\n     CAddress addr = pnode->addr;\n-    std::string addrName = pnode->addrName;\n+    std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();\n     {\n         LOCK(cs_main);\n@@ -1211,6 +1211,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         int nVersion;\n         int nSendVersion;\n         std::string strSubVer;\n+        std::string cleanSubVer;\n         int nStartingHeight = -1;\n         bool fRelay = true;\n \n@@ -1246,6 +1247,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             vRecv >> addrFrom >> nNonce;\n         if (!vRecv.empty()) {\n             vRecv >> LIMITED_STRING(strSubVer, MAX_SUBVERSION_LENGTH);\n+            cleanSubVer = SanitizeString(strSubVer);\n         }\n         if (!vRecv.empty()) {\n             vRecv >> nStartingHeight;\n@@ -1272,9 +1274,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n \n         pfrom->nServices = nServices;\n-        pfrom->addrLocal = addrMe;\n-        pfrom->strSubVer = strSubVer;\n-        pfrom->cleanSubVer = SanitizeString(strSubVer);\n+        pfrom->SetAddrLocal(addrMe);\n+        {\n+            LOCK(pfrom->cs_SubVer);\n+            pfrom->strSubVer = strSubVer;\n+            pfrom->cleanSubVer = cleanSubVer;\n+        }\n         pfrom->nStartingHeight = nStartingHeight;\n         pfrom->fClient = !(nServices & NODE_NETWORK);\n         {\n@@ -1310,7 +1315,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr, insecure_rand);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n-                    addr.SetIP(pfrom->addrLocal);\n+                    addr.SetIP(addrMe);\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom->PushAddress(addr, insecure_rand);\n                 }\n@@ -1330,7 +1335,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n \n         LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n-                  pfrom->cleanSubVer, pfrom->nVersion,\n+                  cleanSubVer, pfrom->nVersion,\n                   pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n                   remoteAddr);\n \n@@ -2450,7 +2455,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     if (pingUsecTime > 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom->nPingUsecTime = pingUsecTime;\n-                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime, pingUsecTime);\n+                        pfrom->nMinPingUsecTime = std::min(pfrom->nMinPingUsecTime.load(), pingUsecTime);\n                     } else {\n                         // This should never happen\n                         sProblem = \"Timing mishap\";"
      }
    ]
  },
  {
    "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTc4YzQxZTFlYzRmY2YyYzRkMDk2ZjA5YWYwMzVmOWU4YTdhZDgx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-11T07:46:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-11T07:46:10Z"
      },
      "message": "Merge #9736: Pre-0.14.0 hardcoded seeds update\n\na60677e Pre-0.14.0 hardcoded seeds update (Wladimir J. van der Laan)\nbfa9393 contrib/seeds: Update PATTERN_AGENT (Wladimir J. van der Laan)\n4dfac2c Update seeds tooling to Python 3 (Wladimir J. van der Laan)",
      "tree": {
        "sha": "7ea9ed145b65fd4428a6819d58effd98e77f7434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ea9ed145b65fd4428a6819d58effd98e77f7434"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYnsFCAAoJEHSBCwEjRsmmAWAH/3gdJ3nbFtakIYKlKbshgVfp\nhroGDmw4OjqKKqqjpbv57H8Wa3uC1s0BcqygM/2M/+k1/kX/WAQcPpK1xW7JV1IU\nQAjzvt111+rQgnT2Iyj/1hQ/2G01JdgSMxucxmWlcr9ARvz9IOIuSD3DNW7vjX97\nVvJ23+SANA1y2TbbU5MPIcAx3zjIsNHg25IunnGVhA8GaCFxWykWHFpkp4Jmoc0g\nJHkVFysRHD1Tlh9kTvNacO6sp8svSGwmigjh2K1aul6evpgQoWd2V5w8dZ7Ek90s\nINhQHov3P3b+hXiU5rJjJlBS+nnC/PkKOgRkjguRqBmoO0s0McSI59mceRzBfB4=\n=fj+w\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ea9ed145b65fd4428a6819d58effd98e77f7434\nparent a06ede9a138d0fb86b0de17c42b936d9fe6e2158\nparent a60677e394faf57968be57e44ece127c3bb6881f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1486799160 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1486799170 +0100\n\nMerge #9736: Pre-0.14.0 hardcoded seeds update\n\na60677e Pre-0.14.0 hardcoded seeds update (Wladimir J. van der Laan)\nbfa9393 contrib/seeds: Update PATTERN_AGENT (Wladimir J. van der Laan)\n4dfac2c Update seeds tooling to Python 3 (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a06ede9a138d0fb86b0de17c42b936d9fe6e2158",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a06ede9a138d0fb86b0de17c42b936d9fe6e2158"
      },
      {
        "sha": "a60677e394faf57968be57e44ece127c3bb6881f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a60677e394faf57968be57e44ece127c3bb6881f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a60677e394faf57968be57e44ece127c3bb6881f"
      }
    ],
    "stats": {
      "total": 3698,
      "additions": 2084,
      "deletions": 1614
    },
    "files": [
      {
        "sha": "afe902fd7f0630380a727270bcfe759fdbbd4dd5",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "patch": "@@ -1,11 +1,19 @@\n-### Seeds ###\n+# Seeds\n \n Utility to generate the seeds.txt list that is compiled into the client\n (see [src/chainparamsseeds.h](/src/chainparamsseeds.h) and other utilities in [contrib/seeds](/contrib/seeds)).\n \n+Be sure to update `PATTERN_AGENT` in `makeseeds.py` to include the current version,\n+and remove old versions as necessary.\n+\n The seeds compiled into the release are created from sipa's DNS seed data, like this:\n \n     curl -s http://bitcoin.sipa.be/seeds.txt > seeds_main.txt\n-    python makeseeds.py < seeds_main.txt > nodes_main.txt\n-    python generate-seeds.py . > ../../src/chainparamsseeds.h\n+    python3 makeseeds.py < seeds_main.txt > nodes_main.txt\n+    python3 generate-seeds.py . > ../../src/chainparamsseeds.h\n+\n+## Dependencies\n+\n+Ubuntu:\n \n+    sudo apt-get install python3-dnspython"
      },
      {
        "sha": "b0ac92ae0363902b9698ec169040d851bfb6a558",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2014 Wladimir J. van der Laan\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2017 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -31,7 +31,7 @@\n \n These should be pasted into `src/chainparamsseeds.h`.\n '''\n-from __future__ import print_function, division\n+\n from base64 import b32decode\n from binascii import a2b_hex\n import sys, os"
      },
      {
        "sha": "34f0f576716ed1f1c5bb166477f8df3174ee59f9",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "patch": "@@ -1,5 +1,5 @@\n-#!/usr/bin/env python\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n+#!/usr/bin/env python3\n+# Copyright (c) 2013-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -14,13 +14,13 @@\n \n # These are hosts that have been observed to be behaving strangely (e.g.\n # aggressively connecting to every node).\n-SUSPICIOUS_HOSTS = set([\n+SUSPICIOUS_HOSTS = {\n     \"130.211.129.106\", \"178.63.107.226\",\n     \"83.81.130.26\", \"88.198.17.7\", \"148.251.238.178\", \"176.9.46.6\",\n     \"54.173.72.127\", \"54.174.10.182\", \"54.183.64.54\", \"54.194.231.211\",\n     \"54.66.214.167\", \"54.66.220.137\", \"54.67.33.14\", \"54.77.251.214\",\n     \"54.94.195.96\", \"54.94.200.247\"\n-])\n+}\n \n import re\n import sys\n@@ -30,7 +30,7 @@\n PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$\")\n PATTERN_IPV6 = re.compile(r\"^\\[([0-9a-z:]+)\\]:(\\d+)$\")\n PATTERN_ONION = re.compile(r\"^([abcdefghijklmnopqrstuvwxyz234567]{16}\\.onion):(\\d+)$\")\n-PATTERN_AGENT = re.compile(r\"^(\\/Satoshi:0\\.8\\.6\\/|\\/Satoshi:0\\.9\\.(2|3|4|5)\\/|\\/Satoshi:0\\.10\\.\\d{1,2}\\/|\\/Satoshi:0\\.11\\.\\d{1,2}\\/)$\")\n+PATTERN_AGENT = re.compile(r\"^(/Satoshi:0.12.(0|1|99)/|/Satoshi:0.13.(0|1|2|99)/)$\")\n \n def parseline(line):\n     sline = line.split()\n@@ -104,7 +104,7 @@ def filtermultiport(ips):\n     hist = collections.defaultdict(list)\n     for ip in ips:\n         hist[ip['sortkey']].append(ip)\n-    return [value[0] for (key,value) in hist.items() if len(value)==1]\n+    return [value[0] for (key,value) in list(hist.items()) if len(value)==1]\n \n # Based on Greg Maxwell's seed_filter.py\n def filterbyasn(ips, max_per_asn, max_total):\n@@ -164,9 +164,9 @@ def main():\n \n     for ip in ips:\n         if ip['net'] == 'ipv6':\n-            print '[%s]:%i' % (ip['ip'], ip['port'])\n+            print('[%s]:%i' % (ip['ip'], ip['port']))\n         else:\n-            print '%s:%i' % (ip['ip'], ip['port'])\n+            print('%s:%i' % (ip['ip'], ip['port']))\n \n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "0451771daed4597c0a7b76e4a8a78fd603ee2a1b",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 1031,
        "deletions": 800,
        "changes": 1831,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "patch": "@@ -1,937 +1,1168 @@\n-5.2.145.201:8333\n-5.22.142.214:8333\n-5.53.172.197:8333\n-5.189.161.164:8333\n-5.230.140.166:8333\n-5.231.3.130:8333\n-5.255.80.103:8333\n-14.202.230.49:8333\n-18.85.11.130:8333\n-23.91.97.25:8333\n-23.94.100.122:8333\n-23.95.99.132:8333\n-24.115.8.206:8333\n-24.127.128.191:8333\n-24.154.178.25:8333\n-24.207.103.43:8333\n-24.207.104.105:8333\n-24.210.230.150:8333\n-24.224.18.84:8333\n-24.246.168.106:8333\n-27.254.64.47:8333\n-31.6.71.123:8333\n-31.6.71.124:8333\n-31.14.134.13:8333\n-31.30.36.220:8333\n-31.164.6.104:8333\n+2.7.8.12:8333\n+2.228.70.198:8333\n+5.39.64.7:8333\n+5.45.80.34:38333\n+5.51.160.38:8333\n+5.61.33.33:8333\n+5.61.37.12:8333\n+5.95.80.47:8333\n+5.102.164.173:8333\n+5.175.71.130:8333\n+5.189.165.22:8333\n+5.199.130.228:8333\n+5.228.100.222:8333\n+5.255.64.231:8333\n+13.93.6.133:8333\n+18.85.34.10:8333\n+18.241.0.63:8333\n+23.28.128.65:8333\n+23.248.113.52:8333\n+23.253.151.73:8333\n+24.4.96.121:8333\n+24.69.65.191:8333\n+24.87.8.43:8333\n+24.150.224.110:8333\n+24.227.69.146:8333\n+27.0.235.33:8333\n 31.170.106.203:8333\n-31.185.134.201:8333\n-31.204.128.99:8333\n-31.204.128.219:8333\n-37.1.219.88:8333\n-37.97.132.109:8333\n-37.120.160.55:8333\n+31.184.197.96:8333\n+31.214.240.56:8333\n+37.1.202.134:8333\n+37.18.74.232:8333\n+37.34.48.17:8333\n+37.48.64.140:8333\n+37.97.141.116:8333\n+37.120.164.16:8333\n 37.120.169.123:8333\n-37.139.32.46:8333\n-37.221.163.218:8333\n-38.130.192.72:8333\n-41.75.96.80:8333\n-45.3.0.49:8333\n-45.33.72.185:8333\n-45.33.96.129:8333\n-45.56.4.63:8333\n-45.79.0.127:8333\n-45.79.80.102:8333\n-45.79.97.30:8333\n-45.79.132.219:8333\n-46.21.97.135:8333\n-46.28.205.67:8333\n-46.28.206.188:8333\n-46.29.20.209:8333\n-46.50.234.179:8333\n-46.101.160.168:8333\n-46.166.161.35:8333\n-46.166.161.103:8333\n-46.182.132.100:8333\n-46.218.227.92:8333\n-46.226.109.20:8333\n-46.227.66.132:8333\n-46.227.66.138:8333\n-46.229.165.154:8333\n-46.229.165.155:8333\n+37.143.9.128:8333\n+37.153.172.227:8333\n+37.193.227.16:8333\n+37.205.8.78:8333\n+37.220.0.114:8333\n+37.232.218.199:8333\n+38.140.161.53:8333\n+40.87.70.120:8333\n+41.162.163.93:8333\n+42.2.198.48:8333\n+45.20.67.1:8333\n+45.55.197.77:8333\n+45.56.97.63:8333\n+45.58.38.162:8333\n+45.63.1.33:8333\n+45.79.2.70:8333\n+46.16.240.98:8333\n+46.19.137.74:8333\n+46.28.206.146:8333\n+46.32.252.197:8333\n+46.59.13.59:8333\n+46.59.39.195:8333\n+46.148.16.210:8333\n+46.160.195.121:8333\n+46.166.142.21:8333\n+46.166.160.29:8330\n+46.188.44.20:8333\n 46.229.238.187:8333\n-46.234.104.48:8333\n-46.239.107.74:8333\n-46.244.0.138:8333\n-46.254.72.195:8333\n-50.5.13.44:8333\n-50.7.37.114:8333\n-50.30.37.103:8333\n-50.39.105.60:8333\n-50.106.40.231:8333\n-52.29.0.37:8333\n-52.76.192.246:8333\n-54.152.192.179:8333\n-54.169.64.174:8333\n-54.175.160.22:8333\n-54.199.128.0:8333\n-58.96.171.129:8333\n-58.161.238.57:8333\n-60.251.195.221:8333\n-61.35.225.19:8333\n+46.231.16.149:8333\n+47.88.100.130:8333\n+47.89.192.134:8333\n+47.185.194.160:8333\n+47.189.129.218:8333\n+49.65.2.140:8333\n+50.3.72.129:8333\n+50.31.99.225:8333\n+51.175.33.95:8333\n+52.1.165.219:8333\n+52.10.170.186:8333\n+52.51.128.216:8333\n+54.197.130.244:8333\n+58.59.2.22:8333\n+58.84.6.81:8333\n+59.125.8.143:8333\n+59.167.130.139:8333\n+61.47.2.20:8333\n 62.43.130.178:8333\n-62.65.39.12:8333\n+62.76.96.6:8333\n 62.107.200.30:8333\n+62.133.15.58:8333\n 62.133.194.2:8333\n-62.181.238.186:8333\n-62.183.22.50:8333\n-62.210.85.120:8333\n-62.210.162.89:8333\n+62.133.194.156:8333\n+62.138.1.95:8333\n+62.216.238.3:8333\n 62.238.34.125:8333\n-64.25.171.73:8333\n-64.27.166.30:8333\n-64.53.137.101:8333\n-64.71.72.44:8333\n+63.137.40.207:8333\n+63.231.96.109:8333\n+64.78.240.150:8333\n 64.83.225.146:8333\n-64.121.3.163:8333\n-64.203.102.86:8333\n-65.94.131.59:8333\n-65.188.136.233:8333\n-66.11.162.218:8333\n-66.23.228.133:8333\n-66.90.137.89:8333\n-66.114.33.49:8333\n-66.150.105.77:8333\n+64.137.236.68:8833\n+64.156.193.120:8333\n+66.79.160.82:8333\n+66.91.230.231:8333\n+66.135.128.121:8333\n 66.172.10.4:8333\n 66.194.38.250:8333\n 66.194.38.253:8333\n-66.194.38.254:8333\n-66.231.97.172:8333\n+66.215.34.26:8333\n 66.240.237.155:8333\n-67.159.13.34:8333\n-67.205.74.206:8333\n+67.205.96.108:8333\n+67.205.128.5:8333\n+67.219.233.140:8333\n 67.221.193.55:8333\n-67.227.72.17:8333\n-68.65.120.53:8333\n-68.65.205.226:9000\n-68.144.4.34:8333\n-69.39.49.199:8333\n+68.100.196.118:8333\n+68.132.193.222:8333\n+68.168.118.234:8333\n+69.11.97.43:8333\n+69.30.229.10:8333\n 69.50.171.205:8333\n-69.65.41.21:8333\n-69.113.98.61:8333\n-69.119.97.39:8333\n-69.146.70.124:8333\n-69.193.71.2:8333\n-70.46.10.237:8333\n-70.80.200.187:8333\n-70.185.97.117:8333\n-71.254.160.25:8333\n-72.28.203.5:8333\n-72.52.130.110:8333\n-72.83.194.122:8333\n-72.128.32.167:8333\n-72.179.136.80:8333\n-72.235.38.70:8333\n-74.50.44.193:8333\n-74.72.60.83:8333\n-74.80.234.116:8333\n-74.207.233.193:8333\n-75.112.233.128:8333\n-75.118.166.197:8333\n-75.140.0.241:8333\n-75.159.240.66:8333\n-75.174.5.26:8333\n-76.72.160.252:8333\n-76.72.160.254:8333\n-76.74.170.112:8333\n-76.79.201.54:8333\n-76.175.166.164:8333\n-76.179.105.27:8333\n-77.68.37.200:8333\n-77.234.49.196:8333\n-77.247.229.93:8333\n-78.24.72.78:8333\n-78.47.32.147:8333\n-78.84.100.95:8333\n-78.121.69.23:8333\n-78.129.167.5:8333\n-78.193.96.155:8333\n-79.19.37.179:8333\n+69.125.193.145:8333\n+69.162.139.125:8333\n+70.35.98.39:8333\n+70.112.32.29:8333\n+71.126.181.146:8333\n+72.180.32.105:8333\n+73.226.64.145:8333\n+74.83.140.242:8333\n+74.84.128.158:9333\n+74.122.237.124:8333\n+74.215.133.145:8333\n+75.76.101.169:8333\n+75.85.13.8:8333\n+75.86.168.13:8333\n+75.170.97.25:8333\n+75.177.137.134:8333\n+76.76.227.136:8333\n+77.53.136.6:8333\n+77.110.11.52:8333\n+78.25.32.206:8333\n+78.34.8.120:8333\n+78.46.32.99:8333\n+78.56.9.214:8333\n+78.56.229.177:8333\n+78.129.237.245:8333\n+78.196.172.45:8333\n 79.132.230.144:8333\n-79.133.43.63:8333\n-79.134.201.66:8333\n 79.169.35.235:8333\n-80.57.227.14:8333\n+79.172.194.219:8333\n 80.64.65.87:8333\n-80.86.92.70:8333\n-80.100.203.151:8333\n-80.101.32.121:8333\n-80.161.178.73:8333\n-80.240.129.170:8333\n-81.7.11.50:8333\n-81.7.11.55:8333\n-81.17.17.40:9333\n-81.30.39.83:8333\n-81.90.36.7:9444\n-81.136.224.77:8333\n-81.162.231.211:8333\n-81.184.0.143:8333\n-81.198.128.86:8333\n+80.89.137.115:8333\n+80.93.36.173:8333\n+80.101.167.100:8333\n+80.114.34.158:8333\n+80.127.136.50:8333\n+80.188.139.82:8333\n+80.222.39.77:8333\n+80.223.105.69:8333\n+80.229.151.187:8333\n+80.240.129.221:8333\n+81.7.10.238:8333\n+81.7.13.84:8333\n+81.27.96.92:8333\n+81.35.143.98:8333\n+81.82.201.5:8333\n+81.83.96.5:8333\n+81.169.227.36:8333\n+81.171.2.119:8333\n+81.171.38.130:8333\n+81.175.255.118:8333\n+81.207.8.49:8333\n+81.228.194.187:8333\n+82.9.1.77:8333\n 82.11.33.229:8333\n-82.79.128.134:8333\n-82.118.233.111:8333\n-82.135.139.30:8333\n+82.102.13.117:8333\n+82.116.203.240:8333\n+82.130.103.16:8333\n+82.136.65.227:8333\n+82.158.227.238:8333\n+82.197.212.25:8333\n 82.199.102.10:8333\n-82.221.106.17:8333\n-82.221.108.21:8333\n+82.200.204.41:8333\n+82.200.204.119:8333\n+82.221.105.223:8333\n 82.221.108.27:8333\n-83.137.41.3:8333\n-83.142.197.168:8333\n+82.221.111.136:8333\n+82.221.139.97:8333\n+83.137.41.10:8333\n 83.143.130.19:8333\n 83.150.9.196:8333\n-83.183.17.191:8333\n-83.227.173.83:8333\n-83.230.5.15:8333\n-83.233.105.151:443\n-83.246.75.8:8333\n-83.250.133.158:8333\n-83.255.66.118:8334\n-84.24.69.59:8333\n+83.169.2.43:8333\n+83.217.203.130:8333\n+83.249.88.52:8333\n+84.26.162.92:8333\n 84.42.193.6:8333\n-84.45.98.87:8333\n-84.54.128.11:8333\n-84.212.200.24:8333\n-84.215.198.109:8333\n-84.230.4.177:8333\n-85.95.228.83:8333\n-85.95.228.123:8333\n-85.114.128.134:8333\n-85.214.66.168:8333\n-85.214.147.162:8333\n-85.243.168.4:8333\n-86.1.0.18:8333\n-87.79.77.106:8333\n-87.91.156.110:8333\n-87.236.196.222:8333\n-88.85.75.152:8333\n-88.87.1.230:8333\n-88.87.92.102:8333\n-88.89.69.202:8333\n-88.97.72.229:8333\n-88.164.117.99:8333\n-88.198.32.131:8333\n+84.134.194.115:8333\n+84.201.32.115:8333\n+84.212.232.71:8333\n+84.238.140.176:8333\n+85.10.104.34:8333\n+85.21.144.226:8333\n+85.25.194.12:8333\n+85.144.79.190:8333\n+85.145.228.192:8333\n+85.194.238.130:8333\n+85.228.201.80:8333\n+85.229.228.174:8333\n+85.236.233.87:8333\n+86.80.204.185:8333\n+86.105.227.190:8333\n+86.135.39.40:8333\n+87.106.139.127:8333\n+87.120.8.5:8333\n+87.120.37.230:8333\n+87.239.101.102:8333\n+87.243.197.82:8333\n+88.112.112.173:8333\n+88.150.192.17:8333\n+88.185.155.134:8333\n+88.202.202.221:8333\n 88.202.230.87:8333\n-88.214.193.154:8343\n-88.214.194.226:8343\n-89.10.155.88:8333\n-89.46.101.44:8333\n-89.163.224.212:8333\n-89.174.248.20:8333\n-89.202.231.198:8333\n-89.212.75.6:8333\n+88.208.39.182:8333\n+89.34.99.41:8333\n+89.163.224.187:8333\n+89.169.233.150:8333\n+89.184.65.85:8333\n+89.212.91.219:8333\n+89.249.178.36:8333\n 90.149.38.172:8333\n-90.169.106.139:8333\n-91.64.101.150:8333\n-91.65.196.179:8333\n-91.121.80.17:8333\n-91.126.77.77:8333\n-91.145.76.156:8333\n-91.152.150.35:8333\n-91.192.137.17:8333\n-91.196.170.110:8333\n+91.65.97.157:8333\n+91.107.64.143:8333\n+91.114.35.107:8333\n+91.135.0.187:8333\n+91.145.110.95:8333\n+91.157.38.151:8333\n 91.197.44.133:8333\n-91.207.68.144:8333\n-91.210.105.28:8333\n-91.211.102.101:8333\n-91.211.106.34:8333\n-91.214.200.205:8333\n-91.220.43.146:8333\n-91.222.71.89:8333\n-91.224.140.242:8333\n-91.229.76.14:8333\n+91.205.176.54:8333\n+91.206.203.10:8333\n+91.206.203.18:8333\n+91.215.35.130:8333\n+91.219.239.159:8333\n+91.223.133.2:8333\n+91.223.133.40:8333\n+91.226.10.90:8333\n+91.240.141.169:8333\n 92.27.7.209:8333\n-92.51.167.88:8333\n-92.247.229.163:8333\n-93.84.114.106:8333\n-93.113.36.172:8333\n+92.89.67.207:8333\n+92.221.201.138:8333\n+93.95.187.122:8333\n+93.103.73.187:8333\n+93.123.80.47:8333\n 93.188.224.253:8333\n-94.75.239.69:8333\n-94.190.227.112:8333\n-94.214.2.74:8333\n-94.224.162.65:8333\n-94.236.198.253:8333\n+93.190.69.242:8333\n+94.19.12.244:8333\n+94.156.128.116:8333\n+94.177.171.73:8333\n+94.181.44.104:8333\n+94.237.26.173:8333\n 94.242.229.158:8333\n-95.84.138.99:8333\n-95.95.168.87:8333\n+94.255.128.98:8333\n+95.79.35.50:8333\n+95.91.41.39:8333\n 95.110.234.93:8333\n-95.130.9.200:8333\n-95.165.168.168:8333\n-95.170.235.254:8333\n-95.211.130.154:8333\n-96.46.68.104:8333\n-96.127.202.148:8333\n-97.76.171.35:8333\n-98.160.160.67:8333\n-99.126.197.187:8333\n-99.198.173.1:8333\n-101.100.174.138:8333\n-101.164.201.208:8333\n-103.224.165.48:8333\n-104.128.225.223:8333\n+95.128.48.209:8333\n+95.183.48.71:8333\n+96.23.67.85:8333\n+97.64.177.10:8333\n+97.104.201.95:8333\n+98.29.197.149:8333\n+98.169.2.107:8333\n+99.232.48.72:8333\n+101.100.141.55:8333\n+103.7.32.40:8333\n+103.53.225.69:8333\n+103.249.106.74:8333\n+104.128.224.13:8333\n 104.128.228.252:8333\n-104.131.192.94:8333\n-104.155.45.201:8334\n-104.194.28.195:8663\n-104.211.1.27:8333\n-104.221.38.177:8333\n-104.236.9.79:8333\n-104.236.129.178:8333\n-104.236.186.249:8333\n-104.236.194.15:8333\n-104.238.128.214:8333\n+104.155.1.158:8333\n+104.168.128.50:8333\n+104.199.160.228:8333\n+104.204.109.11:8333\n+104.219.251.118:8333\n+104.223.3.129:8333\n+104.223.3.219:8333\n 104.238.130.182:8333\n-106.38.234.84:8333\n-106.185.36.204:8333\n-106.185.38.67:8333\n-107.6.4.145:8333\n-107.150.2.6:8333\n-107.150.40.234:8333\n-107.170.13.184:8333\n-107.181.250.216:8333\n-107.191.101.111:8333\n-107.191.106.115:8333\n+104.245.99.227:8333\n+106.38.234.89:8333\n+106.104.134.218:8333\n+107.136.6.71:8333\n+107.150.45.210:8333\n+107.151.144.103:8333\n+107.170.44.99:8333\n+107.181.137.133:8333\n+107.191.102.13:8333\n+108.58.252.82:8333\n+108.59.9.167:8333\n 108.59.12.163:8333\n-108.161.129.247:8333\n-109.193.160.140:8333\n-109.197.13.54:8333\n-109.230.7.248:8333\n-109.234.106.191:8333\n-109.236.137.80:8333\n-109.251.161.121:8333\n-112.65.231.226:8333\n-115.70.166.57:8333\n-115.159.42.80:8333\n-117.18.73.34:8333\n-118.67.201.40:8333\n-118.100.86.246:8333\n-118.110.104.152:8333\n-119.224.64.141:8333\n+108.162.106.215:8333\n+108.168.133.164:8333\n+108.173.202.101:8333\n+108.180.110.190:8333\n+109.29.75.40:8333\n+109.120.194.136:8333\n+109.230.230.88:8333\n+109.235.67.115:8333\n+109.235.69.120:8333\n+109.236.90.199:8333\n+109.255.0.107:8333\n+110.10.130.12:8333\n+110.10.176.94:8333\n+110.132.172.251:8333\n+111.90.158.17:8333\n+115.66.205.171:8333\n+116.31.123.139:8333\n+118.192.48.46:8333\n+118.193.164.98:8333\n+119.29.156.231:8333\n+119.63.44.133:19980\n+119.81.99.27:8333\n+119.106.12.169:8333\n+119.147.137.155:19980\n+119.185.1.182:8333\n 120.55.193.136:8333\n-122.106.169.178:8333\n-123.203.174.15:8333\n-123.255.232.94:8333\n-124.148.165.165:8333\n-124.232.141.31:8333\n-128.30.92.69:8333\n-128.39.141.182:8333\n-128.84.167.20:8333\n-128.111.73.10:8333\n-128.127.38.195:8333\n+121.254.173.23:8333\n+121.254.173.40:8333\n+123.56.129.45:8333\n+123.203.163.128:8333\n+123.206.32.198:8333\n+124.189.160.221:8333\n+124.189.192.232:8333\n 128.140.224.162:8333\n-128.199.101.104:8333\n-128.233.224.35:8333\n-128.253.3.193:20020\n-130.180.228.138:8333\n-130.185.144.213:8333\n-130.255.73.207:8333\n-133.218.233.11:8333\n-134.249.128.23:8333\n-136.159.234.234:8333\n-137.116.160.176:8333\n-139.162.2.145:8333\n-139.162.23.117:8333\n-141.134.69.253:8333\n-141.255.162.215:8333\n-144.122.163.187:8333\n-145.131.3.54:8333\n-145.255.4.94:8333\n-146.0.32.101:8337\n-147.83.72.91:8333\n-148.103.28.68:8333\n-149.5.32.102:8333\n-149.210.164.195:8333\n-150.101.163.241:8333\n-151.236.11.189:8333\n-152.3.136.56:8333\n-154.20.208.25:8333\n-158.181.104.149:8333\n-159.253.96.226:8333\n-160.36.130.180:8333\n+128.199.68.205:8333\n+130.234.207.115:8333\n+131.113.41.123:8333\n+131.114.72.104:8333\n+132.204.108.155:8333\n+134.119.13.230:8333\n+134.213.133.206:8333\n+134.213.133.207:8333\n+135.23.5.3:8333\n+137.74.0.66:8333\n+138.68.1.45:8333\n+138.68.2.194:8333\n+138.68.64.19:8333\n+138.68.64.28:8333\n+139.59.42.248:8333\n+139.220.240.153:8333\n+140.112.107.118:8333\n+140.186.224.112:8333\n+141.52.64.141:8333\n+142.68.237.107:8333\n+142.217.12.106:8333\n+146.60.204.92:8333\n+146.185.161.209:8333\n+148.103.7.119:8333\n+149.210.133.244:8333\n+150.229.0.143:8333\n+151.231.238.25:8333\n+151.248.160.227:8333\n+153.230.228.15:8333\n+155.133.43.249:8333\n+158.58.238.145:8333\n+158.109.79.13:34821\n+159.203.70.208:8333\n+160.16.206.31:8333\n 162.209.1.233:8333\n 162.209.4.125:8333\n-162.209.106.123:8333\n-162.210.198.184:8333\n-162.248.99.164:53011\n+162.216.192.231:8333\n+162.243.100.111:8333\n+162.246.11.194:8333\n 162.248.102.117:8333\n-162.251.108.53:8333\n-163.44.2.48:8333\n-163.158.36.17:8333\n-166.230.71.67:8333\n-167.160.36.62:8333\n-167.160.169.92:8333\n-168.93.129.220:8333\n-169.55.99.84:8333\n-169.228.66.43:8333\n-172.9.169.242:8333\n-173.32.11.194:8333\n-173.230.228.136:8333\n-173.246.107.34:8333\n-173.254.235.34:8333\n-174.0.128.222:8333\n-174.25.130.148:8333\n-174.50.64.101:8333\n-175.140.232.141:8333\n-176.36.37.62:8333\n-176.46.9.96:8333\n-176.124.110.27:8333\n-177.39.16.102:8333\n-178.17.173.2:8333\n-178.62.5.248:8333\n-178.62.70.16:8333\n+162.252.46.83:8333\n+163.172.33.78:8333\n+163.172.194.30:8333\n+169.229.198.106:8333\n+170.75.195.168:8333\n+172.103.205.197:8333\n+172.245.225.126:8333\n+173.179.37.8:8333\n+173.208.203.74:8333\n+173.252.46.16:8333\n+174.117.141.124:8333\n+175.126.38.158:8333\n+175.126.38.177:8333\n+175.139.106.119:8333\n+175.140.232.66:8333\n+176.9.117.100:8333\n+176.36.33.121:8333\n+176.36.99.222:8333\n+176.56.227.36:8333\n+176.100.100.206:8333\n+176.106.144.183:8333\n+176.123.7.148:8333\n+176.126.167.10:8333\n+176.223.201.198:8333\n+178.62.68.62:8333\n+178.62.102.56:8333\n 178.62.203.185:8333\n-178.79.160.118:8333\n-178.169.206.244:8333\n-178.193.234.62:8333\n-178.199.96.108:8333\n-178.254.18.96:8333\n+178.124.197.101:8333\n+178.170.138.202:8333\n+178.175.129.18:8333\n+178.188.47.62:8333\n+178.199.240.22:8333\n+178.218.209.162:8333\n+178.237.35.34:8333\n+178.238.224.242:8333\n+178.254.34.144:8333\n 178.254.34.161:8333\n-178.255.41.123:8333\n-180.210.34.58:9801\n-182.92.226.212:8333\n-182.171.246.142:8333\n-184.23.8.9:8333\n-184.58.162.35:8333\n-184.154.9.170:8333\n-185.8.238.165:8333\n+179.43.183.2:8333\n+180.200.128.58:8333\n+182.93.34.130:8333\n+185.8.238.197:8333\n+185.11.139.172:8333\n 185.24.97.11:8333\n-185.31.137.139:8333\n-185.38.44.64:8333\n-185.53.128.180:8333\n-185.53.129.244:8333\n-185.77.129.119:8333\n-185.77.129.156:8333\n-185.82.203.92:8333\n-188.20.97.18:8333\n-188.126.8.14:8333\n-188.138.33.239:8333\n-188.155.136.70:8333\n+185.24.233.100:8333\n+185.25.48.71:8333\n+185.25.48.114:8333\n+185.28.76.179:8333\n+185.70.105.152:8339\n+185.77.128.69:8333\n+185.77.128.241:8333\n+185.86.79.87:8333\n+185.89.102.2:3333\n+185.89.102.53:3333\n+185.109.144.155:8333\n+185.117.75.50:8333\n+185.121.173.223:8333\n+185.128.41.157:8333\n+185.130.226.106:8333\n+185.145.130.76:8333\n+188.63.192.104:8333\n+188.113.164.231:8333\n 188.166.229.112:8333\n-188.182.108.129:8333\n-188.226.225.174:8010\n-188.242.171.8:8333\n-188.243.4.139:8333\n-190.10.9.234:8333\n-190.10.10.147:8333\n+188.214.128.77:8333\n+190.10.8.211:8333\n 190.81.160.184:8333\n-190.85.201.37:8333\n-192.34.227.230:8333\n-192.77.189.200:8333\n-192.124.224.7:8333\n-192.146.137.1:8333\n-192.203.228.71:8333\n-192.206.202.20:8333\n-193.0.109.3:8333\n-193.41.229.130:8333\n-193.41.229.156:8333\n+190.111.231.19:8333\n+192.131.44.93:8333\n+192.206.202.6:8333\n+192.227.245.133:8333\n+192.241.74.123:8333\n+192.241.74.126:8333\n+192.254.71.222:8333\n+193.10.64.85:8333\n+193.46.80.101:8333\n 193.49.43.219:8333\n-193.147.71.120:8333\n-193.179.65.233:8333\n+193.93.79.215:8333\n 193.183.99.46:8333\n-193.192.37.135:8333\n 193.234.224.195:8333\n-194.58.108.213:8333\n-194.187.96.2:8333\n-194.255.31.59:8333\n-195.36.6.101:8333\n-195.58.238.243:8333\n-195.197.175.190:8333\n-195.239.1.66:8333\n-198.48.196.230:8333\n-198.50.192.160:8333\n-198.57.210.27:8333\n-198.84.195.179:8333\n-198.167.140.8:8333\n+193.239.80.155:8333\n+194.63.140.208:8333\n+194.87.1.232:8333\n+194.187.227.18:8333\n+194.247.12.136:8333\n+195.91.176.86:8333\n+196.28.98.20:8333\n+198.44.249.35:8333\n+198.84.172.252:8333\n 198.204.224.106:8333\n-199.127.226.245:8333\n-199.201.110.8:8333\n-199.233.234.90:8333\n+198.211.97.46:8333\n+199.66.64.198:8333\n+199.101.100.58:8333\n+199.101.100.59:8333\n+199.127.224.50:8333\n+200.46.241.71:8333\n 200.116.98.185:8333\n-202.60.70.18:8333\n-203.151.140.14:8333\n-204.112.203.52:8333\n+203.9.225.13:8333\n+203.177.142.37:8333\n 205.200.247.149:8333\n-207.226.141.253:8333\n-207.255.42.202:8333\n-208.53.164.19:8333\n-208.66.68.127:8333\n-208.66.68.130:8333\n-208.71.171.232:8341\n-208.76.200.200:8333\n-208.82.98.189:8333\n-208.85.193.31:8333\n-208.111.48.41:8333\n-208.111.48.45:8333\n-209.34.232.72:8333\n-209.81.9.223:8333\n-209.90.224.2:8333\n+205.209.131.150:13838\n+206.53.64.74:8333\n+206.72.192.69:8333\n+206.123.112.180:8333\n+208.66.208.153:8333\n+208.68.174.76:8333\n+208.107.97.242:8333\n+208.111.48.132:8333\n+208.118.235.190:8333\n+209.6.205.126:8333\n+209.40.96.121:8333\n+209.58.130.137:8333\n+209.73.142.226:8333\n 209.90.224.4:8333\n-209.126.98.174:8333\n-209.136.72.69:8333\n-209.195.4.74:8333\n-209.197.13.62:8333\n-211.72.227.8:8333\n-212.51.144.42:8333\n-212.71.233.127:8333\n-212.126.14.122:8333\n-212.159.44.50:8333\n-213.5.36.58:8333\n-213.57.33.10:8333\n-213.66.205.194:8333\n-213.136.73.125:8333\n-213.155.3.216:8333\n-213.155.7.24:8333\n-213.167.17.6:8333\n-213.223.138.13:8333\n-216.15.78.182:8333\n-216.38.129.164:8333\n-216.48.168.8:8333\n-216.169.141.169:8333\n-216.245.206.181:8333\n-216.249.204.161:8333\n-216.250.138.230:8333\n+209.126.69.243:8333\n+209.126.108.91:8333\n+209.195.4.18:8333\n+209.250.6.190:8333\n+210.54.37.225:8333\n+210.223.3.44:8333\n+211.149.234.109:8333\n+212.51.140.183:8333\n+212.90.179.206:8333\n+212.93.226.90:8333\n+212.110.171.118:8333\n+212.202.132.17:8333\n+213.91.205.134:8333\n+213.165.68.218:8333\n+213.196.200.213:8333\n+216.59.4.212:8333\n+216.74.32.109:8333\n+216.158.225.70:8333\n+216.164.138.13:8333\n+216.167.236.247:8333\n+216.197.79.74:8333\n 217.11.225.189:8333\n-217.12.34.158:8333\n-217.12.202.33:8333\n-217.20.171.43:8333\n-217.23.1.126:8333\n-217.23.11.138:8333\n+217.12.199.207:8333\n+217.20.130.72:8333\n+217.23.6.148:8333\n+217.23.140.103:8333\n+217.28.96.180:8333\n+217.35.130.42:8333\n 217.111.66.79:8333\n-217.155.202.191:8333\n 217.158.9.102:8333\n-217.172.32.18:20993\n-220.245.196.37:8333\n-[2001:1291:2bf:1::100]:8333\n+217.168.143.169:8333\n+217.209.32.219:8333\n+218.161.33.165:8333\n+221.121.144.138:8333\n+[2001:0:4137:9e76:2048:3a84:bb91:e846]:8333\n+[2001:0:4137:9e76:2066:e9e:b489:f8b8]:8333\n+[2001:0:4137:9e76:3854:1211:b5ac:a96b]:8333\n+[2001:0:4137:9e76:4e3:1f66:cd4c:829f]:8333\n+[2001:0:4137:9e76:ad:1f4:9ea9:fa2e]:8333\n+[2001:0:4137:9e76:e5:baa:b66f:f418]:8333\n+[2001:0:53aa:64c:20a2:59c4:ad22:93ea]:8333\n+[2001:0:53aa:64c:59:617f:a10d:e0]:8333\n+[2001:0:5ef5:79fb:200f:3ae5:3cbc:74c9]:8333\n+[2001:0:5ef5:79fb:38f2:13b4:b208:5604]:8333\n+[2001:0:5ef5:79fd:200b:22a7:cc50:f52d]:8333\n+[2001:0:5ef5:79fd:24ef:1aef:a994:303d]:8333\n+[2001:0:5ef5:79fd:24fc:b5d:ad4f:4db2]:8333\n+[2001:0:5ef5:79fd:28bf:2d23:e02e:c3ef]:8333\n+[2001:0:5ef5:79fd:3cd0:3c2e:da44:a759]:8333\n+[2001:0:5ef5:79fd:87e:fd7:b1c2:1b4]:8333\n+[2001:0:9d38:6ab8:18db:3bda:ab90:e81e]:8333\n+[2001:0:9d38:6ab8:4e7:1660:862f:a6d7]:8333\n+[2001:0:9d38:6ab8:6:2b:5074:9588]:8333\n+[2001:0:9d38:6abd:10f8:a7d7:bb90:f524]:8333\n+[2001:13d8:1c01:1000::11]:8333\n+[2001:15c0:65ff:610::2]:8333\n+[2001:1608:10:156:ae::4adb]:8333\n+[2001:1620:b1b:8888:20d:b9ff:fe41:6710]:8333\n+[2001:1620:b1b:face:20d:b9ff:fe41:6710]:8333\n [2001:1620:f00:282::2]:8333\n [2001:1620:f00:8282::1]:8333\n-[2001:19f0:5000:8de8:5400:ff:fe12:55e4]:8333\n-[2001:19f0:6c00:9103:5400:ff:fe10:a8d3]:8333\n-[2001:1b60:3:172:142b:6dff:fe7a:117]:8333\n-[2001:410:a000:4050:8463:90b0:fffb:4e58]:8333\n+[2001:1680:101:1ae::1]:8333\n+[2001:16d8:ff00:85de:20c:29ff:fe52:9594]:8333\n+[2001:19f0:4400:434d:5400:ff:fe42:2678]:8333\n+[2001:19f0:5000:8c8b:5400:ff:fe1f:c023]:8333\n+[2001:19f0:5000:8ce6:5400:ff:fe1b:24a9]:8333\n+[2001:19f0:5:314:5400:ff:fe2c:42e8]:8333\n+[2001:19f0:5:51b:5400:ff:fe49:fe5b]:8333\n+[2001:19f0:5:bc:5400:ff:fe3b:9339]:8333\n+[2001:1af8:4020:a020:5::]:8333\n+[2001:1bc8:1a0:590e:2e0:f4ff:fe16:3a39]:8333\n+[2001:1c04:1401:8f00:f4fe:4fff:fe0c:df40]:8333\n+[2001:4128:6135:10:20c:29ff:fe69:9e81]:8333\n [2001:4128:6135:2010:21e:bff:fee8:a3c0]:8333\n-[2001:41d0:1008:761::17c]:8333\n+[2001:4128:6135:e001:5054:ff:fe37:e9eb]:8333\n+[2001:41d0:1000:1024::]:8333\n+[2001:41d0:1000:1433::]:8333\n+[2001:41d0:1004:22ae::]:8333\n+[2001:41d0:1004:2996::]:8333\n+[2001:41d0:1008:11e0::1a5c:6d9d]:8333\n+[2001:41d0:1008:11e0::b74:baf7]:8333\n+[2001:41d0:1008:237a::]:8333\n+[2001:41d0:1008:2752::]:8333\n+[2001:41d0:1008:494::]:8333\n [2001:41d0:1:45d8::1]:8333\n-[2001:41d0:1:6cd3::]:8333\n+[2001:41d0:1:5630::1]:8333\n+[2001:41d0:1:6f57::1]:8333\n+[2001:41d0:1:801e::1]:8333\n+[2001:41d0:1:8852::1]:8333\n [2001:41d0:1:8b26::1]:8333\n-[2001:41d0:1:afda::]:8200\n+[2001:41d0:1:a5b8::1]:8333\n [2001:41d0:1:b26b::1]:8333\n [2001:41d0:1:c139::1]:8333\n [2001:41d0:1:c8d7::1]:8333\n-[2001:41d0:1:f59f::33]:8333\n-[2001:41d0:1:f7cc::1]:8333\n-[2001:41d0:2:1021::1]:8333\n-[2001:41d0:2:37c3::]:8200\n-[2001:41d0:2:4797:2323:2323:2323:2323]:8333\n-[2001:41d0:2:53df::]:8333\n+[2001:41d0:1:d227::]:8333\n+[2001:41d0:1:dbc4::1]:8333\n+[2001:41d0:1:dc5d::1]:8333\n+[2001:41d0:1:e13b::1]:8333\n+[2001:41d0:1:ef5b::1]:8333\n+[2001:41d0:2:16be::1]:8333\n+[2001:41d0:2:203c::1]:8333\n+[2001:41d0:2:38c5::1]:8333\n+[2001:41d0:2:519::]:8333\n [2001:41d0:2:9c94::1]:8333\n-[2001:41d0:2:9d3e::1]:8333\n-[2001:41d0:2:a24f::]:8333\n-[2001:41d0:2:a35a::]:8333\n-[2001:41d0:2:b2b8::]:8333\n-[2001:41d0:2:c1d9::]:8333\n-[2001:41d0:2:c6e::]:8333\n+[2001:41d0:2:b792::]:8333\n+[2001:41d0:2:bf2a::]:8333\n+[2001:41d0:2:c793::]:8333\n [2001:41d0:2:c9bf::]:8333\n-[2001:41d0:2:f1a5::]:8333\n-[2001:41d0:52:a00::105f]:8333\n-[2001:41d0:52:cff::6f5]:8333\n-[2001:41d0:52:d00::6e2]:8333\n-[2001:41d0:8:3e75::1]:8333\n-[2001:41d0:8:62ab::1]:8333\n+[2001:41d0:303:4f0::]:8333\n+[2001:41d0:8:1a8a::1]:8333\n+[2001:41d0:8:3fa9::1]:8333\n+[2001:41d0:8:4670::1]:8333\n+[2001:41d0:8:4f48::1]:8333\n [2001:41d0:8:6728::]:8333\n-[2001:41d0:8:b30a::1]:8333\n-[2001:41d0:8:bc26::1]:8333\n-[2001:41d0:8:be9a::1]:8333\n-[2001:41d0:8:d984::]:8333\n-[2001:41d0:8:eb8b::]:8333\n-[2001:41d0:a:13a2::1]:8333\n-[2001:41d0:a:2b18::1]:8333\n-[2001:41d0:a:2d14::]:8333\n-[2001:41d0:a:4558::1df2:76d3]:8333\n-[2001:41d0:a:4aaa::]:8333\n-[2001:41d0:a:635b::1]:8333\n-[2001:41d0:a:63d8::1]:8333\n+[2001:41d0:8:72c2:d:242:ac11:2]:8333\n+[2001:41d0:8:8007::]:8333\n+[2001:41d0:8:a71c::]:8333\n+[2001:41d0:8:bccc::1]:8333\n+[2001:41d0:8:bd45::1]:8333\n+[2001:41d0:8:c67c::]:8333\n+[2001:41d0:8:de3d::1]:8333\n+[2001:41d0:8:e257::1]:8333\n+[2001:41d0:8:e3e4::1]:8333\n+[2001:41d0:a:14cc::1]:8333\n+[2001:41d0:a:15b2::1]:8333\n+[2001:41d0:a:1ac9::1]:8333\n+[2001:41d0:a:2496::1]:8333\n+[2001:41d0:a:308c::]:8333\n+[2001:41d0:a:5879::]:8333\n+[2001:41d0:a:6810::1]:8333\n+[2001:41d0:a:682d::1]:8333\n [2001:41d0:a:6c29::1]:8333\n-[2001:41d0:a:f9cd::1]:8333\n-[2001:41d0:d:20a4::]:8333\n+[2001:41d0:a:f52a::1]:8333\n+[2001:41d0:d:111c::]:8333\n+[2001:41d0:e:1388::1]:8333\n [2001:41d0:e:26b::1]:8333\n+[2001:41d0:e:f73::1]:8333\n [2001:41d0:fc8c:a200:7a24:afff:fe9d:c69b]:8333\n+[2001:41f0:61:0:72f3:95ff:fe09:7521]:8333\n [2001:41f0:61::7]:8333\n-[2001:41f0::2]:8333\n-[2001:44b8:41bd:6101:148e:4022:4950:e861]:8333\n-[2001:470:1:2f9:0:1:107a:a301]:8333\n-[2001:470:1f0b:ad6::2]:8333\n-[2001:470:1f11:12d5::ae1:5611]:8333\n+[2001:4428:200:8171:db6:2ff4:9c0e:a2da]:8333\n+[2001:470:1f07:151c:baac:6fff:feb7:3ba9]:8333\n+[2001:470:1f0b:ad6:a60:6eff:fec6:2323]:8333\n+[2001:470:1f11:617::10f]:8333\n+[2001:470:1f14:73e::2]:8333\n [2001:470:1f14:7d::2]:8333\n-[2001:470:27:ce::2]:8333\n+[2001:470:1f15:11f8::10]:8333\n+[2001:470:1f15:1b95:2c3e:8a9a:24e1:7084]:8333\n+[2001:470:1f15:e9b::3ef]:8333\n+[2001:470:1f1d:3a9::10]:8333\n+[2001:470:25:482::2]:8333\n+[2001:470:27:19f::2]:8333\n+[2001:470:27:665::2]:8333\n+[2001:470:28:365::4]:8333\n [2001:470:41:6::2]:8333\n-[2001:470:507d:0:6ab5:99ff:fe73:ac18]:8333\n-[2001:470:583e::2a]:8333\n-[2001:470:5f:5f::232]:8333\n-[2001:470:66:119::2]:8333\n-[2001:470:6c4f::cafe]:8333\n-[2001:470:6f:327:913b:7fe:8545:a4f5]:8333\n-[2001:470:7dda:1::1]:8333\n-[2001:470:95c1::2]:8333\n-[2001:470:b1d0:ffff::1000]:8333\n-[2001:470:d00d:0:3664:a9ff:fe9a:5150]:8333\n-[2001:470:fab7:1::1]:8333\n-[2001:4800:7819:104:be76:4eff:fe05:c828]:8333\n-[2001:4800:7819:104:be76:4eff:fe05:c9a0]:8333\n+[2001:470:727b::11:14]:8333\n+[2001:470:7:2f0::2]:8333\n+[2001:470:7:65::2]:8333\n+[2001:470:7f85::2]:8333\n+[2001:470:8:2e1:5825:39df:3e4c:54a8]:8333\n+[2001:470:8:2e1::43]:8333\n+[2001:470:8:2e1:ae2a:e257:4470:6350]:8333\n+[2001:470:a:c13::2]:8333\n [2001:4801:7819:74:b745:b9d5:ff10:a61a]:8333\n [2001:4801:7819:74:b745:b9d5:ff10:aaec]:8333\n [2001:4801:7828:104:be76:4eff:fe10:1325]:8333\n-[2001:4802:7800:1:be76:4eff:fe20:f023]:8333\n [2001:4802:7800:2:30d7:1775:ff20:1858]:8333\n-[2001:4802:7800:2:be76:4eff:fe20:6c26]:8333\n-[2001:4802:7802:101:be76:4eff:fe20:256]:8333\n-[2001:4802:7802:103:be76:4eff:fe20:2de8]:8333\n-[2001:4830:1100:2e8::2]:8333\n-[2001:4b98:dc2:41:216:3eff:fe56:f659]:8333\n-[2001:4ba0:fffa:5d::93]:8333\n-[2001:4ba0:ffff:1be:1:1005:0:1]:8333\n-[2001:4dd0:ff00:867f::3]:8333\n+[2001:4ba0:babe:832::]:8333\n+[2001:4ba0:cafe:379::1]:8333\n+[2001:4ba0:ffee:33::10]:8333\n [2001:4dd0:ff00:9a67::9]:8333\n-[2001:5c0:1400:b::3cc7]:8333\n [2001:610:1b19::3]:8333\n [2001:610:600:a41::2]:8333\n-[2001:67c:26b4::]:8333\n-[2001:8d8:840:500::39:1ae]:8333\n-[2001:8d8:965:4a00::10:9343]:8333\n-[2001:980:4650:1:2e0:53ff:fe13:2449]:8333\n+[2001:678:174:4021::2:8333]:8333\n+[2001:67c:16dc:1201:5054:ff:fe17:4dac]:8333\n+[2001:67c:2128:ffff:6062:36ff:fe30:6532]:8333\n+[2001:67c:2564:331:3547:6e28:85a4:fb27]:8333\n+[2001:6a0:200:368::2]:8333\n+[2001:718:801:311:5054:ff:fe19:c483]:8333\n+[2001:7b8:2ff:8f::2]:8333\n+[2001:8d8:8a6:4400::3f:86c]:8333\n+[2001:8d8:923:8400::87:ebd]:8333\n+[2001:960:66d::2]:8333\n [2001:981:46:1:ba27:ebff:fe5b:edee]:8333\n-[2001:9c8:53e9:369a:226:2dff:fe1b:7472]:8333\n-[2001:9d8:cafe:3::87]:8333\n-[2001:b10:11:21:3e07:54ff:fe48:7248]:8333\n-[2001:ba8:1f1:f34c::2]:8333\n-[2001:bc8:2310:100::1]:8333\n-[2001:bc8:3427:101:7a4f:8be:2611:6e79]:8333\n-[2001:bc8:3505:200::1]:8333\n-[2001:cc0:a004::30:1d]:8333\n-[2001:e42:102:1209:153:121:76:171]:8333\n-[2002:17ea:14eb::17ea:14eb]:8333\n-[2002:2f8:2bc5::2f8:2bc5]:8333\n-[2002:4047:482c::4047:482c]:8333\n-[2002:45c3:8cca::45c3:8cca]:8333\n-[2002:46bb:8a41:0:226:b0ff:feed:5f12]:8888\n-[2002:46bb:8c3c:0:8d55:8fbb:15fa:f4e0]:8765\n-[2002:4c48:a0fe::4c48:a0fe]:8333\n-[2002:4d44:25c8::4d44:25c8]:8333\n-[2002:505f:aaa2::505f:aaa2]:8333\n-[2002:5bc1:799d::5bc1:799d]:8333\n-[2002:6dec:5472::6dec:5472]:8333\n-[2002:8c6d:6521:9617:12bf:48ff:fed8:1724]:8333\n-[2002:ac52:94e2::ac52:94e2]:8333\n-[2002:af7e:3eca::af7e:3eca]:8333\n-[2002:b009:20c5::b009:20c5]:8333\n-[2002:c06f:39a0::c06f:39a0]:8333\n-[2002:c23a:738a::c23a:738a]:8333\n-[2002:c70f:7442::c70f:7442]:8333\n-[2002:cec5:be4f::cec5:be4f]:8333\n-[2002:d149:9e3a::d149:9e3a]:8333\n+[2001:ba8:1f1:f069::2]:8333\n+[2001:bc8:225f:10e:505:6573:7573:d0a]:8333\n+[2001:bc8:2706::1]:8333\n+[2001:bc8:323c:100::53]:8333\n+[2001:bc8:323c:100::80:4]:8333\n+[2001:bc8:323c:100::cafe]:8333\n+[2001:bc8:3680:4242::1]:8333\n+[2001:bc8:399f:f000::1]:8333\n+[2001:bc8:3cbf::5]:8333\n+[2001:bc8:4700:2300::19:807]:8333\n+[2001:e42:102:1805:160:16:206:31]:8333\n+[2002:12f1:3f::12f1:3f]:8333\n+[2002:1e2:5349::1e2:5349]:8333\n+[2002:1e2:5588::1e2:5588]:8333\n+[2002:2501:cf62::2501:cf62]:8333\n+[2002:268c:a135::268c:a135]:8333\n+[2002:2a33:99db::2a33:99db]:8332\n+[2002:2ebc:2c14::7]:8333\n+[2002:2f59:2c9c::2f59:2c9c]:11885\n+[2002:2f5a:3619::2f5a:3619]:8333\n+[2002:2f5a:36a4::2f5a:36a4]:8333\n+[2002:2f5a:429::2f5a:429]:8333\n+[2002:2f5a:562a::2f5a:562a]:8333\n+[2002:3a3b:216::3a3b:216]:8333\n+[2002:3dfa:5d23::3dfa:5d23]:8333\n+[2002:424f:a052::424f:a052]:8333\n+[2002:451e:e922::451e:e922]:8333\n+[2002:4540:4b30::4540:4b30]:8333\n+[2002:51ab:7cc::51ab:7cc]:8333\n+[2002:527:de11::527:de11]:8333\n+[2002:5395:7d01::5395:7d01]:8333\n+[2002:5395:7d2a::5395:7d2a]:8333\n+[2002:5669:e3be::5669:e3be]:8333\n+[2002:566a:5d6d::566a:5d6d]:8333\n+[2002:59b9:f820::59b9:f820]:8333\n+[2002:59f8:ac69::59f8:ac69]:8333\n+[2002:5bd4:b65a::5bd4:b65a]:8333\n+[2002:5c3f:39db::5c3f:39db]:8333\n+[2002:5d33:8d03::5d33:8d03]:8333\n+[2002:5d67:49bb::5d67:49bb]:8333\n+[2002:5dae:5d5f::5dae:5d5f]:8333\n+[2002:5dbe:8cc6::5dbe:8cc6]:8333\n+[2002:5dbe:9503::5dbe:9503]:8333\n+[2002:5fd3:8944::5fd3:8944]:8333\n+[2002:5fd3:9467::5fd3:9467]:8333\n+[2002:67f9:6a48::67f9:6a48]:8333\n+[2002:67f9:6a4a::67f9:6a4a]:8333\n+[2002:67f9:6a95::67f9:6a95]:8333\n+[2002:6a0e:3ea8::6a0e:3ea8]:10011\n+[2002:6b96:375a::6b96:375a]:8333\n+[2002:6ca8:cffb::6ca8:cffb]:8333\n+[2002:6caf:234::6caf:234]:8333\n+[2002:6dec:58f5::6dec:58f5]:8333\n+[2002:6dec:5ac7::6dec:5ac7]:8333\n+[2002:7237:4a02::7237:4a02]:20033\n+[2002:7237:94fd::7237:94fd]:10011\n+[2002:7237:e428::7237:e428]:8333\n+[2002:7237:fcf6::7237:fcf6]:20188\n+[2002:76c0:96e6::76c0:96e6]:8333\n+[2002:7819:7e80::7819:7e80]:7743\n+[2002:781a:ea86::781a:ea86]:8333\n+[2002:781a:f3c2::781a:f3c2]:14475\n+[2002:784c:c2c0::784c:c2c0]:8333\n+[2002:784c:ec97::784c:ec97]:8333\n+[2002:792b:261a::792b:261a]:8333\n+[2002:88f3:8cca::88f3:8cca]:8333\n+[2002:88f3:a83c::88f3:a83c]:8333\n+[2002:8ac9:516f::8ac9:516f]:8333\n+[2002:8b81:6d78::8b81:6d78]:50344\n+[2002:8b81:6e5c::8b81:6e5c]:38176\n+[2002:8bc4:90a6::8bc4:90a6]:8333\n+[2002:ac52:b854::ac52:b854]:8333\n+[2002:add0:c14a::add0:c14a]:8333\n+[2002:b07e:a70a::b07e:a70a]:8333\n+[2002:b27c:c565:1::250]:8333\n+[2002:b27c:c565::1]:8333\n+[2002:b94d:80f1::b94d:80f1]:8333\n+[2002:b982:e26a::b982:e26a]:8333\n+[2002:bcd5:3145::bcd5:3145]:8333\n+[2002:c08a:d22b::c08a:d22b]:8333\n+[2002:c0c7:f8e3::c0c7:f8e3]:32771\n+[2002:c1a9:fc5a::c1a9:fc5a]:8333\n+[2002:c23f:8fc5::c23f:8fc5]:8333\n+[2002:d395:ea6d::d395:ea6d]:8333\n [2002:d917:ca5::d917:ca5]:8333\n-[2400:8900::f03c:91ff:fe50:153f]:8333\n-[2400:8900::f03c:91ff:fe6e:823e]:8333\n-[2400:8900::f03c:91ff:fea8:1934]:8333\n-[2400:8901::f03c:91ff:fe26:c4d6]:8333\n+[2002:d917:e91::d917:e91]:8333\n+[2002:db71:f434::db71:f434]:8333\n+[2400:2651:161:1000:6847:d40f:aaa3:4848]:8333\n [2400:8901::f03c:91ff:fec8:4280]:8333\n-[2400:8901::f03c:91ff:fec8:660f]:8333\n-[2401:1800:7800:102:be76:4eff:fe1c:559]:8333\n [2401:1800:7800:102:be76:4eff:fe1c:a7d]:8333\n+[2401:2500:203:10:153:120:156:83]:8333\n+[2401:a400:3200:5600:14ee:f361:4bdc:1f7c]:8333\n+[2403:4200:403:2::ff]:8333\n [2405:aa00:2::40]:8333\n-[2600:3c00::f03c:91ff:fe18:59b2]:8333\n-[2600:3c00::f03c:91ff:fe26:bfb6]:8333\n-[2600:3c00::f03c:91ff:fe33:88e3]:8333\n-[2600:3c00::f03c:91ff:fe6e:7297]:8333\n-[2600:3c00::f03c:91ff:fe84:8a6e]:8333\n+[240b:10:ca20:f0:224:e8ff:fe1f:60d9]:8333\n+[240b:250:1e0:2400:b9ef:8fe3:a69a:7378]:8333\n+[240d:1a:302:8600:8876:a36d:12ee:f285]:8333\n+[2600:3c00::f03c:91ff:fe91:3e49]:8333\n+[2600:3c00::f03c:91ff:febb:981e]:8333\n [2600:3c01::f03c:91ff:fe18:6adf]:8333\n-[2600:3c01::f03c:91ff:fe26:c4b8]:8333\n-[2600:3c01::f03c:91ff:fe3b:1f76]:8333\n-[2600:3c01::f03c:91ff:fe50:5e06]:8333\n-[2600:3c01::f03c:91ff:fe61:289b]:8333\n [2600:3c01::f03c:91ff:fe69:89e9]:8333\n-[2600:3c01::f03c:91ff:fe84:ac15]:8333\n-[2600:3c01::f03c:91ff:fe98:68bb]:8333\n-[2600:3c02::f03c:91ff:fe26:713]:8333\n-[2600:3c02::f03c:91ff:fe26:c49e]:8333\n-[2600:3c02::f03c:91ff:fe84:97d8]:8333\n-[2600:3c02::f03c:91ff:fec8:8feb]:8333\n+[2600:3c01::f03c:91ff:fe91:6a29]:8333\n+[2600:3c01::f03c:91ff:fef1:1eaa]:8333\n [2600:3c03::f03c:91ff:fe18:da80]:8333\n-[2600:3c03::f03c:91ff:fe26:c49b]:8333\n-[2600:3c03::f03c:91ff:fe50:5fa7]:8333\n+[2600:3c03::f03c:91ff:fe28:1445]:8333\n [2600:3c03::f03c:91ff:fe67:d2e]:8333\n-[2600:3c03::f03c:91ff:fe6e:1803]:8333\n-[2600:3c03::f03c:91ff:fec8:4bbe]:8333\n-[2600:3c03::f03c:91ff:fee4:4e16]:8333\n-[2601:18d:8300:58a6::2e4]:8333\n-[2601:240:4600:40c0:250:56ff:fea4:6305]:8333\n-[2601:581:c200:a719:542c:9cd5:4852:f7d9]:8333\n-[2601:647:4900:85f1:ca2a:14ff:fe51:bb35]:8333\n-[2601:c2:c002:b300:54a0:15b5:19f7:530d]:8333\n-[2602:306:ccff:ad7f:b116:52be:64ba:db3a]:8333\n-[2602:ae:1982:9400:846:f78c:fec:4d57]:8333\n+[2600:3c03::f03c:91ff:fe89:116f]:8333\n+[2600:3c03::f03c:91ff:feb0:5fc4]:8333\n+[2600:3c03::f03c:91ff:fee0:233e]:8333\n+[2600:3c03::f03c:91ff:fee0:51]:8333\n+[2600:8805:2400:14e:226:4aff:fe02:2ba4]:8333\n+[2600:8807:5080:3301:1487:83b7:33d7:eb97]:8333\n+[2601:186:c100:6bcd:16bd:cea1:235d:1c19]:8333\n+[2601:18c:4200:28d0:e4d:e9ff:fec5:76d0]:8333\n+[2601:247:8201:6251:30e6:7b95:69bf:9248]:8333\n+[2601:602:9980:f78:211:11ff:fec5:1ae]:8333\n+[2602:ae:1993:de00:2c50:9a44:8f11:77a5]:8333\n+[2602:ff68:0:1:21e:bff:feca:db72]:8333\n+[2602:ff68:0:1:2bd:27ff:feb0:adf8]:8333\n+[2602:ff68:0:1::5]:8333\n+[2602:ff68:0:5:2bd:27ff:feb0:adf8]:8333\n [2602:ffc5:1f::1f:2d61]:8333\n [2602:ffc5:1f::1f:9211]:8333\n-[2602:ffc5::75d5:c1c3]:8333\n+[2602:ffc5::9e63:27a2]:8333\n+[2602:ffc5::c30:1c75]:8333\n [2602:ffc5::ffc5:b844]:8333\n [2602:ffe8:100:2::457:936b]:8333\n-[2602:ffe8:100:2::9d20:2e3c]:8333\n-[2602:ffea:1001:72b::578b]:8333\n-[2602:ffea:a::24c4:d9fd]:8333\n-[2604:0:c1:100:1ec1:deff:fe54:2235]:8333\n-[2604:180:1:1af::42a9]:8333\n-[2604:180:3:702::c9de]:8333\n-[2604:4080:1114:0:3285:a9ff:fe93:850c]:8333\n-[2604:6000:ffc0:3c:64a3:94d0:4f1d:1da8]:8333\n-[2605:6000:f380:9a01:ba09:8aff:fed4:3511]:8333\n-[2605:6001:e00f:7b00:c587:6d91:6eff:eeba]:8333\n-[2605:f700:c0:1::25c3:2a3e]:8333\n-[2606:6000:a441:9903:5054:ff:fe78:66ff]:8333\n-[2607:5300:100:200::1c83]:9334\n-[2607:5300:10::a1]:8333\n-[2607:5300:60:1c2f::1]:8333\n-[2607:5300:60:2b90::1]:8333\n-[2607:5300:60:3320::1]:8333\n-[2607:5300:60:385::1]:8333\n-[2607:5300:60:4a85::]:8333\n-[2607:5300:60:65e4::]:8333\n-[2607:5300:60:6918::]:8333\n-[2607:5300:60:711a:78::a7b5]:8333\n-[2607:5300:60:714::1]:8333\n-[2607:5300:60:870::1]:8333\n-[2607:5300:60:952e:3733::1414]:8333\n-[2607:f1c0:848:1000::48:943c]:8333\n-[2607:f2e0:f:5df::2]:8333\n-[2607:f748:1200:f8:21e:67ff:fe99:8f07]:8333\n-[2607:f948:0:1::7]:8333\n-[2607:ff68:100:36::131]:8333\n-[2803:6900:1::117]:8333\n-[2a00:1098:0:80:1000:25:0:1]:8333\n-[2a00:1178:2:43:5054:ff:fe84:f86f]:8333\n-[2a00:1178:2:43:5054:ff:fee7:2eb6]:8333\n-[2a00:1178:2:43:8983:cc27:d72:d97a]:8333\n-[2a00:1328:e100:cc42:230:48ff:fe92:55c]:8333\n+[2604:180:2:eee::ca46]:8333\n+[2604:880:d:85::be37]:8333\n+[2604:9a00:2100:a009:2::]:8333\n+[2604:a880:2:d0::301:8001]:8333\n+[2604:a880:2:d0::4a9:1001]:8333\n+[2604:a880:2:d0::53a:c001]:8333\n+[2604:a880:400:d0::ad7:e001]:8333\n+[2604:a880:400:d0::dcf:f001]:8333\n+[2605:4d00::50]:8333\n+[2605:6000:edc8:300::ddfe]:8333\n+[2605:6000:ffc0:70:74d5:225c:f553:5bb8]:8333\n+[2606:6000:c148:7003:5054:ff:fe78:66ff]:8333\n+[2606:6000:e6d6:d701:d428:5e44:a2c9:3ff6]:8333\n+[2606:c680:1:4a:2016:d1ff:fe93:52a7]:8333\n+[2607:5300:203:118:3733::1414]:8333\n+[2607:5300:60:13bb::1]:8333\n+[2607:5300:60:1966::1]:8333\n+[2607:5300:60:2218::]:8333\n+[2607:5300:60:3775::]:8333\n+[2607:5300:60:3ddf::]:8333\n+[2607:5300:60:a654::]:8333\n+[2607:5300:60:a7a3::]:8333\n+[2607:5300:60:ac0::1]:8333\n+[2607:5300:60:cf97::]:8333\n+[2607:f0d0:1901:19::6]:8333\n+[2607:f128:40:1202:69:162:139:125]:8333\n+[2607:f128:40:1703::2]:8333\n+[2607:f178:0:8::106]:8333\n+[2607:f1c0:84d:8900::7e:cad]:8333\n+[2607:f948:0:1::1:40]:8333\n+[2607:fcd0:100:2302::6094:635a]:8333\n+[2607:fcd0:100:6a00::3a96:1]:8333\n+[2607:fcd0:100:6a02::7ff0:1]:8333\n+[2607:fcd0:100:8203::8c58:dbc]:8333\n+[2607:fea8:1360:9c2:221a:6ff:fe47:776d]:8333\n+[2607:fea8:4da0:9ce:5114:a8ec:20f5:a50b]:8333\n+[2607:fea8:5df:fda0:feaa:14ff:feda:c79a]:8333\n+[2607:fea8:84c0:163:f42c:baff:fecc:6bbf]:8333\n+[2607:ff10:c5:502:225:90ff:fe32:d446]:8333\n+[2607:ff48:aa81:800::96cf:1]:8333\n+[2620:11c:5001:1118:d267:e5ff:fee9:e673]:8333\n+[2620:b8:4000:1000::93:1]:8333\n+[2800:1a0::9]:8333\n+[2a00:1178:2:43:19fd:d43e:b77:edeb]:8333\n+[2a00:1178:2:43:b4e3:e562:f811:d761]:8333\n [2a00:14f0:e000:80d2:cd1a::1]:8333\n+[2a00:1630:14::101]:8333\n [2a00:1630:2:1802:188:122:91:11]:8333\n-[2a00:18e0:0:1800::1]:8333\n-[2a00:18e0:0:dcc5:109:234:106:191]:8333\n-[2a00:1a28:1157:87::94c7]:8333\n+[2a00:1630:2:500::4]:8333\n+[2a00:1768:2001:24::148:218]:8333\n+[2a00:1768:2001:27::142:21]:8333\n+[2a00:1a48:7810:101:be76:4eff:fe08:c774]:8333\n [2a00:1ca8:37::a5fc:40d1]:8333\n [2a00:1ca8:37::ab6d:ce2c]:8333\n-[2a00:7143:100:0:216:3eff:fe2e:74a3]:8333\n-[2a00:7143:100:0:216:3eff:fed3:5c21]:8333\n-[2a00:7c80:0:45::123]:8333\n+[2a00:1dc0:2255:10::2]:8333\n+[2a00:7c80:0:71::8]:8333\n+[2a00:7c80:0:97::7]:8333\n+[2a00:bbe0:0:42:222:64ff:fe9a:e206]:8333\n+[2a00:c98:2050:a020:3::110]:8333\n+[2a00:dcc0:eda:98:183:193:1d24:b53a]:8333\n [2a00:dcc0:eda:98:183:193:c382:6bdb]:8333\n [2a00:dcc0:eda:98:183:193:f72e:d943]:8333\n-[2a00:f820:17::4af:1]:8333\n-[2a00:f940:2:1:2::101d]:8333\n-[2a00:f940:2:1:2::6ac]:8333\n-[2a01:1b0:7999:402::131]:8333\n-[2a01:238:42dd:f900:7a6c:2bc6:4041:c43]:8333\n-[2a01:238:4313:6300:2189:1c97:696b:5ea]:8333\n-[2a01:488:66:1000:5c33:91f9:0:1]:8333\n-[2a01:488:66:1000:b01c:178d:0:1]:8333\n+[2a00:f90:ff0:c100:53c4:97a7:8b59:796a]:8333\n+[2a01:238:435c:de00:b110:38cf:192d:b2c]:28333\n+[2a01:348:6:7cf::2]:8333\n+[2a01:368:e012:8888:216:3eff:fe24:1162]:8333\n+[2a01:488:66:1000:53a9:22b:0:1]:8333\n+[2a01:488:67:1000:523:ffa7:0:1]:8333\n+[2a01:488:67:1000:b01c:3379:0:1]:8333\n [2a01:4f8:100:34ce::2]:8333\n-[2a01:4f8:100:34e4::2]:8333\n [2a01:4f8:100:44e7::2]:8333\n-[2a01:4f8:100:510e::2]:8333\n-[2a01:4f8:100:5128::2]:8333\n-[2a01:4f8:110:5105::2]:8333\n-[2a01:4f8:110:516c::2]:8333\n+[2a01:4f8:10a:2e4::2]:8333\n+[2a01:4f8:10a:34e::2]:8333\n+[2a01:4f8:10a:51d::2]:8333\n+[2a01:4f8:10a:622::2]:8333\n+[2a01:4f8:10a:85f::2]:8333\n+[2a01:4f8:10a:864::2]:8333\n+[2a01:4f8:10a:d04::2]:8333\n+[2a01:4f8:110:334c::2]:8333\n+[2a01:4f8:110:536e::2]:8333\n [2a01:4f8:120:43e4::2]:8333\n-[2a01:4f8:120:62e6::2]:8333\n [2a01:4f8:120:702e::2]:8333\n-[2a01:4f8:120:8203::2]:8333\n-[2a01:4f8:121:234d::2]:8333\n-[2a01:4f8:121:261::2]:8333\n-[2a01:4f8:130:11ea::2]:8333\n+[2a01:4f8:121:4346::2]:8333\n [2a01:4f8:130:3332::2]:8333\n-[2a01:4f8:130:40ab::2]:8333\n-[2a01:4f8:130:632c::2]:8333\n-[2a01:4f8:130:6366::2]:8333\n-[2a01:4f8:130:934f::2]:8333\n+[2a01:4f8:131:33ad::2]:8333\n [2a01:4f8:131:33ad:fea1::666]:8333\n-[2a01:4f8:140:2195::2]:8333\n-[2a01:4f8:140:6333::2]:8333\n-[2a01:4f8:140:930d::2]:8333\n+[2a01:4f8:140:31b0::2]:8333\n+[2a01:4f8:140:4088::2]:8333\n+[2a01:4f8:140:931a::2]:8333\n [2a01:4f8:140:93b0::2]:8333\n-[2a01:4f8:141:1167::2]:8333\n+[2a01:4f8:141:13ad::c451]:8333\n [2a01:4f8:141:186::2]:8333\n-[2a01:4f8:141:53f0::2]:8333\n-[2a01:4f8:150:336a::2]:8333\n-[2a01:4f8:150:72ee::4202]:8333\n-[2a01:4f8:150:8324::2]:9001\n-[2a01:4f8:151:21ca::2]:8333\n-[2a01:4f8:151:41c2:0:5404:a67e:f250]:8333\n-[2a01:4f8:151:5128::2]:8333\n+[2a01:4f8:141:22ae::2]:8333\n+[2a01:4f8:141:322c::2]:8333\n+[2a01:4f8:150:11d4::2]:8333\n+[2a01:4f8:150:440f::2]:8333\n+[2a01:4f8:150:61ee::2]:8333\n+[2a01:4f8:150:726b::2]:8333\n+[2a01:4f8:151:30c9::2]:15000\n+[2a01:4f8:151:41a2::2]:8333\n+[2a01:4f8:151:41cc::2]:8333\n [2a01:4f8:151:52c6::154]:8333\n-[2a01:4f8:151:6347::2]:9001\n-[2a01:4f8:160:5136::2]:8333\n-[2a01:4f8:160:72c5::2858:e1c5]:8333\n-[2a01:4f8:160:72c5::593b:60d5]:8333\n+[2a01:4f8:151:600b::1:1]:8333\n+[2a01:4f8:151:7175::2]:8333\n+[2a01:4f8:160:41f0::1:33]:8333\n+[2a01:4f8:160:5328::27f0:187a]:8333\n [2a01:4f8:160:814f::2]:8333\n-[2a01:4f8:161:13d0::2]:8333\n-[2a01:4f8:161:228f::2]:8333\n-[2a01:4f8:161:51c4::2]:8333\n-[2a01:4f8:161:60a7::2]:8333\n+[2a01:4f8:161:21ad::333:30]:8333\n [2a01:4f8:161:7026::2]:8333\n-[2a01:4f8:161:9184::2]:8333\n-[2a01:4f8:162:2108::2]:8333\n-[2a01:4f8:162:218c::2]:8333\n-[2a01:4f8:162:4443::2]:8333\n-[2a01:4f8:162:51a3::2]:8333\n+[2a01:4f8:162:4110::2]:8333\n+[2a01:4f8:162:4348::2]:8333\n+[2a01:4f8:171:1c1b::2]:8333\n+[2a01:4f8:171:1c3::2]:8333\n+[2a01:4f8:171:2258::2]:8333\n+[2a01:4f8:171:2a70::2]:8333\n+[2a01:4f8:171:2e1b::2]:8333\n+[2a01:4f8:171:2f28::2]:8333\n+[2a01:4f8:171:3248::2]:8333\n+[2a01:4f8:171:380c::2]:8333\n [2a01:4f8:171:b93::2]:8333\n-[2a01:4f8:190:1483::1]:8333\n-[2a01:4f8:190:4495::2]:8333\n-[2a01:4f8:190:64c9::2]:8333\n+[2a01:4f8:171:d0a::2]:8333\n+[2a01:4f8:172:116c::2]:8333\n+[2a01:4f8:172:1287::2]:8333\n+[2a01:4f8:172:17a9::2]:8333\n+[2a01:4f8:172:1ca7::2]:8333\n+[2a01:4f8:172:2159::2]:8333\n+[2a01:4f8:172:3a41::2]:8333\n+[2a01:4f8:172:3b42::2]:8333\n+[2a01:4f8:172:3ec1::2]:8333\n+[2a01:4f8:172:3ec2::2]:8333\n+[2a01:4f8:172:aeb::2]:8333\n+[2a01:4f8:172:aec::2]:8333\n+[2a01:4f8:173:10ab::2]:8333\n+[2a01:4f8:173:1551::2]:8333\n+[2a01:4f8:173:1bca::2]:8333\n+[2a01:4f8:173:1e2e::2]:8333\n+[2a01:4f8:173:2162::2]:8333\n+[2a01:4f8:173:21e6::2]:8333\n+[2a01:4f8:173:42::2]:8333\n+[2a01:4f8:173:cc1::2]:8333\n+[2a01:4f8:190:1253::2]:8333\n+[2a01:4f8:190:24eb::2]:8333\n+[2a01:4f8:190:34f0::2]:8333\n+[2a01:4f8:190:528d::2]:8333\n [2a01:4f8:190:91ce::2]:8333\n [2a01:4f8:191:2194::83]:8333\n [2a01:4f8:191:40e8::2]:8333\n-[2a01:4f8:191:44b4::2]:8333\n-[2a01:4f8:191:8242::2]:8333\n-[2a01:4f8:191:83a2::2]:8333\n-[2a01:4f8:192:11b2::2]:8333\n+[2a01:4f8:191:8165::2]:22556\n+[2a01:4f8:191:81b7::2]:8333\n+[2a01:4f8:191:8328::3]:8333\n+[2a01:4f8:192:11b2::2]:8343\n [2a01:4f8:192:216c::2]:8333\n-[2a01:4f8:192:22b3::2]:8333\n+[2a01:4f8:192:22af::2]:8333\n+[2a01:4f8:192:2422::2]:8333\n+[2a01:4f8:192:34d0::2]:8333\n [2a01:4f8:192:440b::2]:8333\n+[2a01:4f8:192:5230::2]:8333\n [2a01:4f8:192:db::2]:8333\n [2a01:4f8:200:1012::2]:8333\n-[2a01:4f8:200:23d1::dead:beef]:8333\n-[2a01:4f8:200:506d::2]:8333\n-[2a01:4f8:200:51f0::2]:8333\n-[2a01:4f8:200:5389::2]:8333\n-[2a01:4f8:200:53e3::2]:8333\n-[2a01:4f8:200:6344::2]:8333\n-[2a01:4f8:200:6396::2]:8333\n-[2a01:4f8:200:63af::119]:8333\n-[2a01:4f8:200:71e3:78b4:f3ff:fead:e8cf]:8333\n-[2a01:4f8:201:214c::2]:8333\n-[2a01:4f8:201:233:1::3]:8333\n-[2a01:4f8:201:3e3::2]:8333\n+[2a01:4f8:200:414e::2]:8333\n+[2a01:4f8:200:416a::2]:8333\n+[2a01:4f8:201:21a7::2]:8333\n+[2a01:4f8:201:4017::11]:8333\n [2a01:4f8:201:6011::4]:8333\n [2a01:4f8:201:60d5::2]:8333\n-[2a01:4f8:202:265::2]:8333\n-[2a01:4f8:202:3115::2]:8333\n+[2a01:4f8:202:12d6::2]:8333\n [2a01:4f8:202:31e3::2]:8333\n-[2a01:4f8:202:31ef::2]:8333\n-[2a01:4f8:202:3392::2]:8333\n+[2a01:4f8:202:32c6::2]:8333\n [2a01:4f8:202:53c3::2]:8333\n-[2a01:4f8:202:63f4::2]:8333\n-[2a01:4f8:202:7227::2]:8333\n-[2a01:4f8:210:2227::2]:8333\n-[2a01:4f8:210:24aa::2]:8333\n [2a01:4f8:211:14cf::2]:8333\n-[2a01:4f8:211:181b::2]:8333\n-[2a01:4f8:212:289e::2]:8333\n-[2a01:4f8:212:33db::2]:18333\n-[2a01:4f8:a0:112f::2]:8333\n-[2a01:4f8:a0:3174::2]:8333\n-[2a01:4f8:a0:328c::2]:8333\n-[2a01:4f8:a0:5243::2]:8333\n-[2a01:4f8:c17:19b9::2]:8333\n-[2a01:4f8:c17:1a41::2]:8333\n-[2a01:4f8:c17:1a92::2]:8333\n-[2a01:4f8:c17:273::2]:8333\n-[2a01:4f8:c17:435::2]:8333\n-[2a01:4f8:c17:755::2]:8333\n-[2a01:4f8:c17:b54::2]:8333\n-[2a01:4f8:d16:9384::2]:8333\n+[2a01:4f8:211:1ec5::2]:8333\n+[2a01:4f8:211:483::2]:8333\n+[2a01:4f8:211:d99::8]:8333\n+[2a01:4f8:212:1826::2]:8333\n+[2a01:4f8:212:27a8::2]:8333\n+[2a01:4f8:221:801::2]:8333\n+[2a01:4f8:a0:12cc::2]:8333\n+[2a01:4f8:a0:746a:101:1:1:2]:8333\n+[2a01:4f8:a0:828a::2]:8333\n+[2a01:4f8:c17:2eef::2]:8333\n+[2a01:4f8:c17:2f3c::2]:3333\n+[2a01:4f8:c17:3b02::2]:8333\n+[2a01:4f8:c17:4245::2]:8333\n+[2a01:4f8:c17:464f::2]:8333\n+[2a01:4f8:c17:4a1c::2]:8333\n+[2a01:4f8:c17:4c5d::2]:8333\n+[2a01:4f8:c17:67f8::2]:8333\n+[2a01:4f8:c17:6dd0::2]:8333\n+[2a01:4f8:c17:710b::2]:8333\n+[2a01:4f8:c17:714::2]:8333\n+[2a01:4f8:c17:72c6::2]:8333\n [2a01:608:ffff:a009:8bf5:879d:e51a:f837]:8333\n-[2a01:680:10:10:f2de:f1ff:fec9:dc0]:8333\n-[2a01:7c8:aaac:1f6:5054:ff:fe30:e585]:8333\n-[2a01:7c8:aaac:20b:5054:ff:fe24:435e]:8333\n+[2a01:680:10:10::1]:8333\n+[2a01:6f0:ffff:120::8dcb]:8333\n+[2a01:79c:cebc:857c:98c1:88ff:fef5:90de]:8333\n+[2a01:79d:7377:2629:7e57:7e57:1:1]:8333\n [2a01:7c8:aaac:43d:5054:ff:fe4e:3dd4]:8333\n-[2a01:7c8:aaad:256::1]:8333\n-[2a01:7c8:aab6:ea:5054:ff:feff:eac3]:8333\n-[2a01:7c8:aab9:5a:5054:ff:fe89:7b26]:8333\n-[2a01:7c8:aabc:2c8:5054:ff:fe35:6581]:8333\n-[2a01:7e00::f03c:91ff:fe18:301e]:8333\n-[2a01:7e00::f03c:91ff:fe18:3942]:8333\n+[2a01:7c8:aab5:3e6:5054:ff:fed7:4e54]:8333\n+[2a01:7c8:aabd:3d5:5054:ff:fe95:f586]:8333\n+[2a01:7c8:aac1:453:d0d2:af96:fa88:5d0e]:8333\n+[2a01:7c8:aac3:663:5054:ff:fe25:8c69]:8333\n+[2a01:7c8:aac3:97:5054:ff:fea7:3780]:8333\n+[2a01:7c8:aac4:567:5054:ff:fedc:518a]:8333\n [2a01:7e00::f03c:91ff:fe26:8c87]:8333\n-[2a01:7e00::f03c:91ff:fe50:6206]:8333\n-[2a01:7e00::f03c:91ff:fe67:559d]:8333\n-[2a01:7e00::f03c:91ff:fe84:434f]:8333\n+[2a01:7e00::f03c:91ff:fe50:94b8]:8333\n+[2a01:7e00::f03c:91ff:fe55:2c]:8333\n [2a01:7e00::f03c:91ff:fe89:1143]:8333\n-[2a01:7e00::f03c:91ff:fe98:2505]:8333\n-[2a01:7e00::f03c:91ff:fedb:352e]:8333\n-[2a01:7e01::f03c:91ff:fec8:d7b5]:8333\n-[2a01:e34:ee33:1640:c504:f677:b28a:ba42]:8333\n-[2a01:e35:2e7e:bc0:e079:f55e:cef3:b5d7]:8333\n+[2a01:7e00::f03c:91ff:fe89:53fd]:8333\n+[2a01:7e00::f03c:91ff:fedf:b70f]:8333\n+[2a01:b000::4166:515b:ef9e:b3]:8333\n+[2a01:b2e0:2::40]:8333\n+[2a01:e34:ec29:24c0:f3:ddaf:9f59:586f]:8333\n+[2a01:e34:eed7:6670:ec1b:bf7c:b012:6069]:8333\n [2a01:e35:2ee5:610:21f:d0ff:fe4e:7460]:8333\n [2a01:e35:8a3f:47c0:c617:feff:fe3c:9fbd]:8333\n-[2a01:e35:8aca:6a0:211:aff:fe5e:295e]:8333\n-[2a02:180:a:18:81:7:11:50]:8333\n-[2a02:1810:1d87:6a00:5604:a6ff:fe60:d87d]:8333\n-[2a02:2168:1144:5c01:d63d:7eff:fedd:4f8e]:8333\n-[2a02:2498:6d7b:7001:b508:b39d:2cea:5b7a]:8333\n-[2a02:2528:503:2::15]:8333\n-[2a02:2528:fa:1a56:216:44ff:fe6a:d112]:8333\n-[2a02:27f8:2012:0:e9f7:268f:c441:6129]:8333\n+[2a01:e35:8bff:70b0:1e1b:dff:fe0b:236d]:8333\n+[2a02:1205:34c3:a4e0:d63d:7eff:fe98:10c8]:8333\n+[2a02:1205:34da:aa00:5882:249d:ddbf:bc43]:8333\n+[2a02:1205:5051:a640:d6ae:52ff:fea3:ac]:8333\n+[2a02:1205:c689:d980:baae:edff:feea:9445]:8333\n+[2a02:120b:2c2a:5ec0:10dd:31ff:fe42:5079]:8333\n+[2a02:120b:2c35:69d0:219:99ff:fe6b:4ec3]:8333\n+[2a02:120b:c3c2:ff60:21f:5bff:fec3:a7ad]:24312\n+[2a02:13b8:4000:1000:216:e6ff:fe92:8619]:8333\n+[2a02:13b8:4000:1000::27]:8333\n+[2a02:17d0:2a:4400:40f:3dd4:b053:47ad]:8333\n+[2a02:180:1:1::517:afb]:8333\n+[2a02:180:6:1::18]:8333\n+[2a02:1810:1d11:f900:6872:f28e:8126:f635]:8333\n+[2a02:27a8:0:1:52e5:49ff:fee3:3b49]:8333\n [2a02:348:86:3011::1]:8333\n-[2a02:4780:1:1::1:8a01]:8333\n-[2a02:578:5002:116::2]:8333\n+[2a02:390:9000:0:218:7dff:fe10:be33]:8333\n+[2a02:582:78c1:7600:2d49:6212:29d3:abb]:8333\n [2a02:6080::1:190b:69e3]:8333\n-[2a02:6080::1:e893:d9d6]:8333\n-[2a02:770:4000::139]:8333\n+[2a02:750:7:3305::575]:8333\n+[2a02:752:100:3::53]:8333\n+[2a02:7aa0:1201::7501:d950]:8333\n [2a02:7aa0:1201::deb3:81a2]:8333\n-[2a02:8010:b001::5860:59b5]:8333\n-[2a02:810d:21c0:f00:a248:1cff:feb8:5348]:8333\n-[2a02:a50::21b:24ff:fe93:4e39]:8333\n-[2a02:a80:0:1200::2]:8333\n-[2a02:c200:0:10:2:1:5830:1]:8333\n-[2a02:c200:0:10:2:5:4692:1]:8333\n-[2a02:c200:0:10:3:0:7158:1]:8333\n-[2a02:c200:0:10::2244:1]:8333\n-[2a02:c200:1:10:2:3:3339:1]:8333\n-[2a02:c200:1:10:2:3:7844:1]:8333\n-[2a02:c200:1:10:2:5:6288:1]:8333\n-[2a02:c200:1:10:3:0:5912:1]:8333\n+[2a02:7aa0:1619::a037:69a6]:8333\n+[2a02:810d:14c0:8694:d250:99ff:fe81:23d9]:8333\n+[2a02:a50::dacb:8aff:fe36:8d2d]:8333\n+[2a02:c200:0:10:3:0:2591:1]:8333\n+[2a02:c200:1:10:2:5:9982:1]:8333\n+[2a02:c200:1:10:3:0:9290:1]:8333\n+[2a02:c205:3000:7158::1]:8333\n+[2a02:c205:3001:4522::1]:8333\n+[2a02:c205:3001:6549::1]:8333\n+[2a02:c207:2008:3772::1]:8333\n+[2a02:c207:2008:6519::1]:8333\n+[2a02:c207:2009:213::1]:8333\n+[2a02:c207:2009:7858::1]:8333\n+[2a02:c207:2010:302::1]:8333\n+[2a02:c207:3001:5824::1]:8333\n+[2a02:ce80:0:20::1]:8333\n [2a03:4000:2:496::8]:8333\n+[2a03:4000:6:416c::53]:8333\n [2a03:4000:6:8009::1]:8333\n-[2a03:4000:6:8063::bcd0]:8333\n-[2a03:4900:fffc:b::2]:8333\n-[2a03:b0c0:1:d0::d:5001]:8333\n+[2a03:4000:9:8e::1]:8333\n+[2a03:7380:2140:17:51fe:3519:b571:4a13]:8333\n+[2a03:b0c0:0:1010::7a3:1001]:8333\n+[2a03:b0c0:0:1010::7aa:4001]:8333\n+[2a03:b0c0:3:d0::1b99:c001]:8333\n+[2a03:b0c0:3:d0::1b99:e001]:8333\n+[2a03:b0c0:3:d0::1b9a:3001]:8333\n+[2a03:b0c0:3:d0::2208:6001]:8333\n+[2a03:b0c0:3:d0::23f7:1001]:8333\n+[2a03:b0c0:3:d0::23f7:9001]:8333\n+[2a03:b0c0:3:d0::23fb:2001]:8333\n+[2a03:b0c0:3:d0::23fb:3001]:8333\n+[2a03:b0c0:3:d0::23fb:5001]:8333\n+[2a03:b0c0:3:d0::23fb:7001]:8333\n+[2a03:b0c0:3:d0::2400:1]:8333\n+[2a03:b0c0:3:d0::2400:3001]:8333\n+[2a03:b0c0:3:d0::2400:e001]:8333\n+[2a03:b0c0:3:d0::2401:e001]:8333\n+[2a03:b0c0:3:d0::2402:2001]:8333\n+[2a03:b0c0:3:d0::2402:8001]:8333\n+[2a03:b0c0:3:d0::2402:9001]:8333\n+[2a03:b0c0:3:d0::2402:b001]:8333\n+[2a03:b0c0:3:d0::2402:d001]:8333\n+[2a03:b0c0:3:d0::2403:1001]:8333\n+[2a03:b0c0:3:d0::2403:2001]:8333\n+[2a03:b0c0:3:d0::2403:4001]:8333\n+[2a03:b0c0:3:d0::2403:6001]:8333\n+[2a03:b0c0:3:d0::2403:a001]:8333\n+[2a03:b0c0:3:d0::2403:b001]:8333\n+[2a03:b0c0:3:d0::2403:f001]:8333\n+[2a03:b0c0:3:d0::2404:6001]:8333\n+[2a03:b0c0:3:d0::2404:b001]:8333\n [2a03:f80:ed15:149:154:155:235:1]:8333\n-[2a03:f80:ed15:149:154:155:241:1]:8333\n-[2a03:f80:ed16:ca7:ea75:b12d:2af:9e2a]:8333\n-[2a04:1980:3100:1aab:290:faff:fe70:a3d8]:8333\n-[2a04:1980:3100:1aab:e61d:2dff:fe29:f590]:8333\n-[2a04:2f80:6:200::89]:8333\n-[2a04:ac00:1:4a0b:5054:ff:fe00:5af5]:8333\n-[2a04:ad80:0:68::35da]:8333\n-3ffk7iumtx3cegbi.onion:8333\n+[2a04:1980:3100:1aac:e61d:2dff:fe29:f241]:8333\n+[2a04:1980:3100:1aac:e61d:2dff:fe29:f251]:8333\n+[2a04:2180:0:1::5a49:3c06]:8333\n+[2a04:2180:1:7::3]:8333\n+[2a04:2e00:5:2e:9a4b:e1ff:fe62:6dc0]:8333\n+[2a04:3542:1000:910:8492:b8ff:fe91:711d]:8333\n+[2a04:dbc3:fffe:0:e61f:13ff:fe95:8401]:8333\n+[2a06:9fc0:2a06:9fc0:2a06:9fc1:67c:e706]:8333\n+[2c0f:f738:2004:82::]:8333\n+2hryb3uh3tzwgnya.onion:8333\n 3nmbbakinewlgdln.onion:8333\n-4j77gihpokxu2kj4.onion:8333\n-546esc6botbjfbxb.onion:8333\n-5at7sq5nm76xijkd.onion:8333\n-77mx2jsxaoyesz2p.onion:8333\n-7g7j54btiaxhtsiy.onion:8333\n-a6obdgzn67l7exu3.onion:8333\n-ab64h7olpl7qpxci.onion:8333\n-am2a4rahltfuxz6l.onion:8333\n-azuxls4ihrr2mep7.onion:8333\n-bitcoin7bi4op7wb.onion:8333\n-bitcoinostk4e4re.onion:8333\n+3qeri3tmhzmpegyv.onion:8333\n+4wdknmecghcmclq5.onion:8333\n+53tsjt6zq3iasv5q.onion:8333\n+5cg7qeywvwo6vxpt.onion:8333\n+5gbcrgqxcbxj253s.onion:8333\n+6cn4ilbwkrkh7gwo.onion:8333\n+6e4jrnn7igeqxmlf.onion:8333\n+6ymgbvnn6d5nfmv4.onion:8333\n+6zsh3bfduhpo7ldl.onion:8333\n+72fq6phv4fg4rhvh.onion:8333\n+7gdqp6npusk4lfwk.onion:8333\n+a7emxol55e623lqc.onion:8333\n+assbiydziq77zaki.onion:8333\n+bafk5ioatlgt7dgl.onion:8333\n bk7yp6epnmcllq72.onion:8333\n-bmutjfrj5btseddb.onion:8333\n-ceeji4qpfs3ms3zc.onion:8333\n-clexmzqio7yhdao4.onion:8333\n+brwqezn6le54w2bb.onion:8333\n+bs4bq6s6qkvt5hpi.onion:8333\n+bup5n5e3kurvjzf3.onion:8333\n+c2tpqkaz4ihjzwgb.onion:8333\n+cernrmrk5zomzozn.onion:8333\n+cfyegj64ht3jpodr.onion:8333\n+cg5vg54cazzpvoug.onion:8333\n+cgk4u2lxrvml4jvb.onion:8333\n+cjygd7pu5lqkky5j.onion:8333\n+d6wubsdtr46dd5ki.onion:8333\n+dfq6yjc3aelplwr4.onion:8333\n+dqpxwlpnv3z3hznl.onion:8333\n+eamfospuveabaimd.onion:8333\n+ep2mjzox3kvb6ax4.onion:8333\n+fpbxb4wjudiw2w5a.onion:8333\n+fu5hfsbbf5jwsvhv.onion:8333\n+g4freoibsczujle3.onion:8333\n gb5ypqt63du3wfhn.onion:8333\n-h2vlpudzphzqxutd.onion:8333\n-n42h7r6oumcfsbrs.onion:4176\n-ncwk3lutemffcpc4.onion:8333\n+ggdy2pb2avlbtjwq.onion:8333\n+gh2aiddzxmvyrnue.onion:8333\n+gnxgylbgzvaazkq7.onion:8333\n+hnizdxnejel64ubk.onion:8333\n+htvdcmlc3abji2ab.onion:8443\n+hwuboois4gslupgx.onion:8333\n+hxz6gowludlj6d5a.onion:8333\n+j6umo4bnsztpsonc.onion:8333\n+jdunmaocwbbnw565.onion:8333\n+ktv3qlxl7xvmdlf4.onion:8333\n+kvd44sw7skb5folw.onion:8333\n+kwimnzm6vd4zakvl.onion:8333\n+la5xhk3lprxzxmz2.onion:8333\n+lc7cx67end26uutp.onion:8352\n+mwu5og2agcspmgkx.onion:8333\n+mzxkipiyekaoh7my.onion:8333\n+n6rwlrtwpqc7qwo7.onion:8333\n+nj36424yccqph62z.onion:8333\n+o256w7t3vcgktmxk.onion:8333\n+o4sl5na6jeqgi3l6.onion:8333\n okdzjarwekbshnof.onion:8333\n-pjghcivzkoersesd.onion:8333\n-rw7ocjltix26mefn.onion:8333\n-uws7itep7o3yinxo.onion:8333\n-vk3qjdehyy4dwcxw.onion:8333\n+oyebydl2pacx6v26.onion:8333\n+p5mx2imj75dpmime.onion:8333\n+psco6bxjewljrczx.onion:8333\n+pxtgswet6tlgrbwj.onion:8333\n+rb4v3fhgx2zr4rre.onion:8333\n+rjlnp3hwvrsmap6e.onion:8333\n+rlafimkctvz63llg.onion:8333\n+rxjvy5eyttep5tts.onion:8333\n+seoskudzk6vn6mqz.onion:8333\n+tpgdufxxsw3jkrdf.onion:8333\n+tuiyvqgi3o675pjb.onion:8333\n+tx4zd7d5exonnblh.onion:8333\n+uokg6avfgbhofls3.onion:8333\n+v3gjphgqy5hygcml.onion:8333\n+vhdoxqq63xr53ol7.onion:8333\n+visevrizz3quyagj.onion:8333\n vqpye2k5rcqvj5mq.onion:8333\n-wpi7rpvhnndl52ee.onion:8333\n+wfsx2gi7djhy22hk.onion:8333\n+wg6vwmbrzyyzapun.onion:8333\n+xub4w3w4wwk56xiq.onion:8333\n+ycivnom44dmxx4ob.onion:8333\n+ywskufc62bf2fum4.onion:8333\n+z4fax2vxg23t2ddf.onion:8333\n+zo5dklwelmdrpo5n.onion:8333"
      },
      {
        "sha": "396a411689a814025e1f9cfe6be15a4238e3ce9a",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 1031,
        "deletions": 800,
        "changes": 1831,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      }
    ]
  },
  {
    "sha": "a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDMyYWEwYWE4MzMxMGYwZWIwNTMzMjlmYjRiMjY3MGNlOTJiMWM2",
    "commit": {
      "author": {
        "name": "Takashi Mitsuta",
        "email": "knhn1117@gmail.com",
        "date": "2017-02-12T07:44:43Z"
      },
      "committer": {
        "name": "Takashi Mitsuta",
        "email": "knhn1117@gmail.com",
        "date": "2017-02-12T07:44:43Z"
      },
      "message": "Remove unused module from rpc-tests",
      "tree": {
        "sha": "83137ddbaa52dc7066f1911015b2b6a199efff8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83137ddbaa52dc7066f1911015b2b6a199efff8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 1,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e03bc1c37b6dcab4c9fee75032b4ef3385c5370d",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -5,7 +5,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.mininode import ToHex, NetworkThread\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *"
      },
      {
        "sha": "1b099f933967524d9826229e270e78fa13b9188c",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -9,8 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.mininode import *\n from test_framework.blocktools import *\n \n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)"
      },
      {
        "sha": "e02cb4c300b039ac25a25365edf66ceb750229b3",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -8,10 +8,8 @@\n from test_framework import blocktools\n from test_framework.mininode import CTransaction\n from test_framework.util import *\n-from test_framework.util import *\n \n import io\n-import time\n \n # Sequence number that is BIP 125 opt-in and BIP 68-compliant\n BIP125_SEQUENCE_NUMBER = 0xfffffffd"
      },
      {
        "sha": "47dfe4f5fd18ee12a248c26615f53d97fc68993d",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n-from test_framework.siphash import siphash256\n from test_framework.script import CScript, OP_TRUE\n \n '''"
      },
      {
        "sha": "f9a40955c06c2b4411d34d23d001f58f703e5b76",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -3,17 +3,11 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-from decimal import Decimal\n-\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.authproxy import JSONRPCException\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,\n-    assert_is_hex_string,\n-    assert_is_hash_string,\n     start_nodes,\n-    connect_nodes_bi,\n )\n \n "
      },
      {
        "sha": "45a9db05717372008c2c07fa62be66d9a39f0491",
        "filename": "qa/rpc-tests/wallet-accounts.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a432aa0aa83310f0eb053329fb4b2670ce92b1c6/qa/rpc-tests/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-accounts.py?ref=a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "patch": "@@ -6,9 +6,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     start_nodes,\n-    start_node,\n     assert_equal,\n-    connect_nodes_bi,\n )\n \n "
      }
    ]
  },
  {
    "sha": "0b4f273e9cf7166dbd103e116b5d991e359e673d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjRmMjczZTljZjcxNjZkYmQxMDNlMTE2YjVkOTkxZTM1OWU2NzNk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-13T22:49:10Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-13T22:50:16Z"
      },
      "message": "Bugfix: Qt/Options: Restore persistent \"restart required\" notice",
      "tree": {
        "sha": "cf8c3c194e4c705cdcd668177f92ddc25ce9955f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf8c3c194e4c705cdcd668177f92ddc25ce9955f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b4f273e9cf7166dbd103e116b5d991e359e673d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4f273e9cf7166dbd103e116b5d991e359e673d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4f273e9cf7166dbd103e116b5d991e359e673d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4f273e9cf7166dbd103e116b5d991e359e673d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd836c1d855b92e7c73ab31979f471c4f8dad68"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6d65f4c11621be9d04fe3f008865235f43379ec6",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b4f273e9cf7166dbd103e116b5d991e359e673d/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b4f273e9cf7166dbd103e116b5d991e359e673d/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=0b4f273e9cf7166dbd103e116b5d991e359e673d",
        "patch": "@@ -258,6 +258,9 @@ void OptionsDialog::showRestartWarning(bool fPersistent)\n void OptionsDialog::clearStatusLabel()\n {\n     ui->statusLabel->clear();\n+    if (model && model->isRestartRequired()) {\n+        showRestartWarning(true);\n+    }\n }\n \n void OptionsDialog::updateProxyValidationState()\n@@ -267,7 +270,7 @@ void OptionsDialog::updateProxyValidationState()\n     if (pUiProxyIp->isValid() && (!ui->proxyPort->isEnabled() || ui->proxyPort->text().toInt() > 0) && (!ui->proxyPortTor->isEnabled() || ui->proxyPortTor->text().toInt() > 0))\n     {\n         setOkButtonState(otherProxyWidget->isValid()); //only enable ok button if both proxys are valid\n-        ui->statusLabel->clear();\n+        clearStatusLabel();\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YWNmMjVjYzAxM2MwMTNlZTViMDdkYmE3YjEzMTliN2M1YTdiNmE0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-13T22:54:51Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-13T22:54:51Z"
      },
      "message": "Return error when importmulti called with invalid address.\n\nLack of error checking noticed by Alex Morcos <morcos@chaincode.com>",
      "tree": {
        "sha": "4565391074de7304a344e97c1418ada6ff11fc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4565391074de7304a344e97c1418ada6ff11fc38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43964610e5b3e97f20524dc76a7c11a829c18a0c",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "patch": "@@ -59,6 +59,16 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n \n+        print(\"Should not import an invalid address\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": \"not valid address\",\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Invalid address')\n \n         # ScriptPubKey + internal\n         print(\"Should import a scriptPubKey with internal flag\")"
      },
      {
        "sha": "738643eb0170baa395006b069ec4440ea3e3ae42",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "patch": "@@ -671,6 +671,9 @@ UniValue processImport(const UniValue& data) {\n \n         if (!isScript) {\n             address = CBitcoinAddress(output);\n+            if (!address.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+            }\n             script = GetScriptForDestination(address.Get());\n         } else {\n             if (!IsHex(output)) {"
      }
    ]
  },
  {
    "sha": "c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDViOWZiNTRjNWNhMDY4YTVlMjc2YzNiZDZlYmY0YWU3MjBmNmY3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-07T17:02:02Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:34Z"
      },
      "message": "net: correctly ban before the handshake is complete\n\n7a8c251901 made a change to avoid getting into SendMessages() until the\nversion handshake (VERSION + VERACK) is complete. That was done to avoid\nleaking out messages to nodes who could connect, but never bothered sending\nus their version/verack.\n\nUnfortunately, the ban tally and possible disconnect are done as part of\nSendMessages(). So after 7a8c251901, if a peer managed to do something\nbannable before completing the handshake (say send 100 non-version messages\nbefore their version), they wouldn't actually end up getting\ndisconnected/banned. That's fixed here by checking the banscore as part of\nProcessMessages() in addition to SendMessages().",
      "tree": {
        "sha": "0bdc565d53b939f0f227b108406c82f034cb5e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bdc565d53b939f0f227b108406c82f034cb5e61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d304fef3746039183f51b3ac8f4774dcf3a64f59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d304fef3746039183f51b3ac8f4774dcf3a64f59"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 37,
      "deletions": 23
    },
    "files": [
      {
        "sha": "587e857970c482d91b89c5749bcc61f4816ed695",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 23,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
        "patch": "@@ -2596,6 +2596,36 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n+{\n+    AssertLockHeld(cs_main);\n+    CNodeState &state = *State(pnode->GetId());\n+\n+    BOOST_FOREACH(const CBlockReject& reject, state.rejects) {\n+        connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+    }\n+    state.rejects.clear();\n+\n+    if (state.fShouldBan) {\n+        state.fShouldBan = false;\n+        if (pnode->fWhitelisted)\n+            LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n+        else if (pnode->fAddnode)\n+            LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n+        else {\n+            pnode->fDisconnect = true;\n+            if (pnode->addr.IsLocal())\n+                LogPrintf(\"Warning: not banning local peer %s!\\n\", pnode->addr.ToString());\n+            else\n+            {\n+                connman.Ban(pnode->addr, BanReasonNodeMisbehaving);\n+            }\n+        }\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n@@ -2706,8 +2736,12 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n             PrintExceptionContinue(NULL, \"ProcessMessages()\");\n         }\n \n-        if (!fRet)\n+        if (!fRet) {\n             LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n+        }\n+\n+        LOCK(cs_main);\n+        SendRejectsAndCheckIfBanned(pfrom, connman);\n \n     return fMoreWork;\n }\n@@ -2773,30 +2807,10 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         if (!lockMain)\n             return true;\n \n+        if (SendRejectsAndCheckIfBanned(pto, connman))\n+            return true;\n         CNodeState &state = *State(pto->GetId());\n \n-        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n-        state.rejects.clear();\n-\n-        if (state.fShouldBan) {\n-            state.fShouldBan = false;\n-            if (pto->fWhitelisted)\n-                LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pto->addr.ToString());\n-            else if (pto->fAddnode)\n-                LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pto->addr.ToString());\n-            else {\n-                pto->fDisconnect = true;\n-                if (pto->addr.IsLocal())\n-                    LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n-                else\n-                {\n-                    connman.Ban(pto->addr, BanReasonNodeMisbehaving);\n-                }\n-                return true;\n-            }\n-        }\n-\n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n         if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {"
      }
    ]
  },
  {
    "sha": "8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTAyZTdhY2JlMGY0MmZkNmU2OTc5NjgxYmM5YzQ2MTBjNGZiOGNi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:02:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:35Z"
      },
      "message": "net: parse reject earlier\n\nPrior to this change, all messages were ignored until a VERSION message was\nreceived, as well as possibly incurring a ban score.\n\nSince REJECT messages can be sent at any time (including as a response to a bad\nVERSION message), make sure to always parse them.\n\nMoving this parsing up keeps it from being caught in the\nif (pfrom->nVersion == 0) check below.",
      "tree": {
        "sha": "97a314e94a2d0fc3915fb0f62003c2b1cc67f122",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97a314e94a2d0fc3915fb0f62003c2b1cc67f122"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c45b9fb54c5ca068a5e276c3bd6ebf4ae720f6f7"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 24,
      "deletions": 26
    },
    "files": [
      {
        "sha": "b304da76c254a16f560ad4d2259ded7b978363e8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 26,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
        "patch": "@@ -1190,8 +1190,31 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n     }\n \n+    if (strCommand == NetMsgType::REJECT)\n+    {\n+        if (fDebug) {\n+            try {\n+                std::string strMsg; unsigned char ccode; std::string strReason;\n+                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n+\n+                std::ostringstream ss;\n+                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n \n-    if (strCommand == NetMsgType::VERSION)\n+                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n+                {\n+                    uint256 hash;\n+                    vRecv >> hash;\n+                    ss << \": hash \" << hash.ToString();\n+                }\n+                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n+            } catch (const std::ios_base::failure&) {\n+                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n+                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n+            }\n+        }\n+    }\n+\n+    else if (strCommand == NetMsgType::VERSION)\n     {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n@@ -2544,31 +2567,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fRelayTxes = true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::REJECT)\n-    {\n-        if (fDebug) {\n-            try {\n-                std::string strMsg; unsigned char ccode; std::string strReason;\n-                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n-\n-                std::ostringstream ss;\n-                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n-\n-                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n-                {\n-                    uint256 hash;\n-                    vRecv >> hash;\n-                    ss << \": hash \" << hash.ToString();\n-                }\n-                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n-            } catch (const std::ios_base::failure&) {\n-                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n-                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n-            }\n-        }\n-    }\n-\n     else if (strCommand == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;"
      }
    ]
  },
  {
    "sha": "cbfc5a6728d389fbb15e0555cdf50f1b04595106",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmZjNWE2NzI4ZDM4OWZiYjE1ZTA1NTVjZGY1MGYxYjA0NTk1MTA2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:04:53Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:55:35Z"
      },
      "message": "net: require a verack before responding to anything else\n\n7a8c251901 made this logic hard to follow. After that change, messages would\nnot be sent to a peer via SendMessages() before the handshake was complete, but\nmessages could still be sent as a response to an incoming message.\n\nFor example, if a peer had not yet sent a verack, we wouldn't notify it about\nnew blocks, but we would respond to a PING with a PONG.\n\nThis change makes the behavior straightforward: until we've received a verack,\nnever send any message other than version/verack/reject.\n\nThe behavior until a VERACK is received has always been undefined, this change\njust tightens our policy.\n\nThis also makes testing much easier, because we can now connect but not send\nversion/verack, and anything sent to us is an error.",
      "tree": {
        "sha": "81dc1e8af09985a0bb8ec094af118261cd84c595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81dc1e8af09985a0bb8ec094af118261cd84c595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8502e7acbe0f42fd6e6979681bc9c4610c4fb8cb"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f458a352560cc4eb9fc34e77dd631c0e9b93b0fb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbfc5a6728d389fbb15e0555cdf50f1b04595106/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbfc5a6728d389fbb15e0555cdf50f1b04595106/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=cbfc5a6728d389fbb15e0555cdf50f1b04595106",
        "patch": "@@ -1420,6 +1420,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fSuccessfullyConnected = true;\n     }\n \n+    else if (!pfrom->fSuccessfullyConnected)\n+    {\n+        // Must have a verack message before anything else\n+        LOCK(cs_main);\n+        Misbehaving(pfrom->GetId(), 1);\n+        return false;\n+    }\n \n     else if (strCommand == NetMsgType::ADDR)\n     {"
      }
    ]
  },
  {
    "sha": "5b5e4f8330634dc33446854677badc52aef43b82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjVlNGY4MzMwNjM0ZGMzMzQ0Njg1NDY3N2JhZGM1MmFlZjQzYjgy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:35:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "message": "qa: mininode learns when a socket connects, not its first action",
      "tree": {
        "sha": "90490eb07008b587e6b648e1888d252276d9d17e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90490eb07008b587e6b648e1888d252276d9d17e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b5e4f8330634dc33446854677badc52aef43b82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5e4f8330634dc33446854677badc52aef43b82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5e4f8330634dc33446854677badc52aef43b82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5e4f8330634dc33446854677badc52aef43b82/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbfc5a6728d389fbb15e0555cdf50f1b04595106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbfc5a6728d389fbb15e0555cdf50f1b04595106",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbfc5a6728d389fbb15e0555cdf50f1b04595106"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 24,
      "deletions": 12
    },
    "files": [
      {
        "sha": "696a065282c624125718ba54bb58674723115bdf",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5e4f8330634dc33446854677badc52aef43b82/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5e4f8330634dc33446854677badc52aef43b82/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=5b5e4f8330634dc33446854677badc52aef43b82",
        "patch": "@@ -1614,7 +1614,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1631,14 +1631,16 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n         self.disconnect = False\n         self.nServices = 0\n \n-        # stuff version msg into sendbuf\n-        vt = msg_version()\n-        vt.nServices = services\n-        vt.addrTo.ip = self.dstaddr\n-        vt.addrTo.port = self.dstport\n-        vt.addrFrom.ip = \"0.0.0.0\"\n-        vt.addrFrom.port = 0\n-        self.send_message(vt, True)\n+        if send_version:\n+            # stuff version msg into sendbuf\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            self.send_message(vt, True)\n+\n         print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n             + str(dstport))\n \n@@ -1652,8 +1654,9 @@ def show_debug_msg(self, msg):\n         self.log.debug(msg)\n \n     def handle_connect(self):\n-        self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n-        self.state = \"connected\"\n+        if self.state != \"connected\":\n+            self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n+            self.state = \"connected\"\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n@@ -1681,11 +1684,20 @@ def readable(self):\n \n     def writable(self):\n         with mininode_lock:\n+            pre_connection = self.state == \"connecting\"\n             length = len(self.sendbuf)\n-        return (length > 0)\n+        return (length > 0 or pre_connection)\n \n     def handle_write(self):\n         with mininode_lock:\n+            # asyncore does not expose socket connection, only the first read/write\n+            # event, thus we must check connection manually here to know when we\n+            # actually connect\n+            if self.state == \"connecting\":\n+                self.handle_connect()\n+            if not self.writable():\n+                return\n+\n             try:\n                 sent = self.send(self.sendbuf)\n             except:"
      }
    ]
  },
  {
    "sha": "8650bbb660eaf8c81d714f1518ecc8c35ae17463",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjUwYmJiNjYwZWFmOGM4MWQ3MTRmMTUxOGVjYzhjMzVhZTE3NDYz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T22:40:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "message": "qa: Expose on-connection to mininode listeners",
      "tree": {
        "sha": "c5b6a654665ccf928fe12400cea292dfd84e1bf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5b6a654665ccf928fe12400cea292dfd84e1bf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b5e4f8330634dc33446854677badc52aef43b82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5e4f8330634dc33446854677badc52aef43b82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5e4f8330634dc33446854677badc52aef43b82"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b563c58ae1e1a17e50caa42f165a28fd3d739d7",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8650bbb660eaf8c81d714f1518ecc8c35ae17463/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8650bbb660eaf8c81d714f1518ecc8c35ae17463/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=8650bbb660eaf8c81d714f1518ecc8c35ae17463",
        "patch": "@@ -1540,6 +1540,7 @@ def on_ping(self, conn, message):\n         if conn.ver_send > BIP0031_VERSION:\n             conn.send_message(msg_pong(message.nonce))\n     def on_reject(self, conn, message): pass\n+    def on_open(self, conn): pass\n     def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n@@ -1657,6 +1658,7 @@ def handle_connect(self):\n         if self.state != \"connected\":\n             self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n             self.state = \"connected\"\n+            self.cb.on_open(self)\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \""
      }
    ]
  },
  {
    "sha": "d9434918d277bba534933ebc8c63ba81e613f603",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTQzNDkxOGQyNzdiYmE1MzQ5MzNlYmM4YzYzYmE4MWU2MTNmNjAz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-08T06:17:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-13T23:56:03Z"
      },
      "message": "qa: add a test to detect leaky p2p messages\n\nThis is certainly not exhaustive, but it's better than nothing. Adds checks\nfor:\n\n- Any message received before sending a version\n- Any message received other than version/reject before sending a verack\n\nIt also tries to goad the remote into sending a pong, address, or block\nannouncement.",
      "tree": {
        "sha": "4bf71e301e86cdab80fe9648b01fa904d66b8d31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bf71e301e86cdab80fe9648b01fa904d66b8d31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9434918d277bba534933ebc8c63ba81e613f603",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9434918d277bba534933ebc8c63ba81e613f603",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9434918d277bba534933ebc8c63ba81e613f603",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9434918d277bba534933ebc8c63ba81e613f603/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8650bbb660eaf8c81d714f1518ecc8c35ae17463",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8650bbb660eaf8c81d714f1518ecc8c35ae17463",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8650bbb660eaf8c81d714f1518ecc8c35ae17463"
      }
    ],
    "stats": {
      "total": 146,
      "additions": 146,
      "deletions": 0
    },
    "files": [
      {
        "sha": "31018125416a25bae5cb886641b6c355d47a4bae",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9434918d277bba534933ebc8c63ba81e613f603/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9434918d277bba534933ebc8c63ba81e613f603/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=d9434918d277bba534933ebc8c63ba81e613f603",
        "patch": "@@ -154,6 +154,7 @@\n     'bumpfee.py',\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n+    'p2p-leaktests.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "41ca84d779890cded199129d7739fbbd348a894c",
        "filename": "qa/rpc-tests/p2p-leaktests.py",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9434918d277bba534933ebc8c63ba81e613f603/qa/rpc-tests/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9434918d277bba534933ebc8c63ba81e613f603/qa/rpc-tests/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-leaktests.py?ref=d9434918d277bba534933ebc8c63ba81e613f603",
        "patch": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+'''\n+Test for message sending before handshake completion\n+\n+A node should never send anything other than VERSION/VERACK/REJECT until it's\n+received a VERACK.\n+\n+This test connects to a node and sends it a few messages, trying to intice it\n+into sending us something it shouldn't.\n+'''\n+\n+banscore = 10\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        self.connection = None\n+        self.unexpected_msg = False\n+        self.connected = False\n+        super().__init__()\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unexpected_msg = True\n+        print(\"should not have received message: %s\" % message.command)\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+    # send a bunch of veracks without sending a message. This should get us disconnected.\n+    # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n+    def on_open(self, conn):\n+        super().on_open(conn)\n+        for i in range(banscore):\n+            self.send_message(msg_verack())\n+\n+    def on_reject(self, conn, message): pass\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        self.version_received = False\n+        super().__init__()\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+    # When version is received, don't reply with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.version_received = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        assert(wait_until(lambda: no_version_bannode.connected and no_version_idlenode.connected and no_verack_idlenode.version_received, timeout=10))\n+\n+        # Mine a block and make sure that it's not sent to the connected nodes\n+        self.nodes[0].generate(1)\n+\n+        #Give the node enough time to possibly leak out a message\n+        time.sleep(5)\n+\n+        #This node should have been banned\n+        assert(no_version_bannode.connection.state == \"closed\")\n+\n+        [conn.disconnect_node() for conn in connections]\n+\n+        # Make sure no unexpected messages came in\n+        assert(no_version_bannode.unexpected_msg == False)\n+        assert(no_version_idlenode.unexpected_msg == False)\n+        assert(no_verack_idlenode.unexpected_msg == False)\n+\n+if __name__ == '__main__':\n+    P2PLeakTest().main()"
      }
    ]
  },
  {
    "sha": "ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzY2ZDA2ZTZlZjM4YjRjMmNmMjI0NmJhMmVlYjNkMTdhNjA0MGU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T11:10:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T11:21:34Z"
      },
      "message": "Merge #9735: devtools: Handle Qt formatting characters edge-case in update-translations.py\n\n7179e7c qt: Periodic translations update (Wladimir J. van der Laan)\n5e903a5 devtools: Handle Qt formatting characters edge-case in update-translations.py (Wladimir J. van der Laan)",
      "tree": {
        "sha": "eccd7c588c7bd2982e823809c4efc902a18fe211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eccd7c588c7bd2982e823809c4efc902a18fe211"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYoug+AAoJEHSBCwEjRsmm/P8IAI9LXS9j7xC/9r6nemVyT2vq\nmAlYue5OiN0vuCU1uhQlAW54mRZ9r/gJW9m3BxDitYbtExiUH0q3Kad14I9xozZr\n8sFv5k42w/u6pEsk7VQUBwwz7A81+6gTx+gVRnbyimdz+b76468U81C3odmMSrxw\nI+sVyVTNeyrgms6a9kjAHChMxIb/JmdDYjXfRRrrpSrCiIPV/wPbMJ8ooK4ALomb\nL6Cg5NuWRXzvB7hJup0pYbt/NJRn81YebicLh45uqpI1z8hEanHgx3tlV53dRb/C\nm1KYQEsMpQcLOwuODB+7Mr1iA/PbDMpR9uYQbp+4hduKKcitMN3rk/R4/XfRNpg=\n=0qo/\n-----END PGP SIGNATURE-----",
        "payload": "tree eccd7c588c7bd2982e823809c4efc902a18fe211\nparent d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81\nparent 7179e7ca0db493dccbfd88f64738252844aab6ff\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487070653 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487071294 +0100\n\nMerge #9735: devtools: Handle Qt formatting characters edge-case in update-translations.py\n\n7179e7c qt: Periodic translations update (Wladimir J. van der Laan)\n5e903a5 devtools: Handle Qt formatting characters edge-case in update-translations.py (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      },
      {
        "sha": "7179e7ca0db493dccbfd88f64738252844aab6ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7179e7ca0db493dccbfd88f64738252844aab6ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7179e7ca0db493dccbfd88f64738252844aab6ff"
      }
    ],
    "stats": {
      "total": 1744,
      "additions": 1520,
      "deletions": 224
    },
    "files": [
      {
        "sha": "2011841005930eb975a54bcd59693c27b4a70f2c",
        "filename": "contrib/devtools/update-translations.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/contrib/devtools/update-translations.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/contrib/devtools/update-translations.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/update-translations.py?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -65,6 +65,14 @@ def split_format_specifiers(specifiers):\n         else:\n             other.append(s)\n \n+    # If both numeric format specifiers and \"others\" are used, assume we're dealing\n+    # with a Qt-formatted message. In the case of Qt formatting (see https://doc.qt.io/qt-5/qstring.html#arg)\n+    # only numeric formats are replaced at all. This means \"(percentage: %1%)\" is valid, without needing\n+    # any kind of escaping that would be necessary for strprintf. Without this, this function\n+    # would wrongly detect '%)' as a printf format specifier.\n+    if numeric:\n+        other = []\n+\n     # numeric (Qt) can be present in any order, others (strprintf) must be in specified order\n     return set(numeric),other\n "
      },
      {
        "sha": "f38c425137020ded31353635e466c526a0127f0f",
        "filename": "src/qt/locale/bitcoin_cs.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_cs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_cs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cs.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Kliknut\u00edm op\u011bt umo\u017en\u00ed\u0161 spojen\u00ed do s\u00edt\u011b.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synchronizuji z\u00e1hlav\u00ed blok\u016f (%1 %)\u2026</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Vytv\u00e1\u0159\u00edm nov\u00fd index blok\u016f na disku...</translation>\n@@ -481,6 +485,10 @@\n         <source>%1 client</source>\n         <translation>%1 klient</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>P\u0159ipojuji se\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Stahuji...</translation>\n@@ -3089,6 +3097,14 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Spustit p\u0159\u00edkaz, kdy\u017e se objev\u00ed transakce t\u00fdkaj\u00edc\u00ed se pen\u011b\u017eenky (%s se v p\u0159\u00edkazu nahrad\u00ed za TxID)</translation>\n     </message>\n+    <message>\n+        <source>Extra transactions to keep in memory for compact block reconstructions (default: %u)</source>\n+        <translation>Po\u010det extra transakc\u00ed, kter\u00e9 se maj\u00ed dr\u017eet v pam\u011bti pro \u00fa\u010dely rekonstrukce kompaktn\u00edch blok\u016f (v\u00fdchoz\u00ed: %u)</translation>\n+    </message>\n+    <message>\n+        <source>If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)</source>\n+        <translation>Pokud je tenhle blok v \u0159et\u011bzci, tak p\u0159edpokl\u00e1dat, \u017ee on i jeho n\u00e1sledn\u00edci jsou platn\u00ed, a potenci\u00e1ln\u011b p\u0159esko\u010dit ov\u011b\u0159ov\u00e1n\u00ed jejich skript\u016f (0 = ov\u011b\u0159ovat v\u0161e, v\u00fdchoz\u00ed: %s, testnet: %s)</translation>\n+    </message>\n     <message>\n         <source>Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)</source>\n         <translation>Maxim\u00e1ln\u00ed povolen\u00e9 se\u0159izov\u00e1n\u00ed \u010dasu medi\u00e1nem \u010das\u016f prot\u011bj\u0161k\u016f. M\u00edstn\u00ed vn\u00edm\u00e1n\u00ed \u010dasu m\u016f\u017ee b\u00fdt ovlivn\u011bno prot\u011bj\u0161ky, a to dop\u0159edu nebo dozadu a\u017e o toto mno\u017estv\u00ed. (v\u00fdchoz\u00ed: %u vte\u0159in)</translation>\n@@ -3105,6 +3121,14 @@\n         <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n         <translation>Pros\u00edme, zapoj se nebo p\u0159isp\u011bj, pokud ti %s p\u0159ijde u\u017eite\u010dn\u00fd. V\u00edce informac\u00ed o programu je na %s.</translation>\n     </message>\n+    <message>\n+        <source>Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;%u = automatically prune block files to stay under the specified target size in MiB)</source>\n+        <translation>Omezit n\u00e1roky na \u00falo\u017en\u00fd prostor pro\u0159ez\u00e1v\u00e1n\u00edm (maz\u00e1n\u00edm) star\u00fdch blok\u016f. Tato volba tak\u00e9 umo\u017en\u00ed pou\u017e\u00edt RPC vol\u00e1n\u00ed pruneblockchain ke smaz\u00e1n\u00ed konkr\u00e9tn\u00edch blok\u016f a d\u00e1le automatick\u00e9 pro\u0159ez\u00e1v\u00e1n\u00ed star\u00fdch blok\u016f, pokud je zad\u00e1na c\u00edlov\u00e1 velikost soubor\u016f s bloky v MiB. Tento re\u017eim nen\u00ed slu\u010diteln\u00fd s -txindex ani -rescan. Upozorn\u011bn\u00ed: op\u011btovn\u00e1 zm\u011bna tohoto nastaven\u00ed bude vy\u017eadovat nov\u00e9 sta\u017een\u00ed cel\u00e9ho \u0159et\u011bzce blok\u016f. (v\u00fdchoz\u00ed: 0 = bloky nepro\u0159ez\u00e1vat, 1 = povolit ru\u010dn\u00ed pro\u0159ez\u00e1v\u00e1n\u00ed skrze RPC, &gt;%u = automatick\u00e9 pro\u0159ez\u00e1v\u00e1n\u00ed blok\u016f tak, aby byla udr\u017eena c\u00edlov\u00e1 velikost soubor\u016f s bloky, v MiB)</translation>\n+    </message>\n+    <message>\n+        <source>Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)</source>\n+        <translation>Nastavit nejni\u017e\u0161\u00ed akceptovateln\u00fd poplatek (v %s/kB) pro transakce, kter\u00e9 maj\u00ed b\u00fdt zahrnuty do nov\u00fdch blok\u016f. (v\u00fdchoz\u00ed: %s)</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>Nastaven\u00ed po\u010dtu vl\u00e1ken pro verifikaci skript\u016f (%u a\u017e %d, 0 = automaticky, &lt;0 = nechat dan\u00fd po\u010det jader voln\u00fd, v\u00fdchoz\u00ed: %d)</translation>"
      },
      {
        "sha": "f62f1e4a734d39538a281a90f29a0d698cfd70b6",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -1083,7 +1083,7 @@\n         <translation>Use a custom data directory:</translation>\n     </message>\n     <message>\n-        <location filename=\"../intro.cpp\" line=\"+89\"/>\n+        <location filename=\"../intro.cpp\" line=\"+94\"/>\n         <source>Error: Specified data directory &quot;%1&quot; cannot be created.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>"
      },
      {
        "sha": "313d5e3be14b67ef1ec205503df3287884e24b26",
        "filename": "src/qt/locale/bitcoin_et.ts",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_et.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_et.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_et.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -214,6 +214,10 @@\n </context>\n <context>\n     <name>BanTableModel</name>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/V\u00f5rgumask</translation>\n+    </message>\n     </context>\n <context>\n     <name>BitcoinGUI</name>\n@@ -787,6 +791,10 @@\n         <source>&amp;Window</source>\n         <translation>&amp;Aken</translation>\n     </message>\n+    <message>\n+        <source>Hide tray icon</source>\n+        <translation>Peida tegumiriba ikoon</translation>\n+    </message>\n     <message>\n         <source>Show only a tray icon after minimizing the window.</source>\n         <translation>Minimeeri systray alale.</translation>\n@@ -903,10 +911,30 @@\n         <source>N/A</source>\n         <translation>N/A</translation>\n     </message>\n+    <message>\n+        <source>%1 ms</source>\n+        <translation>%1 ms</translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n hour(s)</source>\n+        <translation><numerusform>%n tund</numerusform><numerusform>%n tundi</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n day(s)</source>\n+        <translation><numerusform>%n p\u00e4ev</numerusform><numerusform>%n p\u00e4eva</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n week(s)</source>\n+        <translation><numerusform>%n n\u00e4dal</numerusform><numerusform>%n n\u00e4dalat</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 ja %2</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n year(s)</source>\n+        <translation><numerusform>%n aasta</numerusform><numerusform>%n aastat</numerusform></translation>\n+    </message>\n     </context>\n <context>\n     <name>QObject::QObject</name>"
      },
      {
        "sha": "21800231596a0bd70db1ab0f290fd1ec9bcf5534",
        "filename": "src/qt/locale/bitcoin_fr.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_fr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_fr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_fr.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -329,6 +329,10 @@\n         <source>Click to enable network activity again.</source>\n         <translation>Cliquer pour r\u00e9activer l'activit\u00e9 r\u00e9seau.</translation>\n     </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synchronisation des en-t\u00eates (%1)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>R\u00e9indexation des blocs sur le disque...</translation>"
      },
      {
        "sha": "9f2c7626de09550ee73eb86eaed9c3acbc01bfc7",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -702,10 +702,6 @@\n         <source>Error</source>\n         <translation>Errore</translation>\n     </message>\n-    <message numerus=\"yes\">\n-        <source>%n GB of free space available</source>\n-        <translation><numerusform>GB di spazio libero disponibile</numerusform><numerusform>%n GB di spazio disponibile</numerusform></translation>\n-    </message>\n     <message numerus=\"yes\">\n         <source>(of %n GB needed)</source>\n         <translation><numerusform>(di %nGB richiesti)</numerusform><numerusform>(%n GB richiesti)</numerusform></translation>"
      },
      {
        "sha": "3202587cbd54bc3773667a348375112c358ded02",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 24,
        "deletions": 16,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -23,7 +23,7 @@\n     </message>\n     <message>\n         <source>C&amp;lose</source>\n-        <translation>Fechar</translation>\n+        <translation>&amp;Fechar</translation>\n     </message>\n     <message>\n         <source>Delete the currently selected address from the list</source>\n@@ -39,7 +39,7 @@\n     </message>\n     <message>\n         <source>&amp;Delete</source>\n-        <translation>&amp;Excluir</translation>\n+        <translation>E&amp;xcluir</translation>\n     </message>\n     <message>\n         <source>Choose the address to send coins to</source>\n@@ -102,15 +102,15 @@\n     <name>AddressTableModel</name>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Address</source>\n         <translation>Endere\u00e7o</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n </context>\n <context>\n@@ -231,7 +231,7 @@\n     <name>BitcoinGUI</name>\n     <message>\n         <source>Sign &amp;message...</source>\n-        <translation>&amp;Assinar mensagem...</translation>\n+        <translation>Assinar &amp;mensagem...</translation>\n     </message>\n     <message>\n         <source>Synchronizing with network...</source>\n@@ -375,7 +375,7 @@\n     </message>\n     <message>\n         <source>&amp;Show / Hide</source>\n-        <translation>&amp;Exibir/Ocultar</translation>\n+        <translation>&amp;Exibir / Ocultar</translation>\n     </message>\n     <message>\n         <source>Show or hide the main Window</source>\n@@ -479,7 +479,7 @@\n     </message>\n     <message>\n         <source>%1 client</source>\n-        <translation>%1</translation>\n+        <translation>%1 cliente</translation>\n     </message>\n     <message>\n         <source>Connecting to peers...</source>\n@@ -688,7 +688,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>change from %1 (%2)</source>\n@@ -1360,6 +1360,10 @@\n         <source>Node/Service</source>\n         <translation>N\u00f3/Servi\u00e7o</translation>\n     </message>\n+    <message>\n+        <source>NodeId</source>\n+        <translation>ID do n\u00f3</translation>\n+    </message>\n     <message>\n         <source>Ping</source>\n         <translation>Ping</translation>\n@@ -1900,7 +1904,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Message</source>\n@@ -1923,15 +1927,15 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Message</source>\n         <translation>Mensagem</translation>\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>(no message)</source>\n@@ -2210,7 +2214,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n </context>\n <context>\n@@ -2665,7 +2669,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message numerus=\"yes\">\n         <source>Open for %n more block(s)</source>\n@@ -2741,7 +2745,7 @@\n     </message>\n     <message>\n         <source>(no label)</source>\n-        <translation>(sem r\u00f3tuo)</translation>\n+        <translation>(sem r\u00f3tulo)</translation>\n     </message>\n     <message>\n         <source>Transaction status. Hover over this field to show number of confirmations.</source>\n@@ -2888,7 +2892,7 @@\n     </message>\n     <message>\n         <source>Label</source>\n-        <translation>R\u00f3tuo</translation>\n+        <translation>R\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Address</source>\n@@ -3797,6 +3801,10 @@\n         <source>Relay non-P2SH multisig (default: %u)</source>\n         <translation>Retransmitir P2SH n\u00e3o multisig (padr\u00e3o: %u)</translation>\n     </message>\n+    <message>\n+        <source>Send transactions with full-RBF opt-in enabled (default: %u)</source>\n+        <translation>Ativar op\u00e7\u00e3o full-RBF nas transa\u00e7\u00f5es enviadas (padr\u00e3o: %u)</translation>\n+    </message>\n     <message>\n         <source>Set key pool size to &lt;n&gt; (default: %u)</source>\n         <translation>Defina o tamanho da chave para piscina&lt;n&gt; (padr\u00e3o: %u)</translation>\n@@ -3819,7 +3827,7 @@\n     </message>\n     <message>\n         <source>Specify pid file (default: %s)</source>\n-        <translation>Especificar aqrquivo pid (padr\u00e3o: %s)</translation>\n+        <translation>Especificar arquivo pid (padr\u00e3o: %s)</translation>\n     </message>\n     <message>\n         <source>Spend unconfirmed change when sending transactions (default: %u)</source>"
      },
      {
        "sha": "2de0d14ddd24bdc6adddf6d72c0d47729159291f",
        "filename": "src/qt/locale/bitcoin_tr.ts",
        "status": "modified",
        "additions": 1406,
        "deletions": 202,
        "changes": 1608,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_tr.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_tr.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5"
      },
      {
        "sha": "20875c232722ac12e09037eafbc3d74e3942b401",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "patch": "@@ -481,6 +481,10 @@\n         <source>%1 client</source>\n         <translation>%1 \u5ba2\u6236</translation>\n     </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u6b63\u5728\u8fde\u63a5\u5230\u8282\u70b9\u2026\u2026</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>\u66f4\u65b0\u4e2d...</translation>\n@@ -1927,7 +1931,11 @@\n         <source>(no amount requested)</source>\n         <translation>\uff08\u65e0\u8bf7\u6c42\u91d1\u989d\uff09</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Requested</source>\n+        <translation>\u603b\u989d</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsDialog</name>\n     <message>\n@@ -2178,6 +2186,10 @@\n         <source>Warning: Unknown change address</source>\n         <translation>\u8b66\u544a\uff1a\u672a\u77e5\u7684\u66f4\u6539\u5730\u5740</translation>\n     </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>\u4f60\u9009\u62e9\u7684\u627e\u96f6\u5730\u5740\u672a\u88ab\u5305\u542b\u5728\u672c\u94b1\u5305\u4e2d\uff0c\u4f60\u94b1\u5305\u4e2d\u7684\u90e8\u5206\u6216\u5168\u90e8\u91d1\u989d\u5c06\u88ab\u53d1\u9001\u81f3\u8be5\u5730\u5740\u3002\u4f60\u786e\u5b9a\u8981\u8fd9\u6837\u505a\u5417\uff1f</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(\u65e0\u6807\u7b7e)</translation>\n@@ -2459,6 +2471,14 @@\n         <source>0/unconfirmed, %1</source>\n         <translation>0/\u672a\u786e\u8ba4\uff0c%1</translation>\n     </message>\n+    <message>\n+        <source>in memory pool</source>\n+        <translation>\u5728\u5185\u5b58\u6c60\u4e2d</translation>\n+    </message>\n+    <message>\n+        <source>not in memory pool</source>\n+        <translation>\u4e0d\u5728\u5185\u5b58\u6c60\u4e2d</translation>\n+    </message>\n     <message>\n         <source>abandoned</source>\n         <translation>\u5df2\u629b\u5f03</translation>\n@@ -3200,6 +3220,10 @@\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation>\u4f7f\u7528UPnp\u6620\u5c04\u76d1\u542c\u7aef\u53e3 (\u9ed8\u8ba4: %u) </translation>\n     </message>\n+    <message>\n+        <source>Use the test chain</source>\n+        <translation>\u4f7f\u7528\u6d4b\u8bd5\u94fe</translation>\n+    </message>\n     <message>\n         <source>User Agent comment (%s) contains unsafe characters.</source>\n         <translation>\u7528\u6237\u4ee3\u7406\u8bc4\u8bba(%s)\u5305\u542b\u4e0d\u5b89\u5168\u7684\u5b57\u7b26\u3002</translation>"
      }
    ]
  },
  {
    "sha": "4b6ccccc16b615c01939678e589f8e09cfc15d70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjZjY2NjYzE2YjYxNWMwMTkzOTY3OGU1ODlmOGUwOWNmYzE1ZDcw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-14T10:05:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-14T12:50:57Z"
      },
      "message": "Selectively suppress deprecation warnings",
      "tree": {
        "sha": "dbd5f5828be83046111fd7f5d1f562405cc04dd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbd5f5828be83046111fd7f5d1f562405cc04dd2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b6ccccc16b615c01939678e589f8e09cfc15d70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlii/TIACgkQKdS8tkFv\nU+xc1Q/+KlGaCU7GyicC1SX9+l5fO6TFfFY8cNKFYKQ2h3E5AcRz4sAbWNz4FpxK\nz7P7XAFmEpkGVPAF0ij8hXyGxGQdxdYQyeHctk3Z2cv9sfo/DVcODOwY2gihJdeX\nX/868m2hlOnD0j1dI6nixYO9BxStDzrdZxMlsla4GOZR5IyFZD+uv2WXHiKZgKlD\no/AOg/JznDiHlw3jYsbsUIjFCAxOHjyku5CRWTTz+4tgYc5O5EtKmtIlS/qLc5bK\nUoEWq9EWD8eUsE+YubsXDuJgLBBFvaCXeel+bZUSHTtzNulw+Iqjz0tQk246nxBe\nP5DfZp9TYodnogrHuWjTC6ZWvxU5xu0wp+CvfoVYibvCqD+nquHOzMsgovrRHRuq\nVdDBs/gOAwfu7c1tOm2xgrFe1kaYPtUgAvioSKL1XJcJOb1jiImtQOpw31zg2wCl\nmoXqdNZEYWhXA7xfeDLAzmYlixEk6Pj5QzgeeDhJIDA+Y1foA/btS4Wfk7ZQq+DM\nJqi6XNxbc+QgxRy8yqhiDOe2fzu1pwovN2MoUmAHjM+OCFxSVdW7PxdhkDjXeahW\nPOdzmxJBMWgGcxgw/o8tjLqpuWTZRxEK/NW9q/WTXfuf+82fIiPRzhmJ5CBHuVEK\nMVtUmjpHIisGU8Ie4yXIL9mI69/1grlLlZsjW5UMhMFe3Niu3nI=\n=kqNT\n-----END PGP SIGNATURE-----",
        "payload": "tree dbd5f5828be83046111fd7f5d1f562405cc04dd2\nparent d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1487066750 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1487076657 +0100\n\nSelectively suppress deprecation warnings\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b6ccccc16b615c01939678e589f8e09cfc15d70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b6ccccc16b615c01939678e589f8e09cfc15d70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b6ccccc16b615c01939678e589f8e09cfc15d70/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d978c41e1ec4fcf2c4d096f09af035f9e8a7ad81"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e0961fe7dd8d30a2e27e9e5fa36be17266550054",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b6ccccc16b615c01939678e589f8e09cfc15d70/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b6ccccc16b615c01939678e589f8e09cfc15d70/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=4b6ccccc16b615c01939678e589f8e09cfc15d70",
        "patch": "@@ -762,6 +762,8 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n \n \n #elif defined(Q_OS_MAC)\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n // based on: https://github.com/Mozketo/LaunchAtLoginController/blob/master/LaunchAtLoginController.m\n \n #include <CoreFoundation/CoreFoundation.h>\n@@ -824,6 +826,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     }\n     return true;\n }\n+#pragma GCC diagnostic pop\n #else\n \n bool GetStartOnSystemStartup() { return false; }"
      },
      {
        "sha": "a2fea3fdc64fb8d488a0e0498002f52bf461f208",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b6ccccc16b615c01939678e589f8e09cfc15d70/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b6ccccc16b615c01939678e589f8e09cfc15d70/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=4b6ccccc16b615c01939678e589f8e09cfc15d70",
        "patch": "@@ -5,7 +5,10 @@\n #ifndef BITCOIN_QT_PAYMENTREQUESTPLUS_H\n #define BITCOIN_QT_PAYMENTREQUESTPLUS_H\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n #include \"paymentrequest.pb.h\"\n+#pragma GCC diagnostic pop\n \n #include \"base58.h\"\n "
      }
    ]
  },
  {
    "sha": "edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGM5ZTYzYzU3OTkyYTgzOTYxNGRkMmY5YTU0Zjc3ZmRiZmZiNmFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:24:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:32:22Z"
      },
      "message": "Merge #9682: Require timestamps for importmulti keys\n\n266a811 Use MTP for importmulti \"now\" timestamps (Russell Yanofsky)\n3cf9917 Add test to check new importmulti \"now\" value (Russell Yanofsky)\n442887f Require timestamps for importmulti keys (Russell Yanofsky)",
      "tree": {
        "sha": "0330a67aa73f8d590e360feadffe5146197e2f37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0330a67aa73f8d590e360feadffe5146197e2f37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYowbmAAoJEHSBCwEjRsmmniIH/2EE57LuGSbcGOl02bMXVeRD\n5j7CswRWZ4oCZYd5cpOKTxN+k/Vh3ajuRgXwSdOIbVk8DLQh04Xz/gGgN0CX0BWF\nyiRXuASlr0r5+sllL109PK632m5WxdN48wIQ323zC4EfapXR77v4FqIdulXX+2K8\nSrGqOne4c7W4WciGfd3KyrfN6JTjkce5nFFuUyAUkK22ccDQEQd0XLMRzBX0H9yM\nPjia1fAQxyx4Spm3QO6pZt25+1Hf1eHwY6JoHPC/tvIsYgim/pBPWESyFaxlW/Mf\nIDUb1ZmOM96g0gj50FA2xUBdzX/FdUSBOuOKoiCuWttaZgZJOoTded2rc14m7ug=\n=xupR\n-----END PGP SIGNATURE-----",
        "payload": "tree 0330a67aa73f8d590e360feadffe5146197e2f37\nparent ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5\nparent 266a8114cbe2a87a6c84d7690a7716a18d782c56\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487078667 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487079142 +0100\n\nMerge #9682: Require timestamps for importmulti keys\n\n266a811 Use MTP for importmulti \"now\" timestamps (Russell Yanofsky)\n3cf9917 Add test to check new importmulti \"now\" value (Russell Yanofsky)\n442887f Require timestamps for importmulti keys (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec66d06e6ef38b4c2cf2246ba2eeb3d17a6040e5"
      },
      {
        "sha": "266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/266a8114cbe2a87a6c84d7690a7716a18d782c56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/266a8114cbe2a87a6c84d7690a7716a18d782c56"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 77,
      "deletions": 13
    },
    "files": [
      {
        "sha": "8f60e63e2e50dd7ecc7c2f84b5aace5a68d83440",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "patch": "@@ -33,6 +33,7 @@ def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node,\n             \"scriptPubKey\": {\n                 \"address\": address\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [pubkey] if data == Data.pub else [],\n             \"keys\": [key] if data == Data.priv else [],\n             \"label\": label,"
      },
      {
        "sha": "52e40d6c1cc3d07fe4c17649cf6f6d8741299d86",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "patch": "@@ -52,7 +52,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n@@ -65,6 +66,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -76,7 +78,8 @@ def run_test (self):\n         print(\"Should not import a scriptPubKey without internal flag\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n-            \"scriptPubKey\": address['scriptPubKey']\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n@@ -93,6 +96,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -106,6 +110,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -120,6 +125,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address['pubkey'] ]\n         }]\n         result = self.nodes[1].importmulti(request)\n@@ -133,16 +139,19 @@ def run_test (self):\n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # Address + Private key + watchonly\n         print(\"Should not import an address with private key and with watchonly\")\n@@ -151,6 +160,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"watchonly\": True\n         }])\n@@ -166,6 +176,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n@@ -179,6 +190,7 @@ def run_test (self):\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -203,7 +215,8 @@ def run_test (self):\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n-            }\n+            },\n+            \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n@@ -229,6 +242,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n@@ -253,6 +267,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n@@ -277,6 +292,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n+            \"timestamp\": \"now\",\n             \"redeemscript\": multi_sig_script['redeemScript'],\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])],\n             \"watchonly\": True\n@@ -294,6 +310,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -310,6 +327,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"pubkeys\": [ address2['pubkey'] ],\n             \"internal\": True\n         }]\n@@ -330,6 +348,7 @@ def run_test (self):\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ]\n         }])\n         assert_equal(result[0]['success'], False)\n@@ -346,6 +365,7 @@ def run_test (self):\n         address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ],\n             \"internal\": True\n         }])\n@@ -356,5 +376,18 @@ def run_test (self):\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n \n+        # Bad or missing timestamps\n+        print(\"Should throw on invalid or missing timestamp values\")\n+        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+            }])\n+        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+            self.nodes[1].importmulti, [{\n+                \"scriptPubKey\": address['scriptPubKey'],\n+                \"timestamp\": \"\",\n+            }])\n+\n+\n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      },
      {
        "sha": "25fad3c2e38e315efe901a9080f3499274e9179c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "patch": "@@ -167,6 +167,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n             \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string) The hex value of the raw public key\\n\"\n             \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n             \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n             \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n@@ -204,10 +205,16 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n         CKeyID keyID;\n-        if (pwalletMain && address.GetKeyID(keyID) && pwalletMain->mapKeyMetadata.count(keyID) && !pwalletMain->mapKeyMetadata[keyID].hdKeypath.empty())\n-        {\n-            ret.push_back(Pair(\"hdkeypath\", pwalletMain->mapKeyMetadata[keyID].hdKeypath));\n-            ret.push_back(Pair(\"hdmasterkeyid\", pwalletMain->mapKeyMetadata[keyID].hdMasterKeyID.GetHex()));\n+        if (pwalletMain) {\n+            const auto& meta = pwalletMain->mapKeyMetadata;\n+            auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it != meta.end()) {\n+                ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n+                if (!it->second.hdKeypath.empty()) {\n+                    ret.push_back(Pair(\"hdkeypath\", it->second.hdKeypath));\n+                    ret.push_back(Pair(\"hdmasterkeyid\", it->second.hdMasterKeyID.GetHex()));\n+                }\n+            }\n         }\n #endif\n     }"
      },
      {
        "sha": "9310a320c76c4737eaabcadcde7eccc3c43f9033",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc9e63c57992a839614dd2f9a54f77fdbffb6ab/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "patch": "@@ -640,7 +640,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue processImport(const UniValue& data) {\n+UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n+{\n     try {\n         bool success = false;\n \n@@ -659,7 +660,6 @@ UniValue processImport(const UniValue& data) {\n         const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n         const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n         const string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > 1 ? data[\"timestamp\"].get_int64() : 1;\n \n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n         bool isP2SH = strRedeemScript.length() > 0;\n@@ -958,6 +958,20 @@ UniValue processImport(const UniValue& data) {\n     }\n }\n \n+int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n+{\n+    if (data.exists(\"timestamp\")) {\n+        const UniValue& timestamp = data[\"timestamp\"];\n+        if (timestamp.isNum()) {\n+            return timestamp.get_int64();\n+        } else if (timestamp.isStr() && timestamp.get_str() == \"now\") {\n+            return now;\n+        }\n+        throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Expected number or \\\"now\\\" timestamp value for key. got type %s\", uvTypeName(timestamp.type())));\n+    }\n+    throw JSONRPCError(RPC_TYPE_ERROR, \"Missing required timestamp field for key\");\n+}\n+\n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n     // clang-format off\n@@ -970,13 +984,17 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  [     (array of json objects)\\n\"\n             \"    {\\n\"\n             \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n+            \"      \\\"timestamp\\\": timestamp | \\\"now\\\"                        , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+            \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n+            \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n+            \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n             \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n             \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n             \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n-            \"      \\\"timestamp\\\": 1454686740,                                (integer, optional, default now) Timestamp\\n\"\n             \"    }\\n\"\n             \"  ,...\\n\"\n             \"  ]\\n\"\n@@ -1015,6 +1033,12 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n     EnsureWalletIsUnlocked();\n \n+    // Verify all timestamps are present before importing any keys.\n+    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n+    for (const UniValue& data : requests.getValues()) {\n+        GetImportTimestamp(data, now);\n+    }\n+\n     bool fRunScan = false;\n     const int64_t minimumTimestamp = 1;\n     int64_t nLowestTimestamp = 0;\n@@ -1028,7 +1052,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     UniValue response(UniValue::VARR);\n \n     BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n-        const UniValue result = processImport(data);\n+        const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n+        const UniValue result = ProcessImport(data, timestamp);\n         response.push_back(result);\n \n         if (!fRescan) {\n@@ -1041,8 +1066,6 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n \n         // Get the lowest timestamp.\n-        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > minimumTimestamp ? data[\"timestamp\"].get_int64() : minimumTimestamp;\n-\n         if (timestamp < nLowestTimestamp) {\n             nLowestTimestamp = timestamp;\n         }"
      }
    ]
  },
  {
    "sha": "b08656e343141a7262975e245f7c4cd70829a678",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDg2NTZlMzQzMTQxYTcyNjI5NzVlMjQ1ZjdjNGNkNzA4MjlhNjc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:34:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:35:15Z"
      },
      "message": "Merge #9715: Disconnect peers which we do not receive VERACKs from within 60 sec\n\n66f861a Add a test for P2P inactivity timeouts (Matt Corallo)\nb436f92 qa: Expose on-connection to mininode listeners (Matt Corallo)\n8aaba7a qa: mininode learns when a socket connects, not its first action (Matt Corallo)\n2cbd119 Disconnect peers which we do not receive VERACKs from within 60 sec (Matt Corallo)",
      "tree": {
        "sha": "1036c3a9956b65eb7ff9176f6f25bb0da835e8d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1036c3a9956b65eb7ff9176f6f25bb0da835e8d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b08656e343141a7262975e245f7c4cd70829a678",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYoweTAAoJEHSBCwEjRsmmFqIIALaXgmeMaEAPjdfkixtAvjut\nZN94bUzFg36d0EDQpyTrmd6VJhd8OTaInLXc10lPUpPHBlIuKECU7Y6QtGu/eWKk\ny5IB+OL814tZ7ZsUkrc7OD9ZOvF10NRGkLI6q3oR/6+RCGX7OTVbRLxRJJQ15dpe\nFKgYmR8/kTtu65iV0F/6O4NFJBrZaxeAMSyI6FL05qVwfd+Ycu5w7puj/FgMGYva\n2JpvQ+4EIm16yQCr57jGEPwD3QGhcEQvXfiIDfrP4qDmsMd7Tho6KobIM0aztp+q\nc55P8eZwMruCoava3BYJ7la7XSQ/GwtDK/QVoTRXE9NtBROsX07dtMUsBEKkiIM=\n=gs7z\n-----END PGP SIGNATURE-----",
        "payload": "tree 1036c3a9956b65eb7ff9176f6f25bb0da835e8d0\nparent edc9e63c57992a839614dd2f9a54f77fdbffb6ab\nparent 66f861ade9db108f979a9bdf8d90e8fca028e2a3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487079260 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487079315 +0100\n\nMerge #9715: Disconnect peers which we do not receive VERACKs from within 60 sec\n\n66f861a Add a test for P2P inactivity timeouts (Matt Corallo)\nb436f92 qa: Expose on-connection to mininode listeners (Matt Corallo)\n8aaba7a qa: mininode learns when a socket connects, not its first action (Matt Corallo)\n2cbd119 Disconnect peers which we do not receive VERACKs from within 60 sec (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b08656e343141a7262975e245f7c4cd70829a678",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b08656e343141a7262975e245f7c4cd70829a678",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b08656e343141a7262975e245f7c4cd70829a678/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc9e63c57992a839614dd2f9a54f77fdbffb6ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/edc9e63c57992a839614dd2f9a54f77fdbffb6ab"
      },
      {
        "sha": "66f861ade9db108f979a9bdf8d90e8fca028e2a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66f861ade9db108f979a9bdf8d90e8fca028e2a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66f861ade9db108f979a9bdf8d90e8fca028e2a3"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 135,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2cf4adb9a0431bb1e49b092bd40a4914b2e8b34a",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b08656e343141a7262975e245f7c4cd70829a678/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b08656e343141a7262975e245f7c4cd70829a678/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=b08656e343141a7262975e245f7c4cd70829a678",
        "patch": "@@ -168,6 +168,7 @@\n     # vv Tests less than 2m vv\n     'bip68-sequence.py',\n     'getblocktemplate_longpoll.py',\n+    'p2p-timeouts.py',\n     # vv Tests less than 60s vv\n     'bip9-softforks.py',\n     'p2p-feefilter.py',"
      },
      {
        "sha": "f1b190587d8efa7d43584507b13e390ca3bbe711",
        "filename": "qa/rpc-tests/p2p-timeouts.py",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b08656e343141a7262975e245f7c4cd70829a678/qa/rpc-tests/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b08656e343141a7262975e245f7c4cd70829a678/qa/rpc-tests/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-timeouts.py?ref=b08656e343141a7262975e245f7c4cd70829a678",
        "patch": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\" TimeoutsTest -- test various net timeouts (only in extended tests)\n+\n+- Create three bitcoind nodes:\n+\n+    no_verack_node - we never send a verack in response to their version\n+    no_version_node - we never send a version (only a ping)\n+    no_send_node - we never send any P2P message.\n+\n+- Start all three nodes\n+- Wait 1 second\n+- Assert that we're connected\n+- Send a ping to no_verack_node and no_version_node\n+- Wait 30 seconds\n+- Assert that we're still connected\n+- Send a ping to no_verack_node and no_version_node\n+- Wait 31 seconds\n+- Assert that we're no longer connected (timeout to receive version/verack is 60 seconds)\n+\"\"\"\n+\n+from time import sleep\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class TestNode(SingleNodeConnCB):\n+    def __init__(self):\n+        SingleNodeConnCB.__init__(self)\n+        self.connected = False\n+        self.received_version = False\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_close(self, conn):\n+        self.connected = False\n+\n+    def on_version(self, conn, message):\n+        # Don't send a verack in response\n+        self.received_version = True\n+\n+class TimeoutsTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        self.nodes = []\n+\n+        # Start up node0 to be a version 1, pre-segwit node.\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, \n+                [[\"-debug\", \"-logtimemicros=1\"]])\n+\n+    def run_test(self):\n+        # Setup the p2p connections and start up the network thread.\n+        self.no_verack_node = TestNode() # never send verack\n+        self.no_version_node = TestNode() # never send version (just ping)\n+        self.no_send_node = TestNode() # never send anything\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_verack_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_version_node, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.no_send_node, send_version=False))\n+        self.no_verack_node.add_connection(connections[0])\n+        self.no_version_node.add_connection(connections[1])\n+        self.no_send_node.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        sleep(1)\n+\n+        assert(self.no_verack_node.connected)\n+        assert(self.no_version_node.connected)\n+        assert(self.no_send_node.connected)\n+\n+        ping_msg = msg_ping()\n+        connections[0].send_message(ping_msg)\n+        connections[1].send_message(ping_msg)\n+\n+        sleep(30)\n+\n+        assert(self.no_verack_node.received_version)\n+\n+        assert(self.no_verack_node.connected)\n+        assert(self.no_version_node.connected)\n+        assert(self.no_send_node.connected)\n+\n+        connections[0].send_message(ping_msg)\n+        connections[1].send_message(ping_msg)\n+\n+        sleep(31)\n+\n+        assert(not self.no_verack_node.connected)\n+        assert(not self.no_version_node.connected)\n+        assert(not self.no_send_node.connected)\n+\n+if __name__ == '__main__':\n+    TimeoutsTest().main()"
      },
      {
        "sha": "5b563c58ae1e1a17e50caa42f165a28fd3d739d7",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 26,
        "deletions": 12,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b08656e343141a7262975e245f7c4cd70829a678/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b08656e343141a7262975e245f7c4cd70829a678/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=b08656e343141a7262975e245f7c4cd70829a678",
        "patch": "@@ -1540,6 +1540,7 @@ def on_ping(self, conn, message):\n         if conn.ver_send > BIP0031_VERSION:\n             conn.send_message(msg_pong(message.nonce))\n     def on_reject(self, conn, message): pass\n+    def on_open(self, conn): pass\n     def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n@@ -1614,7 +1615,7 @@ class NodeConn(asyncore.dispatcher):\n         \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\",   # regtest\n     }\n \n-    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK):\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE_NETWORK, send_version=True):\n         asyncore.dispatcher.__init__(self, map=mininode_socket_map)\n         self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n         self.dstaddr = dstaddr\n@@ -1631,14 +1632,16 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=NODE\n         self.disconnect = False\n         self.nServices = 0\n \n-        # stuff version msg into sendbuf\n-        vt = msg_version()\n-        vt.nServices = services\n-        vt.addrTo.ip = self.dstaddr\n-        vt.addrTo.port = self.dstport\n-        vt.addrFrom.ip = \"0.0.0.0\"\n-        vt.addrFrom.port = 0\n-        self.send_message(vt, True)\n+        if send_version:\n+            # stuff version msg into sendbuf\n+            vt = msg_version()\n+            vt.nServices = services\n+            vt.addrTo.ip = self.dstaddr\n+            vt.addrTo.port = self.dstport\n+            vt.addrFrom.ip = \"0.0.0.0\"\n+            vt.addrFrom.port = 0\n+            self.send_message(vt, True)\n+\n         print('MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n             + str(dstport))\n \n@@ -1652,8 +1655,10 @@ def show_debug_msg(self, msg):\n         self.log.debug(msg)\n \n     def handle_connect(self):\n-        self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n-        self.state = \"connected\"\n+        if self.state != \"connected\":\n+            self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n+            self.state = \"connected\"\n+            self.cb.on_open(self)\n \n     def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n@@ -1681,11 +1686,20 @@ def readable(self):\n \n     def writable(self):\n         with mininode_lock:\n+            pre_connection = self.state == \"connecting\"\n             length = len(self.sendbuf)\n-        return (length > 0)\n+        return (length > 0 or pre_connection)\n \n     def handle_write(self):\n         with mininode_lock:\n+            # asyncore does not expose socket connection, only the first read/write\n+            # event, thus we must check connection manually here to know when we\n+            # actually connect\n+            if self.state == \"connecting\":\n+                self.handle_connect()\n+            if not self.writable():\n+                return\n+\n             try:\n                 sent = self.send(self.sendbuf)\n             except:"
      },
      {
        "sha": "de5fc29693e8247ccc107ac0f211172942585158",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b08656e343141a7262975e245f7c4cd70829a678/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b08656e343141a7262975e245f7c4cd70829a678/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b08656e343141a7262975e245f7c4cd70829a678",
        "patch": "@@ -1388,6 +1388,11 @@ void CConnman::ThreadSocketHandler()\n                     LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (GetTimeMicros() - pnode->nPingUsecStart));\n                     pnode->fDisconnect = true;\n                 }\n+                else if (!pnode->fSuccessfullyConnected)\n+                {\n+                    LogPrintf(\"version handshake timeout from %d\\n\", pnode->id);\n+                    pnode->fDisconnect = true;\n+                }\n             }\n         }\n         {"
      }
    ]
  },
  {
    "sha": "e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODdjZTk1ZmJkYzZjYTZlZjgyMmM5NzhkOThiMmFjYmE1OTQ4ZWUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:37:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-14T13:42:29Z"
      },
      "message": "Merge #9720: net: fix banning and disallow sending messages before receiving verack\n\nd943491 qa: add a test to detect leaky p2p messages (Cory Fields)\n8650bbb qa: Expose on-connection to mininode listeners (Matt Corallo)\n5b5e4f8 qa: mininode learns when a socket connects, not its first action (Matt Corallo)\ncbfc5a6 net: require a verack before responding to anything else (Cory Fields)\n8502e7a net: parse reject earlier (Cory Fields)\nc45b9fb net: correctly ban before the handshake is complete (Cory Fields)",
      "tree": {
        "sha": "b255d343837257c0998a57a064fe2575ab81bfaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b255d343837257c0998a57a064fe2575ab81bfaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYowlFAAoJEHSBCwEjRsmmf4oH/jQwD9F9Y/4DsxKGfGtLRFgl\n2lw5WswxuH+vMUt3pvrLjti0L5DstNpeF/WlGxVqenNBF2rxUwggUt9iNke7sTvp\n7vld19WSpUeYUfLlhTalaZ60VE9KvstZWWYyj9JISU8DwpAr/onOTBAhna8JkIZ3\nxNmJLIxsaIZhe3iXe0RohgBwe9K/r+l3tJYxFxiB0IiFyq6oyYe+ccAOzjDkO0NO\nABvcuZvYH3v/KAhQyFdHaHIA6NAEapfpfwcrr52S8OBNdJ9w1eBj+VH4F1AeizZz\nDBWMpLvBoUFyR+YhJbF8HKN82wVKKGGMfPM71RvY1MfkX5qZEIZ1Q+yIbvR4Mfw=\n=kFKV\n-----END PGP SIGNATURE-----",
        "payload": "tree b255d343837257c0998a57a064fe2575ab81bfaa\nparent b08656e343141a7262975e245f7c4cd70829a678\nparent d9434918d277bba534933ebc8c63ba81e613f603\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487079434 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487079749 +0100\n\nMerge #9720: net: fix banning and disallow sending messages before receiving verack\n\nd943491 qa: add a test to detect leaky p2p messages (Cory Fields)\n8650bbb qa: Expose on-connection to mininode listeners (Matt Corallo)\n5b5e4f8 qa: mininode learns when a socket connects, not its first action (Matt Corallo)\ncbfc5a6 net: require a verack before responding to anything else (Cory Fields)\n8502e7a net: parse reject earlier (Cory Fields)\nc45b9fb net: correctly ban before the handshake is complete (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b08656e343141a7262975e245f7c4cd70829a678",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b08656e343141a7262975e245f7c4cd70829a678",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b08656e343141a7262975e245f7c4cd70829a678"
      },
      {
        "sha": "d9434918d277bba534933ebc8c63ba81e613f603",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9434918d277bba534933ebc8c63ba81e613f603",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9434918d277bba534933ebc8c63ba81e613f603"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 214,
      "deletions": 49
    },
    "files": [
      {
        "sha": "20ab0fdd1de300632402b430b82b98626b15c3dc",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "patch": "@@ -154,6 +154,7 @@\n     'bumpfee.py',\n     'rpcnamedargs.py',\n     'listsinceblock.py',\n+    'p2p-leaktests.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "41ca84d779890cded199129d7739fbbd348a894c",
        "filename": "qa/rpc-tests/p2p-leaktests.py",
        "status": "added",
        "additions": 145,
        "deletions": 0,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/qa/rpc-tests/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/qa/rpc-tests/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-leaktests.py?ref=e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "patch": "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+'''\n+Test for message sending before handshake completion\n+\n+A node should never send anything other than VERSION/VERACK/REJECT until it's\n+received a VERACK.\n+\n+This test connects to a node and sends it a few messages, trying to intice it\n+into sending us something it shouldn't.\n+'''\n+\n+banscore = 10\n+\n+class CLazyNode(NodeConnCB):\n+    def __init__(self):\n+        self.connection = None\n+        self.unexpected_msg = False\n+        self.connected = False\n+        super().__init__()\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def bad_message(self, message):\n+        self.unexpected_msg = True\n+        print(\"should not have received message: %s\" % message.command)\n+\n+    def on_open(self, conn):\n+        self.connected = True\n+\n+    def on_version(self, conn, message): self.bad_message(message)\n+    def on_verack(self, conn, message): self.bad_message(message)\n+    def on_reject(self, conn, message): self.bad_message(message)\n+    def on_inv(self, conn, message): self.bad_message(message)\n+    def on_addr(self, conn, message): self.bad_message(message)\n+    def on_alert(self, conn, message): self.bad_message(message)\n+    def on_getdata(self, conn, message): self.bad_message(message)\n+    def on_getblocks(self, conn, message): self.bad_message(message)\n+    def on_tx(self, conn, message): self.bad_message(message)\n+    def on_block(self, conn, message): self.bad_message(message)\n+    def on_getaddr(self, conn, message): self.bad_message(message)\n+    def on_headers(self, conn, message): self.bad_message(message)\n+    def on_getheaders(self, conn, message): self.bad_message(message)\n+    def on_ping(self, conn, message): self.bad_message(message)\n+    def on_mempool(self, conn): self.bad_message(message)\n+    def on_pong(self, conn, message): self.bad_message(message)\n+    def on_feefilter(self, conn, message): self.bad_message(message)\n+    def on_sendheaders(self, conn, message): self.bad_message(message)\n+    def on_sendcmpct(self, conn, message): self.bad_message(message)\n+    def on_cmpctblock(self, conn, message): self.bad_message(message)\n+    def on_getblocktxn(self, conn, message): self.bad_message(message)\n+    def on_blocktxn(self, conn, message): self.bad_message(message)\n+\n+# Node that never sends a version. We'll use this to send a bunch of messages\n+# anyway, and eventually get disconnected.\n+class CNodeNoVersionBan(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+    # send a bunch of veracks without sending a message. This should get us disconnected.\n+    # NOTE: implementation-specific check here. Remove if bitcoind ban behavior changes\n+    def on_open(self, conn):\n+        super().on_open(conn)\n+        for i in range(banscore):\n+            self.send_message(msg_verack())\n+\n+    def on_reject(self, conn, message): pass\n+\n+# Node that never sends a version. This one just sits idle and hopes to receive\n+# any message (it shouldn't!)\n+class CNodeNoVersionIdle(CLazyNode):\n+    def __init__(self):\n+        super().__init__()\n+\n+# Node that sends a version but not a verack.\n+class CNodeNoVerackIdle(CLazyNode):\n+    def __init__(self):\n+        self.version_received = False\n+        super().__init__()\n+\n+    def on_reject(self, conn, message): pass\n+    def on_verack(self, conn, message): pass\n+    # When version is received, don't reply with a verack. Instead, see if the\n+    # node will give us a message that it shouldn't. This is not an exhaustive\n+    # list!\n+    def on_version(self, conn, message):\n+        self.version_received = True\n+        conn.send_message(msg_ping())\n+        conn.send_message(msg_getaddr())\n+\n+class P2PLeakTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+    def setup_network(self):\n+        extra_args = [['-debug', '-banscore='+str(banscore)]\n+                      for i in range(self.num_nodes)]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test(self):\n+        no_version_bannode = CNodeNoVersionBan()\n+        no_version_idlenode = CNodeNoVersionIdle()\n+        no_verack_idlenode = CNodeNoVerackIdle()\n+\n+        connections = []\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_bannode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_version_idlenode, send_version=False))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], no_verack_idlenode))\n+        no_version_bannode.add_connection(connections[0])\n+        no_version_idlenode.add_connection(connections[1])\n+        no_verack_idlenode.add_connection(connections[2])\n+\n+        NetworkThread().start()  # Start up network handling in another thread\n+\n+        assert(wait_until(lambda: no_version_bannode.connected and no_version_idlenode.connected and no_verack_idlenode.version_received, timeout=10))\n+\n+        # Mine a block and make sure that it's not sent to the connected nodes\n+        self.nodes[0].generate(1)\n+\n+        #Give the node enough time to possibly leak out a message\n+        time.sleep(5)\n+\n+        #This node should have been banned\n+        assert(no_version_bannode.connection.state == \"closed\")\n+\n+        [conn.disconnect_node() for conn in connections]\n+\n+        # Make sure no unexpected messages came in\n+        assert(no_version_bannode.unexpected_msg == False)\n+        assert(no_version_idlenode.unexpected_msg == False)\n+        assert(no_verack_idlenode.unexpected_msg == False)\n+\n+if __name__ == '__main__':\n+    P2PLeakTest().main()"
      },
      {
        "sha": "3ec1a1c27d28e6fcb8cbbd1ba0fff01e92a23599",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 68,
        "deletions": 49,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "patch": "@@ -1190,8 +1190,31 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n     }\n \n+    if (strCommand == NetMsgType::REJECT)\n+    {\n+        if (fDebug) {\n+            try {\n+                std::string strMsg; unsigned char ccode; std::string strReason;\n+                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n \n-    if (strCommand == NetMsgType::VERSION)\n+                std::ostringstream ss;\n+                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n+\n+                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n+                {\n+                    uint256 hash;\n+                    vRecv >> hash;\n+                    ss << \": hash \" << hash.ToString();\n+                }\n+                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n+            } catch (const std::ios_base::failure&) {\n+                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n+                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n+            }\n+        }\n+    }\n+\n+    else if (strCommand == NetMsgType::VERSION)\n     {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n@@ -1402,6 +1425,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fSuccessfullyConnected = true;\n     }\n \n+    else if (!pfrom->fSuccessfullyConnected)\n+    {\n+        // Must have a verack message before anything else\n+        LOCK(cs_main);\n+        Misbehaving(pfrom->GetId(), 1);\n+        return false;\n+    }\n \n     else if (strCommand == NetMsgType::ADDR)\n     {\n@@ -2549,31 +2579,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fRelayTxes = true;\n     }\n \n-\n-    else if (strCommand == NetMsgType::REJECT)\n-    {\n-        if (fDebug) {\n-            try {\n-                std::string strMsg; unsigned char ccode; std::string strReason;\n-                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n-\n-                std::ostringstream ss;\n-                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n-\n-                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n-                {\n-                    uint256 hash;\n-                    vRecv >> hash;\n-                    ss << \": hash \" << hash.ToString();\n-                }\n-                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n-            } catch (const std::ios_base::failure&) {\n-                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n-                LogPrint(\"net\", \"Unparseable reject message received\\n\");\n-            }\n-        }\n-    }\n-\n     else if (strCommand == NetMsgType::FEEFILTER) {\n         CAmount newFeeFilter = 0;\n         vRecv >> newFeeFilter;\n@@ -2601,6 +2606,36 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n+{\n+    AssertLockHeld(cs_main);\n+    CNodeState &state = *State(pnode->GetId());\n+\n+    BOOST_FOREACH(const CBlockReject& reject, state.rejects) {\n+        connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+    }\n+    state.rejects.clear();\n+\n+    if (state.fShouldBan) {\n+        state.fShouldBan = false;\n+        if (pnode->fWhitelisted)\n+            LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n+        else if (pnode->fAddnode)\n+            LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n+        else {\n+            pnode->fDisconnect = true;\n+            if (pnode->addr.IsLocal())\n+                LogPrintf(\"Warning: not banning local peer %s!\\n\", pnode->addr.ToString());\n+            else\n+            {\n+                connman.Ban(pnode->addr, BanReasonNodeMisbehaving);\n+            }\n+        }\n+        return true;\n+    }\n+    return false;\n+}\n+\n bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n@@ -2711,8 +2746,12 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n             PrintExceptionContinue(NULL, \"ProcessMessages()\");\n         }\n \n-        if (!fRet)\n+        if (!fRet) {\n             LogPrintf(\"%s(%s, %u bytes) FAILED peer=%d\\n\", __func__, SanitizeString(strCommand), nMessageSize, pfrom->id);\n+        }\n+\n+        LOCK(cs_main);\n+        SendRejectsAndCheckIfBanned(pfrom, connman);\n \n     return fMoreWork;\n }\n@@ -2778,30 +2817,10 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         if (!lockMain)\n             return true;\n \n+        if (SendRejectsAndCheckIfBanned(pto, connman))\n+            return true;\n         CNodeState &state = *State(pto->GetId());\n \n-        BOOST_FOREACH(const CBlockReject& reject, state.rejects)\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n-        state.rejects.clear();\n-\n-        if (state.fShouldBan) {\n-            state.fShouldBan = false;\n-            if (pto->fWhitelisted)\n-                LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pto->addr.ToString());\n-            else if (pto->fAddnode)\n-                LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pto->addr.ToString());\n-            else {\n-                pto->fDisconnect = true;\n-                if (pto->addr.IsLocal())\n-                    LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n-                else\n-                {\n-                    connman.Ban(pto->addr, BanReasonNodeMisbehaving);\n-                }\n-                return true;\n-            }\n-        }\n-\n         // Address refresh broadcast\n         int64_t nNow = GetTimeMicros();\n         if (!IsInitialBlockDownload() && pto->nNextLocalAddrSend < nNow) {"
      }
    ]
  },
  {
    "sha": "a441db01b527431a3d7ba169f1afd9c3bc04748f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDQxZGIwMWI1Mjc0MzFhM2Q3YmExNjlmMWFmZDljM2JjMDQ3NDhm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-14T14:56:52Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-14T14:57:02Z"
      },
      "message": "Merge #9755: Bugfix: Qt/Options: Restore persistent \"restart required\" notice\n\n0b4f273 Bugfix: Qt/Options: Restore persistent \"restart required\" notice (Luke Dashjr)",
      "tree": {
        "sha": "05d37f68cd0d5454adc5c35e77904c47c2288281",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05d37f68cd0d5454adc5c35e77904c47c2288281"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlijGr4ACgkQKdS8tkFv\nU+z/6Q//Wqpq+0ui5qCZahVT9rerXye+dPJiMLI2JvcjxsNqQ+H4sEyfIKjL4LWS\nDZyhmubvTxf8+LuyDqu+DKljNwJ2atsY31oCiv5VJ5mEv64EpO0xjyPkX133ovmW\nL+wEVemsro5/67Q3kyRjxpa9Tb4eAmzm+lR3M7RNM4VCr1XzLyso1osn+lwYPpnZ\n+UDEM5/n3sHWvmex51i/CL8lftNb/xlKWlFzzYQFKYYFn6b6uT+rws6fk0LCCzd7\nev7bhcTiy+O8IP21WTn8KGkasRdY2Y2WlgN4DBXeY8DJt9d5oUiP6nEhemgfWFuz\nntJYuyD9y5RymEAawM7xyqomJ80MHv0xuJvDZNnnm6hf3aqfwnHZKjYQ118GNTNh\nOnfQzuR4DADLMCaK3vNvbDGOXoXIk3APiCbijqpFX9q7UZz2crz802oTwRpNcVop\nRDceSjl+dZaNwudxUrgCbFiKzXiWznduiN/6VBLewEnsKkNsFNylebJ2klf2tu3h\nS4+SdqauIG9vZWdRYQjy6mQNpzCOgQxHYxajGx4+B6fvp8DblQpDVRK1I7LWlYdk\nbZn9Z9QTvhUcdVa7CrMmq9eG5/pbyX5pOyLw/L91g7lTktDo17jVmVRS4vbWugpH\nc6fHZd7mGrGTo9Bk/u6PlD+LGsAS6aoX2I5d6L+SCKg+GoGcza0=\n=P6en\n-----END PGP SIGNATURE-----",
        "payload": "tree 05d37f68cd0d5454adc5c35e77904c47c2288281\nparent e87ce95fbdc6ca6ef822c978d98b2acba5948ee1\nparent 0b4f273e9cf7166dbd103e116b5d991e359e673d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1487084212 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1487084222 +0100\n\nMerge #9755: Bugfix: Qt/Options: Restore persistent \"restart required\" notice\n\n0b4f273 Bugfix: Qt/Options: Restore persistent \"restart required\" notice (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a441db01b527431a3d7ba169f1afd9c3bc04748f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e87ce95fbdc6ca6ef822c978d98b2acba5948ee1"
      },
      {
        "sha": "0b4f273e9cf7166dbd103e116b5d991e359e673d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b4f273e9cf7166dbd103e116b5d991e359e673d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b4f273e9cf7166dbd103e116b5d991e359e673d"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7ff00b1e9eeb1f2ecae3b4516513e0c259efdbd2",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a441db01b527431a3d7ba169f1afd9c3bc04748f/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a441db01b527431a3d7ba169f1afd9c3bc04748f/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "patch": "@@ -277,6 +277,9 @@ void OptionsDialog::showRestartWarning(bool fPersistent)\n void OptionsDialog::clearStatusLabel()\n {\n     ui->statusLabel->clear();\n+    if (model && model->isRestartRequired()) {\n+        showRestartWarning(true);\n+    }\n }\n \n void OptionsDialog::updateProxyValidationState()\n@@ -286,7 +289,7 @@ void OptionsDialog::updateProxyValidationState()\n     if (pUiProxyIp->isValid() && (!ui->proxyPort->isEnabled() || ui->proxyPort->text().toInt() > 0) && (!ui->proxyPortTor->isEnabled() || ui->proxyPortTor->text().toInt() > 0))\n     {\n         setOkButtonState(otherProxyWidget->isValid()); //only enable ok button if both proxys are valid\n-        ui->statusLabel->clear();\n+        clearStatusLabel();\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "0c9b9b7d646333cb3212f1bea98e629c416cbe42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzliOWI3ZDY0NjMzM2NiMzIxMmYxYmVhOThlNjI5YzQxNmNiZTQy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-06T14:16:18Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-02-14T19:19:40Z"
      },
      "message": "[trivial] Fix recently introduced typos in comments",
      "tree": {
        "sha": "1367ac5ad5c472b827962e95046aef1cecf2f102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1367ac5ad5c472b827962e95046aef1cecf2f102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870cd2b58aba30ecd57c624ab1f1724b3235cb4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/870cd2b58aba30ecd57c624ab1f1724b3235cb4d"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cf265180ffae56b7de88410316ec736ed62a65f1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -934,7 +934,7 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n-    // incremental relay fee sets the minimimum feerate increase necessary for BIP 125 replacement in the mempool\n+    // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (IsArgSet(\"-incrementalrelayfee\"))\n     {"
      },
      {
        "sha": "29bdb376821751612aae0da7b08d56844daf9917",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -24,7 +24,7 @@ class CRPCConvertParam\n };\n \n /**\n- * Specifiy a (method, idx, name) here if the argument is a non-string RPC\n+ * Specify a (method, idx, name) here if the argument is a non-string RPC\n  * argument and needs to be converted from JSON.\n  *\n  * @note Parameter indexes start from 0."
      },
      {
        "sha": "45a5896da1b78ca44c2476cf701456b3b1755ae7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -435,7 +435,7 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     // this could have an effect on mempool time-based eviction, as well as\n     // IsCurrentForFeeEstimation() and IsInitialBlockDownload().\n     // TODO: figure out the right way to synchronize around mocktime, and\n-    // ensure all callsites of GetTime() are accessing this safely.\n+    // ensure all call sites of GetTime() are accessing this safely.\n     LOCK(cs_main);\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));"
      },
      {
        "sha": "cc3290c63157097887b5c3978e7644afd08555f4",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -11,7 +11,7 @@\n \n /**\n  * GetTimeMicros() and GetTimeMillis() both return the system time, but in\n- * different units. GetTime() returns the sytem time in seconds, but also\n+ * different units. GetTime() returns the system time in seconds, but also\n  * supports mocktime, where the time can be specified by the user, eg for\n  * testing (eg with the setmocktime rpc, or -mocktime argument).\n  *"
      },
      {
        "sha": "144b5d5c0cf5daba451ed4bec0fadb453c693619",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -1429,7 +1429,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Helps prevent CPU exhaustion attacks.\n \n         // Skip script verification when connecting blocks under the\n-        // assumedvalid block. Assuming the assumedvalid block is valid this\n+        // assumevalid block. Assuming the assumevalid block is valid this\n         // is safe because block merkle hashes are still computed and checked,\n         // Of course, if an assumed valid block is invalid due to false scriptSigs\n         // this optimization would allow an invalid chain to be accepted.\n@@ -1771,7 +1771,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // The equivalent time check discourages hashpower from extorting the network via DOS attack\n+                // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid.\n                 //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n                 //  it hard to hide the implication of the demand.  This also avoids having release candidates\n@@ -2486,12 +2486,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            { // TODO: Tempoarily ensure that mempool removals are notified before\n+            { // TODO: Temporarily ensure that mempool removals are notified before\n               // connected transactions.  This shouldn't matter, but the abandoned\n               // state of transactions in our wallet is currently cleared when we\n               // receive another notification and there is a race condition where\n               // notification of a connected conflict might cause an outside process\n-              // to abandon a transaction and then have it inadvertantly cleared by\n+              // to abandon a transaction and then have it inadvertently cleared by\n               // the notification that the conflicted transaction was evicted.\n             MemPoolConflictRemovalTracker mrt(mempool);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2520,7 +2520,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n             } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n \n-            // Transactions in the connnected block are notified\n+            // Transactions in the connected block are notified\n             for (const auto& pair : connectTrace.blocksConnected) {\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);"
      },
      {
        "sha": "a494eb6990fee9db508b77cc26b26a7504613982",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -50,7 +50,7 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction calls for tranactions not\n+    /** A posInBlock value for SyncTransaction calls for transactions not\n      * included in connected blocks such as transactions removed from mempool,\n      * accepted to mempool or appearing in disconnected blocks.*/\n     static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;"
      },
      {
        "sha": "01005bf3380c2c9bcb27474e975e5696ce70d8c9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -2725,7 +2725,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n             \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n-            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\\n\"\n             \"   }\\n\"\n             \"\\nResult:\\n\""
      },
      {
        "sha": "49b943d87b8bf1655d6c972d46afb6700c9bd8e0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c9b9b7d646333cb3212f1bea98e629c416cbe42/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "patch": "@@ -1012,7 +1012,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * TODO: One exception to this is that the abandoned state is cleared under the\n  * assumption that any further notification of a transaction that was considered\n  * abandoned is an indication that it is not safe to be considered abandoned.\n- * Abandoned state should probably be more carefuly tracked via different\n+ * Abandoned state should probably be more carefully tracked via different\n  * posInBlock signals or by checking mempool presence when necessary.\n  */\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)"
      }
    ]
  },
  {
    "sha": "4c69d683f22ad8bc310c901b50b8892da7a3c70c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzY5ZDY4M2YyMmFkOGJjMzEwYzkwMWI1MGI4ODkyZGE3YTNjNzBj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T08:26:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T08:27:47Z"
      },
      "message": "Merge #9553: Use z = std::max(x - y, 0) instead of z = x - y; if (z < 0) z = 0;\n\na47da4b Use z = std::max(x - y, 0); instead of z = x - y; if (z < 0) z = 0; (practicalswift)",
      "tree": {
        "sha": "dd6fa87b3f96b2bf3bd39cfb3598a1dfea2f3c74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd6fa87b3f96b2bf3bd39cfb3598a1dfea2f3c74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c69d683f22ad8bc310c901b50b8892da7a3c70c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpBEDAAoJEHSBCwEjRsmm87EH+QHWHP5PQaRvFIEAWaSFOHQy\n104xNZhFE9JNHUzN+yzEqfGRpbzI34dX2IV0XEUqj2EZjkiQ+vON+tbVsg2E6sQr\ngpXCI7DacdJew9CoyJLN5aANHhcifPiFzcMH5Xaf7UV017GsE8Yhlt1YgsxPgJCc\nt7Xt46KBYkyArG3jnftnVclSlMLdQb6kSw2bhpRBDQt9Xm3u8BpaeczdxzxiEY88\ntdJInMp6S4X3DMoNcvVBy+0N8yoNjnt75oAnYM5CTXbW2a+4pktt3NMyVvQqwcqb\nnu9RwEbThdHFY9y5I8S02vKvZ6br3tDHz6FeFOGQbKDMozP5vxn5UioL+yERCA4=\n=HSpr\n-----END PGP SIGNATURE-----",
        "payload": "tree dd6fa87b3f96b2bf3bd39cfb3598a1dfea2f3c74\nparent a441db01b527431a3d7ba169f1afd9c3bc04748f\nparent a47da4b6fecaba81dafe777b25be24e04a428e37\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487147172 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487147267 +0100\n\nMerge #9553: Use z = std::max(x - y, 0) instead of z = x - y; if (z < 0) z = 0;\n\na47da4b Use z = std::max(x - y, 0); instead of z = x - y; if (z < 0) z = 0; (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c69d683f22ad8bc310c901b50b8892da7a3c70c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c69d683f22ad8bc310c901b50b8892da7a3c70c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c69d683f22ad8bc310c901b50b8892da7a3c70c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a441db01b527431a3d7ba169f1afd9c3bc04748f"
      },
      {
        "sha": "a47da4b6fecaba81dafe777b25be24e04a428e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a47da4b6fecaba81dafe777b25be24e04a428e37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a47da4b6fecaba81dafe777b25be24e04a428e37"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b6ab4c6305184ca31ebe27282bb58a38a3ec7f3a",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69d683f22ad8bc310c901b50b8892da7a3c70c/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69d683f22ad8bc310c901b50b8892da7a3c70c/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=4c69d683f22ad8bc310c901b50b8892da7a3c70c",
        "patch": "@@ -53,11 +53,7 @@ bool CAddrInfo::IsTerrible(int64_t nNow) const\n double CAddrInfo::GetChance(int64_t nNow) const\n {\n     double fChance = 1.0;\n-\n-    int64_t nSinceLastTry = nNow - nLastTry;\n-\n-    if (nSinceLastTry < 0)\n-        nSinceLastTry = 0;\n+    int64_t nSinceLastTry = std::max<int64_t>(nNow - nLastTry, 0);\n \n     // deprioritize very recent attempts away\n     if (nSinceLastTry < 60 * 10)"
      },
      {
        "sha": "d4fd8bd37262cf9025737de0e27b5c29a7c42fb4",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69d683f22ad8bc310c901b50b8892da7a3c70c/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69d683f22ad8bc310c901b50b8892da7a3c70c/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=4c69d683f22ad8bc310c901b50b8892da7a3c70c",
        "patch": "@@ -563,9 +563,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         }\n \n         // after fee\n-        nAfterFee = nAmount - nPayFee;\n-        if (nAfterFee < 0)\n-            nAfterFee = 0;\n+        nAfterFee = std::max<CAmount>(nAmount - nPayFee, 0);\n     }\n \n     // actually update labels"
      }
    ]
  },
  {
    "sha": "d8e8b06bd0659b35e51effe35400408ec15bb09b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGU4YjA2YmQwNjU5YjM1ZTUxZWZmZTM1NDAwNDA4ZWMxNWJiMDli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T10:12:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T10:13:48Z"
      },
      "message": "Merge #9108: Use importmulti timestamp when importing watch only keys (on top of #9682)\n\na80f98b Use importmulti timestamp when importing watch only keys (Russell Yanofsky)\na58370e Dedup nTimeFirstKey update logic (Russell Yanofsky)",
      "tree": {
        "sha": "d19a69d8d9cea2f4ad3180e05802f116959ef4c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d19a69d8d9cea2f4ad3180e05802f116959ef4c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpCncAAoJEHSBCwEjRsmmWF0H/ic74RImVZB0Hh/PCCbPmJ2n\nri2N5CbVMiQGpApNrKjn9fOt3u86o+Hhu6fCJRnAl7QPno4LTydEXahn8WhMOyY3\nrAWmQNlhQDnyPODVKbIOTRAOSuCmbovBMPj8myS5r9vojfizhUVQZI+ZXmow+JLg\nZUDzNBo1CtUeUdioz2amW4/vqBZK0DUWhXyAZ9Q1IzM5nfV5m2+zvrUMSrbOP1G0\n9PJqkg5HJvHM0rpsynlYudtiscL/j0ZLgAxqOTY6a7qakQjkzNJcgoKYp0BAsQNM\n1UOsfP1P8hmP3+EwAyopJ1tY3LDjmDuW5ERHl/WwjaVFkgTD+cuuNe88jK376Zo=\n=u7eT\n-----END PGP SIGNATURE-----",
        "payload": "tree d19a69d8d9cea2f4ad3180e05802f116959ef4c3\nparent 4c69d683f22ad8bc310c901b50b8892da7a3c70c\nparent a80f98b1c7a49432dc53d18d0fb51ac334de96be\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487153520 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487153628 +0100\n\nMerge #9108: Use importmulti timestamp when importing watch only keys (on top of #9682)\n\na80f98b Use importmulti timestamp when importing watch only keys (Russell Yanofsky)\na58370e Dedup nTimeFirstKey update logic (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8e8b06bd0659b35e51effe35400408ec15bb09b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c69d683f22ad8bc310c901b50b8892da7a3c70c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c69d683f22ad8bc310c901b50b8892da7a3c70c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c69d683f22ad8bc310c901b50b8892da7a3c70c"
      },
      {
        "sha": "a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a80f98b1c7a49432dc53d18d0fb51ac334de96be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a80f98b1c7a49432dc53d18d0fb51ac334de96be"
      }
    ],
    "stats": {
      "total": 187,
      "additions": 130,
      "deletions": 57
    },
    "files": [
      {
        "sha": "02a932e737f06aa1be7cec27ba98f246299ce578",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -20,6 +20,7 @@ def run_test (self):\n         print (\"Mining blocks...\")\n         self.nodes[0].generate(1)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n         # keyword definition\n         PRIV_KEY = 'privkey'\n@@ -59,6 +60,9 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n+        watchonly_address = address['address']\n+        watchonly_timestamp = timestamp\n \n \n         # ScriptPubKey + internal\n@@ -73,6 +77,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + !internal\n         print(\"Should not import a scriptPubKey without internal flag\")\n@@ -87,6 +92,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Public key + !Internal\n@@ -103,6 +109,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n \n         # ScriptPubKey + Public key + internal\n@@ -119,6 +126,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Public key + !internal\n         print(\"Should not import a scriptPubKey without internal and with public key\")\n@@ -135,11 +143,11 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # Address + Private key + !watchonly\n         print(\"Should import an address with private key\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -170,6 +178,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n         # ScriptPubKey + Private key + internal\n         print(\"Should import a scriptPubKey with internal and with private key\")\n@@ -184,6 +193,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Private key + !internal\n         print(\"Should not import a scriptPubKey without internal and with private key\")\n@@ -199,6 +209,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # P2SH address\n@@ -209,6 +220,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh\")\n@@ -222,6 +234,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n         assert_equal(address_assert['isscript'], True)\n         assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['timestamp'], timestamp)\n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n         assert_equal(p2shunspent['solvable'], False)\n@@ -235,6 +248,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script\")\n@@ -246,6 +260,8 @@ def run_test (self):\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -260,6 +276,7 @@ def run_test (self):\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n         self.nodes[1].generate(1)\n+        timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n         transaction = self.nodes[1].gettransaction(transactionid)\n \n         print(\"Should import a p2sh with respective redeem script and private keys\")\n@@ -272,6 +289,8 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n@@ -319,6 +338,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Public key + internal + Wrong pubkey\n@@ -338,6 +358,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Private key + !watchonly + Wrong private key\n@@ -357,6 +378,7 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Private key + internal + Wrong private key\n@@ -375,6 +397,15 @@ def run_test (self):\n         address_assert = self.nodes[1].validateaddress(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n+        assert_equal('timestamp' in address_assert, False)\n+\n+        # restart nodes to check for proper serialization/deserialization of watch only address\n+        stop_nodes(self.nodes)\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['timestamp'], watchonly_timestamp);\n \n         # Bad or missing timestamps\n         print(\"Should throw on invalid or missing timestamp values\")"
      },
      {
        "sha": "6fd50127bd5b3bb915e9e784d8d201227ddcaa67",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -208,6 +208,9 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         if (pwalletMain) {\n             const auto& meta = pwalletMain->mapKeyMetadata;\n             auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n+            if (it == meta.end()) {\n+                it = meta.find(CScriptID(scriptPubKey));\n+            }\n             if (it != meta.end()) {\n                 ret.push_back(Pair(\"timestamp\", it->second.nCreateTime));\n                 if (!it->second.hdKeypath.empty()) {"
      },
      {
        "sha": "0a3225937e1b2be773ee7aafedfdb6c22afc1e20",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -143,7 +143,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \n         // whenever a key is imported, we need to scan the whole chain\n-        pwalletMain->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+        pwalletMain->UpdateTimeFirstKey(1);\n \n         if (fRescan) {\n             pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n@@ -161,7 +161,7 @@ void ImportScript(const CScript& script, const string& strLabel, bool isRedeemSc\n \n     pwalletMain->MarkDirty();\n \n-    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script))\n+    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, 0 /* nCreateTime */))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n \n     if (isRedeemScript) {\n@@ -500,8 +500,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - 7200)\n         pindex = pindex->pprev;\n \n-    if (!pwalletMain->nTimeFirstKey || nTimeBegin < pwalletMain->nTimeFirstKey)\n-        pwalletMain->nTimeFirstKey = nTimeBegin;\n+    pwalletMain->UpdateTimeFirstKey(nTimeBegin);\n \n     LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n     pwalletMain->ScanForWalletTransactions(pindex);\n@@ -576,15 +575,17 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    std::map<CKeyID, int64_t> mapKeyBirth;\n+    std::map<CTxDestination, int64_t> mapKeyBirth;\n     std::set<CKeyID> setKeyPool;\n     pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n     pwalletMain->GetAllReserveKeys(setKeyPool);\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n-        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n+    for (const auto& entry : mapKeyBirth) {\n+        if (const CKeyID* keyID = boost::get<CKeyID>(&entry.first)) { // set and test\n+            vKeyBirth.push_back(std::make_pair(entry.second, *keyID));\n+        }\n     }\n     mapKeyBirth.clear();\n     std::sort(vKeyBirth.begin(), vKeyBirth.end());\n@@ -721,7 +722,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -738,7 +739,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n             pwalletMain->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination)) {\n+            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n@@ -782,9 +783,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                     }\n \n-                    if (timestamp < pwalletMain->nTimeFirstKey) {\n-                        pwalletMain->nTimeFirstKey = timestamp;\n-                    }\n+                    pwalletMain->UpdateTimeFirstKey(timestamp);\n                 }\n             }\n \n@@ -833,7 +832,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript)) {\n+                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -851,7 +850,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey)) {\n+                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -912,9 +911,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                 }\n \n-                if (timestamp < pwalletMain->nTimeFirstKey) {\n-                    pwalletMain->nTimeFirstKey = timestamp;\n-                }\n+                pwalletMain->UpdateTimeFirstKey(timestamp);\n \n                 success = true;\n             }\n@@ -927,7 +924,7 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 pwalletMain->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script)) {\n+                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n "
      },
      {
        "sha": "f8f5a9306dc1c631301489adac23f3e8e771d024",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 14,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -113,8 +113,7 @@ CPubKey CWallet::GenerateNewKey()\n     assert(secret.VerifyPubKey(pubkey));\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n-    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n-        nTimeFirstKey = nCreationTime;\n+    UpdateTimeFirstKey(nCreationTime);\n \n     if (!AddKeyPubKey(secret, pubkey))\n         throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n@@ -207,13 +206,11 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     return false;\n }\n \n-bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n+bool CWallet::LoadKeyMetadata(const CTxDestination& keyID, const CKeyMetadata &meta)\n {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n-    if (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n-        nTimeFirstKey = meta.nCreateTime;\n-\n-    mapKeyMetadata[pubkey.GetID()] = meta;\n+    UpdateTimeFirstKey(meta.nCreateTime);\n+    mapKeyMetadata[keyID] = meta;\n     return true;\n }\n \n@@ -222,6 +219,18 @@ bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigne\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);\n }\n \n+void CWallet::UpdateTimeFirstKey(int64_t nCreateTime)\n+{\n+    AssertLockHeld(cs_wallet);\n+    if (nCreateTime <= 1) {\n+        // Cannot determine birthday information, so set the wallet birthday to\n+        // the beginning of time.\n+        nTimeFirstKey = 1;\n+    } else if (!nTimeFirstKey || nCreateTime < nTimeFirstKey) {\n+        nTimeFirstKey = nCreateTime;\n+    }\n+}\n+\n bool CWallet::AddCScript(const CScript& redeemScript)\n {\n     if (!CCryptoKeyStore::AddCScript(redeemScript))\n@@ -247,15 +256,22 @@ bool CWallet::LoadCScript(const CScript& redeemScript)\n     return CCryptoKeyStore::AddCScript(redeemScript);\n }\n \n-bool CWallet::AddWatchOnly(const CScript &dest)\n+bool CWallet::AddWatchOnly(const CScript& dest)\n {\n     if (!CCryptoKeyStore::AddWatchOnly(dest))\n         return false;\n-    nTimeFirstKey = 1; // No birthday information for watch-only keys.\n+    const CKeyMetadata& meta = mapKeyMetadata[CScriptID(dest)];\n+    UpdateTimeFirstKey(meta.nCreateTime);\n     NotifyWatchonlyChanged(true);\n     if (!fFileBacked)\n         return true;\n-    return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n+    return CWalletDB(strWalletFile).WriteWatchOnly(dest, meta);\n+}\n+\n+bool CWallet::AddWatchOnly(const CScript& dest, int64_t nCreateTime)\n+{\n+    mapKeyMetadata[CScriptID(dest)].nCreateTime = nCreateTime;\n+    return AddWatchOnly(dest);\n }\n \n bool CWallet::RemoveWatchOnly(const CScript &dest)\n@@ -3416,14 +3432,16 @@ class CAffectedKeysVisitor : public boost::static_visitor<void> {\n     void operator()(const CNoDestination &none) {}\n };\n \n-void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n+void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n-    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n-        if (it->second.nCreateTime)\n-            mapKeyBirth[it->first] = it->second.nCreateTime;\n+    for (const auto& entry : mapKeyMetadata) {\n+        if (entry.second.nCreateTime) {\n+            mapKeyBirth[entry.first] = entry.second.nCreateTime;\n+        }\n+    }\n \n     // map in which we'll infer heights of other keys\n     CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin"
      },
      {
        "sha": "990c3bdf4196a48224dbc3e7736a5feecbaa8ffc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 21,
        "deletions": 6,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -611,6 +611,20 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool fFileBacked;\n \n     std::set<int64_t> setKeyPool;\n+\n+    int64_t nTimeFirstKey;\n+\n+    /**\n+     * Private version of AddWatchOnly method which does not accept a\n+     * timestamp, and which will reset the wallet's nTimeFirstKey value to 1 if\n+     * the watch key did not previously have a timestamp associated with it.\n+     * Because this is an inherited virtual method, it is accessible despite\n+     * being marked private, but it is marked private anyway to encourage use\n+     * of the other AddWatchOnly which accepts a timestamp and sets\n+     * nTimeFirstKey more intelligently for more efficient rescans.\n+     */\n+    bool AddWatchOnly(const CScript& dest) override;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -635,7 +649,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n             mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n     }\n \n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+    // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n+    // key metadata.\n+    std::map<CTxDestination, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -688,8 +704,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<COutPoint> setLockedCoins;\n \n-    int64_t nTimeFirstKey;\n-\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n@@ -727,9 +741,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CTxDestination& pubKey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n@@ -748,7 +763,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const;\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript &dest);\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n     bool RemoveWatchOnly(const CScript &dest);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n@@ -757,7 +772,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n \n     /** \n      * Increment the next transaction order id"
      },
      {
        "sha": "106a59d5623046e21fa3c9513b50044a9a474a18",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 17,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -120,15 +120,19 @@ bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n     return Write(std::make_pair(std::string(\"cscript\"), hash), *(const CScriptBase*)(&redeemScript), false);\n }\n \n-bool CWalletDB::WriteWatchOnly(const CScript &dest)\n+bool CWalletDB::WriteWatchOnly(const CScript &dest, const CKeyMetadata& keyMeta)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Write(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest)), keyMeta))\n+        return false;\n     return Write(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)), '1');\n }\n \n bool CWalletDB::EraseWatchOnly(const CScript &dest)\n {\n     nWalletDBUpdateCounter++;\n+    if (!Erase(std::make_pair(std::string(\"watchmeta\"), *(const CScriptBase*)(&dest))))\n+        return false;\n     return Erase(std::make_pair(std::string(\"watchs\"), *(const CScriptBase*)(&dest)));\n }\n \n@@ -259,14 +263,15 @@ class CWalletScanState {\n public:\n     unsigned int nKeys;\n     unsigned int nCKeys;\n+    unsigned int nWatchKeys;\n     unsigned int nKeyMeta;\n     bool fIsEncrypted;\n     bool fAnyUnordered;\n     int nFileVersion;\n     vector<uint256> vWalletUpgrade;\n \n     CWalletScanState() {\n-        nKeys = nCKeys = nKeyMeta = 0;\n+        nKeys = nCKeys = nWatchKeys = nKeyMeta = 0;\n         fIsEncrypted = false;\n         fAnyUnordered = false;\n         nFileVersion = 0;\n@@ -348,16 +353,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"watchs\")\n         {\n+            wss.nWatchKeys++;\n             CScript script;\n             ssKey >> *(CScriptBase*)(&script);\n             char fYes;\n             ssValue >> fYes;\n             if (fYes == '1')\n                 pwallet->LoadWatchOnly(script);\n-\n-            // Watch-only addresses have no birthday information for now,\n-            // so set the wallet birthday to the beginning of time.\n-            pwallet->nTimeFirstKey = 1;\n         }\n         else if (strType == \"key\" || strType == \"wkey\")\n         {\n@@ -458,20 +460,27 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             }\n             wss.fIsEncrypted = true;\n         }\n-        else if (strType == \"keymeta\")\n+        else if (strType == \"keymeta\" || strType == \"watchmeta\")\n         {\n-            CPubKey vchPubKey;\n-            ssKey >> vchPubKey;\n+            CTxDestination keyID;\n+            if (strType == \"keymeta\")\n+            {\n+              CPubKey vchPubKey;\n+              ssKey >> vchPubKey;\n+              keyID = vchPubKey.GetID();\n+            }\n+            else if (strType == \"watchmeta\")\n+            {\n+              CScript script;\n+              ssKey >> *(CScriptBase*)(&script);\n+              keyID = CScriptID(script);\n+            }\n+\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n \n-            pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n-\n-            // find earliest key creation time, as wallet birthday\n-            if (!pwallet->nTimeFirstKey ||\n-                (keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n-                pwallet->nTimeFirstKey = keyMeta.nCreateTime;\n+            pwallet->LoadKeyMetadata(keyID, keyMeta);\n         }\n         else if (strType == \"defaultkey\")\n         {\n@@ -625,8 +634,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n-        pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n+    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta)\n+        pwallet->UpdateTimeFirstKey(1);\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n         WriteTx(pwallet->mapWallet[hash]);"
      },
      {
        "sha": "c7c65465df9a8fafb104c7a1e3875af71e60d1c8",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8e8b06bd0659b35e51effe35400408ec15bb09b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "patch": "@@ -135,7 +135,7 @@ class CWalletDB : public CDB\n \n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n-    bool WriteWatchOnly(const CScript &script);\n+    bool WriteWatchOnly(const CScript &script, const CKeyMetadata &keymeta);\n     bool EraseWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);"
      }
    ]
  },
  {
    "sha": "6c5427d24ca18ce01e46242876e24f68a9c72cc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzU0MjdkMjRjYTE4Y2UwMWU0NjI0Mjg3NmUyNGY2OGE5YzcyY2Mz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T10:31:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T10:31:28Z"
      },
      "message": "wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings\n\nBecause it is used inconsistently at least version 5.4.0 of g++ to\ncomplains about methods that don't use override. There is two ways to go\nabout this: remove override from the methods having it, or add it to the\nmethods missing it. I chose the second.",
      "tree": {
        "sha": "73b07bb5f5bc6a2bce2e5cde55d47337d81317b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73b07bb5f5bc6a2bce2e5cde55d47337d81317b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c5427d24ca18ce01e46242876e24f68a9c72cc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5427d24ca18ce01e46242876e24f68a9c72cc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c5427d24ca18ce01e46242876e24f68a9c72cc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5427d24ca18ce01e46242876e24f68a9c72cc3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8e8b06bd0659b35e51effe35400408ec15bb09b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a7b15a8441c8410925bd0a1a4ae9b032517483ea",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c5427d24ca18ce01e46242876e24f68a9c72cc3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c5427d24ca18ce01e46242876e24f68a9c72cc3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6c5427d24ca18ce01e46242876e24f68a9c72cc3",
        "patch": "@@ -737,7 +737,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CPubKey GenerateNewKey();\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret);\n     //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n@@ -747,10 +747,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n-    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddCScript(const CScript& redeemScript);\n+    bool AddCScript(const CScript& redeemScript) override;\n     bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n@@ -764,7 +764,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n-    bool RemoveWatchOnly(const CScript &dest);\n+    bool RemoveWatchOnly(const CScript &dest) override;\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n@@ -786,11 +786,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman);\n+    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n@@ -872,7 +872,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetChange(const CTransaction& tx) const;\n-    void SetBestChain(const CBlockLocator& loc);\n+    void SetBestChain(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n@@ -882,9 +882,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    void UpdatedTransaction(const uint256 &hashTx);\n+    void UpdatedTransaction(const uint256 &hashTx) override;\n \n-    void Inventory(const uint256 &hash)\n+    void Inventory(const uint256 &hash) override\n     {\n         {\n             LOCK(cs_wallet);\n@@ -894,8 +894,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script);\n-    void ResetRequestCount(const uint256 &hash)\n+    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script) override;\n+    void ResetRequestCount(const uint256 &hash) override\n     {\n         LOCK(cs_wallet);\n         mapRequestCount[hash] = 0;"
      }
    ]
  },
  {
    "sha": "ba803efb687c2cb408176c546a544a8466c652ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTgwM2VmYjY4N2MyY2I0MDgxNzZjNTQ2YTU0NGE4NDY2YzY1MmVh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-13T22:28:39Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-15T13:17:57Z"
      },
      "message": "Harden against mistakes handling invalid blocks\n\nFixes a bug in AcceptBlock() in invoking CheckBlock() with incorrect\narguments, and restores a call to CheckBlock() from ProcessNewBlock()\nas belt-and-suspenders.\n\nUpdates the (overspecified) tests to match behavior.",
      "tree": {
        "sha": "c7659cde7bfce8c021c27f762bcb7a0d88b88df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7659cde7bfce8c021c27f762bcb7a0d88b88df2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba803efb687c2cb408176c546a544a8466c652ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba803efb687c2cb408176c546a544a8466c652ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba803efb687c2cb408176c546a544a8466c652ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba803efb687c2cb408176c546a544a8466c652ea/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 13,
      "deletions": 7
    },
    "files": [
      {
        "sha": "44e5f103224651b9b01155484315de78eb8c00a8",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba803efb687c2cb408176c546a544a8466c652ea/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba803efb687c2cb408176c546a544a8466c652ea/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=ba803efb687c2cb408176c546a544a8466c652ea",
        "patch": "@@ -398,7 +398,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = block(27, spend=out[7])\n-        yield rejected(RejectResult(16, b'bad-prevblk'))\n+        yield rejected(RejectResult(0, b'bad-prevblk'))\n \n         # Now try a too-large-coinbase script\n         tip(15)\n@@ -410,7 +410,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = block(29, spend=out[7])\n-        yield rejected(RejectResult(16, b'bad-prevblk'))\n+        yield rejected(RejectResult(0, b'bad-prevblk'))\n \n         # b30 has a max-sized coinbase scriptSig.\n         tip(23)"
      },
      {
        "sha": "4ce0723b21cccd8425ee77b2256bf3c89decf82f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba803efb687c2cb408176c546a544a8466c652ea/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba803efb687c2cb408176c546a544a8466c652ea/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ba803efb687c2cb408176c546a544a8466c652ea",
        "patch": "@@ -3187,7 +3187,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n@@ -3229,13 +3229,19 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n {\n     {\n-        LOCK(cs_main);\n-\n-        // Store to disk\n         CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n-        bool ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        // Ensure that CheckBlock() passes before calling AcceptBlock, as\n+        // belt-and-suspenders.\n+        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+\n+        LOCK(cs_main);\n+\n+        if (ret) {\n+            // Store to disk\n+            ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);"
      }
    ]
  },
  {
    "sha": "476cc47da084633ac17b9b3c9257fab425b3bbba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzZjYzQ3ZGEwODQ2MzNhYzE3YjliM2M5MjU3ZmFiNDI1YjNiYmJh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T14:08:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T14:08:59Z"
      },
      "message": "Merge #9758: Selectively suppress deprecation warnings\n\n4b6cccc Selectively suppress deprecation warnings (Jonas Schnelli)",
      "tree": {
        "sha": "c4bfe9386ffe2ea44937c298aa39cb6b92e41bd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4bfe9386ffe2ea44937c298aa39cb6b92e41bd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/476cc47da084633ac17b9b3c9257fab425b3bbba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpGD7AAoJEHSBCwEjRsmmSCkIAIN3H4FCr+qo5ZHCWDbVdfob\n5S4NhRE/nNtx7NXPR+A3dcqEQKEavvP77FVOaR3ZvThYD/vABtQdYJ1JkXIsgJTN\nV7wCRYCXBp/Er1P/Bi8RLzh8f9SYEldi8H4tEjWXcj7ciX7Dq265+HRsIrR4CnYt\n8hDLIGduZ/9i0/G/iUxbObWBHFcWPD1KBndoD3j9OQ2KeW2Hwcr4hVrggpCP1SRi\nj/HuEYsSZC26oWdAA5zWBN4vDw/Ncu6OoVOGhuyMM24az38jJ623h6zRByZwD+SR\nHW6iAK5CrkgaZB+VTkxvheK3bE3hngs4tegEDmJ0yApTywmsZ00IynTd4GMOhYs=\n=T3IM\n-----END PGP SIGNATURE-----",
        "payload": "tree c4bfe9386ffe2ea44937c298aa39cb6b92e41bd1\nparent d8e8b06bd0659b35e51effe35400408ec15bb09b\nparent 4b6ccccc16b615c01939678e589f8e09cfc15d70\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487167734 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487167739 +0100\n\nMerge #9758: Selectively suppress deprecation warnings\n\n4b6cccc Selectively suppress deprecation warnings (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476cc47da084633ac17b9b3c9257fab425b3bbba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/476cc47da084633ac17b9b3c9257fab425b3bbba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476cc47da084633ac17b9b3c9257fab425b3bbba/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8e8b06bd0659b35e51effe35400408ec15bb09b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8e8b06bd0659b35e51effe35400408ec15bb09b"
      },
      {
        "sha": "4b6ccccc16b615c01939678e589f8e09cfc15d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b6ccccc16b615c01939678e589f8e09cfc15d70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b6ccccc16b615c01939678e589f8e09cfc15d70"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e0961fe7dd8d30a2e27e9e5fa36be17266550054",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476cc47da084633ac17b9b3c9257fab425b3bbba/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476cc47da084633ac17b9b3c9257fab425b3bbba/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=476cc47da084633ac17b9b3c9257fab425b3bbba",
        "patch": "@@ -762,6 +762,8 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n \n \n #elif defined(Q_OS_MAC)\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n // based on: https://github.com/Mozketo/LaunchAtLoginController/blob/master/LaunchAtLoginController.m\n \n #include <CoreFoundation/CoreFoundation.h>\n@@ -824,6 +826,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     }\n     return true;\n }\n+#pragma GCC diagnostic pop\n #else\n \n bool GetStartOnSystemStartup() { return false; }"
      },
      {
        "sha": "a2fea3fdc64fb8d488a0e0498002f52bf461f208",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476cc47da084633ac17b9b3c9257fab425b3bbba/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476cc47da084633ac17b9b3c9257fab425b3bbba/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=476cc47da084633ac17b9b3c9257fab425b3bbba",
        "patch": "@@ -5,7 +5,10 @@\n #ifndef BITCOIN_QT_PAYMENTREQUESTPLUS_H\n #define BITCOIN_QT_PAYMENTREQUESTPLUS_H\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n #include \"paymentrequest.pb.h\"\n+#pragma GCC diagnostic pop\n \n #include \"base58.h\"\n "
      }
    ]
  },
  {
    "sha": "7a93af8340d95add7f0d9ddf051aa242302cfc10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTkzYWY4MzQwZDk1YWRkN2YwZDlkZGYwNTFhYTI0MjMwMmNmYzEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T14:31:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-15T15:29:16Z"
      },
      "message": "Merge #9756: Return error when importmulti called with invalid address.\n\n9acf25c Return error when importmulti called with invalid address. (Russell Yanofsky)",
      "tree": {
        "sha": "7e7e6fdd4e47baa194cd284e1b92e478f49c51bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e7e6fdd4e47baa194cd284e1b92e478f49c51bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpHPMAAoJEHSBCwEjRsmmeHsH/288lgHWcvzC+U1fc/F0Ft5x\nzCvmbJLngOlPuYyUVCcROd6gH1uI1bp67pqgnAlSF0MncPLp8HMiYL5DnZI1Tm/p\ngqDXOKmRsp0rIjIQbyTxnXdduqUYdMP/MfdgoLIfB2MQZUif1UmKljknrKi5g9Xd\nKebbdtNOKcmn2xgttpuTZR+vwkHx+cZKAt/7r96Ca3IqFfeLpBY/q0ra8GcrxWeZ\nC/TFcudQ5OrkaS3i7rwQkoNy618ggHul4pueBcKIePM43KwAxMqggzRCQFmMgNa+\n/J/5ck+SA/loT2oH5BnnUtdM3Fxz0fP1DOunnIsJb9VfIdP8NV2scSLyR0SJKRo=\n=fQi4\n-----END PGP SIGNATURE-----",
        "payload": "tree 7e7e6fdd4e47baa194cd284e1b92e478f49c51bb\nparent 476cc47da084633ac17b9b3c9257fab425b3bbba\nparent 9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487169064 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487172556 +0100\n\nMerge #9756: Return error when importmulti called with invalid address.\n\n9acf25c Return error when importmulti called with invalid address. (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a93af8340d95add7f0d9ddf051aa242302cfc10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "476cc47da084633ac17b9b3c9257fab425b3bbba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476cc47da084633ac17b9b3c9257fab425b3bbba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/476cc47da084633ac17b9b3c9257fab425b3bbba"
      },
      {
        "sha": "9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9acf25cc013c013ee5b07dba7b1319b7c5a7b6a4"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1aa4ba2e18f2a286a9a2ef3c80420d70a010c9b2",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a93af8340d95add7f0d9ddf051aa242302cfc10/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a93af8340d95add7f0d9ddf051aa242302cfc10/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "patch": "@@ -64,6 +64,16 @@ def run_test (self):\n         watchonly_address = address['address']\n         watchonly_timestamp = timestamp\n \n+        print(\"Should not import an invalid address\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": \"not valid address\",\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Invalid address')\n \n         # ScriptPubKey + internal\n         print(\"Should import a scriptPubKey with internal flag\")"
      },
      {
        "sha": "908655d4118d3db48efceff18e4008395024d7f6",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a93af8340d95add7f0d9ddf051aa242302cfc10/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a93af8340d95add7f0d9ddf051aa242302cfc10/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "patch": "@@ -672,6 +672,9 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n         if (!isScript) {\n             address = CBitcoinAddress(output);\n+            if (!address.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+            }\n             script = GetScriptForDestination(address.Get());\n         } else {\n             if (!IsHex(output)) {"
      }
    ]
  },
  {
    "sha": "07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2FmY2Q2Mzc5YmI0NmFjZTU4NTZmNmE0N2E5MTg4Y2Y5YWVkMmVh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-15T22:01:30Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-15T22:01:30Z"
      },
      "message": "Add missing cs_wallet lock that triggers new lock held assertion\n\nA new AssertLockHeld(cs_wallet) call was added in commit a58370e\n\"Dedup nTimeFirstKey update logic\" (part of PR #9108).\n\nThe lock held assertion will fail when loading prexisting wallets files from\nbefore the #9108 merge that have watch-only keys.",
      "tree": {
        "sha": "61d3f1f987dcf8ec9a89919d2756d0b3fc51fe7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61d3f1f987dcf8ec9a89919d2756d0b3fc51fe7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07afcd6379bb46ace5856f6a47a9188cf9aed2ea/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a93af8340d95add7f0d9ddf051aa242302cfc10"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "81fdde401ecb68aa660065cae937e662dc5f8c9a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07afcd6379bb46ace5856f6a47a9188cf9aed2ea/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07afcd6379bb46ace5856f6a47a9188cf9aed2ea/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
        "patch": "@@ -559,8 +559,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n \n+    LOCK(pwallet->cs_wallet);\n     try {\n-        LOCK(pwallet->cs_wallet);\n         int nMinVersion = 0;\n         if (Read((string)\"minversion\", nMinVersion))\n         {"
      }
    ]
  },
  {
    "sha": "1e92e041ddc8232bcf64f09fd70891b80ac05c66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTkyZTA0MWRkYzgyMzJiY2Y2NGYwOWZkNzA4OTFiODBhYzA1YzY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:22:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:23:41Z"
      },
      "message": "Merge #9765: Harden against mistakes handling invalid blocks\n\nba803ef Harden against mistakes handling invalid blocks (Suhas Daftuar)",
      "tree": {
        "sha": "be67cb270126a6fa21ff7f542ebc5afb6b1f194a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be67cb270126a6fa21ff7f542ebc5afb6b1f194a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e92e041ddc8232bcf64f09fd70891b80ac05c66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpW+dAAoJEHSBCwEjRsmmjgYH/1/GgC7sQZPxBdurSXmEfqJ8\nSI3C/qyA5UsWI6RpRhb0sM1n/64fTXmkiKSohNudwEVE6rSAL3VjvXPYHhksO7ip\nHC2PMDkyswg2ci72xHKNYbjW7zw6ex1B79g6qhcQ5oAQ3wW1auaxS0ChYGmIxb5Q\n0kz7ELzPoEE4JHmzlWvlNKglO1eJJP0iVkMHs0xw2HYqQ0YdPGff8OvRbZP+o9pE\nsB2cMHOXCqT2ZW+0/5pYbcEMWT6pEU9nblazEYBrKbwnBcHqig81aHZCtimE+sOh\nMAHvzKMyhmL3diaylvqvB2WWmg2obKHarlI3WTz2Ofv1HiDInEOAbbB9gQEMFFU=\n=Emsa\n-----END PGP SIGNATURE-----",
        "payload": "tree be67cb270126a6fa21ff7f542ebc5afb6b1f194a\nparent 7a93af8340d95add7f0d9ddf051aa242302cfc10\nparent ba803efb687c2cb408176c546a544a8466c652ea\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487236937 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487237021 +0100\n\nMerge #9765: Harden against mistakes handling invalid blocks\n\nba803ef Harden against mistakes handling invalid blocks (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92e041ddc8232bcf64f09fd70891b80ac05c66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92e041ddc8232bcf64f09fd70891b80ac05c66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92e041ddc8232bcf64f09fd70891b80ac05c66/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a93af8340d95add7f0d9ddf051aa242302cfc10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a93af8340d95add7f0d9ddf051aa242302cfc10"
      },
      {
        "sha": "ba803efb687c2cb408176c546a544a8466c652ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba803efb687c2cb408176c546a544a8466c652ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba803efb687c2cb408176c546a544a8466c652ea"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 13,
      "deletions": 7
    },
    "files": [
      {
        "sha": "44e5f103224651b9b01155484315de78eb8c00a8",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e92e041ddc8232bcf64f09fd70891b80ac05c66/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e92e041ddc8232bcf64f09fd70891b80ac05c66/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=1e92e041ddc8232bcf64f09fd70891b80ac05c66",
        "patch": "@@ -398,7 +398,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = block(27, spend=out[7])\n-        yield rejected(RejectResult(16, b'bad-prevblk'))\n+        yield rejected(RejectResult(0, b'bad-prevblk'))\n \n         # Now try a too-large-coinbase script\n         tip(15)\n@@ -410,7 +410,7 @@ def update_block(block_number, new_transactions):\n \n         # Extend the b28 chain to make sure bitcoind isn't accepting b28\n         b29 = block(29, spend=out[7])\n-        yield rejected(RejectResult(16, b'bad-prevblk'))\n+        yield rejected(RejectResult(0, b'bad-prevblk'))\n \n         # b30 has a max-sized coinbase scriptSig.\n         tip(23)"
      },
      {
        "sha": "4ce0723b21cccd8425ee77b2256bf3c89decf82f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e92e041ddc8232bcf64f09fd70891b80ac05c66/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e92e041ddc8232bcf64f09fd70891b80ac05c66/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1e92e041ddc8232bcf64f09fd70891b80ac05c66",
        "patch": "@@ -3187,7 +3187,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n-    if (!CheckBlock(block, state, chainparams.GetConsensus(), GetAdjustedTime()) ||\n+    if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n         if (state.IsInvalid() && !state.CorruptionPossible()) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;\n@@ -3229,13 +3229,19 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n {\n     {\n-        LOCK(cs_main);\n-\n-        // Store to disk\n         CBlockIndex *pindex = NULL;\n         if (fNewBlock) *fNewBlock = false;\n         CValidationState state;\n-        bool ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        // Ensure that CheckBlock() passes before calling AcceptBlock, as\n+        // belt-and-suspenders.\n+        bool ret = CheckBlock(*pblock, state, chainparams.GetConsensus());\n+\n+        LOCK(cs_main);\n+\n+        if (ret) {\n+            // Store to disk\n+            ret = AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, NULL, fNewBlock);\n+        }\n         CheckBlockIndex(chainparams.GetConsensus());\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);"
      }
    ]
  },
  {
    "sha": "f8af89a9182059929bf8a6facd45478f90dd9b25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGFmODlhOTE4MjA1OTkyOWJmOGE2ZmFjZDQ1NDc4ZjkwZGQ5YjI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:24:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:24:24Z"
      },
      "message": "Merge #9764: wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings\n\n6c5427d wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings (Wladimir J. van der Laan)",
      "tree": {
        "sha": "9d6f1d2834291ba59002a20238fd67466a9b9217",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d6f1d2834291ba59002a20238fd67466a9b9217"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8af89a9182059929bf8a6facd45478f90dd9b25",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpW/IAAoJEHSBCwEjRsmmWjgH/inJyvcCKc/TvU6Uhxw8Dxbp\nP5SuLbt5kn7d5WNKa7Aw+4UZehDn65cMbQ4wq5anhQFT1Hyw1hASIQSvqkEDR9vC\n0WKU73Hmf9o0BDOEnP58f3CoYo6xtbw7G7rdKBekIx2coOLnh7jB/VVcSQyEKg03\nyfyOCu7y8YbNh8pOGZvTN/dAiphJVy2cN0fkAvHz+Y8waU+0S47fB3AAjnm2RZuS\n+yTgcqgbFnzNFfvbX9/e3k1CGVWWjVYqUoMmvvYtqICA3VZFTtvi4s84vi7kN/1a\nLdsTQTkALZDLby1B+Umg3MKkJZAhTgLJbsfmIEXpUcwwhpE4NFKY49Vgb4eOCYY=\n=9Ls6\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d6f1d2834291ba59002a20238fd67466a9b9217\nparent 1e92e041ddc8232bcf64f09fd70891b80ac05c66\nparent 6c5427d24ca18ce01e46242876e24f68a9c72cc3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487237061 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487237064 +0100\n\nMerge #9764: wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings\n\n6c5427d wallet: Prevent \"overrides a member function but is not marked 'override'\" warnings (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8af89a9182059929bf8a6facd45478f90dd9b25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8af89a9182059929bf8a6facd45478f90dd9b25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8af89a9182059929bf8a6facd45478f90dd9b25/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e92e041ddc8232bcf64f09fd70891b80ac05c66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92e041ddc8232bcf64f09fd70891b80ac05c66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92e041ddc8232bcf64f09fd70891b80ac05c66"
      },
      {
        "sha": "6c5427d24ca18ce01e46242876e24f68a9c72cc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5427d24ca18ce01e46242876e24f68a9c72cc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c5427d24ca18ce01e46242876e24f68a9c72cc3"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a7b15a8441c8410925bd0a1a4ae9b032517483ea",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8af89a9182059929bf8a6facd45478f90dd9b25/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8af89a9182059929bf8a6facd45478f90dd9b25/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f8af89a9182059929bf8a6facd45478f90dd9b25",
        "patch": "@@ -737,7 +737,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CPubKey GenerateNewKey();\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret);\n     //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n@@ -747,10 +747,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void UpdateTimeFirstKey(int64_t nCreateTime);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n-    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;\n     //! Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddCScript(const CScript& redeemScript);\n+    bool AddCScript(const CScript& redeemScript) override;\n     bool LoadCScript(const CScript& redeemScript);\n \n     //! Adds a destination data tuple to the store, and saves it to disk\n@@ -764,7 +764,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n-    bool RemoveWatchOnly(const CScript &dest);\n+    bool RemoveWatchOnly(const CScript &dest) override;\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n@@ -786,11 +786,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman);\n+    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n@@ -872,7 +872,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool IsAllFromMe(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const;\n     CAmount GetChange(const CTransaction& tx) const;\n-    void SetBestChain(const CBlockLocator& loc);\n+    void SetBestChain(const CBlockLocator& loc) override;\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n@@ -882,9 +882,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     bool DelAddressBook(const CTxDestination& address);\n \n-    void UpdatedTransaction(const uint256 &hashTx);\n+    void UpdatedTransaction(const uint256 &hashTx) override;\n \n-    void Inventory(const uint256 &hash)\n+    void Inventory(const uint256 &hash) override\n     {\n         {\n             LOCK(cs_wallet);\n@@ -894,8 +894,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script);\n-    void ResetRequestCount(const uint256 &hash)\n+    void GetScriptForMining(boost::shared_ptr<CReserveScript> &script) override;\n+    void ResetRequestCount(const uint256 &hash) override\n     {\n         LOCK(cs_wallet);\n         mapRequestCount[hash] = 0;"
      }
    ]
  },
  {
    "sha": "e43a58514dd38dacd930aa4c94afb998d4360183",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDNhNTg1MTRkZDM4ZGFjZDkzMGFhNGM5NGFmYjk5OGQ0MzYwMTgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:25:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T09:30:33Z"
      },
      "message": "Merge #9771: Add missing cs_wallet lock that triggers new lock held assertion\n\n07afcd6 Add missing cs_wallet lock that triggers new lock held assertion (Russell Yanofsky)",
      "tree": {
        "sha": "47d9aedeed5b0d69ec6e908552dfc077b67b38a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47d9aedeed5b0d69ec6e908552dfc077b67b38a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e43a58514dd38dacd930aa4c94afb998d4360183",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpXE5AAoJEHSBCwEjRsmmt2gIAIv+jL1OUWMrjtgeh2zvT2fb\nRM8v0yGXlnwJ4eHwe17zPM+JEyejBt7Lb5cAI+nJbOPAMq8wtplwsFi3ud3YH48s\nqAEVNcgx2psLpJL+BumFex8xzPZu4sE5liUMGbnGivsBBiDzVlzaeO/jylZhRF61\nOHq9WJppYEFqO/Rd2SC6puuMuV5Bnc5Aq/nrwICOdE0oz3fTP92uITvTsarF0s3b\nXOIRBekPgVUJAdm3Pn+Naw0Tn8l+EkxLJx154Rk22qyHR4agg7sV9pCa8UlwhBnP\nfSHew9xuAJHmPcrLeB0aNUNq0+MViTL7U6+gfrSDw+SEf1lCZFear7vqK56KwvE=\n=c76a\n-----END PGP SIGNATURE-----",
        "payload": "tree 47d9aedeed5b0d69ec6e908552dfc077b67b38a9\nparent f8af89a9182059929bf8a6facd45478f90dd9b25\nparent 07afcd6379bb46ace5856f6a47a9188cf9aed2ea\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487237120 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487237433 +0100\n\nMerge #9771: Add missing cs_wallet lock that triggers new lock held assertion\n\n07afcd6 Add missing cs_wallet lock that triggers new lock held assertion (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e43a58514dd38dacd930aa4c94afb998d4360183",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e43a58514dd38dacd930aa4c94afb998d4360183",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e43a58514dd38dacd930aa4c94afb998d4360183/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8af89a9182059929bf8a6facd45478f90dd9b25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8af89a9182059929bf8a6facd45478f90dd9b25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8af89a9182059929bf8a6facd45478f90dd9b25"
      },
      {
        "sha": "07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07afcd6379bb46ace5856f6a47a9188cf9aed2ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07afcd6379bb46ace5856f6a47a9188cf9aed2ea"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "81fdde401ecb68aa660065cae937e662dc5f8c9a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e43a58514dd38dacd930aa4c94afb998d4360183/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e43a58514dd38dacd930aa4c94afb998d4360183/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=e43a58514dd38dacd930aa4c94afb998d4360183",
        "patch": "@@ -559,8 +559,8 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n \n+    LOCK(pwallet->cs_wallet);\n     try {\n-        LOCK(pwallet->cs_wallet);\n         int nMinVersion = 0;\n         if (Read((string)\"minversion\", nMinVersion))\n         {"
      }
    ]
  },
  {
    "sha": "00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGU2MjNkMGI4Y2QxYzI2MWEyNjcxYWE4YWIyMjFhMDQ3NGJjN2M4",
    "commit": {
      "author": {
        "name": "CryptAxe",
        "email": "cryptaxe@gmail.com",
        "date": "2017-02-15T07:00:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T12:52:38Z"
      },
      "message": "[Trivial] Update comments referencing main.cpp",
      "tree": {
        "sha": "09484354eb8b5cb3c4ac573189bdd38db4a1b43c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09484354eb8b5cb3c4ac573189bdd38db4a1b43c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/comments",
    "author": {
      "login": "CryptAxe",
      "id": 8107318,
      "node_id": "MDQ6VXNlcjgxMDczMTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8107318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CryptAxe",
      "html_url": "https://github.com/CryptAxe",
      "followers_url": "https://api.github.com/users/CryptAxe/followers",
      "following_url": "https://api.github.com/users/CryptAxe/following{/other_user}",
      "gists_url": "https://api.github.com/users/CryptAxe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CryptAxe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CryptAxe/subscriptions",
      "organizations_url": "https://api.github.com/users/CryptAxe/orgs",
      "repos_url": "https://api.github.com/users/CryptAxe/repos",
      "events_url": "https://api.github.com/users/CryptAxe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CryptAxe/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a441db01b527431a3d7ba169f1afd9c3bc04748f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a441db01b527431a3d7ba169f1afd9c3bc04748f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b932b2dd853ff0e710e037f2d431e850551dd635",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "patch": "@@ -38,7 +38,7 @@ fixes or code moves with actual code changes.\n Commit messages should be verbose by default consisting of a short subject line\n (50 chars max), a blank line and detailed explanatory text as separate\n paragraph(s); unless the title alone is self-explanatory (like \"Corrected typo\n-in main.cpp\") then a single title line is sufficient. Commit messages should be\n+in init.cpp\") then a single title line is sufficient. Commit messages should be\n helpful to people reading your code in the future, so explain the reasoning for\n your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n \n@@ -79,7 +79,7 @@ Examples:\n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor\n     Qt: Add feed bump button\n-    Trivial: Fix typo in main.cpp\n+    Trivial: Fix typo in init.cpp\n \n If a pull request is specifically not to be considered for merging (yet) please\n prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)"
      },
      {
        "sha": "c62e6ae838a94b03f3055e9c1921c2b656449958",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "patch": "@@ -23,7 +23,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-// Tests this internal-to-main.cpp method:\n+// Tests these internal-to-net_processing.cpp methods:\n extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);"
      },
      {
        "sha": "5842dd88d838c8159b79d97d349ecdfe5d9ffa43",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "patch": "@@ -395,7 +395,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n {\n     NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n-    // Used by main.cpp AcceptToMemoryPool(), which DOES do\n+    // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;"
      }
    ]
  },
  {
    "sha": "8743320d6cb31291c0786b33124209b76f6c1904",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzQzMzIwZDZjYjMxMjkxYzA3ODZiMzMxMjQyMDliNzZmNmMxOTA0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T13:01:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T13:01:14Z"
      },
      "message": "Merge #9763: [Trivial] Update comments referencing main.cpp\n\n00e623d [Trivial] Update comments referencing main.cpp (CryptAxe)",
      "tree": {
        "sha": "9d383afed19f5da6ecd0e90cf64550b86cb4f9d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d383afed19f5da6ecd0e90cf64550b86cb4f9d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8743320d6cb31291c0786b33124209b76f6c1904",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpaKaAAoJEHSBCwEjRsmm7a4IALwlomhN4Nm4gXBcqROaTrlq\ndaVk4mPoBLemrFV1i7QnwSWvxI/JymHpH8lp1Zn9PjV70huS+mn3iirUXCN27uig\nx1/mUnjeX2SBDfVNkNa+gJ3mChlmqQHXT5H7cbv73l3ystVc2YA+EUZ8Jj3J2c1Q\n0TfPdYC06SlTsHXCWmwKXRBlcb5iPOFpWRu6lEauEyQmTifX+c5ipnIzsBjMia3Q\nLQQHujbdFwNAbz9N2EiDsQV5dxSUtN8/zDMjCfvFb12Lw/k9onvt80e6yrTM208+\nplDVW+g8/1YmiIOeBHMUT2zQB8hkV8CBqba3q0DYakQtEyZfeVS/4etcYOY7ssc=\n=CQsv\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d383afed19f5da6ecd0e90cf64550b86cb4f9d4\nparent e43a58514dd38dacd930aa4c94afb998d4360183\nparent 00e623d0b8cd1c261a2671aa8ab221a0474bc7c8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487250060 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487250074 +0100\n\nMerge #9763: [Trivial] Update comments referencing main.cpp\n\n00e623d [Trivial] Update comments referencing main.cpp (CryptAxe)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8743320d6cb31291c0786b33124209b76f6c1904",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8743320d6cb31291c0786b33124209b76f6c1904",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8743320d6cb31291c0786b33124209b76f6c1904/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e43a58514dd38dacd930aa4c94afb998d4360183",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e43a58514dd38dacd930aa4c94afb998d4360183",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e43a58514dd38dacd930aa4c94afb998d4360183"
      },
      {
        "sha": "00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00e623d0b8cd1c261a2671aa8ab221a0474bc7c8"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b932b2dd853ff0e710e037f2d431e850551dd635",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8743320d6cb31291c0786b33124209b76f6c1904/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8743320d6cb31291c0786b33124209b76f6c1904/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=8743320d6cb31291c0786b33124209b76f6c1904",
        "patch": "@@ -38,7 +38,7 @@ fixes or code moves with actual code changes.\n Commit messages should be verbose by default consisting of a short subject line\n (50 chars max), a blank line and detailed explanatory text as separate\n paragraph(s); unless the title alone is self-explanatory (like \"Corrected typo\n-in main.cpp\") then a single title line is sufficient. Commit messages should be\n+in init.cpp\") then a single title line is sufficient. Commit messages should be\n helpful to people reading your code in the future, so explain the reasoning for\n your decisions. Further explanation [here](http://chris.beams.io/posts/git-commit/).\n \n@@ -79,7 +79,7 @@ Examples:\n     Consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n     Net: Automatically create hidden service, listen on Tor\n     Qt: Add feed bump button\n-    Trivial: Fix typo in main.cpp\n+    Trivial: Fix typo in init.cpp\n \n If a pull request is specifically not to be considered for merging (yet) please\n prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)"
      },
      {
        "sha": "c62e6ae838a94b03f3055e9c1921c2b656449958",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8743320d6cb31291c0786b33124209b76f6c1904/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8743320d6cb31291c0786b33124209b76f6c1904/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=8743320d6cb31291c0786b33124209b76f6c1904",
        "patch": "@@ -23,7 +23,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-// Tests this internal-to-main.cpp method:\n+// Tests these internal-to-net_processing.cpp methods:\n extern bool AddOrphanTx(const CTransactionRef& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);"
      },
      {
        "sha": "5842dd88d838c8159b79d97d349ecdfe5d9ffa43",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8743320d6cb31291c0786b33124209b76f6c1904/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8743320d6cb31291c0786b33124209b76f6c1904/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8743320d6cb31291c0786b33124209b76f6c1904",
        "patch": "@@ -395,7 +395,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n {\n     NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n-    // Used by main.cpp AcceptToMemoryPool(), which DOES do\n+    // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;"
      }
    ]
  },
  {
    "sha": "8be0866883ff4efec9182194e900a05742e1b322",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YmUwODY2ODgzZmY0ZWZlYzkxODIxOTRlOTAwYTA1NzQyZTFiMzIy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-14T20:00:34Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "[qa] Simplify import-rescan.py\n\nGet rid of partial functions so the test can be more easily extended to add\nmore variants of imports with options that affect rescanning (e.g. different\nkey timestamps).\n\nAlso change the second half of the test to send /to/ the imported addresses,\ninstead of /from/ the imported addresses. The goal of this part of the test was\nto confirm that the wallet would pick up new transactions after an import\nregardless of whether or not a rescan happened during the import. But because\nthe wallet can only do this reliably for incoming transactions and not outgoing\ntransactions (which require the wallet to look up transaction inputs) the test\npreviously was less meaningful than it should have been.",
      "tree": {
        "sha": "a29c555b05eccd3c9e386d558724740e93eb8cb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a29c555b05eccd3c9e386d558724740e93eb8cb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8be0866883ff4efec9182194e900a05742e1b322",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8be0866883ff4efec9182194e900a05742e1b322",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8be0866883ff4efec9182194e900a05742e1b322",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8be0866883ff4efec9182194e900a05742e1b322/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b"
      }
    ],
    "stats": {
      "total": 224,
      "additions": 112,
      "deletions": 112
    },
    "files": [
      {
        "sha": "7734ad5e47e85b5366ff7de2c280f12b97be7e49",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 112,
        "deletions": 112,
        "changes": 224,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8be0866883ff4efec9182194e900a05742e1b322/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8be0866883ff4efec9182194e900a05742e1b322/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=8be0866883ff4efec9182194e900a05742e1b322",
        "patch": "@@ -2,6 +2,22 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test rescan behavior of importaddress, importpubkey, importprivkey, and\n+importmulti RPCs with different types of keys and rescan options.\n+\n+Test uses three connected nodes.\n+\n+In the first part of the test, node 0 creates an address for each type of\n+import RPC call and sends BTC to it. Then nodes 1 and 2 import the addresses,\n+and the test makes listtransactions and getbalance calls to confirm that the\n+importing node either did or did not execute rescans picking up the send\n+transactions.\n+\n+In the second part of the test, node 0 sends more BTC to each address, and the\n+test makes more listtransactions and getbalance calls to confirm that the\n+importing nodes pick up the new transactions regardless of whether rescans\n+happened previously.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal)\n@@ -10,53 +26,72 @@\n import collections\n import enum\n import itertools\n-import functools\n \n Call = enum.Enum(\"Call\", \"single multi\")\n Data = enum.Enum(\"Data\", \"address pub priv\")\n-ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n-\n-\n-def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node, rescan):\n-    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n-    watchonly = data != Data.priv\n-    if call == Call.single:\n-        if data == Data.address:\n-            response = node.importaddress(address, label, rescan)\n-        elif data == Data.pub:\n-            response = node.importpubkey(pubkey, label, rescan)\n-        elif data == Data.priv:\n-            response = node.importprivkey(key, label, rescan)\n-        assert_equal(response, None)\n-    elif call == Call.multi:\n-        response = node.importmulti([{\n-            \"scriptPubKey\": {\n-                \"address\": address\n-            },\n-            \"timestamp\": \"now\",\n-            \"pubkeys\": [pubkey] if data == Data.pub else [],\n-            \"keys\": [key] if data == Data.priv else [],\n-            \"label\": label,\n-            \"watchonly\": watchonly\n-        }], {\"rescan\": rescan})\n-        assert_equal(response, [{\"success\": True}])\n-    return watchonly\n-\n-\n-# List of RPCs that import a wallet key or address in various ways.\n-IMPORT_RPCS = [functools.partial(call_import_rpc, call, data) for call, data in itertools.product(Call, Data)]\n-\n-# List of bitcoind nodes that will import keys.\n-IMPORT_NODES = [\n-    ImportNode(rescan=True),\n-    ImportNode(rescan=False),\n-]\n+Rescan = enum.Enum(\"Rescan\", \"no yes\")\n+\n+\n+class Variant(collections.namedtuple(\"Variant\", \"call data rescan\")):\n+    \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n+\n+    def do_import(self):\n+        \"\"\"Call one key import RPC.\"\"\"\n+\n+        if self.call == Call.single:\n+            if self.data == Data.address:\n+                response = self.node.importaddress(self.address[\"address\"], self.label, self.rescan == Rescan.yes)\n+            elif self.data == Data.pub:\n+                response = self.node.importpubkey(self.address[\"pubkey\"], self.label, self.rescan == Rescan.yes)\n+            elif self.data == Data.priv:\n+                response = self.node.importprivkey(self.key, self.label, self.rescan == Rescan.yes)\n+            assert_equal(response, None)\n+        elif self.call == Call.multi:\n+            response = self.node.importmulti([{\n+                \"scriptPubKey\": {\n+                    \"address\": self.address[\"address\"]\n+                },\n+                \"timestamp\": \"now\",\n+                \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n+                \"keys\": [self.key] if self.data == Data.priv else [],\n+                \"label\": self.label,\n+                \"watchonly\": self.data != Data.priv\n+            }], {\"rescan\": self.rescan == Rescan.yes})\n+            assert_equal(response, [{\"success\": True}])\n+\n+    def check(self, txid=None, amount=None):\n+        \"\"\"Verify that getbalance/listtransactions return expected values.\"\"\"\n+\n+        balance = self.node.getbalance(self.label, 0, True)\n+        assert_equal(balance, self.expected_balance)\n+\n+        txs = self.node.listtransactions(self.label, 10000, 0, True)\n+        assert_equal(len(txs), self.expected_txs)\n+\n+        if txid is not None:\n+            tx, = [tx for tx in txs if tx[\"txid\"] == txid]\n+            assert_equal(tx[\"account\"], self.label)\n+            assert_equal(tx[\"address\"], self.address[\"address\"])\n+            assert_equal(tx[\"amount\"], amount)\n+            assert_equal(tx[\"category\"], \"receive\")\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"txid\"], txid)\n+            assert_equal(tx[\"confirmations\"], 1)\n+            assert_equal(\"trusted\" not in tx, True)\n+            if self.data != Data.priv:\n+                assert_equal(tx[\"involvesWatchonly\"], True)\n+            else:\n+                assert_equal(\"involvesWatchonly\" not in tx, True)\n+\n+\n+# List of Variants for each way a key or address could be imported.\n+IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan)]\n \n \n class ImportRescanTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 1 + len(IMPORT_NODES)\n+        self.num_nodes = 3\n \n     def setup_network(self):\n         extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n@@ -67,89 +102,54 @@ def setup_network(self):\n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount and label for\n         # each possible type of wallet import RPC.\n-        import_rpc_variants = []\n-        for i, import_rpc in enumerate(IMPORT_RPCS):\n-            label = \"label{}\".format(i)\n-            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(label))\n-            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n-            amount = 24.9375 - i * .0625\n-            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n-            import_rpc = functools.partial(import_rpc, addr[\"address\"], addr[\"scriptPubKey\"], addr[\"pubkey\"], key,\n-                                           label)\n-            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n-\n+        for i, variant in enumerate(IMPORT_VARIANTS):\n+            variant.label = \"label {} {}\".format(i, variant)\n+            variant.address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(variant.label))\n+            variant.key = self.nodes[0].dumpprivkey(variant.address[\"address\"])\n+            variant.initial_amount = 25 - (i + 1) / 4.0\n+            variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n+\n+        # Generate a block containing the initial transactions.\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         sync_blocks(self.nodes)\n \n-        # For each importing node and variation of wallet import RPC, invoke\n-        # the RPC and check the results from getbalance and listtransactions.\n-        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n-            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n-                watchonly = import_rpc(node, import_node.rescan)\n-\n-                balance = node.getbalance(label, 0, True)\n-                if import_node.rescan:\n-                    assert_equal(balance, amount)\n-                else:\n-                    assert_equal(balance, 0)\n-\n-                txs = node.listtransactions(label, 10000, 0, True)\n-                if import_node.rescan:\n-                    assert_equal(len(txs), 1)\n-                    assert_equal(txs[0][\"account\"], label)\n-                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n-                    assert_equal(txs[0][\"amount\"], amount)\n-                    assert_equal(txs[0][\"category\"], \"receive\")\n-                    assert_equal(txs[0][\"label\"], label)\n-                    assert_equal(txs[0][\"txid\"], txid)\n-                    assert_equal(txs[0][\"confirmations\"], 1)\n-                    assert_equal(\"trusted\" not in txs[0], True)\n-                    if watchonly:\n-                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n-                    else:\n-                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n-                else:\n-                    assert_equal(len(txs), 0)\n-\n-        # Create spends for all the imported addresses.\n-        spend_txids = []\n+        # For each variation of wallet key import, invoke the import RPC and\n+        # check the results from getbalance and listtransactions. Import to\n+        # node 1 if rescanning is expected, and to node 2 if rescanning is not\n+        # expected. Node 2 is reserved for imports that do not cause rescans,\n+        # so later import calls don't inadvertently cause the wallet to pick up\n+        # transactions from earlier import calls where a rescan was not\n+        # expected (this would make it complicated to figure out expected\n+        # balances in the second part of the test.)\n+        for variant in IMPORT_VARIANTS:\n+            variant.node = self.nodes[1 if variant.rescan == Rescan.yes else 2]\n+            variant.do_import()\n+            if variant.rescan == Rescan.yes:\n+                variant.expected_balance = variant.initial_amount\n+                variant.expected_txs = 1\n+                variant.check(variant.initial_txid, variant.initial_amount)\n+            else:\n+                variant.expected_balance = 0\n+                variant.expected_txs = 0\n+                variant.check()\n+\n+        # Create new transactions sending to each address.\n         fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n-            raw_tx = self.nodes[0].getrawtransaction(txid)\n-            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n-            input_vout = next(out[\"n\"] for out in decoded_tx[\"vout\"]\n-                              if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n-            inputs = [{\"txid\": txid, \"vout\": input_vout}]\n-            outputs = {self.nodes[0].getnewaddress(): Decimal(amount) - fee}\n-            raw_spend_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_spend_tx = self.nodes[0].signrawtransaction(raw_spend_tx)\n-            spend_txid = self.nodes[0].sendrawtransaction(signed_spend_tx[\"hex\"])\n-            spend_txids.append(spend_txid)\n+        for i, variant in enumerate(IMPORT_VARIANTS):\n+            variant.sent_amount = 25 - (2 * i + 1) / 8.0\n+            variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)\n \n+        # Generate a block containing the new transactions.\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         sync_blocks(self.nodes)\n \n-        # Check the results from getbalance and listtransactions after the spends.\n-        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n-            txs = node.listtransactions(\"*\", 10000, 0, True)\n-            for (import_rpc, label, amount, txid, addr), spend_txid in zip(import_rpc_variants, spend_txids):\n-                balance = node.getbalance(label, 0, True)\n-                spend_tx = [tx for tx in txs if tx[\"txid\"] == spend_txid]\n-                if import_node.rescan:\n-                    assert_equal(balance, amount)\n-                    assert_equal(len(spend_tx), 1)\n-                    assert_equal(spend_tx[0][\"account\"], \"\")\n-                    assert_equal(spend_tx[0][\"amount\"] + spend_tx[0][\"fee\"], -amount)\n-                    assert_equal(spend_tx[0][\"category\"], \"send\")\n-                    assert_equal(\"label\" not in spend_tx[0], True)\n-                    assert_equal(spend_tx[0][\"confirmations\"], 1)\n-                    assert_equal(\"trusted\" not in spend_tx[0], True)\n-                    assert_equal(\"involvesWatchonly\" not in txs[0], True)\n-                else:\n-                    assert_equal(balance, 0)\n-                    assert_equal(spend_tx, [])\n+        # Check the latest results from getbalance and listtransactions.\n+        for variant in IMPORT_VARIANTS:\n+            variant.expected_balance += variant.sent_amount\n+            variant.expected_txs += 1\n+            variant.check(variant.sent_txid, variant.sent_amount)\n \n \n if __name__ == \"__main__\":"
      }
    ]
  },
  {
    "sha": "c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjg1ODNkMDYyOWJjNmUxMmVhNWQ4YzY2MGM5YjM1ODZiZTVhZDcx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-14T22:39:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "[qa] Extend import-rescan.py to test specific key timestamps",
      "tree": {
        "sha": "4926d531316e4a934f81ce21416a195a4df8d349",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4926d531316e4a934f81ce21416a195a4df8d349"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28583d0629bc6e12ea5d8c660c9b3586be5ad71/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8be0866883ff4efec9182194e900a05742e1b322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8be0866883ff4efec9182194e900a05742e1b322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8be0866883ff4efec9182194e900a05742e1b322"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "7ca606828f3f52829ca359a484e4b9f9739a5aa2",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c28583d0629bc6e12ea5d8c660c9b3586be5ad71/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c28583d0629bc6e12ea5d8c660c9b3586be5ad71/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
        "patch": "@@ -20,7 +20,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal)\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal, set_node_times)\n from decimal import Decimal\n \n import collections\n@@ -29,13 +29,13 @@\n \n Call = enum.Enum(\"Call\", \"single multi\")\n Data = enum.Enum(\"Data\", \"address pub priv\")\n-Rescan = enum.Enum(\"Rescan\", \"no yes\")\n+Rescan = enum.Enum(\"Rescan\", \"no yes late_timestamp\")\n \n \n class Variant(collections.namedtuple(\"Variant\", \"call data rescan\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n-    def do_import(self):\n+    def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n \n         if self.call == Call.single:\n@@ -51,15 +51,15 @@ def do_import(self):\n                 \"scriptPubKey\": {\n                     \"address\": self.address[\"address\"]\n                 },\n-                \"timestamp\": \"now\",\n+                \"timestamp\": timestamp + (1 if self.rescan == Rescan.late_timestamp else 0),\n                 \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n                 \"keys\": [self.key] if self.data == Data.priv else [],\n                 \"label\": self.label,\n                 \"watchonly\": self.data != Data.priv\n-            }], {\"rescan\": self.rescan == Rescan.yes})\n+            }], {\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)})\n             assert_equal(response, [{\"success\": True}])\n \n-    def check(self, txid=None, amount=None):\n+    def check(self, txid=None, amount=None, confirmations=None):\n         \"\"\"Verify that getbalance/listtransactions return expected values.\"\"\"\n \n         balance = self.node.getbalance(self.label, 0, True)\n@@ -76,7 +76,7 @@ def check(self, txid=None, amount=None):\n             assert_equal(tx[\"category\"], \"receive\")\n             assert_equal(tx[\"label\"], self.label)\n             assert_equal(tx[\"txid\"], txid)\n-            assert_equal(tx[\"confirmations\"], 1)\n+            assert_equal(tx[\"confirmations\"], confirmations)\n             assert_equal(\"trusted\" not in tx, True)\n             if self.data != Data.priv:\n                 assert_equal(tx[\"involvesWatchonly\"], True)\n@@ -109,9 +109,13 @@ def run_test(self):\n             variant.initial_amount = 25 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n \n-        # Generate a block containing the initial transactions.\n+        # Generate a block containing the initial transactions, then another\n+        # block further in the future (past the rescan window).\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n+        timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n+        set_node_times(self.nodes, timestamp + 1)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n         # For each variation of wallet key import, invoke the import RPC and\n@@ -124,11 +128,11 @@ def run_test(self):\n         # balances in the second part of the test.)\n         for variant in IMPORT_VARIANTS:\n             variant.node = self.nodes[1 if variant.rescan == Rescan.yes else 2]\n-            variant.do_import()\n+            variant.do_import(timestamp)\n             if variant.rescan == Rescan.yes:\n                 variant.expected_balance = variant.initial_amount\n                 variant.expected_txs = 1\n-                variant.check(variant.initial_txid, variant.initial_amount)\n+                variant.check(variant.initial_txid, variant.initial_amount, 2)\n             else:\n                 variant.expected_balance = 0\n                 variant.expected_txs = 0\n@@ -149,7 +153,7 @@ def run_test(self):\n         for variant in IMPORT_VARIANTS:\n             variant.expected_balance += variant.sent_amount\n             variant.expected_txs += 1\n-            variant.check(variant.sent_txid, variant.sent_amount)\n+            variant.check(variant.sent_txid, variant.sent_amount, 1)\n \n \n if __name__ == \"__main__\":"
      }
    ]
  },
  {
    "sha": "38d3e9ee5900dffb02207211ad5da8f0751e4605",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGQzZTllZTU5MDBkZmZiMDIyMDcyMTFhZDVkYThmMDc1MWU0NjA1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-15T16:28:50Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "[qa] Extend import-rescan.py to test imports on pruned nodes.",
      "tree": {
        "sha": "7b83d3c55885ff95d0bd6e30349537987a23eb58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b83d3c55885ff95d0bd6e30349537987a23eb58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38d3e9ee5900dffb02207211ad5da8f0751e4605",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d3e9ee5900dffb02207211ad5da8f0751e4605",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38d3e9ee5900dffb02207211ad5da8f0751e4605",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d3e9ee5900dffb02207211ad5da8f0751e4605/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c28583d0629bc6e12ea5d8c660c9b3586be5ad71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c28583d0629bc6e12ea5d8c660c9b3586be5ad71"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 43,
      "deletions": 21
    },
    "files": [
      {
        "sha": "bd03491f11b1605d37f907692ea5c49bc3f68413",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 43,
        "deletions": 21,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38d3e9ee5900dffb02207211ad5da8f0751e4605/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38d3e9ee5900dffb02207211ad5da8f0751e4605/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=38d3e9ee5900dffb02207211ad5da8f0751e4605",
        "patch": "@@ -5,10 +5,8 @@\n \"\"\"Test rescan behavior of importaddress, importpubkey, importprivkey, and\n importmulti RPCs with different types of keys and rescan options.\n \n-Test uses three connected nodes.\n-\n In the first part of the test, node 0 creates an address for each type of\n-import RPC call and sends BTC to it. Then nodes 1 and 2 import the addresses,\n+import RPC call and sends BTC to it. Then other nodes import the addresses,\n and the test makes listtransactions and getbalance calls to confirm that the\n importing node either did or did not execute rescans picking up the send\n transactions.\n@@ -19,6 +17,7 @@\n happened previously.\n \"\"\"\n \n+from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal, set_node_times)\n from decimal import Decimal\n@@ -32,20 +31,24 @@\n Rescan = enum.Enum(\"Rescan\", \"no yes late_timestamp\")\n \n \n-class Variant(collections.namedtuple(\"Variant\", \"call data rescan\")):\n+class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n     def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response = self.node.importaddress(self.address[\"address\"], self.label, self.rescan == Rescan.yes)\n+                response, error = try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n+                                          self.rescan == Rescan.yes)\n             elif self.data == Data.pub:\n-                response = self.node.importpubkey(self.address[\"pubkey\"], self.label, self.rescan == Rescan.yes)\n+                response, error = try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n+                                          self.rescan == Rescan.yes)\n             elif self.data == Data.priv:\n-                response = self.node.importprivkey(self.key, self.label, self.rescan == Rescan.yes)\n+                response, error = try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n             assert_equal(response, None)\n+            assert_equal(error, {'message': 'Rescan is disabled in pruned mode',\n+                                 'code': -4} if self.expect_disabled else None)\n         elif self.call == Call.multi:\n             response = self.node.importmulti([{\n                 \"scriptPubKey\": {\n@@ -85,16 +88,29 @@ def check(self, txid=None, amount=None, confirmations=None):\n \n \n # List of Variants for each way a key or address could be imported.\n-IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan)]\n+IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan, (False, True))]\n+\n+# List of nodes to import keys to. Half the nodes will have pruning disabled,\n+# half will have it enabled. Different nodes will be used for imports that are\n+# expected to cause rescans, and imports that are not expected to cause\n+# rescans, in order to prevent rescans during later imports picking up\n+# transactions associated with earlier imports. This makes it easier to keep\n+# track of expected balances and transactions.\n+ImportNode = collections.namedtuple(\"ImportNode\", \"prune rescan\")\n+IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((False, True), repeat=2)]\n \n \n class ImportRescanTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 3\n+        self.num_nodes = 1 + len(IMPORT_NODES)\n \n     def setup_network(self):\n         extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        for i, import_node in enumerate(IMPORT_NODES, 1):\n+            if import_node.prune:\n+                extra_args[i] += [\"-prune=1\"]\n+\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n@@ -119,17 +135,13 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         # For each variation of wallet key import, invoke the import RPC and\n-        # check the results from getbalance and listtransactions. Import to\n-        # node 1 if rescanning is expected, and to node 2 if rescanning is not\n-        # expected. Node 2 is reserved for imports that do not cause rescans,\n-        # so later import calls don't inadvertently cause the wallet to pick up\n-        # transactions from earlier import calls where a rescan was not\n-        # expected (this would make it complicated to figure out expected\n-        # balances in the second part of the test.)\n+        # check the results from getbalance and listtransactions.\n         for variant in IMPORT_VARIANTS:\n-            variant.node = self.nodes[1 if variant.rescan == Rescan.yes else 2]\n+            variant.expect_disabled = variant.rescan == Rescan.yes and variant.prune and variant.call == Call.single\n+            expect_rescan = variant.rescan == Rescan.yes and not variant.expect_disabled\n+            variant.node = self.nodes[1 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n             variant.do_import(timestamp)\n-            if variant.rescan == Rescan.yes:\n+            if expect_rescan:\n                 variant.expected_balance = variant.initial_amount\n                 variant.expected_txs = 1\n                 variant.check(variant.initial_txid, variant.initial_amount, 2)\n@@ -151,9 +163,19 @@ def run_test(self):\n \n         # Check the latest results from getbalance and listtransactions.\n         for variant in IMPORT_VARIANTS:\n-            variant.expected_balance += variant.sent_amount\n-            variant.expected_txs += 1\n-            variant.check(variant.sent_txid, variant.sent_amount, 1)\n+            if not variant.expect_disabled:\n+                variant.expected_balance += variant.sent_amount\n+                variant.expected_txs += 1\n+                variant.check(variant.sent_txid, variant.sent_amount, 1)\n+            else:\n+                variant.check()\n+\n+\n+def try_rpc(func, *args, **kwargs):\n+    try:\n+        return func(*args, **kwargs), None\n+    except JSONRPCException as e:\n+        return None, e.error\n \n \n if __name__ == \"__main__\":"
      }
    ]
  },
  {
    "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmFlNzVmZDNkYWQ0OGI3YTVkYjcyNzMyMTQxZDQyMWM2ODY0Yjli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T14:05:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "Merge #9675: Fix typo and spelling inconsistency in CONTRIBUTING.md\n\n36164fa Fix typo and spelling inconsistency in CONTRIBUTING.md (Koki Takahashi)",
      "tree": {
        "sha": "da1b8a35399fa0137a9dff85f67a9b2b5315d759",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da1b8a35399fa0137a9dff85f67a9b2b5315d759"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpbHDAAoJEHSBCwEjRsmmRMIH/j2wo1CTFN2AL1uXgN8TtAd4\nBWlIjcqozAy2GD48roo8QrPkD8/xzHAbLL3HZfGD9X5R2i3VJGCvhXcsUzRvTr8O\nkQJcGFI83qe1/eLGISw0m94yLV2/2Hg6ONcXarpBQbzPWPpSEqFA44zgFHVFTJQG\nTVu6WY/ENaSICXP41CAzPT97Q0GljBO+G58jU3DAbHd6GGqiqleF7VQWg+OZiChV\nz5EXT2EwjeFI9QO1FaVl/7oAuXg8uQHBsNja6XW0bvG18kWN5t1j1ZU4bKhUVgjV\nyJ8xKBtNiQIAxbABjmvcczW8T6l2t5BkYkFb7loTP4VD20UFtGavixL0O/Bzc00=\n=5Vj5\n-----END PGP SIGNATURE-----",
        "payload": "tree da1b8a35399fa0137a9dff85f67a9b2b5315d759\nparent 8743320d6cb31291c0786b33124209b76f6c1904\nparent 36164faa338d387177c6328496f63ac11eda3b78\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487253946 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487253955 +0100\n\nMerge #9675: Fix typo and spelling inconsistency in CONTRIBUTING.md\n\n36164fa Fix typo and spelling inconsistency in CONTRIBUTING.md (Koki Takahashi)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8743320d6cb31291c0786b33124209b76f6c1904",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8743320d6cb31291c0786b33124209b76f6c1904",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8743320d6cb31291c0786b33124209b76f6c1904"
      },
      {
        "sha": "36164faa338d387177c6328496f63ac11eda3b78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36164faa338d387177c6328496f63ac11eda3b78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36164faa338d387177c6328496f63ac11eda3b78"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fc8d58d97df49dfb039c8caee2293a82c93862c0",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -194,7 +194,7 @@ request. Typically reviewers will review the code for obvious errors, as well as\n test out the patch set and opine on the technical merits of the patch. Project\n maintainers take into account the peer review when determining if there is\n consensus to merge a pull request (remember that discussions may have been\n-spread out over github, mailing list and IRC discussions). The following\n+spread out over GitHub, mailing list and IRC discussions). The following\n language is used within pull-request comments:\n \n   - ACK means \"I have tested the code and I agree it should be merged\";"
      },
      {
        "sha": "6f750106e4710dbe29eb95ab0f0a54454d488657",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -3,7 +3,7 @@ Repository Tools\n \n ### [Developer tools](/contrib/devtools) ###\n Specific tools for developers working on this repository.\n-Contains the script `github-merge.py` for merging github pull requests securely and signing them using GPG.\n+Contains the script `github-merge.py` for merging GitHub pull requests securely and signing them using GPG.\n \n ### [Verify-Commits](/contrib/verify-commits) ###\n Tool to verify that every merge commit was signed by a developer using the above `github-merge.py` script."
      },
      {
        "sha": "67c5e15a15041f77122a8d0745a3164abde9e8d0",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -125,7 +125,7 @@ check or whatever).\n \n This means that there are no potential race conditions (where a\n pullreq gets updated while you're reviewing it, but before you click\n-merge), and when using GPG signatures, that even a compromised github\n+merge), and when using GPG signatures, that even a compromised GitHub\n couldn't mess with the sources.\n \n Setup"
      },
      {
        "sha": "3a7e4f73b3d60d5a88e20615205d77aa056a7c9f",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -448,7 +448,7 @@ Current subtrees include:\n   - Upstream at https://github.com/jgarzik/univalue ; report important PRs to Core to avoid delay.\n \n \n-Git and github tips\n+Git and GitHub tips\n ---------------------\n \n - For resolving merge/rebase conflicts, it can be useful to enable diff3 style using"
      },
      {
        "sha": "1702637d53ebd7a0c2f827ed114260d0f515ee51",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -4,7 +4,7 @@ Translations\n The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool.\n \n ### Helping to translate (using Transifex)\n-Transifex is setup to monitor the Github repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n+Transifex is setup to monitor the GitHub repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface.\n \n Multiple language support is critical in assisting Bitcoin\u2019s global adoption, and growth. One of Bitcoin\u2019s greatest strengths is cross-border money transfers, any help making that easier is greatly appreciated.\n \n@@ -32,7 +32,7 @@ QToolBar *toolbar = addToolBar(tr(\"Tabs toolbar\"));\n ### Creating a pull-request\n For general PRs, you shouldn\u2019t include any updates to the translation source files. They will be updated periodically, primarily around pre-releases, allowing time for any new phrases to be translated before public releases. This is also important in avoiding translation related merge conflicts.\n \n-When an updated source file is merged into the Github repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n+When an updated source file is merged into the GitHub repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n \n To create the pull-request, use the following commands:\n ```"
      },
      {
        "sha": "1019ff6653b7842f0e18371bc577eeb1faebd313",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afae75fd3dad48b7a5db72732141d421c6864b9b/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=afae75fd3dad48b7a5db72732141d421c6864b9b",
        "patch": "@@ -1,4 +1,4 @@\n-# Block and Transaction Broadcasting With ZeroMQ\n+# Block and Transaction Broadcasting with ZeroMQ\n \n [ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n connections, inter-process communication, and shared-memory,\n@@ -50,7 +50,7 @@ during the *configure* step of building bitcoind:\n     $ ./configure --disable-zmq (other options)\n \n To actually enable operation, one must set the appropriate options on\n-the commandline or in the configuration file.\n+the command line or in the configuration file.\n \n ## Usage\n "
      }
    ]
  },
  {
    "sha": "e662af358305b9fa4da772ec37c8356a9fc92ab6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjYyYWYzNTgzMDViOWZhNGRhNzcyZWMzN2M4MzU2YTlmYzkyYWI2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-14T22:39:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T14:05:55Z"
      },
      "message": "Use 2 hour grace period for key timestamps in importmulti rescans\n\nGregory Maxwell <greg@xiph.org> pointed out the lack of grace period in\nhttps://github.com/bitcoin/bitcoin/pull/9490#issue-199407998.\n\nThe importwallet RPC which uses key timestamps in a similar way already has a 2\nhour grace period.",
      "tree": {
        "sha": "3af65e84fbad7dafc5ea8b7a31d4698434f55d58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3af65e84fbad7dafc5ea8b7a31d4698434f55d58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e662af358305b9fa4da772ec37c8356a9fc92ab6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662af358305b9fa4da772ec37c8356a9fc92ab6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e662af358305b9fa4da772ec37c8356a9fc92ab6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662af358305b9fa4da772ec37c8356a9fc92ab6/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38d3e9ee5900dffb02207211ad5da8f0751e4605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38d3e9ee5900dffb02207211ad5da8f0751e4605",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38d3e9ee5900dffb02207211ad5da8f0751e4605"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "54cc6d2642adff69688326786b403048b102fb38",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e662af358305b9fa4da772ec37c8356a9fc92ab6/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e662af358305b9fa4da772ec37c8356a9fc92ab6/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=e662af358305b9fa4da772ec37c8356a9fc92ab6",
        "patch": "@@ -54,7 +54,7 @@ def do_import(self, timestamp):\n                 \"scriptPubKey\": {\n                     \"address\": self.address[\"address\"]\n                 },\n-                \"timestamp\": timestamp + (1 if self.rescan == Rescan.late_timestamp else 0),\n+                \"timestamp\": timestamp + RESCAN_WINDOW + (1 if self.rescan == Rescan.late_timestamp else 0),\n                 \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n                 \"keys\": [self.key] if self.data == Data.priv else [],\n                 \"label\": self.label,\n@@ -99,6 +99,9 @@ def check(self, txid=None, amount=None, confirmations=None):\n ImportNode = collections.namedtuple(\"ImportNode\", \"prune rescan\")\n IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((False, True), repeat=2)]\n \n+# Rescans start at the earliest block up to 2 hours before the key timestamp.\n+RESCAN_WINDOW = 2 * 60 * 60\n+\n \n class ImportRescanTest(BitcoinTestFramework):\n     def __init__(self):\n@@ -130,7 +133,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n-        set_node_times(self.nodes, timestamp + 1)\n+        set_node_times(self.nodes, timestamp + RESCAN_WINDOW + 1)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n "
      },
      {
        "sha": "30f2414675a3894f217ccca936f572b0b8664d50",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e662af358305b9fa4da772ec37c8356a9fc92ab6/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e662af358305b9fa4da772ec37c8356a9fc92ab6/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e662af358305b9fa4da772ec37c8356a9fc92ab6",
        "patch": "@@ -988,7 +988,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n             \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n             \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n-            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n+            \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n@@ -1072,7 +1073,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()) {\n-        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(nLowestTimestamp) : chainActive.Genesis();\n+        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n \n         if (pindex) {\n             pwalletMain->ScanForWalletTransactions(pindex, true);"
      }
    ]
  },
  {
    "sha": "279f944e8d3b437d31210f3ba3e798e98a9334fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzlmOTQ0ZThkM2I0MzdkMzEyMTBmM2JhM2U3OThlOThhOTMzNGZj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-02T20:08:54Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-16T18:47:55Z"
      },
      "message": "QA: Test GBT size/weight limit values",
      "tree": {
        "sha": "d5dd010dc2d75b796bda728a8fe89b5db6025d73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5dd010dc2d75b796bda728a8fe89b5db6025d73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/279f944e8d3b437d31210f3ba3e798e98a9334fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/279f944e8d3b437d31210f3ba3e798e98a9334fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/279f944e8d3b437d31210f3ba3e798e98a9334fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/279f944e8d3b437d31210f3ba3e798e98a9334fc/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fc7f0bce94f1cea0239b1543227f22a3f3b9274",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fc7f0bce94f1cea0239b1543227f22a3f3b9274",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fc7f0bce94f1cea0239b1543227f22a3f3b9274"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d6831e00e36ad2ba7c353c7ccd78acb676244674",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/279f944e8d3b437d31210f3ba3e798e98a9334fc/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/279f944e8d3b437d31210f3ba3e798e98a9334fc/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=279f944e8d3b437d31210f3ba3e798e98a9334fc",
        "patch": "@@ -130,10 +130,14 @@ def run_test(self):\n         print(\"Verify sigops are counted in GBT with pre-BIP141 rules before the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({})\n+        assert(tmpl['sizelimit'] == 1000000)\n+        assert('weightlimit' not in tmpl)\n         assert(tmpl['sigoplimit'] == 20000)\n         assert(tmpl['transactions'][0]['hash'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 2)\n         tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n+        assert(tmpl['sizelimit'] == 1000000)\n+        assert('weightlimit' not in tmpl)\n         assert(tmpl['sigoplimit'] == 20000)\n         assert(tmpl['transactions'][0]['hash'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 2)\n@@ -241,6 +245,8 @@ def run_test(self):\n         print(\"Verify sigops are counted in GBT with BIP141 rules after the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n+        assert(tmpl['sizelimit'] >= 3999577)  # actual maximum size is lower due to minimum mandatory non-witness data\n+        assert(tmpl['weightlimit'] == 4000000)\n         assert(tmpl['sigoplimit'] == 80000)\n         assert(tmpl['transactions'][0]['txid'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 8)\n@@ -250,6 +256,8 @@ def run_test(self):\n         try:\n             tmpl = self.nodes[0].getblocktemplate({})\n             assert(len(tmpl['transactions']) == 1)  # Doesn't include witness tx\n+            assert(tmpl['sizelimit'] == 1000000)\n+            assert('weightlimit' not in tmpl)\n             assert(tmpl['sigoplimit'] == 20000)\n             assert(tmpl['transactions'][0]['hash'] == txid)\n             assert(tmpl['transactions'][0]['sigops'] == 2)"
      }
    ]
  },
  {
    "sha": "3f78e460ba980d38149ee50ff5dfd75741aad9f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjc4ZTQ2MGJhOTgwZDM4MTQ5ZWU1MGZmNWRmZDc1NzQxYWFkOWYy",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-02-16T19:31:03Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2017-02-16T19:31:03Z"
      },
      "message": "Update nMinimumChainWork and defaultAssumeValid.",
      "tree": {
        "sha": "bd1ff3b89846a7f3f14cc6295c7801e95c6c0dc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd1ff3b89846a7f3f14cc6295c7801e95c6c0dc6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f78e460ba980d38149ee50ff5dfd75741aad9f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f78e460ba980d38149ee50ff5dfd75741aad9f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f78e460ba980d38149ee50ff5dfd75741aad9f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f78e460ba980d38149ee50ff5dfd75741aad9f2/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "383d9849af9752490c44b8259bd99692e21a2def",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f78e460ba980d38149ee50ff5dfd75741aad9f2/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f78e460ba980d38149ee50ff5dfd75741aad9f2/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3f78e460ba980d38149ee50ff5dfd75741aad9f2",
        "patch": "@@ -97,10 +97,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000002cb971dd56d1c583c20f90\");\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000003f94d1ad391682fe038bf5\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2\"); //447235\n+        consensus.defaultAssumeValid = uint256S(\"0x00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90\"); //453354\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -201,10 +201,10 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000198b4def2baa9338d6\");\n+        consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000001f057509eba81aed91\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x000000000871ee6842d3648317ccc8a435eb8cc3c2429aee94faff9ba26b05a0\"); //1043841\n+        consensus.defaultAssumeValid = uint256S(\"0x00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc\"); //1079274\n \n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;"
      }
    ]
  },
  {
    "sha": "91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWZiNTA2ZTBhMTU2ZDViNGYyZTljYTc2ZWU4ZGUwYjU5MWIyZWUw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-16T16:07:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-16T22:47:56Z"
      },
      "message": "Add two hour buffer to manual pruning",
      "tree": {
        "sha": "e7125dd6ab4eca8a5fe9ac7b3940320c14441f31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7125dd6ab4eca8a5fe9ac7b3940320c14441f31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7b69c81ff9c42ac95bd8fc0f289607b77c65695d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
        "patch": "@@ -820,7 +820,8 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"pruneblockchain\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or to a unix timestamp to prune based on block time.\\n\"\n+            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+            \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\\n\"\n             \"\\nResult:\\n\"\n             \"n    (numeric) Height of the last block pruned.\\n\"\n             \"\\nExamples:\\n\"\n@@ -839,7 +840,8 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     // Height value more than a billion is too high to be a block height, and\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n-        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam);\n+        // Add a 2 hour buffer to include blocks which might have had old timestamps\n+        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - 7200);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block with at least the specified timestamp.\");\n         }"
      }
    ]
  },
  {
    "sha": "55c403b8febe02555c52bac7028cd6b1f006fad1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWM0MDNiOGZlYmUwMjU1NWM1MmJhYzcwMjhjZDZiMWYwMDZmYWQx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-15T19:19:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T08:04:37Z"
      },
      "message": "Ensure `-maxsigcachesize` is in valid range\n\n- If the -maxsigcachesize parameter is set to zero, setup a minimum sized\nsigcache (2 elements) rather than segfaulting.\n- Handle maxsigcachesize being negative\n- Handle maxsigcachesize being too large",
      "tree": {
        "sha": "5c1a5795990b01c47e49a03d3854e2c3a100766c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c1a5795990b01c47e49a03d3854e2c3a100766c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55c403b8febe02555c52bac7028cd6b1f006fad1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c403b8febe02555c52bac7028cd6b1f006fad1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55c403b8febe02555c52bac7028cd6b1f006fad1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c403b8febe02555c52bac7028cd6b1f006fad1/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "476cc47da084633ac17b9b3c9257fab425b3bbba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476cc47da084633ac17b9b3c9257fab425b3bbba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/476cc47da084633ac17b9b3c9257fab425b3bbba"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6f364e42d13d8c220e8f4cd9c5e4c33374782054",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55c403b8febe02555c52bac7028cd6b1f006fad1/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55c403b8febe02555c52bac7028cd6b1f006fad1/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=55c403b8febe02555c52bac7028cd6b1f006fad1",
        "patch": "@@ -93,8 +93,9 @@ static CSignatureCache signatureCache;\n // To be called once in AppInit2/TestingSetup to initialize the signatureCache\n void InitSignatureCache()\n {\n-    size_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n-    if (nMaxCacheSize <= 0) return;\n+    // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n+    // setup_bytes creates the minimum possible cache (2 elements).\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE)), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, nMaxCacheSize>>20, nElems);"
      },
      {
        "sha": "238952bb954df1daaa9af91a36f32d2d23d26b66",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55c403b8febe02555c52bac7028cd6b1f006fad1/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55c403b8febe02555c52bac7028cd6b1f006fad1/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=55c403b8febe02555c52bac7028cd6b1f006fad1",
        "patch": "@@ -14,6 +14,8 @@\n // systems). Due to how we count cache size, actual memory usage is slightly\n // more (~32.25 MB)\n static const unsigned int DEFAULT_MAX_SIG_CACHE_SIZE = 32;\n+// Maximum sig cache size allowed\n+static const int64_t MAX_MAX_SIG_CACHE_SIZE = 16384;\n \n class CPubKey;\n "
      }
    ]
  },
  {
    "sha": "8dee8221770893fbf0ec6c19ad385537984ba44f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGVlODIyMTc3MDg5M2ZiZjBlYzZjMTlhZDM4NTUzNzk4NGJhNDRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T08:05:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T08:05:48Z"
      },
      "message": "Merge #9777: Handle unusual maxsigcachesize gracefully\n\n55c403b Ensure `-maxsigcachesize` is in valid range (John Newbery)",
      "tree": {
        "sha": "9d4cb1ad29d62306f787aa72e9fdb8f433971fc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d4cb1ad29d62306f787aa72e9fdb8f433971fc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dee8221770893fbf0ec6c19ad385537984ba44f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpq7cAAoJEHSBCwEjRsmmYUoH/RfGcXlafNMCMRyGizgWmswB\nY/jgvK4A4Uixv8W7EB4IbvhPZsCAFbR4VA/vmBT9UhZq71scSOxyHaJjJV8WJfAl\nG30mJVyac82fjb1k1cgvg4bTYqLqKP+6F62BJ7wKD46zsh4IuD9seqNIfQAs4Gor\nZI1dl4avm7wZ939l4o8gTC1HZkomNj2XYmkVg5vuWQ3JPMF6ooKx9E3zknNqUFvh\nOsIOn8DfN2bQxh7R6PGP6dqDMuZ7KiHz65fJkj9IXAsCWYfA39BXYjhiZ5zKVHGJ\nDAkMT+O9DoUL3OroDTTQ8zYP5pUDgH0iejE6ZSaoAXHI6sSJBNOmFIvGApDJYCQ=\n=xFHf\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d4cb1ad29d62306f787aa72e9fdb8f433971fc9\nparent afae75fd3dad48b7a5db72732141d421c6864b9b\nparent 55c403b8febe02555c52bac7028cd6b1f006fad1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487318739 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487318748 +0100\n\nMerge #9777: Handle unusual maxsigcachesize gracefully\n\n55c403b Ensure `-maxsigcachesize` is in valid range (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dee8221770893fbf0ec6c19ad385537984ba44f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dee8221770893fbf0ec6c19ad385537984ba44f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dee8221770893fbf0ec6c19ad385537984ba44f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afae75fd3dad48b7a5db72732141d421c6864b9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afae75fd3dad48b7a5db72732141d421c6864b9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afae75fd3dad48b7a5db72732141d421c6864b9b"
      },
      {
        "sha": "55c403b8febe02555c52bac7028cd6b1f006fad1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55c403b8febe02555c52bac7028cd6b1f006fad1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55c403b8febe02555c52bac7028cd6b1f006fad1"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6f364e42d13d8c220e8f4cd9c5e4c33374782054",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dee8221770893fbf0ec6c19ad385537984ba44f/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dee8221770893fbf0ec6c19ad385537984ba44f/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=8dee8221770893fbf0ec6c19ad385537984ba44f",
        "patch": "@@ -93,8 +93,9 @@ static CSignatureCache signatureCache;\n // To be called once in AppInit2/TestingSetup to initialize the signatureCache\n void InitSignatureCache()\n {\n-    size_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n-    if (nMaxCacheSize <= 0) return;\n+    // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,\n+    // setup_bytes creates the minimum possible cache (2 elements).\n+    size_t nMaxCacheSize = std::min(std::max((int64_t)0, GetArg(\"-maxsigcachesize\", DEFAULT_MAX_SIG_CACHE_SIZE)), MAX_MAX_SIG_CACHE_SIZE) * ((size_t) 1 << 20);\n     size_t nElems = signatureCache.setup_bytes(nMaxCacheSize);\n     LogPrintf(\"Using %zu MiB out of %zu requested for signature cache, able to store %zu elements\\n\",\n             (nElems*sizeof(uint256)) >>20, nMaxCacheSize>>20, nElems);"
      },
      {
        "sha": "238952bb954df1daaa9af91a36f32d2d23d26b66",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dee8221770893fbf0ec6c19ad385537984ba44f/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dee8221770893fbf0ec6c19ad385537984ba44f/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=8dee8221770893fbf0ec6c19ad385537984ba44f",
        "patch": "@@ -14,6 +14,8 @@\n // systems). Due to how we count cache size, actual memory usage is slightly\n // more (~32.25 MB)\n static const unsigned int DEFAULT_MAX_SIG_CACHE_SIZE = 32;\n+// Maximum sig cache size allowed\n+static const int64_t MAX_MAX_SIG_CACHE_SIZE = 16384;\n \n class CPubKey;\n "
      }
    ]
  },
  {
    "sha": "3c02b957402e5bde9d106db2e390f2d0a79be815",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzAyYjk1NzQwMmU1YmRlOWQxMDZkYjJlMzkwZjJkMGE3OWJlODE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:41:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:41:49Z"
      },
      "message": "Merge #9779: Update nMinimumChainWork and defaultAssumeValid.\n\n3f78e46 Update nMinimumChainWork and defaultAssumeValid. (Gregory Maxwell)",
      "tree": {
        "sha": "be6e3a79078493c792693988cce895c97e99a10f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be6e3a79078493c792693988cce895c97e99a10f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c02b957402e5bde9d106db2e390f2d0a79be815",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpuF9AAoJEHSBCwEjRsmmBrUH/2V3YXZr20jqfuT3KgLUm3MZ\nDRsckcIhn74ckHLB6v1HvzOD0WesguGZs3w09FEoV7pMMYTuXi8BEf5tg01yFRPy\nB2FZeWXk9Jp8VxHKwX9hrRqwjqQHJWfyLfWLETp4sow3XDmj714LeA2kOCip6ZEE\nhjOv0khBsZoxvX1ej9FFQXqpKG8JZo8u5DF4zKm7vw61g3q9NRigIUJ7Oau65X2O\naSdhSLSoiW892+3BC9ZMpfQ6EWDWhe8YfHanpl8BDGI49woXUjLqc6IegncPBMWM\nUrCVyLP/PXrqjQ4rE4Nsvnm66p/3rBQHI/PAV3MbkIPN+hhhtMRH9YW0OvtuUzU=\n=5aq8\n-----END PGP SIGNATURE-----",
        "payload": "tree be6e3a79078493c792693988cce895c97e99a10f\nparent 8dee8221770893fbf0ec6c19ad385537984ba44f\nparent 3f78e460ba980d38149ee50ff5dfd75741aad9f2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487331696 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487331709 +0100\n\nMerge #9779: Update nMinimumChainWork and defaultAssumeValid.\n\n3f78e46 Update nMinimumChainWork and defaultAssumeValid. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c02b957402e5bde9d106db2e390f2d0a79be815",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c02b957402e5bde9d106db2e390f2d0a79be815",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c02b957402e5bde9d106db2e390f2d0a79be815/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8dee8221770893fbf0ec6c19ad385537984ba44f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dee8221770893fbf0ec6c19ad385537984ba44f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dee8221770893fbf0ec6c19ad385537984ba44f"
      },
      {
        "sha": "3f78e460ba980d38149ee50ff5dfd75741aad9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f78e460ba980d38149ee50ff5dfd75741aad9f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f78e460ba980d38149ee50ff5dfd75741aad9f2"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "383d9849af9752490c44b8259bd99692e21a2def",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c02b957402e5bde9d106db2e390f2d0a79be815/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c02b957402e5bde9d106db2e390f2d0a79be815/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3c02b957402e5bde9d106db2e390f2d0a79be815",
        "patch": "@@ -97,10 +97,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000002cb971dd56d1c583c20f90\");\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000003f94d1ad391682fe038bf5\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x0000000000000000030abc968e1bd635736e880b946085c93152969b9a81a6e2\"); //447235\n+        consensus.defaultAssumeValid = uint256S(\"0x00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90\"); //453354\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -201,10 +201,10 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n \n         // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000198b4def2baa9338d6\");\n+        consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000000000001f057509eba81aed91\");\n \n         // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x000000000871ee6842d3648317ccc8a435eb8cc3c2429aee94faff9ba26b05a0\"); //1043841\n+        consensus.defaultAssumeValid = uint256S(\"0x00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc\"); //1079274\n \n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;"
      }
    ]
  },
  {
    "sha": "ad168ef4e3083aecdffaf920637fee8d57a09fb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDE2OGVmNGUzMDgzYWVjZGZmYWY5MjA2MzdmZWU4ZDU3YTA5ZmI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:44:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:51:08Z"
      },
      "message": "Merge #9778: Add two hour buffer to manual pruning\n\n91fb506 Add two hour buffer to manual pruning (Alex Morcos)",
      "tree": {
        "sha": "5d2e550ff21674202e80b7eec11083b62d6ca6c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d2e550ff21674202e80b7eec11083b62d6ca6c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad168ef4e3083aecdffaf920637fee8d57a09fb8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpuOsAAoJEHSBCwEjRsmmutgIAMogDEXRmshW8pa9HattvTGC\nStCjm+3xlEKVHEGjl5xhuLJJfEjO5j974mxKLJnBP2SLnSkwlhxuPYj7Wm4UYZZf\naCByBlf3waFuCX3h59/JGEbnix/G5epMo/7H9/hzP4Gj1PBTO0oKsaPZdyLKIVwY\nIo2PUIJdNSIbxRDS9JUSFlZCs/q3qbhgucX8CH3Jky1+c9QJ528l9F7/7zjO7M6A\n/0ltYsahiD794+dfD++KboK3n+9QYF3dJLcE5XEAlS8FAdLAW3bc7k/Rrk2WjYE6\nXriKHUco5qa+vIf48qYclZx1A2lMWdJXvaWKUughZd9F2LaSHtqlX810DAIj7Vo=\n=oFZm\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d2e550ff21674202e80b7eec11083b62d6ca6c5\nparent 3c02b957402e5bde9d106db2e390f2d0a79be815\nparent 91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487331875 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487332268 +0100\n\nMerge #9778: Add two hour buffer to manual pruning\n\n91fb506 Add two hour buffer to manual pruning (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad168ef4e3083aecdffaf920637fee8d57a09fb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad168ef4e3083aecdffaf920637fee8d57a09fb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad168ef4e3083aecdffaf920637fee8d57a09fb8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c02b957402e5bde9d106db2e390f2d0a79be815",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c02b957402e5bde9d106db2e390f2d0a79be815",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c02b957402e5bde9d106db2e390f2d0a79be815"
      },
      {
        "sha": "91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91fb506e0a156d5b4f2e9ca76ee8de0b591b2ee0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7b69c81ff9c42ac95bd8fc0f289607b77c65695d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad168ef4e3083aecdffaf920637fee8d57a09fb8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad168ef4e3083aecdffaf920637fee8d57a09fb8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ad168ef4e3083aecdffaf920637fee8d57a09fb8",
        "patch": "@@ -820,7 +820,8 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n         throw runtime_error(\n             \"pruneblockchain\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or to a unix timestamp to prune based on block time.\\n\"\n+            \"1. \\\"height\\\"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+            \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\\n\"\n             \"\\nResult:\\n\"\n             \"n    (numeric) Height of the last block pruned.\\n\"\n             \"\\nExamples:\\n\"\n@@ -839,7 +840,8 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     // Height value more than a billion is too high to be a block height, and\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n-        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam);\n+        // Add a 2 hour buffer to include blocks which might have had old timestamps\n+        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - 7200);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not find block with at least the specified timestamp.\");\n         }"
      }
    ]
  },
  {
    "sha": "9828f9a9962c1bee5c343847030b9cfd87a40a5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODI4ZjlhOTk2MmMxYmVlNWMzNDM4NDcwMzBiOWNmZDg3YTQwYTVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:53:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T11:53:41Z"
      },
      "message": "Merge #9761: Use 2 hour grace period for key timestamps in importmulti rescans\n\ne662af3 Use 2 hour grace period for key timestamps in importmulti rescans (Russell Yanofsky)\n38d3e9e [qa] Extend import-rescan.py to test imports on pruned nodes. (Russell Yanofsky)\nc28583d [qa] Extend import-rescan.py to test specific key timestamps (Russell Yanofsky)\n8be0866 [qa] Simplify import-rescan.py (Russell Yanofsky)",
      "tree": {
        "sha": "0bd64187e4f2dcff3b5bddee5fb0c9e59cdf6dca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bd64187e4f2dcff3b5bddee5fb0c9e59cdf6dca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpuRFAAoJEHSBCwEjRsmmJXUH/ROvMg886aFO4sBoU+OeLYW+\nKDMoZDupDANHNsMwY2hxuhU0iQ5Ncewta7r9uSLCT0zNt7e9Oerb8ohTd4zh0Su7\noufIPQtHAYrD3sVC9v4ZkuwZ45xa04wWitNhmQTqbiczGOFAMTB8vSDl6O3u+USt\nGjxTMFpq6YQe3IclzEcoYxkQaxgCkhoSx93eEbzTmGjLe62YzOtWLJ8VYDrIG5uk\nFb3Eu0H9900JQKGz7cbqSq5uppQYZTnPZmILmpGqdgp3AUGKBpT9I0wetqBC0Cux\nwHdysgik8OmHJozikagACZQKhtcTU+S+3GrqDu/ldveQptekBxL+MOgxmbAQkLM=\n=dTGM\n-----END PGP SIGNATURE-----",
        "payload": "tree 0bd64187e4f2dcff3b5bddee5fb0c9e59cdf6dca\nparent ad168ef4e3083aecdffaf920637fee8d57a09fb8\nparent e662af358305b9fa4da772ec37c8356a9fc92ab6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487332411 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487332421 +0100\n\nMerge #9761: Use 2 hour grace period for key timestamps in importmulti rescans\n\ne662af3 Use 2 hour grace period for key timestamps in importmulti rescans (Russell Yanofsky)\n38d3e9e [qa] Extend import-rescan.py to test imports on pruned nodes. (Russell Yanofsky)\nc28583d [qa] Extend import-rescan.py to test specific key timestamps (Russell Yanofsky)\n8be0866 [qa] Simplify import-rescan.py (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad168ef4e3083aecdffaf920637fee8d57a09fb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad168ef4e3083aecdffaf920637fee8d57a09fb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad168ef4e3083aecdffaf920637fee8d57a09fb8"
      },
      {
        "sha": "e662af358305b9fa4da772ec37c8356a9fc92ab6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e662af358305b9fa4da772ec37c8356a9fc92ab6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e662af358305b9fa4da772ec37c8356a9fc92ab6"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 145,
      "deletions": 115
    },
    "files": [
      {
        "sha": "54cc6d2642adff69688326786b403048b102fb38",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 142,
        "deletions": 113,
        "changes": 255,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9828f9a9962c1bee5c343847030b9cfd87a40a5e/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9828f9a9962c1bee5c343847030b9cfd87a40a5e/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "patch": "@@ -2,55 +2,105 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test rescan behavior of importaddress, importpubkey, importprivkey, and\n+importmulti RPCs with different types of keys and rescan options.\n+\n+In the first part of the test, node 0 creates an address for each type of\n+import RPC call and sends BTC to it. Then other nodes import the addresses,\n+and the test makes listtransactions and getbalance calls to confirm that the\n+importing node either did or did not execute rescans picking up the send\n+transactions.\n+\n+In the second part of the test, node 0 sends more BTC to each address, and the\n+test makes more listtransactions and getbalance calls to confirm that the\n+importing nodes pick up the new transactions regardless of whether rescans\n+happened previously.\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal)\n+from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal, set_node_times)\n from decimal import Decimal\n \n import collections\n import enum\n import itertools\n-import functools\n \n Call = enum.Enum(\"Call\", \"single multi\")\n Data = enum.Enum(\"Data\", \"address pub priv\")\n-ImportNode = collections.namedtuple(\"ImportNode\", \"rescan\")\n-\n-\n-def call_import_rpc(call, data, address, scriptPubKey, pubkey, key, label, node, rescan):\n-    \"\"\"Helper that calls a wallet import RPC on a bitcoin node.\"\"\"\n-    watchonly = data != Data.priv\n-    if call == Call.single:\n-        if data == Data.address:\n-            response = node.importaddress(address, label, rescan)\n-        elif data == Data.pub:\n-            response = node.importpubkey(pubkey, label, rescan)\n-        elif data == Data.priv:\n-            response = node.importprivkey(key, label, rescan)\n-        assert_equal(response, None)\n-    elif call == Call.multi:\n-        response = node.importmulti([{\n-            \"scriptPubKey\": {\n-                \"address\": address\n-            },\n-            \"timestamp\": \"now\",\n-            \"pubkeys\": [pubkey] if data == Data.pub else [],\n-            \"keys\": [key] if data == Data.priv else [],\n-            \"label\": label,\n-            \"watchonly\": watchonly\n-        }], {\"rescan\": rescan})\n-        assert_equal(response, [{\"success\": True}])\n-    return watchonly\n-\n-\n-# List of RPCs that import a wallet key or address in various ways.\n-IMPORT_RPCS = [functools.partial(call_import_rpc, call, data) for call, data in itertools.product(Call, Data)]\n-\n-# List of bitcoind nodes that will import keys.\n-IMPORT_NODES = [\n-    ImportNode(rescan=True),\n-    ImportNode(rescan=False),\n-]\n+Rescan = enum.Enum(\"Rescan\", \"no yes late_timestamp\")\n+\n+\n+class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n+    \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n+\n+    def do_import(self, timestamp):\n+        \"\"\"Call one key import RPC.\"\"\"\n+\n+        if self.call == Call.single:\n+            if self.data == Data.address:\n+                response, error = try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n+                                          self.rescan == Rescan.yes)\n+            elif self.data == Data.pub:\n+                response, error = try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n+                                          self.rescan == Rescan.yes)\n+            elif self.data == Data.priv:\n+                response, error = try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n+            assert_equal(response, None)\n+            assert_equal(error, {'message': 'Rescan is disabled in pruned mode',\n+                                 'code': -4} if self.expect_disabled else None)\n+        elif self.call == Call.multi:\n+            response = self.node.importmulti([{\n+                \"scriptPubKey\": {\n+                    \"address\": self.address[\"address\"]\n+                },\n+                \"timestamp\": timestamp + RESCAN_WINDOW + (1 if self.rescan == Rescan.late_timestamp else 0),\n+                \"pubkeys\": [self.address[\"pubkey\"]] if self.data == Data.pub else [],\n+                \"keys\": [self.key] if self.data == Data.priv else [],\n+                \"label\": self.label,\n+                \"watchonly\": self.data != Data.priv\n+            }], {\"rescan\": self.rescan in (Rescan.yes, Rescan.late_timestamp)})\n+            assert_equal(response, [{\"success\": True}])\n+\n+    def check(self, txid=None, amount=None, confirmations=None):\n+        \"\"\"Verify that getbalance/listtransactions return expected values.\"\"\"\n+\n+        balance = self.node.getbalance(self.label, 0, True)\n+        assert_equal(balance, self.expected_balance)\n+\n+        txs = self.node.listtransactions(self.label, 10000, 0, True)\n+        assert_equal(len(txs), self.expected_txs)\n+\n+        if txid is not None:\n+            tx, = [tx for tx in txs if tx[\"txid\"] == txid]\n+            assert_equal(tx[\"account\"], self.label)\n+            assert_equal(tx[\"address\"], self.address[\"address\"])\n+            assert_equal(tx[\"amount\"], amount)\n+            assert_equal(tx[\"category\"], \"receive\")\n+            assert_equal(tx[\"label\"], self.label)\n+            assert_equal(tx[\"txid\"], txid)\n+            assert_equal(tx[\"confirmations\"], confirmations)\n+            assert_equal(\"trusted\" not in tx, True)\n+            if self.data != Data.priv:\n+                assert_equal(tx[\"involvesWatchonly\"], True)\n+            else:\n+                assert_equal(\"involvesWatchonly\" not in tx, True)\n+\n+\n+# List of Variants for each way a key or address could be imported.\n+IMPORT_VARIANTS = [Variant(*variants) for variants in itertools.product(Call, Data, Rescan, (False, True))]\n+\n+# List of nodes to import keys to. Half the nodes will have pruning disabled,\n+# half will have it enabled. Different nodes will be used for imports that are\n+# expected to cause rescans, and imports that are not expected to cause\n+# rescans, in order to prevent rescans during later imports picking up\n+# transactions associated with earlier imports. This makes it easier to keep\n+# track of expected balances and transactions.\n+ImportNode = collections.namedtuple(\"ImportNode\", \"prune rescan\")\n+IMPORT_NODES = [ImportNode(*fields) for fields in itertools.product((False, True), repeat=2)]\n+\n+# Rescans start at the earliest block up to 2 hours before the key timestamp.\n+RESCAN_WINDOW = 2 * 60 * 60\n \n \n class ImportRescanTest(BitcoinTestFramework):\n@@ -60,96 +110,75 @@ def __init__(self):\n \n     def setup_network(self):\n         extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n+        for i, import_node in enumerate(IMPORT_NODES, 1):\n+            if import_node.prune:\n+                extra_args[i] += [\"-prune=1\"]\n+\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n \n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount and label for\n         # each possible type of wallet import RPC.\n-        import_rpc_variants = []\n-        for i, import_rpc in enumerate(IMPORT_RPCS):\n-            label = \"label{}\".format(i)\n-            addr = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(label))\n-            key = self.nodes[0].dumpprivkey(addr[\"address\"])\n-            amount = 24.9375 - i * .0625\n-            txid = self.nodes[0].sendtoaddress(addr[\"address\"], amount)\n-            import_rpc = functools.partial(import_rpc, addr[\"address\"], addr[\"scriptPubKey\"], addr[\"pubkey\"], key,\n-                                           label)\n-            import_rpc_variants.append((import_rpc, label, amount, txid, addr))\n-\n+        for i, variant in enumerate(IMPORT_VARIANTS):\n+            variant.label = \"label {} {}\".format(i, variant)\n+            variant.address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(variant.label))\n+            variant.key = self.nodes[0].dumpprivkey(variant.address[\"address\"])\n+            variant.initial_amount = 25 - (i + 1) / 4.0\n+            variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n+\n+        # Generate a block containing the initial transactions, then another\n+        # block further in the future (past the rescan window).\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n+        timestamp = self.nodes[0].getblockheader(self.nodes[0].getbestblockhash())[\"time\"]\n+        set_node_times(self.nodes, timestamp + RESCAN_WINDOW + 1)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n-        # For each importing node and variation of wallet import RPC, invoke\n-        # the RPC and check the results from getbalance and listtransactions.\n-        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n-            for import_rpc, label, amount, txid, addr in import_rpc_variants:\n-                watchonly = import_rpc(node, import_node.rescan)\n-\n-                balance = node.getbalance(label, 0, True)\n-                if import_node.rescan:\n-                    assert_equal(balance, amount)\n-                else:\n-                    assert_equal(balance, 0)\n-\n-                txs = node.listtransactions(label, 10000, 0, True)\n-                if import_node.rescan:\n-                    assert_equal(len(txs), 1)\n-                    assert_equal(txs[0][\"account\"], label)\n-                    assert_equal(txs[0][\"address\"], addr[\"address\"])\n-                    assert_equal(txs[0][\"amount\"], amount)\n-                    assert_equal(txs[0][\"category\"], \"receive\")\n-                    assert_equal(txs[0][\"label\"], label)\n-                    assert_equal(txs[0][\"txid\"], txid)\n-                    assert_equal(txs[0][\"confirmations\"], 1)\n-                    assert_equal(\"trusted\" not in txs[0], True)\n-                    if watchonly:\n-                        assert_equal(txs[0][\"involvesWatchonly\"], True)\n-                    else:\n-                        assert_equal(\"involvesWatchonly\" not in txs[0], True)\n-                else:\n-                    assert_equal(len(txs), 0)\n-\n-        # Create spends for all the imported addresses.\n-        spend_txids = []\n+        # For each variation of wallet key import, invoke the import RPC and\n+        # check the results from getbalance and listtransactions.\n+        for variant in IMPORT_VARIANTS:\n+            variant.expect_disabled = variant.rescan == Rescan.yes and variant.prune and variant.call == Call.single\n+            expect_rescan = variant.rescan == Rescan.yes and not variant.expect_disabled\n+            variant.node = self.nodes[1 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n+            variant.do_import(timestamp)\n+            if expect_rescan:\n+                variant.expected_balance = variant.initial_amount\n+                variant.expected_txs = 1\n+                variant.check(variant.initial_txid, variant.initial_amount, 2)\n+            else:\n+                variant.expected_balance = 0\n+                variant.expected_txs = 0\n+                variant.check()\n+\n+        # Create new transactions sending to each address.\n         fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        for import_rpc, label, amount, txid, addr in import_rpc_variants:\n-            raw_tx = self.nodes[0].getrawtransaction(txid)\n-            decoded_tx = self.nodes[0].decoderawtransaction(raw_tx)\n-            input_vout = next(out[\"n\"] for out in decoded_tx[\"vout\"]\n-                              if out[\"scriptPubKey\"][\"addresses\"] == [addr[\"address\"]])\n-            inputs = [{\"txid\": txid, \"vout\": input_vout}]\n-            outputs = {self.nodes[0].getnewaddress(): Decimal(amount) - fee}\n-            raw_spend_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_spend_tx = self.nodes[0].signrawtransaction(raw_spend_tx)\n-            spend_txid = self.nodes[0].sendrawtransaction(signed_spend_tx[\"hex\"])\n-            spend_txids.append(spend_txid)\n+        for i, variant in enumerate(IMPORT_VARIANTS):\n+            variant.sent_amount = 25 - (2 * i + 1) / 8.0\n+            variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)\n \n+        # Generate a block containing the new transactions.\n         self.nodes[0].generate(1)\n         assert_equal(self.nodes[0].getrawmempool(), [])\n         sync_blocks(self.nodes)\n \n-        # Check the results from getbalance and listtransactions after the spends.\n-        for node, import_node in zip(self.nodes[1:], IMPORT_NODES):\n-            txs = node.listtransactions(\"*\", 10000, 0, True)\n-            for (import_rpc, label, amount, txid, addr), spend_txid in zip(import_rpc_variants, spend_txids):\n-                balance = node.getbalance(label, 0, True)\n-                spend_tx = [tx for tx in txs if tx[\"txid\"] == spend_txid]\n-                if import_node.rescan:\n-                    assert_equal(balance, amount)\n-                    assert_equal(len(spend_tx), 1)\n-                    assert_equal(spend_tx[0][\"account\"], \"\")\n-                    assert_equal(spend_tx[0][\"amount\"] + spend_tx[0][\"fee\"], -amount)\n-                    assert_equal(spend_tx[0][\"category\"], \"send\")\n-                    assert_equal(\"label\" not in spend_tx[0], True)\n-                    assert_equal(spend_tx[0][\"confirmations\"], 1)\n-                    assert_equal(\"trusted\" not in spend_tx[0], True)\n-                    assert_equal(\"involvesWatchonly\" not in txs[0], True)\n-                else:\n-                    assert_equal(balance, 0)\n-                    assert_equal(spend_tx, [])\n+        # Check the latest results from getbalance and listtransactions.\n+        for variant in IMPORT_VARIANTS:\n+            if not variant.expect_disabled:\n+                variant.expected_balance += variant.sent_amount\n+                variant.expected_txs += 1\n+                variant.check(variant.sent_txid, variant.sent_amount, 1)\n+            else:\n+                variant.check()\n+\n+\n+def try_rpc(func, *args, **kwargs):\n+    try:\n+        return func(*args, **kwargs), None\n+    except JSONRPCException as e:\n+        return None, e.error\n \n \n if __name__ == \"__main__\":"
      },
      {
        "sha": "30f2414675a3894f217ccca936f572b0b8664d50",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9828f9a9962c1bee5c343847030b9cfd87a40a5e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9828f9a9962c1bee5c343847030b9cfd87a40a5e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "patch": "@@ -988,7 +988,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n             \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n             \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n-            \"                                                              0 can be specified to scan the entire blockchain.\\n\"\n+            \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n+            \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\\n\"\n             \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n@@ -1072,7 +1073,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()) {\n-        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(nLowestTimestamp) : chainActive.Genesis();\n+        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n \n         if (pindex) {\n             pwalletMain->ScanForWalletTransactions(pindex, true);"
      }
    ]
  },
  {
    "sha": "ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzEyNjdmMTNiN2QwYjliNTA1OGM2ODIxY2Y4ZGJmNzRlMDJkMTdj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-14T14:38:29Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-17T12:00:41Z"
      },
      "message": "[wallet] Remove importmulti always-true check\n\nRemove \"nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()\" check from\nimportmulti, which is always true because nLowestTimestamp is set to the\nminimum of the most recent block time and all the imported key timestamps,\nwhich is necessarily lower than the maximum block time.",
      "tree": {
        "sha": "3f0ea2d665178357cadae3ab47d6bb6306fbd5b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f0ea2d665178357cadae3ab47d6bb6306fbd5b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9828f9a9962c1bee5c343847030b9cfd87a40a5e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e95c71ac8a145e55e7490ea752edfc7b9b3f912c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c",
        "patch": "@@ -1072,7 +1072,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n     }\n \n-    if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()) {\n+    if (fRescan && fRunScan && requests.size()) {\n         CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n \n         if (pindex) {"
      }
    ]
  },
  {
    "sha": "f87e8f53920adfa80a3f4af9435370dc272c3783",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODdlOGY1MzkyMGFkZmE4MGEzZjRhZjk0MzUzNzBkYzI3MmMzNzgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T16:26:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T16:27:18Z"
      },
      "message": "build: bump version to 0.14.99\n\nNow that 0.14 branch has been split off, master is 0.14.99 (pre-0.15).\n\nAlso clean out release notes.",
      "tree": {
        "sha": "124de2635a27102d08dad98d0be7b1e6a3e5465c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/124de2635a27102d08dad98d0be7b1e6a3e5465c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYpyRsAAoJEHSBCwEjRsmmoYMIAIIOPmgcK/wVAHtkCUv6Vpx3\nqWXptGE65ccthgZPS6jWFO12OgrG/UwvjJMqnZymZaOD0g7UdD1/CpgLLo8JylQz\nEgg3r31wuH3dlDTxLLTV+EPlYmiWK1T4jm9PlX4UuaLUXPTgLQKs3CfBR89yYpOL\nwfSOxmYKjdjZMk2iovO+vW9IWXqcw2r+xxagidhWDjGfe5+RhF/qx3Q2G+EAuFk1\noEWJg4dm7I0viJDc7TvZsyXdbhi3QOx4IUcyfQXsPmzVgLXcaVwGHILroUJWy4Bf\n5h6N7AszwDqgv/0ZnOFiT9f5E9mDyQfN5LeNaitYR3Vm5N8qvX1wBdAGqL6kgZ0=\n=K29t\n-----END PGP SIGNATURE-----",
        "payload": "tree 124de2635a27102d08dad98d0be7b1e6a3e5465c\nparent 9828f9a9962c1bee5c343847030b9cfd87a40a5e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487348761 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487348838 +0100\n\nbuild: bump version to 0.14.99\n\nNow that 0.14 branch has been split off, master is 0.14.99 (pre-0.15).\n\nAlso clean out release notes.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f87e8f53920adfa80a3f4af9435370dc272c3783",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9828f9a9962c1bee5c343847030b9cfd87a40a5e"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 5,
      "deletions": 116
    },
    "files": [
      {
        "sha": "64a6234449339982d51dede65148a6c4e64f662b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -1,7 +1,7 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 13)\n+define(_CLIENT_VERSION_MINOR, 14)\n define(_CLIENT_VERSION_REVISION, 99)\n define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)"
      },
      {
        "sha": "45436a6b151a103d4adec0d8484a5f1d580bb61f",
        "filename": "doc/Doxyfile",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/Doxyfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/Doxyfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -38,7 +38,7 @@ PROJECT_NAME           = \"Bitcoin Core\"\n # could be handy for archiving the generated documentation or if some version\n # control system is used.\n \n-PROJECT_NUMBER         = 0.13.99\n+PROJECT_NUMBER         = 0.14.99\n \n # Using the PROJECT_BRIEF tag one can provide an optional one line description\n # for a project that appears at the top of each page and should give viewer a"
      },
      {
        "sha": "09f32bc09effcd4d07ea12af3801f1cf26e1659b",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core 0.13.99\n+Bitcoin Core 0.14.99\n =====================\n \n Setup"
      },
      {
        "sha": "0e4c9ce04febb43e3da0739bf9f56ea08b6f5d1d",
        "filename": "doc/README_windows.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core 0.13.99\r\n+Bitcoin Core 0.14.99\r\n =====================\r\n \r\n Intro\r"
      },
      {
        "sha": "eaa0b330ebb9ae09e672be83cb10c3bfffafa73f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 111,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -33,117 +33,6 @@ frequently tested on them.\n Notable changes\n ===============\n \n-Low-level RPC changes\n-----------------------\n-\n-- `importprunedfunds` only accepts two required arguments. Some versions accept\n-  an optional third arg, which was always ignored. Make sure to never pass more\n-  than two arguments.\n-\n-Fee Estimation Changes\n-----------------------\n-\n-- Since 0.13.2 fee estimation for a confirmation target of 1 block has been\n-  disabled. This is only a minor behavior change as there was often insufficient\n-  data for this target anyway. `estimatefee 1` will now always return -1 and\n-  `estimatesmartfee 1` will start searching at a target of 2.\n-\n-- The default target for fee estimation is changed to 6 blocks in both the GUI\n-  (previously 25) and for RPC calls (previously 2).\n-\n-Removal of Priority Estimation\n--------------------------------\n-\n-- Estimation of \"priority\" needed for a transaction to be included within a target\n-  number of blocks has been removed.  The rpc calls are deprecated and will either\n-  return -1 or 1e24 appropriately. The format for `fee_estimates.dat` has also\n-  changed to no longer save these priority estimates. It will automatically be\n-  converted to the new format which is not readable by prior versions of the\n-  software.\n-\n-- The concept of \"priority\" (coin age) transactions is planned to be removed in\n-  the next major version. To prepare for this, the default for the rate limit of\n-  priority transactions (`-limitfreerelay`) has been set to `0` kB/minute. This\n-  is not to be confused with the `prioritisetransaction` RPC which will remain\n-  supported for adding fee deltas to transactions.\n-\n-P2P connection management\n---------------------------\n-\n-- Peers manually added through the addnode option or addnode RPC now have their own\n-  limit of eight connections which does not compete with other inbound or outbound\n-  connection usage and is not subject to the maxconnections limitation.\n-\n-- New connections to manually added peers are much faster.\n-\n-Introduction of assumed-valid blocks\n--------------------------------------\n-\n-- A significant portion of the initial block download time is spent verifying\n-  scripts/signatures.  Although the verification must pass to ensure the security\n-  of the system, no other result from this verification is needed: If the node\n-  knew the history of a given block were valid it could skip checking scripts\n-  for its ancestors.\n-\n-- A new configuration option 'assumevalid' is provided to express this knowledge\n-  to the software.  Unlike the 'checkpoints' in the past this setting does not\n-  force the use of a particular chain: chains that are consistent with it are\n-  processed quicker, but other chains are still accepted if they'd otherwise\n-  be chosen as best. Also unlike 'checkpoints' the user can configure which\n-  block history is assumed true, this means that even outdated software can\n-  sync more quickly if the setting is updated by the user.\n-\n-- Because the validity of a chain history is a simple objective fact it is much\n-  easier to review this setting.  As a result the software ships with a default\n-  value adjusted to match the current chain shortly before release.  The use\n-  of this default value can be disabled by setting -assumevalid=0\n-\n-0.14.0 Change log\n-=================\n-\n-Detailed release notes follow. This overview includes changes that affect\n-behavior, not code moves, refactors and string updates. For convenience in locating\n-the code changes and accompanying discussion, both the pull request and\n-git merge commit are mentioned.\n-\n-### RPC and REST\n-\n-UTXO set query (`GET /rest/getutxos/<checkmempool>/<txid>-<n>/<txid>-<n>/.../<txid>-<n>.<bin|hex|json>`) responses\n-were changed to return status code HTTP_BAD_REQUEST (400) instead of HTTP_INTERNAL_SERVER_ERROR (500) when requests\n-contain invalid parameters.\n-\n-The first boolean argument to `getaddednodeinfo` has been removed. This is an incompatible change.\n-\n-Call \"getmininginfo\" loses the \"testnet\" field in favor of the more generic \"chain\" (which has been present for years).\n-\n-### Configuration and command-line options\n-\n-### Block and transaction handling\n-\n-### P2P protocol and network code\n-\n-### Validation\n-\n-### Build system\n-\n-### Wallet\n-\n-0.14.0 Fundrawtransaction change address reuse\n-==============================================\n-\n-Before 0.14, `fundrawtransaction` was by default wallet stateless. In almost all cases `fundrawtransaction` does add a change-output to the outputs of the funded transaction. Before 0.14, the used keypool key was never marked as change-address key and directly returned to the keypool (leading to address reuse).\n-Before 0.14, calling `getnewaddress` directly after `fundrawtransaction` did generate the same address as the change-output address.\n-\n-Since 0.14, fundrawtransaction does reserve the change-output-key from the keypool by default (optional by setting  `reserveChangeKey`, default = `true`)\n-\n-Users should also consider using `getrawchangeaddress()` in conjunction with `fundrawtransaction`'s `changeAddress` option.\n-\n-### GUI\n-\n-### Tests\n-\n-### Miscellaneous\n-\n Credits\n =======\n "
      },
      {
        "sha": "69154d546dd795ab38abe96fa285fa2f33a3e62e",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f87e8f53920adfa80a3f4af9435370dc272c3783/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f87e8f53920adfa80a3f4af9435370dc272c3783/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=f87e8f53920adfa80a3f4af9435370dc272c3783",
        "patch": "@@ -15,7 +15,7 @@\n \n //! These need to be macros, as clientversion.cpp's and bitcoin*-res.rc's voodoo requires it\n #define CLIENT_VERSION_MAJOR 0\n-#define CLIENT_VERSION_MINOR 13\n+#define CLIENT_VERSION_MINOR 14\n #define CLIENT_VERSION_REVISION 99\n #define CLIENT_VERSION_BUILD 0\n "
      }
    ]
  },
  {
    "sha": "e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmUyZjRjODU2MzYzYmJiMGUzYjViYTRkZjIyNWYzNzU0YzNkYjM5",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-16T15:49:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-17T19:12:31Z"
      },
      "message": "Return errors from importmulti if complete rescans are not successful",
      "tree": {
        "sha": "9e695fd32f65b1596f3ff613b96ec756bb2f1d2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e695fd32f65b1596f3ff613b96ec756bb2f1d2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9828f9a9962c1bee5c343847030b9cfd87a40a5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9828f9a9962c1bee5c343847030b9cfd87a40a5e"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 114,
      "deletions": 13
    },
    "files": [
      {
        "sha": "dbb42ab8c428e71efd8b0c084ea21cb184180ea0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -3331,7 +3331,7 @@ void PruneOneBlockFile(const int fileNumber)\n }\n \n \n-void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)\n+void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n@@ -4163,6 +4163,11 @@ std::string CBlockFileInfo::ToString() const\n     return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast));\n }\n \n+CBlockFileInfo* GetBlockFileInfo(size_t n)\n+{\n+    return &vinfoBlockFile.at(n);\n+}\n+\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "9c606f2419409f7ec35bd50544bdd3d006e16e27",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -299,10 +299,15 @@ double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n  */\n void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n \n+/**\n+ *  Mark one block file as pruned.\n+ */\n+void PruneOneBlockFile(const int fileNumber);\n+\n /**\n  *  Actually unlink the specified files\n  */\n-void UnlinkPrunedFiles(std::set<int>& setFilesToPrune);\n+void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n@@ -562,6 +567,9 @@ static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n \n+/** Get block file info entry for one block file */\n+CBlockFileInfo* GetBlockFileInfo(size_t n);\n+\n /** Dump the mempool to disk. */\n void DumpMempool();\n "
      },
      {
        "sha": "68049dcef78d097852346486ec37c65f114dda86",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -1074,11 +1074,32 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()) {\n         CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n-\n+        CBlockIndex* scannedRange = nullptr;\n         if (pindex) {\n-            pwalletMain->ScanForWalletTransactions(pindex, true);\n+            scannedRange = pwalletMain->ScanForWalletTransactions(pindex, true);\n             pwalletMain->ReacceptWalletTransactions();\n         }\n+\n+        if (!scannedRange || scannedRange->nHeight > pindex->nHeight) {\n+            std::vector<UniValue> results = response.getValues();\n+            response.clear();\n+            response.setArray();\n+            size_t i = 0;\n+            for (const UniValue& request : requests.getValues()) {\n+                // If key creation date is within the successfully scanned\n+                // range, or if the import result already has an error set, let\n+                // the result stand unmodified. Otherwise replace the result\n+                // with an error message.\n+                if (GetImportTimestamp(request, now) - 7200 >= scannedRange->GetBlockTimeMax() || results.at(i).exists(\"error\")) {\n+                    response.push_back(results.at(i));\n+                } else {\n+                    UniValue result = UniValue(UniValue::VOBJ);\n+                    result.pushKV(\"success\", UniValue(false));\n+                    result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, strprintf(\"Failed to rescan before time %d, transactions may be missing.\", scannedRange->GetBlockTimeMax())));\n+                    response.push_back(std::move(result));\n+                }\n+            }\n+        }\n     }\n \n     return response;"
      },
      {
        "sha": "d32e8ba06adb04c3e422c892060bd9afe5ec213e",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -9,10 +9,16 @@\n #include <utility>\n #include <vector>\n \n+#include \"rpc/server.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"validation.h\"\n #include \"wallet/test/wallet_test_fixture.h\"\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+\n+extern UniValue importmulti(const JSONRPCRequest& request);\n \n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n #define RUN_TESTS 100\n@@ -355,4 +361,58 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     empty_wallet();\n }\n \n+BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+\n+    // Cap last block file size, and mine new block in a new block file.\n+    CBlockIndex* oldTip = chainActive.Tip();\n+    GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n+    CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+    CBlockIndex* newTip = chainActive.Tip();\n+\n+    // Verify ScanForWalletTransactions picks up transactions in both the old\n+    // and new block files.\n+    {\n+        CWallet wallet;\n+        LOCK(wallet.cs_wallet);\n+        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n+    }\n+\n+    // Prune the older block file.\n+    PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n+    UnlinkPrunedFiles({oldTip->GetBlockPos().nFile});\n+\n+    // Verify ScanForWalletTransactions only picks transactions in the new block\n+    // file.\n+    {\n+        CWallet wallet;\n+        LOCK(wallet.cs_wallet);\n+        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        BOOST_CHECK_EQUAL(newTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n+    }\n+\n+    {\n+        CWallet wallet;\n+        ::pwalletMain = &wallet;\n+        UniValue key;\n+        key.setObject();\n+        key.pushKV(\"scriptPubKey\", HexStr(GetScriptForRawPubKey(coinbaseKey.GetPubKey())));\n+        key.pushKV(\"timestamp\", 0);\n+        key.pushKV(\"internal\", UniValue(true));\n+        UniValue keys;\n+        keys.setArray();\n+        keys.push_back(key);\n+        JSONRPCRequest request;\n+        request.params.setArray();\n+        request.params.push_back(keys);\n+\n+        UniValue response = importmulti(request);\n+        BOOST_CHECK_EQUAL(response.write(), strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Failed to rescan before time %d, transactions may be missing.\\\"}}]\", newTip->GetBlockTimeMax()));\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1b59c3cd80c15d764cf8a45c8ca20daa3b55c59f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -1545,10 +1545,14 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n  * Scan the block chain (starting in pindexStart) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n+ *\n+ * Returns pointer to the first block in the last contiguous range that was\n+ * successfully scanned.\n+ *\n  */\n-int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n+CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n {\n-    int ret = 0;\n+    CBlockIndex* ret = nullptr;\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n \n@@ -1570,12 +1574,15 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n                 ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((GuessVerificationProgress(chainParams.TxData(), pindex) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n \n             CBlock block;\n-            ReadBlockFromDisk(block, pindex, Params().GetConsensus());\n-            int posInBlock;\n-            for (posInBlock = 0; posInBlock < (int)block.vtx.size(); posInBlock++)\n-            {\n-                if (AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate))\n-                    ret++;\n+            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+                for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n+                    AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                }\n+                if (!ret) {\n+                    ret = pindex;\n+                }\n+            } else {\n+                ret = nullptr;\n             }\n             pindex = chainActive.Next(pindex);\n             if (GetTime() >= nNow + 60) {"
      },
      {
        "sha": "98e4fb87b91073381079b735fcda381ac5f0e4a8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "patch": "@@ -788,7 +788,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n-    int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);"
      }
    ]
  },
  {
    "sha": "a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmEzZTU4YzQ4MzcwMGJkNWYyYmM3ZDExN2E2MjFlMGM0YWY2MGUz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-17T19:22:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-17T19:22:56Z"
      },
      "message": "Various review markups for rpc-tests.py improvements",
      "tree": {
        "sha": "6e4cf1bfe8691b5f68fa3911dd17edf2f37c6245",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e4cf1bfe8691b5f68fa3911dd17edf2f37c6245"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3de3ccdfaaa5edcf4e0924860d960e7e0db5a9b9"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 21,
      "deletions": 26
    },
    "files": [
      {
        "sha": "18e08f06c40196b5f897e24a33f90247a7fef1bc",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 17,
        "deletions": 15,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "patch": "@@ -8,6 +8,8 @@\n This module calls down into individual test cases via subprocess. It will\n forward all unrecognized arguments onto the individual test scripts.\n \n+RPC tests are disabled on Windows by default. Use --force to run them anyway.\n+\n For a description of arguments recognized by test scripts, see\n `qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n \n@@ -24,8 +26,8 @@\n import re\n \n BASE_SCRIPTS= [\n-    # Scripts that are run by the travis build process\n-    # longest test should go first, to favor running tests in parallel\n+    # Scripts that are run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n     # vv Tests less than 5m vv\n@@ -130,11 +132,11 @@ def main():\n                                      formatter_class=argparse.RawTextHelpFormatter)\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+    parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n-    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n     parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n-    parser.add_argument('--win', action='store_true', help='signal that this is running in a Windows environment and that we should run the tests')\n-    (args, unknown_args) = parser.parse_known_args()\n+    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+    args, unknown_args = parser.parse_known_args()\n \n     # Create a set to store arguments and create the passon string\n     tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n@@ -144,15 +146,15 @@ def main():\n     config = configparser.ConfigParser()\n     config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n \n-    enable_wallet = config[\"components\"][\"ENABLE_WALLET\"] == \"True\"\n-    enable_utils = config[\"components\"][\"ENABLE_UTILS\"] == \"True\"\n-    enable_bitcoind = config[\"components\"][\"ENABLE_BITCOIND\"] == \"True\"\n-    enable_zmq = config[\"components\"][\"ENABLE_ZMQ\"] == \"True\" and not args.nozmq\n+    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n+    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n+    enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n+    enable_zmq = config[\"components\"].getboolean(\"ENABLE_ZMQ\") and not args.nozmq\n \n-    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.win:\n+    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n         # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n         # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-        print(\"Win tests currently disabled by default.  Use --win option to enable\")\n+        print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n         sys.exit(0)\n \n     if not (enable_wallet and enable_utils and enable_bitcoind):\n@@ -170,12 +172,12 @@ def main():\n             raise\n \n     # Build list of tests\n-    if len(tests) != 0:\n+    if tests:\n         # Individual tests have been specified. Run specified tests that exist\n         # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n         test_list = [t for t in ALL_SCRIPTS if\n                 (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n-        if len(test_list) == 0:\n+        if not test_list:\n             print(\"No valid test scripts specified. Check that your test is in one \"\n                   \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n             print(\"Scripts not found:\")\n@@ -200,9 +202,9 @@ def main():\n         subprocess.check_call((config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/' + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n-    runtests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n \n-def runtests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n+def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n     BOLD = (\"\",\"\")\n     if os.name == 'posix':\n         # primitive formatting on supported"
      },
      {
        "sha": "e3e457d0b1d120c13036c5cbfb84004b7168a361",
        "filename": "qa/pull-tester/tests_config.ini.in",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/tests_config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3/qa/pull-tester/tests_config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.ini.in?ref=a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "patch": "@@ -5,21 +5,14 @@\n # These environment variables are set by the build process and read by\n # rpc-tests.py\n \n-[DEFAULT]\n-# Provides default values for whether different components are enabled\n-ENABLE_WALLET=False\n-ENABLE_UTILS=False\n-ENABLE_BITCOIND=False\n-ENABLE_ZMQ=False\n-\n [environment]\n SRCDIR=@abs_top_srcdir@\n BUILDDIR=@abs_top_builddir@\n EXEEXT=@EXEEXT@\n \n [components]\n # Which components are enabled. These are commented out by `configure` if they were disabled when running config.\n-@ENABLE_WALLET_TRUE@ENABLE_WALLET=True\n-@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=True\n-@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=True\n-@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=True\n+@ENABLE_WALLET_TRUE@ENABLE_WALLET=true\n+@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=true\n+@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n+@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true"
      }
    ]
  },
  {
    "sha": "914fad155d9fc76b42b3a0414dd14b5ebc36062f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTRmYWQxNTVkOWZjNzZiNDJiM2EwNDE0ZGQxNGI1ZWJjMzYwNjJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T19:41:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T19:42:22Z"
      },
      "message": "Make KEY_SIZE a compile-time constant",
      "tree": {
        "sha": "a88e47c6feb771fd23c77ef3cbf2e028e1bdc1d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a88e47c6feb771fd23c77ef3cbf2e028e1bdc1d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/914fad155d9fc76b42b3a0414dd14b5ebc36062f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914fad155d9fc76b42b3a0414dd14b5ebc36062f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/914fad155d9fc76b42b3a0414dd14b5ebc36062f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914fad155d9fc76b42b3a0414dd14b5ebc36062f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f87e8f53920adfa80a3f4af9435370dc272c3783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f87e8f53920adfa80a3f4af9435370dc272c3783"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8ac6925acdac6ee044e5e7d2f8797980760b647e",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/914fad155d9fc76b42b3a0414dd14b5ebc36062f/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/914fad155d9fc76b42b3a0414dd14b5ebc36062f/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=914fad155d9fc76b42b3a0414dd14b5ebc36062f",
        "patch": "@@ -112,7 +112,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n             std::string strSalt = vFields[1];\n             std::string strHash = vFields[2];\n \n-            unsigned int KEY_SIZE = 32;\n+            static const unsigned int KEY_SIZE = 32;\n             unsigned char out[KEY_SIZE];\n \n             CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);"
      }
    ]
  },
  {
    "sha": "c801c82e253dc4956069b6110f65b43f538dd5a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODAxYzgyZTI1M2RjNDk1NjA2OWI2MTEwZjY1YjQzZjUzOGRkNWEx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T19:54:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T19:54:32Z"
      },
      "message": "Move BIP70_MAX_PAYMENTREQUEST_SIZE to header",
      "tree": {
        "sha": "b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c801c82e253dc4956069b6110f65b43f538dd5a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c801c82e253dc4956069b6110f65b43f538dd5a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c801c82e253dc4956069b6110f65b43f538dd5a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c801c82e253dc4956069b6110f65b43f538dd5a1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "914fad155d9fc76b42b3a0414dd14b5ebc36062f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/914fad155d9fc76b42b3a0414dd14b5ebc36062f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/914fad155d9fc76b42b3a0414dd14b5ebc36062f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dd75f12076d9e78a7df3aa7c09196d9128d07e51",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c801c82e253dc4956069b6110f65b43f538dd5a1/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c801c82e253dc4956069b6110f65b43f538dd5a1/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=c801c82e253dc4956069b6110f65b43f538dd5a1",
        "patch": "@@ -55,8 +55,6 @@ const char* BIP70_MESSAGE_PAYMENTREQUEST = \"PaymentRequest\";\n const char* BIP71_MIMETYPE_PAYMENT = \"application/bitcoin-payment\";\n const char* BIP71_MIMETYPE_PAYMENTACK = \"application/bitcoin-paymentack\";\n const char* BIP71_MIMETYPE_PAYMENTREQUEST = \"application/bitcoin-paymentrequest\";\n-// BIP70 max payment request size in bytes (DoS protection)\n-const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n \n struct X509StoreDeleter {\n       void operator()(X509_STORE* b) {"
      },
      {
        "sha": "7c6d4507fe6ce0c7055c1c6e02869638fe703c59",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c801c82e253dc4956069b6110f65b43f538dd5a1/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c801c82e253dc4956069b6110f65b43f538dd5a1/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=c801c82e253dc4956069b6110f65b43f538dd5a1",
        "patch": "@@ -53,7 +53,7 @@ class QUrl;\n QT_END_NAMESPACE\n \n // BIP70 max payment request size in bytes (DoS protection)\n-extern const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE;\n+static const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n \n class PaymentServer : public QObject\n {"
      }
    ]
  },
  {
    "sha": "3301587dc5c7937141282f3799592d1e398495fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzAxNTg3ZGM1Yzc5MzcxNDEyODJmMzc5OTU5MmQxZTM5ODQ5NWZi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-17T20:04:30Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-17T20:06:09Z"
      },
      "message": "boost: remove iostreams includes\n\nThey're unused and produce nasty deprecation warnings",
      "tree": {
        "sha": "0da178bc816e1bd9cf72726e8069b432651977e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0da178bc816e1bd9cf72726e8069b432651977e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3301587dc5c7937141282f3799592d1e398495fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3301587dc5c7937141282f3799592d1e398495fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3301587dc5c7937141282f3799592d1e398495fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3301587dc5c7937141282f3799592d1e398495fb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f87e8f53920adfa80a3f4af9435370dc272c3783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f87e8f53920adfa80a3f4af9435370dc272c3783"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0b763acd451d613f15cb1924799ee2219ed06988",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3301587dc5c7937141282f3799592d1e398495fb/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3301587dc5c7937141282f3799592d1e398495fb/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=3301587dc5c7937141282f3799592d1e398495fb",
        "patch": "@@ -18,8 +18,6 @@\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n-#include <boost/iostreams/concepts.hpp>\n-#include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>"
      }
    ]
  },
  {
    "sha": "df42bcdbfebefc908dab7780e931d9ae9ead9d89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjQyYmNkYmZlYmVmYzkwOGRhYjc3ODBlOTMxZDlhZTllYWQ5ZDg5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T20:47:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T20:48:05Z"
      },
      "message": "Merge #9785: Avoid variable length arrays\n\nc801c82 Move BIP70_MAX_PAYMENTREQUEST_SIZE to header (Pieter Wuille)\n914fad1 Make KEY_SIZE a compile-time constant (Pieter Wuille)",
      "tree": {
        "sha": "b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df42bcdbfebefc908dab7780e931d9ae9ead9d89",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYp2GFAAoJEHSBCwEjRsmm+iYH/iBkHT57NJMWR0Y5I7+GtlNb\n3msg/MJ5PeMSakTh1oOixkOrIYsEE/ivkfu7GNB5xBdyIWASy0TKEPLiNtAPR8bw\nk4a31o5BlnA0lRCJRFSWK8g5kpFKTLK4u7s8Mr9S3u9GqVelxj4SaAjFCA6oMDrM\nCIv10/81yHko0eBE8R/78sKFQ88GEKs+vIAAQykNF/feYnSYTe7rAaBIaNMd+Tv5\nYLm9hbzRB/MZHrZr7Qrszlep98z+3NIhZeFjZDzyYlbZ15OeEMcwPdf2LetzcGfH\nsnT0+hHVpveOD8EnnUrM/H6oOkHhcQn9g0cxBc7Ej/pqTgLxdK30rmT+v77+KLo=\n=3Fun\n-----END PGP SIGNATURE-----",
        "payload": "tree b7c0483ecb1300bd8a4b571376f5b7ba3b5a5368\nparent f87e8f53920adfa80a3f4af9435370dc272c3783\nparent c801c82e253dc4956069b6110f65b43f538dd5a1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487364450 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487364485 +0100\n\nMerge #9785: Avoid variable length arrays\n\nc801c82 Move BIP70_MAX_PAYMENTREQUEST_SIZE to header (Pieter Wuille)\n914fad1 Make KEY_SIZE a compile-time constant (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df42bcdbfebefc908dab7780e931d9ae9ead9d89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df42bcdbfebefc908dab7780e931d9ae9ead9d89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df42bcdbfebefc908dab7780e931d9ae9ead9d89/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f87e8f53920adfa80a3f4af9435370dc272c3783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f87e8f53920adfa80a3f4af9435370dc272c3783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f87e8f53920adfa80a3f4af9435370dc272c3783"
      },
      {
        "sha": "c801c82e253dc4956069b6110f65b43f538dd5a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c801c82e253dc4956069b6110f65b43f538dd5a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c801c82e253dc4956069b6110f65b43f538dd5a1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8ac6925acdac6ee044e5e7d2f8797980760b647e",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "patch": "@@ -112,7 +112,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n             std::string strSalt = vFields[1];\n             std::string strHash = vFields[2];\n \n-            unsigned int KEY_SIZE = 32;\n+            static const unsigned int KEY_SIZE = 32;\n             unsigned char out[KEY_SIZE];\n \n             CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);"
      },
      {
        "sha": "dd75f12076d9e78a7df3aa7c09196d9128d07e51",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "patch": "@@ -55,8 +55,6 @@ const char* BIP70_MESSAGE_PAYMENTREQUEST = \"PaymentRequest\";\n const char* BIP71_MIMETYPE_PAYMENT = \"application/bitcoin-payment\";\n const char* BIP71_MIMETYPE_PAYMENTACK = \"application/bitcoin-paymentack\";\n const char* BIP71_MIMETYPE_PAYMENTREQUEST = \"application/bitcoin-paymentrequest\";\n-// BIP70 max payment request size in bytes (DoS protection)\n-const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n \n struct X509StoreDeleter {\n       void operator()(X509_STORE* b) {"
      },
      {
        "sha": "7c6d4507fe6ce0c7055c1c6e02869638fe703c59",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df42bcdbfebefc908dab7780e931d9ae9ead9d89/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "patch": "@@ -53,7 +53,7 @@ class QUrl;\n QT_END_NAMESPACE\n \n // BIP70 max payment request size in bytes (DoS protection)\n-extern const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE;\n+static const qint64 BIP70_MAX_PAYMENTREQUEST_SIZE = 50000;\n \n class PaymentServer : public QObject\n {"
      }
    ]
  },
  {
    "sha": "12f46fa7d87d9639781fd8aad62e11f6fed0a808",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmY0NmZhN2Q4N2Q5NjM5NzgxZmQ4YWFkNjJlMTFmNmZlZDBhODA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T20:48:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T20:48:37Z"
      },
      "message": "Merge #9786: boost: remove iostreams includes\n\n3301587 boost: remove iostreams includes (Cory Fields)",
      "tree": {
        "sha": "5976c03295739c73c834a118db0ccc61a6ef4a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5976c03295739c73c834a118db0ccc61a6ef4a23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYp2GlAAoJEHSBCwEjRsmmxdcIAMllhWprpm7ClMwQwdkwrP+U\nVBWlSeyEE0mhRkuan5G5qUK0gp2l+I5cSTf2trCamgpLOOrC9eGC7dUkbd+nmIjf\nPc3h8xA7cklkmOS36+RzWD6fH4MmeocHD4D4fyToFsGQmpF5qkyGJttw5cD2lH9A\nyCWhgzNhe3PvCs7G0kCRheZIV5eM/xoW5PtUhpmTgihiFvZN0ABrOEIP3sgRSk44\n3LY68wrVqDg7MEe2aUdDNb47lv0NUgYPxjdkzquFOoZQ5i6lpXmTrPXViu4IY4H5\n5Yv6NYufHXM22UApjhyB61ppz35LLHMIrKQ3SEC2dpiHwuqk/Sr60rLqlOvD7x4=\n=sc9P\n-----END PGP SIGNATURE-----",
        "payload": "tree 5976c03295739c73c834a118db0ccc61a6ef4a23\nparent df42bcdbfebefc908dab7780e931d9ae9ead9d89\nparent 3301587dc5c7937141282f3799592d1e398495fb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487364509 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487364517 +0100\n\nMerge #9786: boost: remove iostreams includes\n\n3301587 boost: remove iostreams includes (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df42bcdbfebefc908dab7780e931d9ae9ead9d89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df42bcdbfebefc908dab7780e931d9ae9ead9d89"
      },
      {
        "sha": "3301587dc5c7937141282f3799592d1e398495fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3301587dc5c7937141282f3799592d1e398495fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3301587dc5c7937141282f3799592d1e398495fb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0b763acd451d613f15cb1924799ee2219ed06988",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12f46fa7d87d9639781fd8aad62e11f6fed0a808/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12f46fa7d87d9639781fd8aad62e11f6fed0a808/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "patch": "@@ -18,8 +18,6 @@\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n-#include <boost/iostreams/concepts.hpp>\n-#include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n #include <boost/signals2/signal.hpp>\n #include <boost/thread.hpp>"
      }
    ]
  },
  {
    "sha": "8e5cca027fd911b3e7f64495c75986ccf997f6a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTVjY2EwMjdmZDkxMWIzZTdmNjQ0OTVjNzU5ODZjY2Y5OTdmNmEw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-17T21:11:40Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-17T21:11:43Z"
      },
      "message": "gitian: bump descriptors for master\n\nThis was skipped for the 0.14 cycle.",
      "tree": {
        "sha": "7e93b8aa665709219ce6507c17af947fa263faf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e93b8aa665709219ce6507c17af947fa263faf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e5cca027fd911b3e7f64495c75986ccf997f6a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e5cca027fd911b3e7f64495c75986ccf997f6a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e5cca027fd911b3e7f64495c75986ccf997f6a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e5cca027fd911b3e7f64495c75986ccf997f6a0/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12f46fa7d87d9639781fd8aad62e11f6fed0a808"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "00af4bdc6fa81e2cbfc1550feb5f2a99cb0f8f44",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.13\"\n+name: \"bitcoin-linux-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "05cc65414fc537678b9b9c511781c326746427b9",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.13\"\n+name: \"bitcoin-osx-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "6fead7c208de0d0abbd8835a2c0bfbe8c501213f",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e5cca027fd911b3e7f64495c75986ccf997f6a0/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.13\"\n+name: \"bitcoin-win-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      }
    ]
  },
  {
    "sha": "5c8fd508112016c3821b71112270afe83e6949ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzhmZDUwODExMjAxNmMzODIxYjcxMTEyMjcwYWZlODNlNjk0OWFj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T23:28:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-17T23:28:28Z"
      },
      "message": "Avoid VLA in hash.h",
      "tree": {
        "sha": "54ac54a1078e32ff13ac90949822209a6fbf85a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54ac54a1078e32ff13ac90949822209a6fbf85a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c8fd508112016c3821b71112270afe83e6949ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8fd508112016c3821b71112270afe83e6949ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c8fd508112016c3821b71112270afe83e6949ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8fd508112016c3821b71112270afe83e6949ac/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12f46fa7d87d9639781fd8aad62e11f6fed0a808"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "eacb8f04fef378ab80a1b1df15689525e5d45895",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c8fd508112016c3821b71112270afe83e6949ac/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c8fd508112016c3821b71112270afe83e6949ac/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=5c8fd508112016c3821b71112270afe83e6949ac",
        "patch": "@@ -25,9 +25,9 @@ class CHash256 {\n     static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;\n \n     void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-        unsigned char buf[sha.OUTPUT_SIZE];\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        sha.Reset().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n+        sha.Reset().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash256& Write(const unsigned char *data, size_t len) {\n@@ -49,9 +49,9 @@ class CHash160 {\n     static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;\n \n     void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-        unsigned char buf[sha.OUTPUT_SIZE];\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        CRIPEMD160().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n+        CRIPEMD160().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash160& Write(const unsigned char *data, size_t len) {"
      }
    ]
  },
  {
    "sha": "50a226563cd8d7c0a5e8448e87fede0eb72a8354",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGEyMjY1NjNjZDhkN2MwYTVlODQ0OGU4N2ZlZGUwZWI3MmE4MzU0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T01:18:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T01:19:04Z"
      },
      "message": "Merge #9788: gitian: bump descriptors for master\n\n8e5cca0 gitian: bump descriptors for master (Cory Fields)",
      "tree": {
        "sha": "7e93b8aa665709219ce6507c17af947fa263faf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e93b8aa665709219ce6507c17af947fa263faf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYp6EIAAoJEC1/I3LlD+E3PoEH/iI0FKOwqZM5plQw0J5KseWP\njL5baz9JMEzYz0AjQsOD2pavmhbP/olbQCGsZQ0HIqp+M9GbIB3C/2Lxh3Rve+QW\nalzg2T+MwYJB0StrGFBKraI5eobnZn1ZAg64iRErg2NsjNFzPiLfYSufVYqMB0s1\npWOplINTu3MCcUFKNN5oUNmvs1GR0EK9YVzLP4+nIAXuYsYIHSHjJbivjq1O0iRC\ntVlPiFjsUtGcY97uMSG/3ToywK37lyAeYFkbHrVFOdCnnTT6AoQLsKfL928OjnYi\n1byRo+JCcc25JGnrQZP0WDenj8zO3elwvuoQaZs6/poluHvMrHp4TI/N72xCxbQ=\n=6BtY\n-----END PGP SIGNATURE-----",
        "payload": "tree 7e93b8aa665709219ce6507c17af947fa263faf6\nparent 12f46fa7d87d9639781fd8aad62e11f6fed0a808\nparent 8e5cca027fd911b3e7f64495c75986ccf997f6a0\nauthor MarcoFalke <falke.marco@gmail.com> 1487380688 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487380744 +0100\n\nMerge #9788: gitian: bump descriptors for master\n\n8e5cca0 gitian: bump descriptors for master (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12f46fa7d87d9639781fd8aad62e11f6fed0a808",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12f46fa7d87d9639781fd8aad62e11f6fed0a808"
      },
      {
        "sha": "8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e5cca027fd911b3e7f64495c75986ccf997f6a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e5cca027fd911b3e7f64495c75986ccf997f6a0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "00af4bdc6fa81e2cbfc1550feb5f2a99cb0f8f44",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.13\"\n+name: \"bitcoin-linux-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "05cc65414fc537678b9b9c511781c326746427b9",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.13\"\n+name: \"bitcoin-osx-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "6fead7c208de0d0abbd8835a2c0bfbe8c501213f",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50a226563cd8d7c0a5e8448e87fede0eb72a8354/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.13\"\n+name: \"bitcoin-win-0.15\"\n enable_cache: true\n suites:\n - \"trusty\""
      }
    ]
  },
  {
    "sha": "1bfe6b426e46c2391b3e87b4643a004e7d557840",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmZlNmI0MjZlNDZjMjM5MWIzZTg3YjQ2NDNhMDA0ZTdkNTU3ODQw",
    "commit": {
      "author": {
        "name": "Mitchell Cash",
        "email": "mitchell@mitchellcash.com",
        "date": "2017-02-18T07:37:27Z"
      },
      "committer": {
        "name": "Mitchell Cash",
        "email": "mitchell@mitchellcash.com",
        "date": "2017-02-18T07:37:27Z"
      },
      "message": "Use package name variable inside $(package)_file_name variable",
      "tree": {
        "sha": "9caf4524dbaac345ecfc5526ada323de9b01559f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9caf4524dbaac345ecfc5526ada323de9b01559f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bfe6b426e46c2391b3e87b4643a004e7d557840",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJYp/p6AAoJEOkFT+PGAI21jdsH/1lVvfEXd2/lDn1iPKrSIyvb\nR1pd+6+DYIgFdqdEcRrZO/0tM5xt3FXyV/d4b7Unn2kuHMCObMIAu+9tMumXayBB\nxwMEILh+ZGlVlqhl+/+TitJ1goKEDv+bVU8cVXv9CH7cxVVQFj4PN5M8mTVYFMZn\nlvnqhbOOzEE3PGOY9LO6AFJzjhYlVWxt/pf9WCXGSAGYSUglnBifmXOy9f/1Qptn\n1mjnOYXtMiAZZlYz8iOsvNmHAX54yJt/vap+b0L0GdNumUWrMCp0AC19OqbeNOuI\nJtOfKvB86MU721y3PXVSqs4WFv0tDePOD9aIw4KO1mMzIXC0Jo4zRvhrd0qSo6Q=\n=ehFC\n-----END PGP SIGNATURE-----",
        "payload": "tree 9caf4524dbaac345ecfc5526ada323de9b01559f\nparent 50a226563cd8d7c0a5e8448e87fede0eb72a8354\nauthor Mitchell Cash <mitchell@mitchellcash.com> 1487403447 +1000\ncommitter Mitchell Cash <mitchell@mitchellcash.com> 1487403447 +1000\n\nUse package name variable inside $(package)_file_name variable\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bfe6b426e46c2391b3e87b4643a004e7d557840",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bfe6b426e46c2391b3e87b4643a004e7d557840",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bfe6b426e46c2391b3e87b4643a004e7d557840/comments",
    "author": {
      "login": "MitchellCash",
      "id": 8009243,
      "node_id": "MDQ6VXNlcjgwMDkyNDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8009243?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MitchellCash",
      "html_url": "https://github.com/MitchellCash",
      "followers_url": "https://api.github.com/users/MitchellCash/followers",
      "following_url": "https://api.github.com/users/MitchellCash/following{/other_user}",
      "gists_url": "https://api.github.com/users/MitchellCash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MitchellCash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MitchellCash/subscriptions",
      "organizations_url": "https://api.github.com/users/MitchellCash/orgs",
      "repos_url": "https://api.github.com/users/MitchellCash/repos",
      "events_url": "https://api.github.com/users/MitchellCash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MitchellCash/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MitchellCash",
      "id": 8009243,
      "node_id": "MDQ6VXNlcjgwMDkyNDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8009243?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MitchellCash",
      "html_url": "https://github.com/MitchellCash",
      "followers_url": "https://api.github.com/users/MitchellCash/followers",
      "following_url": "https://api.github.com/users/MitchellCash/following{/other_user}",
      "gists_url": "https://api.github.com/users/MitchellCash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MitchellCash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MitchellCash/subscriptions",
      "organizations_url": "https://api.github.com/users/MitchellCash/orgs",
      "repos_url": "https://api.github.com/users/MitchellCash/repos",
      "events_url": "https://api.github.com/users/MitchellCash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MitchellCash/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50a226563cd8d7c0a5e8448e87fede0eb72a8354"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "44fdf1c2952b6188b25ddfe56d2b4f1c71d1c07f",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bfe6b426e46c2391b3e87b4643a004e7d557840/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bfe6b426e46c2391b3e87b4643a004e7d557840/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=1bfe6b426e46c2391b3e87b4643a004e7d557840",
        "patch": "@@ -1,7 +1,7 @@\n package=qrencode\n $(package)_version=3.4.4\n $(package)_download_path=https://fukuchi.org/works/qrencode/\n-$(package)_file_name=qrencode-$(qrencode_version).tar.bz2\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=efe5188b1ddbcbf98763b819b146be6a90481aac30cfc8d858ab78a19cde1fa5\n \n define $(package)_set_vars"
      }
    ]
  },
  {
    "sha": "8efd1c820b9a782d8608d54d924658536178295c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWZkMWM4MjBiOWE3ODJkODYwOGQ1NGQ5MjQ2NTg1MzYxNzgyOTVj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T10:31:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T10:31:32Z"
      },
      "message": "Merge #9744: Remove unused module from rpc-tests\n\na432aa0 Remove unused module from rpc-tests (Takashi Mitsuta)",
      "tree": {
        "sha": "25bfbd4fb3f9f42e1a7397dbc2ce53d9442bc26d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25bfbd4fb3f9f42e1a7397dbc2ce53d9442bc26d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8efd1c820b9a782d8608d54d924658536178295c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYqCKEAAoJEC1/I3LlD+E3Hk0IALGCS67qJrRBeu6VQoVTuCsr\nxGte6ZGm9nzJZOQ0C0n1ZXJe/yflFCMc3vIDp0lev1SShcIdmrPQSW62eeshRIWa\nlxCdwfmCjiXQMWNEMiOXVKesqlGQxcu5PymvmXq2sKkXpfQHv+YxkIKZwu9I7lK1\nPzrB+/mMFGJtu0at7DfXGAxY0fyvNCuXHomR0NyrD77zMW12SM7Bl+5ylz0atnUp\nCo6z93s25nNZ3mPKCXDqou8U+6M4k2jm26Wk5Hn1smIxHtubFTKDSYTp5v1Gta9I\nbJcxgj5V9kcKIUQDpUL7hlclhHsd904lmTDiDyeurHnGvJjjPvKqWiQLfNNufrM=\n=EQ9b\n-----END PGP SIGNATURE-----",
        "payload": "tree 25bfbd4fb3f9f42e1a7397dbc2ce53d9442bc26d\nparent 50a226563cd8d7c0a5e8448e87fede0eb72a8354\nparent a432aa0aa83310f0eb053329fb4b2670ce92b1c6\nauthor MarcoFalke <falke.marco@gmail.com> 1487413878 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487413892 +0100\n\nMerge #9744: Remove unused module from rpc-tests\n\na432aa0 Remove unused module from rpc-tests (Takashi Mitsuta)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efd1c820b9a782d8608d54d924658536178295c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8efd1c820b9a782d8608d54d924658536178295c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efd1c820b9a782d8608d54d924658536178295c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50a226563cd8d7c0a5e8448e87fede0eb72a8354"
      },
      {
        "sha": "a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a432aa0aa83310f0eb053329fb4b2670ce92b1c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a432aa0aa83310f0eb053329fb4b2670ce92b1c6"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 1,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e03bc1c37b6dcab4c9fee75032b4ef3385c5370d",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -5,7 +5,7 @@\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.mininode import ToHex, NetworkThread\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *"
      },
      {
        "sha": "1b099f933967524d9826229e270e78fa13b9188c",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -9,8 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.mininode import *\n from test_framework.blocktools import *\n \n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)"
      },
      {
        "sha": "e02cb4c300b039ac25a25365edf66ceb750229b3",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -8,10 +8,8 @@\n from test_framework import blocktools\n from test_framework.mininode import CTransaction\n from test_framework.util import *\n-from test_framework.util import *\n \n import io\n-import time\n \n # Sequence number that is BIP 125 opt-in and BIP 68-compliant\n BIP125_SEQUENCE_NUMBER = 0xfffffffd"
      },
      {
        "sha": "47dfe4f5fd18ee12a248c26615f53d97fc68993d",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n-from test_framework.siphash import siphash256\n from test_framework.script import CScript, OP_TRUE\n \n '''"
      },
      {
        "sha": "f9a40955c06c2b4411d34d23d001f58f703e5b76",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -3,17 +3,11 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-from decimal import Decimal\n-\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.authproxy import JSONRPCException\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,\n-    assert_is_hex_string,\n-    assert_is_hash_string,\n     start_nodes,\n-    connect_nodes_bi,\n )\n \n "
      },
      {
        "sha": "45a9db05717372008c2c07fa62be66d9a39f0491",
        "filename": "qa/rpc-tests/wallet-accounts.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8efd1c820b9a782d8608d54d924658536178295c/qa/rpc-tests/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-accounts.py?ref=8efd1c820b9a782d8608d54d924658536178295c",
        "patch": "@@ -6,9 +6,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     start_nodes,\n-    start_node,\n     assert_equal,\n-    connect_nodes_bi,\n )\n \n "
      }
    ]
  },
  {
    "sha": "eb4910193accabdb2edf6a361d52050c851de96e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjQ5MTAxOTNhY2NhYmRiMmVkZjZhMzYxZDUyMDUwYzg1MWRlOTZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T17:21:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T10:55:33Z"
      },
      "message": "doc: Update manpages for master\n\n(cherry picked from commit 268c390d02d99a4a93a0a01221e273d2b9695ff7)",
      "tree": {
        "sha": "55158797a0c359c150c2a3270d777e79863cdfb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55158797a0c359c150c2a3270d777e79863cdfb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb4910193accabdb2edf6a361d52050c851de96e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb4910193accabdb2edf6a361d52050c851de96e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb4910193accabdb2edf6a361d52050c851de96e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb4910193accabdb2edf6a361d52050c851de96e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50a226563cd8d7c0a5e8448e87fede0eb72a8354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50a226563cd8d7c0a5e8448e87fede0eb72a8354"
      }
    ],
    "stats": {
      "total": 279,
      "additions": 179,
      "deletions": 100
    },
    "files": [
      {
        "sha": "0493241b1e07e90db2ac06eacaaa12ff3a6cd1e9",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=eb4910193accabdb2edf6a361d52050c851de96e",
        "patch": "@@ -1,19 +1,17 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-CLI \"1\" \"September 2016\" \"bitcoin-cli v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-CLI \"1\" \"February 2017\" \"bitcoin-cli v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.13.0.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.13.0.0\n+Bitcoin Core RPC client version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-cli [options] <command> [params]\n Send command to Bitcoin Core\n-.TP\n-bitcoin\\-cli [options] help\n-List commands\n-.TP\n-bitcoin\\-cli [options] help <command>\n-Get help for a command\n+.IP\n+bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n+bitcoin\\-cli [options] help                List commands\n+bitcoin\\-cli [options] help <command>      Get help for a command\n .SH OPTIONS\n .HP\n \\-?\n@@ -40,6 +38,10 @@ Enter regression test mode, which uses a special chain in which blocks\n can be solved instantly. This is intended for regression testing\n tools and app development.\n .HP\n+\\fB\\-named\\fR\n+.IP\n+Pass named instead of positional arguments (default: false)\n+.HP\n \\fB\\-rpcconnect=\\fR<ip>\n .IP\n Send commands to node running on <ip> (default: 127.0.0.1)\n@@ -69,16 +71,16 @@ Timeout during HTTP requests (default: 900)\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n (recommended for sensitive information such as passphrases)\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "ce252612e57a2ae402921f7ed50cf7199679aa1e",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 69,
        "deletions": 38,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=eb4910193accabdb2edf6a361d52050c851de96e",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-QT \"1\" \"September 2016\" \"bitcoin-qt v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-QT \"1\" \"February 2017\" \"bitcoin-qt v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.13.0.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core version v0.13.0.0 (64\\-bit)\n+Bitcoin Core version v0.14.99.0 (64\\-bit)\n Usage:\n .IP\n bitcoin\\-qt [command\\-line options]\n@@ -27,13 +27,14 @@ long fork (%s in cmd is replaced by message)\n Execute command when the best block changes (%s in cmd is replaced by\n block hash)\n .HP\n-\\fB\\-checkblocks=\\fR<n>\n+\\fB\\-assumevalid=\\fR<hex>\n .IP\n-How many blocks to check at startup (default: 288, 0 = all)\n-.HP\n-\\fB\\-checklevel=\\fR<n>\n-.IP\n-How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+If this block is in the chain assume that it and its ancestors are valid\n+and potentially skip their script verification (0 to verify all,\n+default:\n+00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+testnet:\n+00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -62,11 +63,16 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n \\fB\\-mempoolexpiry=\\fR<n>\n .IP\n Do not keep transactions in the mempool longer than <n> hours (default:\n-72)\n+336)\n+.HP\n+\\fB\\-blockreconstructionextratxn=\\fR<n>\n+.IP\n+Extra transactions to keep in memory for compact block reconstructions\n+(default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -75,13 +81,15 @@ Specify pid file (default: bitcoind.pid)\n .HP\n \\fB\\-prune=\\fR<n>\n .IP\n-Reduce storage requirements by enabling pruning (deleting) of old blocks.\n-This allows the pruneblockchain RPC to be called to delete specific blocks,\n-and enables automatic pruning of old blocks if a target size in MiB is\n-provided. This mode is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR.\n-Warning: Reverting this setting requires re\\-downloading the entire blockchain.\n-(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >550 =\n-automatically prune block files to stay under the specified target size in MiB)\n+Reduce storage requirements by enabling pruning (deleting) of old\n+blocks. This allows the pruneblockchain RPC to be called to\n+delete specific blocks, and enables automatic pruning of old\n+blocks if a target size in MiB is provided. This mode is\n+incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n+setting requires re\\-downloading the entire blockchain. (default:\n+0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n+>550 = automatically prune block files to stay under the\n+specified target size in MiB)\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n@@ -123,7 +131,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s)\n+Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n+disable automatic connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -137,7 +146,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR)\n+unless \\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -149,7 +158,8 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n+\\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -204,6 +214,11 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -221,17 +236,22 @@ Tor control port to use if onion listening enabled (default:\n .IP\n Tor control port password (default: empty)\n .HP\n+\\fB\\-upnp\\fR\n+.IP\n+Use UPnP to map the listening port (default: 0)\n+.HP\n \\fB\\-whitebind=\\fR<addr>\n .IP\n Bind to given address and whitelist peers connecting to it. Use\n [host]:port notation for IPv6\n .HP\n-\\fB\\-whitelist=\\fR<netmask>\n+\\fB\\-whitelist=\\fR<IP address or network>\n .IP\n-Whitelist peers connecting from the given netmask or IP address. Can be\n-specified multiple times. Whitelisted peers cannot be DoS banned\n-and their transactions are always relayed, even if they are\n-already in the mempool, useful e.g. for a gateway\n+Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n+CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n+times. Whitelisted peers cannot be DoS banned and their\n+transactions are always relayed, even if they are already in the\n+mempool, useful e.g. for a gateway\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -240,7 +260,7 @@ not relaying transactions (default: 1)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n .IP\n-Force relay of transactions from whitelisted peers even they violate\n+Force relay of transactions from whitelisted peers even if they violate\n local relay policy (default: 1)\n .HP\n \\fB\\-maxuploadtarget=\\fR<n>\n@@ -287,13 +307,17 @@ Spend unconfirmed change when sending transactions (default: 1)\n \\fB\\-txconfirmtarget=\\fR<n>\n .IP\n If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 2)\n+confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-usehd\\fR\n .IP\n Use hierarchical deterministic key generation (HD) after BIP32. Only has\n effect during wallet creation/first start (default: 1)\n .HP\n+\\fB\\-walletrbf\\fR\n+.IP\n+Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+.HP\n \\fB\\-upgradewallet\\fR\n .IP\n Upgrade wallet to latest format on startup\n@@ -347,9 +371,9 @@ Append comment to the user agent string\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information.<category> can be: addrman,\n-alert, bench, coindb, db, http, libevent, lock, mempool,\n-mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n-tor, zmq, qt.\n+alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n+mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n+selectcoins, tor, zmq, qt.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -422,6 +446,11 @@ Set maximum block size in bytes (default: 750000)\n .IP\n Set maximum size of high\\-priority/low\\-fee transactions in bytes\n (default: 0)\n+.HP\n+\\fB\\-blockmintxfee=\\fR<amt>\n+.IP\n+Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+creation. (default: 0.00001)\n .PP\n RPC server options:\n .HP\n@@ -455,8 +484,10 @@ Password for JSON\\-RPC connections\n .IP\n Username and hashed password for JSON\\-RPC connections. The field\n <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcuser. This option\n-can be specified multiple times\n+canonical python script is included in share/rpcuser. The client\n+then connects normally using the\n+rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n+option can be specified multiple times\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n@@ -500,16 +531,16 @@ Show splash screen on startup (default: 1)\n .IP\n Reset all settings changed in the GUI\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "98adf2f5b1e5d7445326a0782ddd081a3e079b99",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 25,
        "deletions": 10,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=eb4910193accabdb2edf6a361d52050c851de96e",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-TX \"1\" \"September 2016\" \"bitcoin-tx v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-TX \"1\" \"February 2017\" \"bitcoin-tx v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.13.0.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.13.0.0\n+Bitcoin Core bitcoin\\-tx utility version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-tx [options] <hex\\-tx> [commands]\n@@ -67,13 +67,28 @@ outaddr=VALUE:ADDRESS\n .IP\n Add address\\-based output to TX\n .IP\n+outpubkey=VALUE:PUBKEY[:FLAGS]\n+.IP\n+Add pay\\-to\\-pubkey output to TX. Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-pubkey\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n+.IP\n outdata=[VALUE:]DATA\n .IP\n Add data\\-based output to TX\n .IP\n-outscript=VALUE:SCRIPT\n+outscript=VALUE:SCRIPT[:FLAGS]\n+.IP\n+Add raw script output to TX. Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n+.IP\n+outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\n .IP\n-Add raw script output to TX\n+Add Pay To n\\-of\\-m Multi\\-sig output to TX. n = REQUIRED, m = PUBKEYS.\n+Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n .IP\n sign=SIGHASH\\-FLAGS\n .IP\n@@ -92,16 +107,16 @@ set=NAME:JSON\\-STRING\n .IP\n Set register NAME to given JSON\\-STRING\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "fb066e0c6f310fbbe34423cff059052bcdf73af6",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 69,
        "deletions": 38,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb4910193accabdb2edf6a361d52050c851de96e/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=eb4910193accabdb2edf6a361d52050c851de96e",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIND \"1\" \"September 2016\" \"bitcoind v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIND \"1\" \"February 2017\" \"bitcoind v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.13.0.0\n+bitcoind \\- manual page for bitcoind v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.13.0.0\n+Bitcoin Core Daemon version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoind [options]\n@@ -28,13 +28,14 @@ long fork (%s in cmd is replaced by message)\n Execute command when the best block changes (%s in cmd is replaced by\n block hash)\n .HP\n-\\fB\\-checkblocks=\\fR<n>\n+\\fB\\-assumevalid=\\fR<hex>\n .IP\n-How many blocks to check at startup (default: 288, 0 = all)\n-.HP\n-\\fB\\-checklevel=\\fR<n>\n-.IP\n-How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+If this block is in the chain assume that it and its ancestors are valid\n+and potentially skip their script verification (0 to verify all,\n+default:\n+00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+testnet:\n+00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -67,11 +68,16 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n \\fB\\-mempoolexpiry=\\fR<n>\n .IP\n Do not keep transactions in the mempool longer than <n> hours (default:\n-72)\n+336)\n+.HP\n+\\fB\\-blockreconstructionextratxn=\\fR<n>\n+.IP\n+Extra transactions to keep in memory for compact block reconstructions\n+(default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -80,13 +86,15 @@ Specify pid file (default: bitcoind.pid)\n .HP\n \\fB\\-prune=\\fR<n>\n .IP\n-Reduce storage requirements by enabling pruning (deleting) of old blocks.\n-This allows the pruneblockchain RPC to be called to delete specific blocks,\n-and enables automatic pruning of old blocks if a target size in MiB is\n-provided. This mode is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR.\n-Warning: Reverting this setting requires re\\-downloading the entire blockchain.\n-(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >550 =\n-automatically prune block files to stay under the specified target size in MiB)\n+Reduce storage requirements by enabling pruning (deleting) of old\n+blocks. This allows the pruneblockchain RPC to be called to\n+delete specific blocks, and enables automatic pruning of old\n+blocks if a target size in MiB is provided. This mode is\n+incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n+setting requires re\\-downloading the entire blockchain. (default:\n+0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n+>550 = automatically prune block files to stay under the\n+specified target size in MiB)\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n@@ -128,7 +136,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s)\n+Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n+disable automatic connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -142,7 +151,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR)\n+unless \\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -154,7 +163,8 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n+\\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -209,6 +219,11 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -226,17 +241,22 @@ Tor control port to use if onion listening enabled (default:\n .IP\n Tor control port password (default: empty)\n .HP\n+\\fB\\-upnp\\fR\n+.IP\n+Use UPnP to map the listening port (default: 0)\n+.HP\n \\fB\\-whitebind=\\fR<addr>\n .IP\n Bind to given address and whitelist peers connecting to it. Use\n [host]:port notation for IPv6\n .HP\n-\\fB\\-whitelist=\\fR<netmask>\n+\\fB\\-whitelist=\\fR<IP address or network>\n .IP\n-Whitelist peers connecting from the given netmask or IP address. Can be\n-specified multiple times. Whitelisted peers cannot be DoS banned\n-and their transactions are always relayed, even if they are\n-already in the mempool, useful e.g. for a gateway\n+Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n+CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n+times. Whitelisted peers cannot be DoS banned and their\n+transactions are always relayed, even if they are already in the\n+mempool, useful e.g. for a gateway\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -245,7 +265,7 @@ not relaying transactions (default: 1)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n .IP\n-Force relay of transactions from whitelisted peers even they violate\n+Force relay of transactions from whitelisted peers even if they violate\n local relay policy (default: 1)\n .HP\n \\fB\\-maxuploadtarget=\\fR<n>\n@@ -292,13 +312,17 @@ Spend unconfirmed change when sending transactions (default: 1)\n \\fB\\-txconfirmtarget=\\fR<n>\n .IP\n If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 2)\n+confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-usehd\\fR\n .IP\n Use hierarchical deterministic key generation (HD) after BIP32. Only has\n effect during wallet creation/first start (default: 1)\n .HP\n+\\fB\\-walletrbf\\fR\n+.IP\n+Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+.HP\n \\fB\\-upgradewallet\\fR\n .IP\n Upgrade wallet to latest format on startup\n@@ -352,9 +376,9 @@ Append comment to the user agent string\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information.<category> can be: addrman,\n-alert, bench, coindb, db, http, libevent, lock, mempool,\n-mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n-tor, zmq.\n+alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n+mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n+selectcoins, tor, zmq.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -427,6 +451,11 @@ Set maximum block size in bytes (default: 750000)\n .IP\n Set maximum size of high\\-priority/low\\-fee transactions in bytes\n (default: 0)\n+.HP\n+\\fB\\-blockmintxfee=\\fR<amt>\n+.IP\n+Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+creation. (default: 0.00001)\n .PP\n RPC server options:\n .HP\n@@ -460,8 +489,10 @@ Password for JSON\\-RPC connections\n .IP\n Username and hashed password for JSON\\-RPC connections. The field\n <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcuser. This option\n-can be specified multiple times\n+canonical python script is included in share/rpcuser. The client\n+then connects normally using the\n+rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n+option can be specified multiple times\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n@@ -479,16 +510,16 @@ option can be specified multiple times\n .IP\n Set the number of threads to service RPC calls (default: 4)\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      }
    ]
  },
  {
    "sha": "aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTVmYTY0MmIwZTdjZTJlYTU1ZTIyOTg4ODZmMjEyZjExYTg4OTRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T11:11:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T11:13:09Z"
      },
      "message": "Merge #9696: [trivial] Fix recently introduced typos in comments\n\n0c9b9b7 [trivial] Fix recently introduced typos in comments (practicalswift)",
      "tree": {
        "sha": "1bf216ac62d62ece4b07e4ad83ac8d97e3ca6673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bf216ac62d62ece4b07e4ad83ac8d97e3ca6673"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYqCxFAAoJEC1/I3LlD+E30Y4H/RyoOsyrGT5TCrH8FMurLrLT\n6I6dTUD2hRCJB0DcMhqs82qyUIEItwNYeCqF9iLk/JzalHd4vxOQSnmc4vObAqf1\n29/juPj/NKimmVzemH0/0bC68++MCyNVancaZtKS+e2lApjpGIjDXOGfLQzwrbgS\nI2QxEBfCSXaNd+jOpR3+zm6QIMIoN7ScqxYhi2ESAD0v3Jli9HmNIMkVUAMeeujF\nqL9Xqbcd85kAvvnHcB4BkDpUN2A0uPe8PE3VxoqHpmfVPrmyT1URrBLRBS++jmna\nHFusIdkwBAtL0mmPNqzDd5vsdGvT07KDrpO4RHs0lctY6GGJeZI4y9HWqXA4pLM=\n=9D9Q\n-----END PGP SIGNATURE-----",
        "payload": "tree 1bf216ac62d62ece4b07e4ad83ac8d97e3ca6673\nparent 8efd1c820b9a782d8608d54d924658536178295c\nparent 0c9b9b7d646333cb3212f1bea98e629c416cbe42\nauthor MarcoFalke <falke.marco@gmail.com> 1487416305 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487416389 +0100\n\nMerge #9696: [trivial] Fix recently introduced typos in comments\n\n0c9b9b7 [trivial] Fix recently introduced typos in comments (practicalswift)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8efd1c820b9a782d8608d54d924658536178295c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8efd1c820b9a782d8608d54d924658536178295c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8efd1c820b9a782d8608d54d924658536178295c"
      },
      {
        "sha": "0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c9b9b7d646333cb3212f1bea98e629c416cbe42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c9b9b7d646333cb3212f1bea98e629c416cbe42"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "cf265180ffae56b7de88410316ec736ed62a65f1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -934,7 +934,7 @@ bool AppInitParameterInteraction()\n     int64_t nMempoolSizeMin = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n     if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n         return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n-    // incremental relay fee sets the minimimum feerate increase necessary for BIP 125 replacement in the mempool\n+    // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (IsArgSet(\"-incrementalrelayfee\"))\n     {"
      },
      {
        "sha": "29bdb376821751612aae0da7b08d56844daf9917",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -24,7 +24,7 @@ class CRPCConvertParam\n };\n \n /**\n- * Specifiy a (method, idx, name) here if the argument is a non-string RPC\n+ * Specify a (method, idx, name) here if the argument is a non-string RPC\n  * argument and needs to be converted from JSON.\n  *\n  * @note Parameter indexes start from 0."
      },
      {
        "sha": "140cb4840b147e8e86696bf303151c4be8c60655",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -445,7 +445,7 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     // this could have an effect on mempool time-based eviction, as well as\n     // IsCurrentForFeeEstimation() and IsInitialBlockDownload().\n     // TODO: figure out the right way to synchronize around mocktime, and\n-    // ensure all callsites of GetTime() are accessing this safely.\n+    // ensure all call sites of GetTime() are accessing this safely.\n     LOCK(cs_main);\n \n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));"
      },
      {
        "sha": "cc3290c63157097887b5c3978e7644afd08555f4",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -11,7 +11,7 @@\n \n /**\n  * GetTimeMicros() and GetTimeMillis() both return the system time, but in\n- * different units. GetTime() returns the sytem time in seconds, but also\n+ * different units. GetTime() returns the system time in seconds, but also\n  * supports mocktime, where the time can be specified by the user, eg for\n  * testing (eg with the setmocktime rpc, or -mocktime argument).\n  *"
      },
      {
        "sha": "00f29eb62e6b053d75a40e87a0c10092274fffac",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -1429,7 +1429,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // Helps prevent CPU exhaustion attacks.\n \n         // Skip script verification when connecting blocks under the\n-        // assumedvalid block. Assuming the assumedvalid block is valid this\n+        // assumevalid block. Assuming the assumevalid block is valid this\n         // is safe because block merkle hashes are still computed and checked,\n         // Of course, if an assumed valid block is invalid due to false scriptSigs\n         // this optimization would allow an invalid chain to be accepted.\n@@ -1771,7 +1771,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n-                // The equivalent time check discourages hashpower from extorting the network via DOS attack\n+                // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid.\n                 //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n                 //  it hard to hide the implication of the demand.  This also avoids having release candidates\n@@ -2486,12 +2486,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            { // TODO: Tempoarily ensure that mempool removals are notified before\n+            { // TODO: Temporarily ensure that mempool removals are notified before\n               // connected transactions.  This shouldn't matter, but the abandoned\n               // state of transactions in our wallet is currently cleared when we\n               // receive another notification and there is a race condition where\n               // notification of a connected conflict might cause an outside process\n-              // to abandon a transaction and then have it inadvertantly cleared by\n+              // to abandon a transaction and then have it inadvertently cleared by\n               // the notification that the conflicted transaction was evicted.\n             MemPoolConflictRemovalTracker mrt(mempool);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2520,7 +2520,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n             } // MemPoolConflictRemovalTracker destroyed and conflict evictions are notified\n \n-            // Transactions in the connnected block are notified\n+            // Transactions in the connected block are notified\n             for (const auto& pair : connectTrace.blocksConnected) {\n                 assert(pair.second);\n                 const CBlock& block = *(pair.second);"
      },
      {
        "sha": "a494eb6990fee9db508b77cc26b26a7504613982",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -50,7 +50,7 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n-    /** A posInBlock value for SyncTransaction calls for tranactions not\n+    /** A posInBlock value for SyncTransaction calls for transactions not\n      * included in connected blocks such as transactions removed from mempool,\n      * accepted to mempool or appearing in disconnected blocks.*/\n     static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;"
      },
      {
        "sha": "01005bf3380c2c9bcb27474e975e5696ce70d8c9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -2725,7 +2725,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n             \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n-            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\\n\"\n             \"   }\\n\"\n             \"\\nResult:\\n\""
      },
      {
        "sha": "c5be732cccb7c781aa0302a9197f46c47a689241",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -1028,7 +1028,7 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * TODO: One exception to this is that the abandoned state is cleared under the\n  * assumption that any further notification of a transaction that was considered\n  * abandoned is an indication that it is not safe to be considered abandoned.\n- * Abandoned state should probably be more carefuly tracked via different\n+ * Abandoned state should probably be more carefully tracked via different\n  * posInBlock signals or by checking mempool presence when necessary.\n  */\n bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)"
      }
    ]
  },
  {
    "sha": "7ff4a538a8682cdf02a4bcd6f15499c841001b73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmY0YTUzOGE4NjgyY2RmMDJhNGJjZDZmMTU0OTljODQxMDAxYjcz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T14:29:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-18T14:29:40Z"
      },
      "message": "Merge #9657: Improve rpc-tests.py\n\na6a3e58 Various review markups for rpc-tests.py improvements (John Newbery)\n3de3ccd Refactor rpc-tests.py (John Newbery)\nafd38e7 Improve rpc-tests.py arguments (John Newbery)\n91bffff Use argparse in rpc_tests.py (John Newbery)\n1581ecb Use configparser in rpc-tests.py (John Newbery)",
      "tree": {
        "sha": "b6fbdfda91ad52df1c32240392ca88c9ed8280ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6fbdfda91ad52df1c32240392ca88c9ed8280ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ff4a538a8682cdf02a4bcd6f15499c841001b73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYqFpUAAoJEC1/I3LlD+E36HYH/iWnYz47quJjvP1/l/Bqiu7P\n1DibY4eduNXsHYc9+59PVkBoh/6tHmZlLzeG+2QgqzOAgR+HDq/sgGxZP0cqy0e7\nIedPly5GL0OG3/v+KWRq55+YKA5JDSNV4owOOdB2e+kuZsEWV8kcl+aJXLyly7tb\nC2NDJu6FUDxqymhYLVENMTk15TGKtMyqzNE7YtXmAL3jmmpGis0eXtYbUu9GSqkc\n6YpsrLUsHZHKqALD86jfNtxYHSgaVXxAYZFPYnqyXqpPbvqkz0FnqytnMTMPH5kK\naTQebP3zhqChCauC8im73vU7X5lk6Qlv1Oz1PRX60ipYergH+pDWAukQGNOeBoM=\n=/AXA\n-----END PGP SIGNATURE-----",
        "payload": "tree b6fbdfda91ad52df1c32240392ca88c9ed8280ef\nparent aa5fa642b0e7ce2ea55e2298886f212f11a8894e\nparent a6a3e58c483700bd5f2bc7d117a621e0c4af60e3\nauthor MarcoFalke <falke.marco@gmail.com> 1487428154 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487428180 +0100\n\nMerge #9657: Improve rpc-tests.py\n\na6a3e58 Various review markups for rpc-tests.py improvements (John Newbery)\n3de3ccd Refactor rpc-tests.py (John Newbery)\nafd38e7 Improve rpc-tests.py arguments (John Newbery)\n91bffff Use argparse in rpc_tests.py (John Newbery)\n1581ecb Use configparser in rpc-tests.py (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff4a538a8682cdf02a4bcd6f15499c841001b73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff4a538a8682cdf02a4bcd6f15499c841001b73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff4a538a8682cdf02a4bcd6f15499c841001b73/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa5fa642b0e7ce2ea55e2298886f212f11a8894e"
      },
      {
        "sha": "a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6a3e58c483700bd5f2bc7d117a621e0c4af60e3"
      }
    ],
    "stats": {
      "total": 286,
      "additions": 152,
      "deletions": 134
    },
    "files": [
      {
        "sha": "1ee2dfb734ede01f76a6f192be0441a372bea756",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff4a538a8682cdf02a4bcd6f15499c841001b73/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff4a538a8682cdf02a4bcd6f15499c841001b73/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "patch": "@@ -227,9 +227,6 @@ EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n-# This file is problematic for out-of-tree builds if it exists.\n-DISTCLEANFILES = qa/pull-tester/tests_config.pyc\n-\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n DISTCHECK_CONFIGURE_FLAGS = --enable-man"
      },
      {
        "sha": "78129fb202923a9d9ddc10ea8cc211587f807449",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff4a538a8682cdf02a4bcd6f15499c841001b73/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff4a538a8682cdf02a4bcd6f15499c841001b73/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "patch": "@@ -1087,7 +1087,7 @@ AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n-AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n+AC_CONFIG_FILES([qa/pull-tester/tests_config.ini],[chmod +x qa/pull-tester/tests_config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_LINKS([qa/pull-tester/rpc-tests.py:qa/pull-tester/rpc-tests.py])\n "
      },
      {
        "sha": "973165c4c8b6aea745da5271a7d352d574d839fb",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 133,
        "deletions": 116,
        "changes": 249,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff4a538a8682cdf02a4bcd6f15499c841001b73/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff4a538a8682cdf02a4bcd6f15499c841001b73/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "patch": "@@ -2,25 +2,21 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n \"\"\"\n-Run Regression Test Suite\n+rpc-tests.py - run regression test suite\n \n This module calls down into individual test cases via subprocess. It will\n-forward all unrecognized arguments onto the individual test scripts, other\n-than:\n+forward all unrecognized arguments onto the individual test scripts.\n \n-    - `-extended`: run the \"extended\" test suite in addition to the basic one.\n-    - `-win`: signal that this is running in a Windows environment, and we\n-      should run the tests.\n-    - `--coverage`: this generates a basic coverage report for the RPC\n-      interface.\n+RPC tests are disabled on Windows by default. Use --force to run them anyway.\n \n For a description of arguments recognized by test scripts, see\n `qa/pull-tester/test_framework/test_framework.py:BitcoinTestFramework.main`.\n \n \"\"\"\n \n+import argparse\n+import configparser\n import os\n import time\n import shutil\n@@ -29,77 +25,9 @@\n import tempfile\n import re\n \n-sys.path.append(\"qa/pull-tester/\")\n-from tests_config import *\n-\n-BOLD = (\"\",\"\")\n-if os.name == 'posix':\n-    # primitive formatting on supported\n-    # terminal via ANSI escape sequences:\n-    BOLD = ('\\033[0m', '\\033[1m')\n-\n-RPC_TESTS_DIR = SRCDIR + '/qa/rpc-tests/'\n-\n-#If imported values are not defined then set to zero (or disabled)\n-if 'ENABLE_WALLET' not in vars():\n-    ENABLE_WALLET=0\n-if 'ENABLE_BITCOIND' not in vars():\n-    ENABLE_BITCOIND=0\n-if 'ENABLE_UTILS' not in vars():\n-    ENABLE_UTILS=0\n-if 'ENABLE_ZMQ' not in vars():\n-    ENABLE_ZMQ=0\n-\n-ENABLE_COVERAGE=0\n-\n-#Create a set to store arguments and create the passon string\n-opts = set()\n-passon_args = []\n-PASSON_REGEX = re.compile(\"^--\")\n-PARALLEL_REGEX = re.compile('^-parallel=')\n-\n-print_help = False\n-run_parallel = 4\n-\n-for arg in sys.argv[1:]:\n-    if arg == \"--help\" or arg == \"-h\" or arg == \"-?\":\n-        print_help = True\n-        break\n-    if arg == '--coverage':\n-        ENABLE_COVERAGE = 1\n-    elif PASSON_REGEX.match(arg):\n-        passon_args.append(arg)\n-    elif PARALLEL_REGEX.match(arg):\n-        run_parallel = int(arg.split(sep='=', maxsplit=1)[1])\n-    else:\n-        opts.add(arg)\n-\n-#Set env vars\n-if \"BITCOIND\" not in os.environ:\n-    os.environ[\"BITCOIND\"] = BUILDDIR + '/src/bitcoind' + EXEEXT\n-\n-if EXEEXT == \".exe\" and \"-win\" not in opts:\n-    # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n-    # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n-    print(\"Win tests currently disabled by default.  Use -win option to enable\")\n-    sys.exit(0)\n-\n-if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n-    print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n-    sys.exit(0)\n-\n-# python3-zmq may not be installed. Handle this gracefully and with some helpful info\n-if ENABLE_ZMQ:\n-    try:\n-        import zmq\n-    except ImportError:\n-        print(\"ERROR: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \"\n-              \"to run zmq tests, see dependency info in /qa/README.md.\")\n-        # ENABLE_ZMQ=0\n-        raise\n-\n-testScripts = [\n-    # longest test should go first, to favor running tests in parallel\n+BASE_SCRIPTS= [\n+    # Scripts that are run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'wallet-hd.py',\n     'walletbackup.py',\n     # vv Tests less than 5m vv\n@@ -156,10 +84,15 @@\n     'listsinceblock.py',\n     'p2p-leaktests.py',\n ]\n-if ENABLE_ZMQ:\n-    testScripts.append('zmq_test.py')\n \n-testScriptsExt = [\n+ZMQ_SCRIPTS = [\n+    # ZMQ test can only be run if bitcoin was built with zmq-enabled.\n+    # call rpc_tests.py with -nozmq to explicitly exclude these tests.\n+    \"zmq_test.py\"]\n+\n+EXTENDED_SCRIPTS = [\n+    # These tests are not run by the travis build process.\n+    # Longest test should go first, to favor running tests in parallel\n     'pruning.py',\n     # vv Tests less than 20m vv\n     'smartfees.py',\n@@ -189,44 +122,126 @@\n     'replace-by-fee.py',\n ]\n \n+ALL_SCRIPTS = BASE_SCRIPTS + ZMQ_SCRIPTS + EXTENDED_SCRIPTS\n+\n+def main():\n+    # Parse arguments and pass through unrecognised args\n+    parser = argparse.ArgumentParser(add_help=False,\n+                                     usage='%(prog)s [rpc-test.py options] [script options] [scripts]',\n+                                     description=__doc__,\n+                                     epilog='''\n+    Help text and arguments for individual test script:''',\n+                                     formatter_class=argparse.RawTextHelpFormatter)\n+    parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+    parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n+    parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n+    parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n+    parser.add_argument('--jobs', '-j', type=int, default=4, help='how many test scripts to run in parallel. Default=4.')\n+    parser.add_argument('--nozmq', action='store_true', help='do not run the zmq tests')\n+    args, unknown_args = parser.parse_known_args()\n+\n+    # Create a set to store arguments and create the passon string\n+    tests = set(arg for arg in unknown_args if arg[:2] != \"--\")\n+    passon_args = [arg for arg in unknown_args if arg[:2] == \"--\"]\n+\n+    # Read config generated by configure.\n+    config = configparser.ConfigParser()\n+    config.read_file(open(os.path.dirname(__file__) + \"/tests_config.ini\"))\n+\n+    enable_wallet = config[\"components\"].getboolean(\"ENABLE_WALLET\")\n+    enable_utils = config[\"components\"].getboolean(\"ENABLE_UTILS\")\n+    enable_bitcoind = config[\"components\"].getboolean(\"ENABLE_BITCOIND\")\n+    enable_zmq = config[\"components\"].getboolean(\"ENABLE_ZMQ\") and not args.nozmq\n+\n+    if config[\"environment\"][\"EXEEXT\"] == \".exe\" and not args.force:\n+        # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n+        # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n+        print(\"Tests currently disabled on Windows by default. Use --force option to enable\")\n+        sys.exit(0)\n \n-def runtests():\n-    test_list = []\n-    if '-extended' in opts:\n-        test_list = testScripts + testScriptsExt\n-    elif len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts):\n-        test_list = testScripts\n-    else:\n-        for t in testScripts + testScriptsExt:\n-            if t in opts or re.sub(\".py$\", \"\", t) in opts:\n-                test_list.append(t)\n+    if not (enable_wallet and enable_utils and enable_bitcoind):\n+        print(\"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\")\n+        print(\"Rerun `configure` with -enable-wallet, -with-utils and -with-daemon and rerun make\")\n+        sys.exit(0)\n+\n+    # python3-zmq may not be installed. Handle this gracefully and with some helpful info\n+    if enable_zmq:\n+        try:\n+            import zmq\n+        except ImportError:\n+            print(\"ERROR: \\\"import zmq\\\" failed. Use -nozmq to run without the ZMQ tests.\"\n+                  \"To run zmq tests, see dependency info in /qa/README.md.\")\n+            raise\n+\n+    # Build list of tests\n+    if tests:\n+        # Individual tests have been specified. Run specified tests that exist\n+        # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n+        test_list = [t for t in ALL_SCRIPTS if\n+                (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n+        if not test_list:\n+            print(\"No valid test scripts specified. Check that your test is in one \"\n+                  \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n+            print(\"Scripts not found:\")\n+            print(tests)\n+            sys.exit(0)\n \n-    if print_help:\n-        # Only print help of the first script and exit\n-        subprocess.check_call((RPC_TESTS_DIR + test_list[0]).split() + ['-h'])\n+    else:\n+        # No individual tests have been specified. Run base tests, and\n+        # optionally ZMQ tests and extended tests.\n+        test_list = BASE_SCRIPTS\n+        if enable_zmq:\n+            test_list += ZMQ_SCRIPTS\n+        if args.extended:\n+            test_list += EXTENDED_SCRIPTS\n+            # TODO: BASE_SCRIPTS and EXTENDED_SCRIPTS are sorted by runtime\n+            # (for parallel running efficiency). This combined list will is no\n+            # longer sorted.\n+\n+    if args.help:\n+        # Print help for rpc-tests.py, then print help of the first script and exit.\n+        parser.print_help()\n+        subprocess.check_call((config[\"environment\"][\"SRCDIR\"] + '/qa/rpc-tests/' + test_list[0]).split() + ['-h'])\n         sys.exit(0)\n \n-    coverage = None\n+    run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n+\n+def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n+    BOLD = (\"\",\"\")\n+    if os.name == 'posix':\n+        # primitive formatting on supported\n+        # terminal via ANSI escape sequences:\n+        BOLD = ('\\033[0m', '\\033[1m')\n+\n+    #Set env vars\n+    if \"BITCOIND\" not in os.environ:\n+        os.environ[\"BITCOIND\"] = build_dir + '/src/bitcoind' + exeext\n+\n+    tests_dir = src_dir + '/qa/rpc-tests/'\n \n-    if ENABLE_COVERAGE:\n+    flags = [\"--srcdir=\" + src_dir] + args\n+    flags.append(\"--cachedir=%s/qa/cache\" % build_dir)\n+\n+    if enable_coverage:\n         coverage = RPCCoverage()\n-        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n-    flags = [\"--srcdir=%s/src\" % BUILDDIR] + passon_args\n-    flags.append(\"--cachedir=%s/qa/cache\" % BUILDDIR)\n-    if coverage:\n         flags.append(coverage.flag)\n+        print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n+    else:\n+        coverage = None\n \n-    if len(test_list) > 1 and run_parallel > 1:\n+    if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n-        subprocess.check_output([RPC_TESTS_DIR + 'create_cache.py'] + flags)\n+        subprocess.check_output([tests_dir + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    max_len_name = len(max(test_list, key=len))\n+    all_passed = True\n     time_sum = 0\n     time0 = time.time()\n-    job_queue = RPCTestHandler(run_parallel, test_list, flags)\n+\n+    job_queue = RPCTestHandler(jobs, tests_dir, test_list, flags)\n+\n+    max_len_name = len(max(test_list, key=len))\n     results = BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"PASSED\", \"DURATION\") + BOLD[0]\n-    all_passed = True\n     for _ in range(len(test_list)):\n         (name, stdout, stderr, passed, duration) = job_queue.get_next()\n         all_passed = all_passed and passed\n@@ -235,8 +250,10 @@ def runtests():\n         print('\\n' + BOLD[1] + name + BOLD[0] + \":\")\n         print('' if passed else stdout + '\\n', end='')\n         print('' if stderr == '' else 'stderr:\\n' + stderr + '\\n', end='')\n-        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n         print(\"Pass: %s%s%s, Duration: %s s\\n\" % (BOLD[1], passed, BOLD[0], duration))\n+\n+        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), str(passed).ljust(6), duration)\n+\n     results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(6), time_sum) + BOLD[0]\n     print(results)\n     print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n@@ -249,15 +266,15 @@ def runtests():\n \n     sys.exit(not all_passed)\n \n-\n class RPCTestHandler:\n     \"\"\"\n     Trigger the testscrips passed in via the list.\n     \"\"\"\n \n-    def __init__(self, num_tests_parallel, test_list=None, flags=None):\n+    def __init__(self, num_tests_parallel, tests_dir, test_list=None, flags=None):\n         assert(num_tests_parallel >= 1)\n         self.num_jobs = num_tests_parallel\n+        self.tests_dir = tests_dir\n         self.test_list = test_list\n         self.flags = flags\n         self.num_running = 0\n@@ -277,7 +294,7 @@ def get_next(self):\n             log_stderr = tempfile.SpooledTemporaryFile(max_size=2**16)\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen((RPC_TESTS_DIR + t).split() + self.flags + port_seed,\n+                              subprocess.Popen((self.tests_dir + t).split() + self.flags + port_seed,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),\n@@ -342,10 +359,10 @@ def _get_uncovered_rpc_commands(self):\n \n         \"\"\"\n         # This is shared from `qa/rpc-tests/test-framework/coverage.py`\n-        REFERENCE_FILENAME = 'rpc_interface.txt'\n-        COVERAGE_FILE_PREFIX = 'coverage.'\n+        reference_filename = 'rpc_interface.txt'\n+        coverage_file_prefix = 'coverage.'\n \n-        coverage_ref_filename = os.path.join(self.dir, REFERENCE_FILENAME)\n+        coverage_ref_filename = os.path.join(self.dir, reference_filename)\n         coverage_filenames = set()\n         all_cmds = set()\n         covered_cmds = set()\n@@ -358,7 +375,7 @@ def _get_uncovered_rpc_commands(self):\n \n         for root, dirs, files in os.walk(self.dir):\n             for filename in files:\n-                if filename.startswith(COVERAGE_FILE_PREFIX):\n+                if filename.startswith(coverage_file_prefix):\n                     coverage_filenames.add(os.path.join(root, filename))\n \n         for filename in coverage_filenames:\n@@ -369,4 +386,4 @@ def _get_uncovered_rpc_commands(self):\n \n \n if __name__ == '__main__':\n-    runtests()\n+    main()"
      },
      {
        "sha": "e3e457d0b1d120c13036c5cbfb84004b7168a361",
        "filename": "qa/pull-tester/tests_config.ini.in",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ff4a538a8682cdf02a4bcd6f15499c841001b73/qa/pull-tester/tests_config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ff4a538a8682cdf02a4bcd6f15499c841001b73/qa/pull-tester/tests_config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.ini.in?ref=7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "patch": "@@ -0,0 +1,18 @@\n+# Copyright (c) 2013-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# These environment variables are set by the build process and read by\n+# rpc-tests.py\n+\n+[environment]\n+SRCDIR=@abs_top_srcdir@\n+BUILDDIR=@abs_top_builddir@\n+EXEEXT=@EXEEXT@\n+\n+[components]\n+# Which components are enabled. These are commented out by `configure` if they were disabled when running config.\n+@ENABLE_WALLET_TRUE@ENABLE_WALLET=true\n+@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=true\n+@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n+@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true"
      },
      {
        "sha": "a0d0a3d98a86becd64c699fa8bb67bb2ae79629c",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa5fa642b0e7ce2ea55e2298886f212f11a8894e/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=aa5fa642b0e7ce2ea55e2298886f212f11a8894e",
        "patch": "@@ -1,14 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2013-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-SRCDIR=\"@abs_top_srcdir@\"\n-BUILDDIR=\"@abs_top_builddir@\"\n-EXEEXT=\"@EXEEXT@\"\n-\n-# These will turn into comments if they were disabled when configuring.\n-@ENABLE_WALLET_TRUE@ENABLE_WALLET=1\n-@BUILD_BITCOIN_UTILS_TRUE@ENABLE_UTILS=1\n-@BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n-@ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1"
      }
    ]
  },
  {
    "sha": "1f9e904f455679d1a297204a2ce44465e32751e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjllOTA0ZjQ1NTY3OWQxYTI5NzIwNGEyY2U0NDQ2NWUzMjc1MWUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-19T12:23:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-19T12:28:30Z"
      },
      "message": "Merge #9791: Avoid VLA in hash.h\n\n5c8fd50 Avoid VLA in hash.h (Pieter Wuille)",
      "tree": {
        "sha": "0d9da649e7f02856b544d1cf9e8efb5f97fb58e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d9da649e7f02856b544d1cf9e8efb5f97fb58e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f9e904f455679d1a297204a2ce44465e32751e2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYqY9uAAoJEHSBCwEjRsmm6kQIAMvRiv16lv2WzVKGVmoSZ4d8\nd3HTra74rl0j+5id9LT/ETSnLwAx9IcXMnchrf7xUYFl1MosseJBTp5F0LQl1UUF\n7GTa1ylvFDvNqcFWZJXUCjoFa4BdTe8HlXjKLgNLvUtigACNba3OnlV+ZbK+Ke6k\nM8njJ94ov76hhPapDjk4Wn20ZwG9TSqeAl/I+0xmPTZ536ih4eeMbpQfbbWMq8EH\nilBdIcsMZ5JM5IbcwLvoOQgkBqTA8UtNKGx+c80sM//0qvHrp4ofyWijhO8bZitv\npkn/DASi+Gv3odxQJt6byW/7BuHFcLlF5+BYg4XD4HjaVFGEstLVFbZL3oCP4Io=\n=986G\n-----END PGP SIGNATURE-----",
        "payload": "tree 0d9da649e7f02856b544d1cf9e8efb5f97fb58e5\nparent 7ff4a538a8682cdf02a4bcd6f15499c841001b73\nparent 5c8fd508112016c3821b71112270afe83e6949ac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487507030 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487507310 +0100\n\nMerge #9791: Avoid VLA in hash.h\n\n5c8fd50 Avoid VLA in hash.h (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9e904f455679d1a297204a2ce44465e32751e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9e904f455679d1a297204a2ce44465e32751e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9e904f455679d1a297204a2ce44465e32751e2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff4a538a8682cdf02a4bcd6f15499c841001b73"
      },
      {
        "sha": "5c8fd508112016c3821b71112270afe83e6949ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c8fd508112016c3821b71112270afe83e6949ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c8fd508112016c3821b71112270afe83e6949ac"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "eacb8f04fef378ab80a1b1df15689525e5d45895",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f9e904f455679d1a297204a2ce44465e32751e2/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f9e904f455679d1a297204a2ce44465e32751e2/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=1f9e904f455679d1a297204a2ce44465e32751e2",
        "patch": "@@ -25,9 +25,9 @@ class CHash256 {\n     static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;\n \n     void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-        unsigned char buf[sha.OUTPUT_SIZE];\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        sha.Reset().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n+        sha.Reset().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash256& Write(const unsigned char *data, size_t len) {\n@@ -49,9 +49,9 @@ class CHash160 {\n     static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;\n \n     void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n-        unsigned char buf[sha.OUTPUT_SIZE];\n+        unsigned char buf[CSHA256::OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        CRIPEMD160().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n+        CRIPEMD160().Write(buf, CSHA256::OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash160& Write(const unsigned char *data, size_t len) {"
      }
    ]
  },
  {
    "sha": "390a39bb5cf4eca849a75802f92a361a9bcac310",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTBhMzliYjVjZjRlY2E4NDlhNzU4MDJmOTJhMzYxYTliY2FjMzEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-19T15:02:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-19T15:03:35Z"
      },
      "message": "Merge #9795: doc: Update manpages for master (laanwj)\n\neb49101 doc: Update manpages for master (Wladimir J. van der Laan)",
      "tree": {
        "sha": "b0d1ae658f2773cf406bf50786becb31bdb85b18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0d1ae658f2773cf406bf50786becb31bdb85b18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/390a39bb5cf4eca849a75802f92a361a9bcac310",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYqbPHAAoJEHSBCwEjRsmmYa4H/3StS3W/xdNJdCAp6vvgrBoU\nqIssTPYiJ6SbNMlDo2ELTEV+rttdX51umcw6K7KHQAkX6ebhIh+yx5kzXnM/71FG\ne+h+fiyCM4C/p5eq7Hy5SpMTQZ3MxrK9+IbqllaDuG8JFfKKIA8LX7E+tbLoqINm\n8iNHNVW+DZ7yIB3/06fuY8rqh7DXSGxRzqS5WPGK9wN6XfoDwue9lzn2XzYwGOVP\n6O+JgZJzL1ceTNBUZMQXCaHMh24F8RWhTCAQLUPIxfhZaMLVYQpwlr5KamKKop/h\nW1Jwm0W/rdQfAJwD/G+poeHhWQN7VqtAFKjtYxtaLFpXMKq2Tc/D61Y1jLOnKpU=\n=rf0f\n-----END PGP SIGNATURE-----",
        "payload": "tree b0d1ae658f2773cf406bf50786becb31bdb85b18\nparent 1f9e904f455679d1a297204a2ce44465e32751e2\nparent eb4910193accabdb2edf6a361d52050c851de96e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487516550 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487516615 +0100\n\nMerge #9795: doc: Update manpages for master (laanwj)\n\neb49101 doc: Update manpages for master (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390a39bb5cf4eca849a75802f92a361a9bcac310",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/390a39bb5cf4eca849a75802f92a361a9bcac310",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390a39bb5cf4eca849a75802f92a361a9bcac310/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f9e904f455679d1a297204a2ce44465e32751e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9e904f455679d1a297204a2ce44465e32751e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9e904f455679d1a297204a2ce44465e32751e2"
      },
      {
        "sha": "eb4910193accabdb2edf6a361d52050c851de96e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb4910193accabdb2edf6a361d52050c851de96e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb4910193accabdb2edf6a361d52050c851de96e"
      }
    ],
    "stats": {
      "total": 279,
      "additions": 179,
      "deletions": 100
    },
    "files": [
      {
        "sha": "0493241b1e07e90db2ac06eacaaa12ff3a6cd1e9",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=390a39bb5cf4eca849a75802f92a361a9bcac310",
        "patch": "@@ -1,19 +1,17 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-CLI \"1\" \"September 2016\" \"bitcoin-cli v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-CLI \"1\" \"February 2017\" \"bitcoin-cli v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.13.0.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.13.0.0\n+Bitcoin Core RPC client version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-cli [options] <command> [params]\n Send command to Bitcoin Core\n-.TP\n-bitcoin\\-cli [options] help\n-List commands\n-.TP\n-bitcoin\\-cli [options] help <command>\n-Get help for a command\n+.IP\n+bitcoin\\-cli [options] \\fB\\-named\\fR <command> [name=value] ... Send command to Bitcoin Core (with named arguments)\n+bitcoin\\-cli [options] help                List commands\n+bitcoin\\-cli [options] help <command>      Get help for a command\n .SH OPTIONS\n .HP\n \\-?\n@@ -40,6 +38,10 @@ Enter regression test mode, which uses a special chain in which blocks\n can be solved instantly. This is intended for regression testing\n tools and app development.\n .HP\n+\\fB\\-named\\fR\n+.IP\n+Pass named instead of positional arguments (default: false)\n+.HP\n \\fB\\-rpcconnect=\\fR<ip>\n .IP\n Send commands to node running on <ip> (default: 127.0.0.1)\n@@ -69,16 +71,16 @@ Timeout during HTTP requests (default: 900)\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n (recommended for sensitive information such as passphrases)\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "ce252612e57a2ae402921f7ed50cf7199679aa1e",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 69,
        "deletions": 38,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=390a39bb5cf4eca849a75802f92a361a9bcac310",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-QT \"1\" \"September 2016\" \"bitcoin-qt v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-QT \"1\" \"February 2017\" \"bitcoin-qt v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.13.0.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core version v0.13.0.0 (64\\-bit)\n+Bitcoin Core version v0.14.99.0 (64\\-bit)\n Usage:\n .IP\n bitcoin\\-qt [command\\-line options]\n@@ -27,13 +27,14 @@ long fork (%s in cmd is replaced by message)\n Execute command when the best block changes (%s in cmd is replaced by\n block hash)\n .HP\n-\\fB\\-checkblocks=\\fR<n>\n+\\fB\\-assumevalid=\\fR<hex>\n .IP\n-How many blocks to check at startup (default: 288, 0 = all)\n-.HP\n-\\fB\\-checklevel=\\fR<n>\n-.IP\n-How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+If this block is in the chain assume that it and its ancestors are valid\n+and potentially skip their script verification (0 to verify all,\n+default:\n+00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+testnet:\n+00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -62,11 +63,16 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n \\fB\\-mempoolexpiry=\\fR<n>\n .IP\n Do not keep transactions in the mempool longer than <n> hours (default:\n-72)\n+336)\n+.HP\n+\\fB\\-blockreconstructionextratxn=\\fR<n>\n+.IP\n+Extra transactions to keep in memory for compact block reconstructions\n+(default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -75,13 +81,15 @@ Specify pid file (default: bitcoind.pid)\n .HP\n \\fB\\-prune=\\fR<n>\n .IP\n-Reduce storage requirements by enabling pruning (deleting) of old blocks.\n-This allows the pruneblockchain RPC to be called to delete specific blocks,\n-and enables automatic pruning of old blocks if a target size in MiB is\n-provided. This mode is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR.\n-Warning: Reverting this setting requires re\\-downloading the entire blockchain.\n-(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >550 =\n-automatically prune block files to stay under the specified target size in MiB)\n+Reduce storage requirements by enabling pruning (deleting) of old\n+blocks. This allows the pruneblockchain RPC to be called to\n+delete specific blocks, and enables automatic pruning of old\n+blocks if a target size in MiB is provided. This mode is\n+incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n+setting requires re\\-downloading the entire blockchain. (default:\n+0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n+>550 = automatically prune block files to stay under the\n+specified target size in MiB)\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n@@ -123,7 +131,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s)\n+Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n+disable automatic connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -137,7 +146,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR)\n+unless \\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -149,7 +158,8 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n+\\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -204,6 +214,11 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -221,17 +236,22 @@ Tor control port to use if onion listening enabled (default:\n .IP\n Tor control port password (default: empty)\n .HP\n+\\fB\\-upnp\\fR\n+.IP\n+Use UPnP to map the listening port (default: 0)\n+.HP\n \\fB\\-whitebind=\\fR<addr>\n .IP\n Bind to given address and whitelist peers connecting to it. Use\n [host]:port notation for IPv6\n .HP\n-\\fB\\-whitelist=\\fR<netmask>\n+\\fB\\-whitelist=\\fR<IP address or network>\n .IP\n-Whitelist peers connecting from the given netmask or IP address. Can be\n-specified multiple times. Whitelisted peers cannot be DoS banned\n-and their transactions are always relayed, even if they are\n-already in the mempool, useful e.g. for a gateway\n+Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n+CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n+times. Whitelisted peers cannot be DoS banned and their\n+transactions are always relayed, even if they are already in the\n+mempool, useful e.g. for a gateway\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -240,7 +260,7 @@ not relaying transactions (default: 1)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n .IP\n-Force relay of transactions from whitelisted peers even they violate\n+Force relay of transactions from whitelisted peers even if they violate\n local relay policy (default: 1)\n .HP\n \\fB\\-maxuploadtarget=\\fR<n>\n@@ -287,13 +307,17 @@ Spend unconfirmed change when sending transactions (default: 1)\n \\fB\\-txconfirmtarget=\\fR<n>\n .IP\n If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 2)\n+confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-usehd\\fR\n .IP\n Use hierarchical deterministic key generation (HD) after BIP32. Only has\n effect during wallet creation/first start (default: 1)\n .HP\n+\\fB\\-walletrbf\\fR\n+.IP\n+Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+.HP\n \\fB\\-upgradewallet\\fR\n .IP\n Upgrade wallet to latest format on startup\n@@ -347,9 +371,9 @@ Append comment to the user agent string\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information.<category> can be: addrman,\n-alert, bench, coindb, db, http, libevent, lock, mempool,\n-mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n-tor, zmq, qt.\n+alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n+mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n+selectcoins, tor, zmq, qt.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -422,6 +446,11 @@ Set maximum block size in bytes (default: 750000)\n .IP\n Set maximum size of high\\-priority/low\\-fee transactions in bytes\n (default: 0)\n+.HP\n+\\fB\\-blockmintxfee=\\fR<amt>\n+.IP\n+Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+creation. (default: 0.00001)\n .PP\n RPC server options:\n .HP\n@@ -455,8 +484,10 @@ Password for JSON\\-RPC connections\n .IP\n Username and hashed password for JSON\\-RPC connections. The field\n <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcuser. This option\n-can be specified multiple times\n+canonical python script is included in share/rpcuser. The client\n+then connects normally using the\n+rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n+option can be specified multiple times\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n@@ -500,16 +531,16 @@ Show splash screen on startup (default: 1)\n .IP\n Reset all settings changed in the GUI\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "98adf2f5b1e5d7445326a0782ddd081a3e079b99",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 25,
        "deletions": 10,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=390a39bb5cf4eca849a75802f92a361a9bcac310",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIN-TX \"1\" \"September 2016\" \"bitcoin-tx v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIN-TX \"1\" \"February 2017\" \"bitcoin-tx v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.13.0.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.13.0.0\n+Bitcoin Core bitcoin\\-tx utility version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoin\\-tx [options] <hex\\-tx> [commands]\n@@ -67,13 +67,28 @@ outaddr=VALUE:ADDRESS\n .IP\n Add address\\-based output to TX\n .IP\n+outpubkey=VALUE:PUBKEY[:FLAGS]\n+.IP\n+Add pay\\-to\\-pubkey output to TX. Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-pubkey\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n+.IP\n outdata=[VALUE:]DATA\n .IP\n Add data\\-based output to TX\n .IP\n-outscript=VALUE:SCRIPT\n+outscript=VALUE:SCRIPT[:FLAGS]\n+.IP\n+Add raw script output to TX. Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n+.IP\n+outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\n .IP\n-Add raw script output to TX\n+Add Pay To n\\-of\\-m Multi\\-sig output to TX. n = REQUIRED, m = PUBKEYS.\n+Optionally add the \"W\" flag to produce a\n+pay\\-to\\-witness\\-script\\-hash output. Optionally add the \"S\" flag to\n+wrap the output in a pay\\-to\\-script\\-hash.\n .IP\n sign=SIGHASH\\-FLAGS\n .IP\n@@ -92,16 +107,16 @@ set=NAME:JSON\\-STRING\n .IP\n Set register NAME to given JSON\\-STRING\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "fb066e0c6f310fbbe34423cff059052bcdf73af6",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 69,
        "deletions": 38,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/390a39bb5cf4eca849a75802f92a361a9bcac310/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=390a39bb5cf4eca849a75802f92a361a9bcac310",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.5.\n-.TH BITCOIND \"1\" \"September 2016\" \"bitcoind v0.13.0.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n+.TH BITCOIND \"1\" \"February 2017\" \"bitcoind v0.14.99.0\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.13.0.0\n+bitcoind \\- manual page for bitcoind v0.14.99.0\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.13.0.0\n+Bitcoin Core Daemon version v0.14.99.0\n .SS \"Usage:\"\n .TP\n bitcoind [options]\n@@ -28,13 +28,14 @@ long fork (%s in cmd is replaced by message)\n Execute command when the best block changes (%s in cmd is replaced by\n block hash)\n .HP\n-\\fB\\-checkblocks=\\fR<n>\n+\\fB\\-assumevalid=\\fR<hex>\n .IP\n-How many blocks to check at startup (default: 288, 0 = all)\n-.HP\n-\\fB\\-checklevel=\\fR<n>\n-.IP\n-How thorough the block verification of \\fB\\-checkblocks\\fR is (0\\-4, default: 3)\n+If this block is in the chain assume that it and its ancestors are valid\n+and potentially skip their script verification (0 to verify all,\n+default:\n+00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+testnet:\n+00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -67,11 +68,16 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n \\fB\\-mempoolexpiry=\\fR<n>\n .IP\n Do not keep transactions in the mempool longer than <n> hours (default:\n-72)\n+336)\n+.HP\n+\\fB\\-blockreconstructionextratxn=\\fR<n>\n+.IP\n+Extra transactions to keep in memory for compact block reconstructions\n+(default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-4\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -80,13 +86,15 @@ Specify pid file (default: bitcoind.pid)\n .HP\n \\fB\\-prune=\\fR<n>\n .IP\n-Reduce storage requirements by enabling pruning (deleting) of old blocks.\n-This allows the pruneblockchain RPC to be called to delete specific blocks,\n-and enables automatic pruning of old blocks if a target size in MiB is\n-provided. This mode is incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR.\n-Warning: Reverting this setting requires re\\-downloading the entire blockchain.\n-(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >550 =\n-automatically prune block files to stay under the specified target size in MiB)\n+Reduce storage requirements by enabling pruning (deleting) of old\n+blocks. This allows the pruneblockchain RPC to be called to\n+delete specific blocks, and enables automatic pruning of old\n+blocks if a target size in MiB is provided. This mode is\n+incompatible with \\fB\\-txindex\\fR and \\fB\\-rescan\\fR. Warning: Reverting this\n+setting requires re\\-downloading the entire blockchain. (default:\n+0 = disable pruning blocks, 1 = allow manual pruning via RPC,\n+>550 = automatically prune block files to stay under the\n+specified target size in MiB)\n .HP\n \\fB\\-reindex\\-chainstate\\fR\n .IP\n@@ -128,7 +136,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s)\n+Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n+disable automatic connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -142,7 +151,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR)\n+unless \\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -154,7 +163,8 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n+\\fB\\-connect\\fR/\\-noconnect)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -209,6 +219,11 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -226,17 +241,22 @@ Tor control port to use if onion listening enabled (default:\n .IP\n Tor control port password (default: empty)\n .HP\n+\\fB\\-upnp\\fR\n+.IP\n+Use UPnP to map the listening port (default: 0)\n+.HP\n \\fB\\-whitebind=\\fR<addr>\n .IP\n Bind to given address and whitelist peers connecting to it. Use\n [host]:port notation for IPv6\n .HP\n-\\fB\\-whitelist=\\fR<netmask>\n+\\fB\\-whitelist=\\fR<IP address or network>\n .IP\n-Whitelist peers connecting from the given netmask or IP address. Can be\n-specified multiple times. Whitelisted peers cannot be DoS banned\n-and their transactions are always relayed, even if they are\n-already in the mempool, useful e.g. for a gateway\n+Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or\n+CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple\n+times. Whitelisted peers cannot be DoS banned and their\n+transactions are always relayed, even if they are already in the\n+mempool, useful e.g. for a gateway\n .HP\n \\fB\\-whitelistrelay\\fR\n .IP\n@@ -245,7 +265,7 @@ not relaying transactions (default: 1)\n .HP\n \\fB\\-whitelistforcerelay\\fR\n .IP\n-Force relay of transactions from whitelisted peers even they violate\n+Force relay of transactions from whitelisted peers even if they violate\n local relay policy (default: 1)\n .HP\n \\fB\\-maxuploadtarget=\\fR<n>\n@@ -292,13 +312,17 @@ Spend unconfirmed change when sending transactions (default: 1)\n \\fB\\-txconfirmtarget=\\fR<n>\n .IP\n If paytxfee is not set, include enough fee so transactions begin\n-confirmation on average within n blocks (default: 2)\n+confirmation on average within n blocks (default: 6)\n .HP\n \\fB\\-usehd\\fR\n .IP\n Use hierarchical deterministic key generation (HD) after BIP32. Only has\n effect during wallet creation/first start (default: 1)\n .HP\n+\\fB\\-walletrbf\\fR\n+.IP\n+Send transactions with full\\-RBF opt\\-in enabled (default: 0)\n+.HP\n \\fB\\-upgradewallet\\fR\n .IP\n Upgrade wallet to latest format on startup\n@@ -352,9 +376,9 @@ Append comment to the user agent string\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n output all debugging information.<category> can be: addrman,\n-alert, bench, coindb, db, http, libevent, lock, mempool,\n-mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins,\n-tor, zmq.\n+alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n+mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n+selectcoins, tor, zmq.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -427,6 +451,11 @@ Set maximum block size in bytes (default: 750000)\n .IP\n Set maximum size of high\\-priority/low\\-fee transactions in bytes\n (default: 0)\n+.HP\n+\\fB\\-blockmintxfee=\\fR<amt>\n+.IP\n+Set lowest fee rate (in BTC/kB) for transactions to be included in block\n+creation. (default: 0.00001)\n .PP\n RPC server options:\n .HP\n@@ -460,8 +489,10 @@ Password for JSON\\-RPC connections\n .IP\n Username and hashed password for JSON\\-RPC connections. The field\n <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A\n-canonical python script is included in share/rpcuser. This option\n-can be specified multiple times\n+canonical python script is included in share/rpcuser. The client\n+then connects normally using the\n+rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This\n+option can be specified multiple times\n .HP\n \\fB\\-rpcport=\\fR<port>\n .IP\n@@ -479,16 +510,16 @@ option can be specified multiple times\n .IP\n Set the number of threads to service RPC calls (default: 4)\n .SH COPYRIGHT\n-Copyright (C) 2009-2016 The Bitcoin Core developers\n+Copyright (C) 2009-2017 The Bitcoin Core developers\n \n Please contribute if you find Bitcoin Core useful. Visit\n <https://bitcoincore.org> for further information about the software.\n The source code is available from <https://github.com/bitcoin/bitcoin>.\n \n This is experimental software.\n Distributed under the MIT software license, see the accompanying file COPYING\n-or <http://www.opensource.org/licenses/mit-license.php>.\n+or <https://opensource.org/licenses/MIT>\n \n This product includes software developed by the OpenSSL Project for use in the\n-OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written\n-by Eric Young and UPnP software written by Thomas Bernard.\n+OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by\n+Eric Young and UPnP software written by Thomas Bernard."
      }
    ]
  },
  {
    "sha": "3b4dd2a6768536be3a7db21353f43ba614c17377",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjRkZDJhNjc2ODUzNmJlM2E3ZGIyMTM1M2Y0M2JhNjE0YzE3Mzc3",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2017-02-19T21:11:54Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2017-02-19T21:11:54Z"
      },
      "message": "Add seed.btc.petertodd.org to mainnet DNS seeds",
      "tree": {
        "sha": "bff6ec14cb93a692389bb436851e760f2481db99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bff6ec14cb93a692389bb436851e760f2481db99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b4dd2a6768536be3a7db21353f43ba614c17377",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJYqgocAAoJECSBQD2l8JH7N0UIAIqws0kNnII8gXXDThd0Lc1K\nveryfydwWAbWqjcLe9e+scHdKYOgiwcHYfwlhs5q567RAjTTldHCRMA+bS+h2lb5\nft+tWVXPXw6692XqaQ0tflEc3oeEav1TQ89P9+Surhfml7KhXH5Tvpx+stVXbici\ndlckYHI5Yn1SnCc5yvfuBYEbR5WrkxZcA+duUfLewrlSKcQ4xMHbdUtTjb8x3ejU\navvE1DVMvulrsUxk5+vApteh+u5loqW+dqZc8/B2OpyB4plpyWjUhaE0pw4AsZvq\nEeEXrNgl9ruxwGbAeuC7OlBpRgFxcPtxQGn4UzL2Kx/GIoJwPd5sBSKNSP8jFWM=\n=X9OD\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQD/8BCTCEtTHAUDxajtsIO1InJyCPEEWKoKIfAIPiSgiDK0xtIAg9/jDS75DI4s\nK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEJya\nm3R6cnM/aZn+pxKZ+U0I8QRYqgog8AixQLd+M9LEaACD3+MNLvkMji4taHR0cHM6\nLy9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree bff6ec14cb93a692389bb436851e760f2481db99\nparent 390a39bb5cf4eca849a75802f92a361a9bcac310\nauthor Peter Todd <pete@petertodd.org> 1487538714 -0500\ncommitter Peter Todd <pete@petertodd.org> 1487538714 -0500\n\nAdd seed.btc.petertodd.org to mainnet DNS seeds\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b4dd2a6768536be3a7db21353f43ba614c17377",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b4dd2a6768536be3a7db21353f43ba614c17377",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b4dd2a6768536be3a7db21353f43ba614c17377/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "390a39bb5cf4eca849a75802f92a361a9bcac310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390a39bb5cf4eca849a75802f92a361a9bcac310",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/390a39bb5cf4eca849a75802f92a361a9bcac310"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c3855882921905d1ba610abe49b1769807a50f8",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b4dd2a6768536be3a7db21353f43ba614c17377/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b4dd2a6768536be3a7db21353f43ba614c17377/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3b4dd2a6768536be3a7db21353f43ba614c17377",
        "patch": "@@ -125,6 +125,7 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n+        vSeeds.push_back(CDNSSeedData(\"petertodd.org\", \"seed.btc.petertodd.org\", true)); // Peter Todd, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);"
      }
    ]
  },
  {
    "sha": "41e7219127d2895d2d223a75672cf312e476bfa5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWU3MjE5MTI3ZDI4OTVkMmQyMjNhNzU2NzJjZjMxMmU0NzZiZmE1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-02-20T01:44:35Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-02-20T01:44:35Z"
      },
      "message": "[trivial] Add tests_config.ini to .gitignore",
      "tree": {
        "sha": "ff14918098c9504c6e323a592790a8bdcc0fec0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff14918098c9504c6e323a592790a8bdcc0fec0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41e7219127d2895d2d223a75672cf312e476bfa5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYqkoEAAoJEC7rn1zAlSbB02EQAKiPHKPdC1F4G2NP0Zl3v1wp\n7Hwi1SgblpKGfChQrxjoTf4Rgnqfv4C00CQDuPyZaX8uYyPNHuesewPTPVXz+nFP\nrYTo64Org9ABcGc+KtJ8fB+I4BX2b/ZnEoOgWOg1y91z0vqnDOYyyXTORwHlmnBr\nYF2cK3uJrvtSDR2XM6V9geYM7OQ4lwV+S9zH4nrpDcd/HM1Er95A7YLafFnVbKUD\nW18A14STbuinj4y5jPFWKj6L4gCru9Mh64SwkeogcQomL6H4LhVaYZIEux76gAN9\nupd1JpftMpzuiEuzPvqQzmqlz7XK6SLD9a1xyYZ/sYAsnVZZVcwJ8VDl9B9nhAjG\nzY4GGIgJxFiJk7fYiWOk/qkmsiIJzIslnMsMm8V9+3GHw+AbqmFNBsFfTB5IREU/\ndUSH3kA7J111PtLdpocvJXVKZaE4yxx861vH72qinGn8eT80B2xwbP2gi48/Ju1p\nCDxc+78AGXxriTOxuOPO1JAw1B+QbYVg1Iil+Zt0Q0NBnerPe7b0v0QjRMpavQIs\nbAGPv3K143xvK64Wem1EyMaSmOu7Nd7A2xEnEhpamrU9EOw3V5ACXSD09ihfIldT\nOIF+Gcsbav1FRdPxwmdxsqI4j7QMgriHQYyEpH2KX+R5GR7VqgoguE15tuhYcqbS\nWN5OlvwwKkgc2sp0sJyO\n=lUuJ\n-----END PGP SIGNATURE-----",
        "payload": "tree ff14918098c9504c6e323a592790a8bdcc0fec0f\nparent 390a39bb5cf4eca849a75802f92a361a9bcac310\nauthor fanquake <fanquake@gmail.com> 1487555075 +0800\ncommitter fanquake <fanquake@gmail.com> 1487555075 +0800\n\n[trivial] Add tests_config.ini to .gitignore\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e7219127d2895d2d223a75672cf312e476bfa5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41e7219127d2895d2d223a75672cf312e476bfa5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e7219127d2895d2d223a75672cf312e476bfa5/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "390a39bb5cf4eca849a75802f92a361a9bcac310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390a39bb5cf4eca849a75802f92a361a9bcac310",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/390a39bb5cf4eca849a75802f92a361a9bcac310"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "479889cb78ab255cd875c1ace1a265c0bbe27377",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41e7219127d2895d2d223a75672cf312e476bfa5/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41e7219127d2895d2d223a75672cf312e476bfa5/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=41e7219127d2895d2d223a75672cf312e476bfa5",
        "patch": "@@ -102,6 +102,7 @@ linux-coverage-build\n linux-build\n win32-build\n qa/pull-tester/tests_config.py\n+qa/pull-tester/tests_config.ini\n qa/cache/*\n \n !src/leveldb*/Makefile"
      }
    ]
  },
  {
    "sha": "851f6a39f10379bfdb27e18c87b322b942abe914",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTFmNmEzOWYxMDM3OWJmZGIyN2UxOGM4N2IzMjJiOTQyYWJlOTE0",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-02-20T01:45:32Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-02-20T01:45:32Z"
      },
      "message": "[qa][doc] Correct rpc test options in readme",
      "tree": {
        "sha": "a0fb72c24ae05bd82ef8998a45479940a97a7112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0fb72c24ae05bd82ef8998a45479940a97a7112"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/851f6a39f10379bfdb27e18c87b322b942abe914",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYqko9AAoJEC7rn1zAlSbBkbkQAKFmHOzxxBhbULt35Eg8dko6\nZsgawpa+dMq0i+yN7UXMjD0GcRNVeVl31Bl6eIWF8bFPluoDbSnRkRICH58NaZWD\nNwcCjHMjfk2orAmNauq8xJfNPJH6r1iVppdislJKweeEsEuqvY5XlTyyX2/wyyKj\nuJ6yJm6v2hhj+hzzkyk2Hl6HdO/yKF6SmQdG8QfKIXP2a30aucszVkhEeWcODXTi\nHURtITYg7gwWsdKlFLRPsvRAu2ILaSmxNaBJ9ezvAGlQ6cNj04N63FO/JisZ6Jcj\nx9e5G6REiwRHT6tDV6xS8dQX4uBPk5Tc5KI1p3ssDmtrmXKzfHM+TBS+/UVYuskj\n/JwCj4hBUhweRXiOgN0EhTtxYEXiTYGTAUkurqXYBZh4t5AVnqlFJBh/szmpEpbN\n+NcNNfYX/01kzDCKQhBoqGgR4rPp0KyQzyjGCuXCv6NACrclRtjV9+HuPHgB2jGD\n1O0g//dzhK9IM3MaNqUL7oGIW3hi3PoHRltqkz5+o4HYDAMX6HXzg07LwW+CoK7z\nCOAp3gAO1mrGL/CPvwwozTO3FZheI33EW/HlPu/hi9u4ljrSWs0yYDuBCkO3Tm0v\nffr1D2PBlxAl6nrV4uQVGOixfUHEhhijGYZjnbt9QWBChQNkBJBPN6eUBMKv2DSc\n1iCM3m2bn3I7xPw8rpUD\n=0wzD\n-----END PGP SIGNATURE-----",
        "payload": "tree a0fb72c24ae05bd82ef8998a45479940a97a7112\nparent 41e7219127d2895d2d223a75672cf312e476bfa5\nauthor fanquake <fanquake@gmail.com> 1487555132 +0800\ncommitter fanquake <fanquake@gmail.com> 1487555132 +0800\n\n[qa][doc] Correct rpc test options in readme\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851f6a39f10379bfdb27e18c87b322b942abe914",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/851f6a39f10379bfdb27e18c87b322b942abe914",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851f6a39f10379bfdb27e18c87b322b942abe914/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41e7219127d2895d2d223a75672cf312e476bfa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41e7219127d2895d2d223a75672cf312e476bfa5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41e7219127d2895d2d223a75672cf312e476bfa5"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f4dce7af5c3d27eb9db958d15ee123b2e2581bd6",
        "filename": "qa/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/851f6a39f10379bfdb27e18c87b322b942abe914/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/851f6a39f10379bfdb27e18c87b322b942abe914/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=851f6a39f10379bfdb27e18c87b322b942abe914",
        "patch": "@@ -39,12 +39,12 @@ Run the regression test suite with\n \n Run all possible tests with\n \n-    qa/pull-tester/rpc-tests.py -extended\n+    qa/pull-tester/rpc-tests.py --extended\n \n By default, tests will be run in parallel. To specify how many jobs to run,\n-append `-parallel=n` (default n=4).\n+append `--jobs=n` (default n=4).\n \n-If you want to create a basic coverage report for the rpc test suite, append `--coverage`.\n+If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n \n Possible options, which apply to each individual test run:\n \n@@ -83,5 +83,5 @@ killall bitcoind\n Writing tests\n =============\n You are encouraged to write tests for new or existing features.\n-Further information about the test framework and individual rpc\n+Further information about the test framework and individual RPC\n tests is found in [qa/rpc-tests](/qa/rpc-tests)."
      }
    ]
  },
  {
    "sha": "1a9fd5cb9d13554577ff23aebf24b9bc07eb198d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTlmZDVjYjlkMTM1NTQ1NzdmZjIzYWViZjI0YjliYzA3ZWIxOThk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:25:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:26:15Z"
      },
      "message": "Merge #9724: Qt/Intro: Add explanation of IBD process\n\nf6d18f5 Qt/Intro: Explain a bit more what will happen first time (Luke Dashjr)\n50c5657 Qt/Intro: Storage shouldn't grow significantly with pruning enabled (Luke Dashjr)\n9adb694 Qt/Intro: Move sizeWarningLabel text into C++ code (Luke Dashjr)",
      "tree": {
        "sha": "df5dd5be9adf3ea6cf527b2cbfab78f132475b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df5dd5be9adf3ea6cf527b2cbfab78f132475b4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYqxinAAoJEHSBCwEjRsmmsFQH/0r472Po3WDEC9WiWpMqwxxa\n7jJLJIG37lHpUDTZ2ybdlztMFqri+jkvCvI6EyYh1DjoOz/urc3XPw8ov/tys803\nj504GwE/sbWxdyZDj52k530FYz0Ad5+noMACNBJLDRL0VY/sSxmeXIKmGqAbC9aq\n/yGw/v246Nj+aDpXlemyit+NLvPMj9dhXcNwVUJgUblXfmXnrK8Br2kBVC8Hspyy\ndxdv6laY7s2MclZWi+UZ+A2pvG2XoAzaHXSOWv3yrPWu9qqpj4X20Y1EYNi66Ixp\nU+tcMTktB6t2RyqszqmVYMTK9GnXgm4KNEdLEA2DhspRPnW1ddSt37bO1eD2CNk=\n=04Wu\n-----END PGP SIGNATURE-----",
        "payload": "tree df5dd5be9adf3ea6cf527b2cbfab78f132475b4d\nparent 390a39bb5cf4eca849a75802f92a361a9bcac310\nparent f6d18f5b3397df0152243ed81dcc9d0c18a55e04\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487607946 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487607975 +0100\n\nMerge #9724: Qt/Intro: Add explanation of IBD process\n\nf6d18f5 Qt/Intro: Explain a bit more what will happen first time (Luke Dashjr)\n50c5657 Qt/Intro: Storage shouldn't grow significantly with pruning enabled (Luke Dashjr)\n9adb694 Qt/Intro: Move sizeWarningLabel text into C++ code (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "390a39bb5cf4eca849a75802f92a361a9bcac310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390a39bb5cf4eca849a75802f92a361a9bcac310",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/390a39bb5cf4eca849a75802f92a361a9bcac310"
      },
      {
        "sha": "f6d18f5b3397df0152243ed81dcc9d0c18a55e04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6d18f5b3397df0152243ed81dcc9d0c18a55e04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6d18f5b3397df0152243ed81dcc9d0c18a55e04"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 50,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cfdd8482e39586db428cea0086733d121e9f521a",
        "filename": "src/qt/forms/intro.ui",
        "status": "modified",
        "additions": 31,
        "deletions": 4,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d/src/qt/forms/intro.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d/src/qt/forms/intro.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/intro.ui?ref=1a9fd5cb9d13554577ff23aebf24b9bc07eb198d",
        "patch": "@@ -7,7 +7,7 @@\n     <x>0</x>\n     <y>0</y>\n     <width>674</width>\n-    <height>363</height>\n+    <height>415</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -55,9 +55,6 @@\n    </item>\n    <item>\n     <widget class=\"QLabel\" name=\"sizeWarningLabel\">\n-     <property name=\"text\">\n-      <string>%1 will download and store a copy of the Bitcoin block chain. At least %2GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</string>\n-     </property>\n      <property name=\"wordWrap\">\n       <bool>true</bool>\n      </property>\n@@ -203,6 +200,36 @@\n      </item>\n     </layout>\n    </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation1\">\n+     <property name=\"text\">\n+      <string>When you click OK, %1 will begin to download and process the full %4 block chain (%2GB) starting with the earliest transactions in %3 when %4 initially launched.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation2\">\n+     <property name=\"text\">\n+      <string>This initial synchronisation is very demanding, and may expose hardware problems with your computer that had previously gone unnoticed. Each time you run %1, it will continue downloading where it left off.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"lblExplanation3\">\n+     <property name=\"text\">\n+      <string>If you have chosen to limit block chain storage (pruning), the historical data must still be downloaded and processed, but will be deleted afterward to keep your disk usage low.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n    <item>\n     <spacer name=\"verticalSpacer\">\n      <property name=\"orientation\">"
      },
      {
        "sha": "4939648ff0b343932aa80bb166905e98200d5d10",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=1a9fd5cb9d13554577ff23aebf24b9bc07eb198d",
        "patch": "@@ -124,16 +124,34 @@ Intro::Intro(QWidget *parent) :\n     ui->setupUi(this);\n     ui->welcomeLabel->setText(ui->welcomeLabel->text().arg(tr(PACKAGE_NAME)));\n     ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n+\n+    ui->lblExplanation1->setText(ui->lblExplanation1->text()\n+        .arg(tr(PACKAGE_NAME))\n+        .arg(BLOCK_CHAIN_SIZE)\n+        .arg(2009)\n+        .arg(tr(\"Bitcoin\"))\n+    );\n+    ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(tr(PACKAGE_NAME)));\n+\n     uint64_t pruneTarget = std::max<int64_t>(0, GetArg(\"-prune\", 0));\n     requiredSpace = BLOCK_CHAIN_SIZE;\n+    QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n     if (pruneTarget) {\n         uint64_t prunedGBs = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n         if (prunedGBs <= requiredSpace) {\n             requiredSpace = prunedGBs;\n+            storageRequiresMsg = tr(\"Approximately %1 GB of data will be stored in this directory.\");\n         }\n+        ui->lblExplanation3->setVisible(true);\n+    } else {\n+        ui->lblExplanation3->setVisible(false);\n     }\n     requiredSpace += CHAIN_STATE_SIZE;\n-    ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(tr(PACKAGE_NAME)).arg(requiredSpace));\n+    ui->sizeWarningLabel->setText(\n+        tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(tr(PACKAGE_NAME)) + \" \" +\n+        storageRequiresMsg.arg(requiredSpace) + \" \" +\n+        tr(\"The wallet will also be stored in this directory.\")\n+    );\n     startThread();\n }\n "
      }
    ]
  },
  {
    "sha": "7ca2f542708b664b5add8aec5b5118d324268f0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2EyZjU0MjcwOGI2NjRiNWFkZDhhZWM1YjUxMThkMzI0MjY4ZjBm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:29:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:29:21Z"
      },
      "message": "Merge #9794: Minor update to qrencode package builder\n\n1bfe6b4 Use package name variable inside $(package)_file_name variable (Mitchell Cash)",
      "tree": {
        "sha": "e2aff343d7dab7533e7d621323c1096b8eb08878",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2aff343d7dab7533e7d621323c1096b8eb08878"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ca2f542708b664b5add8aec5b5118d324268f0f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYqxlhAAoJEHSBCwEjRsmm4pcIAKDVj8CxwCjCwZdK2CfxDom+\nyJd85OwEZpVUCbDwa/exEbET0XZxy/jgwZXWk22USP002RKRMXSMUZRvLHQFpA3F\nIp+oF6dr3maTpYSNzh+ZLd2ZaNprg3rXewwYsbLQ4b24+V9inXbbwFhWcL8bkZUg\nAwfar6RXnmE9J2z9dHYg2QNYYqoqzDKbFSv78uuD3Ih55rWYNwDqr5YgFy2DLGfb\niB5YGU6gu22UIDaydyIOe4wNHDU/9Xg1/A6JtfJ7mWvVV+wBjBzM6Dlre2yO+qdo\nbf0Rzbm8OGAraOXZrsCFDOVnOFi81m5RW0IJpEk/NqNnDsnqiRrwtExxaRqf5n0=\n=Sfxk\n-----END PGP SIGNATURE-----",
        "payload": "tree e2aff343d7dab7533e7d621323c1096b8eb08878\nparent 1a9fd5cb9d13554577ff23aebf24b9bc07eb198d\nparent 1bfe6b426e46c2391b3e87b4643a004e7d557840\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487608158 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487608161 +0100\n\nMerge #9794: Minor update to qrencode package builder\n\n1bfe6b4 Use package name variable inside $(package)_file_name variable (Mitchell Cash)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ca2f542708b664b5add8aec5b5118d324268f0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ca2f542708b664b5add8aec5b5118d324268f0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ca2f542708b664b5add8aec5b5118d324268f0f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a9fd5cb9d13554577ff23aebf24b9bc07eb198d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a9fd5cb9d13554577ff23aebf24b9bc07eb198d"
      },
      {
        "sha": "1bfe6b426e46c2391b3e87b4643a004e7d557840",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bfe6b426e46c2391b3e87b4643a004e7d557840",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bfe6b426e46c2391b3e87b4643a004e7d557840"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "44fdf1c2952b6188b25ddfe56d2b4f1c71d1c07f",
        "filename": "depends/packages/qrencode.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ca2f542708b664b5add8aec5b5118d324268f0f/depends/packages/qrencode.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ca2f542708b664b5add8aec5b5118d324268f0f/depends/packages/qrencode.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qrencode.mk?ref=7ca2f542708b664b5add8aec5b5118d324268f0f",
        "patch": "@@ -1,7 +1,7 @@\n package=qrencode\n $(package)_version=3.4.4\n $(package)_download_path=https://fukuchi.org/works/qrencode/\n-$(package)_file_name=qrencode-$(qrencode_version).tar.bz2\n+$(package)_file_name=$(package)-$($(package)_version).tar.bz2\n $(package)_sha256_hash=efe5188b1ddbcbf98763b819b146be6a90481aac30cfc8d858ab78a19cde1fa5\n \n define $(package)_set_vars"
      }
    ]
  },
  {
    "sha": "2dad02232af1456fb298f17cdbc3f8eea96f1a7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGFkMDIyMzJhZjE0NTZmYjI5OGYxN2NkYmMzZjhlZWE5NmYxYTdj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:29:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:30:07Z"
      },
      "message": "Merge #9760: [wallet] Remove importmulti always-true check\n\nec1267f [wallet] Remove importmulti always-true check (Russell Yanofsky)",
      "tree": {
        "sha": "271fd58a4ee8d82ccf8b21e8e6d7f677891cc37d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/271fd58a4ee8d82ccf8b21e8e6d7f677891cc37d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dad02232af1456fb298f17cdbc3f8eea96f1a7c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYqxmPAAoJEHSBCwEjRsmmemgIAJYlSG4dmbgplSEmKpnZAVn/\n4eDVcazDE+NwnBFe3HPI0g9gkmLBkttc5qgjI1GbewAYoX0BngQ4jEN4GvkM5kCh\nEW7BtpmukiPduwgKJREn/bZghiCPgIyc9cEHDQtJBt0AcfoA8Rn++N+ir/3lXL90\n2JvffIzoHSJdJQoraPQOdLXg3Xx1LgG2XmhumH8KefjH6FtfMkRNmx6hftWqRx6Y\naUp1T7RqURiy3qaUhztRaDD5nhSbawXR4mZzJUF/SVEzqwFY+eWliUT44+IO428C\n2NXS9HGHh85quqyvkQHasR2WIjjM8YEUlkqrWSezK4UIn5JWdNZHL/XtWd3nvj0=\n=QquC\n-----END PGP SIGNATURE-----",
        "payload": "tree 271fd58a4ee8d82ccf8b21e8e6d7f677891cc37d\nparent 7ca2f542708b664b5add8aec5b5118d324268f0f\nparent ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487608198 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487608207 +0100\n\nMerge #9760: [wallet] Remove importmulti always-true check\n\nec1267f [wallet] Remove importmulti always-true check (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dad02232af1456fb298f17cdbc3f8eea96f1a7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2dad02232af1456fb298f17cdbc3f8eea96f1a7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dad02232af1456fb298f17cdbc3f8eea96f1a7c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ca2f542708b664b5add8aec5b5118d324268f0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ca2f542708b664b5add8aec5b5118d324268f0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ca2f542708b664b5add8aec5b5118d324268f0f"
      },
      {
        "sha": "ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec1267f13b7d0b9b5058c6821cf8dbf74e02d17c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e95c71ac8a145e55e7490ea752edfc7b9b3f912c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dad02232af1456fb298f17cdbc3f8eea96f1a7c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dad02232af1456fb298f17cdbc3f8eea96f1a7c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=2dad02232af1456fb298f17cdbc3f8eea96f1a7c",
        "patch": "@@ -1072,7 +1072,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n     }\n \n-    if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTimeMax()) {\n+    if (fRescan && fRunScan && requests.size()) {\n         CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n \n         if (pindex) {"
      }
    ]
  },
  {
    "sha": "aa791e29114f200739f0ec654b753861549e529c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTc5MWUyOTExNGYyMDA3MzlmMGVjNjU0Yjc1Mzg2MTU0OWU1Mjlj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:31:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:32:02Z"
      },
      "message": "Merge #9619: Bugfix: RPC/Mining: GBT should return 1 MB sizelimit before segwit activates\n\n279f944 QA: Test GBT size/weight limit values (Luke Dashjr)\n9fc7f0b Bugfix: RPC/Mining: GBT should return 1 MB sizelimit before segwit activates (Luke Dashjr)",
      "tree": {
        "sha": "431bc6a1e04a4ad95be6d96f05d1230993578ae1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/431bc6a1e04a4ad95be6d96f05d1230993578ae1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa791e29114f200739f0ec654b753861549e529c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYqxoCAAoJEHSBCwEjRsmmNIoH/0zorDOuGHi7KLtgFe3qtzMK\nNWnxVz+s8hfCBwadk0EG6EH1R/3rTuxl+u5tJL4LfEiDKceqvyLsGTgsxElBfa3v\nsteF3mvLYCCQOWx7gEIQwNjWJfN7XqlrpqxWRtOzodpPx48Sik7RoSiK14G6aY88\nldl4AmvOmDtvwQP4sBdVHHmCTVOC3bc/DZgusVn7JZ6ld69kJ6LHR9Et9aFtsBQ9\n2hYdgoVS6mibT8XDSJSizHRrfZK3iS/82M8dzyHR9K5+XO8/zPTVpNxh9AKreOu6\ni8PxrvEkJul7dG6CvUOyUWseQTHlBnRIpEu7HvBuTbFUcXZCYN45w0/vLaYJuwc=\n=hClg\n-----END PGP SIGNATURE-----",
        "payload": "tree 431bc6a1e04a4ad95be6d96f05d1230993578ae1\nparent 2dad02232af1456fb298f17cdbc3f8eea96f1a7c\nparent 279f944e8d3b437d31210f3ba3e798e98a9334fc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487608312 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487608322 +0100\n\nMerge #9619: Bugfix: RPC/Mining: GBT should return 1 MB sizelimit before segwit activates\n\n279f944 QA: Test GBT size/weight limit values (Luke Dashjr)\n9fc7f0b Bugfix: RPC/Mining: GBT should return 1 MB sizelimit before segwit activates (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa791e29114f200739f0ec654b753861549e529c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa791e29114f200739f0ec654b753861549e529c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa791e29114f200739f0ec654b753861549e529c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2dad02232af1456fb298f17cdbc3f8eea96f1a7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dad02232af1456fb298f17cdbc3f8eea96f1a7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2dad02232af1456fb298f17cdbc3f8eea96f1a7c"
      },
      {
        "sha": "279f944e8d3b437d31210f3ba3e798e98a9334fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/279f944e8d3b437d31210f3ba3e798e98a9334fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/279f944e8d3b437d31210f3ba3e798e98a9334fc"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d6831e00e36ad2ba7c353c7ccd78acb676244674",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa791e29114f200739f0ec654b753861549e529c/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa791e29114f200739f0ec654b753861549e529c/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=aa791e29114f200739f0ec654b753861549e529c",
        "patch": "@@ -130,10 +130,14 @@ def run_test(self):\n         print(\"Verify sigops are counted in GBT with pre-BIP141 rules before the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({})\n+        assert(tmpl['sizelimit'] == 1000000)\n+        assert('weightlimit' not in tmpl)\n         assert(tmpl['sigoplimit'] == 20000)\n         assert(tmpl['transactions'][0]['hash'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 2)\n         tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n+        assert(tmpl['sizelimit'] == 1000000)\n+        assert('weightlimit' not in tmpl)\n         assert(tmpl['sigoplimit'] == 20000)\n         assert(tmpl['transactions'][0]['hash'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 2)\n@@ -241,6 +245,8 @@ def run_test(self):\n         print(\"Verify sigops are counted in GBT with BIP141 rules after the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({'rules':['segwit']})\n+        assert(tmpl['sizelimit'] >= 3999577)  # actual maximum size is lower due to minimum mandatory non-witness data\n+        assert(tmpl['weightlimit'] == 4000000)\n         assert(tmpl['sigoplimit'] == 80000)\n         assert(tmpl['transactions'][0]['txid'] == txid)\n         assert(tmpl['transactions'][0]['sigops'] == 8)\n@@ -250,6 +256,8 @@ def run_test(self):\n         try:\n             tmpl = self.nodes[0].getblocktemplate({})\n             assert(len(tmpl['transactions']) == 1)  # Doesn't include witness tx\n+            assert(tmpl['sizelimit'] == 1000000)\n+            assert('weightlimit' not in tmpl)\n             assert(tmpl['sigoplimit'] == 20000)\n             assert(tmpl['transactions'][0]['hash'] == txid)\n             assert(tmpl['transactions'][0]['sigops'] == 2)"
      },
      {
        "sha": "77cd282a3da4ce78b61413c4cfb3b942b8097eb2",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa791e29114f200739f0ec654b753861549e529c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa791e29114f200739f0ec654b753861549e529c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=aa791e29114f200739f0ec654b753861549e529c",
        "patch": "@@ -676,8 +676,12 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         nSigOpLimit /= WITNESS_SCALE_FACTOR;\n     }\n     result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n-    result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+    if (fPreSegWit) {\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_BASE_SIZE));\n+    } else {\n+        result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n+        result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+    }\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      }
    ]
  },
  {
    "sha": "7639d38f14b1517c56856a2be4bd13f9d51ddf79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjM5ZDM4ZjE0YjE1MTdjNTY4NTZhMmJlNGJkMTNmOWQ1MWRkZjc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:49:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-20T16:49:51Z"
      },
      "message": "Merge #9726: netbase: Do not print an error on connection timeouts through proxy\n\n3ddfe29 netbase: Do not print an error on connection timeouts through proxy (Wladimir J. van der Laan)\n13f6085 netbase: Make InterruptibleRecv return an error code instead of bool (Wladimir J. van der Laan)",
      "tree": {
        "sha": "097b4d7238ce4cfb246caaf90cfe6ad3a11b67d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/097b4d7238ce4cfb246caaf90cfe6ad3a11b67d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7639d38f14b1517c56856a2be4bd13f9d51ddf79",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYqx4vAAoJEHSBCwEjRsmm7d0IALlV8meEEyncxzkaE4Yu1kbd\nQcr09eVFbN8ZWq0LDXJTJ9FYPv5WvQtu/y5u9gjPffmsW5M+TjAGfXLct7HyJyst\nrAPOt67mLzhbr0bh/4cwVmD3hzU91SE+TUg1Dd/B6Lt8qXuVzhba8+YgIPKT0Dww\nPn1rM4/KOG4k6X6Sf2OYyvXiJTKrbddQC2yizyGryV4/eD8EpZQFqly4Vs1MoT9O\nHoWEG1Yevh9esltn3G2dL9xyZ5e+JOXWMahV6TmZE6AlTi9fL6MTGEfrzFwhCppV\np908bjZTkPg+abZhr6bALGkpAfy7MpBJaNQlTG9bmgLD26JCEheCGTFmamvUMVw=\n=dIvF\n-----END PGP SIGNATURE-----",
        "payload": "tree 097b4d7238ce4cfb246caaf90cfe6ad3a11b67d5\nparent aa791e29114f200739f0ec654b753861549e529c\nparent 3ddfe298375c2484ac281d8a6d731ad8616f3542\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487609387 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487609391 +0100\n\nMerge #9726: netbase: Do not print an error on connection timeouts through proxy\n\n3ddfe29 netbase: Do not print an error on connection timeouts through proxy (Wladimir J. van der Laan)\n13f6085 netbase: Make InterruptibleRecv return an error code instead of bool (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7639d38f14b1517c56856a2be4bd13f9d51ddf79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7639d38f14b1517c56856a2be4bd13f9d51ddf79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7639d38f14b1517c56856a2be4bd13f9d51ddf79/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa791e29114f200739f0ec654b753861549e529c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa791e29114f200739f0ec654b753861549e529c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa791e29114f200739f0ec654b753861549e529c"
      },
      {
        "sha": "3ddfe298375c2484ac281d8a6d731ad8616f3542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ddfe298375c2484ac281d8a6d731ad8616f3542",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ddfe298375c2484ac281d8a6d731ad8616f3542"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 34,
      "deletions": 18
    },
    "files": [
      {
        "sha": "fc9a6ed0be8e3f8bcece8c50d369a00c49785562",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 18,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7639d38f14b1517c56856a2be4bd13f9d51ddf79/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7639d38f14b1517c56856a2be4bd13f9d51ddf79/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=7639d38f14b1517c56856a2be4bd13f9d51ddf79",
        "patch": "@@ -198,6 +198,14 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n     return timeout;\n }\n \n+enum class IntrRecvError {\n+    OK,\n+    Timeout,\n+    Disconnected,\n+    NetworkError,\n+    Interrupted\n+};\n+\n /**\n  * Read bytes from socket. This will either read the full number of bytes requested\n  * or return False on error or timeout.\n@@ -209,7 +217,7 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n  *\n  * @note This function requires that hSocket is in non-blocking mode.\n  */\n-bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSocket)\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n@@ -222,30 +230,30 @@ bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSock\n             len -= ret;\n             data += ret;\n         } else if (ret == 0) { // Unexpected disconnection\n-            return false;\n+            return IntrRecvError::Disconnected;\n         } else { // Other error or blocking\n             int nErr = WSAGetLastError();\n             if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL) {\n                 if (!IsSelectableSocket(hSocket)) {\n-                    return false;\n+                    return IntrRecvError::NetworkError;\n                 }\n                 struct timeval tval = MillisToTimeval(std::min(endTime - curTime, maxWait));\n                 fd_set fdset;\n                 FD_ZERO(&fdset);\n                 FD_SET(hSocket, &fdset);\n                 int nRet = select(hSocket + 1, &fdset, NULL, NULL, &tval);\n                 if (nRet == SOCKET_ERROR) {\n-                    return false;\n+                    return IntrRecvError::NetworkError;\n                 }\n             } else {\n-                return false;\n+                return IntrRecvError::NetworkError;\n             }\n         }\n         if (interruptSocks5Recv)\n-            return false;\n+            return IntrRecvError::Interrupted;\n         curTime = GetTimeMillis();\n     }\n-    return len == 0;\n+    return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n struct ProxyCredentials\n@@ -272,6 +280,7 @@ std::string Socks5ErrorString(int err)\n /** Connect using SOCKS5 (as described in RFC1928) */\n static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)\n {\n+    IntrRecvError recvr;\n     LogPrint(\"net\", \"SOCKS5 connecting %s\\n\", strDest);\n     if (strDest.size() > 255) {\n         CloseSocket(hSocket);\n@@ -294,7 +303,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         return error(\"Error sending to proxy\");\n     }\n     char pchRet1[2];\n-    if (!InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+    if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n@@ -320,7 +329,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         }\n         LogPrint(\"proxy\", \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n         char pchRetA[2];\n-        if (!InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+        if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n             CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n         }\n@@ -349,9 +358,16 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         return error(\"Error sending to proxy\");\n     }\n     char pchRet2[4];\n-    if (!InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+    if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n-        return error(\"Error reading proxy response\");\n+        if (recvr == IntrRecvError::Timeout) {\n+            /* If a timeout happens here, this effectively means we timed out while connecting\n+             * to the remote node. This is very common for Tor, so do not print an\n+             * error message. */\n+            return false;\n+        } else {\n+            return error(\"Error while reading proxy response\");\n+        }\n     }\n     if (pchRet2[0] != 0x05) {\n         CloseSocket(hSocket);\n@@ -370,26 +386,26 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     char pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case 0x01: ret = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x04: ret = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case 0x01: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case 0x04: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n         case 0x03:\n         {\n-            ret = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n-            if (!ret) {\n+            recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n+            if (recvr != IntrRecvError::OK) {\n                 CloseSocket(hSocket);\n                 return error(\"Error reading from proxy\");\n             }\n             int nRecv = pchRet3[0];\n-            ret = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n+            recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n             break;\n         }\n         default: CloseSocket(hSocket); return error(\"Error: malformed proxy response\");\n     }\n-    if (!ret) {\n+    if (recvr != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n-    if (!InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+    if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }"
      }
    ]
  },
  {
    "sha": "171fc91f061d4a980eedfa522e302b8598408cc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzFmYzkxZjA2MWQ0YTk4MGVlZGZhNTIyZTMwMmI4NTk4NDA4Y2M1",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2017-02-20T17:14:06Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2017-02-20T17:14:06Z"
      },
      "message": "Read/write mempool.dat as a binary.\n\nmempool.dat is a binary file and thus it should be read/written as such.\n\nFixes #9810.",
      "tree": {
        "sha": "b86fa1b03562671fe3914f7414ca9995a590e36c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b86fa1b03562671fe3914f7414ca9995a590e36c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/171fc91f061d4a980eedfa522e302b8598408cc5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171fc91f061d4a980eedfa522e302b8598408cc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/171fc91f061d4a980eedfa522e302b8598408cc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171fc91f061d4a980eedfa522e302b8598408cc5/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7639d38f14b1517c56856a2be4bd13f9d51ddf79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7639d38f14b1517c56856a2be4bd13f9d51ddf79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7639d38f14b1517c56856a2be4bd13f9d51ddf79"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cad1c9c16005aeda2eaaa5bdbe3687af767cbdba",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/171fc91f061d4a980eedfa522e302b8598408cc5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/171fc91f061d4a980eedfa522e302b8598408cc5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=171fc91f061d4a980eedfa522e302b8598408cc5",
        "patch": "@@ -4180,7 +4180,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(void)\n {\n     int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n-    FILE* filestr = fopen((GetDataDir() / \"mempool.dat\").string().c_str(), \"r\");\n+    FILE* filestr = fopen((GetDataDir() / \"mempool.dat\").string().c_str(), \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n         LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n@@ -4261,7 +4261,7 @@ void DumpMempool(void)\n     int64_t mid = GetTimeMicros();\n \n     try {\n-        FILE* filestr = fopen((GetDataDir() / \"mempool.dat.new\").string().c_str(), \"w\");\n+        FILE* filestr = fopen((GetDataDir() / \"mempool.dat.new\").string().c_str(), \"wb\");\n         if (!filestr) {\n             return;\n         }"
      }
    ]
  },
  {
    "sha": "40f11f8872c3e9f380f8278f984dfdabffe77539",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGYxMWY4ODcyYzNlOWYzODBmODI3OGY5ODRkZmRhYmZmZTc3NTM5",
    "commit": {
      "author": {
        "name": "kirit93",
        "email": "kirit.thadaka@gmail.com",
        "date": "2017-02-19T06:35:02Z"
      },
      "committer": {
        "name": "kirit93",
        "email": "kirit.thadaka@gmail.com",
        "date": "2017-02-20T18:23:18Z"
      },
      "message": "Fix for issue #9775. Added check for open() returning a NULL pointer.",
      "tree": {
        "sha": "010c7110723a3f24f0d7d56d48ea3ab0502d908a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/010c7110723a3f24f0d7d56d48ea3ab0502d908a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40f11f8872c3e9f380f8278f984dfdabffe77539",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f11f8872c3e9f380f8278f984dfdabffe77539",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40f11f8872c3e9f380f8278f984dfdabffe77539",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f11f8872c3e9f380f8278f984dfdabffe77539/comments",
    "author": {
      "login": "kirit93",
      "id": 8190572,
      "node_id": "MDQ6VXNlcjgxOTA1NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8190572?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kirit93",
      "html_url": "https://github.com/kirit93",
      "followers_url": "https://api.github.com/users/kirit93/followers",
      "following_url": "https://api.github.com/users/kirit93/following{/other_user}",
      "gists_url": "https://api.github.com/users/kirit93/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kirit93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kirit93/subscriptions",
      "organizations_url": "https://api.github.com/users/kirit93/orgs",
      "repos_url": "https://api.github.com/users/kirit93/repos",
      "events_url": "https://api.github.com/users/kirit93/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kirit93/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kirit93",
      "id": 8190572,
      "node_id": "MDQ6VXNlcjgxOTA1NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8190572?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kirit93",
      "html_url": "https://github.com/kirit93",
      "followers_url": "https://api.github.com/users/kirit93/followers",
      "following_url": "https://api.github.com/users/kirit93/following{/other_user}",
      "gists_url": "https://api.github.com/users/kirit93/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kirit93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kirit93/subscriptions",
      "organizations_url": "https://api.github.com/users/kirit93/orgs",
      "repos_url": "https://api.github.com/users/kirit93/repos",
      "events_url": "https://api.github.com/users/kirit93/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kirit93/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ff4a538a8682cdf02a4bcd6f15499c841001b73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ff4a538a8682cdf02a4bcd6f15499c841001b73"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "78c353dfe521dabcf0050466810ee256026ae9fb",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40f11f8872c3e9f380f8278f984dfdabffe77539/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40f11f8872c3e9f380f8278f984dfdabffe77539/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=40f11f8872c3e9f380f8278f984dfdabffe77539",
        "patch": "@@ -214,12 +214,13 @@ void OpenDebugLog()\n     assert(vMsgsBeforeOpenLog);\n     boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n     fileout = fopen(pathDebug.string().c_str(), \"a\");\n-    if (fileout) setbuf(fileout, NULL); // unbuffered\n-\n-    // dump buffered messages from before we opened the log\n-    while (!vMsgsBeforeOpenLog->empty()) {\n-        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n-        vMsgsBeforeOpenLog->pop_front();\n+    if (fileout) {\n+        setbuf(fileout, NULL); // unbuffered\n+        // dump buffered messages from before we opened the log\n+        while (!vMsgsBeforeOpenLog->empty()) {\n+            FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n+            vMsgsBeforeOpenLog->pop_front();\n+        }\n     }\n \n     delete vMsgsBeforeOpenLog;\n@@ -838,4 +839,4 @@ std::string CopyrightHolders(const std::string& strPrefix)\n         strCopyrightHolders += \"\\n\" + strPrefix + \"The Bitcoin Core developers\";\n     }\n     return strCopyrightHolders;\n-}\n+}\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "c5784085e9031ea1ad32a2aee897bd57a0482d24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTc4NDA4NWU5MDMxZWExYWQzMmEyYWVlODk3YmQ1N2EwNDgyZDI0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-15T14:59:19Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-20T23:19:05Z"
      },
      "message": "Add exclude option to rpc-tests.py",
      "tree": {
        "sha": "6ce5b8f7fe8636bab70f94b3d99838b98b5b3097",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ce5b8f7fe8636bab70f94b3d99838b98b5b3097"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5784085e9031ea1ad32a2aee897bd57a0482d24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5784085e9031ea1ad32a2aee897bd57a0482d24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5784085e9031ea1ad32a2aee897bd57a0482d24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5784085e9031ea1ad32a2aee897bd57a0482d24/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7639d38f14b1517c56856a2be4bd13f9d51ddf79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7639d38f14b1517c56856a2be4bd13f9d51ddf79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7639d38f14b1517c56856a2be4bd13f9d51ddf79"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "523d753c949b7f627452b9bc47ac1d5aef3d62c7",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5784085e9031ea1ad32a2aee897bd57a0482d24/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5784085e9031ea1ad32a2aee897bd57a0482d24/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=c5784085e9031ea1ad32a2aee897bd57a0482d24",
        "patch": "@@ -133,6 +133,7 @@ def main():\n     Help text and arguments for individual test script:''',\n                                      formatter_class=argparse.RawTextHelpFormatter)\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+    parser.add_argument('--exclude', '-x', help='specify a comma-seperated-list of scripts to exclude. Do not include the .py extension in the name.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n     parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n@@ -179,13 +180,6 @@ def main():\n         # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n         test_list = [t for t in ALL_SCRIPTS if\n                 (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n-        if not test_list:\n-            print(\"No valid test scripts specified. Check that your test is in one \"\n-                  \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n-            print(\"Scripts not found:\")\n-            print(tests)\n-            sys.exit(0)\n-\n     else:\n         # No individual tests have been specified. Run base tests, and\n         # optionally ZMQ tests and extended tests.\n@@ -198,6 +192,17 @@ def main():\n             # (for parallel running efficiency). This combined list will is no\n             # longer sorted.\n \n+    # Remove the test cases that the user has explicitly asked to exclude.\n+    if args.exclude:\n+        for exclude_test in args.exclude.split(','):\n+            if exclude_test + \".py\" in test_list:\n+                test_list.remove(exclude_test + \".py\")\n+\n+    if not test_list:\n+        print(\"No valid test scripts specified. Check that your test is in one \"\n+              \"of the test lists in rpc-tests.py, or run rpc-tests.py with no arguments to run all tests\")\n+        sys.exit(0)\n+\n     if args.help:\n         # Print help for rpc-tests.py, then print help of the first script and exit.\n         parser.print_help()"
      }
    ]
  },
  {
    "sha": "a87d02adad2d566927136694dc0d7b202d72691d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODdkMDJhZGFkMmQ1NjY5MjcxMzY2OTRkYzBkN2IyMDJkNzI2OTFk",
    "commit": {
      "author": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-02-21T08:16:25Z"
      },
      "committer": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-02-21T08:17:24Z"
      },
      "message": "use EXIT_ codes instead of magic numbers\n\nTo be consistent with other exit() calls.",
      "tree": {
        "sha": "dace8ddd009d1d9242d638e41adee9def23c38bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dace8ddd009d1d9242d638e41adee9def23c38bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a87d02adad2d566927136694dc0d7b202d72691d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a87d02adad2d566927136694dc0d7b202d72691d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a87d02adad2d566927136694dc0d7b202d72691d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a87d02adad2d566927136694dc0d7b202d72691d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7639d38f14b1517c56856a2be4bd13f9d51ddf79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7639d38f14b1517c56856a2be4bd13f9d51ddf79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7639d38f14b1517c56856a2be4bd13f9d51ddf79"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a3d02afcdbe1a657b02e4dde14a6d10582a8fecd",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a87d02adad2d566927136694dc0d7b202d72691d/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a87d02adad2d566927136694dc0d7b202d72691d/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=a87d02adad2d566927136694dc0d7b202d72691d",
        "patch": "@@ -136,17 +136,17 @@ bool AppInit(int argc, char* argv[])\n         if (!AppInitBasicSetup())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(1);\n+            exit(EXIT_FAILURE);\n         }\n         if (!AppInitParameterInteraction())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(1);\n+            exit(EXIT_FAILURE);\n         }\n         if (!AppInitSanityChecks())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(1);\n+            exit(EXIT_FAILURE);\n         }\n         if (GetBoolArg(\"-daemon\", false))\n         {"
      },
      {
        "sha": "51fc6ae0ba3a2ccfac23e8236a490d798fd69853",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a87d02adad2d566927136694dc0d7b202d72691d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a87d02adad2d566927136694dc0d7b202d72691d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=a87d02adad2d566927136694dc0d7b202d72691d",
        "patch": "@@ -156,12 +156,12 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn, CTxMemPo\n \n void Shutdown(void* parg)\n {\n-  exit(0);\n+  exit(EXIT_SUCCESS);\n }\n \n void StartShutdown()\n {\n-  exit(0);\n+  exit(EXIT_SUCCESS);\n }\n \n bool ShutdownRequested()"
      }
    ]
  },
  {
    "sha": "7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDQ2YjNlYThkNmNkODM1YmQwYmJkM2U4ZTlhNmQ3YTZhNTM2YzMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T08:50:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T11:34:23Z"
      },
      "message": "Merge #9813: Read/write mempool.dat as a binary.\n\n171fc91 Read/write mempool.dat as a binary. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "b86fa1b03562671fe3914f7414ca9995a590e36c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b86fa1b03562671fe3914f7414ca9995a590e36c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrCW/AAoJEHSBCwEjRsmmkMAH/A2o7aizbf2b9oR23tM3XWZ8\nZKTr+fKvC2bFdlh9wMSmlMVEtp2RG2T+d+GLMnwy818pzUqL2JzfpKgt36kItzzL\nm9Frbg/FpS0hx3ZPUh6+7oy4rkhdK17KF9mlc+HXGaIkZCCs+dqCbgkzTqc1WygW\npvzca8RdFET2YTXjNACMk8BXalMbW0PjP4Azef1YZIHpeqyuYZxkqEGeUA5ejOEj\n/Ul/Rrhu5B2PvNv/648kXlI2K9MR4x2H2XSuSM+bxJaPJlhjamkjVUPyunFtxhnT\n4fqVS2lTy9TlCNjcAgRHAwtfv6MyXF9lLKeumsr/xvhfNqkbRPuZxTxsRCd0e7Y=\n=UFk7\n-----END PGP SIGNATURE-----",
        "payload": "tree b86fa1b03562671fe3914f7414ca9995a590e36c\nparent 7639d38f14b1517c56856a2be4bd13f9d51ddf79\nparent 171fc91f061d4a980eedfa522e302b8598408cc5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487667037 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487676863 +0100\n\nMerge #9813: Read/write mempool.dat as a binary.\n\n171fc91 Read/write mempool.dat as a binary. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7639d38f14b1517c56856a2be4bd13f9d51ddf79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7639d38f14b1517c56856a2be4bd13f9d51ddf79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7639d38f14b1517c56856a2be4bd13f9d51ddf79"
      },
      {
        "sha": "171fc91f061d4a980eedfa522e302b8598408cc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/171fc91f061d4a980eedfa522e302b8598408cc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/171fc91f061d4a980eedfa522e302b8598408cc5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cad1c9c16005aeda2eaaa5bdbe3687af767cbdba",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31",
        "patch": "@@ -4180,7 +4180,7 @@ static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n bool LoadMempool(void)\n {\n     int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n-    FILE* filestr = fopen((GetDataDir() / \"mempool.dat\").string().c_str(), \"r\");\n+    FILE* filestr = fopen((GetDataDir() / \"mempool.dat\").string().c_str(), \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n         LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n@@ -4261,7 +4261,7 @@ void DumpMempool(void)\n     int64_t mid = GetTimeMicros();\n \n     try {\n-        FILE* filestr = fopen((GetDataDir() / \"mempool.dat.new\").string().c_str(), \"w\");\n+        FILE* filestr = fopen((GetDataDir() / \"mempool.dat.new\").string().c_str(), \"wb\");\n         if (!filestr) {\n             return;\n         }"
      }
    ]
  },
  {
    "sha": "8ad31f9aa3111e079dd5024e8f6b069abb564b81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWQzMWY5YWEzMTExZTA3OWRkNTAyNGU4ZjZiMDY5YWJiNTY0Yjgx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T13:32:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T13:32:58Z"
      },
      "message": "Merge #9798: Fix Issue #9775 (Check returned value of fopen)\n\n40f11f8 Fix for issue #9775. Added check for open() returning a NULL pointer. (kirit93)",
      "tree": {
        "sha": "6b0a733549ce45ea5a6a752eb38a42aa6ac2ace8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b0a733549ce45ea5a6a752eb38a42aa6ac2ace8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ad31f9aa3111e079dd5024e8f6b069abb564b81",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrEGKAAoJEHSBCwEjRsmm/78H/2i5Ah/dXM5S1KSWcQPbPeuv\nNS5eaGQ/nQup7GR0pN5IR1ZAD03mDbZkezQ35fdiM0kKa/vUop/3Ky4s/n14iqun\nuQd6RDZrABEGTrgyt+a+9Ta6H6YYw/DzmvTx/1jQgdMaSslGYxqog27FCizpsJ+2\n1C5U8pZJTcQPlgym3PgAyNFj6Sr/4NErztCtySunJYZTa+DuClWKGzeSn1Pd+yhy\nT6W4AVrAOq6xX17PtKz8f8IWbbhcNHs4WhdSIQ7AsH7wX68/ikKguBjipZf6PIT9\nHgFxFL5zYx2/TE7z5WWmnLqyfhG84O7OGSTEp9WUwpQuOpHeUmVIf9+1Jbho18M=\n=X50B\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b0a733549ce45ea5a6a752eb38a42aa6ac2ace8\nparent 7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31\nparent 40f11f8872c3e9f380f8278f984dfdabffe77539\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487683964 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487683978 +0100\n\nMerge #9798: Fix Issue #9775 (Check returned value of fopen)\n\n40f11f8 Fix for issue #9775. Added check for open() returning a NULL pointer. (kirit93)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ad31f9aa3111e079dd5024e8f6b069abb564b81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ad31f9aa3111e079dd5024e8f6b069abb564b81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ad31f9aa3111e079dd5024e8f6b069abb564b81/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d46b3ea8d6cd835bd0bbd3e8e9a6d7a6a536c31"
      },
      {
        "sha": "40f11f8872c3e9f380f8278f984dfdabffe77539",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40f11f8872c3e9f380f8278f984dfdabffe77539",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40f11f8872c3e9f380f8278f984dfdabffe77539"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "78c353dfe521dabcf0050466810ee256026ae9fb",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ad31f9aa3111e079dd5024e8f6b069abb564b81/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ad31f9aa3111e079dd5024e8f6b069abb564b81/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "patch": "@@ -214,12 +214,13 @@ void OpenDebugLog()\n     assert(vMsgsBeforeOpenLog);\n     boost::filesystem::path pathDebug = GetDataDir() / \"debug.log\";\n     fileout = fopen(pathDebug.string().c_str(), \"a\");\n-    if (fileout) setbuf(fileout, NULL); // unbuffered\n-\n-    // dump buffered messages from before we opened the log\n-    while (!vMsgsBeforeOpenLog->empty()) {\n-        FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n-        vMsgsBeforeOpenLog->pop_front();\n+    if (fileout) {\n+        setbuf(fileout, NULL); // unbuffered\n+        // dump buffered messages from before we opened the log\n+        while (!vMsgsBeforeOpenLog->empty()) {\n+            FileWriteStr(vMsgsBeforeOpenLog->front(), fileout);\n+            vMsgsBeforeOpenLog->pop_front();\n+        }\n     }\n \n     delete vMsgsBeforeOpenLog;\n@@ -838,4 +839,4 @@ std::string CopyrightHolders(const std::string& strPrefix)\n         strCopyrightHolders += \"\\n\" + strPrefix + \"The Bitcoin Core developers\";\n     }\n     return strCopyrightHolders;\n-}\n+}\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTJjNGYxMDU3NGNjZjZkZmUwZDRlY2IzY2U5Mjg3MzNkM2ExZTUy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-21T13:36:36Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-02-21T13:37:20Z"
      },
      "message": "Fix segfault crash when shutdown the GUI in disablewallet mode",
      "tree": {
        "sha": "5b71871954c9eae2bb556c257e5763e761f41876",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b71871954c9eae2bb556c257e5763e761f41876"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMu5cTD+hXMrbRqvlKdS8tkFvU+wFAlisQpAACgkQKdS8tkFv\nU+wJfBAAiU1dqVr+WYFgmRwr2k/BxYGp/6JyK4M2tC2odXNjspk3NwkTXsQtsa+Z\nI0PI6c79M1kfeRtJDNFKX/Wch0HuIwhzdnuXnoZLChrvwCKYKPbpreCfZ2slo25L\n7H3Versuzh24OZUbf+lRgBYKb3s9aADbTmeYq5WDqpj2cVTKV2nL7sQHToOIg/QV\nIRcYdlQtdDM1EEixo1n4b0f1fbLDi+fITP/puNW3qhHI7Kk5ULp8OPXijuKoiqy2\nRMz30w1U73oUo/uehqEP8mRjP2ZlDiSUUtH5eW780AcVIlO5FqED5iyy7vVaFk06\nXDuwQ4//3iM9nSFP7iqZB89BODHczbjnrw/046vAbmpDjYbMHh5jw6ry4IUzuOEJ\nHeDio6Q+rCoz4dvpE7wwbMz+4uAHz+FOQ33zek9ptIl2hzmm9osUQUxtx+YO5UaQ\nr14POwQeYLqvEC56QfFFd/pLG+FlZ09YoN9I/hvUMTdtFX1WoET2k9iQij89zUuJ\nH4APhu4l31kJti4q2Jm1eAQxx1Ym6bM5TkNKpBwbG4PP1WEByInmpBukbwXH1SMM\nJ53w0UGsSnD7W/cPXUwP5+IZRT43j+EWC8gFStPqVcZ9fGoJBBupeJrna9gXpTV1\nwnmiv6fzLYJFMS0TcNnwG6Gf24Bh52e2weLnRA+xw+yP5yaQM3w=\n=tBYH\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b71871954c9eae2bb556c257e5763e761f41876\nparent 8ad31f9aa3111e079dd5024e8f6b069abb564b81\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1487684196 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1487684240 +0100\n\nFix segfault crash when shutdown the GUI in disablewallet mode\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ad31f9aa3111e079dd5024e8f6b069abb564b81"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "be79a67990e5bb2ce248d0581f112c8a125b314c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52",
        "patch": "@@ -518,7 +518,10 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n         // Propagate cleared model to child objects\n         rpcConsole->setClientModel(nullptr);\n #ifdef ENABLE_WALLET\n-        walletFrame->setClientModel(nullptr);\n+        if (walletFrame)\n+        {\n+            walletFrame->setClientModel(nullptr);\n+        }\n #endif // ENABLE_WALLET\n         unitDisplayControl->setOptionsModel(nullptr);\n     }"
      }
    ]
  },
  {
    "sha": "8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTI4ZDZhYzZkNTFmZTFhMmQ2ZmM5ZjBlMjU5MWM1NTAzNzk4YmQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T14:13:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T14:13:17Z"
      },
      "message": "Merge #9817: Fix segfault crash when shutdown the GUI in disablewallet mode\n\n312c4f1 Fix segfault crash when shutdown the GUI in disablewallet mode (Jonas Schnelli)",
      "tree": {
        "sha": "5b71871954c9eae2bb556c257e5763e761f41876",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b71871954c9eae2bb556c257e5763e761f41876"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrEr9AAoJEHSBCwEjRsmmLYMIAIHGHdoPqXjZVsDoyWW+vN8J\ncY4Wvpq7qhe59lEPf4X9G7eh/s5FojNdItsQnXcnJR5CfubZgwdoG8q+kJEKZCHR\nJFBkWRI+IjP888IMEg9PRWVgTCD4SHYfWv57fIu5v8GpTzMtQfPckR2vDH2WEqJ9\nK9U0ByqgHa+2Pjv5yEOZnsQQm1eAbrS2zjspZOEnhfaVlNAGF8v+o8eYA4/xtLYC\nasMSYQ810qeb/z+Czq/fLoRgCnWqat5+T9dLo2X8eEWOFt02BKrazzS/IcUMmXA+\np4QvwIq6x3xMnXwdAPC/u7BPw9r2ch9+uRXCNwf6u7mEm9YJ0XVkJA4ThFfhvDA=\n=19im\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b71871954c9eae2bb556c257e5763e761f41876\nparent 8ad31f9aa3111e079dd5024e8f6b069abb564b81\nparent 312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487686393 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487686397 +0100\n\nMerge #9817: Fix segfault crash when shutdown the GUI in disablewallet mode\n\n312c4f1 Fix segfault crash when shutdown the GUI in disablewallet mode (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ad31f9aa3111e079dd5024e8f6b069abb564b81"
      },
      {
        "sha": "312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/312c4f10574ccf6dfe0d4ecb3ce928733d3a1e52"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "be79a67990e5bb2ce248d0581f112c8a125b314c",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
        "patch": "@@ -518,7 +518,10 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n         // Propagate cleared model to child objects\n         rpcConsole->setClientModel(nullptr);\n #ifdef ENABLE_WALLET\n-        walletFrame->setClientModel(nullptr);\n+        if (walletFrame)\n+        {\n+            walletFrame->setClientModel(nullptr);\n+        }\n #endif // ENABLE_WALLET\n         unitDisplayControl->setOptionsModel(nullptr);\n     }"
      }
    ]
  },
  {
    "sha": "5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjA1NTZkMDMyNmJmNmY0ZDM0ZjdlOGI5YWRhN2JiYjA5Y2IxZGYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T16:08:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T16:08:37Z"
      },
      "message": "Merge #9727: Remove fallbacks for boost_filesystem < v3\n\n056aba2 Remove fallbacks for boost_filesystem < v3 (Wladimir J. van der Laan)",
      "tree": {
        "sha": "b028bb365e8d83b1eb2449468731c4af150a015e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b028bb365e8d83b1eb2449468731c4af150a015e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrGYFAAoJEHSBCwEjRsmmy34H/3G8rWjlZcYfFWOemhhdR2Yc\n/wF4a839ihasBzhvpFXHWT8hJcfzTRatsjbbB8/dZ0ZvvjiPu8CN9tc2bIDEKPPb\nVRe1ejwXn84IRkteOatjqrp6PYgI7Ae2poIgMkRrMSOh1Q1lpo2eo62lJVa5P6tZ\nYOuADtrxFiaAzurFvti6sMXathuqTpfsBOlZY6OQyEMztWkvyFuyXodtMAPR4xfg\nTpPkZar1xjR6Hy6Llncx8vmFDxRygBQUtQ5zr2o/9jvlEoBf9mmVOyeRhGx8F3ZS\nXSJnuJKR0ov1IM5y5OdT3CGECiHX+G/hDddq4Al3b0FxVMbYMDKGhyk8JhpHdN0=\n=GeSR\n-----END PGP SIGNATURE-----",
        "payload": "tree b028bb365e8d83b1eb2449468731c4af150a015e\nparent 8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5\nparent 056aba2b4fbdd91a4012aa38743fb8fac56d974b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487693305 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487693317 +0100\n\nMerge #9727: Remove fallbacks for boost_filesystem < v3\n\n056aba2 Remove fallbacks for boost_filesystem < v3 (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5"
      },
      {
        "sha": "056aba2b4fbdd91a4012aa38743fb8fac56d974b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/056aba2b4fbdd91a4012aa38743fb8fac56d974b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/056aba2b4fbdd91a4012aa38743fb8fac56d974b"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 0,
      "deletions": 39
    },
    "files": [
      {
        "sha": "fd3dcac4248ff323199021bfb2e74371a7abdc4f",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "patch": "@@ -37,9 +37,7 @@\n \n #include <boost/filesystem.hpp>\n #include <boost/filesystem/fstream.hpp>\n-#if BOOST_FILESYSTEM_VERSION >= 3\n #include <boost/filesystem/detail/utf8_codecvt_facet.hpp>\n-#endif\n #include <boost/scoped_array.hpp>\n \n #include <QAbstractItemView>\n@@ -67,9 +65,7 @@\n #include <QFontDatabase>\n #endif\n \n-#if BOOST_FILESYSTEM_VERSION >= 3\n static boost::filesystem::detail::utf8_codecvt_facet utf8;\n-#endif\n \n #if defined(Q_OS_MAC)\n extern double NSAppKitVersionNumber;\n@@ -863,7 +859,6 @@ void setClipboard(const QString& str)\n     QApplication::clipboard()->setText(str, QClipboard::Selection);\n }\n \n-#if BOOST_FILESYSTEM_VERSION >= 3\n boost::filesystem::path qstringToBoostPath(const QString &path)\n {\n     return boost::filesystem::path(path.toStdString(), utf8);\n@@ -873,18 +868,6 @@ QString boostPathToQString(const boost::filesystem::path &path)\n {\n     return QString::fromStdString(path.string(utf8));\n }\n-#else\n-#warning Conversion between boost path and QString can use invalid character encoding with boost_filesystem v2 and older\n-boost::filesystem::path qstringToBoostPath(const QString &path)\n-{\n-    return boost::filesystem::path(path.toStdString());\n-}\n-\n-QString boostPathToQString(const boost::filesystem::path &path)\n-{\n-    return QString::fromStdString(path.string());\n-}\n-#endif\n \n QString formatDurationStr(int secs)\n {"
      },
      {
        "sha": "e6d86229796b2e9f72c217364fd6d7872a056b74",
        "filename": "src/test/testutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "patch": "@@ -11,23 +11,5 @@\n #include <boost/filesystem.hpp>\n \n boost::filesystem::path GetTempPath() {\n-#if BOOST_FILESYSTEM_VERSION == 3\n     return boost::filesystem::temp_directory_path();\n-#else\n-    // TODO: remove when we don't support filesystem v2 anymore\n-    boost::filesystem::path path;\n-#ifdef WIN32\n-    char pszPath[MAX_PATH] = \"\";\n-\n-    if (GetTempPathA(MAX_PATH, pszPath))\n-        path = boost::filesystem::path(pszPath);\n-#else\n-    path = boost::filesystem::path(\"/tmp\");\n-#endif\n-    if (path.empty() || !boost::filesystem::is_directory(path)) {\n-        LogPrintf(\"GetTempPath(): failed to find temp path\\n\");\n-        return boost::filesystem::path(\"\");\n-    }\n-    return path;\n-#endif\n }"
      },
      {
        "sha": "8df15a060edbf2c0e8293d16914b8ca494e6d06b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "patch": "@@ -3892,11 +3892,7 @@ bool CWallet::BackupWallet(const std::string& strDest)\n                     pathDest /= strWalletFile;\n \n                 try {\n-#if BOOST_VERSION >= 104000\n                     boost::filesystem::copy_file(pathSrc, pathDest, boost::filesystem::copy_option::overwrite_if_exists);\n-#else\n-                    boost::filesystem::copy_file(pathSrc, pathDest);\n-#endif\n                     LogPrintf(\"copied %s to %s\\n\", strWalletFile, pathDest.string());\n                     return true;\n                 } catch (const boost::filesystem::filesystem_error& e) {"
      }
    ]
  },
  {
    "sha": "bc8fd1228930d13ec47ac4464dd13f6fb0449dc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzhmZDEyMjg5MzBkMTNlYzQ3YWM0NDY0ZGQxM2Y2ZmIwNDQ5ZGM0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-16T22:21:23Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-21T16:12:44Z"
      },
      "message": "Remove harmless read of unusued priority estimates",
      "tree": {
        "sha": "5c882a53e913e7f08b0447178799ee625135244f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c882a53e913e7f08b0447178799ee625135244f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc8fd1228930d13ec47ac4464dd13f6fb0449dc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8fd1228930d13ec47ac4464dd13f6fb0449dc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc8fd1228930d13ec47ac4464dd13f6fb0449dc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8fd1228930d13ec47ac4464dd13f6fb0449dc4/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8f6a1e60f47aa6e7cf79a2d400454ef0d4ebaba0",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc8fd1228930d13ec47ac4464dd13f6fb0449dc4/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc8fd1228930d13ec47ac4464dd13f6fb0449dc4/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=bc8fd1228930d13ec47ac4464dd13f6fb0449dc4",
        "patch": "@@ -482,10 +482,7 @@ void CBlockPolicyEstimator::Read(CAutoFile& filein, int nFileVersion)\n     filein >> nFileBestSeenHeight;\n     feeStats.Read(filein);\n     nBestSeenHeight = nFileBestSeenHeight;\n-    if (nFileVersion < 139900) {\n-        TxConfirmStats priStats;\n-        priStats.Read(filein);\n-    }\n+    // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n }\n \n FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)"
      }
    ]
  },
  {
    "sha": "61a640ea9741e5e76b945699a8332b0a9923339b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWE2NDBlYTk3NDFlNWU3NmI5NDU2OTlhODMzMmIwYTk5MjMzMzli",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T16:50:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T16:51:00Z"
      },
      "message": "Merge #9485: ZMQ example using python3 and asyncio\n\nb471daf Adddress nits, use asyncio signal handling, create_task (Bob McElrath)\n4bb7d1b Add python version checks and 3.4 example (Bob McElrath)\n5406d51 Rewrite to not use Polling wrapper for asyncio, link to python2.7 example (Bob McElrath)\n5ea5368 ZMQ example using python3 and asyncio (Bob McElrath)",
      "tree": {
        "sha": "67a173629c55a02c5852697901c6c0f8af888955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67a173629c55a02c5852697901c6c0f8af888955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61a640ea9741e5e76b945699a8332b0a9923339b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrG/0AAoJEHSBCwEjRsmm2W0IALdAcipqbfZ30li/7AaUBmzK\nA58LLVz311kSIF4gieXlEXE8qmWUznSlevFa7TCH/lGr1Ly31/7KnyoW6Os797Hj\n2tJ0UN+mHO4aWO0vIhq0G9uCmWSxMKAi1XxLYYbiyse0yFwwikQAYEGkf7gYp4Bt\nqLP0Jyn56POVMvPle9yQ6fZjsw2roj32ISDK+1sFQ/+8+v55qcrA6u4msY1bw4AL\nS19bXKT/id2Tlm19CKQ3aEkEJRhV7wMWhdJjxyA0tO23mWVLiCLHa+4UVsrxmSvp\nLJ+wTsZDk812XwpapeyyZ8Gwe9FbbCmIjIKK7weo0GmpyBkTPqOjbxSF/zsxruA=\n=7lfd\n-----END PGP SIGNATURE-----",
        "payload": "tree 67a173629c55a02c5852697901c6c0f8af888955\nparent 5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2\nparent b471daf85b07d0ca072a8d7ec482a25401a67399\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487695854 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487695860 +0100\n\nMerge #9485: ZMQ example using python3 and asyncio\n\nb471daf Adddress nits, use asyncio signal handling, create_task (Bob McElrath)\n4bb7d1b Add python version checks and 3.4 example (Bob McElrath)\n5406d51 Rewrite to not use Polling wrapper for asyncio, link to python2.7 example (Bob McElrath)\n5ea5368 ZMQ example using python3 and asyncio (Bob McElrath)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a640ea9741e5e76b945699a8332b0a9923339b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61a640ea9741e5e76b945699a8332b0a9923339b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a640ea9741e5e76b945699a8332b0a9923339b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2"
      },
      {
        "sha": "b471daf85b07d0ca072a8d7ec482a25401a67399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b471daf85b07d0ca072a8d7ec482a25401a67399",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b471daf85b07d0ca072a8d7ec482a25401a67399"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 158,
      "deletions": 28
    },
    "files": [
      {
        "sha": "ea398a27eacd78001244023534e77a325a6e1d13",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 69,
        "deletions": 28,
        "changes": 97,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61a640ea9741e5e76b945699a8332b0a9923339b/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61a640ea9741e5e76b945699a8332b0a9923339b/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=61a640ea9741e5e76b945699a8332b0a9923339b",
        "patch": "@@ -1,43 +1,84 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+\"\"\"\n+    ZMQ example using python3's asyncio\n+\n+    Bitcoin should be started with the command line arguments:\n+        bitcoind -testnet -daemon \\\n+                -zmqpubhashblock=tcp://127.0.0.1:28332 \\\n+                -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubhashblock=tcp://127.0.0.1:28332\n+\n+    We use the asyncio library here.  `self.handle()` installs itself as a\n+    future at the end of the function.  Since it never returns with the event\n+    loop having an empty stack of futures, this creates an infinite loop.  An\n+    alternative is to wrap the contents of `handle` inside `while True`.\n+\n+    A blocking example using python 2.7 can be obtained from the git history:\n+    https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n+\"\"\"\n+\n import binascii\n+import asyncio\n import zmq\n+import zmq.asyncio\n+import signal\n import struct\n+import sys\n+\n+if not (sys.version_info.major >= 3 and sys.version_info.minor >= 5):\n+    print(\"This example only works with Python 3.5 and greater\")\n+    exit(1)\n \n port = 28332\n \n-zmqContext = zmq.Context()\n-zmqSubSocket = zmqContext.socket(zmq.SUB)\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashblock\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtx\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"rawblock\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"rawtx\")\n-zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n-\n-try:\n-    while True:\n-        msg = zmqSubSocket.recv_multipart()\n-        topic = str(msg[0])\n+class ZMQHandler():\n+    def __init__(self):\n+        self.loop = zmq.asyncio.install()\n+        self.zmqContext = zmq.asyncio.Context()\n+\n+        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n+        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n+\n+    async def handle(self) :\n+        msg = await self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n         body = msg[1]\n         sequence = \"Unknown\"\n         if len(msg[-1]) == 4:\n           msgSequence = struct.unpack('<I', msg[-1])[-1]\n           sequence = str(msgSequence)\n-        if topic == \"hashblock\":\n-            print '- HASH BLOCK ('+sequence+') -'\n-            print binascii.hexlify(body)\n-        elif topic == \"hashtx\":\n-            print '- HASH TX  ('+sequence+') -'\n-            print binascii.hexlify(body)\n-        elif topic == \"rawblock\":\n-            print '- RAW BLOCK HEADER ('+sequence+') -'\n-            print binascii.hexlify(body[:80])\n-        elif topic == \"rawtx\":\n-            print '- RAW TX ('+sequence+') -'\n-            print binascii.hexlify(body)\n-\n-except KeyboardInterrupt:\n-    zmqContext.destroy()\n+        if topic == b\"hashblock\":\n+            print('- HASH BLOCK ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"hashtx\":\n+            print('- HASH TX  ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"rawblock\":\n+            print('- RAW BLOCK HEADER ('+sequence+') -')\n+            print(binascii.hexlify(body[:80]))\n+        elif topic == b\"rawtx\":\n+            print('- RAW TX ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        # schedule ourselves to receive the next message\n+        asyncio.ensure_future(self.handle())\n+\n+    def start(self):\n+        self.loop.add_signal_handler(signal.SIGINT, self.stop)\n+        self.loop.create_task(self.handle())\n+        self.loop.run_forever()\n+\n+    def stop(self):\n+        self.loop.stop()\n+        self.zmqContext.destroy()\n+\n+daemon = ZMQHandler()\n+daemon.start()"
      },
      {
        "sha": "a2ff64b29b77ef9d1e9cfbfc26faa2cedd005bf3",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "added",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61a640ea9741e5e76b945699a8332b0a9923339b/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61a640ea9741e5e76b945699a8332b0a9923339b/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=61a640ea9741e5e76b945699a8332b0a9923339b",
        "patch": "@@ -0,0 +1,89 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+    ZMQ example using python3's asyncio\n+\n+    Bitcoin should be started with the command line arguments:\n+        bitcoind -testnet -daemon \\\n+                -zmqpubhashblock=tcp://127.0.0.1:28332 \\\n+                -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubhashblock=tcp://127.0.0.1:28332\n+\n+    We use the asyncio library here.  `self.handle()` installs itself as a\n+    future at the end of the function.  Since it never returns with the event\n+    loop having an empty stack of futures, this creates an infinite loop.  An\n+    alternative is to wrap the contents of `handle` inside `while True`.\n+\n+    The `@asyncio.coroutine` decorator and the `yield from` syntax found here\n+    was introduced in python 3.4 and has been deprecated in favor of the `async`\n+    and `await` keywords respectively.\n+\n+    A blocking example using python 2.7 can be obtained from the git history:\n+    https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n+\"\"\"\n+\n+import binascii\n+import asyncio\n+import zmq\n+import zmq.asyncio\n+import signal\n+import struct\n+import sys\n+\n+if not (sys.version_info.major >= 3 and sys.version_info.minor >= 4):\n+    print(\"This example only works with Python 3.4 and greater\")\n+    exit(1)\n+\n+port = 28332\n+\n+class ZMQHandler():\n+    def __init__(self):\n+        self.loop = zmq.asyncio.install()\n+        self.zmqContext = zmq.asyncio.Context()\n+\n+        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n+        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n+\n+    @asyncio.coroutine\n+    def handle(self) :\n+        msg = yield from self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        body = msg[1]\n+        sequence = \"Unknown\";\n+        if len(msg[-1]) == 4:\n+          msgSequence = struct.unpack('<I', msg[-1])[-1]\n+          sequence = str(msgSequence)\n+        if topic == b\"hashblock\":\n+            print('- HASH BLOCK ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"hashtx\":\n+            print('- HASH TX  ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"rawblock\":\n+            print('- RAW BLOCK HEADER ('+sequence+') -')\n+            print(binascii.hexlify(body[:80]))\n+        elif topic == b\"rawtx\":\n+            print('- RAW TX ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        # schedule ourselves to receive the next message\n+        asyncio.ensure_future(self.handle())\n+\n+    def start(self):\n+        self.loop.add_signal_handler(signal.SIGINT, self.stop)\n+        self.loop.create_task(self.handle())\n+        self.loop.run_forever()\n+\n+    def stop(self):\n+        self.loop.stop()\n+        self.zmqContext.destroy()\n+\n+daemon = ZMQHandler()\n+daemon.start()"
      }
    ]
  },
  {
    "sha": "b602fe0f7372256bd2bc8c116d23dee3253882f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjAyZmUwZjczNzIyNTZiZDJiYzhjMTE2ZDIzZGVlMzI1Mzg4MmY5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-21T16:56:07Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-21T16:56:07Z"
      },
      "message": "build: warn about variable length arrays",
      "tree": {
        "sha": "430d03c8493bf6abcdd3ce055cda636dac81ec7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/430d03c8493bf6abcdd3ce055cda636dac81ec7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b602fe0f7372256bd2bc8c116d23dee3253882f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b602fe0f7372256bd2bc8c116d23dee3253882f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b602fe0f7372256bd2bc8c116d23dee3253882f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b602fe0f7372256bd2bc8c116d23dee3253882f9/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "61427960141761ef9b32f66f8ce9e3770ac8895c",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b602fe0f7372256bd2bc8c116d23dee3253882f9/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b602fe0f7372256bd2bc8c116d23dee3253882f9/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b602fe0f7372256bd2bc8c116d23dee3253882f9",
        "patch": "@@ -210,6 +210,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wall],[CXXFLAGS=\"$CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wextra],[CXXFLAGS=\"$CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat],[CXXFLAGS=\"$CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wvla],[CXXFLAGS=\"$CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat-security],[CXXFLAGS=\"$CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n \n   ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all"
      }
    ]
  },
  {
    "sha": "874c7363d794c18a3b46d3d2a03f19c88f3a20cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzRjNzM2M2Q3OTRjMThhM2I0NmQzZDJhMDNmMTljODhmM2EyMGNm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-21T17:57:30Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-21T17:57:30Z"
      },
      "message": "Fix pruning test broken by 2 hour manual prune window\n\nRegression happened in 91fb506 Add two hour buffer to manual pruning.",
      "tree": {
        "sha": "6b12cca621b6fd955f3a211b7f091b86ebf2f39a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b12cca621b6fd955f3a211b7f091b86ebf2f39a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/874c7363d794c18a3b46d3d2a03f19c88f3a20cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/874c7363d794c18a3b46d3d2a03f19c88f3a20cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/874c7363d794c18a3b46d3d2a03f19c88f3a20cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/874c7363d794c18a3b46d3d2a03f19c88f3a20cf/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8528d6ac6d51fe1a2d6fc9f0e2591c5503798bd5"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1e6d4191869fa263e2b7b9f039fc45f40343dc57",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/874c7363d794c18a3b46d3d2a03f19c88f3a20cf/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/874c7363d794c18a3b46d3d2a03f19c88f3a20cf/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=874c7363d794c18a3b46d3d2a03f19c88f3a20cf",
        "patch": "@@ -18,6 +18,11 @@\n \n MIN_BLOCKS_TO_KEEP = 288\n \n+# Rescans start at the earliest block up to 2 hours before a key timestamp, so\n+# the manual prune RPC avoids pruning blocks in the same window to be\n+# compatible with pruning based on key creation time.\n+RESCAN_WINDOW = 2 * 60 * 60\n+\n \n def calc_usage(blockdir):\n     return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n@@ -239,7 +244,7 @@ def manual_test(self, node_number, use_timestamp):\n \n         def height(index):\n             if use_timestamp:\n-                return node.getblockheader(node.getblockhash(index))[\"time\"]\n+                return node.getblockheader(node.getblockhash(index))[\"time\"] + RESCAN_WINDOW\n             else:\n                 return index\n "
      }
    ]
  },
  {
    "sha": "5628c70f2a44567695e5331fe2293c5b7f35b629",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjI4YzcwZjJhNDQ1Njc2OTVlNTMzMWZlMjI5M2M1YjdmMzViNjI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-21T23:05:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-21T23:05:22Z"
      },
      "message": "Merge #9807: RPC doc fix-ups.\n\n851f6a3 [qa][doc] Correct rpc test options in readme (fanquake)\n41e7219 [trivial] Add tests_config.ini to .gitignore (fanquake)",
      "tree": {
        "sha": "7b87deef63e09079f950023901def88e2cdb3253",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b87deef63e09079f950023901def88e2cdb3253"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5628c70f2a44567695e5331fe2293c5b7f35b629",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYrMeyAAoJEC1/I3LlD+E3fkkH/3olmYBJdt2G1h0CnXrorxCj\nR47+XTjJxjtRBqX2FzOJBLnWTofkbKz9M32X7tmRPk5APSPCUDZtaLS6KAiSStGr\n6hhml31Ow4h4jnorFOQ5FjXzfXaZh+pl+z+jqJ/mF46jjA+FqtRTtHQ+RV8JhJSS\na7Ba9es/hoN7uMW7ZMKRLNUrp6HhWeS84JFc+piptj85HSj3WDT7USl95y+2aLNW\nmteXycZczYuUf7WfKQmKr1YfyszvF/EVu0HsZZ8IsPhGjzgCA+XBMXHgRuNdYawq\nx6bl4uhE9T+uirhV1+bxPuFtf0ADUykINKIQtbNDCr4VXsHmoI0KqQZGeYud3i0=\n=ZwBv\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b87deef63e09079f950023901def88e2cdb3253\nparent 61a640ea9741e5e76b945699a8332b0a9923339b\nparent 851f6a39f10379bfdb27e18c87b322b942abe914\nauthor MarcoFalke <falke.marco@gmail.com> 1487718302 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487718322 +0100\n\nMerge #9807: RPC doc fix-ups.\n\n851f6a3 [qa][doc] Correct rpc test options in readme (fanquake)\n41e7219 [trivial] Add tests_config.ini to .gitignore (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5628c70f2a44567695e5331fe2293c5b7f35b629",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5628c70f2a44567695e5331fe2293c5b7f35b629",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5628c70f2a44567695e5331fe2293c5b7f35b629/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61a640ea9741e5e76b945699a8332b0a9923339b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a640ea9741e5e76b945699a8332b0a9923339b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61a640ea9741e5e76b945699a8332b0a9923339b"
      },
      {
        "sha": "851f6a39f10379bfdb27e18c87b322b942abe914",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851f6a39f10379bfdb27e18c87b322b942abe914",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/851f6a39f10379bfdb27e18c87b322b942abe914"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "479889cb78ab255cd875c1ace1a265c0bbe27377",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5628c70f2a44567695e5331fe2293c5b7f35b629/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5628c70f2a44567695e5331fe2293c5b7f35b629/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=5628c70f2a44567695e5331fe2293c5b7f35b629",
        "patch": "@@ -102,6 +102,7 @@ linux-coverage-build\n linux-build\n win32-build\n qa/pull-tester/tests_config.py\n+qa/pull-tester/tests_config.ini\n qa/cache/*\n \n !src/leveldb*/Makefile"
      },
      {
        "sha": "f4dce7af5c3d27eb9db958d15ee123b2e2581bd6",
        "filename": "qa/README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5628c70f2a44567695e5331fe2293c5b7f35b629/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5628c70f2a44567695e5331fe2293c5b7f35b629/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=5628c70f2a44567695e5331fe2293c5b7f35b629",
        "patch": "@@ -39,12 +39,12 @@ Run the regression test suite with\n \n Run all possible tests with\n \n-    qa/pull-tester/rpc-tests.py -extended\n+    qa/pull-tester/rpc-tests.py --extended\n \n By default, tests will be run in parallel. To specify how many jobs to run,\n-append `-parallel=n` (default n=4).\n+append `--jobs=n` (default n=4).\n \n-If you want to create a basic coverage report for the rpc test suite, append `--coverage`.\n+If you want to create a basic coverage report for the RPC test suite, append `--coverage`.\n \n Possible options, which apply to each individual test run:\n \n@@ -83,5 +83,5 @@ killall bitcoind\n Writing tests\n =============\n You are encouraged to write tests for new or existing features.\n-Further information about the test framework and individual rpc\n+Further information about the test framework and individual RPC\n tests is found in [qa/rpc-tests](/qa/rpc-tests)."
      }
    ]
  },
  {
    "sha": "eaea2bbb411c5d878e991d9082ca037628efce42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWVhMmJiYjQxMWM1ZDg3OGU5OTFkOTA4MmNhMDM3NjI4ZWZjZTQy",
    "commit": {
      "author": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2017-02-19T17:23:04Z"
      },
      "committer": {
        "name": "gubatron",
        "email": "gubatron@gmail.com",
        "date": "2017-02-22T03:44:23Z"
      },
      "message": "Removed redundant parameter from mempool.PrioritiseTransaction\n\n(Also made the `const uint256 hash` parameter a `const uint256& hash` as suggested by @sdaftuar)",
      "tree": {
        "sha": "ba5a1225fb6f2ab064a20ed2babd235674aa89e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba5a1225fb6f2ab064a20ed2babd235674aa89e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eaea2bbb411c5d878e991d9082ca037628efce42",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaea2bbb411c5d878e991d9082ca037628efce42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eaea2bbb411c5d878e991d9082ca037628efce42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaea2bbb411c5d878e991d9082ca037628efce42/comments",
    "author": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gubatron",
      "id": 163977,
      "node_id": "MDQ6VXNlcjE2Mzk3Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/163977?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gubatron",
      "html_url": "https://github.com/gubatron",
      "followers_url": "https://api.github.com/users/gubatron/followers",
      "following_url": "https://api.github.com/users/gubatron/following{/other_user}",
      "gists_url": "https://api.github.com/users/gubatron/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gubatron/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gubatron/subscriptions",
      "organizations_url": "https://api.github.com/users/gubatron/orgs",
      "repos_url": "https://api.github.com/users/gubatron/repos",
      "events_url": "https://api.github.com/users/gubatron/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gubatron/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "390a39bb5cf4eca849a75802f92a361a9bcac310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/390a39bb5cf4eca849a75802f92a361a9bcac310",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/390a39bb5cf4eca849a75802f92a361a9bcac310"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5113b8ec1d1ece05d867e96abef1b695123e94ce",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaea2bbb411c5d878e991d9082ca037628efce42/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaea2bbb411c5d878e991d9082ca037628efce42/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=eaea2bbb411c5d878e991d9082ca037628efce42",
        "patch": "@@ -282,7 +282,7 @@ UniValue prioritisetransaction(const JSONRPCRequest& request)\n     uint256 hash = ParseHashStr(request.params[0].get_str(), \"txid\");\n     CAmount nAmount = request.params[2].get_int64();\n \n-    mempool.PrioritiseTransaction(hash, request.params[0].get_str(), request.params[1].get_real(), nAmount);\n+    mempool.PrioritiseTransaction(hash, request.params[1].get_real(), nAmount);\n     return true;\n }\n "
      },
      {
        "sha": "942a6fcce7777710aaafa5b0fd6508aca1b8ac25",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaea2bbb411c5d878e991d9082ca037628efce42/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaea2bbb411c5d878e991d9082ca037628efce42/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=eaea2bbb411c5d878e991d9082ca037628efce42",
        "patch": "@@ -920,7 +920,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256& hash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);\n@@ -940,7 +940,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string str\n             }\n         }\n     }\n-    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n+    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", hash.ToString(), dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const"
      },
      {
        "sha": "a7ecb64390b1eea96c6c0dcf6bb56c368c488468",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaea2bbb411c5d878e991d9082ca037628efce42/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaea2bbb411c5d878e991d9082ca037628efce42/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=eaea2bbb411c5d878e991d9082ca037628efce42",
        "patch": "@@ -555,7 +555,7 @@ class CTxMemPool\n     bool HasNoInputsOf(const CTransaction& tx) const;\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n-    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n+    void PrioritiseTransaction(const uint256& hash, double dPriorityDelta, const CAmount& nFeeDelta);\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const;\n     void ClearPrioritisation(const uint256 hash);\n "
      },
      {
        "sha": "f4609a5cd22a58f67f1e3b4047f855e3be809b9c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eaea2bbb411c5d878e991d9082ca037628efce42/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eaea2bbb411c5d878e991d9082ca037628efce42/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=eaea2bbb411c5d878e991d9082ca037628efce42",
        "patch": "@@ -4211,7 +4211,7 @@ bool LoadMempool(void)\n \n             CAmount amountdelta = nFeeDelta;\n             if (amountdelta) {\n-                mempool.PrioritiseTransaction(tx->GetHash(), tx->GetHash().ToString(), prioritydummy, amountdelta);\n+                mempool.PrioritiseTransaction(tx->GetHash(), prioritydummy, amountdelta);\n             }\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n@@ -4232,7 +4232,7 @@ bool LoadMempool(void)\n         file >> mapDeltas;\n \n         for (const auto& i : mapDeltas) {\n-            mempool.PrioritiseTransaction(i.first, i.first.ToString(), prioritydummy, i.second);\n+            mempool.PrioritiseTransaction(i.first, prioritydummy, i.second);\n         }\n     } catch (const std::exception& e) {\n         LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());"
      }
    ]
  },
  {
    "sha": "3333ad0b63ecff582dbab8c593f1a496ffc2bbdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzMzYWQwYjYzZWNmZjU4MmRiYWI4YzU5M2YxYTQ5NmZmYzJiYmRk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-22T09:50:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-22T09:49:02Z"
      },
      "message": "qa: Set correct path for binaries in rpc tests",
      "tree": {
        "sha": "320eb69f86b9c1d93a9c0b84def9282c8519d254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/320eb69f86b9c1d93a9c0b84def9282c8519d254"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3333ad0b63ecff582dbab8c593f1a496ffc2bbdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3333ad0b63ecff582dbab8c593f1a496ffc2bbdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3333ad0b63ecff582dbab8c593f1a496ffc2bbdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3333ad0b63ecff582dbab8c593f1a496ffc2bbdd/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ad31f9aa3111e079dd5024e8f6b069abb564b81"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d57e8556e1ec8dac7b0e68b16ed0b5010c9b3f96",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3333ad0b63ecff582dbab8c593f1a496ffc2bbdd/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3333ad0b63ecff582dbab8c593f1a496ffc2bbdd/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=3333ad0b63ecff582dbab8c593f1a496ffc2bbdd",
        "patch": "@@ -219,7 +219,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n \n     tests_dir = src_dir + '/qa/rpc-tests/'\n \n-    flags = [\"--srcdir=\" + src_dir] + args\n+    flags = [\"--srcdir={}/src\".format(build_dir)] + args\n     flags.append(\"--cachedir=%s/qa/cache\" % build_dir)\n \n     if enable_coverage:"
      }
    ]
  },
  {
    "sha": "92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmRkNmM4ZGZkZDY0MTdkMmU3YzBjYTk4NDZiNWMwZGNhNTBmNWQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T10:48:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T10:48:45Z"
      },
      "message": "Merge #9815: Trivial: use EXIT_ codes instead of magic numbers\n\na87d02a use EXIT_ codes instead of magic numbers (Marko Bencun)",
      "tree": {
        "sha": "8313ba54e12e39876ba87205635fa39fe07f1a34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8313ba54e12e39876ba87205635fa39fe07f1a34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrWyNAAoJEHSBCwEjRsmmhwQH/2s8vjFWTNy1n6xUVnF5rIYg\nmgPJ1NUrHo1JfvuM+qvTkGNIYJvOJuB2J5Obcu5UsnJ9fVHnCxqsfM7eglq/KRbw\ntm0QAKNLP5pGIXzf5AgVwhXu5GJR7qbty/2n/pdcyFMyBpvDJyd76mhdIDkKRt4E\nNIHhlx//Dris+mqhyyTL/WVro3lgMVq4WEzWE3ivN91BjPNSfzpsTV8PRE9hC/sN\nD6vmAoIG2WqUxr2ztP5HV0BNkH5k1SjtqwTxXF35ZVA11dWqFWg/1G7Yrp2JRQOs\nvY6oYdDCwaWOJvohUg2LS+VsjPIkIsT7g/he8zIHvKJJnDsiFQa0zJw600SCdgg=\n=L9W5\n-----END PGP SIGNATURE-----",
        "payload": "tree 8313ba54e12e39876ba87205635fa39fe07f1a34\nparent 5628c70f2a44567695e5331fe2293c5b7f35b629\nparent a87d02adad2d566927136694dc0d7b202d72691d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487760515 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487760525 +0100\n\nMerge #9815: Trivial: use EXIT_ codes instead of magic numbers\n\na87d02a use EXIT_ codes instead of magic numbers (Marko Bencun)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5628c70f2a44567695e5331fe2293c5b7f35b629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5628c70f2a44567695e5331fe2293c5b7f35b629",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5628c70f2a44567695e5331fe2293c5b7f35b629"
      },
      {
        "sha": "a87d02adad2d566927136694dc0d7b202d72691d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a87d02adad2d566927136694dc0d7b202d72691d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a87d02adad2d566927136694dc0d7b202d72691d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a3d02afcdbe1a657b02e4dde14a6d10582a8fecd",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8",
        "patch": "@@ -136,17 +136,17 @@ bool AppInit(int argc, char* argv[])\n         if (!AppInitBasicSetup())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(1);\n+            exit(EXIT_FAILURE);\n         }\n         if (!AppInitParameterInteraction())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(1);\n+            exit(EXIT_FAILURE);\n         }\n         if (!AppInitSanityChecks())\n         {\n             // InitError will have been called with detailed error, which ends up on console\n-            exit(1);\n+            exit(EXIT_FAILURE);\n         }\n         if (GetBoolArg(\"-daemon\", false))\n         {"
      },
      {
        "sha": "51fc6ae0ba3a2ccfac23e8236a490d798fd69853",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8",
        "patch": "@@ -156,12 +156,12 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn, CTxMemPo\n \n void Shutdown(void* parg)\n {\n-  exit(0);\n+  exit(EXIT_SUCCESS);\n }\n \n void StartShutdown()\n {\n-  exit(0);\n+  exit(EXIT_SUCCESS);\n }\n \n bool ShutdownRequested()"
      }
    ]
  },
  {
    "sha": "5b583efaa7218bc1a7e3e722e132d09b28521fb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjU4M2VmYWE3MjE4YmMxYTdlM2U3MjJlMTMyZDA5YjI4NTIxZmI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T11:14:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T11:14:37Z"
      },
      "message": "Merge #9805: Add seed.btc.petertodd.org to mainnet DNS seeds\n\n3b4dd2a Add seed.btc.petertodd.org to mainnet DNS seeds (Peter Todd)",
      "tree": {
        "sha": "d10b33f59b32b204f35873ab3e9384dea1451562",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d10b33f59b32b204f35873ab3e9384dea1451562"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b583efaa7218bc1a7e3e722e132d09b28521fb8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrXKdAAoJEHSBCwEjRsmmmzQH/23nKE/vhOG1n53UxPAjyPa2\nNWJuouZMpbPQ3IBQ8t7yYdGxKDfmNQXos+N+KNcxF61r8Ibjg2bh9iEsi6vjSrzk\n6BhfgPtfolWdgDBm+NcP3W26rHJClHU0KJJCSucOfLRV28sXFd2Bk3FEBiNKT9Ng\nP8WCqrMwlmDUwVkTsbpkJpeALtN2/vh1ek9V+0mjXupp8iixDSG2WOCodTLZ5K7y\nx0mtYQ9l7A0eyy2tL2mCSs89iDW7Saydi8GR/9Un+FWfxXPyYiA2VAxekXImmE7d\nGv1NgZWBPijvSx8ry+EDSvVrOFNWvOlounSAVrg23A2iOD3pt+CYM+9X5sbdpZ4=\n=OO9E\n-----END PGP SIGNATURE-----",
        "payload": "tree d10b33f59b32b204f35873ab3e9384dea1451562\nparent 92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8\nparent 3b4dd2a6768536be3a7db21353f43ba614c17377\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487762070 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487762077 +0100\n\nMerge #9805: Add seed.btc.petertodd.org to mainnet DNS seeds\n\n3b4dd2a Add seed.btc.petertodd.org to mainnet DNS seeds (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b583efaa7218bc1a7e3e722e132d09b28521fb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b583efaa7218bc1a7e3e722e132d09b28521fb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b583efaa7218bc1a7e3e722e132d09b28521fb8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92dd6c8dfdd6417d2e7c0ca9846b5c0dca50f5d8"
      },
      {
        "sha": "3b4dd2a6768536be3a7db21353f43ba614c17377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b4dd2a6768536be3a7db21353f43ba614c17377",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b4dd2a6768536be3a7db21353f43ba614c17377"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8c3855882921905d1ba610abe49b1769807a50f8",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b583efaa7218bc1a7e3e722e132d09b28521fb8/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b583efaa7218bc1a7e3e722e132d09b28521fb8/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=5b583efaa7218bc1a7e3e722e132d09b28521fb8",
        "patch": "@@ -125,6 +125,7 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n+        vSeeds.push_back(CDNSSeedData(\"petertodd.org\", \"seed.btc.petertodd.org\", true)); // Peter Todd, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);"
      }
    ]
  },
  {
    "sha": "a8c57510381581eb38a9a28c676a6fe0ff796969",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGM1NzUxMDM4MTU4MWViMzhhOWEyOGM2NzZhNmZlMGZmNzk2OTY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T11:18:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T11:18:38Z"
      },
      "message": "Merge #9801: Removed redundant parameter from mempool.PrioritiseTransaction\n\neaea2bb Removed redundant parameter from mempool.PrioritiseTransaction (gubatron)",
      "tree": {
        "sha": "cdff148fcae1cdadcf8f6a2e8d24d3a3c7c0e053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cdff148fcae1cdadcf8f6a2e8d24d3a3c7c0e053"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8c57510381581eb38a9a28c676a6fe0ff796969",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrXOOAAoJEHSBCwEjRsmmOWkIAMr2nBJkdSuK7Y/1M2WapLcD\nxLBCygXRKzXD0P9iPS/8dB4E5tCvQpGDn/8IjPFsjWLHHfvWSI5e6+ciU/KiFzw5\nF0WsHpF9CK4zgegTS/BpXAio8otsURd6Od0R5DuCt/AR6UHfMDjb6letiRynduP1\n1DeoMc/favzKsAYHw2mlkB8hksbCoSKVG8l6RvWyN8nCzev4hXGQk8hsAcOpVf5O\nc555DUdqtdRr/H/mllsUIXZO4yIewy14kupF0iZVhhlu0pBHosUHAJCdnzZu7jyY\nLNsg0iGvO9+sLcnAzItTFI3/ZORpK2Y4Me4Hr+2TcDYw9Tym8QIHNDCke219AF4=\n=GE4e\n-----END PGP SIGNATURE-----",
        "payload": "tree cdff148fcae1cdadcf8f6a2e8d24d3a3c7c0e053\nparent 5b583efaa7218bc1a7e3e722e132d09b28521fb8\nparent eaea2bbb411c5d878e991d9082ca037628efce42\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487762309 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487762318 +0100\n\nMerge #9801: Removed redundant parameter from mempool.PrioritiseTransaction\n\neaea2bb Removed redundant parameter from mempool.PrioritiseTransaction (gubatron)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8c57510381581eb38a9a28c676a6fe0ff796969",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8c57510381581eb38a9a28c676a6fe0ff796969",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8c57510381581eb38a9a28c676a6fe0ff796969/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b583efaa7218bc1a7e3e722e132d09b28521fb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b583efaa7218bc1a7e3e722e132d09b28521fb8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b583efaa7218bc1a7e3e722e132d09b28521fb8"
      },
      {
        "sha": "eaea2bbb411c5d878e991d9082ca037628efce42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eaea2bbb411c5d878e991d9082ca037628efce42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eaea2bbb411c5d878e991d9082ca037628efce42"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7708771d004cba76ab3ad70cdb9de30a49a1e161",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8c57510381581eb38a9a28c676a6fe0ff796969/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8c57510381581eb38a9a28c676a6fe0ff796969/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a8c57510381581eb38a9a28c676a6fe0ff796969",
        "patch": "@@ -282,7 +282,7 @@ UniValue prioritisetransaction(const JSONRPCRequest& request)\n     uint256 hash = ParseHashStr(request.params[0].get_str(), \"txid\");\n     CAmount nAmount = request.params[2].get_int64();\n \n-    mempool.PrioritiseTransaction(hash, request.params[0].get_str(), request.params[1].get_real(), nAmount);\n+    mempool.PrioritiseTransaction(hash, request.params[1].get_real(), nAmount);\n     return true;\n }\n "
      },
      {
        "sha": "942a6fcce7777710aaafa5b0fd6508aca1b8ac25",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8c57510381581eb38a9a28c676a6fe0ff796969/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8c57510381581eb38a9a28c676a6fe0ff796969/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a8c57510381581eb38a9a28c676a6fe0ff796969",
        "patch": "@@ -920,7 +920,7 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256& hash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);\n@@ -940,7 +940,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const std::string str\n             }\n         }\n     }\n-    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n+    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", hash.ToString(), dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const"
      },
      {
        "sha": "a7ecb64390b1eea96c6c0dcf6bb56c368c488468",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8c57510381581eb38a9a28c676a6fe0ff796969/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8c57510381581eb38a9a28c676a6fe0ff796969/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a8c57510381581eb38a9a28c676a6fe0ff796969",
        "patch": "@@ -555,7 +555,7 @@ class CTxMemPool\n     bool HasNoInputsOf(const CTransaction& tx) const;\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n-    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n+    void PrioritiseTransaction(const uint256& hash, double dPriorityDelta, const CAmount& nFeeDelta);\n     void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const;\n     void ClearPrioritisation(const uint256 hash);\n "
      },
      {
        "sha": "fef0d94fffc829d0b1efb5c6f3f890dbd5121bd4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8c57510381581eb38a9a28c676a6fe0ff796969/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8c57510381581eb38a9a28c676a6fe0ff796969/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a8c57510381581eb38a9a28c676a6fe0ff796969",
        "patch": "@@ -4211,7 +4211,7 @@ bool LoadMempool(void)\n \n             CAmount amountdelta = nFeeDelta;\n             if (amountdelta) {\n-                mempool.PrioritiseTransaction(tx->GetHash(), tx->GetHash().ToString(), prioritydummy, amountdelta);\n+                mempool.PrioritiseTransaction(tx->GetHash(), prioritydummy, amountdelta);\n             }\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n@@ -4232,7 +4232,7 @@ bool LoadMempool(void)\n         file >> mapDeltas;\n \n         for (const auto& i : mapDeltas) {\n-            mempool.PrioritiseTransaction(i.first, i.first.ToString(), prioritydummy, i.second);\n+            mempool.PrioritiseTransaction(i.first, prioritydummy, i.second);\n         }\n     } catch (const std::exception& e) {\n         LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());"
      }
    ]
  },
  {
    "sha": "4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjE4M2QzM2YzNjQ3NzE0YmI2ZWIzOWUxZDFjM2U1NGQyYjJhYWVj",
    "commit": {
      "author": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-02-22T07:12:37Z"
      },
      "committer": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-02-22T11:32:47Z"
      },
      "message": "Remove block file location upgrade code\n\nAn effort to reduce the size of AppInitMain().\n\nThe removed code upgrades the location of the block files when\nupgrading to 0.8. 0.8 seems to be the oldest version still in use.",
      "tree": {
        "sha": "f41586cd8db0d4eaec423a012e973cc3c100a342",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f41586cd8db0d4eaec423a012e973cc3c100a342"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5628c70f2a44567695e5331fe2293c5b7f35b629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5628c70f2a44567695e5331fe2293c5b7f35b629",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5628c70f2a44567695e5331fe2293c5b7f35b629"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 1,
      "deletions": 26
    },
    "files": [
      {
        "sha": "cf4b75a849e9d7ebee4ea2426f3f89f3e7ab1480",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 26,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec",
        "patch": "@@ -1353,32 +1353,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fReindex = GetBoolArg(\"-reindex\", false);\n     bool fReindexChainState = GetBoolArg(\"-reindex-chainstate\", false);\n \n-    // Upgrading to 0.8; hard-link the old blknnnn.dat files into /blocks/\n-    boost::filesystem::path blocksDir = GetDataDir() / \"blocks\";\n-    if (!boost::filesystem::exists(blocksDir))\n-    {\n-        boost::filesystem::create_directories(blocksDir);\n-        bool linked = false;\n-        for (unsigned int i = 1; i < 10000; i++) {\n-            boost::filesystem::path source = GetDataDir() / strprintf(\"blk%04u.dat\", i);\n-            if (!boost::filesystem::exists(source)) break;\n-            boost::filesystem::path dest = blocksDir / strprintf(\"blk%05u.dat\", i-1);\n-            try {\n-                boost::filesystem::create_hard_link(source, dest);\n-                LogPrintf(\"Hardlinked %s -> %s\\n\", source.string(), dest.string());\n-                linked = true;\n-            } catch (const boost::filesystem::filesystem_error& e) {\n-                // Note: hardlink creation failing is not a disaster, it just means\n-                // blocks will get re-downloaded from peers.\n-                LogPrintf(\"Error hardlinking blk%04u.dat: %s\\n\", i, e.what());\n-                break;\n-            }\n-        }\n-        if (linked)\n-        {\n-            fReindex = true;\n-        }\n-    }\n+    boost::filesystem::create_directories(GetDataDir() / \"blocks\");\n \n     // cache size calculations\n     int64_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);"
      }
    ]
  },
  {
    "sha": "ba7220b5e82fcfbb7a4912a49e563944a428ab91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTcyMjBiNWU4MmZjZmJiN2E0OTEyYTQ5ZTU2Mzk0NGE0MjhhYjkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T11:42:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T11:43:11Z"
      },
      "message": "Merge #9773: Return errors from importmulti if complete rescans are not successful\n\ne2e2f4c Return errors from importmulti if complete rescans are not successful (Russell Yanofsky)",
      "tree": {
        "sha": "e02699dda0c3dde604769b02a480dfa3c24f4c83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e02699dda0c3dde604769b02a480dfa3c24f4c83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba7220b5e82fcfbb7a4912a49e563944a428ab91",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrXlPAAoJEHSBCwEjRsmmV+QH/0KJH1uLD5laDU2U+QyPNZg4\nNtflIV7BTGT+/Sj/DdvEC4xHpCFWEf+0sNUhD3lNWqgRsPkw4D3qXD99+l8TCJmD\nVhjAGFrKHpSpTbWEMcV6y3RBzLK49LJacRSs6Qp1HorwC8cX2hDiUJE5c/g37xo0\nKFdXMxmSbyXL4LQ1OdJ+vma4J6O4tKyCjcZ7y094hYhceAIwqQTHPL+KN/HJrHsC\n6wBHbDdm2XDu7Unr190b39RucoTQfByAZYz0+OfdUcUkkpnmQWdSoH1h34lsG+6e\nx4Pt6vGbPWuwPmUy5a1I38d3aVTFfg2D9MUbE2Cb1Hn6h6g+DvNQgURTRcn29XA=\n=Wr/j\n-----END PGP SIGNATURE-----",
        "payload": "tree e02699dda0c3dde604769b02a480dfa3c24f4c83\nparent a8c57510381581eb38a9a28c676a6fe0ff796969\nparent e2e2f4c856363bbb0e3b5ba4df225f3754c3db39\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487763775 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487763791 +0100\n\nMerge #9773: Return errors from importmulti if complete rescans are not successful\n\ne2e2f4c Return errors from importmulti if complete rescans are not successful (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7220b5e82fcfbb7a4912a49e563944a428ab91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba7220b5e82fcfbb7a4912a49e563944a428ab91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7220b5e82fcfbb7a4912a49e563944a428ab91/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8c57510381581eb38a9a28c676a6fe0ff796969",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8c57510381581eb38a9a28c676a6fe0ff796969",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8c57510381581eb38a9a28c676a6fe0ff796969"
      },
      {
        "sha": "e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2e2f4c856363bbb0e3b5ba4df225f3754c3db39"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 114,
      "deletions": 13
    },
    "files": [
      {
        "sha": "e84b1a7281401da7b2276030116ba61af7284715",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ba7220b5e82fcfbb7a4912a49e563944a428ab91",
        "patch": "@@ -3331,7 +3331,7 @@ void PruneOneBlockFile(const int fileNumber)\n }\n \n \n-void UnlinkPrunedFiles(std::set<int>& setFilesToPrune)\n+void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune)\n {\n     for (std::set<int>::iterator it = setFilesToPrune.begin(); it != setFilesToPrune.end(); ++it) {\n         CDiskBlockPos pos(*it, 0);\n@@ -4163,6 +4163,11 @@ std::string CBlockFileInfo::ToString() const\n     return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast));\n }\n \n+CBlockFileInfo* GetBlockFileInfo(size_t n)\n+{\n+    return &vinfoBlockFile.at(n);\n+}\n+\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "9c606f2419409f7ec35bd50544bdd3d006e16e27",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ba7220b5e82fcfbb7a4912a49e563944a428ab91",
        "patch": "@@ -299,10 +299,15 @@ double GuessVerificationProgress(const ChainTxData& data, CBlockIndex* pindex);\n  */\n void FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPruneAfterHeight);\n \n+/**\n+ *  Mark one block file as pruned.\n+ */\n+void PruneOneBlockFile(const int fileNumber);\n+\n /**\n  *  Actually unlink the specified files\n  */\n-void UnlinkPrunedFiles(std::set<int>& setFilesToPrune);\n+void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n@@ -562,6 +567,9 @@ static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n \n+/** Get block file info entry for one block file */\n+CBlockFileInfo* GetBlockFileInfo(size_t n);\n+\n /** Dump the mempool to disk. */\n void DumpMempool();\n "
      },
      {
        "sha": "8a9e7d1444ad18e932edf6d1730550a2ba4956a8",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ba7220b5e82fcfbb7a4912a49e563944a428ab91",
        "patch": "@@ -1074,11 +1074,32 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     if (fRescan && fRunScan && requests.size()) {\n         CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n-\n+        CBlockIndex* scannedRange = nullptr;\n         if (pindex) {\n-            pwalletMain->ScanForWalletTransactions(pindex, true);\n+            scannedRange = pwalletMain->ScanForWalletTransactions(pindex, true);\n             pwalletMain->ReacceptWalletTransactions();\n         }\n+\n+        if (!scannedRange || scannedRange->nHeight > pindex->nHeight) {\n+            std::vector<UniValue> results = response.getValues();\n+            response.clear();\n+            response.setArray();\n+            size_t i = 0;\n+            for (const UniValue& request : requests.getValues()) {\n+                // If key creation date is within the successfully scanned\n+                // range, or if the import result already has an error set, let\n+                // the result stand unmodified. Otherwise replace the result\n+                // with an error message.\n+                if (GetImportTimestamp(request, now) - 7200 >= scannedRange->GetBlockTimeMax() || results.at(i).exists(\"error\")) {\n+                    response.push_back(results.at(i));\n+                } else {\n+                    UniValue result = UniValue(UniValue::VOBJ);\n+                    result.pushKV(\"success\", UniValue(false));\n+                    result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, strprintf(\"Failed to rescan before time %d, transactions may be missing.\", scannedRange->GetBlockTimeMax())));\n+                    response.push_back(std::move(result));\n+                }\n+            }\n+        }\n     }\n \n     return response;"
      },
      {
        "sha": "d32e8ba06adb04c3e422c892060bd9afe5ec213e",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=ba7220b5e82fcfbb7a4912a49e563944a428ab91",
        "patch": "@@ -9,10 +9,16 @@\n #include <utility>\n #include <vector>\n \n+#include \"rpc/server.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"validation.h\"\n #include \"wallet/test/wallet_test_fixture.h\"\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+\n+extern UniValue importmulti(const JSONRPCRequest& request);\n \n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n #define RUN_TESTS 100\n@@ -355,4 +361,58 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     empty_wallet();\n }\n \n+BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+\n+    // Cap last block file size, and mine new block in a new block file.\n+    CBlockIndex* oldTip = chainActive.Tip();\n+    GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n+    CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+    CBlockIndex* newTip = chainActive.Tip();\n+\n+    // Verify ScanForWalletTransactions picks up transactions in both the old\n+    // and new block files.\n+    {\n+        CWallet wallet;\n+        LOCK(wallet.cs_wallet);\n+        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n+    }\n+\n+    // Prune the older block file.\n+    PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n+    UnlinkPrunedFiles({oldTip->GetBlockPos().nFile});\n+\n+    // Verify ScanForWalletTransactions only picks transactions in the new block\n+    // file.\n+    {\n+        CWallet wallet;\n+        LOCK(wallet.cs_wallet);\n+        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        BOOST_CHECK_EQUAL(newTip, wallet.ScanForWalletTransactions(oldTip));\n+        BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n+    }\n+\n+    {\n+        CWallet wallet;\n+        ::pwalletMain = &wallet;\n+        UniValue key;\n+        key.setObject();\n+        key.pushKV(\"scriptPubKey\", HexStr(GetScriptForRawPubKey(coinbaseKey.GetPubKey())));\n+        key.pushKV(\"timestamp\", 0);\n+        key.pushKV(\"internal\", UniValue(true));\n+        UniValue keys;\n+        keys.setArray();\n+        keys.push_back(key);\n+        JSONRPCRequest request;\n+        request.params.setArray();\n+        request.params.push_back(keys);\n+\n+        UniValue response = importmulti(request);\n+        BOOST_CHECK_EQUAL(response.write(), strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Failed to rescan before time %d, transactions may be missing.\\\"}}]\", newTip->GetBlockTimeMax()));\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "63501b04be409862681aa6e563d74c138896e4f0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ba7220b5e82fcfbb7a4912a49e563944a428ab91",
        "patch": "@@ -1545,10 +1545,14 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n  * Scan the block chain (starting in pindexStart) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n+ *\n+ * Returns pointer to the first block in the last contiguous range that was\n+ * successfully scanned.\n+ *\n  */\n-int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n+CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n {\n-    int ret = 0;\n+    CBlockIndex* ret = nullptr;\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n \n@@ -1570,12 +1574,15 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n                 ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((GuessVerificationProgress(chainParams.TxData(), pindex) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n \n             CBlock block;\n-            ReadBlockFromDisk(block, pindex, Params().GetConsensus());\n-            int posInBlock;\n-            for (posInBlock = 0; posInBlock < (int)block.vtx.size(); posInBlock++)\n-            {\n-                if (AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate))\n-                    ret++;\n+            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+                for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n+                    AddToWalletIfInvolvingMe(*block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                }\n+                if (!ret) {\n+                    ret = pindex;\n+                }\n+            } else {\n+                ret = nullptr;\n             }\n             pindex = chainActive.Next(pindex);\n             if (GetTime() >= nNow + 60) {"
      },
      {
        "sha": "98e4fb87b91073381079b735fcda381ac5f0e4a8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7220b5e82fcfbb7a4912a49e563944a428ab91/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ba7220b5e82fcfbb7a4912a49e563944a428ab91",
        "patch": "@@ -788,7 +788,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock) override;\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n-    int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n+    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n     std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);"
      }
    ]
  },
  {
    "sha": "1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWZjOTljNGRjNGQyZjEzN2I4MGNhMTI4ZTZmMGY2ZTlhZDM1M2Nk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T12:00:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T12:02:10Z"
      },
      "message": "Merge #9819: Remove harmless read of unusued priority estimates\n\nbc8fd12 Remove harmless read of unusued priority estimates (Alex Morcos)",
      "tree": {
        "sha": "0e7726c3079cdeadd690b158c104d63d0b342b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e7726c3079cdeadd690b158c104d63d0b342b85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrX3CAAoJEHSBCwEjRsmm3/IIAKivVaNGrHa7iY7/SeaRvIXq\nY0xvu+gq+oGbdR4prTHRqTSA675ZCdTSWsPKaFN6kzXK37eGnlawnwkX1ElsSii7\nzgWRcr3omdgmpq0gwTi/H1RY/R0wK3gSpjf0Ox/v70tC8vykhVmUGCfpwDjGGS4a\nEaz9R0Lhd5GFakj2Kyl/pdwxCRjhD+RsWJDXsCrgA3aQk3OnQuH1cwPrQAEyW9KQ\nn4LKWwJTGOnk3PE5LiIMhgrcHFpIV+6V8VPWV6WvNvHrGGB1+YbMYjgFtQAX8PB8\n0QDxNjCPuJ8soVxlNI1FgVrjPRioIb/1vg5m0DfPWJdviz3fZJXR/KhDowewV3k=\n=Frqg\n-----END PGP SIGNATURE-----",
        "payload": "tree 0e7726c3079cdeadd690b158c104d63d0b342b85\nparent ba7220b5e82fcfbb7a4912a49e563944a428ab91\nparent bc8fd1228930d13ec47ac4464dd13f6fb0449dc4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487764853 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487764930 +0100\n\nMerge #9819: Remove harmless read of unusued priority estimates\n\nbc8fd12 Remove harmless read of unusued priority estimates (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba7220b5e82fcfbb7a4912a49e563944a428ab91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7220b5e82fcfbb7a4912a49e563944a428ab91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba7220b5e82fcfbb7a4912a49e563944a428ab91"
      },
      {
        "sha": "bc8fd1228930d13ec47ac4464dd13f6fb0449dc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc8fd1228930d13ec47ac4464dd13f6fb0449dc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc8fd1228930d13ec47ac4464dd13f6fb0449dc4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8f6a1e60f47aa6e7cf79a2d400454ef0d4ebaba0",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd",
        "patch": "@@ -482,10 +482,7 @@ void CBlockPolicyEstimator::Read(CAutoFile& filein, int nFileVersion)\n     filein >> nFileBestSeenHeight;\n     feeStats.Read(filein);\n     nBestSeenHeight = nFileBestSeenHeight;\n-    if (nFileVersion < 139900) {\n-        TxConfirmStats priStats;\n-        priStats.Read(filein);\n-    }\n+    // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n }\n \n FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)"
      }
    ]
  },
  {
    "sha": "bed5b30a5622782b35d0d28fccde979e188901f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWQ1YjMwYTU2MjI3ODJiMzVkMGQyOGZjY2RlOTc5ZTE4ODkwMWYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T12:03:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T12:03:42Z"
      },
      "message": "Merge #9711: [Trivial] Remove incorrect help message from gettxoutproof()\n\n9949ebf [Trivial] Remove incorrect help message from gettxoutproof() (John Newbery)",
      "tree": {
        "sha": "58095ff933bc29a04ffc3f8c58f12a503d84f698",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58095ff933bc29a04ffc3f8c58f12a503d84f698"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bed5b30a5622782b35d0d28fccde979e188901f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrX4eAAoJEHSBCwEjRsmm7UQH/28SaFeuKTJeKKOvlv6cDbuL\nG/Rxmo3RIu5edC1dyVheMYNkGauPqrz53VUYNKEKz0m/kXYtnpE/KSVQ7onMITNs\nFtkFvZfPQP3NQlC3myBU3k9eZygHqQzK1TUjxfao0AMqmQgqN06/5LmCb+8i0Gg+\n5fckmgAdVtb1QrRTKU6tJiKvWpwotI+cTua2/Xntzs8utadD7J0SxrTzEyCJ1akI\nEVah3b0gEblLKw2zwMHQk3WOof1H6S5xAB3n0E/gBJ8nqOFTh5ezfxKfVdakRZCf\nn6qZDdafC+n0zxpnMoUjpWZ4pvPaA/JS1iiHNe1TbjwDpilaJ2gveX1qiqWEtDI=\n=+RR8\n-----END PGP SIGNATURE-----",
        "payload": "tree 58095ff933bc29a04ffc3f8c58f12a503d84f698\nparent 1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd\nparent 9949ebfa6a548260858df429f4d0e716e0a26065\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487765017 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487765022 +0100\n\nMerge #9711: [Trivial] Remove incorrect help message from gettxoutproof()\n\n9949ebf [Trivial] Remove incorrect help message from gettxoutproof() (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bed5b30a5622782b35d0d28fccde979e188901f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bed5b30a5622782b35d0d28fccde979e188901f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bed5b30a5622782b35d0d28fccde979e188901f1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1efc99c4dc4d2f137b80ca128e6f0f6e9ad353cd"
      },
      {
        "sha": "9949ebfa6a548260858df429f4d0e716e0a26065",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9949ebfa6a548260858df429f4d0e716e0a26065",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9949ebfa6a548260858df429f4d0e716e0a26065"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bf16f27498f8778dfa573568cdaf8f0c80a2ec2f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bed5b30a5622782b35d0d28fccde979e188901f1/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bed5b30a5622782b35d0d28fccde979e188901f1/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bed5b30a5622782b35d0d28fccde979e188901f1",
        "patch": "@@ -245,7 +245,6 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n             \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n             \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n             \"specify the block in which the transaction is included manually (by blockhash).\\n\"\n-            \"\\nReturn the raw transaction data.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txids\\\"       (string) A json array of txids to filter\\n\"\n             \"    [\\n\""
      }
    ]
  },
  {
    "sha": "9829c54de2725037ee0702306cbaa99fc9aa1826",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODI5YzU0ZGUyNzI1MDM3ZWUwNzAyMzA2Y2JhYTk5ZmM5YWExODI2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-22T18:33:22Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-22T18:37:35Z"
      },
      "message": "build: force a c++ standard to be specified\n\nNewer compilers may switch to newer standards by default. For example, gcc6\nuses std=gnu++14 by default.",
      "tree": {
        "sha": "34159e34bfbc44151210f13675f088a748802ea8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34159e34bfbc44151210f13675f088a748802ea8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9829c54de2725037ee0702306cbaa99fc9aa1826",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9829c54de2725037ee0702306cbaa99fc9aa1826",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9829c54de2725037ee0702306cbaa99fc9aa1826",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9829c54de2725037ee0702306cbaa99fc9aa1826/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f147cee3b117f80b22544976385e267b26f46dd9",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9829c54de2725037ee0702306cbaa99fc9aa1826/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9829c54de2725037ee0702306cbaa99fc9aa1826/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=9829c54de2725037ee0702306cbaa99fc9aa1826",
        "patch": "@@ -57,16 +57,22 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n         [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n         [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n         [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n+  m4_if([$4], [], [ax_cxx_compile_cxx$1_try_default=true],\n+        [$4], [default], [ax_cxx_compile_cxx$1_try_default=true],\n+        [$4], [nodefault], [ax_cxx_compile_cxx$1_try_default=false],\n+        [m4_fatal([invalid fourth argument `$4' to AX_CXX_COMPILE_STDCXX])])\n   AC_LANG_PUSH([C++])dnl\n   ac_success=no\n+\n+  m4_if([$4], [nodefault], [], [dnl\n   AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n   ax_cv_cxx_compile_cxx$1,\n   [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n     [ax_cv_cxx_compile_cxx$1=yes],\n     [ax_cv_cxx_compile_cxx$1=no])])\n   if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n     ac_success=yes\n-  fi\n+  fi])\n \n   m4_if([$2], [noext], [], [dnl\n   if test x$ac_success = xno; then"
      },
      {
        "sha": "370d91689891fdc0d52304f7e49fd05b4fb2fc54",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9829c54de2725037ee0702306cbaa99fc9aa1826/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9829c54de2725037ee0702306cbaa99fc9aa1826/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9829c54de2725037ee0702306cbaa99fc9aa1826",
        "patch": "@@ -55,7 +55,7 @@ case $host in\n   ;;\n esac\n dnl Require C++11 compiler (no GNU extensions)\n-AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n+AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n dnl Check if -latomic is required for <std::atomic>\n CHECK_ATOMIC\n "
      }
    ]
  },
  {
    "sha": "fa4cd2e998e0ebebe283a6243f7f752123a105ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRjZDJlOTk4ZTBlYmViZTI4M2E2MjQzZjdmNzUyMTIzYTEwNWFi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-22T10:29:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-23T02:05:43Z"
      },
      "message": "qa: Check return code when stopping nodes\n\nThis includes work by jnewbery",
      "tree": {
        "sha": "691fa6bf7ffa07cc0676bba2d5fe21ae6854e08f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/691fa6bf7ffa07cc0676bba2d5fe21ae6854e08f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4cd2e998e0ebebe283a6243f7f752123a105ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4cd2e998e0ebebe283a6243f7f752123a105ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4cd2e998e0ebebe283a6243f7f752123a105ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4cd2e998e0ebebe283a6243f7f752123a105ab/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ad31f9aa3111e079dd5024e8f6b069abb564b81"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 15,
      "deletions": 27
    },
    "files": [
      {
        "sha": "8d2bc73c0cce7a46aabe4d24766929f80afd4c53",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa4cd2e998e0ebebe283a6243f7f752123a105ab",
        "patch": "@@ -469,7 +469,9 @@ def run_test(self):\n         # locked wallet test\n         self.nodes[1].encryptwallet(\"test\")\n         self.nodes.pop(1)\n-        stop_nodes(self.nodes)\n+        stop_node(self.nodes[0], 0)\n+        stop_node(self.nodes[1], 2)\n+        stop_node(self.nodes[2], 3)\n \n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "1010c54aa5c224812c69f43f19df3975d8978e95",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=fa4cd2e998e0ebebe283a6243f7f752123a105ab",
        "patch": "@@ -35,11 +35,9 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n-        try:\n-            pid = bitcoind_processes[0].pid\n-            assert_equal(set(get_bind_addrs(pid)), set(expected))\n-        finally:\n-            stop_nodes(self.nodes)\n+        pid = bitcoind_processes[0].pid\n+        assert_equal(set(get_bind_addrs(pid)), set(expected))\n+        stop_nodes(self.nodes)\n \n     def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n@@ -48,13 +46,10 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n-        try:\n-            # connect to node through non-loopback interface\n-            node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n-            node.getnetworkinfo()\n-        finally:\n-            node = None # make sure connection will be garbage collected and closed\n-            stop_nodes(self.nodes)\n+        # connect to node through non-loopback interface\n+        node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+        node.getnetworkinfo()\n+        stop_nodes(self.nodes)\n \n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux"
      },
      {
        "sha": "ec151c2a65d2da592fa6677c68333a78840544e6",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa4cd2e998e0ebebe283a6243f7f752123a105ab",
        "patch": "@@ -375,28 +375,19 @@ def stop_node(node, i):\n         node.stop()\n     except http.client.CannotSendRequest as e:\n         print(\"WARN: Unable to stop node: \" + repr(e))\n-    bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+    return_code = bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+    assert_equal(return_code, 0)\n     del bitcoind_processes[i]\n \n def stop_nodes(nodes):\n-    for node in nodes:\n-        try:\n-            node.stop()\n-        except http.client.CannotSendRequest as e:\n-            print(\"WARN: Unable to stop node: \" + repr(e))\n-    del nodes[:] # Emptying array closes connections as a side effect\n-    wait_bitcoinds()\n+    for i, node in enumerate(nodes):\n+        stop_node(node, i)\n+    assert not bitcoind_processes.values() # All connections must be gone now\n \n def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)\n \n-def wait_bitcoinds():\n-    # Wait for all bitcoinds to cleanly exit\n-    for bitcoind in bitcoind_processes.values():\n-        bitcoind.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-    bitcoind_processes.clear()\n-\n def connect_nodes(from_connection, node_num):\n     ip_port = \"127.0.0.1:\"+str(p2p_port(node_num))\n     from_connection.addnode(ip_port, \"onetry\")"
      }
    ]
  },
  {
    "sha": "205830a37b7ffa4f8fa306e5c9eafcee3777fa68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDU4MzBhMzdiN2ZmYTRmOGZhMzA2ZTVjOWVhZmNlZTM3NzdmYTY4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-21T16:56:26Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-23T06:06:04Z"
      },
      "message": "build: add --enable-werror option\n\nThis turns some compiler warnings into errors. Useful for c-i.",
      "tree": {
        "sha": "d9f0cc4a4cae528d40417b54b2e755479688992e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9f0cc4a4cae528d40417b54b2e755479688992e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/205830a37b7ffa4f8fa306e5c9eafcee3777fa68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/205830a37b7ffa4f8fa306e5c9eafcee3777fa68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/205830a37b7ffa4f8fa306e5c9eafcee3777fa68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/205830a37b7ffa4f8fa306e5c9eafcee3777fa68/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b602fe0f7372256bd2bc8c116d23dee3253882f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b602fe0f7372256bd2bc8c116d23dee3253882f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b602fe0f7372256bd2bc8c116d23dee3253882f9"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7a02237df75d1d074654d87457a151708b57c7f9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/205830a37b7ffa4f8fa306e5c9eafcee3777fa68/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/205830a37b7ffa4f8fa306e5c9eafcee3777fa68/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=205830a37b7ffa4f8fa306e5c9eafcee3777fa68",
        "patch": "@@ -192,6 +192,13 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n+# Turn warnings into errors\n+AC_ARG_ENABLE([werror],\n+    [AS_HELP_STRING([--enable-werror],\n+                    [Treat certain compiler warnings as errors (default is no)])],\n+    [enable_werror=$enableval],\n+    [enable_werror=no])\n+\n AC_LANG_PUSH([C++])\n AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n \n@@ -206,6 +213,14 @@ if test \"x$enable_debug\" = xyes; then\n     fi\n fi\n \n+ERROR_CXXFLAGS=\n+if test \"x$enable_werror\" = \"xyes\"; then\n+  if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n+    AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n+  fi\n+  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n+fi\n+\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wall],[CXXFLAGS=\"$CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wextra],[CXXFLAGS=\"$CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n@@ -1067,6 +1082,7 @@ AC_SUBST(BITCOIN_CLI_NAME)\n AC_SUBST(BITCOIN_TX_NAME)\n \n AC_SUBST(RELDFLAGS)\n+AC_SUBST(ERROR_CXXFLAGS)\n AC_SUBST(HARDENED_CXXFLAGS)\n AC_SUBST(HARDENED_CPPFLAGS)\n AC_SUBST(HARDENED_LDFLAGS)\n@@ -1156,6 +1172,7 @@ echo \"  with test     = $use_tests\"\n echo \"  with bench    = $use_bench\"\n echo \"  with upnp     = $use_upnp\"\n echo \"  debug enabled = $enable_debug\"\n+echo \"  werror        = $enable_werror\"\n echo \n echo \"  target os     = $TARGET_OS\"\n echo \"  build os      = $BUILD_OS\""
      },
      {
        "sha": "e8d22313dca33d8ac6adff107e72f8cfd53325be",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/205830a37b7ffa4f8fa306e5c9eafcee3777fa68/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/205830a37b7ffa4f8fa306e5c9eafcee3777fa68/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=205830a37b7ffa4f8fa306e5c9eafcee3777fa68",
        "patch": "@@ -5,7 +5,7 @@\n DIST_SUBDIRS = secp256k1 univalue\n \n AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n-AM_CXXFLAGS = $(HARDENED_CXXFLAGS)\n+AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS)\n AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n EXTRA_LIBRARIES =\n "
      }
    ]
  },
  {
    "sha": "d14555de3de9128f3e1d061c51e00dc560513978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTQ1NTVkZTNkZTkxMjhmM2UxZDA2MWM1MWUwMGRjNTYwNTEzOTc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-23T09:38:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-23T09:38:26Z"
      },
      "message": "Merge #9820: Fix pruning test broken by 2 hour manual prune window\n\n874c736 Fix pruning test broken by 2 hour manual prune window (Russell Yanofsky)",
      "tree": {
        "sha": "9000cd6543ce9d15366a88138ca76681d3b8664e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9000cd6543ce9d15366a88138ca76681d3b8664e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d14555de3de9128f3e1d061c51e00dc560513978",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrq2SAAoJEHSBCwEjRsmmrZ4IAIEIUmZzLoi8XrjwkHqAior5\np4Nuh2i+QdWGgc62dPSDBz2DFBjlLan1j4USsJ2wd6Nvgq/zk8YnjdFQWkX8zi4o\nZiuyRup0iUN24m8qylSjocBufo7sJcrCrCELaQ6YkNUPBnIB2xhhWatLP41z0xvQ\n42hz3rYfYtmbVzLSAX9b6B31ZLm5asByZSdQ62PaGCD75kdgcTSB0L1qGgtR6QbK\nQJkJBVyIj0R6SGK9G6GUpnYLYRMt0NtuL06cEHktfGJWdKOMUHiC97pTOSk7qznV\n3ipt2p9okq4ZPxQ1g/ZXDJMpxp+wR9mkIBYXvPP+hBYfROlOfRQipfD/wJlqxMg=\n=9o3K\n-----END PGP SIGNATURE-----",
        "payload": "tree 9000cd6543ce9d15366a88138ca76681d3b8664e\nparent bed5b30a5622782b35d0d28fccde979e188901f1\nparent 874c7363d794c18a3b46d3d2a03f19c88f3a20cf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487842689 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487842706 +0100\n\nMerge #9820: Fix pruning test broken by 2 hour manual prune window\n\n874c736 Fix pruning test broken by 2 hour manual prune window (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d14555de3de9128f3e1d061c51e00dc560513978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d14555de3de9128f3e1d061c51e00dc560513978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d14555de3de9128f3e1d061c51e00dc560513978/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bed5b30a5622782b35d0d28fccde979e188901f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bed5b30a5622782b35d0d28fccde979e188901f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bed5b30a5622782b35d0d28fccde979e188901f1"
      },
      {
        "sha": "874c7363d794c18a3b46d3d2a03f19c88f3a20cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/874c7363d794c18a3b46d3d2a03f19c88f3a20cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/874c7363d794c18a3b46d3d2a03f19c88f3a20cf"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1e6d4191869fa263e2b7b9f039fc45f40343dc57",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d14555de3de9128f3e1d061c51e00dc560513978/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d14555de3de9128f3e1d061c51e00dc560513978/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=d14555de3de9128f3e1d061c51e00dc560513978",
        "patch": "@@ -18,6 +18,11 @@\n \n MIN_BLOCKS_TO_KEEP = 288\n \n+# Rescans start at the earliest block up to 2 hours before a key timestamp, so\n+# the manual prune RPC avoids pruning blocks in the same window to be\n+# compatible with pruning based on key creation time.\n+RESCAN_WINDOW = 2 * 60 * 60\n+\n \n def calc_usage(blockdir):\n     return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n@@ -239,7 +244,7 @@ def manual_test(self, node_number, use_timestamp):\n \n         def height(index):\n             if use_timestamp:\n-                return node.getblockheader(node.getblockhash(index))[\"time\"]\n+                return node.getblockheader(node.getblockhash(index))[\"time\"] + RESCAN_WINDOW\n             else:\n                 return index\n "
      }
    ]
  },
  {
    "sha": "1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDJhNTdlOWZkMmNmYzBkODJkOTc3MGQ3YmNkY2M2MTQ2M2JiYzc0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-23T09:40:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-23T09:40:47Z"
      },
      "message": "Merge #9824: qa: Check return code when stopping nodes\n\nfa4cd2e qa: Check return code when stopping nodes (MarcoFalke)",
      "tree": {
        "sha": "16bda4483262f3349145bfdef1704b61488afc60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16bda4483262f3349145bfdef1704b61488afc60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYrq4fAAoJEHSBCwEjRsmm3QIIAJ1px/QXxJIE0+fDY/uzxFpP\n/AlgsSXy19RAnNJ01KT5nRntRDGzXbJRsbbxsm3V1bEENu0Gpu8S1VjP0lA2EREv\n2x6z7dE+Q0sVhdnguOY4ujlOlIsYZyMxA/zcl+kN6nwp/MsfsWieJ55XxNwpHwJk\nuzPUQ0X1YAQCghcLNPQKdTwJhCCX/lYgON4sQpI8D14GrSQy7anGw4K1ySF/jE5o\nNq9LcgnlQ9PiYSG1ssXMnguGiUI3YNEsU1T6Wi4a2x9WEeYvo5DWLvp0zGSPRwZZ\nEXdKVzrhVuWD5WCXqaQs7uEZFInbY2VYrP6neElXGZXrYmCpreYthBFJIylKRDM=\n=m54W\n-----END PGP SIGNATURE-----",
        "payload": "tree 16bda4483262f3349145bfdef1704b61488afc60\nparent d14555de3de9128f3e1d061c51e00dc560513978\nparent fa4cd2e998e0ebebe283a6243f7f752123a105ab\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487842844 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487842847 +0100\n\nMerge #9824: qa: Check return code when stopping nodes\n\nfa4cd2e qa: Check return code when stopping nodes (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d14555de3de9128f3e1d061c51e00dc560513978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d14555de3de9128f3e1d061c51e00dc560513978",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d14555de3de9128f3e1d061c51e00dc560513978"
      },
      {
        "sha": "fa4cd2e998e0ebebe283a6243f7f752123a105ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4cd2e998e0ebebe283a6243f7f752123a105ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4cd2e998e0ebebe283a6243f7f752123a105ab"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 15,
      "deletions": 27
    },
    "files": [
      {
        "sha": "8d2bc73c0cce7a46aabe4d24766929f80afd4c53",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74",
        "patch": "@@ -469,7 +469,9 @@ def run_test(self):\n         # locked wallet test\n         self.nodes[1].encryptwallet(\"test\")\n         self.nodes.pop(1)\n-        stop_nodes(self.nodes)\n+        stop_node(self.nodes[0], 0)\n+        stop_node(self.nodes[1], 2)\n+        stop_node(self.nodes[2], 3)\n \n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "1010c54aa5c224812c69f43f19df3975d8978e95",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74",
        "patch": "@@ -35,11 +35,9 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n-        try:\n-            pid = bitcoind_processes[0].pid\n-            assert_equal(set(get_bind_addrs(pid)), set(expected))\n-        finally:\n-            stop_nodes(self.nodes)\n+        pid = bitcoind_processes[0].pid\n+        assert_equal(set(get_bind_addrs(pid)), set(expected))\n+        stop_nodes(self.nodes)\n \n     def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n@@ -48,13 +46,10 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n-        try:\n-            # connect to node through non-loopback interface\n-            node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n-            node.getnetworkinfo()\n-        finally:\n-            node = None # make sure connection will be garbage collected and closed\n-            stop_nodes(self.nodes)\n+        # connect to node through non-loopback interface\n+        node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+        node.getnetworkinfo()\n+        stop_nodes(self.nodes)\n \n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux"
      },
      {
        "sha": "ec151c2a65d2da592fa6677c68333a78840544e6",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74",
        "patch": "@@ -375,28 +375,19 @@ def stop_node(node, i):\n         node.stop()\n     except http.client.CannotSendRequest as e:\n         print(\"WARN: Unable to stop node: \" + repr(e))\n-    bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+    return_code = bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+    assert_equal(return_code, 0)\n     del bitcoind_processes[i]\n \n def stop_nodes(nodes):\n-    for node in nodes:\n-        try:\n-            node.stop()\n-        except http.client.CannotSendRequest as e:\n-            print(\"WARN: Unable to stop node: \" + repr(e))\n-    del nodes[:] # Emptying array closes connections as a side effect\n-    wait_bitcoinds()\n+    for i, node in enumerate(nodes):\n+        stop_node(node, i)\n+    assert not bitcoind_processes.values() # All connections must be gone now\n \n def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)\n \n-def wait_bitcoinds():\n-    # Wait for all bitcoinds to cleanly exit\n-    for bitcoind in bitcoind_processes.values():\n-        bitcoind.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-    bitcoind_processes.clear()\n-\n def connect_nodes(from_connection, node_num):\n     ip_port = \"127.0.0.1:\"+str(p2p_port(node_num))\n     from_connection.addnode(ip_port, \"onetry\")"
      }
    ]
  },
  {
    "sha": "e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjhjMjY2ZjNkNTZkMWE3OGJiNzliZWE0OGJjZTNkYzhlZjI5ZTZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-23T09:48:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-23T09:48:46Z"
      },
      "message": "Merge #9789: build: add --enable-werror and warn on vla's\n\n205830a build: add --enable-werror option (Cory Fields)\nb602fe0 build: warn about variable length arrays (Cory Fields)",
      "tree": {
        "sha": "62885b4a3cb6ead618d8c20a2ad7fe3efa7e839f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62885b4a3cb6ead618d8c20a2ad7fe3efa7e839f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEbBAABCgAGBQJYrq/+AAoJEHSBCwEjRsmmHdEH9R1ctmA85P6eDUcgAgntaHbn\nU/YaqAlgVGgonvRlG7nT181HonyhmWOXztePLnfHI40CN8zIZfJDlmyhPvkhoKlR\n8QEGXqYqU6UoSTfL+S+D4u3/kBZ5ZnJ+Jrzi8WyFeh+pCN8np4fno0rwpApaR6SV\nDhoTB+By6NcFcHS/tIMZLkM8SHGDp66Me78+wqkRKIFtxQsRdfpnCJeqP4yYr+ID\nUlnQ65nRq/um3K4ZRZiJpt+hAeQPyyCBu0B1BmFgo70kzsmYKVfwNv5s8CX0W4tb\nK6gv36li9CXZAkzTmZHDyEMIwUPH48FYD07dC6dw2M9ZtA5gqT3AFpYaPzcMRA==\n=FLyF\n-----END PGP SIGNATURE-----",
        "payload": "tree 62885b4a3cb6ead618d8c20a2ad7fe3efa7e839f\nparent 1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74\nparent 205830a37b7ffa4f8fa306e5c9eafcee3777fa68\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487843291 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487843326 +0100\n\nMerge #9789: build: add --enable-werror and warn on vla's\n\n205830a build: add --enable-werror option (Cory Fields)\nb602fe0 build: warn about variable length arrays (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2a57e9fd2cfc0d82d9770d7bcdcc61463bbc74"
      },
      {
        "sha": "205830a37b7ffa4f8fa306e5c9eafcee3777fa68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/205830a37b7ffa4f8fa306e5c9eafcee3777fa68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/205830a37b7ffa4f8fa306e5c9eafcee3777fa68"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 19,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7a02237df75d1d074654d87457a151708b57c7f9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e",
        "patch": "@@ -192,6 +192,13 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n+# Turn warnings into errors\n+AC_ARG_ENABLE([werror],\n+    [AS_HELP_STRING([--enable-werror],\n+                    [Treat certain compiler warnings as errors (default is no)])],\n+    [enable_werror=$enableval],\n+    [enable_werror=no])\n+\n AC_LANG_PUSH([C++])\n AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n \n@@ -206,10 +213,19 @@ if test \"x$enable_debug\" = xyes; then\n     fi\n fi\n \n+ERROR_CXXFLAGS=\n+if test \"x$enable_werror\" = \"xyes\"; then\n+  if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n+    AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n+  fi\n+  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n+fi\n+\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wall],[CXXFLAGS=\"$CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wextra],[CXXFLAGS=\"$CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat],[CXXFLAGS=\"$CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wvla],[CXXFLAGS=\"$CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat-security],[CXXFLAGS=\"$CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n \n   ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n@@ -1066,6 +1082,7 @@ AC_SUBST(BITCOIN_CLI_NAME)\n AC_SUBST(BITCOIN_TX_NAME)\n \n AC_SUBST(RELDFLAGS)\n+AC_SUBST(ERROR_CXXFLAGS)\n AC_SUBST(HARDENED_CXXFLAGS)\n AC_SUBST(HARDENED_CPPFLAGS)\n AC_SUBST(HARDENED_LDFLAGS)\n@@ -1155,6 +1172,7 @@ echo \"  with test     = $use_tests\"\n echo \"  with bench    = $use_bench\"\n echo \"  with upnp     = $use_upnp\"\n echo \"  debug enabled = $enable_debug\"\n+echo \"  werror        = $enable_werror\"\n echo \n echo \"  target os     = $TARGET_OS\"\n echo \"  build os      = $BUILD_OS\""
      },
      {
        "sha": "e8d22313dca33d8ac6adff107e72f8cfd53325be",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e",
        "patch": "@@ -5,7 +5,7 @@\n DIST_SUBDIRS = secp256k1 univalue\n \n AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n-AM_CXXFLAGS = $(HARDENED_CXXFLAGS)\n+AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS)\n AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n EXTRA_LIBRARIES =\n "
      }
    ]
  },
  {
    "sha": "3f95a806b1cd2f3c944bda7bcc266498a59326e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjk1YTgwNmIxY2QyZjNjOTQ0YmRhN2JjYzI2NjQ5OGE1OTMyNmU0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-01-17T23:34:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-02-23T15:31:04Z"
      },
      "message": "Fix docstrings in qa tests\n\nThis commit fixes the module-level docstrings for the tests and helper\nmodules in qa. Many of these tests were uncommented previously - this\ncommit ensures that every test case has at least a minimum level of\ncommenting.",
      "tree": {
        "sha": "a1370c242d232e14a1c31a8bf203f7236342b953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1370c242d232e14a1c31a8bf203f7236342b953"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f95a806b1cd2f3c944bda7bcc266498a59326e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f95a806b1cd2f3c944bda7bcc266498a59326e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f95a806b1cd2f3c944bda7bcc266498a59326e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f95a806b1cd2f3c944bda7bcc266498a59326e4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61a640ea9741e5e76b945699a8332b0a9923339b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a640ea9741e5e76b945699a8332b0a9923339b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61a640ea9741e5e76b945699a8332b0a9923339b"
      }
    ],
    "stats": {
      "total": 873,
      "additions": 389,
      "deletions": 484
    },
    "files": [
      {
        "sha": "b32d4e2ce08300aa6985874081ec3a8844a7ff5d",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,7 +2,14 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test the abandontransaction RPC.\n+\n+ The abandontransaction RPC marks a transaction and all its in-wallet\n+ descendants as abandoned which allows their inputs to be respent. It can be\n+ used to replace \"stuck\" or evicted transactions. It only works on transactions\n+ which are not included in a block and are not currently in the mempool. It has\n+ no effect on transactions which are already conflicted or abandoned.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "b8dafff161a9135078a36f268e1615aab9855cb0",
        "filename": "qa/rpc-tests/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/assumevalid.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-assumevalid.py\n+\"\"\"Test logic for skipping signature validation on old blocks.\n \n Test logic for skipping signature validation on blocks which we've assumed\n valid (https://github.com/bitcoin/bitcoin/pull/9484)\n@@ -29,7 +28,7 @@\n     - node2 has -assumevalid set to the hash of block 102. Try to sync to\n       block 200. node2 will reject block 102 since it's assumed valid, but it\n       isn't buried by at least two weeks' work.\n-'''\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "ea9c3d73ab85119c0cefb78a7168c4fd226083cb",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,19 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test BIP65 (CHECKLOCKTIMEVERIFY).\n+\n+Connect to a single node.\n+Mine 2 (version 3) blocks (save the coinbases for later).\n+Generate 98 more version 3 blocks, verify the node accepts.\n+Mine 749 version 4 blocks, verify the node accepts.\n+Check that the new CLTV rules are not enforced on the 750th version 4 block.\n+Check that the new CLTV rules are enforced on the 751st version 4 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -20,19 +33,6 @@ def cltv_invalidate(tx):\n     tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n-'''\n-This test is meant to exercise BIP65 (CHECKLOCKTIMEVERIFY)\n-Connect to a single node.\n-Mine 2 (version 3) blocks (save the coinbases for later).\n-Generate 98 more version 3 blocks, verify the node accepts.\n-Mine 749 version 4 blocks, verify the node accepts.\n-Check that the new CLTV rules are not enforced on the 750th version 4 block.\n-Check that the new CLTV rules are enforced on the 751st version 4 block.\n-Mine 199 new version blocks.\n-Mine 1 old-version block.\n-Mine 1 new version block.\n-Mine 1 old version block, see that the node rejects.\n-'''\n \n class BIP65Test(ComparisonTestFramework):\n "
      },
      {
        "sha": "c9d02a98f3f41a42ba4bd34faaf7a879948c6993",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n-#\n+\"\"\"Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "836267ea7f776b4bcf93542ba79abb43ec662f8c",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,18 +2,8 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test activation of the first version bits soft fork.\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import ToHex, NetworkThread\n-from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import *\n-from io import BytesIO\n-import time\n-\n-'''\n-This test is meant to exercise activation of the first version bits soft fork\n This soft fork will activate the following BIPS:\n BIP 68  - nSequence relative lock times\n BIP 112 - CHECKSEQUENCEVERIFY\n@@ -51,7 +41,16 @@\n bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n bip112tx_special - test negative argument to OP_CSV\n-'''\n+\"\"\"\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from io import BytesIO\n+import time\n \n base_relative_locktime = 10\n seq_disable_flag = 1<<31"
      },
      {
        "sha": "74ac393fe900db07bf7ab7919cc19a6da539f667",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test BIP68 implementation\n-#\n+\"\"\"Test BIP68 implementation.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "70d4be3f6987354d89229d670c09612c075398ac",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 18,
        "deletions": 20,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,20 +2,8 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test BIP 9 soft forks.\n \n-from test_framework.blockstore import BlockStore\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n-from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n-from io import BytesIO\n-import time\n-import itertools\n-\n-'''\n-This test is meant to exercise BIP forks\n Connect to a single node.\n regtest lock-in with 108/144 block signalling\n activation after a further 144 blocks\n@@ -26,8 +14,18 @@\n mine a further 143 blocks (LOCKED_IN)\n test that enforcement has not triggered (which triggers ACTIVE)\n test that enforcement has triggered\n-'''\n+\"\"\"\n \n+from test_framework.blockstore import BlockStore\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n+from io import BytesIO\n+import time\n+import itertools\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n \n@@ -225,21 +223,21 @@ def donothing(self, tx):\n         return\n \n     def csv_invalidate(self, tx):\n-        '''Modify the signature in vin 0 of the tx to fail CSV\n+        \"\"\"Modify the signature in vin 0 of the tx to fail CSV\n         Prepends -1 CSV DROP in the scriptSig itself.\n-        '''\n+        \"\"\"\n         tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP] +\n                                       list(CScript(tx.vin[0].scriptSig)))\n \n     def sequence_lock_invalidate(self, tx):\n-        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n-        '''\n+        \"\"\"Modify the nSequence to make it fails once sequence lock rule is\n+        activated (high timespan).\n+        \"\"\"\n         tx.vin[0].nSequence = 0x00FFFFFF\n         tx.nLockTime = 0\n \n     def mtp_invalidate(self, tx):\n-        '''Modify the nLockTime to make it fails once MTP rule is activated\n-        '''\n+        \"\"\"Modify the nLockTime to make it fails once MTP rule is activated.\"\"\"\n         # Disable Sequence lock, Activate nLockTime\n         tx.vin[0].nSequence = 0x90FFFFFF\n         tx.nLockTime = self.last_block_time"
      },
      {
        "sha": "b82ef89395a7e3585fe025049d9084557395f4ce",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 15,
        "deletions": 16,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,19 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test BIP66 (DER SIG).\n+\n+Connect to a single node.\n+Mine 2 (version 2) blocks (save the coinbases for later).\n+Generate 98 more version 2 blocks, verify the node accepts.\n+Mine 749 version 3 blocks, verify the node accepts.\n+Check that the new DERSIG rules are not enforced on the 750th version 3 block.\n+Check that the new DERSIG rules are enforced on the 751st version 3 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -15,10 +28,10 @@\n # A canonical signature consists of: \n # <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n def unDERify(tx):\n-    '''\n+    \"\"\"\n     Make the signature in vin 0 of a tx non-DER-compliant,\n     by adding padding after the S-value.\n-    '''\n+    \"\"\"\n     scriptSig = CScript(tx.vin[0].scriptSig)\n     newscript = []\n     for i in scriptSig:\n@@ -27,20 +40,6 @@ def unDERify(tx):\n         else:\n             newscript.append(i)\n     tx.vin[0].scriptSig = CScript(newscript)\n-    \n-'''\n-This test is meant to exercise BIP66 (DER SIG).\n-Connect to a single node.\n-Mine 2 (version 2) blocks (save the coinbases for later).\n-Generate 98 more version 2 blocks, verify the node accepts.\n-Mine 749 version 3 blocks, verify the node accepts.\n-Check that the new DERSIG rules are not enforced on the 750th version 3 block.\n-Check that the new DERSIG rules are enforced on the 751st version 3 block.\n-Mine 199 new version blocks.\n-Mine 1 old-version block.\n-Mine 1 new version block.\n-Mine 1 old version block, see that the node rejects.\n-'''\n             \n class BIP66Test(ComparisonTestFramework):\n "
      },
      {
        "sha": "fa54bc2749f4de0cae2d471ed117fdf6b6d11525",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test the BIP66 changeover logic\n-#\n+\"\"\"Test the BIP66 changeover logic.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "67b58268402782f8cd79f068aeff558eacca4fcf",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,11 +2,14 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPCs related to blockchainstate.\n \n-#\n-# Test RPC calls related to blockchain state. Tests correspond to code in\n-# rpc/blockchain.cpp.\n-#\n+Test the following RPCs:\n+    - gettxoutsetinfo\n+    - verifychain\n+\n+Tests correspond to code in rpc/blockchain.cpp.\n+\"\"\"\n \n from decimal import Decimal\n \n@@ -23,13 +26,6 @@\n \n \n class BlockchainTest(BitcoinTestFramework):\n-    \"\"\"\n-    Test blockchain-related RPC calls:\n-\n-        - gettxoutsetinfo\n-        - verifychain\n-\n-    \"\"\"\n \n     def __init__(self):\n         super().__init__()"
      },
      {
        "sha": "cc897a32c75a74b537e9655736b98d773d1e1bdd",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the bumpfee RPC.\"\"\"\n \n from segwit import send_to_witness\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "13eac92bbce717a189afa432887f3f20ad771604",
        "filename": "qa/rpc-tests/create_cache.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/create_cache.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,11 +2,12 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Create a blockchain cache.\n \n-#\n-# Helper script to create the cache\n-# (see BitcoinTestFramework.setup_chain)\n-#\n+Creating a cache of the blockchain speeds up test execution when running\n+multiple qa tests. This helper script is executed by rpc-tests when multiple\n+tests are being run in parallel.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n "
      },
      {
        "sha": "5555e96c4465539e4c86aa2f862133c116f3bf78",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,14 +2,14 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test decoding scripts via decodescript RPC command.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import *\n from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n-    \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n \n     def __init__(self):\n         super().__init__()\n@@ -111,7 +111,7 @@ def decodescript_script_pub_key(self):\n         assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n \n     def decoderawtransaction_asm_sighashtype(self):\n-        \"\"\"Tests decoding scripts via RPC command \"decoderawtransaction\".\n+        \"\"\"Test decoding scripts via RPC command \"decoderawtransaction\".\n \n         This test is in with the \"decodescript\" tests because they are testing the same \"asm\" script decodes.\n         \"\"\""
      },
      {
        "sha": "ff7121659b32c4c88f15e0877a196fb74153f48c",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,11 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a node with the -disablewallet option.\n \n-#\n-# Exercise API with -disablewallet.\n-#\n+- Test that validateaddress RPC works when running with -disablewallet\n+- Test that it is not possible to mine to an invalid address.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -24,7 +25,6 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n-        # Check regression: https://github.com/bitcoin/bitcoin/issues/6963#issuecomment-154548880\n         x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n         assert(x['isvalid'] == False)\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')"
      },
      {
        "sha": "c2724ba5df415839bf960691f39a570c36442ea8",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test -alertnotify \n-#\n+\"\"\"Test the -alertnotify option.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "e789641298ea71537e791ea36e0bbf94a5510361",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "b73fea0695a407c2f83a12a1bb8aa217ad1c1a4a",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test longpolling with getblocktemplate.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -22,10 +23,6 @@ def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n-    '''\n-    Test longpolling with getblocktemplate.\n-    '''\n-\n     def __init__(self):\n         super().__init__()\n         self.num_nodes = 4"
      },
      {
        "sha": "3b17dfcfb5d96d1d014721164613cf19c15f86be",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block proposals with getblocktemplate.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -66,9 +67,6 @@ def assert_template(node, tmpl, txlist, expect):\n         raise AssertionError('unexpected: %s' % (rsp,))\n \n class GetBlockTemplateProposalTest(BitcoinTestFramework):\n-    '''\n-    Test block proposals with getblocktemplate.\n-    '''\n \n     def __init__(self):\n         super().__init__()"
      },
      {
        "sha": "14222334a62d3c1903433d089d3ae231ce12fe5c",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,13 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the getchaintips RPC.\n \n-# Exercise the getchaintips API.  We introduce a network split, work\n-# on chains of different lengths, and join the network together again.\n-# This gives us two tips, verify that it works.\n+- introduce a network split\n+- work on chains of different lengths\n+- join the network together again\n+- verify that getchaintips now returns two chain tips.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal"
      },
      {
        "sha": "8f35f0ab8799e017f7437550e916769747452cec",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test rpc http basics\n-#\n+\"\"\"Test the RPC HTTP basics.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "18551caaf708fff34a416c76005461859e4fc67a",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,7 +2,9 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test rescan behavior of importaddress, importpubkey, importprivkey, and\n+\"\"\"Test wallet import RPCs.\n+\n+Test rescan behavior of importaddress, importpubkey, importprivkey, and\n importmulti RPCs with different types of keys and rescan options.\n \n In the first part of the test, node 0 creates an address for each type of"
      },
      {
        "sha": "015336effef3d88c25c555ec7e60c9eed813b8de",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test the importmulti RPC.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "a94112465635a04de7307aa3b11621930929eb91",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test the importprunedfunds and removeprunedfunds RPCs.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "92e65927d571c99172750e2a5043f9bdc1e47d26",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test InvalidateBlock code\n-#\n+\"\"\"Test the invalidateblock RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "eabc0db8df58325aec01794fcf2af2f287ba4240",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,14 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node responses to invalid blocks.\n+\n+In this test we connect to one node over p2p, and test block requests:\n+1) Valid blocks should be requested and become chain tip.\n+2) Invalid block with duplicated transaction should be re-requested.\n+3) Invalid block with bad coinbase value should be rejected and not\n+re-requested.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -10,15 +18,6 @@\n import copy\n import time\n \n-\n-'''\n-In this test we connect to one node over p2p, and test block requests:\n-1) Valid blocks should be requested and become chain tip.\n-2) Invalid block with duplicated transaction should be re-requested.\n-3) Invalid block with bad coinbase value should be rejected and not\n-re-requested.\n-'''\n-\n # Use the ComparisonTestFramework with 1 node: only use --testbinary.\n class InvalidBlockRequestTest(ComparisonTestFramework):\n "
      },
      {
        "sha": "a9ac231f096a9baf8c58396c3e66c70000992aae",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,16 +2,17 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node responses to invalid transactions.\n+\n+In this test we connect to one node over p2p, and test tx requests.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.blocktools import *\n import time\n \n \n-'''\n-In this test we connect to one node over p2p, and test tx requests.\n-'''\n \n # Use the ComparisonTestFramework with 1 node: only use --testbinary.\n class InvalidTxRequestTest(ComparisonTestFramework):"
      },
      {
        "sha": "4b9936a1fd9659382547490f3cb060d1969b43d9",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Exercise the wallet keypool, and interaction with wallet encryption/locking\n+\"\"\"Test the wallet keypool and interaction with wallet encryption/locking.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "88304af5b006a7ead00d004d0bb1e601c6f97860",
        "filename": "qa/rpc-tests/listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listsinceblock.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the listsincelast RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal"
      },
      {
        "sha": "92fb96c8091e1b7b953558cfeb55736862a29fbc",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Exercise the listtransactions API\n+\"\"\"Test the listtransactions API.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "8ea405b4d57802ca833c72c9bda758c2f60397b6",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,18 +2,19 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test nodes responses to having many blocks in flight.\n+\n+In this test we connect to one node over p2p, send it numerous inv's, and\n+compare the resulting number of getdata requests to a max allowed value.  We\n+test for exceeding 128 blocks in flight, which was the limit an 0.9 client will\n+reach. [0.10 clients shouldn't request more than 16 from a single peer.]\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import logging\n \n-'''\n-In this test we connect to one node over p2p, send it numerous inv's, and\n-compare the resulting number of getdata requests to a max allowed value.  We\n-test for exceeding 128 blocks in flight, which was the limit an 0.9 client will\n-reach. [0.10 clients shouldn't request more than 16 from a single peer.]\n-'''\n MAX_REQUESTS = 128\n \n class TestManager(NodeConnCB):"
      },
      {
        "sha": "757aa60afd92fda02bf90a0e90105d8b3a4601e9",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,21 +2,19 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import time\n-\n-'''\n-Test behavior of -maxuploadtarget.\n+\"\"\"Test behavior of -maxuploadtarget.\n \n * Verify that getdata requests for old blocks (>1week) are dropped\n if uploadtarget has been reached.\n * Verify that getdata requests for recent blocks are respecteved even\n if uploadtarget has been reached.\n * Verify that the upload counters are reset after 24 hours.\n-'''\n+\"\"\"\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n \n # TestNode: bare-bones \"peer\".  Used mostly as a conduit for a test to sending\n # p2p messages to a node, generating the messages in the main testing logic."
      },
      {
        "sha": "8fae92ad2b0dda678e2d0176f926ece9a8aa2b92",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test mempool limiting together/eviction with the wallet\n+\"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "388889d07c03b37bdfbd88435c1ce2f53ffaaefc",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test descendant package tracking code\n+\"\"\"Test descendant package tracking code.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "2cd5573277cb18acbbd8383673507294d327e4b1",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,11 +2,11 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool re-org scenarios.\n \n-#\n-# Test re-org scenarios with a mempool that contains transactions\n-# that spend (directly or indirectly) coinbase transactions.\n-#\n+Test re-org scenarios with a mempool that contains transactions\n+that spend (directly or indirectly) coinbase transactions.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "c7f37aaa449b8967681bd7c45b338868e954ac8b",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,11 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test resurrection of mined transactions when\n-# the blockchain is re-organized.\n-#\n+\"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "da8485e2a271c53dfb83df733ce6f490afb07339",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,16 +2,15 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test spending coinbase transactions.\n-# The coinbase transaction in block N can appear in block\n-# N+100... so is valid in the mempool when the best block\n-# height is N+99.\n-# This test makes sure coinbase spends that will be mature\n-# in the next block are accepted into the memory pool,\n-# but less mature coinbase spends are NOT.\n-#\n+\"\"\"Test spending coinbase transactions.\n+\n+The coinbase transaction in block N can appear in block\n+N+100... so is valid in the mempool when the best block\n+height is N+99.\n+This test makes sure coinbase spends that will be mature\n+in the next block are accepted into the memory pool,\n+but less mature coinbase spends are NOT.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "c4b45425d7c9bcac95e44a1e20a12379ad10734d",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test merkleblock fetch/validation\n-#\n+\"\"\"Test gettxoutproof and verifytxoutproof RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "3b74bf1c4625181bc45f6924df25595894ec8b47",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test multiple rpc user config option rpcauth\n-#\n+\"\"\"Test multiple RPC users.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import str_to_b64str, assert_equal"
      },
      {
        "sha": "89059d276080978a501a13f34a3693767adb2451",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test node handling\n-#\n+\"\"\"Test node handling.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "66c4e90f21de9676598f2a372fad53287dc39a63",
        "filename": "qa/rpc-tests/nulldummy.py",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nulldummy.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,16 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test NULLDUMMY softfork.\n+\n+Connect to a single node.\n+Generate 2 blocks (save the coinbases for later).\n+Generate 427 more blocks.\n+[Policy/Consensus] Check that NULLDUMMY compliant transactions are accepted in the 430th block.\n+[Policy] Check that non-NULLDUMMY transactions are rejected before activation.\n+[Consensus] Check that the new NULLDUMMY rules are not enforced on the 431st block.\n+[Policy/Consensus] Check that the new NULLDUMMY rules are enforced on the 432nd block.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -25,17 +35,6 @@ def trueDummy(tx):\n     tx.vin[0].scriptSig = CScript(newscript)\n     tx.rehash()\n \n-'''\n-This test is meant to exercise NULLDUMMY softfork.\n-Connect to a single node.\n-Generate 2 blocks (save the coinbases for later).\n-Generate 427 more blocks.\n-[Policy/Consensus] Check that NULLDUMMY compliant transactions are accepted in the 430th block.\n-[Policy] Check that non-NULLDUMMY transactions are rejected before activation.\n-[Consensus] Check that the new NULLDUMMY rules are not enforced on the 431st block.\n-[Policy/Consensus] Check that the new NULLDUMMY rules are enforced on the 432nd block.\n-'''\n-\n class NULLDUMMYTest(BitcoinTestFramework):\n \n     def __init__(self):"
      },
      {
        "sha": "2f21fa149af27823d5f1ab5a9ccbf8e84f88216c",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,15 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import time\n-from test_framework.blocktools import create_block, create_coinbase\n-\n-'''\n-AcceptBlockTest -- test processing of unrequested blocks.\n+\"\"\"Test processing of unrequested blocks.\n \n Since behavior differs when receiving unrequested blocks from whitelisted peers\n versus non-whitelisted peers, this tests the behavior of both (effectively two\n@@ -54,7 +46,13 @@\n \n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n-'''\n+\"\"\"\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from test_framework.blocktools import create_block, create_coinbase\n \n # TestNode: bare-bones \"peer\".  Used mostly as a conduit for a test to sending\n # p2p messages to a node, generating the messages in the main testing logic."
      },
      {
        "sha": "79561f35f7c7633cfa9033565596b4d8b67fb10e",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,20 +2,18 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test compact blocks (BIP 152).\n+\n+Version 1 compact blocks are pre-segwit (txids)\n+Version 2 compact blocks are post-segwit (wtxids)\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.script import CScript, OP_TRUE\n \n-'''\n-CompactBlocksTest -- test compact blocks (BIP 152)\n-\n-Version 1 compact blocks are pre-segwit (txids)\n-Version 2 compact blocks are post-segwit (wtxids)\n-'''\n-\n # TestNode: A peer we use to send messages to bitcoind, and store responses.\n class TestNode(SingleNodeConnCB):\n     def __init__(self):"
      },
      {
        "sha": "1c62961db0b9762060102acc3585895af82ce8b3",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,16 +2,13 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\"\"\"Test processing of feefilter messages.\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import time\n \n-'''\n-FeeFilterTest -- test processing of feefilter messages\n-'''\n \n def hashToHex(hash):\n     return format(hash, '064x')"
      },
      {
        "sha": "274dbb8a925f05606aea2d79d19ffcefe8eb078b",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,14 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block processing.\n+\n+This reimplements tests from the bitcoinj/FullBlockTestGenerator used\n+by the pull-tester.\n+\n+We use the testing framework in which we expect a particular answer from\n+each test.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -17,14 +25,6 @@ def __init__(self, tx = CTransaction(), n = -1):\n         self.tx = tx\n         self.n = n  # the output we're spending\n \n-'''\n-This reimplements tests from the bitcoinj/FullBlockTestGenerator used\n-by the pull-tester.\n-\n-We use the testing framework in which we expect a particular answer from\n-each test.\n-'''\n-\n #  Use this class for tests that require behavior other than normal \"mininode\" behavior.\n #  For now, it is used to serialize a bloated varint (b64).\n class CBrokenBlock(CBlock):"
      },
      {
        "sha": "bf08ea32f4acc847f7422e76c5171e0305e4b322",
        "filename": "qa/rpc-tests/p2p-leaktests.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-leaktests.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,20 +2,18 @@\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-'''\n-Test for message sending before handshake completion\n+\"\"\"Test message sending before handshake completion.\n \n A node should never send anything other than VERSION/VERACK/REJECT until it's\n received a VERACK.\n \n This test connects to a node and sends it a few messages, trying to intice it\n into sending us something it shouldn't.\n-'''\n+\"\"\"\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n \n banscore = 10\n "
      },
      {
        "sha": "c6b149021151f677339bd35f375118829285d89e",
        "filename": "qa/rpc-tests/p2p-mempool.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-mempool.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,11 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test p2p mempool message.\n+\n+Test that nodes are disconnected if they send mempool messages when bloom\n+filters are not enabled.\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "470a5398b661ce2b84c11bd69616750612075701",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -21,9 +22,6 @@\n \n MAX_SIGOP_COST = 80000\n \n-'''\n-SegWit p2p test.\n-'''\n \n # Calculate the virtual size of a witness block:\n # (base + witness/4)"
      },
      {
        "sha": "7f596b6e4b4bfc61e1847eb86d3a9b16badcccd3",
        "filename": "qa/rpc-tests/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-timeouts.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\" TimeoutsTest -- test various net timeouts (only in extended tests)\n+\"\"\"Test various net timeouts.\n \n - Create three bitcoind nodes:\n "
      },
      {
        "sha": "8e3e361fc17a84bbf47b79f0e29e5e11b6f450a2",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,11 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test version bits warning system.\n+\n+Generate chains with block versions that appear to be signalling unknown\n+soft-forks, and test that warning alerts are generated.\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -10,13 +15,6 @@\n import time\n from test_framework.blocktools import create_block, create_coinbase\n \n-'''\n-Test version bits' warning system.\n-\n-Generate chains with block versions that appear to be signalling unknown\n-soft-forks, and test that warning alerts are generated.\n-'''\n-\n VB_PERIOD = 144 # versionbits period length for regtest\n VB_THRESHOLD = 108 # versionbits activation threshold for regtest\n VB_TOP_BITS = 0x20000000"
      },
      {
        "sha": "dde164f329093e549ba0e25e2b48aa0907992584",
        "filename": "qa/rpc-tests/preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/preciousblock.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test PreciousBlock code\n-#\n+\"\"\"Test the preciousblock RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "9a63d0838f2e336ffb93ab4027a0d5001ab943d1",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test PrioritiseTransaction code\n-#\n+\"\"\"Test the prioritisetransaction mining RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "e4e231f3120a094186c555f6927bd88f2fe73c39",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,20 +2,8 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bitcoind with different proxy configuration.\n \n-import socket\n-import os\n-\n-from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    PORT_MIN,\n-    PORT_RANGE,\n-    start_nodes,\n-    assert_equal,\n-)\n-from test_framework.netutil import test_ipv6_local\n-'''\n Test plan:\n - Start bitcoind's with different proxy configurations\n - Use addnode to initiate connections\n@@ -37,7 +25,20 @@\n addnode connect to IPv6\n addnode connect to onion\n addnode connect to generic DNS name\n-'''\n+\"\"\"\n+\n+import socket\n+import os\n+\n+from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    PORT_MIN,\n+    PORT_RANGE,\n+    start_nodes,\n+    assert_equal,\n+)\n+from test_framework.netutil import test_ipv6_local\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n "
      },
      {
        "sha": "bfb4ea6d2e3b412ab6b1b8a4b0682832a67b09aa",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,14 +2,12 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the pruning code.\n \n-#\n-# Test pruning code\n-# ********\n-# WARNING:\n-# This test uses 4GB of disk space.\n-# This test takes 30 mins or more (up to 2 hours)\n-# ********\n+WARNING:\n+This test uses 4GB of disk space.\n+This test takes 30 mins or more (up to 2 hours)\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "5adef31207f86871592a35c7b6d998bbe773e561",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,14 +2,14 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"rawtranscation RPCs QA test.\n-\n-# Tests the following RPCs:\n-#    - createrawtransaction\n-#    - signrawtransaction\n-#    - sendrawtransaction\n-#    - decoderawtransaction\n-#    - getrawtransaction\n+\"\"\"Test the rawtranscation RPCs.\n+\n+Test the following RPCs:\n+   - createrawtransaction\n+   - signrawtransaction\n+   - sendrawtransaction\n+   - decoderawtransaction\n+   - getrawtransaction\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "248bcdbd68cbaeb917ca076167a713d160dee809",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,13 +2,11 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Exercise the listreceivedbyaddress API\n+\"\"\"Test the listreceivedbyaddress RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n def get_sub_array_from_array(object_array, to_match):\n     '''\n         Finds and returns a sub array from an array of arrays."
      },
      {
        "sha": "1b547a920f5b85b17b2a010007a44331fd1ddea3",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,13 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test running bitcoind with -reindex and -reindex-chainstate options.\n+\n+- Start a single node and generate 3 blocks.\n+- Stop the node and restart it with -reindex. Verify that the node has reindexed up to block 3.\n+- Stop the node and restart it with -reindex-chainstate. Verify that the node has reindexed up to block 3.\n+\"\"\"\n \n-#\n-# Test -reindex and -reindex-chainstate with CheckBlockIndex\n-#\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     start_nodes,"
      },
      {
        "sha": "a3c1deddf6e9bc36827cca0914c6322721043d95",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test replace by fee code\n-#\n+\"\"\"Test the RBF code.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -442,7 +439,7 @@ def test_too_many_replacements(self):\n         self.nodes[0].sendrawtransaction(double_tx_hex, True)\n \n     def test_opt_in(self):\n-        \"\"\" Replacing should only work if orig tx opted in \"\"\"\n+        \"\"\"Replacing should only work if orig tx opted in\"\"\"\n         tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         # Create a non-opting in transaction"
      },
      {
        "sha": "9ca1cc187acd06d218a21c7f29c6f21e91195ff6",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,11 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test REST interface\n-#\n-\n+\"\"\"Test the REST API.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "89d74753cb1f3d69d229a0cc8a3c04f31aa142ce",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test for -rpcbind, as well as -rpcallowip and -rpcconnect\n+\"\"\"Test running bitcoind with the -rpcbind and -rpcallowip options.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "f6175c8ca7c264c969dbb4d5fa71e8f2e6f00a14",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test using named arguments for RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "f475427842b6af088e08a221c66714141a8d376d",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test the SegWit changeover logic\n-#\n+\"\"\"Test the SegWit changeover logic.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "16ca4a49134b359c986c6aba1bc53d083c5e9f0b",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,14 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.blocktools import create_block, create_coinbase\n-\n-'''\n-SendHeadersTest -- test behavior of headers messages to announce blocks.\n+\"\"\"Test behavior of headers messages to announce blocks.\n \n Setup: \n \n@@ -78,7 +71,13 @@\n    Expect: getheaders message each time.\n e. Announce one more that doesn't connect.\n    Expect: disconnect.\n-'''\n+\"\"\"\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.blocktools import create_block, create_coinbase\n+\n \n direct_fetch_response_time = 0.05\n "
      },
      {
        "sha": "91f5abef5dee0ca1dedc259ac8ad636ce5fc8115",
        "filename": "qa/rpc-tests/signmessages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signmessages.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,13 +2,12 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPC commands for signing and verifying messages.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class SignMessagesTest(BitcoinTestFramework):\n-    \"\"\"Tests RPC commands for signing and verifying messages.\"\"\"\n \n     def __init__(self):\n         super().__init__()"
      },
      {
        "sha": "b24162ab976fec4ddf115b53a4753aeefdb2e14f",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,14 +2,13 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n \n class SignRawTransactionsTest(BitcoinTestFramework):\n-    \"\"\"Tests transaction signing via RPC command \"signrawtransaction\".\"\"\"\n-\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n@@ -20,7 +19,7 @@ def setup_network(self, split=False):\n         self.is_network_split = False\n \n     def successful_signing_test(self):\n-        \"\"\"Creates and signs a valid raw transaction with one input.\n+        \"\"\"Create and sign a valid raw transaction with one input.\n \n         Expected results:\n \n@@ -65,7 +64,7 @@ def successful_signing_test(self):\n \n \n     def script_verification_error_test(self):\n-        \"\"\"Creates and signs a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n+        \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n         Expected results:\n "
      },
      {
        "sha": "bde454968fa9fb2dac47d7855670c2aa01eca343",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test fee estimation code\n-#\n+\"\"\"Test fee estimation code.\"\"\"\n \n from collections import OrderedDict\n from test_framework.test_framework import BitcoinTestFramework\n@@ -21,15 +18,15 @@\n SCRIPT_SIG = [\"0451025175\", \"0451025275\"]\n \n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n-    '''\n+    \"\"\"\n     Create and send a transaction with a random fee.\n     The transaction pays to a trivial P2SH script, and assumes that its inputs\n     are of the same form.\n     The function takes a list of confirmed outputs and unconfirmed outputs\n     and attempts to use the confirmed list first for its inputs.\n     It adds the newly created outputs to the unconfirmed list.\n     Returns (raw transaction, fee)\n-    '''\n+    \"\"\"\n     # It's best to exponentially distribute our random fees\n     # because the buckets are exponentially spaced.\n     # Exponentially distributed from 1-128 * fee_increment\n@@ -71,12 +68,12 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n     return (completetx, fee)\n \n def split_inputs(from_node, txins, txouts, initial_split = False):\n-    '''\n+    \"\"\"\n     We need to generate a lot of very small inputs so we can generate a ton of transactions\n     and they will have low priority.\n     This function takes an input from txins, and creates and sends a transaction\n     which splits the value into 2 outputs which are appended to txouts.\n-    '''\n+    \"\"\"\n     prevtxout = txins.pop()\n     inputs = []\n     inputs.append({ \"txid\" : prevtxout[\"txid\"], \"vout\" : prevtxout[\"vout\"] })\n@@ -95,10 +92,10 @@ def split_inputs(from_node, txins, txouts, initial_split = False):\n     txouts.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : rem_change})\n \n def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n-    '''\n+    \"\"\"\n     This function calls estimatefee and verifies that the estimates\n     meet certain invariants.\n-    '''\n+    \"\"\"\n     all_estimates = [ node.estimatefee(i) for i in range(1,26) ]\n     if print_estimates:\n         print([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n@@ -151,11 +148,11 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        '''\n+        \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters.\n         But first we need to use one node to create a lot of small low priority outputs\n         which we will use to generate our transactions.\n-        '''\n+        \"\"\"\n         self.nodes = []\n         # Use node0 to mine blocks for input splitting\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\","
      },
      {
        "sha": "96bebe1ea1608935a650bef2d10a45d00339df34",
        "filename": "qa/rpc-tests/test_framework/address.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/address.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,12 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# address.py\n-#\n-# This file encodes and decodes BASE58 P2PKH and P2SH addresses\n-#\n+\"\"\"Encode and decode BASE58, P2PKH and P2SH addresses.\"\"\"\n \n from .script import hash256, hash160, sha256, CScript, OP_0\n from .util import bytes_to_hex_str, hex_str_to_bytes"
      },
      {
        "sha": "9ab3094b06744fe133022e8ee82b12dfe55833e8",
        "filename": "qa/rpc-tests/test_framework/authproxy.py",
        "status": "modified",
        "additions": 33,
        "deletions": 34,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/authproxy.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -1,37 +1,36 @@\n-\n-\"\"\"\n-  Copyright (c) 2011 Jeff Garzik\n-\n-  AuthServiceProxy has the following improvements over python-jsonrpc's\n-  ServiceProxy class:\n-\n-  - HTTP connections persist for the life of the AuthServiceProxy object\n-    (if server supports HTTP/1.1)\n-  - sends protocol 'version', per JSON-RPC 1.1\n-  - sends proper, incrementing 'id'\n-  - sends Basic HTTP authentication headers\n-  - parses all JSON numbers that look like floats as Decimal\n-  - uses standard Python json lib\n-\n-  Previous copyright, from python-jsonrpc/jsonrpc/proxy.py:\n-\n-  Copyright (c) 2007 Jan-Klaas Kollhof\n-\n-  This file is part of jsonrpc.\n-\n-  jsonrpc is free software; you can redistribute it and/or modify\n-  it under the terms of the GNU Lesser General Public License as published by\n-  the Free Software Foundation; either version 2.1 of the License, or\n-  (at your option) any later version.\n-\n-  This software is distributed in the hope that it will be useful,\n-  but WITHOUT ANY WARRANTY; without even the implied warranty of\n-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-  GNU Lesser General Public License for more details.\n-\n-  You should have received a copy of the GNU Lesser General Public License\n-  along with this software; if not, write to the Free Software\n-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+# Copyright (c) 2011 Jeff Garzik\n+#\n+# Previous copyright, from python-jsonrpc/jsonrpc/proxy.py:\n+#\n+# Copyright (c) 2007 Jan-Klaas Kollhof\n+#\n+# This file is part of jsonrpc.\n+#\n+# jsonrpc is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU Lesser General Public License as published by\n+# the Free Software Foundation; either version 2.1 of the License, or\n+# (at your option) any later version.\n+#\n+# This software is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU Lesser General Public License for more details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License\n+# along with this software; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+\"\"\"HTTP proxy for opening RPC connection to bitcoind.\n+\n+AuthServiceProxy has the following improvements over python-jsonrpc's\n+ServiceProxy class:\n+\n+- HTTP connections persist for the life of the AuthServiceProxy object\n+  (if server supports HTTP/1.1)\n+- sends protocol 'version', per JSON-RPC 1.1\n+- sends proper, incrementing 'id'\n+- sends Basic HTTP authentication headers\n+- parses all JSON numbers that look like floats as Decimal\n+- uses standard Python json lib\n \"\"\"\n \n try:"
      },
      {
        "sha": "024611da6e079a7dc7d63b19824dc5fa505d9a83",
        "filename": "qa/rpc-tests/test_framework/bignum.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/bignum.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/bignum.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/bignum.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -1,15 +1,11 @@\n #!/usr/bin/env python3\n #\n-# bignum.py\n-#\n-# This file is copied from python-bitcoinlib.\n-#\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n-\n-\"\"\"Bignum routines\"\"\"\n+\"\"\"Big number routines.\n \n+This file is copied from python-bitcoinlib.\n+\"\"\"\n \n import struct\n "
      },
      {
        "sha": "5280d18cdc606165ee092ef68ada1d6acfa4be86",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,16 +2,20 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-# BlockStore: a helper class that keeps a map of blocks and implements\n-#             helper functions for responding to getheaders and getdata,\n-#             and for constructing a getheaders message\n-#\n+\"\"\"BlockStore and TxStore helper classes.\"\"\"\n \n from .mininode import *\n from io import BytesIO\n import dbm.dumb as dbmd\n \n class BlockStore(object):\n+    \"\"\"BlockStore helper class.\n+\n+    BlockStore keeps a map of blocks and implements helper functions for\n+    responding to getheaders and getdata, and for constructing a getheaders\n+    message.\n+    \"\"\"\n+\n     def __init__(self, datadir):\n         self.blockDB = dbmd.open(datadir + \"/blocks\", 'c')\n         self.currentBlock = 0"
      },
      {
        "sha": "2c9a0857dfa8ce924f9ce2e97ee467f8570642e9",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -1,8 +1,8 @@\n #!/usr/bin/env python3\n-# blocktools.py - utilities for manipulating blocks and transactions\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Utilities for manipulating blocks and transactions.\"\"\"\n \n from .mininode import *\n from .script import CScript, OP_TRUE, OP_CHECKSIG, OP_RETURN"
      },
      {
        "sha": "b617895cac30277e4b6225dab7ce78140552e6e6",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 14,
        "deletions": 19,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,34 +2,29 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from .mininode import *\n-from .blockstore import BlockStore, TxStore\n-from .util import p2p_port\n-\n-'''\n-This is a tool for comparing two or more bitcoinds to each other\n-using a script provided.\n+\"\"\"Compare two or more bitcoinds to each other.\n \n To use, create a class that implements get_tests(), and pass it in\n as the test generator to TestManager.  get_tests() should be a python\n generator that returns TestInstance objects.  See below for definition.\n-'''\n \n-# TestNode behaves as follows:\n-# Configure with a BlockStore and TxStore\n-# on_inv: log the message but don't request\n-# on_headers: log the chain tip\n-# on_pong: update ping response map (for synchronization)\n-# on_getheaders: provide headers via BlockStore\n-# on_getdata: provide blocks via BlockStore\n+TestNode behaves as follows:\n+    Configure with a BlockStore and TxStore\n+    on_inv: log the message but don't request\n+    on_headers: log the chain tip\n+    on_pong: update ping response map (for synchronization)\n+    on_getheaders: provide headers via BlockStore\n+    on_getdata: provide blocks via BlockStore\n+\"\"\"\n+\n+from .mininode import *\n+from .blockstore import BlockStore, TxStore\n+from .util import p2p_port\n \n global mininode_lock\n \n class RejectResult(object):\n-    '''\n-    Outcome that expects rejection of a transaction or block.\n-    '''\n+    \"\"\"Outcome that expects rejection of a transaction or block.\"\"\"\n     def __init__(self, code, reason=b''):\n         self.code = code\n         self.reason = reason"
      },
      {
        "sha": "3f87ef91f6163ed80b2a6c89acb83dadc32b8668",
        "filename": "qa/rpc-tests/test_framework/coverage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/coverage.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,15 +2,12 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Utilities for doing coverage analysis on the RPC interface.\n \n-\"\"\"\n-This module contains utilities for doing coverage analysis on the RPC\n-interface.\n-\n-It provides a way to track which RPC commands are exercised during\n+Provides a way to track which RPC commands are exercised during\n testing.\n-\n \"\"\"\n+\n import os\n \n "
      },
      {
        "sha": "85a6158a2fd471ca7030a2fb8fbb47f503147b28",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -1,14 +1,10 @@\n # Copyright (c) 2011 Sam Rushing\n-#\n-# key.py - OpenSSL wrapper\n-#\n-# This file is modified from python-bitcoinlib.\n-#\n-\n-\"\"\"ECC secp256k1 crypto routines\n+\"\"\"ECC secp256k1 OpenSSL wrapper.\n \n WARNING: This module does not mlock() secrets; your private keys may end up on\n disk in swap! Use with caution!\n+\n+This file is modified from python-bitcoinlib.\n \"\"\"\n \n import ctypes"
      },
      {
        "sha": "b2292f6477482eae0b11c1a627e6f76f437cf7a0",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 15,
        "deletions": 17,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -4,23 +4,21 @@\n # Copyright (c) 2010-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# mininode.py - Bitcoin P2P network half-a-node\n-#\n-# This python code was modified from ArtForz' public domain  half-a-node, as\n-# found in the mini-node branch of http://github.com/jgarzik/pynode.\n-#\n-# NodeConn: an object which manages p2p connectivity to a bitcoin node\n-# NodeConnCB: a base class that describes the interface for receiving\n-#             callbacks with network messages from a NodeConn\n-# CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n-#     data structures that should map to corresponding structures in\n-#     bitcoin/primitives\n-# msg_block, msg_tx, msg_headers, etc.:\n-#     data structures that represent network messages\n-# ser_*, deser_*: functions that handle serialization/deserialization\n-\n+\"\"\"Bitcoin P2P network half-a-node.\n+\n+This python code was modified from ArtForz' public domain  half-a-node, as\n+found in the mini-node branch of http://github.com/jgarzik/pynode.\n+\n+NodeConn: an object which manages p2p connectivity to a bitcoin node\n+NodeConnCB: a base class that describes the interface for receiving\n+            callbacks with network messages from a NodeConn\n+CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n+    data structures that should map to corresponding structures in\n+    bitcoin/primitives\n+msg_block, msg_tx, msg_headers, etc.:\n+    data structures that represent network messages\n+ser_*, deser_*: functions that handle serialization/deserialization\n+\"\"\"\n \n import struct\n import socket"
      },
      {
        "sha": "45d8e22d2236338db616c99ae94d497558e06a92",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,8 +2,10 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Linux network utilities.\n \n-# Linux network utilities\n+Roughly based on http://voorloopnul.com/blog/a-python-netstat-in-less-than-100-lines-of-code/ by Ricardo Pascal\n+\"\"\"\n \n import sys\n import socket\n@@ -13,7 +15,6 @@\n import os\n from binascii import unhexlify, hexlify\n \n-# Roughly based on http://voorloopnul.com/blog/a-python-netstat-in-less-than-100-lines-of-code/ by Ricardo Pascal\n STATE_ESTABLISHED = '01'\n STATE_SYN_SENT  = '02'\n STATE_SYN_RECV = '03'"
      },
      {
        "sha": "3d9572788ebd016686a73f30223dd02064f8a48a",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,19 +2,11 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Functionality to build scripts, as well as SignatureHash().\n \n-#\n-# script.py\n-#\n-# This file is modified from python-bitcoinlib.\n-#\n-\n-\"\"\"Scripts\n-\n-Functionality to build scripts, as well as SignatureHash().\n+This file is modified from python-bitcoinlib.\n \"\"\"\n \n-\n from .mininode import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string\n from binascii import hexlify\n import hashlib"
      },
      {
        "sha": "f68ecad36bbbdb0016d6039fb7c711ba38285792",
        "filename": "qa/rpc-tests/test_framework/siphash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/siphash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/siphash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/siphash.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,11 +2,10 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Specialized SipHash-2-4 implementations.\n \n-#\n-# siphash.py - Specialized SipHash-2-4 implementations\n-#\n-# This implements SipHash-2-4 for 256-bit integers.\n+This implements SipHash-2-4 for 256-bit integers.\n+\"\"\"\n \n def rotl64(n, b):\n     return n >> (64 - b) | (n & ((1 << (64 - b)) - 1)) << b"
      },
      {
        "sha": "450bf3775eaa864b96e3ec77cbb0dad847b7e3ed",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,9 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-Dummy Socks5 server for testing.\n-'''\n+\"\"\"Dummy Socks5 server for testing.\"\"\"\n \n import socket, threading, queue\n import traceback, sys\n@@ -20,7 +18,7 @@ class AddressType:\n \n ### Utility functions\n def recvall(s, n):\n-    '''Receive n bytes from a socket, or fail'''\n+    \"\"\"Receive n bytes from a socket, or fail.\"\"\"\n     rv = bytearray()\n     while n > 0:\n         d = s.recv(n)\n@@ -32,15 +30,15 @@ def recvall(s, n):\n \n ### Implementation classes\n class Socks5Configuration(object):\n-    '''Proxy configuration'''\n+    \"\"\"Proxy configuration.\"\"\"\n     def __init__(self):\n         self.addr = None # Bind address (must be set)\n         self.af = socket.AF_INET # Bind address family\n         self.unauth = False  # Support unauthenticated\n         self.auth = False  # Support authentication\n \n class Socks5Command(object):\n-    '''Information about an incoming socks5 command'''\n+    \"\"\"Information about an incoming socks5 command.\"\"\"\n     def __init__(self, cmd, atyp, addr, port, username, password):\n         self.cmd = cmd # Command (one of Command.*)\n         self.atyp = atyp # Address type (one of AddressType.*)\n@@ -58,9 +56,7 @@ def __init__(self, serv, conn, peer):\n         self.peer = peer\n \n     def handle(self):\n-        '''\n-        Handle socks5 request according to RFC1928\n-        '''\n+        \"\"\"Handle socks5 request according to RFC192.\"\"\"\n         try:\n             # Verify socks version\n             ver = recvall(self.conn, 1)[0]"
      },
      {
        "sha": "c5e9c6a6589ab2e4e7f7da4905d07ddb45ccedc8",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Base class for RPC testing\n+\"\"\"Base class for RPC testing.\"\"\"\n \n import logging\n import optparse"
      },
      {
        "sha": "3a3e0dbd84183807f919122a835e39e00d388b32",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,11 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-\n-#\n-# Helpful routines for regression testing\n-#\n+\"\"\"Helpful routines for regression testing.\"\"\"\n \n import os\n import sys"
      },
      {
        "sha": "7a3b8d34744a9d28f4e4bfc4f1c5dbf4f5e4b654",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test proper accounting with an equivalent malleability clone\n-#\n+\"\"\"Test the wallet accounts properly when there are cloned transactions with malleated scriptsigs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "5b12cf4c296cf905915c24bb8556b43063bd9d0b",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test proper accounting with a double-spend conflict\n-#\n+\"\"\"Test the wallet accounts properly when there is a double-spend conflict.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "ea12d4ec2286127e8557335af58f953e9fca9987",
        "filename": "qa/rpc-tests/wallet-accounts.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-accounts.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,14 +2,22 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test account RPCs.\n+\n+RPCs tested are:\n+    - getaccountaddress\n+    - getaddressesbyaccount\n+    - setaccount\n+    - sendfrom (with account arguments)\n+    - move (with account arguments)\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     start_nodes,\n     assert_equal,\n )\n \n-\n class WalletAccountsTest(BitcoinTestFramework):\n \n     def __init__(self):"
      },
      {
        "sha": "b819b72b75f5bd0938c533c57ff9cf17ab55a896",
        "filename": "qa/rpc-tests/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-dump.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the dumpwallet RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (start_nodes, start_node, assert_equal, bitcoind_processes)"
      },
      {
        "sha": "bf075900980d044dbec87cbcd605ca3fce595c5e",
        "filename": "qa/rpc-tests/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-hd.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Hierarchical Deterministic wallet function.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "ddeac657e51a82c556ec385166446c25cfef5681",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test the wallet.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "ea249096cf470fd74d1c4a11e093c740cfd171ef",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,9 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-\"\"\"\n-Exercise the wallet backup code.  Ported from walletbackup.sh.\n+\"\"\"Test the wallet backup features.\n \n Test case is:\n 4 nodes. 1 2 and 3 send transactions between each other,"
      },
      {
        "sha": "9597d05f3a5e37ad0f1a51e96d6e1b94b95f1f8f",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,7 +2,16 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the zapwallettxes functionality.\n \n+- start three bitcoind nodes\n+- create four transactions on node 0 - two are confirmed and two are\n+  unconfirmed.\n+- restart node 1 and verify that both the confirmed and the unconfirmed\n+  transactions are still available.\n+- restart node 0 and verify that the confirmed transactions are still\n+  available, but that the unconfirmed transaction has been zapped.\n+\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "1e2f06bd54b58ebe2bbca96502e748d52a9d1982",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f95a806b1cd2f3c944bda7bcc266498a59326e4/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test ZMQ interface\n-#\n+\"\"\"Test the ZMQ API.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      }
    ]
  },
  {
    "sha": "7146d96de3e15a80cafbab2af48ff6f65d8e41bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTQ2ZDk2ZGUzZTE1YTgwY2FmYmFiMmFmNDhmZjZmNjVkOGU0MWJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-23T15:33:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-23T15:34:07Z"
      },
      "message": "Merge #9766: Add --exclude option to rpc-tests.py\n\nc578408 Add exclude option to rpc-tests.py (John Newbery)",
      "tree": {
        "sha": "339b545aeb7cbd5b9aa5e89b24fcdb231c1f641a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/339b545aeb7cbd5b9aa5e89b24fcdb231c1f641a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7146d96de3e15a80cafbab2af48ff6f65d8e41bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYrwDvAAoJEC1/I3LlD+E3UcEIAJy9azBXbTkQObAgLKepJWjA\nOhFJnLSrlCNyciA1hcTbywOPb1G4twR3VlSjGijZEtWUWLC8vvdXaqCmNQ4Es7Lj\n6ZATuxA9cC5Zk+QFlq9oOfA4ow5u71QqV+Sd5b2QbHXyBnSaKSPYjynkjx+X1SIH\n6su2jjQBVxUcKDI++Vpdn087awz5De1axGlIzRg8VfsiBh6slf7ScxA1nrGcTL9+\nA+aL4nAQpscgL8BoHiHYkzx0a2rPraRIkX7HnJYXZOFUiegRwD5UaeyvMSkKwCyq\nBAt/fABiOmmABsgqET1sJJMzNNsLos1OnWHrwFdY//bJdMwrtKW+5nFLJ0hDDJs=\n=DKt2\n-----END PGP SIGNATURE-----",
        "payload": "tree 339b545aeb7cbd5b9aa5e89b24fcdb231c1f641a\nparent e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e\nparent c5784085e9031ea1ad32a2aee897bd57a0482d24\nauthor MarcoFalke <falke.marco@gmail.com> 1487864014 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487864047 +0100\n\nMerge #9766: Add --exclude option to rpc-tests.py\n\nc578408 Add exclude option to rpc-tests.py (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7146d96de3e15a80cafbab2af48ff6f65d8e41bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7146d96de3e15a80cafbab2af48ff6f65d8e41bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7146d96de3e15a80cafbab2af48ff6f65d8e41bb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e68c266f3d56d1a78bb79bea48bce3dc8ef29e6e"
      },
      {
        "sha": "c5784085e9031ea1ad32a2aee897bd57a0482d24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5784085e9031ea1ad32a2aee897bd57a0482d24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5784085e9031ea1ad32a2aee897bd57a0482d24"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "523d753c949b7f627452b9bc47ac1d5aef3d62c7",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7146d96de3e15a80cafbab2af48ff6f65d8e41bb/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7146d96de3e15a80cafbab2af48ff6f65d8e41bb/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=7146d96de3e15a80cafbab2af48ff6f65d8e41bb",
        "patch": "@@ -133,6 +133,7 @@ def main():\n     Help text and arguments for individual test script:''',\n                                      formatter_class=argparse.RawTextHelpFormatter)\n     parser.add_argument('--coverage', action='store_true', help='generate a basic coverage report for the RPC interface')\n+    parser.add_argument('--exclude', '-x', help='specify a comma-seperated-list of scripts to exclude. Do not include the .py extension in the name.')\n     parser.add_argument('--extended', action='store_true', help='run the extended test suite in addition to the basic tests')\n     parser.add_argument('--force', '-f', action='store_true', help='run tests even on platforms where they are disabled by default (e.g. windows).')\n     parser.add_argument('--help', '-h', '-?', action='store_true', help='print help text and exit')\n@@ -179,13 +180,6 @@ def main():\n         # in the ALL_SCRIPTS list. Accept the name with or without .py extension.\n         test_list = [t for t in ALL_SCRIPTS if\n                 (t in tests or re.sub(\".py$\", \"\", t) in tests)]\n-        if not test_list:\n-            print(\"No valid test scripts specified. Check that your test is in one \"\n-                  \"of the test lists in rpc-tests.py or run rpc-tests.py with no arguments to run all tests\")\n-            print(\"Scripts not found:\")\n-            print(tests)\n-            sys.exit(0)\n-\n     else:\n         # No individual tests have been specified. Run base tests, and\n         # optionally ZMQ tests and extended tests.\n@@ -198,6 +192,17 @@ def main():\n             # (for parallel running efficiency). This combined list will is no\n             # longer sorted.\n \n+    # Remove the test cases that the user has explicitly asked to exclude.\n+    if args.exclude:\n+        for exclude_test in args.exclude.split(','):\n+            if exclude_test + \".py\" in test_list:\n+                test_list.remove(exclude_test + \".py\")\n+\n+    if not test_list:\n+        print(\"No valid test scripts specified. Check that your test is in one \"\n+              \"of the test lists in rpc-tests.py, or run rpc-tests.py with no arguments to run all tests\")\n+        sys.exit(0)\n+\n     if args.help:\n         # Print help for rpc-tests.py, then print help of the first script and exit.\n         parser.print_help()"
      }
    ]
  },
  {
    "sha": "d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjA2NGE4OWFjOTdkYzBkMmNlOWRhMzk4MmUxYTRlMjVhZmFlZGE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-23T15:39:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-23T15:39:22Z"
      },
      "message": "Merge #9577: Fix docstrings in qa tests\n\n3f95a80 Fix docstrings in qa tests (John Newbery)",
      "tree": {
        "sha": "824034a5baf053cfc624a4cf74bd21e1d73c8056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/824034a5baf053cfc624a4cf74bd21e1d73c8056"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYrwIqAAoJEC1/I3LlD+E3fm8IAIA6GbqW2an1yHXF0R+yvTDG\n7npnczcQFo+okyje2aEKvSI1iOQ1j9nQWxE9k0S2QQpWDSUbZ7LLp8FH6GF2Rxuw\nIBhZVTyUKa3Wv7es0NXOBk8z3ZjJCciZteUjSrB5IGEaNJceZct7ANjV3NdB19XK\nUaMwgDHjngchTID393ARLpEYkPBORMmHpzPe5na2oGGdeJDxD0c/SVG0bQ/UEqq6\nk29AgYk4sa1b1aF8qayDRK6YsVbE6WbSC+Hdqu/dyLW//qKd4lqqI+s+sRgG1FjE\nerRNR+Z6+E2vxmIvAd3azbPRyAA2279UIJdMwO4yzCs0ULjI8+IL6Dn+lfeAvDY=\n=88qm\n-----END PGP SIGNATURE-----",
        "payload": "tree 824034a5baf053cfc624a4cf74bd21e1d73c8056\nparent 7146d96de3e15a80cafbab2af48ff6f65d8e41bb\nparent 3f95a806b1cd2f3c944bda7bcc266498a59326e4\nauthor MarcoFalke <falke.marco@gmail.com> 1487864354 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487864362 +0100\n\nMerge #9577: Fix docstrings in qa tests\n\n3f95a80 Fix docstrings in qa tests (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7146d96de3e15a80cafbab2af48ff6f65d8e41bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7146d96de3e15a80cafbab2af48ff6f65d8e41bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7146d96de3e15a80cafbab2af48ff6f65d8e41bb"
      },
      {
        "sha": "3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f95a806b1cd2f3c944bda7bcc266498a59326e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f95a806b1cd2f3c944bda7bcc266498a59326e4"
      }
    ],
    "stats": {
      "total": 873,
      "additions": 389,
      "deletions": 484
    },
    "files": [
      {
        "sha": "b32d4e2ce08300aa6985874081ec3a8844a7ff5d",
        "filename": "qa/rpc-tests/abandonconflict.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/abandonconflict.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,7 +2,14 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test the abandontransaction RPC.\n+\n+ The abandontransaction RPC marks a transaction and all its in-wallet\n+ descendants as abandoned which allows their inputs to be respent. It can be\n+ used to replace \"stuck\" or evicted transactions. It only works on transactions\n+ which are not included in a block and are not currently in the mempool. It has\n+ no effect on transactions which are already conflicted or abandoned.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "b8dafff161a9135078a36f268e1615aab9855cb0",
        "filename": "qa/rpc-tests/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/assumevalid.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-assumevalid.py\n+\"\"\"Test logic for skipping signature validation on old blocks.\n \n Test logic for skipping signature validation on blocks which we've assumed\n valid (https://github.com/bitcoin/bitcoin/pull/9484)\n@@ -29,7 +28,7 @@\n     - node2 has -assumevalid set to the hash of block 102. Try to sync to\n       block 200. node2 will reject block 102 since it's assumed valid, but it\n       isn't buried by at least two weeks' work.\n-'''\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "ea9c3d73ab85119c0cefb78a7168c4fd226083cb",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,19 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test BIP65 (CHECKLOCKTIMEVERIFY).\n+\n+Connect to a single node.\n+Mine 2 (version 3) blocks (save the coinbases for later).\n+Generate 98 more version 3 blocks, verify the node accepts.\n+Mine 749 version 4 blocks, verify the node accepts.\n+Check that the new CLTV rules are not enforced on the 750th version 4 block.\n+Check that the new CLTV rules are enforced on the 751st version 4 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -20,19 +33,6 @@ def cltv_invalidate(tx):\n     tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n-'''\n-This test is meant to exercise BIP65 (CHECKLOCKTIMEVERIFY)\n-Connect to a single node.\n-Mine 2 (version 3) blocks (save the coinbases for later).\n-Generate 98 more version 3 blocks, verify the node accepts.\n-Mine 749 version 4 blocks, verify the node accepts.\n-Check that the new CLTV rules are not enforced on the 750th version 4 block.\n-Check that the new CLTV rules are enforced on the 751st version 4 block.\n-Mine 199 new version blocks.\n-Mine 1 old-version block.\n-Mine 1 new version block.\n-Mine 1 old version block, see that the node rejects.\n-'''\n \n class BIP65Test(ComparisonTestFramework):\n "
      },
      {
        "sha": "c9d02a98f3f41a42ba4bd34faaf7a879948c6993",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n-#\n+\"\"\"Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "836267ea7f776b4bcf93542ba79abb43ec662f8c",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,18 +2,8 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test activation of the first version bits soft fork.\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import ToHex, NetworkThread\n-from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import *\n-from io import BytesIO\n-import time\n-\n-'''\n-This test is meant to exercise activation of the first version bits soft fork\n This soft fork will activate the following BIPS:\n BIP 68  - nSequence relative lock times\n BIP 112 - CHECKSEQUENCEVERIFY\n@@ -51,7 +41,16 @@\n bip112txs_vary_OP_CSV - 16 txs with nSequence = 10 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n bip112txs_vary_OP_CSV_9 - 16 txs with nSequence = 9 evaluated against varying {relative_locktimes of 10} OP_CSV OP_DROP\n bip112tx_special - test negative argument to OP_CSV\n-'''\n+\"\"\"\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import ToHex, CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import *\n+from io import BytesIO\n+import time\n \n base_relative_locktime = 10\n seq_disable_flag = 1<<31"
      },
      {
        "sha": "74ac393fe900db07bf7ab7919cc19a6da539f667",
        "filename": "qa/rpc-tests/bip68-sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-sequence.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test BIP68 implementation\n-#\n+\"\"\"Test BIP68 implementation.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "70d4be3f6987354d89229d670c09612c075398ac",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 18,
        "deletions": 20,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,20 +2,8 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test BIP 9 soft forks.\n \n-from test_framework.blockstore import BlockStore\n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n-from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n-from io import BytesIO\n-import time\n-import itertools\n-\n-'''\n-This test is meant to exercise BIP forks\n Connect to a single node.\n regtest lock-in with 108/144 block signalling\n activation after a further 144 blocks\n@@ -26,8 +14,18 @@\n mine a further 143 blocks (LOCKED_IN)\n test that enforcement has not triggered (which triggers ACTIVE)\n test that enforcement has triggered\n-'''\n+\"\"\"\n \n+from test_framework.blockstore import BlockStore\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n+from io import BytesIO\n+import time\n+import itertools\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n \n@@ -225,21 +223,21 @@ def donothing(self, tx):\n         return\n \n     def csv_invalidate(self, tx):\n-        '''Modify the signature in vin 0 of the tx to fail CSV\n+        \"\"\"Modify the signature in vin 0 of the tx to fail CSV\n         Prepends -1 CSV DROP in the scriptSig itself.\n-        '''\n+        \"\"\"\n         tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP] +\n                                       list(CScript(tx.vin[0].scriptSig)))\n \n     def sequence_lock_invalidate(self, tx):\n-        '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan)\n-        '''\n+        \"\"\"Modify the nSequence to make it fails once sequence lock rule is\n+        activated (high timespan).\n+        \"\"\"\n         tx.vin[0].nSequence = 0x00FFFFFF\n         tx.nLockTime = 0\n \n     def mtp_invalidate(self, tx):\n-        '''Modify the nLockTime to make it fails once MTP rule is activated\n-        '''\n+        \"\"\"Modify the nLockTime to make it fails once MTP rule is activated.\"\"\"\n         # Disable Sequence lock, Activate nLockTime\n         tx.vin[0].nSequence = 0x90FFFFFF\n         tx.nLockTime = self.last_block_time"
      },
      {
        "sha": "b82ef89395a7e3585fe025049d9084557395f4ce",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 15,
        "deletions": 16,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,19 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test BIP66 (DER SIG).\n+\n+Connect to a single node.\n+Mine 2 (version 2) blocks (save the coinbases for later).\n+Generate 98 more version 2 blocks, verify the node accepts.\n+Mine 749 version 3 blocks, verify the node accepts.\n+Check that the new DERSIG rules are not enforced on the 750th version 3 block.\n+Check that the new DERSIG rules are enforced on the 751st version 3 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -15,10 +28,10 @@\n # A canonical signature consists of: \n # <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n def unDERify(tx):\n-    '''\n+    \"\"\"\n     Make the signature in vin 0 of a tx non-DER-compliant,\n     by adding padding after the S-value.\n-    '''\n+    \"\"\"\n     scriptSig = CScript(tx.vin[0].scriptSig)\n     newscript = []\n     for i in scriptSig:\n@@ -27,20 +40,6 @@ def unDERify(tx):\n         else:\n             newscript.append(i)\n     tx.vin[0].scriptSig = CScript(newscript)\n-    \n-'''\n-This test is meant to exercise BIP66 (DER SIG).\n-Connect to a single node.\n-Mine 2 (version 2) blocks (save the coinbases for later).\n-Generate 98 more version 2 blocks, verify the node accepts.\n-Mine 749 version 3 blocks, verify the node accepts.\n-Check that the new DERSIG rules are not enforced on the 750th version 3 block.\n-Check that the new DERSIG rules are enforced on the 751st version 3 block.\n-Mine 199 new version blocks.\n-Mine 1 old-version block.\n-Mine 1 new version block.\n-Mine 1 old version block, see that the node rejects.\n-'''\n             \n class BIP66Test(ComparisonTestFramework):\n "
      },
      {
        "sha": "fa54bc2749f4de0cae2d471ed117fdf6b6d11525",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test the BIP66 changeover logic\n-#\n+\"\"\"Test the BIP66 changeover logic.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "67b58268402782f8cd79f068aeff558eacca4fcf",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,11 +2,14 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPCs related to blockchainstate.\n \n-#\n-# Test RPC calls related to blockchain state. Tests correspond to code in\n-# rpc/blockchain.cpp.\n-#\n+Test the following RPCs:\n+    - gettxoutsetinfo\n+    - verifychain\n+\n+Tests correspond to code in rpc/blockchain.cpp.\n+\"\"\"\n \n from decimal import Decimal\n \n@@ -23,13 +26,6 @@\n \n \n class BlockchainTest(BitcoinTestFramework):\n-    \"\"\"\n-    Test blockchain-related RPC calls:\n-\n-        - gettxoutsetinfo\n-        - verifychain\n-\n-    \"\"\"\n \n     def __init__(self):\n         super().__init__()"
      },
      {
        "sha": "cc897a32c75a74b537e9655736b98d773d1e1bdd",
        "filename": "qa/rpc-tests/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bumpfee.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the bumpfee RPC.\"\"\"\n \n from segwit import send_to_witness\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "13eac92bbce717a189afa432887f3f20ad771604",
        "filename": "qa/rpc-tests/create_cache.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/create_cache.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,11 +2,12 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Create a blockchain cache.\n \n-#\n-# Helper script to create the cache\n-# (see BitcoinTestFramework.setup_chain)\n-#\n+Creating a cache of the blockchain speeds up test execution when running\n+multiple qa tests. This helper script is executed by rpc-tests when multiple\n+tests are being run in parallel.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n "
      },
      {
        "sha": "5555e96c4465539e4c86aa2f862133c116f3bf78",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,14 +2,14 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test decoding scripts via decodescript RPC command.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import *\n from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n-    \"\"\"Tests decoding scripts via RPC command \"decodescript\".\"\"\"\n \n     def __init__(self):\n         super().__init__()\n@@ -111,7 +111,7 @@ def decodescript_script_pub_key(self):\n         assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n \n     def decoderawtransaction_asm_sighashtype(self):\n-        \"\"\"Tests decoding scripts via RPC command \"decoderawtransaction\".\n+        \"\"\"Test decoding scripts via RPC command \"decoderawtransaction\".\n \n         This test is in with the \"decodescript\" tests because they are testing the same \"asm\" script decodes.\n         \"\"\""
      },
      {
        "sha": "ff7121659b32c4c88f15e0877a196fb74153f48c",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,11 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a node with the -disablewallet option.\n \n-#\n-# Exercise API with -disablewallet.\n-#\n+- Test that validateaddress RPC works when running with -disablewallet\n+- Test that it is not possible to mine to an invalid address.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -24,7 +25,6 @@ def setup_network(self, split=False):\n         self.sync_all()\n \n     def run_test (self):\n-        # Check regression: https://github.com/bitcoin/bitcoin/issues/6963#issuecomment-154548880\n         x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n         assert(x['isvalid'] == False)\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')"
      },
      {
        "sha": "c2724ba5df415839bf960691f39a570c36442ea8",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test -alertnotify \n-#\n+\"\"\"Test the -alertnotify option.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "7892e85e22c69e327d7a52c6cfa3787db97f054a",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "b73fea0695a407c2f83a12a1bb8aa217ad1c1a4a",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test longpolling with getblocktemplate.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -22,10 +23,6 @@ def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n-    '''\n-    Test longpolling with getblocktemplate.\n-    '''\n-\n     def __init__(self):\n         super().__init__()\n         self.num_nodes = 4"
      },
      {
        "sha": "3b17dfcfb5d96d1d014721164613cf19c15f86be",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block proposals with getblocktemplate.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -66,9 +67,6 @@ def assert_template(node, tmpl, txlist, expect):\n         raise AssertionError('unexpected: %s' % (rsp,))\n \n class GetBlockTemplateProposalTest(BitcoinTestFramework):\n-    '''\n-    Test block proposals with getblocktemplate.\n-    '''\n \n     def __init__(self):\n         super().__init__()"
      },
      {
        "sha": "14222334a62d3c1903433d089d3ae231ce12fe5c",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,13 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the getchaintips RPC.\n \n-# Exercise the getchaintips API.  We introduce a network split, work\n-# on chains of different lengths, and join the network together again.\n-# This gives us two tips, verify that it works.\n+- introduce a network split\n+- work on chains of different lengths\n+- join the network together again\n+- verify that getchaintips now returns two chain tips.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal"
      },
      {
        "sha": "8f35f0ab8799e017f7437550e916769747452cec",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test rpc http basics\n-#\n+\"\"\"Test the RPC HTTP basics.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "18551caaf708fff34a416c76005461859e4fc67a",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,7 +2,9 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test rescan behavior of importaddress, importpubkey, importprivkey, and\n+\"\"\"Test wallet import RPCs.\n+\n+Test rescan behavior of importaddress, importpubkey, importprivkey, and\n importmulti RPCs with different types of keys and rescan options.\n \n In the first part of the test, node 0 creates an address for each type of"
      },
      {
        "sha": "015336effef3d88c25c555ec7e60c9eed813b8de",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test the importmulti RPC.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "a94112465635a04de7307aa3b11621930929eb91",
        "filename": "qa/rpc-tests/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importprunedfunds.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test the importprunedfunds and removeprunedfunds RPCs.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "92e65927d571c99172750e2a5043f9bdc1e47d26",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test InvalidateBlock code\n-#\n+\"\"\"Test the invalidateblock RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "eabc0db8df58325aec01794fcf2af2f287ba4240",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,14 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node responses to invalid blocks.\n+\n+In this test we connect to one node over p2p, and test block requests:\n+1) Valid blocks should be requested and become chain tip.\n+2) Invalid block with duplicated transaction should be re-requested.\n+3) Invalid block with bad coinbase value should be rejected and not\n+re-requested.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -10,15 +18,6 @@\n import copy\n import time\n \n-\n-'''\n-In this test we connect to one node over p2p, and test block requests:\n-1) Valid blocks should be requested and become chain tip.\n-2) Invalid block with duplicated transaction should be re-requested.\n-3) Invalid block with bad coinbase value should be rejected and not\n-re-requested.\n-'''\n-\n # Use the ComparisonTestFramework with 1 node: only use --testbinary.\n class InvalidBlockRequestTest(ComparisonTestFramework):\n "
      },
      {
        "sha": "a9ac231f096a9baf8c58396c3e66c70000992aae",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,16 +2,17 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test node responses to invalid transactions.\n+\n+In this test we connect to one node over p2p, and test tx requests.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.comptool import TestManager, TestInstance, RejectResult\n from test_framework.blocktools import *\n import time\n \n \n-'''\n-In this test we connect to one node over p2p, and test tx requests.\n-'''\n \n # Use the ComparisonTestFramework with 1 node: only use --testbinary.\n class InvalidTxRequestTest(ComparisonTestFramework):"
      },
      {
        "sha": "4b9936a1fd9659382547490f3cb060d1969b43d9",
        "filename": "qa/rpc-tests/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/keypool.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Exercise the wallet keypool, and interaction with wallet encryption/locking\n+\"\"\"Test the wallet keypool and interaction with wallet encryption/locking.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "88304af5b006a7ead00d004d0bb1e601c6f97860",
        "filename": "qa/rpc-tests/listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listsinceblock.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the listsincelast RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal"
      },
      {
        "sha": "92fb96c8091e1b7b953558cfeb55736862a29fbc",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Exercise the listtransactions API\n+\"\"\"Test the listtransactions API.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "8ea405b4d57802ca833c72c9bda758c2f60397b6",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,18 +2,19 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test nodes responses to having many blocks in flight.\n+\n+In this test we connect to one node over p2p, send it numerous inv's, and\n+compare the resulting number of getdata requests to a max allowed value.  We\n+test for exceeding 128 blocks in flight, which was the limit an 0.9 client will\n+reach. [0.10 clients shouldn't request more than 16 from a single peer.]\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import logging\n \n-'''\n-In this test we connect to one node over p2p, send it numerous inv's, and\n-compare the resulting number of getdata requests to a max allowed value.  We\n-test for exceeding 128 blocks in flight, which was the limit an 0.9 client will\n-reach. [0.10 clients shouldn't request more than 16 from a single peer.]\n-'''\n MAX_REQUESTS = 128\n \n class TestManager(NodeConnCB):"
      },
      {
        "sha": "757aa60afd92fda02bf90a0e90105d8b3a4601e9",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,21 +2,19 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import time\n-\n-'''\n-Test behavior of -maxuploadtarget.\n+\"\"\"Test behavior of -maxuploadtarget.\n \n * Verify that getdata requests for old blocks (>1week) are dropped\n if uploadtarget has been reached.\n * Verify that getdata requests for recent blocks are respecteved even\n if uploadtarget has been reached.\n * Verify that the upload counters are reset after 24 hours.\n-'''\n+\"\"\"\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n \n # TestNode: bare-bones \"peer\".  Used mostly as a conduit for a test to sending\n # p2p messages to a node, generating the messages in the main testing logic."
      },
      {
        "sha": "8fae92ad2b0dda678e2d0176f926ece9a8aa2b92",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test mempool limiting together/eviction with the wallet\n+\"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "388889d07c03b37bdfbd88435c1ce2f53ffaaefc",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test descendant package tracking code\n+\"\"\"Test descendant package tracking code.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "2cd5573277cb18acbbd8383673507294d327e4b1",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,11 +2,11 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool re-org scenarios.\n \n-#\n-# Test re-org scenarios with a mempool that contains transactions\n-# that spend (directly or indirectly) coinbase transactions.\n-#\n+Test re-org scenarios with a mempool that contains transactions\n+that spend (directly or indirectly) coinbase transactions.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "c7f37aaa449b8967681bd7c45b338868e954ac8b",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,11 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test resurrection of mined transactions when\n-# the blockchain is re-organized.\n-#\n+\"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "da8485e2a271c53dfb83df733ce6f490afb07339",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,16 +2,15 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test spending coinbase transactions.\n-# The coinbase transaction in block N can appear in block\n-# N+100... so is valid in the mempool when the best block\n-# height is N+99.\n-# This test makes sure coinbase spends that will be mature\n-# in the next block are accepted into the memory pool,\n-# but less mature coinbase spends are NOT.\n-#\n+\"\"\"Test spending coinbase transactions.\n+\n+The coinbase transaction in block N can appear in block\n+N+100... so is valid in the mempool when the best block\n+height is N+99.\n+This test makes sure coinbase spends that will be mature\n+in the next block are accepted into the memory pool,\n+but less mature coinbase spends are NOT.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "c4b45425d7c9bcac95e44a1e20a12379ad10734d",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test merkleblock fetch/validation\n-#\n+\"\"\"Test gettxoutproof and verifytxoutproof RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "3b74bf1c4625181bc45f6924df25595894ec8b47",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test multiple rpc user config option rpcauth\n-#\n+\"\"\"Test multiple RPC users.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import str_to_b64str, assert_equal"
      },
      {
        "sha": "89059d276080978a501a13f34a3693767adb2451",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test node handling\n-#\n+\"\"\"Test node handling.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "66c4e90f21de9676598f2a372fad53287dc39a63",
        "filename": "qa/rpc-tests/nulldummy.py",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nulldummy.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,16 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test NULLDUMMY softfork.\n+\n+Connect to a single node.\n+Generate 2 blocks (save the coinbases for later).\n+Generate 427 more blocks.\n+[Policy/Consensus] Check that NULLDUMMY compliant transactions are accepted in the 430th block.\n+[Policy] Check that non-NULLDUMMY transactions are rejected before activation.\n+[Consensus] Check that the new NULLDUMMY rules are not enforced on the 431st block.\n+[Policy/Consensus] Check that the new NULLDUMMY rules are enforced on the 432nd block.\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -25,17 +35,6 @@ def trueDummy(tx):\n     tx.vin[0].scriptSig = CScript(newscript)\n     tx.rehash()\n \n-'''\n-This test is meant to exercise NULLDUMMY softfork.\n-Connect to a single node.\n-Generate 2 blocks (save the coinbases for later).\n-Generate 427 more blocks.\n-[Policy/Consensus] Check that NULLDUMMY compliant transactions are accepted in the 430th block.\n-[Policy] Check that non-NULLDUMMY transactions are rejected before activation.\n-[Consensus] Check that the new NULLDUMMY rules are not enforced on the 431st block.\n-[Policy/Consensus] Check that the new NULLDUMMY rules are enforced on the 432nd block.\n-'''\n-\n class NULLDUMMYTest(BitcoinTestFramework):\n \n     def __init__(self):"
      },
      {
        "sha": "2f21fa149af27823d5f1ab5a9ccbf8e84f88216c",
        "filename": "qa/rpc-tests/p2p-acceptblock.py",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-acceptblock.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,15 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import time\n-from test_framework.blocktools import create_block, create_coinbase\n-\n-'''\n-AcceptBlockTest -- test processing of unrequested blocks.\n+\"\"\"Test processing of unrequested blocks.\n \n Since behavior differs when receiving unrequested blocks from whitelisted peers\n versus non-whitelisted peers, this tests the behavior of both (effectively two\n@@ -54,7 +46,13 @@\n \n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n-'''\n+\"\"\"\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+from test_framework.blocktools import create_block, create_coinbase\n \n # TestNode: bare-bones \"peer\".  Used mostly as a conduit for a test to sending\n # p2p messages to a node, generating the messages in the main testing logic."
      },
      {
        "sha": "79561f35f7c7633cfa9033565596b4d8b67fb10e",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,20 +2,18 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test compact blocks (BIP 152).\n+\n+Version 1 compact blocks are pre-segwit (txids)\n+Version 2 compact blocks are post-segwit (wtxids)\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.script import CScript, OP_TRUE\n \n-'''\n-CompactBlocksTest -- test compact blocks (BIP 152)\n-\n-Version 1 compact blocks are pre-segwit (txids)\n-Version 2 compact blocks are post-segwit (wtxids)\n-'''\n-\n # TestNode: A peer we use to send messages to bitcoind, and store responses.\n class TestNode(SingleNodeConnCB):\n     def __init__(self):"
      },
      {
        "sha": "1c62961db0b9762060102acc3585895af82ce8b3",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,16 +2,13 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n+\"\"\"Test processing of feefilter messages.\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import time\n \n-'''\n-FeeFilterTest -- test processing of feefilter messages\n-'''\n \n def hashToHex(hash):\n     return format(hash, '064x')"
      },
      {
        "sha": "274dbb8a925f05606aea2d79d19ffcefe8eb078b",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,14 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test block processing.\n+\n+This reimplements tests from the bitcoinj/FullBlockTestGenerator used\n+by the pull-tester.\n+\n+We use the testing framework in which we expect a particular answer from\n+each test.\n+\"\"\"\n \n from test_framework.test_framework import ComparisonTestFramework\n from test_framework.util import *\n@@ -17,14 +25,6 @@ def __init__(self, tx = CTransaction(), n = -1):\n         self.tx = tx\n         self.n = n  # the output we're spending\n \n-'''\n-This reimplements tests from the bitcoinj/FullBlockTestGenerator used\n-by the pull-tester.\n-\n-We use the testing framework in which we expect a particular answer from\n-each test.\n-'''\n-\n #  Use this class for tests that require behavior other than normal \"mininode\" behavior.\n #  For now, it is used to serialize a bloated varint (b64).\n class CBrokenBlock(CBlock):"
      },
      {
        "sha": "bf08ea32f4acc847f7422e76c5171e0305e4b322",
        "filename": "qa/rpc-tests/p2p-leaktests.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-leaktests.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,20 +2,18 @@\n # Copyright (c) 2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n-'''\n-Test for message sending before handshake completion\n+\"\"\"Test message sending before handshake completion.\n \n A node should never send anything other than VERSION/VERACK/REJECT until it's\n received a VERACK.\n \n This test connects to a node and sends it a few messages, trying to intice it\n into sending us something it shouldn't.\n-'''\n+\"\"\"\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n \n banscore = 10\n "
      },
      {
        "sha": "c6b149021151f677339bd35f375118829285d89e",
        "filename": "qa/rpc-tests/p2p-mempool.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-mempool.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,11 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test p2p mempool message.\n+\n+Test that nodes are disconnected if they send mempool messages when bloom\n+filters are not enabled.\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "470a5398b661ce2b84c11bd69616750612075701",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -21,9 +22,6 @@\n \n MAX_SIGOP_COST = 80000\n \n-'''\n-SegWit p2p test.\n-'''\n \n # Calculate the virtual size of a witness block:\n # (base + witness/4)"
      },
      {
        "sha": "7f596b6e4b4bfc61e1847eb86d3a9b16badcccd3",
        "filename": "qa/rpc-tests/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-timeouts.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\" TimeoutsTest -- test various net timeouts (only in extended tests)\n+\"\"\"Test various net timeouts.\n \n - Create three bitcoind nodes:\n "
      },
      {
        "sha": "8e3e361fc17a84bbf47b79f0e29e5e11b6f450a2",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,11 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test version bits warning system.\n+\n+Generate chains with block versions that appear to be signalling unknown\n+soft-forks, and test that warning alerts are generated.\n+\"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n@@ -10,13 +15,6 @@\n import time\n from test_framework.blocktools import create_block, create_coinbase\n \n-'''\n-Test version bits' warning system.\n-\n-Generate chains with block versions that appear to be signalling unknown\n-soft-forks, and test that warning alerts are generated.\n-'''\n-\n VB_PERIOD = 144 # versionbits period length for regtest\n VB_THRESHOLD = 108 # versionbits activation threshold for regtest\n VB_TOP_BITS = 0x20000000"
      },
      {
        "sha": "dde164f329093e549ba0e25e2b48aa0907992584",
        "filename": "qa/rpc-tests/preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/preciousblock.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test PreciousBlock code\n-#\n+\"\"\"Test the preciousblock RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "9a63d0838f2e336ffb93ab4027a0d5001ab943d1",
        "filename": "qa/rpc-tests/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/prioritise_transaction.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test PrioritiseTransaction code\n-#\n+\"\"\"Test the prioritisetransaction mining RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "e4e231f3120a094186c555f6927bd88f2fe73c39",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,20 +2,8 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bitcoind with different proxy configuration.\n \n-import socket\n-import os\n-\n-from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    PORT_MIN,\n-    PORT_RANGE,\n-    start_nodes,\n-    assert_equal,\n-)\n-from test_framework.netutil import test_ipv6_local\n-'''\n Test plan:\n - Start bitcoind's with different proxy configurations\n - Use addnode to initiate connections\n@@ -37,7 +25,20 @@\n addnode connect to IPv6\n addnode connect to onion\n addnode connect to generic DNS name\n-'''\n+\"\"\"\n+\n+import socket\n+import os\n+\n+from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    PORT_MIN,\n+    PORT_RANGE,\n+    start_nodes,\n+    assert_equal,\n+)\n+from test_framework.netutil import test_ipv6_local\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n "
      },
      {
        "sha": "ace8ced42292e4478617f322a0bc00a0dc789767",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,14 +2,12 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the pruning code.\n \n-#\n-# Test pruning code\n-# ********\n-# WARNING:\n-# This test uses 4GB of disk space.\n-# This test takes 30 mins or more (up to 2 hours)\n-# ********\n+WARNING:\n+This test uses 4GB of disk space.\n+This test takes 30 mins or more (up to 2 hours)\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "5adef31207f86871592a35c7b6d998bbe773e561",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,14 +2,14 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"rawtranscation RPCs QA test.\n-\n-# Tests the following RPCs:\n-#    - createrawtransaction\n-#    - signrawtransaction\n-#    - sendrawtransaction\n-#    - decoderawtransaction\n-#    - getrawtransaction\n+\"\"\"Test the rawtranscation RPCs.\n+\n+Test the following RPCs:\n+   - createrawtransaction\n+   - signrawtransaction\n+   - sendrawtransaction\n+   - decoderawtransaction\n+   - getrawtransaction\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework"
      },
      {
        "sha": "248bcdbd68cbaeb917ca076167a713d160dee809",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,13 +2,11 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Exercise the listreceivedbyaddress API\n+\"\"\"Test the listreceivedbyaddress RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n def get_sub_array_from_array(object_array, to_match):\n     '''\n         Finds and returns a sub array from an array of arrays."
      },
      {
        "sha": "1b547a920f5b85b17b2a010007a44331fd1ddea3",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,13 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test running bitcoind with -reindex and -reindex-chainstate options.\n+\n+- Start a single node and generate 3 blocks.\n+- Stop the node and restart it with -reindex. Verify that the node has reindexed up to block 3.\n+- Stop the node and restart it with -reindex-chainstate. Verify that the node has reindexed up to block 3.\n+\"\"\"\n \n-#\n-# Test -reindex and -reindex-chainstate with CheckBlockIndex\n-#\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     start_nodes,"
      },
      {
        "sha": "a3c1deddf6e9bc36827cca0914c6322721043d95",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test replace by fee code\n-#\n+\"\"\"Test the RBF code.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -442,7 +439,7 @@ def test_too_many_replacements(self):\n         self.nodes[0].sendrawtransaction(double_tx_hex, True)\n \n     def test_opt_in(self):\n-        \"\"\" Replacing should only work if orig tx opted in \"\"\"\n+        \"\"\"Replacing should only work if orig tx opted in\"\"\"\n         tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n         # Create a non-opting in transaction"
      },
      {
        "sha": "9ca1cc187acd06d218a21c7f29c6f21e91195ff6",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,11 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test REST interface\n-#\n-\n+\"\"\"Test the REST API.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "499fe3367904684ce5baf825c345e1420175d1f2",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test for -rpcbind, as well as -rpcallowip and -rpcconnect\n+\"\"\"Test running bitcoind with the -rpcbind and -rpcallowip options.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "f6175c8ca7c264c969dbb4d5fa71e8f2e6f00a14",
        "filename": "qa/rpc-tests/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcnamedargs.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test using named arguments for RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "f475427842b6af088e08a221c66714141a8d376d",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test the SegWit changeover logic\n-#\n+\"\"\"Test the SegWit changeover logic.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "16ca4a49134b359c986c6aba1bc53d083c5e9f0b",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,14 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.blocktools import create_block, create_coinbase\n-\n-'''\n-SendHeadersTest -- test behavior of headers messages to announce blocks.\n+\"\"\"Test behavior of headers messages to announce blocks.\n \n Setup: \n \n@@ -78,7 +71,13 @@\n    Expect: getheaders message each time.\n e. Announce one more that doesn't connect.\n    Expect: disconnect.\n-'''\n+\"\"\"\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.blocktools import create_block, create_coinbase\n+\n \n direct_fetch_response_time = 0.05\n "
      },
      {
        "sha": "91f5abef5dee0ca1dedc259ac8ad636ce5fc8115",
        "filename": "qa/rpc-tests/signmessages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signmessages.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,13 +2,12 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test RPC commands for signing and verifying messages.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class SignMessagesTest(BitcoinTestFramework):\n-    \"\"\"Tests RPC commands for signing and verifying messages.\"\"\"\n \n     def __init__(self):\n         super().__init__()"
      },
      {
        "sha": "b24162ab976fec4ddf115b53a4753aeefdb2e14f",
        "filename": "qa/rpc-tests/signrawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/signrawtransactions.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,14 +2,13 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n \n class SignRawTransactionsTest(BitcoinTestFramework):\n-    \"\"\"Tests transaction signing via RPC command \"signrawtransaction\".\"\"\"\n-\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n@@ -20,7 +19,7 @@ def setup_network(self, split=False):\n         self.is_network_split = False\n \n     def successful_signing_test(self):\n-        \"\"\"Creates and signs a valid raw transaction with one input.\n+        \"\"\"Create and sign a valid raw transaction with one input.\n \n         Expected results:\n \n@@ -65,7 +64,7 @@ def successful_signing_test(self):\n \n \n     def script_verification_error_test(self):\n-        \"\"\"Creates and signs a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n+        \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n         Expected results:\n "
      },
      {
        "sha": "bde454968fa9fb2dac47d7855670c2aa01eca343",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test fee estimation code\n-#\n+\"\"\"Test fee estimation code.\"\"\"\n \n from collections import OrderedDict\n from test_framework.test_framework import BitcoinTestFramework\n@@ -21,15 +18,15 @@\n SCRIPT_SIG = [\"0451025175\", \"0451025275\"]\n \n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n-    '''\n+    \"\"\"\n     Create and send a transaction with a random fee.\n     The transaction pays to a trivial P2SH script, and assumes that its inputs\n     are of the same form.\n     The function takes a list of confirmed outputs and unconfirmed outputs\n     and attempts to use the confirmed list first for its inputs.\n     It adds the newly created outputs to the unconfirmed list.\n     Returns (raw transaction, fee)\n-    '''\n+    \"\"\"\n     # It's best to exponentially distribute our random fees\n     # because the buckets are exponentially spaced.\n     # Exponentially distributed from 1-128 * fee_increment\n@@ -71,12 +68,12 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n     return (completetx, fee)\n \n def split_inputs(from_node, txins, txouts, initial_split = False):\n-    '''\n+    \"\"\"\n     We need to generate a lot of very small inputs so we can generate a ton of transactions\n     and they will have low priority.\n     This function takes an input from txins, and creates and sends a transaction\n     which splits the value into 2 outputs which are appended to txouts.\n-    '''\n+    \"\"\"\n     prevtxout = txins.pop()\n     inputs = []\n     inputs.append({ \"txid\" : prevtxout[\"txid\"], \"vout\" : prevtxout[\"vout\"] })\n@@ -95,10 +92,10 @@ def split_inputs(from_node, txins, txouts, initial_split = False):\n     txouts.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : rem_change})\n \n def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n-    '''\n+    \"\"\"\n     This function calls estimatefee and verifies that the estimates\n     meet certain invariants.\n-    '''\n+    \"\"\"\n     all_estimates = [ node.estimatefee(i) for i in range(1,26) ]\n     if print_estimates:\n         print([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n@@ -151,11 +148,11 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        '''\n+        \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters.\n         But first we need to use one node to create a lot of small low priority outputs\n         which we will use to generate our transactions.\n-        '''\n+        \"\"\"\n         self.nodes = []\n         # Use node0 to mine blocks for input splitting\n         self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\","
      },
      {
        "sha": "96bebe1ea1608935a650bef2d10a45d00339df34",
        "filename": "qa/rpc-tests/test_framework/address.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/address.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,12 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# address.py\n-#\n-# This file encodes and decodes BASE58 P2PKH and P2SH addresses\n-#\n+\"\"\"Encode and decode BASE58, P2PKH and P2SH addresses.\"\"\"\n \n from .script import hash256, hash160, sha256, CScript, OP_0\n from .util import bytes_to_hex_str, hex_str_to_bytes"
      },
      {
        "sha": "9ab3094b06744fe133022e8ee82b12dfe55833e8",
        "filename": "qa/rpc-tests/test_framework/authproxy.py",
        "status": "modified",
        "additions": 33,
        "deletions": 34,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/authproxy.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -1,37 +1,36 @@\n-\n-\"\"\"\n-  Copyright (c) 2011 Jeff Garzik\n-\n-  AuthServiceProxy has the following improvements over python-jsonrpc's\n-  ServiceProxy class:\n-\n-  - HTTP connections persist for the life of the AuthServiceProxy object\n-    (if server supports HTTP/1.1)\n-  - sends protocol 'version', per JSON-RPC 1.1\n-  - sends proper, incrementing 'id'\n-  - sends Basic HTTP authentication headers\n-  - parses all JSON numbers that look like floats as Decimal\n-  - uses standard Python json lib\n-\n-  Previous copyright, from python-jsonrpc/jsonrpc/proxy.py:\n-\n-  Copyright (c) 2007 Jan-Klaas Kollhof\n-\n-  This file is part of jsonrpc.\n-\n-  jsonrpc is free software; you can redistribute it and/or modify\n-  it under the terms of the GNU Lesser General Public License as published by\n-  the Free Software Foundation; either version 2.1 of the License, or\n-  (at your option) any later version.\n-\n-  This software is distributed in the hope that it will be useful,\n-  but WITHOUT ANY WARRANTY; without even the implied warranty of\n-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-  GNU Lesser General Public License for more details.\n-\n-  You should have received a copy of the GNU Lesser General Public License\n-  along with this software; if not, write to the Free Software\n-  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+# Copyright (c) 2011 Jeff Garzik\n+#\n+# Previous copyright, from python-jsonrpc/jsonrpc/proxy.py:\n+#\n+# Copyright (c) 2007 Jan-Klaas Kollhof\n+#\n+# This file is part of jsonrpc.\n+#\n+# jsonrpc is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU Lesser General Public License as published by\n+# the Free Software Foundation; either version 2.1 of the License, or\n+# (at your option) any later version.\n+#\n+# This software is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU Lesser General Public License for more details.\n+#\n+# You should have received a copy of the GNU Lesser General Public License\n+# along with this software; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+\"\"\"HTTP proxy for opening RPC connection to bitcoind.\n+\n+AuthServiceProxy has the following improvements over python-jsonrpc's\n+ServiceProxy class:\n+\n+- HTTP connections persist for the life of the AuthServiceProxy object\n+  (if server supports HTTP/1.1)\n+- sends protocol 'version', per JSON-RPC 1.1\n+- sends proper, incrementing 'id'\n+- sends Basic HTTP authentication headers\n+- parses all JSON numbers that look like floats as Decimal\n+- uses standard Python json lib\n \"\"\"\n \n try:"
      },
      {
        "sha": "024611da6e079a7dc7d63b19824dc5fa505d9a83",
        "filename": "qa/rpc-tests/test_framework/bignum.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/bignum.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/bignum.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/bignum.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -1,15 +1,11 @@\n #!/usr/bin/env python3\n #\n-# bignum.py\n-#\n-# This file is copied from python-bitcoinlib.\n-#\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#\n-\n-\"\"\"Bignum routines\"\"\"\n+\"\"\"Big number routines.\n \n+This file is copied from python-bitcoinlib.\n+\"\"\"\n \n import struct\n "
      },
      {
        "sha": "5280d18cdc606165ee092ef68ada1d6acfa4be86",
        "filename": "qa/rpc-tests/test_framework/blockstore.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/blockstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/blockstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blockstore.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,16 +2,20 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-# BlockStore: a helper class that keeps a map of blocks and implements\n-#             helper functions for responding to getheaders and getdata,\n-#             and for constructing a getheaders message\n-#\n+\"\"\"BlockStore and TxStore helper classes.\"\"\"\n \n from .mininode import *\n from io import BytesIO\n import dbm.dumb as dbmd\n \n class BlockStore(object):\n+    \"\"\"BlockStore helper class.\n+\n+    BlockStore keeps a map of blocks and implements helper functions for\n+    responding to getheaders and getdata, and for constructing a getheaders\n+    message.\n+    \"\"\"\n+\n     def __init__(self, datadir):\n         self.blockDB = dbmd.open(datadir + \"/blocks\", 'c')\n         self.currentBlock = 0"
      },
      {
        "sha": "2c9a0857dfa8ce924f9ce2e97ee467f8570642e9",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -1,8 +1,8 @@\n #!/usr/bin/env python3\n-# blocktools.py - utilities for manipulating blocks and transactions\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Utilities for manipulating blocks and transactions.\"\"\"\n \n from .mininode import *\n from .script import CScript, OP_TRUE, OP_CHECKSIG, OP_RETURN"
      },
      {
        "sha": "b617895cac30277e4b6225dab7ce78140552e6e6",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 14,
        "deletions": 19,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,34 +2,29 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-from .mininode import *\n-from .blockstore import BlockStore, TxStore\n-from .util import p2p_port\n-\n-'''\n-This is a tool for comparing two or more bitcoinds to each other\n-using a script provided.\n+\"\"\"Compare two or more bitcoinds to each other.\n \n To use, create a class that implements get_tests(), and pass it in\n as the test generator to TestManager.  get_tests() should be a python\n generator that returns TestInstance objects.  See below for definition.\n-'''\n \n-# TestNode behaves as follows:\n-# Configure with a BlockStore and TxStore\n-# on_inv: log the message but don't request\n-# on_headers: log the chain tip\n-# on_pong: update ping response map (for synchronization)\n-# on_getheaders: provide headers via BlockStore\n-# on_getdata: provide blocks via BlockStore\n+TestNode behaves as follows:\n+    Configure with a BlockStore and TxStore\n+    on_inv: log the message but don't request\n+    on_headers: log the chain tip\n+    on_pong: update ping response map (for synchronization)\n+    on_getheaders: provide headers via BlockStore\n+    on_getdata: provide blocks via BlockStore\n+\"\"\"\n+\n+from .mininode import *\n+from .blockstore import BlockStore, TxStore\n+from .util import p2p_port\n \n global mininode_lock\n \n class RejectResult(object):\n-    '''\n-    Outcome that expects rejection of a transaction or block.\n-    '''\n+    \"\"\"Outcome that expects rejection of a transaction or block.\"\"\"\n     def __init__(self, code, reason=b''):\n         self.code = code\n         self.reason = reason"
      },
      {
        "sha": "3f87ef91f6163ed80b2a6c89acb83dadc32b8668",
        "filename": "qa/rpc-tests/test_framework/coverage.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/coverage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/coverage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/coverage.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,15 +2,12 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Utilities for doing coverage analysis on the RPC interface.\n \n-\"\"\"\n-This module contains utilities for doing coverage analysis on the RPC\n-interface.\n-\n-It provides a way to track which RPC commands are exercised during\n+Provides a way to track which RPC commands are exercised during\n testing.\n-\n \"\"\"\n+\n import os\n \n "
      },
      {
        "sha": "85a6158a2fd471ca7030a2fb8fbb47f503147b28",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -1,14 +1,10 @@\n # Copyright (c) 2011 Sam Rushing\n-#\n-# key.py - OpenSSL wrapper\n-#\n-# This file is modified from python-bitcoinlib.\n-#\n-\n-\"\"\"ECC secp256k1 crypto routines\n+\"\"\"ECC secp256k1 OpenSSL wrapper.\n \n WARNING: This module does not mlock() secrets; your private keys may end up on\n disk in swap! Use with caution!\n+\n+This file is modified from python-bitcoinlib.\n \"\"\"\n \n import ctypes"
      },
      {
        "sha": "b2292f6477482eae0b11c1a627e6f76f437cf7a0",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 15,
        "deletions": 17,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -4,23 +4,21 @@\n # Copyright (c) 2010-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# mininode.py - Bitcoin P2P network half-a-node\n-#\n-# This python code was modified from ArtForz' public domain  half-a-node, as\n-# found in the mini-node branch of http://github.com/jgarzik/pynode.\n-#\n-# NodeConn: an object which manages p2p connectivity to a bitcoin node\n-# NodeConnCB: a base class that describes the interface for receiving\n-#             callbacks with network messages from a NodeConn\n-# CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n-#     data structures that should map to corresponding structures in\n-#     bitcoin/primitives\n-# msg_block, msg_tx, msg_headers, etc.:\n-#     data structures that represent network messages\n-# ser_*, deser_*: functions that handle serialization/deserialization\n-\n+\"\"\"Bitcoin P2P network half-a-node.\n+\n+This python code was modified from ArtForz' public domain  half-a-node, as\n+found in the mini-node branch of http://github.com/jgarzik/pynode.\n+\n+NodeConn: an object which manages p2p connectivity to a bitcoin node\n+NodeConnCB: a base class that describes the interface for receiving\n+            callbacks with network messages from a NodeConn\n+CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n+    data structures that should map to corresponding structures in\n+    bitcoin/primitives\n+msg_block, msg_tx, msg_headers, etc.:\n+    data structures that represent network messages\n+ser_*, deser_*: functions that handle serialization/deserialization\n+\"\"\"\n \n import struct\n import socket"
      },
      {
        "sha": "45d8e22d2236338db616c99ae94d497558e06a92",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,8 +2,10 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Linux network utilities.\n \n-# Linux network utilities\n+Roughly based on http://voorloopnul.com/blog/a-python-netstat-in-less-than-100-lines-of-code/ by Ricardo Pascal\n+\"\"\"\n \n import sys\n import socket\n@@ -13,7 +15,6 @@\n import os\n from binascii import unhexlify, hexlify\n \n-# Roughly based on http://voorloopnul.com/blog/a-python-netstat-in-less-than-100-lines-of-code/ by Ricardo Pascal\n STATE_ESTABLISHED = '01'\n STATE_SYN_SENT  = '02'\n STATE_SYN_RECV = '03'"
      },
      {
        "sha": "3d9572788ebd016686a73f30223dd02064f8a48a",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,19 +2,11 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Functionality to build scripts, as well as SignatureHash().\n \n-#\n-# script.py\n-#\n-# This file is modified from python-bitcoinlib.\n-#\n-\n-\"\"\"Scripts\n-\n-Functionality to build scripts, as well as SignatureHash().\n+This file is modified from python-bitcoinlib.\n \"\"\"\n \n-\n from .mininode import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string\n from binascii import hexlify\n import hashlib"
      },
      {
        "sha": "f68ecad36bbbdb0016d6039fb7c711ba38285792",
        "filename": "qa/rpc-tests/test_framework/siphash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/siphash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/siphash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/siphash.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,11 +2,10 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Specialized SipHash-2-4 implementations.\n \n-#\n-# siphash.py - Specialized SipHash-2-4 implementations\n-#\n-# This implements SipHash-2-4 for 256-bit integers.\n+This implements SipHash-2-4 for 256-bit integers.\n+\"\"\"\n \n def rotl64(n, b):\n     return n >> (64 - b) | (n & ((1 << (64 - b)) - 1)) << b"
      },
      {
        "sha": "450bf3775eaa864b96e3ec77cbb0dad847b7e3ed",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,9 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-Dummy Socks5 server for testing.\n-'''\n+\"\"\"Dummy Socks5 server for testing.\"\"\"\n \n import socket, threading, queue\n import traceback, sys\n@@ -20,7 +18,7 @@ class AddressType:\n \n ### Utility functions\n def recvall(s, n):\n-    '''Receive n bytes from a socket, or fail'''\n+    \"\"\"Receive n bytes from a socket, or fail.\"\"\"\n     rv = bytearray()\n     while n > 0:\n         d = s.recv(n)\n@@ -32,15 +30,15 @@ def recvall(s, n):\n \n ### Implementation classes\n class Socks5Configuration(object):\n-    '''Proxy configuration'''\n+    \"\"\"Proxy configuration.\"\"\"\n     def __init__(self):\n         self.addr = None # Bind address (must be set)\n         self.af = socket.AF_INET # Bind address family\n         self.unauth = False  # Support unauthenticated\n         self.auth = False  # Support authentication\n \n class Socks5Command(object):\n-    '''Information about an incoming socks5 command'''\n+    \"\"\"Information about an incoming socks5 command.\"\"\"\n     def __init__(self, cmd, atyp, addr, port, username, password):\n         self.cmd = cmd # Command (one of Command.*)\n         self.atyp = atyp # Address type (one of AddressType.*)\n@@ -58,9 +56,7 @@ def __init__(self, serv, conn, peer):\n         self.peer = peer\n \n     def handle(self):\n-        '''\n-        Handle socks5 request according to RFC1928\n-        '''\n+        \"\"\"Handle socks5 request according to RFC192.\"\"\"\n         try:\n             # Verify socks version\n             ver = recvall(self.conn, 1)[0]"
      },
      {
        "sha": "c5e9c6a6589ab2e4e7f7da4905d07ddb45ccedc8",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,8 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Base class for RPC testing\n+\"\"\"Base class for RPC testing.\"\"\"\n \n import logging\n import optparse"
      },
      {
        "sha": "e838a405825a896309d73870685492c544a97ed0",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,11 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-\n-#\n-# Helpful routines for regression testing\n-#\n+\"\"\"Helpful routines for regression testing.\"\"\"\n \n import os\n import sys"
      },
      {
        "sha": "7a3b8d34744a9d28f4e4bfc4f1c5dbf4f5e4b654",
        "filename": "qa/rpc-tests/txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_clone.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test proper accounting with an equivalent malleability clone\n-#\n+\"\"\"Test the wallet accounts properly when there are cloned transactions with malleated scriptsigs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "5b12cf4c296cf905915c24bb8556b43063bd9d0b",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test proper accounting with a double-spend conflict\n-#\n+\"\"\"Test the wallet accounts properly when there is a double-spend conflict.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      },
      {
        "sha": "ea12d4ec2286127e8557335af58f953e9fca9987",
        "filename": "qa/rpc-tests/wallet-accounts.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-accounts.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,14 +2,22 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test account RPCs.\n+\n+RPCs tested are:\n+    - getaccountaddress\n+    - getaddressesbyaccount\n+    - setaccount\n+    - sendfrom (with account arguments)\n+    - move (with account arguments)\n+\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     start_nodes,\n     assert_equal,\n )\n \n-\n class WalletAccountsTest(BitcoinTestFramework):\n \n     def __init__(self):"
      },
      {
        "sha": "b819b72b75f5bd0938c533c57ff9cf17ab55a896",
        "filename": "qa/rpc-tests/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-dump.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the dumpwallet RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (start_nodes, start_node, assert_equal, bitcoind_processes)"
      },
      {
        "sha": "bf075900980d044dbec87cbcd605ca3fce595c5e",
        "filename": "qa/rpc-tests/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-hd.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,6 +2,7 @@\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test Hierarchical Deterministic wallet function.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "ddeac657e51a82c556ec385166446c25cfef5681",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n+\"\"\"Test the wallet.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "ea249096cf470fd74d1c4a11e093c740cfd171ef",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,9 +2,7 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-\"\"\"\n-Exercise the wallet backup code.  Ported from walletbackup.sh.\n+\"\"\"Test the wallet backup features.\n \n Test case is:\n 4 nodes. 1 2 and 3 send transactions between each other,"
      },
      {
        "sha": "9597d05f3a5e37ad0f1a51e96d6e1b94b95f1f8f",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,7 +2,16 @@\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the zapwallettxes functionality.\n \n+- start three bitcoind nodes\n+- create four transactions on node 0 - two are confirmed and two are\n+  unconfirmed.\n+- restart node 1 and verify that both the confirmed and the unconfirmed\n+  transactions are still available.\n+- restart node 0 and verify that the confirmed transactions are still\n+  available, but that the unconfirmed transaction has been zapped.\n+\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n "
      },
      {
        "sha": "1e2f06bd54b58ebe2bbca96502e748d52a9d1982",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "patch": "@@ -2,10 +2,7 @@\n # Copyright (c) 2015-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#\n-# Test ZMQ interface\n-#\n+\"\"\"Test the ZMQ API.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *"
      }
    ]
  },
  {
    "sha": "a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTNhNDE3Y2RjZmRmZDFmMWIzYmY5OTdiYjZmZmU2ZTY5YjA5NmI5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-23T16:35:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-23T16:36:02Z"
      },
      "message": "Merge #9823: qa: Set correct path for binaries in rpc tests\n\n3333ad0 qa: Set correct path for binaries in rpc tests (MarcoFalke)",
      "tree": {
        "sha": "1661215e941ee4eed07f74c5c339fbf030367d63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1661215e941ee4eed07f74c5c339fbf030367d63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYrw9yAAoJEC1/I3LlD+E3tn4IAK7B9pJItxp9ayuQn0gYRIca\nIoiAgIGZ2Xr6Glio/cGFpJ0u3lWV+DPoKvyALJeJ6v9PMINKSKdoT0VcOSqpsmJ5\n1ZXt7Hli648eo7MD2i7yUz5GqVSO4SsJp/vCgLpQar7t5pZq9OlfK1qVe2pQvGsl\nxXsDYrQWb1wqBKBSVP9uOViLzxTUn8+2LtElx5EMVsTGdDm2qZmEZwI/FG5kvEfQ\ny1OG08XuytZprm+cq4zZEufJ9raD1Z//Bh0WutoBiRZULm7000qn2F1xF7VLtnRV\njxI7ty6Kqd2sPkqWnQC9BzCpAThr+NPGyF/NZAGJ0NPfLB3u5U0t3tbfCN1Hl/s=\n=YavP\n-----END PGP SIGNATURE-----",
        "payload": "tree 1661215e941ee4eed07f74c5c339fbf030367d63\nparent d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8\nparent 3333ad0b63ecff582dbab8c593f1a496ffc2bbdd\nauthor MarcoFalke <falke.marco@gmail.com> 1487867753 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1487867762 +0100\n\nMerge #9823: qa: Set correct path for binaries in rpc tests\n\n3333ad0 qa: Set correct path for binaries in rpc tests (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6064a89ac97dc0d2ce9da3982e1a4e25afaeda8"
      },
      {
        "sha": "3333ad0b63ecff582dbab8c593f1a496ffc2bbdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3333ad0b63ecff582dbab8c593f1a496ffc2bbdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3333ad0b63ecff582dbab8c593f1a496ffc2bbdd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "68e11b4c2ba0f4e93efa4beac9f8c23f20224fb3",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9",
        "patch": "@@ -224,7 +224,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n \n     tests_dir = src_dir + '/qa/rpc-tests/'\n \n-    flags = [\"--srcdir=\" + src_dir] + args\n+    flags = [\"--srcdir={}/src\".format(build_dir)] + args\n     flags.append(\"--cachedir=%s/qa/cache\" % build_dir)\n \n     if enable_coverage:"
      }
    ]
  },
  {
    "sha": "692c9eddba67d5a7ceb85fa4b2632f664c68f418",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTJjOWVkZGJhNjdkNWE3Y2ViODVmYTRiMjYzMmY2NjRjNjhmNDE4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-23T18:03:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-23T18:03:14Z"
      },
      "message": "Merge #9831: build: force a c++ standard to be specified\n\n9829c54 build: force a c++ standard to be specified (Cory Fields)",
      "tree": {
        "sha": "b88223a08dfb0b2f4f1dde5a1c29fd1294182eed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b88223a08dfb0b2f4f1dde5a1c29fd1294182eed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/692c9eddba67d5a7ceb85fa4b2632f664c68f418",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYryPiAAoJEHSBCwEjRsmmAXYH/0MWeg0NQZ6w+9BVnt+QSA7W\ncFBqfIFJASeewef1er45siR3t33WSvLfKVL27c1ASy5DvmQQINPKF+z4IdCSMf0c\njdBzi2Ocl1iaO9dKuKv/fYYCAMZIkEtpFlSXoksdZRvkVDtrLb8rVrGKj90A/0EX\nCdPl0WTt2ez54uKV8ZchjTYyPY4zYVVKzwJznru+AUnlkej28RhmVtKrojBM+cJB\ni75bR7kG30dCHf0gYh+WYdx1J8WE1vheT6dYD5x7mICZWA6gtZh0qUd/Eu9y4Q0J\nGuSP8u5S1iTiYFvqvBtxvLSJ83c25JCOQ5SYNtEgyDq7kZlA4WY+5JB6r8rS5QE=\n=gIG8\n-----END PGP SIGNATURE-----",
        "payload": "tree b88223a08dfb0b2f4f1dde5a1c29fd1294182eed\nparent a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9\nparent 9829c54de2725037ee0702306cbaa99fc9aa1826\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487872991 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487872994 +0100\n\nMerge #9831: build: force a c++ standard to be specified\n\n9829c54 build: force a c++ standard to be specified (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692c9eddba67d5a7ceb85fa4b2632f664c68f418",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/692c9eddba67d5a7ceb85fa4b2632f664c68f418",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692c9eddba67d5a7ceb85fa4b2632f664c68f418/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a13a417cdcfdfd1f1b3bf997bb6ffe6e69b096b9"
      },
      {
        "sha": "9829c54de2725037ee0702306cbaa99fc9aa1826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9829c54de2725037ee0702306cbaa99fc9aa1826",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9829c54de2725037ee0702306cbaa99fc9aa1826"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f147cee3b117f80b22544976385e267b26f46dd9",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/692c9eddba67d5a7ceb85fa4b2632f664c68f418/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/692c9eddba67d5a7ceb85fa4b2632f664c68f418/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "patch": "@@ -57,16 +57,22 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n         [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n         [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n         [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n+  m4_if([$4], [], [ax_cxx_compile_cxx$1_try_default=true],\n+        [$4], [default], [ax_cxx_compile_cxx$1_try_default=true],\n+        [$4], [nodefault], [ax_cxx_compile_cxx$1_try_default=false],\n+        [m4_fatal([invalid fourth argument `$4' to AX_CXX_COMPILE_STDCXX])])\n   AC_LANG_PUSH([C++])dnl\n   ac_success=no\n+\n+  m4_if([$4], [nodefault], [], [dnl\n   AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n   ax_cv_cxx_compile_cxx$1,\n   [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n     [ax_cv_cxx_compile_cxx$1=yes],\n     [ax_cv_cxx_compile_cxx$1=no])])\n   if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n     ac_success=yes\n-  fi\n+  fi])\n \n   m4_if([$2], [noext], [], [dnl\n   if test x$ac_success = xno; then"
      },
      {
        "sha": "5a09befea249676bdba6686e40a0c0cb95477a09",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/692c9eddba67d5a7ceb85fa4b2632f664c68f418/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/692c9eddba67d5a7ceb85fa4b2632f664c68f418/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "patch": "@@ -55,7 +55,7 @@ case $host in\n   ;;\n esac\n dnl Require C++11 compiler (no GNU extensions)\n-AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory])\n+AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n dnl Check if -latomic is required for <std::atomic>\n CHECK_ATOMIC\n "
      }
    ]
  },
  {
    "sha": "f81f0d003079b96b8c33d3dfe76f90e50344bcd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODFmMGQwMDMwNzliOTZiOGMzM2QzZGZlNzZmOTBlNTAzNDRiY2Q4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-23T18:44:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-23T18:44:12Z"
      },
      "message": "Update sendfrom RPC help to correct coin selection misconception",
      "tree": {
        "sha": "90a88e1eb1eb960082c02d893d0f0816477f7373",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90a88e1eb1eb960082c02d893d0f0816477f7373"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f81f0d003079b96b8c33d3dfe76f90e50344bcd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81f0d003079b96b8c33d3dfe76f90e50344bcd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f81f0d003079b96b8c33d3dfe76f90e50344bcd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81f0d003079b96b8c33d3dfe76f90e50344bcd8/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bed5b30a5622782b35d0d28fccde979e188901f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bed5b30a5622782b35d0d28fccde979e188901f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bed5b30a5622782b35d0d28fccde979e188901f1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6b9e49038bf1f39cf716ab474ff8432679049f56",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81f0d003079b96b8c33d3dfe76f90e50344bcd8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81f0d003079b96b8c33d3dfe76f90e50344bcd8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f81f0d003079b96b8c33d3dfe76f90e50344bcd8",
        "patch": "@@ -819,6 +819,9 @@ UniValue sendfrom(const JSONRPCRequest& request)\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n+            \"                       Specifying an account does not influence coin selection, but it does associate the newly created\\n\"\n+            \"                       transaction with the account, so the account's balance computation and transaction history can reflect\\n\"\n+            \"                       the spend.\\n\"\n             \"2. \\\"toaddress\\\"         (string, required) The bitcoin address to send funds to.\\n\"\n             \"3. amount                (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\""
      }
    ]
  },
  {
    "sha": "864890adf5fefcf969f82f70949199b68b36f165",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjQ4OTBhZGY1ZmVmY2Y5NjlmODJmNzA5NDkxOTliNjhiMzZmMTY1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-23T18:05:40Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-23T19:09:43Z"
      },
      "message": "[qa] Make import-rescan.py watchonly check reliable\n\nSend payments during the test from a different node than the node generating\nkeys to be imported, so the spending node doesn't create transactions that\ninadvertently involve (spend funds from) the imported keys.\n\nFixes #9826",
      "tree": {
        "sha": "1b3ed2dff2382dc4967400b8fe1b7a2095f43404",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b3ed2dff2382dc4967400b8fe1b7a2095f43404"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/864890adf5fefcf969f82f70949199b68b36f165",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/864890adf5fefcf969f82f70949199b68b36f165",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/864890adf5fefcf969f82f70949199b68b36f165",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/864890adf5fefcf969f82f70949199b68b36f165/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bed5b30a5622782b35d0d28fccde979e188901f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bed5b30a5622782b35d0d28fccde979e188901f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bed5b30a5622782b35d0d28fccde979e188901f1"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "7f2c321746c88c229c2680c6188e94061c13cb2c",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/864890adf5fefcf969f82f70949199b68b36f165/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/864890adf5fefcf969f82f70949199b68b36f165/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=864890adf5fefcf969f82f70949199b68b36f165",
        "patch": "@@ -5,11 +5,11 @@\n \"\"\"Test rescan behavior of importaddress, importpubkey, importprivkey, and\n importmulti RPCs with different types of keys and rescan options.\n \n-In the first part of the test, node 0 creates an address for each type of\n-import RPC call and sends BTC to it. Then other nodes import the addresses,\n-and the test makes listtransactions and getbalance calls to confirm that the\n-importing node either did or did not execute rescans picking up the send\n-transactions.\n+In the first part of the test, node 1 creates an address for each type of\n+import RPC call and node 0 sends BTC to it. Then other nodes import the\n+addresses, and the test makes listtransactions and getbalance calls to confirm\n+that the importing node either did or did not execute rescans picking up the\n+send transactions.\n \n In the second part of the test, node 0 sends more BTC to each address, and the\n test makes more listtransactions and getbalance calls to confirm that the\n@@ -81,6 +81,12 @@ def check(self, txid=None, amount=None, confirmations=None):\n             assert_equal(tx[\"txid\"], txid)\n             assert_equal(tx[\"confirmations\"], confirmations)\n             assert_equal(\"trusted\" not in tx, True)\n+            # Verify the transaction is correctly marked watchonly depending on\n+            # whether the transaction pays to an imported public key or\n+            # imported private key. The test setup ensures that transaction\n+            # inputs will not be from watchonly keys (important because\n+            # involvesWatchonly will be true if either the transaction output\n+            # or inputs are watchonly).\n             if self.data != Data.priv:\n                 assert_equal(tx[\"involvesWatchonly\"], True)\n             else:\n@@ -106,11 +112,11 @@ def check(self, txid=None, amount=None, confirmations=None):\n class ImportRescanTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 1 + len(IMPORT_NODES)\n+        self.num_nodes = 2 + len(IMPORT_NODES)\n \n     def setup_network(self):\n         extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n-        for i, import_node in enumerate(IMPORT_NODES, 1):\n+        for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n@@ -123,9 +129,9 @@ def run_test(self):\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.label = \"label {} {}\".format(i, variant)\n-            variant.address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(variant.label))\n-            variant.key = self.nodes[0].dumpprivkey(variant.address[\"address\"])\n-            variant.initial_amount = 25 - (i + 1) / 4.0\n+            variant.address = self.nodes[1].validateaddress(self.nodes[1].getnewaddress(variant.label))\n+            variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n+            variant.initial_amount = 10 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n \n         # Generate a block containing the initial transactions, then another\n@@ -142,7 +148,7 @@ def run_test(self):\n         for variant in IMPORT_VARIANTS:\n             variant.expect_disabled = variant.rescan == Rescan.yes and variant.prune and variant.call == Call.single\n             expect_rescan = variant.rescan == Rescan.yes and not variant.expect_disabled\n-            variant.node = self.nodes[1 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n+            variant.node = self.nodes[2 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n             variant.do_import(timestamp)\n             if expect_rescan:\n                 variant.expected_balance = variant.initial_amount\n@@ -156,7 +162,7 @@ def run_test(self):\n         # Create new transactions sending to each address.\n         fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n         for i, variant in enumerate(IMPORT_VARIANTS):\n-            variant.sent_amount = 25 - (2 * i + 1) / 8.0\n+            variant.sent_amount = 10 - (2 * i + 1) / 8.0\n             variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)\n \n         # Generate a block containing the new transactions."
      }
    ]
  },
  {
    "sha": "ef9f495e931fad1e356757d6a40092596aa0205c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjlmNDk1ZTkzMWZhZDFlMzU2NzU3ZDZhNDAwOTI1OTZhYTAyMDVj",
    "commit": {
      "author": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-02-23T07:38:41Z"
      },
      "committer": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-02-24T00:19:29Z"
      },
      "message": "Trivial: fix comments referencing AppInit2\n\nIt was refactored into multiple functions in\n0cc8b6bc44bea29e24fa4e13d8a9bbe4f1483680.",
      "tree": {
        "sha": "620db571adbb0231123807bf49170504fed38e3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/620db571adbb0231123807bf49170504fed38e3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef9f495e931fad1e356757d6a40092596aa0205c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef9f495e931fad1e356757d6a40092596aa0205c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef9f495e931fad1e356757d6a40092596aa0205c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef9f495e931fad1e356757d6a40092596aa0205c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/692c9eddba67d5a7ceb85fa4b2632f664c68f418"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "196b840cb7d880e3141322736c82dfeb70334196",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef9f495e931fad1e356757d6a40092596aa0205c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef9f495e931fad1e356757d6a40092596aa0205c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ef9f495e931fad1e356757d6a40092596aa0205c",
        "patch": "@@ -118,10 +118,6 @@ static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n // threads that should only be stopped after the main network-processing\n // threads have exited.\n //\n-// Note that if running -daemon the parent process returns from AppInit2\n-// before adding any threads to the threadGroup, so .join_all() returns\n-// immediately and the parent exits from main().\n-//\n // Shutdown for Qt is very similar, only it uses a QTimer to detect\n // fRequestShutdown getting set, and then does the normal Qt\n // shutdown thing.\n@@ -188,7 +184,7 @@ void Shutdown()\n     if (!lockShutdown)\n         return;\n \n-    /// Note: Shutdown() must be able to handle cases in which AppInit2() failed part of the way,\n+    /// Note: Shutdown() must be able to handle cases in which initialization failed part of the way,\n     /// for example if the data directory was found to be locked.\n     /// Be sure that anything that writes files or flushes caches only does this if the respective\n     /// module was initialized."
      },
      {
        "sha": "c31dea20677a4baa8f41e31ee9eb616610e8039f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef9f495e931fad1e356757d6a40092596aa0205c/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef9f495e931fad1e356757d6a40092596aa0205c/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ef9f495e931fad1e356757d6a40092596aa0205c",
        "patch": "@@ -268,7 +268,7 @@ void BitcoinCore::initialize()\n {\n     try\n     {\n-        qDebug() << __func__ << \": Running AppInit2 in thread\";\n+        qDebug() << __func__ << \": Running initialization in thread\";\n         if (!AppInitBasicSetup())\n         {\n             Q_EMIT initializeResult(false);\n@@ -457,7 +457,7 @@ void BitcoinApplication::initializeResult(int retval)\n     returnValue = retval ? 0 : 1;\n     if(retval)\n     {\n-        // Log this only after AppInit2 finishes, as then logging setup is guaranteed complete\n+        // Log this only after AppInitMain finishes, as then logging setup is guaranteed complete\n         qWarning() << \"Platform customization:\" << platformStyle->getName();\n #ifdef ENABLE_WALLET\n         PaymentServer::LoadRootCAs();"
      },
      {
        "sha": "6f47b725fbd04ead04f2621611fe56963bba364d",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef9f495e931fad1e356757d6a40092596aa0205c/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef9f495e931fad1e356757d6a40092596aa0205c/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=ef9f495e931fad1e356757d6a40092596aa0205c",
        "patch": "@@ -90,7 +90,8 @@ class CSignatureCache\n static CSignatureCache signatureCache;\n }\n \n-// To be called once in AppInit2/TestingSetup to initialize the signatureCache\n+// To be called once in AppInitMain/BasicTestingSetup to initialize the\n+// signatureCache.\n void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,"
      }
    ]
  },
  {
    "sha": "30aedcbdb41132d37584af25578fe3d8176559c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGFlZGNiZGI0MTEzMmQzNzU4NGFmMjU1NzhmZTNkODE3NjU1OWMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-24T01:59:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-02-24T01:59:52Z"
      },
      "message": "BIP32 extra test vector",
      "tree": {
        "sha": "f1dd16eb215ec19d7e61a3c5d11491f079aba6ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1dd16eb215ec19d7e61a3c5d11491f079aba6ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30aedcbdb41132d37584af25578fe3d8176559c3",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30aedcbdb41132d37584af25578fe3d8176559c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30aedcbdb41132d37584af25578fe3d8176559c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30aedcbdb41132d37584af25578fe3d8176559c3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/692c9eddba67d5a7ceb85fa4b2632f664c68f418"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c148ad6d82d97c71a4bc30a1c2f0aac5c236c29e",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30aedcbdb41132d37584af25578fe3d8176559c3/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30aedcbdb41132d37584af25578fe3d8176559c3/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=30aedcbdb41132d37584af25578fe3d8176559c3",
        "patch": "@@ -78,6 +78,15 @@ TestVector test2 =\n      \"xprvA2nrNbFZABcdryreWet9Ea4LvTJcGsqrMzxHx98MMrotbir7yrKCEXw7nadnHM8Dq38EGfSh6dqA9QWTyefMLEcBYJUuekgW4BYPJcr9E7j\",\n      0);\n \n+TestVector test3 =\n+  TestVector(\"4b381541583be4423346c643850da4b320e46a87ae3d2a4e6da11eba819cd4acba45d239319ac14f863b8d5ab5a0d0c64d2e8a1e7d1457df2e5a3c51c73235be\")\n+    (\"xpub661MyMwAqRbcEZVB4dScxMAdx6d4nFc9nvyvH3v4gJL378CSRZiYmhRoP7mBy6gSPSCYk6SzXPTf3ND1cZAceL7SfJ1Z3GC8vBgp2epUt13\",\n+     \"xprv9s21ZrQH143K25QhxbucbDDuQ4naNntJRi4KUfWT7xo4EKsHt2QJDu7KXp1A3u7Bi1j8ph3EGsZ9Xvz9dGuVrtHHs7pXeTzjuxBrCmmhgC6\",\n+      0x80000000)\n+    (\"xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y\",\n+     \"xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L\",\n+      0);\n+\n void RunTest(const TestVector &test) {\n     std::vector<unsigned char> seed = ParseHex(test.strHexMaster);\n     CExtKey key;\n@@ -146,4 +155,8 @@ BOOST_AUTO_TEST_CASE(bip32_test2) {\n     RunTest(test2);\n }\n \n+BOOST_AUTO_TEST_CASE(bip32_test3) {\n+    RunTest(test3);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "dc222f8f634d5bb82d4646f9a17f0d40a60bcf60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzIyMmY4ZjYzNGQ1YmI4MmQ0NjQ2ZjlhMTdmMGQ0MGE2MGJjZjYw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-01-23T01:12:02Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-02-24T06:06:37Z"
      },
      "message": "Trivial: Rephrase the definition of difficulty in the code.",
      "tree": {
        "sha": "6c448f6db4bb1839130892c853fc4f991c81622e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c448f6db4bb1839130892c853fc4f991c81622e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc222f8f634d5bb82d4646f9a17f0d40a60bcf60",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJYr81uAAoJEFevdi2zNTMizMIP/0LOSYTkePEAg/hJOY5CWq4x\n8QOxHtUtoqUanua8f2Jjbq9DXXcg0L2pS7eHTq7+K/Le3iYE3K1pp7y4th02/Arb\n+6rcUIYoWSITE73/gelAlpCfH7KdHreQc48aGT1KviCbCvryjqQJBsw3DAmef29x\niNEEmrOESt9yAYPZWfsAOplslLopST6kIwAfV8J/wgdpL0FVRegskD2vM5U4LYbV\nSdFOsn2+KPqEbgsEo9yPTuRxChSv5fEy7FUsAykt1UW+aV1LA7QQakvXTwKrWjK5\njGwBRV4P0U4giDRl+B8drSlfsmoUDVEMEkT3shHdLf1fcp90eeEWltoOKPJOCzvN\nPSypghm2nvu3g5XQyOLt2k14bFAara3XLaiEuds1pAt7AKWusSupg6hXPzIuQ99s\nplsoSLZHGEnOvOMEybcimwXw6s4PR2EyNGtzTqVkdr5mx/8EAhfEotSYUNjNmay8\nxuBDNjXugBmXHRCnykHrkFsXcPT9q5l2Db1EbFFq64ldmI018t1jqVnRQpqYMiBQ\nbyOc31zXxbJXLg38Z66VoRRgJYAuoEJoEjmotGM86lJWeWP9QkJVnmLgU4zj549F\nMVngXZdN/HfISorKfIX51mcZlJ/PM5qmWE08UcmteSX9CQ5j6nbVDDYovel81xAM\nvDq63fkM40nkOOuFMtIl\n=Q5SJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c448f6db4bb1839130892c853fc4f991c81622e\nparent 692c9eddba67d5a7ceb85fa4b2632f664c68f418\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1485133922 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1487916397 -0800\n\nTrivial: Rephrase the definition of difficulty in the code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc222f8f634d5bb82d4646f9a17f0d40a60bcf60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc222f8f634d5bb82d4646f9a17f0d40a60bcf60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc222f8f634d5bb82d4646f9a17f0d40a60bcf60/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/692c9eddba67d5a7ceb85fa4b2632f664c68f418"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6826ce4a79f8e2948956e5980eac66e49d6d8779",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc222f8f634d5bb82d4646f9a17f0d40a60bcf60/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc222f8f634d5bb82d4646f9a17f0d40a60bcf60/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=dc222f8f634d5bb82d4646f9a17f0d40a60bcf60",
        "patch": "@@ -43,10 +43,15 @@ static CUpdatedBlock latestblock;\n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n \n+/**\n+ * Get the difficulty of the net wrt to the given block index, or the chain tip if\n+ * not provided.\n+ *\n+ * @return A floating point number that is a multiple of the main net minimum\n+ * difficulty (4295032833 hashes).\n+ */\n double GetDifficulty(const CBlockIndex* blockindex)\n {\n-    // Floating point number that is a multiple of the minimum difficulty,\n-    // minimum difficulty = 1.0.\n     if (blockindex == NULL)\n     {\n         if (chainActive.Tip() == NULL)"
      }
    ]
  },
  {
    "sha": "00285cece814e28f9c9807fe31f3fbc5cadb6044",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDI4NWNlY2U4MTRlMjhmOWM5ODA3ZmUzMWYzZmJjNWNhZGI2MDQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-24T09:21:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-24T09:22:04Z"
      },
      "message": "Merge #9840: Update sendfrom RPC help to correct coin selection misconception\n\nf81f0d0 Update sendfrom RPC help to correct coin selection misconception (Russell Yanofsky)",
      "tree": {
        "sha": "8394bfb0330faa33d16230af259ed448fd454fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8394bfb0330faa33d16230af259ed448fd454fc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00285cece814e28f9c9807fe31f3fbc5cadb6044",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYr/s8AAoJEHSBCwEjRsmm+cAH/1jS2bxJtrG2/UUwIt+H6EHT\nLj3PjuoffZG7gs+7ZRj1JI2pxZUghTvpasad2bzBnGLz1ultmqMZIxPcWNUMjLLG\njr9hzw4v/lLs8ZEQgPkQaE9IstiXb9soq3IwCQO1eFRxnkdVK+oVAqI6XUcfChed\nYrw8w3io+gRzZ0OJzfkPCxprYZG5ogVmif4XS2jNtTghLT7YxXn8efk7rjeVmOr8\n8lm3l9g1oHBg77/K4Hr5xMqV2WFswHh6+0q0JDcZe6eU6t7Z1Ytf/BSfA7BSSDZb\nAeWDM7Y6/fP644I9NaSGd+XSxAJeGtMpqqXGz++6JcfqJujJs6yX+NycFmZHoZg=\n=4hKe\n-----END PGP SIGNATURE-----",
        "payload": "tree 8394bfb0330faa33d16230af259ed448fd454fc5\nparent 692c9eddba67d5a7ceb85fa4b2632f664c68f418\nparent f81f0d003079b96b8c33d3dfe76f90e50344bcd8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487928119 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487928124 +0100\n\nMerge #9840: Update sendfrom RPC help to correct coin selection misconception\n\nf81f0d0 Update sendfrom RPC help to correct coin selection misconception (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00285cece814e28f9c9807fe31f3fbc5cadb6044",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00285cece814e28f9c9807fe31f3fbc5cadb6044",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00285cece814e28f9c9807fe31f3fbc5cadb6044/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/692c9eddba67d5a7ceb85fa4b2632f664c68f418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/692c9eddba67d5a7ceb85fa4b2632f664c68f418"
      },
      {
        "sha": "f81f0d003079b96b8c33d3dfe76f90e50344bcd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81f0d003079b96b8c33d3dfe76f90e50344bcd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f81f0d003079b96b8c33d3dfe76f90e50344bcd8"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6b9e49038bf1f39cf716ab474ff8432679049f56",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00285cece814e28f9c9807fe31f3fbc5cadb6044/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00285cece814e28f9c9807fe31f3fbc5cadb6044/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=00285cece814e28f9c9807fe31f3fbc5cadb6044",
        "patch": "@@ -819,6 +819,9 @@ UniValue sendfrom(const JSONRPCRequest& request)\n             + HelpRequiringPassphrase() + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n+            \"                       Specifying an account does not influence coin selection, but it does associate the newly created\\n\"\n+            \"                       transaction with the account, so the account's balance computation and transaction history can reflect\\n\"\n+            \"                       the spend.\\n\"\n             \"2. \\\"toaddress\\\"         (string, required) The bitcoin address to send funds to.\\n\"\n             \"3. amount                (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" (transaction fee is added on top).\\n\"\n             \"4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\\n\""
      }
    ]
  },
  {
    "sha": "dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDZlMGQ2MzAxNjdjMWQyYWNjMDA4ZjU2ZmRlYTZjZmRiOGU2ZTg0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-24T09:53:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-24T09:53:32Z"
      },
      "message": "Merge #9833: Trivial: fix comments referencing AppInit2\n\nef9f495 Trivial: fix comments referencing AppInit2 (Marko Bencun)",
      "tree": {
        "sha": "f3d80110006edc3ed728711f55bdb8e4802e7f2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3d80110006edc3ed728711f55bdb8e4802e7f2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYsAKcAAoJEHSBCwEjRsmmdn8H/3cgt/wq0jM50n+3ySl4d7qD\n4La8UsNYIaTs/elm14LWNgCEYD89PaeGkx9mYMfihHSwt11BRtMnQ2ogB3U3NI2a\nf6GZQAF7FLMNHhvnfBSGLKu/ym/xZKVkgC/34ZtdCv/hZ5O4VzSkrIgEaOBZjPib\n9s00G4rjLAzQa9tYljIl2Kd318MBF3ES8DnX2ivXTJD8e9/kt58JoBbS2yi0NU+L\nsM1GKu16zJs8ZCC/P6fIFHIo0wNOeb78iMDLKpkFHIu5kD6FJxWERddijZaauqIV\nbixipw/Q8m/pb0ul9JmfFg8uWcuVGWJAAbPCEXcJC7p6BXxoQXZcb/eqr8ggS7s=\n=E9DV\n-----END PGP SIGNATURE-----",
        "payload": "tree f3d80110006edc3ed728711f55bdb8e4802e7f2e\nparent 00285cece814e28f9c9807fe31f3fbc5cadb6044\nparent ef9f495e931fad1e356757d6a40092596aa0205c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487930004 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487930012 +0100\n\nMerge #9833: Trivial: fix comments referencing AppInit2\n\nef9f495 Trivial: fix comments referencing AppInit2 (Marko Bencun)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00285cece814e28f9c9807fe31f3fbc5cadb6044",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00285cece814e28f9c9807fe31f3fbc5cadb6044",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00285cece814e28f9c9807fe31f3fbc5cadb6044"
      },
      {
        "sha": "ef9f495e931fad1e356757d6a40092596aa0205c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef9f495e931fad1e356757d6a40092596aa0205c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef9f495e931fad1e356757d6a40092596aa0205c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "196b840cb7d880e3141322736c82dfeb70334196",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84",
        "patch": "@@ -118,10 +118,6 @@ static const char* FEE_ESTIMATES_FILENAME=\"fee_estimates.dat\";\n // threads that should only be stopped after the main network-processing\n // threads have exited.\n //\n-// Note that if running -daemon the parent process returns from AppInit2\n-// before adding any threads to the threadGroup, so .join_all() returns\n-// immediately and the parent exits from main().\n-//\n // Shutdown for Qt is very similar, only it uses a QTimer to detect\n // fRequestShutdown getting set, and then does the normal Qt\n // shutdown thing.\n@@ -188,7 +184,7 @@ void Shutdown()\n     if (!lockShutdown)\n         return;\n \n-    /// Note: Shutdown() must be able to handle cases in which AppInit2() failed part of the way,\n+    /// Note: Shutdown() must be able to handle cases in which initialization failed part of the way,\n     /// for example if the data directory was found to be locked.\n     /// Be sure that anything that writes files or flushes caches only does this if the respective\n     /// module was initialized."
      },
      {
        "sha": "c31dea20677a4baa8f41e31ee9eb616610e8039f",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84",
        "patch": "@@ -268,7 +268,7 @@ void BitcoinCore::initialize()\n {\n     try\n     {\n-        qDebug() << __func__ << \": Running AppInit2 in thread\";\n+        qDebug() << __func__ << \": Running initialization in thread\";\n         if (!AppInitBasicSetup())\n         {\n             Q_EMIT initializeResult(false);\n@@ -457,7 +457,7 @@ void BitcoinApplication::initializeResult(int retval)\n     returnValue = retval ? 0 : 1;\n     if(retval)\n     {\n-        // Log this only after AppInit2 finishes, as then logging setup is guaranteed complete\n+        // Log this only after AppInitMain finishes, as then logging setup is guaranteed complete\n         qWarning() << \"Platform customization:\" << platformStyle->getName();\n #ifdef ENABLE_WALLET\n         PaymentServer::LoadRootCAs();"
      },
      {
        "sha": "6f47b725fbd04ead04f2621611fe56963bba364d",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84",
        "patch": "@@ -90,7 +90,8 @@ class CSignatureCache\n static CSignatureCache signatureCache;\n }\n \n-// To be called once in AppInit2/TestingSetup to initialize the signatureCache\n+// To be called once in AppInitMain/BasicTestingSetup to initialize the\n+// signatureCache.\n void InitSignatureCache()\n {\n     // nMaxCacheSize is unsigned. If -maxsigcachesize is set to zero,"
      }
    ]
  },
  {
    "sha": "f19afdbfb4cb2223d492d5e7d4087567af9d5f28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTlhZmRiZmI0Y2IyMjIzZDQ5MmQ1ZTdkNDA4NzU2N2FmOWQ1ZjI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-24T11:48:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-24T11:48:56Z"
      },
      "message": "Merge #9612: [trivial] Rephrase the definition of difficulty.\n\ndc222f8 Trivial: Rephrase the definition of difficulty in the code. (Karl-Johan Alm)",
      "tree": {
        "sha": "a2665c989ee148efda01131fa2b68322a61b94eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2665c989ee148efda01131fa2b68322a61b94eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f19afdbfb4cb2223d492d5e7d4087567af9d5f28",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYsB2oAAoJEHSBCwEjRsmmcusIAJdmRFXgPGBjfZT9yG/ln72c\nRXTFM4tMtHJpCMWXDvMr6LYnRtDzD+S61c5C/vlnEJesr1dCu8LZXLqnXtPOUVfu\nxVxVvlGQd/gV4FNC1EJBnE4z7AJorSUCI3iNU+WEg1qL1gi2QxEzICaRh0pXQyI1\nXxVRzoto8/alf3+4tcdaVD0EVIrmXFcvJa4bRSCG+hD0AO96be6tpQbwpQ5q3+0e\nuwe+RV6OuseG1dYQk7ryzZTavOaz9IzQ6aw/u74cEMGPDY80ZYeXIMcc6dfvw2GD\nyWBE03nwSbKF9AuLL0hweZgPLhTB9jubruORQOI/hXzfuup5u61dCnkQG6PE7VQ=\n=5his\n-----END PGP SIGNATURE-----",
        "payload": "tree a2665c989ee148efda01131fa2b68322a61b94eb\nparent dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84\nparent dc222f8f634d5bb82d4646f9a17f0d40a60bcf60\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487936925 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1487936936 +0100\n\nMerge #9612: [trivial] Rephrase the definition of difficulty.\n\ndc222f8 Trivial: Rephrase the definition of difficulty in the code. (Karl-Johan Alm)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f19afdbfb4cb2223d492d5e7d4087567af9d5f28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f19afdbfb4cb2223d492d5e7d4087567af9d5f28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f19afdbfb4cb2223d492d5e7d4087567af9d5f28/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd6e0d630167c1d2acc008f56fdea6cfdb8e6e84"
      },
      {
        "sha": "dc222f8f634d5bb82d4646f9a17f0d40a60bcf60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc222f8f634d5bb82d4646f9a17f0d40a60bcf60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc222f8f634d5bb82d4646f9a17f0d40a60bcf60"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6826ce4a79f8e2948956e5980eac66e49d6d8779",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f19afdbfb4cb2223d492d5e7d4087567af9d5f28/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f19afdbfb4cb2223d492d5e7d4087567af9d5f28/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f19afdbfb4cb2223d492d5e7d4087567af9d5f28",
        "patch": "@@ -43,10 +43,15 @@ static CUpdatedBlock latestblock;\n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n void ScriptPubKeyToJSON(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n \n+/**\n+ * Get the difficulty of the net wrt to the given block index, or the chain tip if\n+ * not provided.\n+ *\n+ * @return A floating point number that is a multiple of the main net minimum\n+ * difficulty (4295032833 hashes).\n+ */\n double GetDifficulty(const CBlockIndex* blockindex)\n {\n-    // Floating point number that is a multiple of the minimum difficulty,\n-    // minimum difficulty = 1.0.\n     if (blockindex == NULL)\n     {\n         if (chainActive.Tip() == NULL)"
      }
    ]
  },
  {
    "sha": "c5f008a4166bae4350881a74fc04a87d7a5c4ed5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWYwMDhhNDE2NmJhZTQzNTA4ODFhNzRmYzA0YTg3ZDdhNWM0ZWQ1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-24T23:20:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-25T06:09:11Z"
      },
      "message": "don't throw std::bad_alloc when out of memory. Instead, terminate immediately",
      "tree": {
        "sha": "e53e2b702f66a79321fcd9f9f9a2f419ccde2387",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e53e2b702f66a79321fcd9f9f9a2f419ccde2387"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5f008a4166bae4350881a74fc04a87d7a5c4ed5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f008a4166bae4350881a74fc04a87d7a5c4ed5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f008a4166bae4350881a74fc04a87d7a5c4ed5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f008a4166bae4350881a74fc04a87d7a5c4ed5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f19afdbfb4cb2223d492d5e7d4087567af9d5f28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f19afdbfb4cb2223d492d5e7d4087567af9d5f28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f19afdbfb4cb2223d492d5e7d4087567af9d5f28"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "22c8974a595141befe91dc90ca9441614bc8f2c0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5f008a4166bae4350881a74fc04a87d7a5c4ed5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5f008a4166bae4350881a74fc04a87d7a5c4ed5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c5f008a4166bae4350881a74fc04a87d7a5c4ed5",
        "patch": "@@ -797,6 +797,19 @@ ServiceFlags nLocalServices = NODE_NETWORK;\n \n }\n \n+[[noreturn]] static void new_handler_terminate()\n+{\n+    // Rather than throwing std::bad-alloc if allocation fails, terminate\n+    // immediately to (try to) avoid chain corruption.\n+    // Since LogPrintf may itself allocate memory, set the handler directly\n+    // to terminate first.\n+    std::set_new_handler(std::terminate);\n+    LogPrintf(\"Error: Out of memory. Terminating.\\n\");\n+\n+    // The log was successful, terminate now.\n+    std::terminate();\n+};\n+\n bool AppInitBasicSetup()\n {\n     // ********************************************************* Step 1: setup\n@@ -849,6 +862,9 @@ bool AppInitBasicSetup()\n     // Ignore SIGPIPE, otherwise it will bring the daemon down if the client closes unexpectedly\n     signal(SIGPIPE, SIG_IGN);\n #endif\n+\n+    std::set_new_handler(new_handler_terminate);\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "6206252e5073c1cde2e313f2e5a3ca17582c5823",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjA2MjUyZTUwNzNjMWNkZTJlMzEzZjJlNWEzY2ExNzU4MmM1ODIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-25T09:43:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-25T09:43:29Z"
      },
      "message": "Merge #9847: Extra test vector for BIP32\n\n30aedcb BIP32 extra test vector (Pieter Wuille)",
      "tree": {
        "sha": "2eb9e2e93ebd645f295a7b3f7c43f481bf90455e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eb9e2e93ebd645f295a7b3f7c43f481bf90455e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6206252e5073c1cde2e313f2e5a3ca17582c5823",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYsVHBAAoJEHSBCwEjRsmmDtAH/0HOlWrj5bXeDzK+bcGi0Ini\nOAALVGXh3RyXq5ksqM3Y1J7xDS63bGWveZdbn/zJrUNwJqtkHZWatQNToMc/Ltsd\nVNzUtrGlwHy0I3lXQziktzjoubWlkR8DpLkAXtdwiky5nmLjNFCMir5TqoRTwaR8\nH15jcrKwiLXNaB32JNXKkQPRnGPUCYF/0BM7OWmTpcFovP/yfVOhoGm5WwfDR+HY\nNlMyZdCnesMnCsvlTFG/owJv3v4TLtTbRbOxQLNDlTGNAUbsiaXseteZSRQFx3Wf\nvVZPy192orqxbguX6n9OeFVpCbnQtxPtHKeEKVL2VbItDxi4pz+La2zOSN9i6vA=\n=i5rl\n-----END PGP SIGNATURE-----",
        "payload": "tree 2eb9e2e93ebd645f295a7b3f7c43f481bf90455e\nparent f19afdbfb4cb2223d492d5e7d4087567af9d5f28\nparent 30aedcbdb41132d37584af25578fe3d8176559c3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488015796 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488015809 +0100\n\nMerge #9847: Extra test vector for BIP32\n\n30aedcb BIP32 extra test vector (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6206252e5073c1cde2e313f2e5a3ca17582c5823",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6206252e5073c1cde2e313f2e5a3ca17582c5823",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6206252e5073c1cde2e313f2e5a3ca17582c5823/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f19afdbfb4cb2223d492d5e7d4087567af9d5f28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f19afdbfb4cb2223d492d5e7d4087567af9d5f28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f19afdbfb4cb2223d492d5e7d4087567af9d5f28"
      },
      {
        "sha": "30aedcbdb41132d37584af25578fe3d8176559c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30aedcbdb41132d37584af25578fe3d8176559c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30aedcbdb41132d37584af25578fe3d8176559c3"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c148ad6d82d97c71a4bc30a1c2f0aac5c236c29e",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6206252e5073c1cde2e313f2e5a3ca17582c5823/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6206252e5073c1cde2e313f2e5a3ca17582c5823/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=6206252e5073c1cde2e313f2e5a3ca17582c5823",
        "patch": "@@ -78,6 +78,15 @@ TestVector test2 =\n      \"xprvA2nrNbFZABcdryreWet9Ea4LvTJcGsqrMzxHx98MMrotbir7yrKCEXw7nadnHM8Dq38EGfSh6dqA9QWTyefMLEcBYJUuekgW4BYPJcr9E7j\",\n      0);\n \n+TestVector test3 =\n+  TestVector(\"4b381541583be4423346c643850da4b320e46a87ae3d2a4e6da11eba819cd4acba45d239319ac14f863b8d5ab5a0d0c64d2e8a1e7d1457df2e5a3c51c73235be\")\n+    (\"xpub661MyMwAqRbcEZVB4dScxMAdx6d4nFc9nvyvH3v4gJL378CSRZiYmhRoP7mBy6gSPSCYk6SzXPTf3ND1cZAceL7SfJ1Z3GC8vBgp2epUt13\",\n+     \"xprv9s21ZrQH143K25QhxbucbDDuQ4naNntJRi4KUfWT7xo4EKsHt2QJDu7KXp1A3u7Bi1j8ph3EGsZ9Xvz9dGuVrtHHs7pXeTzjuxBrCmmhgC6\",\n+      0x80000000)\n+    (\"xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y\",\n+     \"xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L\",\n+      0);\n+\n void RunTest(const TestVector &test) {\n     std::vector<unsigned char> seed = ParseHex(test.strHexMaster);\n     CExtKey key;\n@@ -146,4 +155,8 @@ BOOST_AUTO_TEST_CASE(bip32_test2) {\n     RunTest(test2);\n }\n \n+BOOST_AUTO_TEST_CASE(bip32_test3) {\n+    RunTest(test3);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "83ac719d34f98cc1d3efa6ece2b95145bcde8775",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2FjNzE5ZDM0Zjk4Y2MxZDNlZmE2ZWNlMmI5NTE0NWJjZGU4Nzc1",
    "commit": {
      "author": {
        "name": "Marijn Stollenga",
        "email": "m.stollenga@gmail.com",
        "date": "2017-02-26T13:01:05Z"
      },
      "committer": {
        "name": "Marijn Stollenga",
        "email": "m.stollenga@gmail.com",
        "date": "2017-02-26T13:01:05Z"
      },
      "message": "Change bitcoin address in RPC helpaddress to an invalid address, so people don't accidentally send coins there (like I did).",
      "tree": {
        "sha": "1d1e8f18eb2dcb86f9a7f322674fbab52ccab09c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d1e8f18eb2dcb86f9a7f322674fbab52ccab09c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83ac719d34f98cc1d3efa6ece2b95145bcde8775",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ac719d34f98cc1d3efa6ece2b95145bcde8775",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83ac719d34f98cc1d3efa6ece2b95145bcde8775",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ac719d34f98cc1d3efa6ece2b95145bcde8775/comments",
    "author": {
      "login": "marijnfs",
      "id": 898011,
      "node_id": "MDQ6VXNlcjg5ODAxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/898011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marijnfs",
      "html_url": "https://github.com/marijnfs",
      "followers_url": "https://api.github.com/users/marijnfs/followers",
      "following_url": "https://api.github.com/users/marijnfs/following{/other_user}",
      "gists_url": "https://api.github.com/users/marijnfs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marijnfs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marijnfs/subscriptions",
      "organizations_url": "https://api.github.com/users/marijnfs/orgs",
      "repos_url": "https://api.github.com/users/marijnfs/repos",
      "events_url": "https://api.github.com/users/marijnfs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marijnfs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "marijnfs",
      "id": 898011,
      "node_id": "MDQ6VXNlcjg5ODAxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/898011?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marijnfs",
      "html_url": "https://github.com/marijnfs",
      "followers_url": "https://api.github.com/users/marijnfs/followers",
      "following_url": "https://api.github.com/users/marijnfs/following{/other_user}",
      "gists_url": "https://api.github.com/users/marijnfs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marijnfs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marijnfs/subscriptions",
      "organizations_url": "https://api.github.com/users/marijnfs/orgs",
      "repos_url": "https://api.github.com/users/marijnfs/repos",
      "events_url": "https://api.github.com/users/marijnfs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marijnfs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6206252e5073c1cde2e313f2e5a3ca17582c5823",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6206252e5073c1cde2e313f2e5a3ca17582c5823",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6206252e5073c1cde2e313f2e5a3ca17582c5823"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "c84eab7d23866d8c0450a2f245df89c7f9eb8bd3",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83ac719d34f98cc1d3efa6ece2b95145bcde8775/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83ac719d34f98cc1d3efa6ece2b95145bcde8775/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=83ac719d34f98cc1d3efa6ece2b95145bcde8775",
        "patch": "@@ -347,11 +347,11 @@ UniValue verifymessage(const JSONRPCRequest& request)\n             \"\\nUnlock the wallet for 30 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n             \"\\nCreate the signature\\n\"\n-            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n-            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n             \"\\nAs json rpc\\n\"\n-            + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n+            + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"signature\\\", \\\"my message\\\"\")\n         );\n \n     LOCK(cs_main);\n@@ -400,7 +400,7 @@ UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             \"\\nCreate the signature\\n\"\n             + HelpExampleCli(\"signmessagewithprivkey\", \"\\\"privkey\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n-            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n             \"\\nAs json rpc\\n\"\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n         );"
      },
      {
        "sha": "d785c95ae0acd0c590fed747e9f5dd3a4fa5b80d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83ac719d34f98cc1d3efa6ece2b95145bcde8775/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83ac719d34f98cc1d3efa6ece2b95145bcde8775/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=83ac719d34f98cc1d3efa6ece2b95145bcde8775",
        "patch": "@@ -236,8 +236,8 @@ UniValue setaccount(const JSONRPCRequest& request)\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with an account.\\n\"\n             \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n         );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n@@ -283,8 +283,8 @@ UniValue getaccount(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"\\\"accountname\\\"        (string) the account address\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n-            + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleCli(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\")\n+            + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\")\n         );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n@@ -503,11 +503,11 @@ UniValue signmessage(const JSONRPCRequest& request)\n             \"\\nUnlock the wallet for 30 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n             \"\\nCreate the signature\\n\"\n-            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n-            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n             \"\\nAs json rpc\\n\"\n-            + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"my message\\\"\")\n+            + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"my message\\\"\")\n         );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n@@ -556,13 +556,13 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n-            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\") +\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\") +\n             \"\\nThe amount including unconfirmed transactions, zero confirmations\\n\"\n-            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" 0\") +\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" 0\") +\n             \"\\nThe amount with at least 6 confirmation, very safe\\n\"\n-            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" 6\") +\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" 6\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n+            + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", 6\")\n        );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n@@ -906,13 +906,13 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"                                    the number of addresses.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSend two amounts to two different addresses:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n             \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n             \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n+            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);"
      }
    ]
  },
  {
    "sha": "c7e57ce98154bccc0941f078296ba7b2eaf23e90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2U1N2NlOTgxNTRiY2NjMDk0MWYwNzgyOTZiYTdiMmVhZjIzZTkw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-27T07:44:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-27T07:46:19Z"
      },
      "message": "Merge #9839: [qa] Make import-rescan.py watchonly check reliable\n\n864890a [qa] Make import-rescan.py watchonly check reliable (Russell Yanofsky)\n\nTree-SHA512: ea0e2b1d4fc8f35174c3d575fb751b428daf6ad3aa944fad4e3ddcc9195e4f17051473acabc54203b1d27cca64cf911b737ab92e986c40ef384410652e2dbea1",
      "tree": {
        "sha": "63b29a7b6a84a90dab1f20d17a85fe1cd3dc62d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63b29a7b6a84a90dab1f20d17a85fe1cd3dc62d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7e57ce98154bccc0941f078296ba7b2eaf23e90",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYs9lLAAoJEHSBCwEjRsmmJ1YH/AisPpaxgESmFlBKNotLeGgH\n22MI+wDalXqfS1liKRE38F3tYkwJMsKFablLWUlXeFD0FM8T7/QDBLscfqYue4in\nxjiGk/sz5Ds4lSXs60bsxRXkdb5fv0KXFqLRo+f7Mxf3fBiwXH30bZiqYY0gu99K\nj/Sb1+44HWka7onpFOuSYZt3H0Ar6HX+/lNh5trjQadmXWHW9ahxVgAWbox8PTcW\n/4nEo5VbsjfkFp/ZQwLDmTQMRJZIQjT5KSozix1xFNdG3FK/Shiolmc+W7mbdn0w\nrNsRUAU9ViwwpvFHACc8FZ3pou+/Rj+LWwWB4Q/T+BEdNw5+cVU9zR9xORB/fF8=\n=U+8z\n-----END PGP SIGNATURE-----",
        "payload": "tree 63b29a7b6a84a90dab1f20d17a85fe1cd3dc62d0\nparent 6206252e5073c1cde2e313f2e5a3ca17582c5823\nparent 864890adf5fefcf969f82f70949199b68b36f165\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488181472 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488181579 +0100\n\nMerge #9839: [qa] Make import-rescan.py watchonly check reliable\n\n864890a [qa] Make import-rescan.py watchonly check reliable (Russell Yanofsky)\n\nTree-SHA512: ea0e2b1d4fc8f35174c3d575fb751b428daf6ad3aa944fad4e3ddcc9195e4f17051473acabc54203b1d27cca64cf911b737ab92e986c40ef384410652e2dbea1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e57ce98154bccc0941f078296ba7b2eaf23e90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e57ce98154bccc0941f078296ba7b2eaf23e90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e57ce98154bccc0941f078296ba7b2eaf23e90/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6206252e5073c1cde2e313f2e5a3ca17582c5823",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6206252e5073c1cde2e313f2e5a3ca17582c5823",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6206252e5073c1cde2e313f2e5a3ca17582c5823"
      },
      {
        "sha": "864890adf5fefcf969f82f70949199b68b36f165",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/864890adf5fefcf969f82f70949199b68b36f165",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/864890adf5fefcf969f82f70949199b68b36f165"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "7ca61824c9f859847647f6062a6d83d335666938",
        "filename": "qa/rpc-tests/import-rescan.py",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7e57ce98154bccc0941f078296ba7b2eaf23e90/qa/rpc-tests/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7e57ce98154bccc0941f078296ba7b2eaf23e90/qa/rpc-tests/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/import-rescan.py?ref=c7e57ce98154bccc0941f078296ba7b2eaf23e90",
        "patch": "@@ -7,11 +7,11 @@\n Test rescan behavior of importaddress, importpubkey, importprivkey, and\n importmulti RPCs with different types of keys and rescan options.\n \n-In the first part of the test, node 0 creates an address for each type of\n-import RPC call and sends BTC to it. Then other nodes import the addresses,\n-and the test makes listtransactions and getbalance calls to confirm that the\n-importing node either did or did not execute rescans picking up the send\n-transactions.\n+In the first part of the test, node 1 creates an address for each type of\n+import RPC call and node 0 sends BTC to it. Then other nodes import the\n+addresses, and the test makes listtransactions and getbalance calls to confirm\n+that the importing node either did or did not execute rescans picking up the\n+send transactions.\n \n In the second part of the test, node 0 sends more BTC to each address, and the\n test makes more listtransactions and getbalance calls to confirm that the\n@@ -83,6 +83,12 @@ def check(self, txid=None, amount=None, confirmations=None):\n             assert_equal(tx[\"txid\"], txid)\n             assert_equal(tx[\"confirmations\"], confirmations)\n             assert_equal(\"trusted\" not in tx, True)\n+            # Verify the transaction is correctly marked watchonly depending on\n+            # whether the transaction pays to an imported public key or\n+            # imported private key. The test setup ensures that transaction\n+            # inputs will not be from watchonly keys (important because\n+            # involvesWatchonly will be true if either the transaction output\n+            # or inputs are watchonly).\n             if self.data != Data.priv:\n                 assert_equal(tx[\"involvesWatchonly\"], True)\n             else:\n@@ -108,11 +114,11 @@ def check(self, txid=None, amount=None, confirmations=None):\n class ImportRescanTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 1 + len(IMPORT_NODES)\n+        self.num_nodes = 2 + len(IMPORT_NODES)\n \n     def setup_network(self):\n         extra_args = [[\"-debug=1\"] for _ in range(self.num_nodes)]\n-        for i, import_node in enumerate(IMPORT_NODES, 1):\n+        for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n@@ -125,9 +131,9 @@ def run_test(self):\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.label = \"label {} {}\".format(i, variant)\n-            variant.address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress(variant.label))\n-            variant.key = self.nodes[0].dumpprivkey(variant.address[\"address\"])\n-            variant.initial_amount = 25 - (i + 1) / 4.0\n+            variant.address = self.nodes[1].validateaddress(self.nodes[1].getnewaddress(variant.label))\n+            variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n+            variant.initial_amount = 10 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)\n \n         # Generate a block containing the initial transactions, then another\n@@ -144,7 +150,7 @@ def run_test(self):\n         for variant in IMPORT_VARIANTS:\n             variant.expect_disabled = variant.rescan == Rescan.yes and variant.prune and variant.call == Call.single\n             expect_rescan = variant.rescan == Rescan.yes and not variant.expect_disabled\n-            variant.node = self.nodes[1 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n+            variant.node = self.nodes[2 + IMPORT_NODES.index(ImportNode(variant.prune, expect_rescan))]\n             variant.do_import(timestamp)\n             if expect_rescan:\n                 variant.expected_balance = variant.initial_amount\n@@ -158,7 +164,7 @@ def run_test(self):\n         # Create new transactions sending to each address.\n         fee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n         for i, variant in enumerate(IMPORT_VARIANTS):\n-            variant.sent_amount = 25 - (2 * i + 1) / 8.0\n+            variant.sent_amount = 10 - (2 * i + 1) / 8.0\n             variant.sent_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.sent_amount)\n \n         # Generate a block containing the new transactions."
      }
    ]
  },
  {
    "sha": "0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTE3NzE0OGU3ZGJhYzJlODhkZGMxNDJmMGVmMTBjNmE0ZGU4ZWM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-27T06:43:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-27T09:02:45Z"
      },
      "message": "uint256: replace sprintf with HexStr and reverse-iterator\n\nInstead of calling sprintf for every byte, format the hex bytes\nourselves by help of HexStr and a reverse_iterator.",
      "tree": {
        "sha": "fa494a94a4bcd03d5138d5047b22c22e1b93a430",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa494a94a4bcd03d5138d5047b22c22e1b93a430"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6206252e5073c1cde2e313f2e5a3ca17582c5823",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6206252e5073c1cde2e313f2e5a3ca17582c5823",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6206252e5073c1cde2e313f2e5a3ca17582c5823"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "c4c7b716fea38e9ba09e156581665c13d20a69cf",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8",
        "patch": "@@ -20,10 +20,7 @@ base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n template <unsigned int BITS>\n std::string base_blob<BITS>::GetHex() const\n {\n-    char psz[sizeof(data) * 2 + 1];\n-    for (unsigned int i = 0; i < sizeof(data); i++)\n-        sprintf(psz + i * 2, \"%02x\", data[sizeof(data) - i - 1]);\n-    return std::string(psz, psz + sizeof(data) * 2);\n+    return HexStr(std::reverse_iterator<const uint8_t*>(data + sizeof(data)), std::reverse_iterator<const uint8_t*>(data));\n }\n \n template <unsigned int BITS>"
      }
    ]
  },
  {
    "sha": "19cafc6239abd14f2b9c3d883dc7df0472cac52b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWNhZmM2MjM5YWJkMTRmMmI5YzNkODgzZGM3ZGYwNDcyY2FjNTJi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-26T20:08:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-27T09:03:20Z"
      },
      "message": "test: Replace remaining sprintf with snprintf\n\nUse of `sprintf` is seen as a red flag as many of its uses are insecure.\nOpenBSD warns about it while compiling, and some modern platforms, e.g.\n[cloudlibc from cloudabi](https://github.com/NuxiNL/cloudlibc) don't\neven provide it anymore.\n\nAlthough our uses of these functions are secure, it can't hurt to\nreplace them anyway. There are only 3 occurences left, all in the\ntests.",
      "tree": {
        "sha": "533c6b65eb58d792750f0daf49b751924a0b1761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/533c6b65eb58d792750f0daf49b751924a0b1761"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19cafc6239abd14f2b9c3d883dc7df0472cac52b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19cafc6239abd14f2b9c3d883dc7df0472cac52b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19cafc6239abd14f2b9c3d883dc7df0472cac52b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19cafc6239abd14f2b9c3d883dc7df0472cac52b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a177148e7dbac2e88ddc142f0ef10c6a4de8ec8"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "22c90bd95bf1bae2be3dc11a9809dbcccf794992",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19cafc6239abd14f2b9c3d883dc7df0472cac52b/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19cafc6239abd14f2b9c3d883dc7df0472cac52b/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=19cafc6239abd14f2b9c3d883dc7df0472cac52b",
        "patch": "@@ -277,7 +277,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {\n-            sprintf(buf, \"%d\", x);\n+            snprintf(buf, sizeof(buf), \"%d\", x);\n             StringContentsSerializer key(buf);\n             for (int z = 0; z < y; z++)\n                 key += key;\n@@ -293,12 +293,12 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n             seek_start = 0;\n         else\n             seek_start = 5;\n-        sprintf(buf, \"%d\", seek_start);\n+        snprintf(buf, sizeof(buf), \"%d\", seek_start);\n         StringContentsSerializer seek_key(buf);\n         it->Seek(seek_key);\n         for (int x=seek_start; x<10; ++x) {\n             for (int y = 0; y < 10; y++) {\n-                sprintf(buf, \"%d\", x);\n+                snprintf(buf, sizeof(buf), \"%d\", x);\n                 std::string exp_key(buf);\n                 for (int z = 0; z < y; z++)\n                     exp_key += exp_key;"
      }
    ]
  },
  {
    "sha": "75a109338fbbe9a30c54d76010b538c8ac1080ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWExMDkzMzhmYmJlOWEzMGM1NGQ3NjAxMGI1MzhjOGFjMTA4MGFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-27T12:15:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-27T12:15:39Z"
      },
      "message": "tests: Fix dangling pwalletMain pointer in wallet tests",
      "tree": {
        "sha": "bb91b2147041f8ba65dd620b29da4e0b6afac326",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb91b2147041f8ba65dd620b29da4e0b6afac326"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75a109338fbbe9a30c54d76010b538c8ac1080ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a109338fbbe9a30c54d76010b538c8ac1080ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75a109338fbbe9a30c54d76010b538c8ac1080ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a109338fbbe9a30c54d76010b538c8ac1080ac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e57ce98154bccc0941f078296ba7b2eaf23e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e57ce98154bccc0941f078296ba7b2eaf23e90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e57ce98154bccc0941f078296ba7b2eaf23e90"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43d7e3c617d740ed047e2774c02b21872cb09f0b",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a109338fbbe9a30c54d76010b538c8ac1080ac/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a109338fbbe9a30c54d76010b538c8ac1080ac/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=75a109338fbbe9a30c54d76010b538c8ac1080ac",
        "patch": "@@ -397,6 +397,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n \n     {\n         CWallet wallet;\n+        CWallet *backup = ::pwalletMain;\n         ::pwalletMain = &wallet;\n         UniValue key;\n         key.setObject();\n@@ -412,6 +413,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n \n         UniValue response = importmulti(request);\n         BOOST_CHECK_EQUAL(response.write(), strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Failed to rescan before time %d, transactions may be missing.\\\"}}]\", newTip->GetBlockTimeMax()));\n+        ::pwalletMain = backup;\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGU1YmE5YmEyOTAxYzgyMDVjMTgxNGVjZThlMmZhZmJmZjYzYTAz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-27T12:25:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-27T12:38:51Z"
      },
      "message": "Merge #9875: tests: Fix dangling pwalletMain pointer in wallet tests\n\n75a1093 tests: Fix dangling pwalletMain pointer in wallet tests (Wladimir J. van der Laan)\n\nTree-SHA512: 7fb6e8385fe7d542f9ecb113a08d675ca9e84907a1939b3a6ad41318fda55bc999b9bc8ffc3f56cd8610ca49d0db982d3c793df7bbcb7eb9638f4483030db6a8",
      "tree": {
        "sha": "bb91b2147041f8ba65dd620b29da4e0b6afac326",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb91b2147041f8ba65dd620b29da4e0b6afac326"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYtB3bAAoJEHSBCwEjRsmmoZ8H/jFT8kUE5t/Z+IJl6Uq66AIm\nM+kCfkyl4RHkXlZHULf9CbfLg9bCUrCB2ikNLVMA+crnKW76QiWgLnixrfUdCoO7\niXZUFH+Sbok1SUTEmFukQwP2Ssq4pJcoWXqsCYjHZiT+rrrAHPR9NRZckHSQ/WER\n7q9VtPNYcvDkf3SiGS7ndTGv+0BoWCkSxilABkq6gGNQ0sCBzEGEVljJ8q4837JZ\nzn1PiQMuDTO+XclOsGsRkf8KuJUJVLUz3trfHpcyiP6E+7gv5zOlL59z1NDOK80u\nZ13QvAcYXzJXe3YTKpYSm7sbER9bazFcBLJ/4ZE24YaxU4yUL/AaPomvK6HX3bQ=\n=5VVH\n-----END PGP SIGNATURE-----",
        "payload": "tree bb91b2147041f8ba65dd620b29da4e0b6afac326\nparent c7e57ce98154bccc0941f078296ba7b2eaf23e90\nparent 75a109338fbbe9a30c54d76010b538c8ac1080ac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488198308 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488199131 +0100\n\nMerge #9875: tests: Fix dangling pwalletMain pointer in wallet tests\n\n75a1093 tests: Fix dangling pwalletMain pointer in wallet tests (Wladimir J. van der Laan)\n\nTree-SHA512: 7fb6e8385fe7d542f9ecb113a08d675ca9e84907a1939b3a6ad41318fda55bc999b9bc8ffc3f56cd8610ca49d0db982d3c793df7bbcb7eb9638f4483030db6a8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e5ba9ba2901c8205c1814ece8e2fafbff63a03/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e57ce98154bccc0941f078296ba7b2eaf23e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e57ce98154bccc0941f078296ba7b2eaf23e90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e57ce98154bccc0941f078296ba7b2eaf23e90"
      },
      {
        "sha": "75a109338fbbe9a30c54d76010b538c8ac1080ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a109338fbbe9a30c54d76010b538c8ac1080ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75a109338fbbe9a30c54d76010b538c8ac1080ac"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "43d7e3c617d740ed047e2774c02b21872cb09f0b",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94e5ba9ba2901c8205c1814ece8e2fafbff63a03/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94e5ba9ba2901c8205c1814ece8e2fafbff63a03/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "patch": "@@ -397,6 +397,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n \n     {\n         CWallet wallet;\n+        CWallet *backup = ::pwalletMain;\n         ::pwalletMain = &wallet;\n         UniValue key;\n         key.setObject();\n@@ -412,6 +413,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n \n         UniValue response = importmulti(request);\n         BOOST_CHECK_EQUAL(response.write(), strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Failed to rescan before time %d, transactions may be missing.\\\"}}]\", newTip->GetBlockTimeMax()));\n+        ::pwalletMain = backup;\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "306bd72157f089b962b9c537bbacf710a4158647",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDZiZDcyMTU3ZjA4OWI5NjJiOWM1MzdiYmFjZjcxMGE0MTU4NjQ3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-22T19:11:44Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-02-27T12:38:51Z"
      },
      "message": "Fix importmulti returning rescan errors for wrong keys\n\nBug was a missing ++i line in a new range for loop added in commit e2e2f4c\n\"Return errors from importmulti if complete rescans are not successful\"",
      "tree": {
        "sha": "6fc59408e94584a57d3551db232b79ea0df55c71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fc59408e94584a57d3551db232b79ea0df55c71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/306bd72157f089b962b9c537bbacf710a4158647",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306bd72157f089b962b9c537bbacf710a4158647",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/306bd72157f089b962b9c537bbacf710a4158647",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306bd72157f089b962b9c537bbacf710a4158647/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e5ba9ba2901c8205c1814ece8e2fafbff63a03"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 15,
      "deletions": 3
    },
    "files": [
      {
        "sha": "20a3cbda1e78bcc0646082ba9d1c3001fca77c4e",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/306bd72157f089b962b9c537bbacf710a4158647/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/306bd72157f089b962b9c537bbacf710a4158647/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=306bd72157f089b962b9c537bbacf710a4158647",
        "patch": "@@ -1098,6 +1098,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                     result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, strprintf(\"Failed to rescan before time %d, transactions may be missing.\", scannedRange->GetBlockTimeMax())));\n                     response.push_back(std::move(result));\n                 }\n+                ++i;\n             }\n         }\n     }"
      },
      {
        "sha": "7ac2112dd29e707a4d723c37aea61224b2860265",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/306bd72157f089b962b9c537bbacf710a4158647/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/306bd72157f089b962b9c537bbacf710a4158647/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=306bd72157f089b962b9c537bbacf710a4158647",
        "patch": "@@ -395,24 +395,35 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n+    // Verify importmulti RPC returns failure for a key whose creation time is\n+    // before the missing block, and success for a key whose creation time is\n+    // after.\n     {\n         CWallet wallet;\n         CWallet *backup = ::pwalletMain;\n         ::pwalletMain = &wallet;\n+        UniValue keys;\n+        keys.setArray();\n         UniValue key;\n         key.setObject();\n         key.pushKV(\"scriptPubKey\", HexStr(GetScriptForRawPubKey(coinbaseKey.GetPubKey())));\n         key.pushKV(\"timestamp\", 0);\n         key.pushKV(\"internal\", UniValue(true));\n-        UniValue keys;\n-        keys.setArray();\n+        keys.push_back(key);\n+        key.clear();\n+        key.setObject();\n+        CKey futureKey;\n+        futureKey.MakeNewKey(true);\n+        key.pushKV(\"scriptPubKey\", HexStr(GetScriptForRawPubKey(futureKey.GetPubKey())));\n+        key.pushKV(\"timestamp\", newTip->GetBlockTimeMax() + 7200);\n+        key.pushKV(\"internal\", UniValue(true));\n         keys.push_back(key);\n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back(keys);\n \n         UniValue response = importmulti(request);\n-        BOOST_CHECK_EQUAL(response.write(), strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Failed to rescan before time %d, transactions may be missing.\\\"}}]\", newTip->GetBlockTimeMax()));\n+        BOOST_CHECK_EQUAL(response.write(), strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Failed to rescan before time %d, transactions may be missing.\\\"}},{\\\"success\\\":true}]\", newTip->GetBlockTimeMax()));\n         ::pwalletMain = backup;\n     }\n }"
      }
    ]
  },
  {
    "sha": "fe71661ae16abe09dcf245ee2eb4c55c5655b219",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTcxNjYxYWUxNmFiZTA5ZGNmMjQ1ZWUyZWI0YzU1YzU2NTViMjE5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-27T17:14:14Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-02-27T17:21:40Z"
      },
      "message": "[doc] Update doc/bips.md for BIP90 implementation",
      "tree": {
        "sha": "b8fb505f84ea0e954c2dcd483e4b7a537dd5f6f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8fb505f84ea0e954c2dcd483e4b7a537dd5f6f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe71661ae16abe09dcf245ee2eb4c55c5655b219",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe71661ae16abe09dcf245ee2eb4c55c5655b219",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe71661ae16abe09dcf245ee2eb4c55c5655b219",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe71661ae16abe09dcf245ee2eb4c55c5655b219/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e5ba9ba2901c8205c1814ece8e2fafbff63a03"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bc8dcb6fb3c33cbd1d9fda2535de703c9765fdab",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe71661ae16abe09dcf245ee2eb4c55c5655b219/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe71661ae16abe09dcf245ee2eb4c55c5655b219/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=fe71661ae16abe09dcf245ee2eb4c55c5655b219",
        "patch": "@@ -20,6 +20,7 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n * [`BIP 68`](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki): Sequence locks have been implemented as of **v0.12.1**  ([PR #7184](https://github.com/bitcoin/bitcoin/pull/7184)), and have been activated since *block 419328*.\n * [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)).\n+* [`BIP 90`](https://github.com/bitcoin/bips/blob/master/bip-0090.mediawiki): Trigger mechanism for activation of BIPs 34, 65, and 66 has been simplified to block height checks since **v0.14.0** ([PR #8391](https://github.com/bitcoin/bitcoin/pull/8391)).\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, and enforced for all peer versions as of **v0.13.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579) and [PR #6641](https://github.com/bitcoin/bitcoin/pull/6641)).\n * [`BIP 112`](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki): The CHECKSEQUENCEVERIFY opcode has been implemented since **v0.12.1** ([PR #7524](https://github.com/bitcoin/bitcoin/pull/7524)) and has been activated since *block 419328*.\n * [`BIP 113`](https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki): Median time past lock-time calculations have been implemented since **v0.12.1** ([PR #6566](https://github.com/bitcoin/bitcoin/pull/6566)) and have been activated since *block 419328*."
      }
    ]
  },
  {
    "sha": "d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGVlN2JhZWY3MjlkYTVlMThiNWU1YzNkNmRkYjViOTdkZjhkNGU0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-25T06:06:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-02-27T19:52:15Z"
      },
      "message": "prevector: assert successful allocation",
      "tree": {
        "sha": "c54a3a0ef3cd5209ca34ff51d4ea57571a37133f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c54a3a0ef3cd5209ca34ff51d4ea57571a37133f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5f008a4166bae4350881a74fc04a87d7a5c4ed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5f008a4166bae4350881a74fc04a87d7a5c4ed5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5f008a4166bae4350881a74fc04a87d7a5c4ed5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cba2e30057afa39c2ea35aeccaadd54202d8b671",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef _BITCOIN_PREVECTOR_H_\n #define _BITCOIN_PREVECTOR_H_\n \n+#include <assert.h>\n #include <stdlib.h>\n #include <stdint.h>\n #include <string.h>\n@@ -170,10 +171,15 @@ class prevector {\n             }\n         } else {\n             if (!is_direct()) {\n+                /* FIXME: Because malloc/realloc here won't call new_handler if allocation fails, assert\n+                    success. These should instead use an allocator or new/delete so that handlers\n+                    are called as necessary, but performance would be slightly degraded by doing so. */\n                 _union.indirect = static_cast<char*>(realloc(_union.indirect, ((size_t)sizeof(T)) * new_capacity));\n+                assert(_union.indirect);\n                 _union.capacity = new_capacity;\n             } else {\n                 char* new_indirect = static_cast<char*>(malloc(((size_t)sizeof(T)) * new_capacity));\n+                assert(new_indirect);\n                 T* src = direct_ptr(0);\n                 T* dst = reinterpret_cast<T*>(new_indirect);\n                 memcpy(dst, src, size() * sizeof(T));"
      }
    ]
  },
  {
    "sha": "88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OGMyYWUzZWQyYmI1ZDM2N2RkNDA4YzkyNTVjZDhmMWU3YTM2Yzdk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-27T21:33:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-27T21:33:55Z"
      },
      "message": "Merge #9350: [Trivial] Adding label for amount inside of tx_valid/tx_invalid.json\n\n988ce2d Adding 'amount' label to tx_valid/tx_invalid.json files (Chris Stewart)\n\nTree-SHA512: 11c216c6565ecaa5ff4eb6122f87d3b28f89db52d1e473c0678f61c240e133698adb05e717bfb9d3db36409dfb230b902dca4029a58633be36c9f85e0db3d973",
      "tree": {
        "sha": "00c90d23c33e4a8704808d214d6fc604f888d69f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00c90d23c33e4a8704808d214d6fc604f888d69f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYtJtDAAoJEC1/I3LlD+E3EZkH/Avdog/pmkMRJAME7IBfaKy5\nKhxKVX2xfXcVzDaki4GXnLavsbUaQtueJHO1kUfj3s9icSFr0VgdCkc4QhG9qcBJ\nQNnqekd9PurbLVs8Uu/Zc/yzt1G+S5za/DWmdmDfN0FSE/D9FQ/r6ttnBbzxssan\nut4ODP5O8RdSTOAXLHX3AbwM9ymbe9bYv+GwyZpxWFZ3JRQNZsoHfYyPXn8gidSd\nG2EYEAsPKHbl6i5Ueh2Ejv8kPcF0qhl8/QQlAwwb91SzdsUCnGeINZniDAPvparY\n0XkbY068ijbl0mZWDkcSS6ljUDzcOQ9vNwgEH5iMwnpcXnDSvGby3GFmf+t6sfc=\n=pSO9\n-----END PGP SIGNATURE-----",
        "payload": "tree 00c90d23c33e4a8704808d214d6fc604f888d69f\nparent 94e5ba9ba2901c8205c1814ece8e2fafbff63a03\nparent 988ce2ddef5e23da70de6ee37759a53145c6abaf\nauthor MarcoFalke <falke.marco@gmail.com> 1488231220 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1488231235 +0100\n\nMerge #9350: [Trivial] Adding label for amount inside of tx_valid/tx_invalid.json\n\n988ce2d Adding 'amount' label to tx_valid/tx_invalid.json files (Chris Stewart)\n\nTree-SHA512: 11c216c6565ecaa5ff4eb6122f87d3b28f89db52d1e473c0678f61c240e133698adb05e717bfb9d3db36409dfb230b902dca4029a58633be36c9f85e0db3d973\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e5ba9ba2901c8205c1814ece8e2fafbff63a03"
      },
      {
        "sha": "988ce2ddef5e23da70de6ee37759a53145c6abaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/988ce2ddef5e23da70de6ee37759a53145c6abaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/988ce2ddef5e23da70de6ee37759a53145c6abaf"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2235bd0ae7d9fc0e6b50cd66604416eea3bd87f0",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
        "patch": "@@ -1,7 +1,7 @@\n [\n [\"The following are deserialized transactions which are invalid.\"],\n [\"They are in the form\"],\n-[\"[[[prevout hash, prevout index, prevout scriptPubKey], [input 2], ...],\"],\n+[\"[[[prevout hash, prevout index, prevout scriptPubKey, amount?], [input 2], ...],\"],\n [\"serializedTransaction, verifyFlags]\"],\n [\"Objects that are only a single string (like this one) are ignored\"],\n "
      },
      {
        "sha": "d70fa543337dc88b2f416628a93b5e8b99c1ef69",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
        "patch": "@@ -1,7 +1,7 @@\n [\n [\"The following are deserialized transactions which are valid.\"],\n [\"They are in the form\"],\n-[\"[[[prevout hash, prevout index, prevout scriptPubKey], [input 2], ...],\"],\n+[\"[[[prevout hash, prevout index, prevout scriptPubKey, amount?], [input 2], ...],\"],\n [\"serializedTransaction, verifyFlags]\"],\n [\"Objects that are only a single string (like this one) are ignored\"],\n "
      }
    ]
  },
  {
    "sha": "a4b02f4275c3f35492bbdde27e9295497b919a52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGIwMmY0Mjc1YzNmMzU0OTJiYmRkZTI3ZTkyOTU0OTdiOTE5YTUy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-28T01:23:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-28T01:24:20Z"
      },
      "message": "Add Pieter's old signed commits to revsig-commits",
      "tree": {
        "sha": "d209e3e115e0fb49b416e79b8827954137101eba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d209e3e115e0fb49b416e79b8827954137101eba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4b02f4275c3f35492bbdde27e9295497b919a52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b02f4275c3f35492bbdde27e9295497b919a52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4b02f4275c3f35492bbdde27e9295497b919a52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b02f4275c3f35492bbdde27e9295497b919a52/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 104,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f0088cdca4af8e96c9c53ba6d68e6a8ea44df181",
        "filename": "contrib/verify-commits/allow-revsig-commits",
        "status": "modified",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4b02f4275c3f35492bbdde27e9295497b919a52/contrib/verify-commits/allow-revsig-commits",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4b02f4275c3f35492bbdde27e9295497b919a52/contrib/verify-commits/allow-revsig-commits",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/allow-revsig-commits?ref=a4b02f4275c3f35492bbdde27e9295497b919a52",
        "patch": "@@ -0,0 +1,104 @@\n+a06ede9a138d0fb86b0de17c42b936d9fe6e2158\n+923dc447eaa8e017985b2afbbb12dd1283fbea0e\n+71148b8947fe8b4d756822420a7f31c380159425\n+6696b4635ceb9b47aaa63244bff9032fa7b08354\n+812714fd80e96e28cd288c553c83838cecbfc2d9\n+8a445c5651edb9a1f51497055b7ddf4402be9188\n+e126d0c12ca66278d9e7b12187c5ff4fc02a7e6c\n+3908fc4728059719bed0e1c7b1c8b388c2d4a8da\n+8b66bf74e2a349e71eaa183af81fa63eaee76ad2\n+05950427d310654774031764a7141a1a4fd9c6e4\n+07fd147b9f12e9205afd66a624edce357977d615\n+12e31127948fa4bb01c3bddc1b8c85b432f7465b\n+8c87f175d335e9d9e93f987d871ae9f05f6a10a7\n+46b249e578e8a3dfbe85bc7253a12e82ef4b658b\n+a55716abe5662ec74c2f8af93023f1e7cca901fc\n+f646275b90b1de93bc62b4c4d045d75ac0b96eee\n+c252685aa5867631e9a5ef07ccae7c7c25cae8ff\n+a7d55c93385359952d85decd5037843ac70ba3d4\n+7dac1e5e9e887f5f6ff146e812a05bd3bf281eae\n+2a524b8e8fe69ef487fd8ea1b4f7a03f473ed201\n+ce5c1f4acae43477989cdf9a82ed33703919cda2\n+2db4cbcc437f51f5dac82cc4de46f383b92e6f11\n+7aa700424cbda387536373d8dfec88aee43f950e\n+b99a093afed880f23fb279c443cc6ae5e379cc43\n+b83264d9c7a8ddb79f64bd9540caddc8632ef31f\n+57e337d40e94ba33d8cd265c134d6ef857b32b59\n+a1dcf2e1087beaf3981739fd2bb74f35ecad630a\n+d38b0d7a6b6056cba26999b702815775e2437d87\n+815640ec6af9a38d6a2da4a4400056e2f4105080\n+09c4fd157c5b88df2d97fad4826c79b094db90c9\n+2efcfa5acfacb958973d9e8125e1d81f102e2dfd\n+dc6dee41f7cf2ba93fcd0fea7c157e4b2775d439\n+ad826b3df9f763b49f1e3e3d50c4efdd438c7547\n+c1a52276848d8caa9a9789dff176408c1aa6b1ed\n+3bf06e9bac57b5b5a746677b75e297a7b154bdbd\n+72ae6f8cf0224370e8121d6769b21e612ca15d6f\n+a143b88dbd4971ecfdd1d39a494489c8f2db0344\n+76fec09d878d6dbf214bdb6228d480bd9195db4c\n+93566e0c37c5ae104095474fea89f00dcb40f551\n+407d9232ef5cb1ebf6cff21f3d13e07ea4158eeb\n+9346f8429957e356d21c665bab59fe45bcf1f74e\n+6eeac6e30d65f9a972067c1ea8c49978c8e631ac\n+dc6b9406bdfab2af8c86cb080cb3e6cf8f2385d8\n+9f554e03ebe5701c1b75ff03b3d6152095c0cad3\n+05009935f9ac070197113954d680bc2c9150b9b3\n+508404de98a8a5435f52916cef8f328e82651961\n+ed0cc50afed146c27f6d8129c683c225fb940093\n+6429cfa8a70308241c576aeb92ffe3db5203b2ef\n+6898213409811b140843c3d89af43328c3b22fad\n+5b2ea29cf4fd298346437bb16a54407f8c1f9dca\n+e2a1a1ee895149c544d4ae295466611f0cec3094\n+e82fb872ff5cc8fd22d43327c1ee3e755f61c562\n+19b0f33de0efd9da788e8e4f3fdc2a9e159abdb1\n+89de1538ce1f8c00f80e8d11f43e1b77e24d7dea\n+de07fdcf77e97b8613091285e4d0a734f5de7492\n+01680195f8aa586c55c44767397380def3a23b54\n+05e1c85fb687c82ae477c72d4a7e2d6b0c692167\n+c072b8fd95cd4fa84f08189a0cd8b173ea2dbb8e\n+9a0ed08b40b15ae2b791aa8549b53e69934b4ea7\n+53f8f226bd1d627c4a6dec5862a1d4ea5a933e45\n+9d0f43b7ca7241d8a018fd35dd3bc01555235ec6\n+f12d2b5a8ac397e4bcaefcc19898f8ff5705dea5\n+8250de13587ed05ca45df3e12c5dc9bcb1500e2c\n+d727f77e390426e9e463336bda08d50c451c7086\n+484312bda2d43e3ea60047be076332299463adf8\n+c7e05b35ab0a791c7a8e2d863e716fdec6f3f671\n+b9c1cd81848da9de1baf9c2f29c19c50e549de13\n+8ea7d31e384975019733b5778feabbd9955c79d8\n+f798b891bcecea9548eedacae70eeb9906c1ddbf\n+ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4\n+ad087638ee4864d6244ec9381ff764bfa6ee5086\n+66db2d62d59817320c9182fc18e75a93b76828ea\n+7ce9ac5c83b1844a518ef2e12e87aae3cacdfe58\n+4286f43025149cf44207c3ad98e4a1f068520ada\n+cd0c5135ab2291aaa5410ac919bad3fc87249a4a\n+66ed450d771a8fc01c159a8402648ebd1c35eb4c\n+a82f03393a32842d49236e8666ee57805ca701f8\n+f972b04d63eb8af79ff3cec1dc561ed13dfa6053\n+ec45cc5e27668171b55271b0c735194c70e7da41\n+715e9fd7454f7a48d7adba7d42f662c20a3e3367\n+2e0a99037dcc35bc63ba0d54371bc678af737c8e\n+7fa8d758598407f3bf0beb0118dc122ea5340736\n+6a22373771edbc3c7513cacb9355f880c73c2cbf\n+b89ef131147f71a96152a7b5c4374266cdf539b2\n+01d8359983e2f77b5118fede3ffa947072c666c8\n+58f0c929a3d70a4bff79cc200f1c186f71ef1675\n+950be19727a581970591d8f8138dfe4725750382\n+425278d17bd0edf8a3a7cc81e55016f7fd8e7726\n+c028c7b7557da2baff7af8840108e8be4db8e0c6\n+47a7cfb0aa2498f6801026d258a59f9de48f60b0\n+f6b7df3155ddb4cedfbcf5d3eb3383d4614b3a85\n+d72098038f3b55a714ed8adb34fab547b15eb0d5\n+c49c825bd9f4764536b45df5a684d97173673fc7\n+33799afe83eec4200ff140e9bf5eae83701a4d7f\n+5c3f8ddcaa1164079105c452429fccf8127b01b6\n+1f01443567b03ac75a91c810f1733f5c21b5699d\n+b3e42b6d02e8d19658a9135e427ebceab5367779\n+69b3a6dd9d9a0adf5506c8b9fde42187356bd4a8\n+bafd075c5e6a1088ef0f1aa0b0b224e026a3d3e0\n+7daa3adb242d9c8728fdb15c6af6596aaad5502f\n+514993554c370f4cf30a109ac28d5d64893dbf0a\n+c8d2473e6cb042e7275a10c49d3f6a4a91bf0166\n+386f4385ab04b0b2c3d47bddc0dc0f2de7354964\n+9f33dba05c01ecc5c56eb1284ab7d64d42f55171"
      }
    ]
  },
  {
    "sha": "65fdc37ac3062fae5aa1106890b32c93235a89e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWZkYzM3YWMzMDYyZmFlNWFhMTEwNjg5MGIzMmM5MzIzNWE4OWU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T10:37:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T10:37:36Z"
      },
      "message": "Merge #9856: Terminate immediately when allocation fails\n\nd4ee7ba prevector: assert successful allocation (Cory Fields)\nc5f008a don't throw std::bad_alloc when out of memory. Instead, terminate immediately (Cory Fields)\n\nTree-SHA512: 699ce8df5b1775a99c71d3cfc952b45da1c0091e1a4b6adfac52d5be6144c3d98f88ac3af90e5c73fff2f74666a499feb4a34434683ce5979814e869c0aeddc3",
      "tree": {
        "sha": "8ab8dec6c97ba0683ed97ca1017bf72c82bbefd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ab8dec6c97ba0683ed97ca1017bf72c82bbefd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65fdc37ac3062fae5aa1106890b32c93235a89e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYtVLwAAoJEHSBCwEjRsmmZzgH/iIL0DdglUeXmvDSRUE+00dv\nXTrzxopxQ8NsV9OdJhixNzM8gpeSArsCA0yAKgNtzpxHQUHasQul2SHJp8sx2Fe7\n7/akRkkovl7zvbSin/LpGr8589zUSjADlj0TqNa7QlB+PgchD7rD+n1R8A5Kf3aA\naiPrj4IYJVeinl9pnfjhgIIcz9NX+KwcW6npdJs55DAb2IpLqvhpdKvXxini10sv\n9vee9SLVk3fi27XbrWX9bI6j9yoY4a5UFKBUH/uWy2jd1Noqg4I/d0luyxNxcQnT\nE71aabC+ruSDlDeh4l8RDmtb1fTEsSEEBps3ZHu3go9AYdp6mfCmMAGvtbbsPDI=\n=8Fl+\n-----END PGP SIGNATURE-----",
        "payload": "tree 8ab8dec6c97ba0683ed97ca1017bf72c82bbefd6\nparent 88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d\nparent d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488278220 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488278256 +0100\n\nMerge #9856: Terminate immediately when allocation fails\n\nd4ee7ba prevector: assert successful allocation (Cory Fields)\nc5f008a don't throw std::bad_alloc when out of memory. Instead, terminate immediately (Cory Fields)\n\nTree-SHA512: 699ce8df5b1775a99c71d3cfc952b45da1c0091e1a4b6adfac52d5be6144c3d98f88ac3af90e5c73fff2f74666a499feb4a34434683ce5979814e869c0aeddc3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65fdc37ac3062fae5aa1106890b32c93235a89e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65fdc37ac3062fae5aa1106890b32c93235a89e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65fdc37ac3062fae5aa1106890b32c93235a89e4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88c2ae3ed2bb5d367dd408c9255cd8f1e7a36c7d"
      },
      {
        "sha": "d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4ee7baef729da5e18b5e5c3d6ddb5b97df8d4e4"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "22c8974a595141befe91dc90ca9441614bc8f2c0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65fdc37ac3062fae5aa1106890b32c93235a89e4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65fdc37ac3062fae5aa1106890b32c93235a89e4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=65fdc37ac3062fae5aa1106890b32c93235a89e4",
        "patch": "@@ -797,6 +797,19 @@ ServiceFlags nLocalServices = NODE_NETWORK;\n \n }\n \n+[[noreturn]] static void new_handler_terminate()\n+{\n+    // Rather than throwing std::bad-alloc if allocation fails, terminate\n+    // immediately to (try to) avoid chain corruption.\n+    // Since LogPrintf may itself allocate memory, set the handler directly\n+    // to terminate first.\n+    std::set_new_handler(std::terminate);\n+    LogPrintf(\"Error: Out of memory. Terminating.\\n\");\n+\n+    // The log was successful, terminate now.\n+    std::terminate();\n+};\n+\n bool AppInitBasicSetup()\n {\n     // ********************************************************* Step 1: setup\n@@ -849,6 +862,9 @@ bool AppInitBasicSetup()\n     // Ignore SIGPIPE, otherwise it will bring the daemon down if the client closes unexpectedly\n     signal(SIGPIPE, SIG_IGN);\n #endif\n+\n+    std::set_new_handler(new_handler_terminate);\n+\n     return true;\n }\n "
      },
      {
        "sha": "cba2e30057afa39c2ea35aeccaadd54202d8b671",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65fdc37ac3062fae5aa1106890b32c93235a89e4/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65fdc37ac3062fae5aa1106890b32c93235a89e4/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=65fdc37ac3062fae5aa1106890b32c93235a89e4",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef _BITCOIN_PREVECTOR_H_\n #define _BITCOIN_PREVECTOR_H_\n \n+#include <assert.h>\n #include <stdlib.h>\n #include <stdint.h>\n #include <string.h>\n@@ -170,10 +171,15 @@ class prevector {\n             }\n         } else {\n             if (!is_direct()) {\n+                /* FIXME: Because malloc/realloc here won't call new_handler if allocation fails, assert\n+                    success. These should instead use an allocator or new/delete so that handlers\n+                    are called as necessary, but performance would be slightly degraded by doing so. */\n                 _union.indirect = static_cast<char*>(realloc(_union.indirect, ((size_t)sizeof(T)) * new_capacity));\n+                assert(_union.indirect);\n                 _union.capacity = new_capacity;\n             } else {\n                 char* new_indirect = static_cast<char*>(malloc(((size_t)sizeof(T)) * new_capacity));\n+                assert(new_indirect);\n                 T* src = direct_ptr(0);\n                 T* dst = reinterpret_cast<T*>(new_indirect);\n                 memcpy(dst, src, size() * sizeof(T));"
      }
    ]
  },
  {
    "sha": "d75e8cb44def64f56cf517f59e5c34eca07eea56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzVlOGNiNDRkZWY2NGY1NmNmNTE3ZjU5ZTVjMzRlY2EwN2VlYTU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T10:43:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T10:44:11Z"
      },
      "message": "Merge #9879: [doc] Update doc/bips.md for BIP90 implementation\n\nfe71661 [doc] Update doc/bips.md for BIP90 implementation (Suhas Daftuar)\n\nTree-SHA512: cfa72662e5e8ecedb7869b64c2064cc29d8736bcd9baacd59ea420dc2f93265c8d950e469863e77e8fa9348fbf1b39a1e2397253a2fd94b63adc909cc8c14873",
      "tree": {
        "sha": "ccfe0c28c78ebf5f66e4a4d20a5dc0a9059fc7b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccfe0c28c78ebf5f66e4a4d20a5dc0a9059fc7b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d75e8cb44def64f56cf517f59e5c34eca07eea56",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYtVR7AAoJEHSBCwEjRsmmX7AH+wQ30ELF+Jy/hxfyhlx6PPFb\nzKEqdPNDpYs0l+sWRb1VFlGneGauoV0mcLY10ajRiEMrsARSQB042I4EHn2H6CAv\nreT71SkwcdxWqxVgtXtja8A2n9bMEwN9Vz2q3adLOFkb19SR+XPOptK8cYaBnhfy\nReivwT+gKrZWSAhmgr+AHkFwg5amQ0Qb4cTJ7nBlBlSDkEdkB++8DL09KkptjQmU\naX0adooyTJX0bvtxrxe9rVnpAjOCFDkp3btaZB/3qQNWG+smH1dTBIJ3wATTemN6\nrVZ/b+lmyYD8liIC1ujXX5E4ZdL870c7p9rN2tTq9bl7jUpgomjFk4C9yn/sn+Q=\n=QKVl\n-----END PGP SIGNATURE-----",
        "payload": "tree ccfe0c28c78ebf5f66e4a4d20a5dc0a9059fc7b4\nparent 65fdc37ac3062fae5aa1106890b32c93235a89e4\nparent fe71661ae16abe09dcf245ee2eb4c55c5655b219\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488278617 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488278651 +0100\n\nMerge #9879: [doc] Update doc/bips.md for BIP90 implementation\n\nfe71661 [doc] Update doc/bips.md for BIP90 implementation (Suhas Daftuar)\n\nTree-SHA512: cfa72662e5e8ecedb7869b64c2064cc29d8736bcd9baacd59ea420dc2f93265c8d950e469863e77e8fa9348fbf1b39a1e2397253a2fd94b63adc909cc8c14873\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d75e8cb44def64f56cf517f59e5c34eca07eea56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d75e8cb44def64f56cf517f59e5c34eca07eea56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d75e8cb44def64f56cf517f59e5c34eca07eea56/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65fdc37ac3062fae5aa1106890b32c93235a89e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65fdc37ac3062fae5aa1106890b32c93235a89e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65fdc37ac3062fae5aa1106890b32c93235a89e4"
      },
      {
        "sha": "fe71661ae16abe09dcf245ee2eb4c55c5655b219",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe71661ae16abe09dcf245ee2eb4c55c5655b219",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe71661ae16abe09dcf245ee2eb4c55c5655b219"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bc8dcb6fb3c33cbd1d9fda2535de703c9765fdab",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d75e8cb44def64f56cf517f59e5c34eca07eea56/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d75e8cb44def64f56cf517f59e5c34eca07eea56/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=d75e8cb44def64f56cf517f59e5c34eca07eea56",
        "patch": "@@ -20,6 +20,7 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n * [`BIP 68`](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki): Sequence locks have been implemented as of **v0.12.1**  ([PR #7184](https://github.com/bitcoin/bitcoin/pull/7184)), and have been activated since *block 419328*.\n * [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)).\n+* [`BIP 90`](https://github.com/bitcoin/bips/blob/master/bip-0090.mediawiki): Trigger mechanism for activation of BIPs 34, 65, and 66 has been simplified to block height checks since **v0.14.0** ([PR #8391](https://github.com/bitcoin/bitcoin/pull/8391)).\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, and enforced for all peer versions as of **v0.13.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579) and [PR #6641](https://github.com/bitcoin/bitcoin/pull/6641)).\n * [`BIP 112`](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki): The CHECKSEQUENCEVERIFY opcode has been implemented since **v0.12.1** ([PR #7524](https://github.com/bitcoin/bitcoin/pull/7524)) and has been activated since *block 419328*.\n * [`BIP 113`](https://github.com/bitcoin/bips/blob/master/bip-0113.mediawiki): Median time past lock-time calculations have been implemented since **v0.12.1** ([PR #6566](https://github.com/bitcoin/bitcoin/pull/6566)) and have been activated since *block 419328*."
      }
    ]
  },
  {
    "sha": "30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGJkY2ZjYTJiN2VhZTIwMGQwZTBhNmQ3NGZlYjBjNjkyMmZiMzlj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T10:57:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T10:59:34Z"
      },
      "message": "Merge #9865: Change bitcoin address in RPC help message\n\n83ac719 Change bitcoin address in RPC helpaddress to an invalid address, so people don't accidentally send coins there (like I did). (Marijn Stollenga)\n\nTree-SHA512: ca1163466a149d567b97efbfcfa8fdfe2d474245b4dd5a1a92555b4e87f8e99df5fee4cd79ef1ce6a98db2337846af78f37c2e6b31d02008b11fa0e151ce6590",
      "tree": {
        "sha": "3f3d8b82d6813178ec40fa8def922f65a6557ea5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f3d8b82d6813178ec40fa8def922f65a6557ea5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYtVgWAAoJEHSBCwEjRsmm3F0H/1IYzQpL7XJNUhLY9tocLPZ2\nl1DwZ5qzJlDBx57Q06cpKlkduG7MbpVVNhGURuEIzeAzUXv467+22ig0eQmgRIae\nTGHhJopSPSpbpBji0Zkp06IrrkIu/A3huIThbgfZ9yRy4XpstbusThqQiEYm3eNM\nHHYY+2RI176rA15IJegKYELrwWRi8sIEYn/ibD1HAGZKmucJejpz3BEYtmPRlJo0\nhzEFIcOATTFBy8UGDntU4+bCXo6I5GVKuUcimqyugdEsiXpzB72MyYB4pPtPVY5i\n6dQL1XmyXZVCrXrx7tk4dHXgUVjbJZDhTgYiq8iU6C2UVteeqccUD/64mUdaA+E=\n=+KEZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 3f3d8b82d6813178ec40fa8def922f65a6557ea5\nparent d75e8cb44def64f56cf517f59e5c34eca07eea56\nparent 83ac719d34f98cc1d3efa6ece2b95145bcde8775\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488279458 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488279574 +0100\n\nMerge #9865: Change bitcoin address in RPC help message\n\n83ac719 Change bitcoin address in RPC helpaddress to an invalid address, so people don't accidentally send coins there (like I did). (Marijn Stollenga)\n\nTree-SHA512: ca1163466a149d567b97efbfcfa8fdfe2d474245b4dd5a1a92555b4e87f8e99df5fee4cd79ef1ce6a98db2337846af78f37c2e6b31d02008b11fa0e151ce6590\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d75e8cb44def64f56cf517f59e5c34eca07eea56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d75e8cb44def64f56cf517f59e5c34eca07eea56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d75e8cb44def64f56cf517f59e5c34eca07eea56"
      },
      {
        "sha": "83ac719d34f98cc1d3efa6ece2b95145bcde8775",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83ac719d34f98cc1d3efa6ece2b95145bcde8775",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83ac719d34f98cc1d3efa6ece2b95145bcde8775"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "c84eab7d23866d8c0450a2f245df89c7f9eb8bd3",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c",
        "patch": "@@ -347,11 +347,11 @@ UniValue verifymessage(const JSONRPCRequest& request)\n             \"\\nUnlock the wallet for 30 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n             \"\\nCreate the signature\\n\"\n-            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n-            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n             \"\\nAs json rpc\\n\"\n-            + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"signature\\\", \\\"my message\\\"\")\n+            + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"signature\\\", \\\"my message\\\"\")\n         );\n \n     LOCK(cs_main);\n@@ -400,7 +400,7 @@ UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             \"\\nCreate the signature\\n\"\n             + HelpExampleCli(\"signmessagewithprivkey\", \"\\\"privkey\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n-            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n             \"\\nAs json rpc\\n\"\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n         );"
      },
      {
        "sha": "d785c95ae0acd0c590fed747e9f5dd3a4fa5b80d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c",
        "patch": "@@ -236,8 +236,8 @@ UniValue setaccount(const JSONRPCRequest& request)\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with an account.\\n\"\n             \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n         );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n@@ -283,8 +283,8 @@ UniValue getaccount(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"\\\"accountname\\\"        (string) the account address\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n-            + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleCli(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\")\n+            + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\")\n         );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n@@ -503,11 +503,11 @@ UniValue signmessage(const JSONRPCRequest& request)\n             \"\\nUnlock the wallet for 30 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"mypassphrase\\\" 30\") +\n             \"\\nCreate the signature\\n\"\n-            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"my message\\\"\") +\n             \"\\nVerify the signature\\n\"\n-            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"signature\\\" \\\"my message\\\"\") +\n+            + HelpExampleCli(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"signature\\\" \\\"my message\\\"\") +\n             \"\\nAs json rpc\\n\"\n-            + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"my message\\\"\")\n+            + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"my message\\\"\")\n         );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n@@ -556,13 +556,13 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nThe amount from transactions with at least 1 confirmation\\n\"\n-            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\") +\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\"\") +\n             \"\\nThe amount including unconfirmed transactions, zero confirmations\\n\"\n-            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" 0\") +\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" 0\") +\n             \"\\nThe amount with at least 6 confirmation, very safe\\n\"\n-            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" 6\") +\n+            + HelpExampleCli(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" 6\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n+            + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", 6\")\n        );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n@@ -906,13 +906,13 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"                                    the number of addresses.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSend two amounts to two different addresses:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\"\") +\n             \"\\nSend two amounts to two different addresses setting the confirmation and comment:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 6 \\\"testing\\\"\") +\n             \"\\nSend two amounts to two different addresses, subtract fee from amount:\\n\"\n-            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n+            + HelpExampleCli(\"sendmany\", \"\\\"\\\" \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\" 1 \\\"\\\" \\\"[\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\",\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\"]\\\"\") +\n             \"\\nAs a json rpc call\\n\"\n-            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n+            + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);"
      }
    ]
  },
  {
    "sha": "f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWVmOGU5ZGQyOWNkOTI3ZTIxY2JjNmM0NWM3NzNhZDQzYjEyMWIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T11:02:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T11:02:44Z"
      },
      "message": "Merge #9867: Replace remaining sprintf with snprintf\n\n19cafc6 test: Replace remaining sprintf with snprintf (Wladimir J. van der Laan)\n0a17714 uint256: replace sprintf with HexStr and reverse-iterator (Wladimir J. van der Laan)\n\nTree-SHA512: 2ba1dd4d25e1cbfff4d67b2f483448aa7c34ab5c799cddd48ba5826e5fa6df425abe35e244aaf4c52db9fccfb4d2a25a14bb4597bf9d1fce95991f270da6bb26",
      "tree": {
        "sha": "7169781bd3d424267a337a7a26b9890542f80728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7169781bd3d424267a337a7a26b9890542f80728"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYtVjUAAoJEHSBCwEjRsmmWgkIAIcrkbbQYIZ/b2j5Fv5Ou339\novTL7fIt6Ua57T0eiaLnb7EtIGkmq6bh9WGi6G3B+JzRajHu+dJw7ONjR3sZR3o7\nr4dFPpxNCwl1CFGDHtB5Cw0mFr50Ntss8TpYnHD/SXe/qjW6VNR1Pr2ieX5DuL26\nJjv/feBKhdb5XJDJwNLD5GJ93LJzu9ldBVkEOWlPI/ZfFpldPmOoeb55FSnVfjzt\nTDDT4IeRj/zDQYlV7xNWLqNl9+EmxAJ/Dz9swIswR+YhpeCkVuZIJEFk369siUNd\nXOihyB5SQnxptPKpVJPoZ13LUnMsReIMTxxZN/e654sUWhdOQB10udG92tH1yUI=\n=1tFn\n-----END PGP SIGNATURE-----",
        "payload": "tree 7169781bd3d424267a337a7a26b9890542f80728\nparent 30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c\nparent 19cafc6239abd14f2b9c3d883dc7df0472cac52b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488279746 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488279764 +0100\n\nMerge #9867: Replace remaining sprintf with snprintf\n\n19cafc6 test: Replace remaining sprintf with snprintf (Wladimir J. van der Laan)\n0a17714 uint256: replace sprintf with HexStr and reverse-iterator (Wladimir J. van der Laan)\n\nTree-SHA512: 2ba1dd4d25e1cbfff4d67b2f483448aa7c34ab5c799cddd48ba5826e5fa6df425abe35e244aaf4c52db9fccfb4d2a25a14bb4597bf9d1fce95991f270da6bb26\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30bdcfca2b7eae200d0e0a6d74feb0c6922fb39c"
      },
      {
        "sha": "19cafc6239abd14f2b9c3d883dc7df0472cac52b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19cafc6239abd14f2b9c3d883dc7df0472cac52b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19cafc6239abd14f2b9c3d883dc7df0472cac52b"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 4,
      "deletions": 7
    },
    "files": [
      {
        "sha": "22c90bd95bf1bae2be3dc11a9809dbcccf794992",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2",
        "patch": "@@ -277,7 +277,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {\n-            sprintf(buf, \"%d\", x);\n+            snprintf(buf, sizeof(buf), \"%d\", x);\n             StringContentsSerializer key(buf);\n             for (int z = 0; z < y; z++)\n                 key += key;\n@@ -293,12 +293,12 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n             seek_start = 0;\n         else\n             seek_start = 5;\n-        sprintf(buf, \"%d\", seek_start);\n+        snprintf(buf, sizeof(buf), \"%d\", seek_start);\n         StringContentsSerializer seek_key(buf);\n         it->Seek(seek_key);\n         for (int x=seek_start; x<10; ++x) {\n             for (int y = 0; y < 10; y++) {\n-                sprintf(buf, \"%d\", x);\n+                snprintf(buf, sizeof(buf), \"%d\", x);\n                 std::string exp_key(buf);\n                 for (int z = 0; z < y; z++)\n                     exp_key += exp_key;"
      },
      {
        "sha": "c4c7b716fea38e9ba09e156581665c13d20a69cf",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2",
        "patch": "@@ -20,10 +20,7 @@ base_blob<BITS>::base_blob(const std::vector<unsigned char>& vch)\n template <unsigned int BITS>\n std::string base_blob<BITS>::GetHex() const\n {\n-    char psz[sizeof(data) * 2 + 1];\n-    for (unsigned int i = 0; i < sizeof(data); i++)\n-        sprintf(psz + i * 2, \"%02x\", data[sizeof(data) - i - 1]);\n-    return std::string(psz, psz + sizeof(data) * 2);\n+    return HexStr(std::reverse_iterator<const uint8_t*>(data + sizeof(data)), std::reverse_iterator<const uint8_t*>(data));\n }\n \n template <unsigned int BITS>"
      }
    ]
  },
  {
    "sha": "c322fa472efa081068dbbcf9ccb5ca4342a41d2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzIyZmE0NzJlZmEwODEwNjhkYmJjZjljY2I1Y2E0MzQyYTQxZDJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T11:15:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T11:29:43Z"
      },
      "message": "Merge #9732: [Trivial] Remove nonsense #undef foreach\n\n467df39 Remove nonsense #undef foreach (John Newbery)\n\nTree-SHA512: b8c3c6654eb8a9e5008a1923bee46f7ef9f8216c8f4f1b4662d82c26410ca8d8afe41e24e48a3e2e8b2a25c81c33795a4073dabfe357caf0aa820519d4fffc71",
      "tree": {
        "sha": "ec9003b894f5fa00aad738dc1a0e8c877c688694",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec9003b894f5fa00aad738dc1a0e8c877c688694"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c322fa472efa081068dbbcf9ccb5ca4342a41d2e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYtV8nAAoJEHSBCwEjRsmm0EYH/2U2PwPUs70HZvu0by+Jam0Y\nJohETHwsbsTz9DH/B3tSP+VpqsjvNTsVgwL4MNmb5bsy73iQgRDNUZSD2/dGg5ZH\nWXuVK5LPEAckTiRRzu4v6Qnz4aFkDMYxmvUNBZfm6qBpIdijhBEynylD1OEoDkB0\nXPQbP+popQtf5TvgoZjUhXwv1dI1F5Yp8RKg8PYS0YaLkfokfis83tFj3GdF68NN\nE3+AUWL8HhyYiI6DggTo/Wgx2RRMhmSorhRJaxxsSvPUiVZKuo4/dZ40MgsPEbE4\nDyBBQCZH8YL57IerJ3Mv6BF3n9i/Ml1Qt0n5l1KeWtn/yQNqaNW/GAup4XRoJ1I=\n=SBYJ\n-----END PGP SIGNATURE-----",
        "payload": "tree ec9003b894f5fa00aad738dc1a0e8c877c688694\nparent f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2\nparent 467df390f0a620859c46e49d0894b0b7f8dc55ad\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488280504 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488281383 +0100\n\nMerge #9732: [Trivial] Remove nonsense #undef foreach\n\n467df39 Remove nonsense #undef foreach (John Newbery)\n\nTree-SHA512: b8c3c6654eb8a9e5008a1923bee46f7ef9f8216c8f4f1b4662d82c26410ca8d8afe41e24e48a3e2e8b2a25c81c33795a4073dabfe357caf0aa820519d4fffc71\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c322fa472efa081068dbbcf9ccb5ca4342a41d2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c322fa472efa081068dbbcf9ccb5ca4342a41d2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c322fa472efa081068dbbcf9ccb5ca4342a41d2e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ef8e9dd29cd927e21cbc6c45c773ad43b121b2"
      },
      {
        "sha": "467df390f0a620859c46e49d0894b0b7f8dc55ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/467df390f0a620859c46e49d0894b0b7f8dc55ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/467df390f0a620859c46e49d0894b0b7f8dc55ad"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a8039ded11577aa2e6bdbf5bd561b77bf4b7afd",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c322fa472efa081068dbbcf9ccb5ca4342a41d2e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c322fa472efa081068dbbcf9ccb5ca4342a41d2e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c322fa472efa081068dbbcf9ccb5ca4342a41d2e",
        "patch": "@@ -20,7 +20,6 @@\n #include \"sync.h\"\n #include \"random.h\"\n \n-#undef foreach\n #include \"boost/multi_index_container.hpp\"\n #include \"boost/multi_index/ordered_index.hpp\"\n #include \"boost/multi_index/hashed_index.hpp\""
      }
    ]
  },
  {
    "sha": "b7547fa93e013b5bfec03ab87cb2f5c5416104e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzU0N2ZhOTNlMDEzYjViZmVjMDNhYjg3Y2IyZjVjNTQxNjEwNGU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T11:30:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T11:31:33Z"
      },
      "message": "Merge #9822: Remove block file location upgrade code\n\n4b183d3 Remove block file location upgrade code (Marko Bencun)\n\nTree-SHA512: fac1fce95341e0df645c08c7e794195b22b54df08826aa8728f2f97aede1e42f724f8133781b97f836d4a392d044d08c846bce471a6b478582014f8be501a712",
      "tree": {
        "sha": "0796c7731f51f4c5afacae840573779dd3af252d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0796c7731f51f4c5afacae840573779dd3af252d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7547fa93e013b5bfec03ab87cb2f5c5416104e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYtV+VAAoJEHSBCwEjRsmm4agH/0ReblXzRhgmDFZXxJdvTD0d\n4lcVWi7OwcTtdYRWbIhz2ysiQr7iVnD7pSv/+r4qXEk5SbWjFxAZIh2F+6y/Kk2c\nJWUfXhEebhs4ik8XQLz89q2iksl2IRYdbE1B+rjhYZ7jghnAwmqkoE6sy7utb/yo\nX4G9JslKuKmyjWekeCRQymhQ5YWqptM7FiXXpdKG2mWuqBmFZ3ZVYXWCJ+Jl9BSe\n/QGcT60NxUywNWbDcXFKAN2KrLEmDz92BRHfqFCYVgSj/37Mxa52hxqBzmyHuReJ\n7DL5SqPqg/buYlC2IfSgPJGPplIE6M0gzw+8xEQyUhTBDzByVn4hEz64OSfwD+0=\n=sjZ5\n-----END PGP SIGNATURE-----",
        "payload": "tree 0796c7731f51f4c5afacae840573779dd3af252d\nparent c322fa472efa081068dbbcf9ccb5ca4342a41d2e\nparent 4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488281412 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488281493 +0100\n\nMerge #9822: Remove block file location upgrade code\n\n4b183d3 Remove block file location upgrade code (Marko Bencun)\n\nTree-SHA512: fac1fce95341e0df645c08c7e794195b22b54df08826aa8728f2f97aede1e42f724f8133781b97f836d4a392d044d08c846bce471a6b478582014f8be501a712\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7547fa93e013b5bfec03ab87cb2f5c5416104e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7547fa93e013b5bfec03ab87cb2f5c5416104e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7547fa93e013b5bfec03ab87cb2f5c5416104e4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c322fa472efa081068dbbcf9ccb5ca4342a41d2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c322fa472efa081068dbbcf9ccb5ca4342a41d2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c322fa472efa081068dbbcf9ccb5ca4342a41d2e"
      },
      {
        "sha": "4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b183d33f3647714bb6eb39e1d1c3e54d2b2aaec"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 1,
      "deletions": 26
    },
    "files": [
      {
        "sha": "1c8c3bc6203db50944d854c1fcd5392950ba00bd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 26,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7547fa93e013b5bfec03ab87cb2f5c5416104e4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7547fa93e013b5bfec03ab87cb2f5c5416104e4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b7547fa93e013b5bfec03ab87cb2f5c5416104e4",
        "patch": "@@ -1365,32 +1365,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fReindex = GetBoolArg(\"-reindex\", false);\n     bool fReindexChainState = GetBoolArg(\"-reindex-chainstate\", false);\n \n-    // Upgrading to 0.8; hard-link the old blknnnn.dat files into /blocks/\n-    boost::filesystem::path blocksDir = GetDataDir() / \"blocks\";\n-    if (!boost::filesystem::exists(blocksDir))\n-    {\n-        boost::filesystem::create_directories(blocksDir);\n-        bool linked = false;\n-        for (unsigned int i = 1; i < 10000; i++) {\n-            boost::filesystem::path source = GetDataDir() / strprintf(\"blk%04u.dat\", i);\n-            if (!boost::filesystem::exists(source)) break;\n-            boost::filesystem::path dest = blocksDir / strprintf(\"blk%05u.dat\", i-1);\n-            try {\n-                boost::filesystem::create_hard_link(source, dest);\n-                LogPrintf(\"Hardlinked %s -> %s\\n\", source.string(), dest.string());\n-                linked = true;\n-            } catch (const boost::filesystem::filesystem_error& e) {\n-                // Note: hardlink creation failing is not a disaster, it just means\n-                // blocks will get re-downloaded from peers.\n-                LogPrintf(\"Error hardlinking blk%04u.dat: %s\\n\", i, e.what());\n-                break;\n-            }\n-        }\n-        if (linked)\n-        {\n-            fReindex = true;\n-        }\n-    }\n+    boost::filesystem::create_directories(GetDataDir() / \"blocks\");\n \n     // cache size calculations\n     int64_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);"
      }
    ]
  },
  {
    "sha": "7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTJhMjIxMmVjYWM0MWJmNGE0ZmQ5ZjJkZTZiNGNkMjU4OTM4NDk3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T12:52:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T12:52:50Z"
      },
      "message": "Merge #9829: Fix importmulti returning rescan errors for wrong keys\n\n306bd72 Fix importmulti returning rescan errors for wrong keys (Russell Yanofsky)\n\nTree-SHA512: ae9998236cbd3ff749d6b5c716bd76c9cec386b0708583e4912e4e05bf4584545258e1d0543aa5445024d2b5decf859a64f40c6503029773366a0f9a9ddf9b88",
      "tree": {
        "sha": "953795cb8dc55bdcd7dec30c17cfd2412af8dbff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/953795cb8dc55bdcd7dec30c17cfd2412af8dbff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYtXKiAAoJEHSBCwEjRsmmKkoH/3GuXa9VZZNq+A+wDsL2Y/A2\n2QOfzaZbGBKPuOAw1WaU6WqIW8noaDSbRBQYeOqOtRm3kNdFvovILOuxzJFsqnDa\nEC+Pna8ak/a3VlmiwEU+h8SGSpLJVT5If9uQEybgH7KsAKEIqWnkHBODsBdUSWxk\nUJoTxZ2FviD1NsQz98B3u1dLoUzgBbWeEyyQusV0yMKE13xEEQrs2WsbmWr/Mo5Q\nMP2FeNjY+CI3/W/6GgcHBC5vTtfo55enXNQMRlydq0xj9FlkNV6MNpjnS90diyhd\nqOs/id/xoG0Jnof+JyIOkdkusVMty1ESZpYqAmD9wgpaE9Ns4+13tLLB2SzOpek=\n=EkbN\n-----END PGP SIGNATURE-----",
        "payload": "tree 953795cb8dc55bdcd7dec30c17cfd2412af8dbff\nparent b7547fa93e013b5bfec03ab87cb2f5c5416104e4\nparent 306bd72157f089b962b9c537bbacf710a4158647\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488286342 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488286370 +0100\n\nMerge #9829: Fix importmulti returning rescan errors for wrong keys\n\n306bd72 Fix importmulti returning rescan errors for wrong keys (Russell Yanofsky)\n\nTree-SHA512: ae9998236cbd3ff749d6b5c716bd76c9cec386b0708583e4912e4e05bf4584545258e1d0543aa5445024d2b5decf859a64f40c6503029773366a0f9a9ddf9b88\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7547fa93e013b5bfec03ab87cb2f5c5416104e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7547fa93e013b5bfec03ab87cb2f5c5416104e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7547fa93e013b5bfec03ab87cb2f5c5416104e4"
      },
      {
        "sha": "306bd72157f089b962b9c537bbacf710a4158647",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/306bd72157f089b962b9c537bbacf710a4158647",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/306bd72157f089b962b9c537bbacf710a4158647"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 15,
      "deletions": 3
    },
    "files": [
      {
        "sha": "20a3cbda1e78bcc0646082ba9d1c3001fca77c4e",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
        "patch": "@@ -1098,6 +1098,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                     result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, strprintf(\"Failed to rescan before time %d, transactions may be missing.\", scannedRange->GetBlockTimeMax())));\n                     response.push_back(std::move(result));\n                 }\n+                ++i;\n             }\n         }\n     }"
      },
      {
        "sha": "7ac2112dd29e707a4d723c37aea61224b2860265",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
        "patch": "@@ -395,24 +395,35 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n+    // Verify importmulti RPC returns failure for a key whose creation time is\n+    // before the missing block, and success for a key whose creation time is\n+    // after.\n     {\n         CWallet wallet;\n         CWallet *backup = ::pwalletMain;\n         ::pwalletMain = &wallet;\n+        UniValue keys;\n+        keys.setArray();\n         UniValue key;\n         key.setObject();\n         key.pushKV(\"scriptPubKey\", HexStr(GetScriptForRawPubKey(coinbaseKey.GetPubKey())));\n         key.pushKV(\"timestamp\", 0);\n         key.pushKV(\"internal\", UniValue(true));\n-        UniValue keys;\n-        keys.setArray();\n+        keys.push_back(key);\n+        key.clear();\n+        key.setObject();\n+        CKey futureKey;\n+        futureKey.MakeNewKey(true);\n+        key.pushKV(\"scriptPubKey\", HexStr(GetScriptForRawPubKey(futureKey.GetPubKey())));\n+        key.pushKV(\"timestamp\", newTip->GetBlockTimeMax() + 7200);\n+        key.pushKV(\"internal\", UniValue(true));\n         keys.push_back(key);\n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back(keys);\n \n         UniValue response = importmulti(request);\n-        BOOST_CHECK_EQUAL(response.write(), strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Failed to rescan before time %d, transactions may be missing.\\\"}}]\", newTip->GetBlockTimeMax()));\n+        BOOST_CHECK_EQUAL(response.write(), strprintf(\"[{\\\"success\\\":false,\\\"error\\\":{\\\"code\\\":-1,\\\"message\\\":\\\"Failed to rescan before time %d, transactions may be missing.\\\"}},{\\\"success\\\":true}]\", newTip->GetBlockTimeMax()));\n         ::pwalletMain = backup;\n     }\n }"
      }
    ]
  },
  {
    "sha": "fa32a16c5752eaff0a1de48090ff88ca8bc980cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMyYTE2YzU3NTJlYWZmMGExZGU0ODA5MGZmODhjYThiYzk4MGNm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-28T13:07:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-28T13:19:24Z"
      },
      "message": "travis: Verify commits only for one target\n\nThis abuses the CHECK_DOC flag to serve as a general indicator to\nexecute platform independent sanity checks.",
      "tree": {
        "sha": "1f5633997e78ed0405ae072c8ec9708fcffc1071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f5633997e78ed0405ae072c8ec9708fcffc1071"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa32a16c5752eaff0a1de48090ff88ca8bc980cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa32a16c5752eaff0a1de48090ff88ca8bc980cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa32a16c5752eaff0a1de48090ff88ca8bc980cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa32a16c5752eaff0a1de48090ff88ca8bc980cf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ce6cdc2db0b06fad8319a86f707eab7d7600a590",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa32a16c5752eaff0a1de48090ff88ca8bc980cf/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa32a16c5752eaff0a1de48090ff88ca8bc980cf/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=fa32a16c5752eaff0a1de48090ff88ca8bc980cf",
        "patch": "@@ -51,9 +51,9 @@ before_script:\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n script:\n-    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git fetch --unshallow; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then contrib/verify-commits/verify-commits.sh; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git fetch --unshallow; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then contrib/verify-commits/verify-commits.sh; fi\n     - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST"
      }
    ]
  },
  {
    "sha": "36afd4db4442c45d4078b1a7ad16a1872b5bee0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmFmZDRkYjQ0NDJjNDVkNDA3OGIxYTdhZDE2YTE4NzJiNWJlZTBk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-28T13:57:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-28T13:58:05Z"
      },
      "message": "Merge #9888: travis: Verify commits only for one target\n\nfa32a16 travis: Verify commits only for one target (MarcoFalke)\n\nTree-SHA512: 4c08a4e74d476facf6049a6935535afd6c6cbafe808ad42aee055bcfab23fbe1e368f2479ab59a7cb8c0c93a3f0732b2d0d7d34ef137a979fc5916e6063c7fb3",
      "tree": {
        "sha": "1f5633997e78ed0405ae072c8ec9708fcffc1071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f5633997e78ed0405ae072c8ec9708fcffc1071"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36afd4db4442c45d4078b1a7ad16a1872b5bee0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYtYHtAAoJEC1/I3LlD+E3YX4H/jsXGjJw7H8NmdzpnMwrztbb\nfqePuI7eLWuVuu6o/u1XNazJ0b9AJONLNOa9Y6QOkhcFKZYe51y8dFMHgrBK8iDX\nO2ZCOyrDkT7kxYtTtjAgvZiuCdsRbg7KiUf3TjX7ydvT2oYz0HipM3JMTa+6A5jx\njH7y9Nx7MWRGqH4yYN7Fcqsx4gEaBMa3t3UWLmnKSfJ0oCRJk7zRFk4lO6uDP6KF\nH6wXiU6vlvVTDMjufJS7WVn1L9OBxJRHoZ+OKWCTV2Pz9iviUniwCk7sdMSJL5dm\nGm3E94ooL+0xLyxQodmbY8CBYLxtSGL4B+o3dhmF8t0ii5mXVP8ZtpfZ25tS2dU=\n=exgD\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f5633997e78ed0405ae072c8ec9708fcffc1071\nparent 7e2a2212ecac41bf4a4fd9f2de6b4cd258938497\nparent fa32a16c5752eaff0a1de48090ff88ca8bc980cf\nauthor MarcoFalke <falke.marco@gmail.com> 1488290276 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1488290285 +0100\n\nMerge #9888: travis: Verify commits only for one target\n\nfa32a16 travis: Verify commits only for one target (MarcoFalke)\n\nTree-SHA512: 4c08a4e74d476facf6049a6935535afd6c6cbafe808ad42aee055bcfab23fbe1e368f2479ab59a7cb8c0c93a3f0732b2d0d7d34ef137a979fc5916e6063c7fb3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36afd4db4442c45d4078b1a7ad16a1872b5bee0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36afd4db4442c45d4078b1a7ad16a1872b5bee0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36afd4db4442c45d4078b1a7ad16a1872b5bee0d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e2a2212ecac41bf4a4fd9f2de6b4cd258938497"
      },
      {
        "sha": "fa32a16c5752eaff0a1de48090ff88ca8bc980cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa32a16c5752eaff0a1de48090ff88ca8bc980cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa32a16c5752eaff0a1de48090ff88ca8bc980cf"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ce6cdc2db0b06fad8319a86f707eab7d7600a590",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36afd4db4442c45d4078b1a7ad16a1872b5bee0d/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36afd4db4442c45d4078b1a7ad16a1872b5bee0d/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=36afd4db4442c45d4078b1a7ad16a1872b5bee0d",
        "patch": "@@ -51,9 +51,9 @@ before_script:\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n script:\n-    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git fetch --unshallow; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then contrib/verify-commits/verify-commits.sh; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then while read LINE; do travis_retry gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys $LINE; done < contrib/verify-commits/trusted-keys; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git fetch --unshallow; fi\n+    - if [ \"$CHECK_DOC\" = 1 -a \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then contrib/verify-commits/verify-commits.sh; fi\n     - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST"
      }
    ]
  },
  {
    "sha": "11049f4fe62606d1b0380a9ef800ac130f0fbadf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTA0OWY0ZmU2MjYwNmQxYjAzODBhOWVmODAwYWMxMzBmMGZiYWRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T15:44:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-28T15:44:18Z"
      },
      "message": "Merge #9884: Add Pieter's old signed commits to revsig-commits\n\na4b02f4 Add Pieter's old signed commits to revsig-commits (Matt Corallo)\n\nTree-SHA512: 614a0a41b6995d2c36cd0e2363aeee8b7494112586d0c3cfc10bdf725b0752ede279ec9a55de2769461edcbea0220dd482c4bbd989fa17142c59a0bf622c42e4",
      "tree": {
        "sha": "97c6914f0811363c0f7cb696d175e26cbf38af58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97c6914f0811363c0f7cb696d175e26cbf38af58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11049f4fe62606d1b0380a9ef800ac130f0fbadf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYtZrSAAoJEHSBCwEjRsmmg2AH/iUaATTCkkHg0JHBcuG+TpQF\nx8qYHJbMm9CfbeQ/UuQId3noleP0hm/8eyEFfUKGvy038HLb9i7AmHo3//yJMBw4\nqFHdUt9CK4UqrFBshso0PaMn+xWs1uEykt4+7Lr1HZ45As1gi01B2Tqjn8YJldoP\npzXrVoj4+cZxA+QpvYkY2dXia3vGHtPjxOjyTZWkzsdOdxWrWN9d5ViX83fMx6qL\nNRvXn+ytvvegYhD59v9C8pbBGtpwo+70glN1eDYSCPBscMVfPls2+zddM77hPKM+\nrxVVHo0g/j5E8e92GVrfy6o2wIRuqDxB88SCQYAhQWE4MqvqxQ7jGB/qzZpkNvE=\n=NaLK\n-----END PGP SIGNATURE-----",
        "payload": "tree 97c6914f0811363c0f7cb696d175e26cbf38af58\nparent 36afd4db4442c45d4078b1a7ad16a1872b5bee0d\nparent a4b02f4275c3f35492bbdde27e9295497b919a52\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1488296645 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1488296658 +0100\n\nMerge #9884: Add Pieter's old signed commits to revsig-commits\n\na4b02f4 Add Pieter's old signed commits to revsig-commits (Matt Corallo)\n\nTree-SHA512: 614a0a41b6995d2c36cd0e2363aeee8b7494112586d0c3cfc10bdf725b0752ede279ec9a55de2769461edcbea0220dd482c4bbd989fa17142c59a0bf622c42e4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11049f4fe62606d1b0380a9ef800ac130f0fbadf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11049f4fe62606d1b0380a9ef800ac130f0fbadf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11049f4fe62606d1b0380a9ef800ac130f0fbadf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36afd4db4442c45d4078b1a7ad16a1872b5bee0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36afd4db4442c45d4078b1a7ad16a1872b5bee0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36afd4db4442c45d4078b1a7ad16a1872b5bee0d"
      },
      {
        "sha": "a4b02f4275c3f35492bbdde27e9295497b919a52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b02f4275c3f35492bbdde27e9295497b919a52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4b02f4275c3f35492bbdde27e9295497b919a52"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 104,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f0088cdca4af8e96c9c53ba6d68e6a8ea44df181",
        "filename": "contrib/verify-commits/allow-revsig-commits",
        "status": "modified",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11049f4fe62606d1b0380a9ef800ac130f0fbadf/contrib/verify-commits/allow-revsig-commits",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11049f4fe62606d1b0380a9ef800ac130f0fbadf/contrib/verify-commits/allow-revsig-commits",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/allow-revsig-commits?ref=11049f4fe62606d1b0380a9ef800ac130f0fbadf",
        "patch": "@@ -0,0 +1,104 @@\n+a06ede9a138d0fb86b0de17c42b936d9fe6e2158\n+923dc447eaa8e017985b2afbbb12dd1283fbea0e\n+71148b8947fe8b4d756822420a7f31c380159425\n+6696b4635ceb9b47aaa63244bff9032fa7b08354\n+812714fd80e96e28cd288c553c83838cecbfc2d9\n+8a445c5651edb9a1f51497055b7ddf4402be9188\n+e126d0c12ca66278d9e7b12187c5ff4fc02a7e6c\n+3908fc4728059719bed0e1c7b1c8b388c2d4a8da\n+8b66bf74e2a349e71eaa183af81fa63eaee76ad2\n+05950427d310654774031764a7141a1a4fd9c6e4\n+07fd147b9f12e9205afd66a624edce357977d615\n+12e31127948fa4bb01c3bddc1b8c85b432f7465b\n+8c87f175d335e9d9e93f987d871ae9f05f6a10a7\n+46b249e578e8a3dfbe85bc7253a12e82ef4b658b\n+a55716abe5662ec74c2f8af93023f1e7cca901fc\n+f646275b90b1de93bc62b4c4d045d75ac0b96eee\n+c252685aa5867631e9a5ef07ccae7c7c25cae8ff\n+a7d55c93385359952d85decd5037843ac70ba3d4\n+7dac1e5e9e887f5f6ff146e812a05bd3bf281eae\n+2a524b8e8fe69ef487fd8ea1b4f7a03f473ed201\n+ce5c1f4acae43477989cdf9a82ed33703919cda2\n+2db4cbcc437f51f5dac82cc4de46f383b92e6f11\n+7aa700424cbda387536373d8dfec88aee43f950e\n+b99a093afed880f23fb279c443cc6ae5e379cc43\n+b83264d9c7a8ddb79f64bd9540caddc8632ef31f\n+57e337d40e94ba33d8cd265c134d6ef857b32b59\n+a1dcf2e1087beaf3981739fd2bb74f35ecad630a\n+d38b0d7a6b6056cba26999b702815775e2437d87\n+815640ec6af9a38d6a2da4a4400056e2f4105080\n+09c4fd157c5b88df2d97fad4826c79b094db90c9\n+2efcfa5acfacb958973d9e8125e1d81f102e2dfd\n+dc6dee41f7cf2ba93fcd0fea7c157e4b2775d439\n+ad826b3df9f763b49f1e3e3d50c4efdd438c7547\n+c1a52276848d8caa9a9789dff176408c1aa6b1ed\n+3bf06e9bac57b5b5a746677b75e297a7b154bdbd\n+72ae6f8cf0224370e8121d6769b21e612ca15d6f\n+a143b88dbd4971ecfdd1d39a494489c8f2db0344\n+76fec09d878d6dbf214bdb6228d480bd9195db4c\n+93566e0c37c5ae104095474fea89f00dcb40f551\n+407d9232ef5cb1ebf6cff21f3d13e07ea4158eeb\n+9346f8429957e356d21c665bab59fe45bcf1f74e\n+6eeac6e30d65f9a972067c1ea8c49978c8e631ac\n+dc6b9406bdfab2af8c86cb080cb3e6cf8f2385d8\n+9f554e03ebe5701c1b75ff03b3d6152095c0cad3\n+05009935f9ac070197113954d680bc2c9150b9b3\n+508404de98a8a5435f52916cef8f328e82651961\n+ed0cc50afed146c27f6d8129c683c225fb940093\n+6429cfa8a70308241c576aeb92ffe3db5203b2ef\n+6898213409811b140843c3d89af43328c3b22fad\n+5b2ea29cf4fd298346437bb16a54407f8c1f9dca\n+e2a1a1ee895149c544d4ae295466611f0cec3094\n+e82fb872ff5cc8fd22d43327c1ee3e755f61c562\n+19b0f33de0efd9da788e8e4f3fdc2a9e159abdb1\n+89de1538ce1f8c00f80e8d11f43e1b77e24d7dea\n+de07fdcf77e97b8613091285e4d0a734f5de7492\n+01680195f8aa586c55c44767397380def3a23b54\n+05e1c85fb687c82ae477c72d4a7e2d6b0c692167\n+c072b8fd95cd4fa84f08189a0cd8b173ea2dbb8e\n+9a0ed08b40b15ae2b791aa8549b53e69934b4ea7\n+53f8f226bd1d627c4a6dec5862a1d4ea5a933e45\n+9d0f43b7ca7241d8a018fd35dd3bc01555235ec6\n+f12d2b5a8ac397e4bcaefcc19898f8ff5705dea5\n+8250de13587ed05ca45df3e12c5dc9bcb1500e2c\n+d727f77e390426e9e463336bda08d50c451c7086\n+484312bda2d43e3ea60047be076332299463adf8\n+c7e05b35ab0a791c7a8e2d863e716fdec6f3f671\n+b9c1cd81848da9de1baf9c2f29c19c50e549de13\n+8ea7d31e384975019733b5778feabbd9955c79d8\n+f798b891bcecea9548eedacae70eeb9906c1ddbf\n+ebefe7a00b46579cdd1e033a8c7fd8ce9aa578e4\n+ad087638ee4864d6244ec9381ff764bfa6ee5086\n+66db2d62d59817320c9182fc18e75a93b76828ea\n+7ce9ac5c83b1844a518ef2e12e87aae3cacdfe58\n+4286f43025149cf44207c3ad98e4a1f068520ada\n+cd0c5135ab2291aaa5410ac919bad3fc87249a4a\n+66ed450d771a8fc01c159a8402648ebd1c35eb4c\n+a82f03393a32842d49236e8666ee57805ca701f8\n+f972b04d63eb8af79ff3cec1dc561ed13dfa6053\n+ec45cc5e27668171b55271b0c735194c70e7da41\n+715e9fd7454f7a48d7adba7d42f662c20a3e3367\n+2e0a99037dcc35bc63ba0d54371bc678af737c8e\n+7fa8d758598407f3bf0beb0118dc122ea5340736\n+6a22373771edbc3c7513cacb9355f880c73c2cbf\n+b89ef131147f71a96152a7b5c4374266cdf539b2\n+01d8359983e2f77b5118fede3ffa947072c666c8\n+58f0c929a3d70a4bff79cc200f1c186f71ef1675\n+950be19727a581970591d8f8138dfe4725750382\n+425278d17bd0edf8a3a7cc81e55016f7fd8e7726\n+c028c7b7557da2baff7af8840108e8be4db8e0c6\n+47a7cfb0aa2498f6801026d258a59f9de48f60b0\n+f6b7df3155ddb4cedfbcf5d3eb3383d4614b3a85\n+d72098038f3b55a714ed8adb34fab547b15eb0d5\n+c49c825bd9f4764536b45df5a684d97173673fc7\n+33799afe83eec4200ff140e9bf5eae83701a4d7f\n+5c3f8ddcaa1164079105c452429fccf8127b01b6\n+1f01443567b03ac75a91c810f1733f5c21b5699d\n+b3e42b6d02e8d19658a9135e427ebceab5367779\n+69b3a6dd9d9a0adf5506c8b9fde42187356bd4a8\n+bafd075c5e6a1088ef0f1aa0b0b224e026a3d3e0\n+7daa3adb242d9c8728fdb15c6af6596aaad5502f\n+514993554c370f4cf30a109ac28d5d64893dbf0a\n+c8d2473e6cb042e7275a10c49d3f6a4a91bf0166\n+386f4385ab04b0b2c3d47bddc0dc0f2de7354964\n+9f33dba05c01ecc5c56eb1284ab7d64d42f55171"
      }
    ]
  },
  {
    "sha": "e257864e47a17d7fb80f8ff7cf858b64f3540702",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjU3ODY0ZTQ3YTE3ZDdmYjgwZjhmZjdjZjg1OGI2NGYzNTQwNzAy",
    "commit": {
      "author": {
        "name": "Darren Lee",
        "email": "jslee1301@hotmail.com",
        "date": "2017-04-01T18:05:04Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-04-01T18:05:04Z"
      },
      "message": "Add default Wallet",
      "tree": {
        "sha": "c9025f6797e546cac51508743f88822abd82dd85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9025f6797e546cac51508743f88822abd82dd85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e257864e47a17d7fb80f8ff7cf858b64f3540702",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e257864e47a17d7fb80f8ff7cf858b64f3540702",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e257864e47a17d7fb80f8ff7cf858b64f3540702",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e257864e47a17d7fb80f8ff7cf858b64f3540702/comments",
    "author": {
      "login": "jslee1301",
      "id": 31549724,
      "node_id": "MDQ6VXNlcjMxNTQ5NzI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/31549724?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jslee1301",
      "html_url": "https://github.com/jslee1301",
      "followers_url": "https://api.github.com/users/jslee1301/followers",
      "following_url": "https://api.github.com/users/jslee1301/following{/other_user}",
      "gists_url": "https://api.github.com/users/jslee1301/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jslee1301/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jslee1301/subscriptions",
      "organizations_url": "https://api.github.com/users/jslee1301/orgs",
      "repos_url": "https://api.github.com/users/jslee1301/repos",
      "events_url": "https://api.github.com/users/jslee1301/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jslee1301/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11049f4fe62606d1b0380a9ef800ac130f0fbadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11049f4fe62606d1b0380a9ef800ac130f0fbadf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11049f4fe62606d1b0380a9ef800ac130f0fbadf"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "98bd891e83bd42d2e2a889f9d3c2edcbb71a49fe",
        "filename": "sync_default-sync_default.walletx.walletx.zip",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e257864e47a17d7fb80f8ff7cf858b64f3540702/sync_default-sync_default.walletx.walletx.zip",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e257864e47a17d7fb80f8ff7cf858b64f3540702/sync_default-sync_default.walletx.walletx.zip",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/sync_default-sync_default.walletx.walletx.zip?ref=e257864e47a17d7fb80f8ff7cf858b64f3540702"
      }
    ]
  }
]