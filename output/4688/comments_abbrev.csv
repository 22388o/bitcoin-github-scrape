theuni,2014-08-12T20:31:58Z,You need to include test_bitcoin.h in BITCOIN_TESTS in Makefile.test.include.\n,https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51972671,51972671,
gmaxwell,2014-08-12T20:57:16Z,> 1. Creating test blocks requires proof-of-work.\n\nThis is what regtest mode is for. (The pull tester currently uses it for dynamically creating blocks to test)\n,https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51976183,51976183,
SergioDemianLerner,2014-08-12T21:07:49Z,"@gmaxwell  Yes I know, but test_bitcoin is run in MainNet, so to test MainNet specific things (such as the majority rule) I need to create blocks and skip the PoW verification.\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51977653,51977653,
SergioDemianLerner,2014-08-12T21:08:54Z,"How can I update this pull request to add test_bitcoin.h into BITCOIN_TESTS in Makefile.test.include ?\nDo I have to create a new pull request ?\nIn that case, all current comments will be lost...\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51977790,51977790,
gmaxwell,2014-08-12T21:21:46Z,"There should be no mainnet behavior which is not testable by regtest, if there isâ€” it should be fixed. The sole reason for regtest existing is exactly this case: regular mainnet blocks are too hard to create on the fly in tests.\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51979391,51979391,
SergioDemianLerner,2014-08-12T21:28:44Z,"Regnet class inherits from TestNet, and not from MainNet. But that is is unimportant.\nOne difference is nSubsidyHalvingInterval = 150;\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51980253,51980253,
gmaxwell,2014-08-12T21:30:56Z,"Yes, nSubsidyHalvingInterval = 150 is for exactly the same reason: otherwise the subsidy halving interval is not testable from the tests (well, without making 210000 blocks, of course). If some different number would be better for the tests it could be changed to that (obviously the blockchain tester would have to be updated).\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51980525,51980525,
SergioDemianLerner,2014-08-12T21:34:27Z,"Even if there is another procedure to create block test cases using another language and another framework (Java, BitcoinJ), I found really useful to be create testcases in the same unit test framework, the same language and the same source tree. It's much easier.\n\nIn fact, in another pull request we're working on, we're proposing modifications and we wrote extensive test cases using the interna",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51980939,51980939,
SergioDemianLerner,2014-08-12T21:36:39Z,"You can test it in the MainNet with the current test framework improvement. You create 2017 blocks on-the-fly, you check. Very straightforward.\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51981217,51981217,
SergioDemianLerner,2014-08-12T21:39:54Z,Creating an almost empty block on-the-fly currently takes a less than a few milliseconds. We could benchmark it.\n,https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51981581,51981581,
SergioDemianLerner,2014-08-12T21:41:31Z,"Even if there were another thousands ways of testing bitcoind, improving the test framework and letting people add more test cases is a good thing.\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51981782,51981782,
gmaxwell,2014-08-12T21:44:17Z,"Internal testing of the blockchain behavior isn't all that fantastic generally, because most mistakes will agree with themselves. The idea of an external harness is that it can be a reference point for behavior.  I fully agree that more tests and more ways of testing is good.  What I am not happy with a extra POW bypass dropped into the consensus critical code, especially when the justification is",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51982128,51982128,
SergioDemianLerner,2014-08-12T21:45:29Z,@gmaxwell Oops! yes. \n,https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51982257,51982257,
SergioDemianLerner,2014-08-12T21:52:09Z,"If an attacker is able to change the value of supressCheckBlockWork at will when there is no compiled code to do it (in bitcoind), he is also probably able to read the process memory and extract the private keys.\nNevertheless I understand your concerns.\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51982994,51982994,
SergioDemianLerner,2014-08-12T22:06:47Z,"Another difference is that MainNet rejects forwarding non-standard transactions, and RegNet allows it.\nWe can switch to RegNet for test_bitcoin. Then we can omit the POW skip, and we get a better testing framework without any possible theoretical security implication. But I suppose that there are test cases testing non-standard tx rules, so we can't easily switch.\nAt the end, using supressCheckB",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51984611,51984611,
gmaxwell,2014-08-12T22:11:56Z,"Again, regtest was created for this purpose. To the extent that regtest has shortcomings we should fix regtest.  The initial version of regtest was a set of patches that overlaid on top of bitcoin and changed mainnet rules.  When it was merged in as chain params it inhereted testnet but I think there is no reason regtest should be testnet based, IIRC the pull tester does no outside of block transa",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-51985074,51985074,
mikehearn,2014-08-17T17:00:46Z,"Great work Sergio, I didn't review it yet but this has been a big need for a while now.\n\nThe pull tester does use various non-standard scripts but mostly because it's kind of lazy. It could be fixed.\n\nRe: adding tests to it. The current code is kind of gross and Matt talks about rewriting it quite often. I'd hope it'd get better documentation as part of that, if he does it. There is at least a",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-52427893,52427893,
laanwj,2014-08-18T11:13:15Z,"Why are the wallet-related changes in here? I mean dbenv/wallet/walletdb. As this tests block chain behavior, I'm not sure why those have to change.\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-52479017,52479017,
laanwj,2014-08-18T11:18:45Z,"Agree with @gmaxwell to prefer using regtest mode for these tests instead of adding a `supressCheckBlockWork` to main. I wouldn't want this flag to be ever toggled accidentally on mainnet, and regtest already offers this functionailty anyway.\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-52479567,52479567,
BitcoinPullTester,2014-08-18T18:03:47Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4688_a7555d6f6430aa2ddc83404ae9b627d7d0dd1f6f/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-52530589,52530589,
SergioDemianLerner,2014-08-18T21:39:03Z,"@laanwj The wallet code required change in the way a BerkeleyDB handle was accessed: from direct access to the handle to indirect access though a pointer to a handle. This is because one of the objectives of this patch was to be able to destroy and re-create a block-chain programmaticaly.  BerkeleyDB handles do not allow to be re-opened after closing them, so was the necessity to delete the handle",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-52559178,52559178,
laanwj,2014-08-19T08:38:35Z,"@SergioDemianLerner Completely agree about programmatically destroying and re-creating block chains, but I'm still not sure how that relates to the wallet DB environment. Does the BDB environment need to be reinitialized every time you create a new block chain? I think this is just extra overhead - especially as you're not doing anything with the wallet in your tests.\n\nMaybe we could separate ou",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-52605041,52605041,
SergioDemianLerner,2014-08-19T13:14:48Z,"@laanwj There are several reasons why the wallet need to be re-created in test_bitcoin when the block-chain is re-created. First, all wallet-transactions will be invalid, since those transactions will be based on coinbases that do not exist anymore. Second, when the block-chain is destroyed in test_bitcoin, all temporary files are removed (the block-chain is stored in a temporary directory whose n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-52631166,52631166,
laanwj,2014-10-22T10:58:05Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-60067838,60067838,
laanwj,2015-01-30T11:01:04Z,"I'm going to replace this by out-of-tree RPC tests. I've written weird block generation code in Python, so we can just test these things externally without having unit tests with side effects or a dependent order (or having to change a lot of nontest code).\n",https://github.com/bitcoin/bitcoin/pull/4688#issuecomment-72185258,72185258,
