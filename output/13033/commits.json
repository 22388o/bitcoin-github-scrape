[
  {
    "sha": "0cb8303241db75b8a59234e4edcdc163d869443c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2I4MzAzMjQxZGI3NWI4YTU5MjM0ZTRlZGNkYzE2M2Q4Njk0NDNj",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-12T00:58:25Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:05Z"
      },
      "message": "[db] Create separate database for txindex.\n\nThe new TxIndexDB class will be used by a future commit in this\nchange set.",
      "tree": {
        "sha": "0d2f3434fabca52662c6be10c414fd21012da2ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d2f3434fabca52662c6be10c414fd21012da2ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cb8303241db75b8a59234e4edcdc163d869443c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cb8303241db75b8a59234e4edcdc163d869443c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cb8303241db75b8a59234e4edcdc163d869443c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cb8303241db75b8a59234e4edcdc163d869443c/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25ad2f75f5d105d30d2ca716a66138a6b32a8c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25ad2f75f5d105d30d2ca716a66138a6b32a8c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25ad2f75f5d105d30d2ca716a66138a6b32a8c68"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 64,
      "deletions": 3
    },
    "files": [
      {
        "sha": "2a5e0cab00ced037b191cf0c625cbd83909665af",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cb8303241db75b8a59234e4edcdc163d869443c/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cb8303241db75b8a59234e4edcdc163d869443c/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=0cb8303241db75b8a59234e4edcdc163d869443c",
        "patch": "@@ -224,6 +224,9 @@ class CDBWrapper\n     CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n     ~CDBWrapper();\n \n+    CDBWrapper(const CDBWrapper&) = delete;\n+    CDBWrapper& operator=(const CDBWrapper&) = delete;\n+\n     template <typename K, typename V>\n     bool Read(const K& key, V& value) const\n     {"
      },
      {
        "sha": "b4fbfd9522210fcf5becdd6b28df01be925cc630",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cb8303241db75b8a59234e4edcdc163d869443c/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cb8303241db75b8a59234e4edcdc163d869443c/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0cb8303241db75b8a59234e4edcdc163d869443c",
        "patch": "@@ -424,3 +424,35 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlock(CBlockLocator& locator) const\n+{\n+    bool success = Read(DB_BEST_BLOCK, locator);\n+    if (!success) {\n+        locator.SetNull();\n+    }\n+    return success;\n+}\n+\n+bool TxIndexDB::WriteBestBlock(const CBlockLocator& locator)\n+{\n+    return Write(DB_BEST_BLOCK, locator);\n+}"
      },
      {
        "sha": "b58158df0b7c359411efb24b4ed01b64ac66ca68",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 29,
        "deletions": 3,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cb8303241db75b8a59234e4edcdc163d869443c/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cb8303241db75b8a59234e4edcdc163d869443c/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=0cb8303241db75b8a59234e4edcdc163d869443c",
        "patch": "@@ -9,6 +9,7 @@\n #include <coins.h>\n #include <dbwrapper.h>\n #include <chain.h>\n+#include <primitives/block.h>\n \n #include <map>\n #include <memory>\n@@ -112,9 +113,6 @@ class CBlockTreeDB : public CDBWrapper\n public:\n     explicit CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n-    CBlockTreeDB(const CBlockTreeDB&) = delete;\n-    CBlockTreeDB& operator=(const CBlockTreeDB&) = delete;\n-\n     bool WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo);\n     bool ReadBlockFileInfo(int nFile, CBlockFileInfo &info);\n     bool ReadLastBlockFile(int &nFile);\n@@ -127,4 +125,32 @@ class CBlockTreeDB : public CDBWrapper\n     bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n };\n \n+/**\n+ * Access to the txindex database (indexes/txindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the TxIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class TxIndexDB : public CDBWrapper\n+{\n+public:\n+    explicit TxIndexDB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    /// Read the disk location of the transaction data with the given hash. Returns false if the\n+    /// transaction hash is not indexed.\n+    bool ReadTxPos(const uint256& txid, CDiskTxPos& pos) const;\n+\n+    /// Write a batch of transaction positions to the DB.\n+    bool WriteTxs(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);\n+\n+    /// Read block locator of the chain that the txindex is in sync with.\n+    bool ReadBestBlock(CBlockLocator& locator) const;\n+\n+    /// Write block locator of the chain that the txindex is in sync with.\n+    bool WriteBestBlock(const CBlockLocator& locator);\n+};\n+\n #endif // BITCOIN_TXDB_H"
      }
    ]
  },
  {
    "sha": "c88bcec93fa8b969e65b1fe7716bda429276bbd4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODhiY2VjOTNmYThiOTY5ZTY1YjFmZTc3MTZiZGE0MjkyNzZiYmQ0",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-12T00:58:25Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:06Z"
      },
      "message": "[db] Migration for txindex data to new, separate database.",
      "tree": {
        "sha": "22a669bfd8f9ff4c03d22da7b0bb677c5daeaf1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22a669bfd8f9ff4c03d22da7b0bb677c5daeaf1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c88bcec93fa8b969e65b1fe7716bda429276bbd4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c88bcec93fa8b969e65b1fe7716bda429276bbd4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c88bcec93fa8b969e65b1fe7716bda429276bbd4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c88bcec93fa8b969e65b1fe7716bda429276bbd4/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cb8303241db75b8a59234e4edcdc163d869443c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cb8303241db75b8a59234e4edcdc163d869443c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cb8303241db75b8a59234e4edcdc163d869443c"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 143,
      "deletions": 0
    },
    "files": [
      {
        "sha": "333d3596c155729c83b4a38bb17ff4d2aeeccfc9",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 139,
        "deletions": 0,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c88bcec93fa8b969e65b1fe7716bda429276bbd4/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c88bcec93fa8b969e65b1fe7716bda429276bbd4/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=c88bcec93fa8b969e65b1fe7716bda429276bbd4",
        "patch": "@@ -22,6 +22,7 @@ static const char DB_COIN = 'C';\n static const char DB_COINS = 'c';\n static const char DB_BLOCK_FILES = 'f';\n static const char DB_TXINDEX = 't';\n+static const char DB_TXINDEX_BLOCK = 'T';\n static const char DB_BLOCK_INDEX = 'b';\n \n static const char DB_BEST_BLOCK = 'B';\n@@ -456,3 +457,141 @@ bool TxIndexDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     return Write(DB_BEST_BLOCK, locator);\n }\n+\n+/*\n+ * Safely persist a transfer of data from the old txindex database to the new one, and compact the\n+ * range of keys updated. This is used internally by MigrateData.\n+ */\n+static void WriteTxIndexMigrationBatches(TxIndexDB& newdb, CBlockTreeDB& olddb,\n+                                         CDBBatch& batch_newdb, CDBBatch& batch_olddb,\n+                                         const std::pair<unsigned char, uint256>& begin_key,\n+                                         const std::pair<unsigned char, uint256>& end_key)\n+{\n+    // Sync new DB changes to disk before deleting from old DB.\n+    newdb.WriteBatch(batch_newdb, /*fSync=*/ true);\n+    olddb.WriteBatch(batch_olddb);\n+    olddb.CompactRange(begin_key, end_key);\n+\n+    batch_newdb.Clear();\n+    batch_olddb.Clear();\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator& best_locator)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is set,\n+    // this means the txindex from a previous version is valid and in sync with\n+    // the chain tip. The first step of the migration is to unset the flag and\n+    // write the chain hash to a separate key, DB_TXINDEX_BLOCK. After that, the\n+    // index entries are copied over in batches to the new database. Finally,\n+    // DB_TXINDEX_BLOCK is erased from the old database and the block hash is\n+    // written to the new database.\n+    //\n+    // Unsetting the boolean flag ensures that if the node is downgraded to a\n+    // previous version, it will not see a corrupted, partially migrated index\n+    // -- it will see that the txindex is disabled. When the node is upgraded\n+    // again, the migration will pick up where it left off and sync to the block\n+    // with hash DB_TXINDEX_BLOCK.\n+    bool f_legacy_flag = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_legacy_flag);\n+    if (f_legacy_flag) {\n+        if (!block_tree_db.Write(DB_TXINDEX_BLOCK, best_locator)) {\n+            return error(\"%s: cannot write block indicator\", __func__);\n+        }\n+        if (!block_tree_db.WriteFlag(\"txindex\", false)) {\n+            return error(\"%s: cannot write block index db flag\", __func__);\n+        }\n+    }\n+\n+    CBlockLocator locator;\n+    if (!block_tree_db.Read(DB_TXINDEX_BLOCK, locator)) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database... [0%%]\\n\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key = begin_key;\n+\n+    bool interrupted = false;\n+    std::unique_ptr<CDBIterator> cursor(block_tree_db.NewIterator());\n+    for (cursor->Seek(begin_key); cursor->Valid(); cursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            interrupted = true;\n+            break;\n+        }\n+\n+        if (!cursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            // Since txids are uniformly random and traversed in increasing order, the high 16 bits\n+            // of the hash can be used to estimate the current progress.\n+            const uint256& txid = key.second;\n+            uint32_t high_nibble =\n+                (static_cast<uint32_t>(*(txid.begin() + 0)) << 8) +\n+                (static_cast<uint32_t>(*(txid.begin() + 1)) << 0);\n+            int percentage_done = (int)(high_nibble * 100.0 / 65536.0 + 0.5);\n+\n+            uiInterface.ShowProgress(_(\"Upgrading txindex database\"), percentage_done, true);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"Upgrading txindex database... [%d%%]\\n\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!cursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            // NOTE: it's OK to delete the key pointed at by the current DB cursor while iterating\n+            // because LevelDB iterators are guaranteed to provide a consistent view of the\n+            // underlying data, like a lightweight snapshot.\n+            WriteTxIndexMigrationBatches(*this, block_tree_db,\n+                                         batch_newdb, batch_olddb,\n+                                         prev_key, key);\n+            prev_key = key;\n+        }\n+    }\n+\n+    // If these final DB batches complete the migration, write the best block\n+    // hash marker to the new database and delete from the old one. This signals\n+    // that the former is fully caught up to that point in the blockchain and\n+    // that all txindex entries have been removed from the latter.\n+    if (!interrupted) {\n+        batch_olddb.Erase(DB_TXINDEX_BLOCK);\n+        batch_newdb.Write(DB_BEST_BLOCK, locator);\n+    }\n+\n+    WriteTxIndexMigrationBatches(*this, block_tree_db,\n+                                 batch_newdb, batch_olddb,\n+                                 begin_key, key);\n+\n+    if (interrupted) {\n+        LogPrintf(\"[CANCELLED].\\n\");\n+        return false;\n+    }\n+\n+    uiInterface.ShowProgress(\"\", 100, false);\n+\n+    LogPrintf(\"[DONE].\\n\");\n+    return true;\n+}"
      },
      {
        "sha": "980e43b088b26a3bbd0cb72b2d38dfd2a8d21813",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c88bcec93fa8b969e65b1fe7716bda429276bbd4/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c88bcec93fa8b969e65b1fe7716bda429276bbd4/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=c88bcec93fa8b969e65b1fe7716bda429276bbd4",
        "patch": "@@ -151,6 +151,10 @@ class TxIndexDB : public CDBWrapper\n \n     /// Write block locator of the chain that the txindex is in sync with.\n     bool WriteBestBlock(const CBlockLocator& locator);\n+\n+    /// Migrate txindex data from the block tree DB, where it may be for older nodes that have not\n+    /// been upgraded yet to the new database.\n+    bool MigrateData(CBlockTreeDB& block_tree_db, const CBlockLocator& best_locator);\n };\n \n #endif // BITCOIN_TXDB_H"
      }
    ]
  },
  {
    "sha": "34d68bf3a3db2b78c07180416949bbc58bd0b682",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGQ2OGJmM2EzZGIyYjc4YzA3MTgwNDE2OTQ5YmJjNThiZDBiNjgy",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T18:19:57Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:07Z"
      },
      "message": "[index] Create new TxIndex class.\n\nThe TxIndex will be responsible for building the transaction index\nconcurrently with the main validation thread by implementing\nValidationInterface. This does not process blocks concurrently yet.",
      "tree": {
        "sha": "b283962424bb5097ba4f4218dad2f9a6bb1ef3a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b283962424bb5097ba4f4218dad2f9a6bb1ef3a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34d68bf3a3db2b78c07180416949bbc58bd0b682",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34d68bf3a3db2b78c07180416949bbc58bd0b682",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34d68bf3a3db2b78c07180416949bbc58bd0b682",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34d68bf3a3db2b78c07180416949bbc58bd0b682/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c88bcec93fa8b969e65b1fe7716bda429276bbd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c88bcec93fa8b969e65b1fe7716bda429276bbd4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c88bcec93fa8b969e65b1fe7716bda429276bbd4"
      }
    ],
    "stats": {
      "total": 219,
      "additions": 219,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0466d961c335d1fb587a552c87ad6bf5672d2404",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d68bf3a3db2b78c07180416949bbc58bd0b682/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d68bf3a3db2b78c07180416949bbc58bd0b682/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=34d68bf3a3db2b78c07180416949bbc58bd0b682",
        "patch": "@@ -103,6 +103,7 @@ BITCOIN_CORE_H = \\\n   fs.h \\\n   httprpc.h \\\n   httpserver.h \\\n+  index/txindex.h \\\n   indirectmap.h \\\n   init.h \\\n   interfaces/handler.h \\\n@@ -204,6 +205,7 @@ libbitcoin_server_a_SOURCES = \\\n   consensus/tx_verify.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n+  index/txindex.cpp \\\n   init.cpp \\\n   dbwrapper.cpp \\\n   merkleblock.cpp \\"
      },
      {
        "sha": "27cf844ceb53f96b17a2d4fc5f3a1415a51ca56e",
        "filename": "src/index/txindex.cpp",
        "status": "added",
        "additions": 157,
        "deletions": 0,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d68bf3a3db2b78c07180416949bbc58bd0b682/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d68bf3a3db2b78c07180416949bbc58bd0b682/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=34d68bf3a3db2b78c07180416949bbc58bd0b682",
        "patch": "@@ -0,0 +1,157 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        locator.SetNull();\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of \" /* Continued */\n+                      \"known best chain (tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best \" /* Continued */\n+                  \"chain (tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {\n+        error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxPos(txid, pos);\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {\n+        FatalError(\"%s: txindex failed to initialize\", __func__);\n+        return;\n+    }\n+}\n+\n+void TxIndex::Stop()\n+{\n+    UnregisterValidationInterface(this);\n+}"
      },
      {
        "sha": "3d42a89635a8e4a845c5b0448fb0a303fc465888",
        "filename": "src/index/txindex.h",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34d68bf3a3db2b78c07180416949bbc58bd0b682/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34d68bf3a3db2b78c07180416949bbc58bd0b682/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=34d68bf3a3db2b78c07180416949bbc58bd0b682",
        "patch": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <primitives/block.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+    void SetBestChain(const CBlockLocator& locator) override;\n+\n+public:\n+    /// Constructs the TxIndex, which becomes available to be queried.\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);\n+\n+    /// Look up the on-disk location of a transaction by hash.\n+    bool FindTx(const uint256& txid, CDiskTxPos& pos) const;\n+\n+    /// Start initializes the sync state and registers the instance as a\n+    /// ValidationInterface so that it stays in sync with blockchain updates.\n+    void Start();\n+\n+    /// Stops the instance from staying in sync with blockchain updates.\n+    void Stop();\n+};\n+\n+#endif // BITCOIN_INDEX_TXINDEX_H"
      }
    ]
  },
  {
    "sha": "94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGI0ZjhiYmI5ZTdlMzdmMzA1N2I0N2JmMTNhNzRkZTEyYjhlMGNj",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T18:42:31Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:08Z"
      },
      "message": "[index] TxIndex initial sync thread.\n\nTxIndex starts up a background thread to get in sync with the block\nindex before blocks are processed through the ValidationInterface.",
      "tree": {
        "sha": "2fb5bb06c550a4370058c246dd11c3653d757c1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fb5bb06c550a4370058c246dd11c3653d757c1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34d68bf3a3db2b78c07180416949bbc58bd0b682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34d68bf3a3db2b78c07180416949bbc58bd0b682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34d68bf3a3db2b78c07180416949bbc58bd0b682"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 100,
      "deletions": 0
    },
    "files": [
      {
        "sha": "56966021a904e5819486eb4ac1b95384a6d45836",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n #include <index/txindex.h>\n #include <init.h>\n #include <tinyformat.h>\n@@ -10,6 +11,9 @@\n #include <validation.h>\n #include <warnings.h>\n \n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n+\n template<typename... Args>\n static void FatalError(const char* fmt, const Args&... args)\n {\n@@ -47,6 +51,75 @@ bool TxIndex::Init()\n     return true;\n }\n \n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        int64_t last_locator_write_time = 0;\n+        while (true) {\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    WriteBestBlock(pindex);\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n+                WriteBestBlock(pindex);\n+                last_locator_write_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n {\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n@@ -59,6 +132,15 @@ bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n     return m_db->WriteTxs(vPos);\n }\n \n+bool TxIndex::WriteBestBlock(const CBlockIndex* block_index)\n+{\n+    LOCK(cs_main);\n+    if (!m_db->WriteBestBlock(chainActive.GetLocator(block_index))) {\n+        return error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+    return true;\n+}\n+\n void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n                     const std::vector<CTransactionRef>& txn_conflicted)\n {\n@@ -149,9 +231,16 @@ void TxIndex::Start()\n         FatalError(\"%s: txindex failed to initialize\", __func__);\n         return;\n     }\n+\n+    m_thread_sync = std::thread(&TraceThread<std::function<void()>>, \"txindex\",\n+                                std::bind(&TxIndex::ThreadSync, this));\n }\n \n void TxIndex::Stop()\n {\n     UnregisterValidationInterface(this);\n+\n+    if (m_thread_sync.joinable()) {\n+        m_thread_sync.join();\n+    }\n }"
      },
      {
        "sha": "35d58d5b656c33e8a780d03a4b9d9aa1f05fb148",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc",
        "patch": "@@ -30,12 +30,23 @@ class TxIndex final : public CValidationInterface\n     /// The last block in the chain that the TxIndex is in sync with.\n     std::atomic<const CBlockIndex*> m_best_block_index;\n \n+    std::thread m_thread_sync;\n+\n     /// Initialize internal state from the database and block index.\n     bool Init();\n \n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync. Once the\n+    /// txindex gets in sync, the m_synced flag is set and the BlockConnected\n+    /// ValidationInterface callback takes over and the sync thread exits.\n+    void ThreadSync();\n+\n     /// Write update index entries for a newly connected block.\n     bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n \n+    /// Write the current chain block locator to the DB.\n+    bool WriteBestBlock(const CBlockIndex* block_index);\n+\n protected:\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n                         const std::vector<CTransactionRef>& txn_conflicted) override;"
      }
    ]
  },
  {
    "sha": "70d510d93c08a168407f55c932ab09c644dea3b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGQ1MTBkOTNjMDhhMTY4NDA3ZjU1YzkzMmFiMDljNjQ0ZGVhM2I4",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T18:52:42Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:09Z"
      },
      "message": "[index] Allow TxIndex sync thread to be interrupted.",
      "tree": {
        "sha": "c20fd2b12e025dedc7e0447d077ac8ae753c1b18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c20fd2b12e025dedc7e0447d077ac8ae753c1b18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70d510d93c08a168407f55c932ab09c644dea3b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70d510d93c08a168407f55c932ab09c644dea3b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70d510d93c08a168407f55c932ab09c644dea3b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70d510d93c08a168407f55c932ab09c644dea3b8/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94b4f8bbb9e7e37f3057b47bf13a74de12b8e0cc"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 30,
      "deletions": 3
    },
    "files": [
      {
        "sha": "82798fbcc1c4e8614e9a97269802e7ad02d9f88b",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70d510d93c08a168407f55c932ab09c644dea3b8/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70d510d93c08a168407f55c932ab09c644dea3b8/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=70d510d93c08a168407f55c932ab09c644dea3b8",
        "patch": "@@ -30,6 +30,12 @@ TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n     m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n {}\n \n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n bool TxIndex::Init()\n {\n     LOCK(cs_main);\n@@ -76,6 +82,11 @@ void TxIndex::ThreadSync()\n         int64_t last_log_time = 0;\n         int64_t last_locator_write_time = 0;\n         while (true) {\n+            if (m_interrupt) {\n+                WriteBestBlock(pindex);\n+                return;\n+            }\n+\n             {\n                 LOCK(cs_main);\n                 const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n@@ -222,6 +233,11 @@ bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n     return m_db->ReadTxPos(txid, pos);\n }\n \n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n void TxIndex::Start()\n {\n     // Need to register this ValidationInterface before running Init(), so that"
      },
      {
        "sha": "633aee46ceb90b79ad2ff6a8c362068fd707a45c",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70d510d93c08a168407f55c932ab09c644dea3b8/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70d510d93c08a168407f55c932ab09c644dea3b8/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=70d510d93c08a168407f55c932ab09c644dea3b8",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_INDEX_TXINDEX_H\n \n #include <primitives/block.h>\n+#include <threadinterrupt.h>\n #include <txdb.h>\n #include <uint256.h>\n #include <validationinterface.h>\n@@ -31,14 +32,16 @@ class TxIndex final : public CValidationInterface\n     std::atomic<const CBlockIndex*> m_best_block_index;\n \n     std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n \n     /// Initialize internal state from the database and block index.\n     bool Init();\n \n     /// Sync the tx index with the block index starting from the current best\n-    /// block. Intended to be run in its own thread, m_thread_sync. Once the\n-    /// txindex gets in sync, the m_synced flag is set and the BlockConnected\n-    /// ValidationInterface callback takes over and the sync thread exits.\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n     void ThreadSync();\n \n     /// Write update index entries for a newly connected block.\n@@ -57,9 +60,14 @@ class TxIndex final : public CValidationInterface\n     /// Constructs the TxIndex, which becomes available to be queried.\n     explicit TxIndex(std::unique_ptr<TxIndexDB> db);\n \n+    /// Destructor interrupts sync thread if running and blocks until it exits.\n+    ~TxIndex();\n+\n     /// Look up the on-disk location of a transaction by hash.\n     bool FindTx(const uint256& txid, CDiskTxPos& pos) const;\n \n+    void Interrupt();\n+\n     /// Start initializes the sync state and registers the instance as a\n     /// ValidationInterface so that it stays in sync with blockchain updates.\n     void Start();"
      },
      {
        "sha": "7da4e136ef57f442509581107b67f9a588b1d38a",
        "filename": "src/threadinterrupt.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70d510d93c08a168407f55c932ab09c644dea3b8/src/threadinterrupt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70d510d93c08a168407f55c932ab09c644dea3b8/src/threadinterrupt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadinterrupt.cpp?ref=70d510d93c08a168407f55c932ab09c644dea3b8",
        "patch": "@@ -5,6 +5,8 @@\n \n #include <threadinterrupt.h>\n \n+CThreadInterrupt::CThreadInterrupt() : flag(false) {}\n+\n CThreadInterrupt::operator bool() const\n {\n     return flag.load(std::memory_order_acquire);"
      },
      {
        "sha": "d373e3c371e44ef937e963ea24f2e947fab1c6d9",
        "filename": "src/threadinterrupt.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70d510d93c08a168407f55c932ab09c644dea3b8/src/threadinterrupt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70d510d93c08a168407f55c932ab09c644dea3b8/src/threadinterrupt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadinterrupt.h?ref=70d510d93c08a168407f55c932ab09c644dea3b8",
        "patch": "@@ -18,6 +18,7 @@\n class CThreadInterrupt\n {\n public:\n+    CThreadInterrupt();\n     explicit operator bool() const;\n     void operator()();\n     void reset();"
      }
    ]
  },
  {
    "sha": "f90c3a62f506d1bc0fe26972b312f07152c79b2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTBjM2E2MmY1MDZkMWJjMGZlMjY5NzJiMzEyZjA3MTUyYzc5YjJl",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T19:20:10Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:11Z"
      },
      "message": "[index] TxIndex method to wait until caught up.\n\nIn order to preserve getrawtransaction RPC behavior, there needs to be\na way for a thread to ensure the transaction index is in sync with the\ncurrent state of the blockchain.",
      "tree": {
        "sha": "a5a6e11dd46e84f703a21a3288036a22b1e73ce4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5a6e11dd46e84f703a21a3288036a22b1e73ce4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f90c3a62f506d1bc0fe26972b312f07152c79b2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f90c3a62f506d1bc0fe26972b312f07152c79b2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f90c3a62f506d1bc0fe26972b312f07152c79b2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f90c3a62f506d1bc0fe26972b312f07152c79b2e/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70d510d93c08a168407f55c932ab09c644dea3b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70d510d93c08a168407f55c932ab09c644dea3b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70d510d93c08a168407f55c932ab09c644dea3b8"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "484526a6d97d33f6e27948b2adaadcd274090301",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90c3a62f506d1bc0fe26972b312f07152c79b2e/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90c3a62f506d1bc0fe26972b312f07152c79b2e/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=f90c3a62f506d1bc0fe26972b312f07152c79b2e",
        "patch": "@@ -228,6 +228,30 @@ void TxIndex::SetBestChain(const CBlockLocator& locator)\n     }\n }\n \n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        const CBlockIndex* chain_tip = chainActive.Tip();\n+        const CBlockIndex* best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    LogPrintf(\"%s: txindex is catching up on block notifications\\n\", __func__);\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n {\n     return m_db->ReadTxPos(txid, pos);"
      },
      {
        "sha": "e1f1b176767aafdad01364428de1b8736a675d52",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f90c3a62f506d1bc0fe26972b312f07152c79b2e/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f90c3a62f506d1bc0fe26972b312f07152c79b2e/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=f90c3a62f506d1bc0fe26972b312f07152c79b2e",
        "patch": "@@ -63,6 +63,12 @@ class TxIndex final : public CValidationInterface\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n     ~TxIndex();\n \n+    /// Blocks the current thread until the transaction index is caught up to\n+    /// the current state of the block chain. This only blocks if the index has gotten in sync once\n+    /// and only needs to process blocks in the ValidationInterface queue. If the index is catching\n+    /// up from far behind, this method does not block and immediately returns false.\n+    bool BlockUntilSyncedToCurrentChain();\n+\n     /// Look up the on-disk location of a transaction by hash.\n     bool FindTx(const uint256& txid, CDiskTxPos& pos) const;\n "
      }
    ]
  },
  {
    "sha": "8181db88f6e0ed96654951e18b1558cd8f78765b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTgxZGI4OGY2ZTBlZDk2NjU0OTUxZTE4YjE1NThjZDhmNzg3NjVi",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T19:29:59Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:12Z"
      },
      "message": "[init] Initialize and start TxIndex in init code.",
      "tree": {
        "sha": "45a4614e5baf4e0df61995519938b06b47e079ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45a4614e5baf4e0df61995519938b06b47e079ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8181db88f6e0ed96654951e18b1558cd8f78765b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8181db88f6e0ed96654951e18b1558cd8f78765b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8181db88f6e0ed96654951e18b1558cd8f78765b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8181db88f6e0ed96654951e18b1558cd8f78765b/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f90c3a62f506d1bc0fe26972b312f07152c79b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f90c3a62f506d1bc0fe26972b312f07152c79b2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f90c3a62f506d1bc0fe26972b312f07152c79b2e"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 33,
      "deletions": 11
    },
    "files": [
      {
        "sha": "7992d85338a58a817e0cbe92c0b94eab87bf6062",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8181db88f6e0ed96654951e18b1558cd8f78765b/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8181db88f6e0ed96654951e18b1558cd8f78765b/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=8181db88f6e0ed96654951e18b1558cd8f78765b",
        "patch": "@@ -14,6 +14,8 @@\n constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n \n+std::unique_ptr<TxIndex> g_txindex;\n+\n template<typename... Args>\n static void FatalError(const char* fmt, const Args&... args)\n {"
      },
      {
        "sha": "41199f0b3f91c2757f72d946ba4b10eb3459af80",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8181db88f6e0ed96654951e18b1558cd8f78765b/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8181db88f6e0ed96654951e18b1558cd8f78765b/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=8181db88f6e0ed96654951e18b1558cd8f78765b",
        "patch": "@@ -82,4 +82,7 @@ class TxIndex final : public CValidationInterface\n     void Stop();\n };\n \n+/// The global transaction index, used in GetTransaction. May be null.\n+extern std::unique_ptr<TxIndex> g_txindex;\n+\n #endif // BITCOIN_INDEX_TXINDEX_H"
      },
      {
        "sha": "e1eddfa0ec6289aa7bbc23157898eb66b2c9a7be",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 10,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8181db88f6e0ed96654951e18b1558cd8f78765b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8181db88f6e0ed96654951e18b1558cd8f78765b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8181db88f6e0ed96654951e18b1558cd8f78765b",
        "patch": "@@ -19,6 +19,7 @@\n #include <fs.h>\n #include <httpserver.h>\n #include <httprpc.h>\n+#include <index/txindex.h>\n #include <key.h>\n #include <validation.h>\n #include <miner.h>\n@@ -182,6 +183,9 @@ void Interrupt()\n     InterruptMapPort();\n     if (g_connman)\n         g_connman->Interrupt();\n+    if (g_txindex) {\n+        g_txindex->Interrupt();\n+    }\n }\n \n void Shutdown()\n@@ -212,6 +216,9 @@ void Shutdown()\n     if (g_connman) g_connman->Stop();\n     peerLogic.reset();\n     g_connman.reset();\n+    if (g_txindex) {\n+        g_txindex.reset();\n+    }\n \n     StopTorControl();\n \n@@ -1414,16 +1421,20 @@ bool AppInitMain()\n     int64_t nTotalCache = (gArgs.GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n     nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n     nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greater than nMaxDbcache\n-    int64_t nBlockTreeDBCache = nTotalCache / 8;\n-    nBlockTreeDBCache = std::min(nBlockTreeDBCache, (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxBlockDBAndTxIndexCache : nMaxBlockDBCache) << 20);\n+    int64_t nBlockTreeDBCache = std::min(nTotalCache / 8, nMaxBlockDBCache << 20);\n     nTotalCache -= nBlockTreeDBCache;\n+    int64_t nTxIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n+    nTotalCache -= nTxIndexCache;\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n     nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     LogPrintf(\"Cache configuration:\\n\");\n     LogPrintf(\"* Using %.1fMiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+        LogPrintf(\"* Using %.1fMiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n+    }\n     LogPrintf(\"* Using %.1fMiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n     LogPrintf(\"* Using %.1fMiB for in-memory UTXO set (plus up to %.1fMiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n@@ -1457,9 +1468,8 @@ bool AppInitMain()\n \n                 if (fRequestShutdown) break;\n \n-                // LoadBlockIndex will load fTxIndex from the db, or set it if\n-                // we're reindexing. It will also load fHavePruned if we've\n-                // ever removed a block file from disk.\n+                // LoadBlockIndex will load fHavePruned if we've ever removed a\n+                // block file from disk.\n                 // Note that it also sets fReindex based on the disk flag!\n                 // From here on out fReindex and fReset mean something different!\n                 if (!LoadBlockIndex(chainparams)) {\n@@ -1608,10 +1618,17 @@ bool AppInitMain()\n         ::feeEstimator.Read(est_filein);\n     fFeeEstimatesInitialized = true;\n \n-    // ********************************************************* Step 8: load wallet\n+    // ********************************************************* Step 8: start indexers\n+    if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+        auto txindex_db = MakeUnique<TxIndexDB>(nTxIndexCache, false, fReindex);\n+        g_txindex = MakeUnique<TxIndex>(std::move(txindex_db));\n+        g_txindex->Start();\n+    }\n+\n+    // ********************************************************* Step 9: load wallet\n     if (!g_wallet_init_interface.Open()) return false;\n \n-    // ********************************************************* Step 9: data directory maintenance\n+    // ********************************************************* Step 10: data directory maintenance\n \n     // if pruning, unset the service bit and perform the initial blockstore prune\n     // after any wallet rescanning has taken place.\n@@ -1633,7 +1650,7 @@ bool AppInitMain()\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);\n     }\n \n-    // ********************************************************* Step 10: import blocks\n+    // ********************************************************* Step 11: import blocks\n \n     if (!CheckDiskSpace() && !CheckDiskSpace(0, true))\n         return false;\n@@ -1672,7 +1689,7 @@ bool AppInitMain()\n         return false;\n     }\n \n-    // ********************************************************* Step 11: start node\n+    // ********************************************************* Step 12: start node\n \n     int chain_active_height;\n \n@@ -1750,7 +1767,7 @@ bool AppInitMain()\n         return false;\n     }\n \n-    // ********************************************************* Step 12: finished\n+    // ********************************************************* Step 13: finished\n \n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\"));"
      },
      {
        "sha": "4193f98de1858eeccd1a0deeaa1691f0ef50242b",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8181db88f6e0ed96654951e18b1558cd8f78765b/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8181db88f6e0ed96654951e18b1558cd8f78765b/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=8181db88f6e0ed96654951e18b1558cd8f78765b",
        "patch": "@@ -36,7 +36,7 @@ static const int64_t nMaxBlockDBCache = 2;\n //! Max memory allocated to block tree DB specific cache, if -txindex (MiB)\n // Unlike for the UTXO database, for the txindex scenario the leveldb cache make\n // a meaningful difference: https://github.com/bitcoin/bitcoin/pull/8273#issuecomment-229601991\n-static const int64_t nMaxBlockDBAndTxIndexCache = 1024;\n+static const int64_t nMaxTxIndexCache = 1024;\n //! Max memory allocated to coin DB specific cache (MiB)\n static const int64_t nMaxCoinsDBCache = 8;\n "
      }
    ]
  },
  {
    "sha": "e0a3b80033be388b7b8ecce8bd4273867e4bb699",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGEzYjgwMDMzYmUzODhiN2I4ZWNjZThiZDQyNzM4NjdlNGJiNjk5",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T19:41:35Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:13Z"
      },
      "message": "[validation] Replace tx index code in validation code with TxIndex.",
      "tree": {
        "sha": "dc7721e0c7a39e0e99a42511c7832b9b7d0b4845",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc7721e0c7a39e0e99a42511c7832b9b7d0b4845"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0a3b80033be388b7b8ecce8bd4273867e4bb699",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a3b80033be388b7b8ecce8bd4273867e4bb699",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a3b80033be388b7b8ecce8bd4273867e4bb699",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a3b80033be388b7b8ecce8bd4273867e4bb699/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8181db88f6e0ed96654951e18b1558cd8f78765b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8181db88f6e0ed96654951e18b1558cd8f78765b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8181db88f6e0ed96654951e18b1558cd8f78765b"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 7,
      "deletions": 43
    },
    "files": [
      {
        "sha": "eca3577f275ecf9cffe1fe08e2217e1368237af3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a3b80033be388b7b8ecce8bd4273867e4bb699/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a3b80033be388b7b8ecce8bd4273867e4bb699/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e0a3b80033be388b7b8ecce8bd4273867e4bb699",
        "patch": "@@ -1483,12 +1483,6 @@ bool AppInitMain()\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n \n-                // Check for changed -txindex state\n-                if (fTxIndex != gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n-                    break;\n-                }\n-\n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n                 // in the past, but is now trying to run unpruned.\n                 if (fHavePruned && !fPruneMode) {"
      },
      {
        "sha": "6564a6b484899f899f0aa3e85b584cc286ecea19",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a3b80033be388b7b8ecce8bd4273867e4bb699/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a3b80033be388b7b8ecce8bd4273867e4bb699/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e0a3b80033be388b7b8ecce8bd4273867e4bb699",
        "patch": "@@ -7,6 +7,7 @@\n #include <coins.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <index/txindex.h>\n #include <init.h>\n #include <keystore.h>\n #include <validation.h>\n@@ -176,10 +177,10 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n             }\n             errmsg = \"No such transaction found in the provided block\";\n+        } else if (!g_txindex) {\n+            errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n         } else {\n-            errmsg = fTxIndex\n-              ? \"No such mempool or blockchain transaction\"\n-              : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+            errmsg = \"No such mempool or blockchain transaction\";\n         }\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errmsg + \". Use gettransaction for wallet transactions.\");\n     }"
      },
      {
        "sha": "5ea81bfc98c63e24fe95df6b918911244c3f6119",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 33,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a3b80033be388b7b8ecce8bd4273867e4bb699/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a3b80033be388b7b8ecce8bd4273867e4bb699/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e0a3b80033be388b7b8ecce8bd4273867e4bb699",
        "patch": "@@ -16,6 +16,7 @@\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n #include <hash.h>\n+#include <index/txindex.h>\n #include <init.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -217,7 +218,6 @@ uint256 g_best_block;\n int nScriptCheckThreads = 0;\n std::atomic_bool fImporting(false);\n std::atomic_bool fReindex(false);\n-bool fTxIndex = false;\n bool fHavePruned = false;\n bool fPruneMode = false;\n bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n@@ -1028,9 +1028,9 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n             return true;\n         }\n \n-        if (fTxIndex) {\n+        if (g_txindex) {\n             CDiskTxPos postx;\n-            if (pblocktree->ReadTxIndex(hash, postx)) {\n+            if (g_txindex->FindTx(hash, postx)) {\n                 CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n                 if (file.IsNull())\n                     return error(\"%s: OpenBlockFile failed\", __func__);\n@@ -1668,26 +1668,6 @@ static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState&\n     return true;\n }\n \n-static bool WriteTxIndexDataForBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex)\n-{\n-    if (!fTxIndex) return true;\n-\n-    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n-    std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n-    vPos.reserve(block.vtx.size());\n-    for (const CTransactionRef& tx : block.vtx)\n-    {\n-        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n-        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n-    }\n-\n-    if (!pblocktree->WriteTxIndex(vPos)) {\n-        return AbortNode(state, \"Failed to write transaction index\");\n-    }\n-\n-    return true;\n-}\n-\n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n void ThreadScriptCheck() {\n@@ -2079,9 +2059,6 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n         setDirtyBlockIndex.insert(pindex);\n     }\n \n-    if (!WriteTxIndexDataForBlock(block, state, pindex))\n-        return false;\n-\n     assert(pindex->phashBlock);\n     // add this block to the view's block chain\n     view.SetBestBlock(pindex->GetBlockHash());\n@@ -3903,10 +3880,6 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     pblocktree->ReadReindexing(fReindexing);\n     if(fReindexing) fReindex = true;\n \n-    // Check whether we have a transaction index\n-    pblocktree->ReadFlag(\"txindex\", fTxIndex);\n-    LogPrintf(\"%s: transaction index %s\\n\", __func__, fTxIndex ? \"enabled\" : \"disabled\");\n-\n     return true;\n }\n \n@@ -4300,9 +4273,6 @@ bool LoadBlockIndex(const CChainParams& chainparams)\n         // needs_init.\n \n         LogPrintf(\"Initializing databases...\\n\");\n-        // Use the provided setting for -txindex in the new database\n-        fTxIndex = gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX);\n-        pblocktree->WriteFlag(\"txindex\", fTxIndex);\n     }\n     return true;\n }"
      },
      {
        "sha": "9b4010076521e3a87884619571887f132da4d97d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0a3b80033be388b7b8ecce8bd4273867e4bb699/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0a3b80033be388b7b8ecce8bd4273867e4bb699/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e0a3b80033be388b7b8ecce8bd4273867e4bb699",
        "patch": "@@ -171,7 +171,6 @@ extern uint256 g_best_block;\n extern std::atomic_bool fImporting;\n extern std::atomic_bool fReindex;\n extern int nScriptCheckThreads;\n-extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern bool fRequireStandard;\n extern bool fCheckBlockIndex;"
      }
    ]
  },
  {
    "sha": "a03f804f2aa0261ed3a47103dfe989ebd9302480",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDNmODA0ZjJhYTAyNjFlZDNhNDcxMDNkZmU5ODllYmQ5MzAyNDgw",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-03-30T07:39:08Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:15Z"
      },
      "message": "[index] Move disk IO logic from GetTransaction to TxIndex::FindTx.",
      "tree": {
        "sha": "0bb7e5c43cc73c6bf0a439e2f7c55632a029a547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bb7e5c43cc73c6bf0a439e2f7c55632a029a547"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a03f804f2aa0261ed3a47103dfe989ebd9302480",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a03f804f2aa0261ed3a47103dfe989ebd9302480",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a03f804f2aa0261ed3a47103dfe989ebd9302480",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a03f804f2aa0261ed3a47103dfe989ebd9302480/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0a3b80033be388b7b8ecce8bd4273867e4bb699",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0a3b80033be388b7b8ecce8bd4273867e4bb699",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0a3b80033be388b7b8ecce8bd4273867e4bb699"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 32,
      "deletions": 25
    },
    "files": [
      {
        "sha": "2a661f03301cac95d30eb36b8358f5448b87d832",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a03f804f2aa0261ed3a47103dfe989ebd9302480/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a03f804f2aa0261ed3a47103dfe989ebd9302480/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=a03f804f2aa0261ed3a47103dfe989ebd9302480",
        "patch": "@@ -254,9 +254,30 @@ bool TxIndex::BlockUntilSyncedToCurrentChain()\n     return true;\n }\n \n-bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+bool TxIndex::FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const\n {\n-    return m_db->ReadTxPos(txid, pos);\n+    CDiskTxPos postx;\n+    if (!m_db->ReadTxPos(tx_hash, postx)) {\n+        return false;\n+    }\n+\n+    CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n+    }\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+        file >> tx;\n+    } catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    if (tx->GetHash() != tx_hash) {\n+        return error(\"%s: txid mismatch\", __func__);\n+    }\n+    block_hash = header.GetHash();\n+    return true;\n }\n \n void TxIndex::Interrupt()"
      },
      {
        "sha": "ac746de05be348fb3fed187ce656aa9130513820",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a03f804f2aa0261ed3a47103dfe989ebd9302480/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a03f804f2aa0261ed3a47103dfe989ebd9302480/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=a03f804f2aa0261ed3a47103dfe989ebd9302480",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_INDEX_TXINDEX_H\n \n #include <primitives/block.h>\n+#include <primitives/transaction.h>\n #include <threadinterrupt.h>\n #include <txdb.h>\n #include <uint256.h>\n@@ -69,8 +70,13 @@ class TxIndex final : public CValidationInterface\n     /// up from far behind, this method does not block and immediately returns false.\n     bool BlockUntilSyncedToCurrentChain();\n \n-    /// Look up the on-disk location of a transaction by hash.\n-    bool FindTx(const uint256& txid, CDiskTxPos& pos) const;\n+    /// Look up a transaction by hash.\n+    ///\n+    /// @param[in]   tx_hash  The hash of the transaction to be returned.\n+    /// @param[out]  block_hash  The hash of the block the transaction is found in.\n+    /// @param[out]  tx  The transaction itself.\n+    /// @return  true if transaction is found, false otherwise\n+    bool FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const;\n \n     void Interrupt();\n "
      },
      {
        "sha": "14257d78f9fd574a34f6dd8b04cb8e5e236075ed",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 21,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a03f804f2aa0261ed3a47103dfe989ebd9302480/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a03f804f2aa0261ed3a47103dfe989ebd9302480/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a03f804f2aa0261ed3a47103dfe989ebd9302480",
        "patch": "@@ -1029,27 +1029,7 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n         }\n \n         if (g_txindex) {\n-            CDiskTxPos postx;\n-            if (g_txindex->FindTx(hash, postx)) {\n-                CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n-                if (file.IsNull())\n-                    return error(\"%s: OpenBlockFile failed\", __func__);\n-                CBlockHeader header;\n-                try {\n-                    file >> header;\n-                    fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n-                    file >> txOut;\n-                } catch (const std::exception& e) {\n-                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-                }\n-                hashBlock = header.GetHash();\n-                if (txOut->GetHash() != hash)\n-                    return error(\"%s: txid mismatch\", __func__);\n-                return true;\n-            }\n-\n-            // transaction not found in index, nothing more can be done\n-            return false;\n+            return g_txindex->FindTx(hash, hashBlock, txOut);\n         }\n \n         if (fAllowSlow) { // use coin database to locate block that contains transaction, and scan it"
      }
    ]
  },
  {
    "sha": "6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDc3MmEzZDQ0MTg3NWZiZGNkN2MxNWFhYThkOWI5N2Y2MWFhM2E5",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T19:49:08Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:17Z"
      },
      "message": "[rpc] Public interfaces to GetTransaction block until synced.\n\nNow that the transaction index is updated asynchronously, in order to\npreserve the current behavior of public interfaces, the code blocks\nuntil the transaction index is caught up with the current state of the\nblockchain.",
      "tree": {
        "sha": "c154280fa31e41b205323aff9756312359430fbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c154280fa31e41b205323aff9756312359430fbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a03f804f2aa0261ed3a47103dfe989ebd9302480",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a03f804f2aa0261ed3a47103dfe989ebd9302480",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a03f804f2aa0261ed3a47103dfe989ebd9302480"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 28,
      "deletions": 9
    },
    "files": [
      {
        "sha": "095655b3a04a130b9b3b5ba1706642d522b91586",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9",
        "patch": "@@ -6,6 +6,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <core_io.h>\n+#include <index/txindex.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <validation.h>\n@@ -350,6 +351,10 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n+    if (g_txindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();\n+    }\n+\n     CTransactionRef tx;\n     uint256 hashBlock = uint256();\n     if (!GetTransaction(hash, tx, Params().GetConsensus(), hashBlock, true))"
      },
      {
        "sha": "19f964138e1a1a998e4ccfb29007699c0dac2b64",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9",
        "patch": "@@ -47,8 +47,6 @@ static std::mutex cs_blockchange;\n static std::condition_variable cond_blockchange;\n static CUpdatedBlock latestblock;\n \n-extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n-\n /* Calculate the difficulty for a given block index,\n  * or the block index of the given chain.\n  */"
      },
      {
        "sha": "2659b075098f2004e9f9ca4ccc1b1d8d36b2f18f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 7,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9",
        "patch": "@@ -48,6 +48,8 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n+        LOCK(cs_main);\n+\n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n         CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n         if (pindex) {\n@@ -142,8 +144,6 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             + HelpExampleCli(\"getrawtransaction\", \"\\\"mytxid\\\" true \\\"myblockhash\\\"\")\n         );\n \n-    LOCK(cs_main);\n-\n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n     CBlockIndex* blockindex = nullptr;\n@@ -160,6 +160,8 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n     }\n \n     if (!request.params[2].isNull()) {\n+        LOCK(cs_main);\n+\n         uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n         blockindex = LookupBlockIndex(blockhash);\n         if (!blockindex) {\n@@ -168,6 +170,11 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n         in_active_chain = chainActive.Contains(blockindex);\n     }\n \n+    bool f_txindex_ready = false;\n+    if (g_txindex && !blockindex) {\n+        f_txindex_ready = g_txindex->BlockUntilSyncedToCurrentChain();\n+    }\n+\n     CTransactionRef tx;\n     uint256 hash_block;\n     if (!GetTransaction(hash, tx, Params().GetConsensus(), hash_block, true, blockindex)) {\n@@ -179,6 +186,8 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             errmsg = \"No such transaction found in the provided block\";\n         } else if (!g_txindex) {\n             errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        } else if (!f_txindex_ready) {\n+            errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";\n         } else {\n             errmsg = \"No such mempool or blockchain transaction\";\n         }\n@@ -230,19 +239,18 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n        oneTxid = hash;\n     }\n \n-    LOCK(cs_main);\n-\n     CBlockIndex* pblockindex = nullptr;\n-\n     uint256 hashBlock;\n-    if (!request.params[1].isNull())\n-    {\n+    if (!request.params[1].isNull()) {\n+        LOCK(cs_main);\n         hashBlock = uint256S(request.params[1].get_str());\n         pblockindex = LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     } else {\n+        LOCK(cs_main);\n+\n         // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n         for (const auto& tx : setTxids) {\n             const Coin& coin = AccessByTxid(*pcoinsTip, tx);\n@@ -253,6 +261,14 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n         }\n     }\n \n+\n+    // Allow txindex to catch up if we need to query it and before we acquire cs_main.\n+    if (g_txindex && !pblockindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();\n+    }\n+\n+    LOCK(cs_main);\n+\n     if (pblockindex == nullptr)\n     {\n         CTransactionRef tx;"
      }
    ]
  },
  {
    "sha": "ed77dd6b3052fd3b4191f8a17b682f0b24acf332",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDc3ZGQ2YjMwNTJmZDNiNDE5MWY4YTE3YjY4MmYwYjI0YWNmMzMy",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-12-08T20:00:13Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:18Z"
      },
      "message": "[test] Simple unit test for TxIndex.",
      "tree": {
        "sha": "84173ac709cd944efeb6edd8424e866b6debb739",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84173ac709cd944efeb6edd8424e866b6debb739"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed77dd6b3052fd3b4191f8a17b682f0b24acf332",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed77dd6b3052fd3b4191f8a17b682f0b24acf332",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed77dd6b3052fd3b4191f8a17b682f0b24acf332",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed77dd6b3052fd3b4191f8a17b682f0b24acf332/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d772a3d441875fbdcd7c15aaa8d9b97f61aa3a9"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 67,
      "deletions": 0
    },
    "files": [
      {
        "sha": "91d3a3d47c9c13be560fc6d030e5f1a3653b9529",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed77dd6b3052fd3b4191f8a17b682f0b24acf332/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed77dd6b3052fd3b4191f8a17b682f0b24acf332/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ed77dd6b3052fd3b4191f8a17b682f0b24acf332",
        "patch": "@@ -83,6 +83,7 @@ BITCOIN_TESTS =\\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/txindex_tests.cpp \\\n   test/txvalidation_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\\n   test/versionbits_tests.cpp \\"
      },
      {
        "sha": "14158f2875fd6eb26cbfd985df734373fe388a21",
        "filename": "src/test/txindex_tests.cpp",
        "status": "added",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed77dd6b3052fd3b4191f8a17b682f0b24acf332/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed77dd6b3052fd3b4191f8a17b682f0b24acf332/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=ed77dd6b3052fd3b4191f8a17b682f0b24acf332",
        "patch": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <util.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n+{\n+    TxIndex txindex(MakeUnique<TxIndexDB>(1 << 20, true));\n+\n+    CTransactionRef tx_disk;\n+    uint256 block_hash;\n+\n+    // Transaction should not be found in the index before it is started.\n+    for (const auto& txn : m_coinbase_txns) {\n+        BOOST_CHECK(!txindex.FindTx(txn->GetHash(), block_hash, tx_disk));\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before txindex is started.\n+    BOOST_CHECK(!txindex.BlockUntilSyncedToCurrentChain());\n+\n+    txindex.Start();\n+\n+    // Allow tx index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!txindex.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that txindex has all txs that were in the chain before it started.\n+    for (const auto& txn : m_coinbase_txns) {\n+        if (!txindex.FindTx(txn->GetHash(), block_hash, tx_disk)) {\n+            BOOST_ERROR(\"FindTx failed\");\n+        } else if (tx_disk->GetHash() != txn->GetHash()) {\n+            BOOST_ERROR(\"Read incorrect tx\");\n+        }\n+    }\n+\n+    // Check that new transactions in new blocks make it into the index.\n+    for (int i = 0; i < 10; i++) {\n+        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+        std::vector<CMutableTransaction> no_txns;\n+        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+        const CTransaction& txn = *block.vtx[0];\n+\n+        BOOST_CHECK(txindex.BlockUntilSyncedToCurrentChain());\n+        if (!txindex.FindTx(txn.GetHash(), block_hash, tx_disk)) {\n+            BOOST_ERROR(\"FindTx failed\");\n+        } else if (tx_disk->GetHash() != txn.GetHash()) {\n+            BOOST_ERROR(\"Read incorrect tx\");\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "9b2704777ceeca48d57ce058ae91674c7764b143",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjI3MDQ3NzdjZWVjYTQ4ZDU3Y2UwNThhZTkxNjc0Yzc3NjRiMTQz",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-03-08T18:57:26Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2018-04-25T18:25:19Z"
      },
      "message": "[doc] Include txindex changes in the release notes.",
      "tree": {
        "sha": "d9e46d97186ecba4b4be798a860937b343111627",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9e46d97186ecba4b4be798a860937b343111627"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b2704777ceeca48d57ce058ae91674c7764b143",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b2704777ceeca48d57ce058ae91674c7764b143",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b2704777ceeca48d57ce058ae91674c7764b143",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b2704777ceeca48d57ce058ae91674c7764b143/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed77dd6b3052fd3b4191f8a17b682f0b24acf332",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed77dd6b3052fd3b4191f8a17b682f0b24acf332",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed77dd6b3052fd3b4191f8a17b682f0b24acf332"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5657b1e6cbebb7d3424836b56bff78036017e7b2",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b2704777ceeca48d57ce058ae91674c7764b143/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b2704777ceeca48d57ce058ae91674c7764b143/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=9b2704777ceeca48d57ce058ae91674c7764b143",
        "patch": "@@ -10,6 +10,7 @@\n * db.log: wallet database log file; moved to wallets/ directory on new installs since 0.16.0\n * debug.log: contains debug information and general logging generated by bitcoind or bitcoin-qt\n * fee_estimates.dat: stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n+* indexes/txindex/*: optional transaction index database (LevelDB); since 0.17.0\n * mempool.dat: dump of the mempool's transactions; since 0.14.0.\n * peers.dat: peer IP address database (custom format); since 0.7.0\n * wallet.dat: personal wallet (BDB) with keys and transactions; moved to wallets/ directory on new installs since 0.16.0"
      },
      {
        "sha": "3ab4a984dbad651184ba3e9ea19bc9894d4d80b3",
        "filename": "doc/release-notes-pr13033.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b2704777ceeca48d57ce058ae91674c7764b143/doc/release-notes-pr13033.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b2704777ceeca48d57ce058ae91674c7764b143/doc/release-notes-pr13033.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr13033.md?ref=9b2704777ceeca48d57ce058ae91674c7764b143",
        "patch": "@@ -0,0 +1,11 @@\n+Transaction index changes\n+-------------------------\n+\n+The transaction index is now built separately from the main node procedure,\n+meaning the `-txindex` flag can be toggled without a full reindex. If bitcoind\n+is run with `-txindex` on a node that is already partially or fully synced\n+without one, the transaction index will be built in the background and become\n+available once caught up. When switching from running `-txindex` to running\n+without the flag, the transaction index database will *not* be deleted\n+automatically, meaning it could be turned back on at a later time without a full\n+resync."
      }
    ]
  }
]