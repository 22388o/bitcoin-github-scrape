[
  {
    "sha": "436ad436434b94982bcb7dc1d13a21949263ef73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzZhZDQzNjQzNGI5NDk4MmJjYjdkYzFkMTNhMjE5NDkyNjNlZjcz",
    "commit": {
      "author": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-10-21T19:42:06Z"
      },
      "committer": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-10-28T14:26:46Z"
      },
      "message": "Fix issue with conflicted mempool tx in listsinceblock\n\nlistsinceblock now checks that returned transactions are not\nconflicting with any transactions that are filtered out by\nthe given blockhash\n\nCo-Authored-By: Michael Chrostowski <michael.chrostowski@gmail.com>",
      "tree": {
        "sha": "9bb099ea82b8b2d40b68b7e8d1c3fa28add67e26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bb099ea82b8b2d40b68b7e8d1c3fa28add67e26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/436ad436434b94982bcb7dc1d13a21949263ef73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/436ad436434b94982bcb7dc1d13a21949263ef73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/436ad436434b94982bcb7dc1d13a21949263ef73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/436ad436434b94982bcb7dc1d13a21949263ef73/comments",
    "author": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "693e40090ae7af52585ce1a6136a4bd56318fac7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/693e40090ae7af52585ce1a6136a4bd56318fac7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/693e40090ae7af52585ce1a6136a4bd56318fac7"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 50,
      "deletions": 1
    },
    "files": [
      {
        "sha": "591fb39bc14e485cbd536f9c53faa0be78ef5268",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/436ad436434b94982bcb7dc1d13a21949263ef73/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/436ad436434b94982bcb7dc1d13a21949263ef73/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=436ad436434b94982bcb7dc1d13a21949263ef73",
        "patch": "@@ -1591,7 +1591,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n         CWalletTx tx = pairWtx.second;\n \n-        if (depth == -1 || tx.GetDepthInMainChain(*locked_chain) < depth) {\n+        if (depth == -1 || abs(tx.GetDepthInMainChain(*locked_chain)) < depth) {\n             ListTransactions(*locked_chain, pwallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n         }\n     }"
      },
      {
        "sha": "455e89e3106fe9212be8b5b66ec3e9da586bb15c",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/436ad436434b94982bcb7dc1d13a21949263ef73/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/436ad436434b94982bcb7dc1d13a21949263ef73/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=436ad436434b94982bcb7dc1d13a21949263ef73",
        "patch": "@@ -5,13 +5,15 @@\n \"\"\"Test the listsincelast RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import BIP125_SEQUENCE_NUMBER\n from test_framework.util import (\n     assert_array_result,\n     assert_equal,\n     assert_raises_rpc_error,\n     connect_nodes,\n )\n \n+from decimal import Decimal\n \n class ListSinceBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -33,6 +35,7 @@ def run_test(self):\n         self.test_reorg()\n         self.test_double_spend()\n         self.test_double_send()\n+        self.double_spends_filtered()\n \n     def test_no_blockhash(self):\n         txid = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n@@ -291,5 +294,51 @@ def test_double_send(self):\n             if tx['txid'] == txid1:\n                 assert_equal(tx['confirmations'], 2)\n \n+    def double_spends_filtered(self):\n+        '''\n+        `listsinceblock` was returning conflicted transactions even if they\n+        occurred before the specified cutoff blockhash\n+        '''\n+        spending_node = self.nodes[2]\n+        dest_address = spending_node.getnewaddress()\n+\n+        tx_input = dict(\n+            sequence=BIP125_SEQUENCE_NUMBER, **next(u for u in spending_node.listunspent()))\n+        rawtx = spending_node.createrawtransaction(\n+            [tx_input], {dest_address: tx_input[\"amount\"] - Decimal(\"0.00051000\"),\n+                         spending_node.getrawchangeaddress(): Decimal(\"0.00050000\")})\n+        signedtx = spending_node.signrawtransactionwithwallet(rawtx)\n+        orig_tx_id = spending_node.sendrawtransaction(signedtx[\"hex\"])\n+        original_tx = spending_node.gettransaction(orig_tx_id)\n+\n+        double_tx = spending_node.bumpfee(orig_tx_id)\n+\n+        # check that both transactions exist\n+        block_hash = spending_node.listsinceblock(\n+            spending_node.getblockhash(spending_node.getblockcount()))\n+        original_found = False\n+        double_found = False\n+        for tx in block_hash['transactions']:\n+            if tx['txid'] == original_tx['txid']:\n+                original_found = True\n+            if tx['txid'] == double_tx['txid']:\n+                double_found = True\n+        assert_equal(original_found, True)\n+        assert_equal(double_found, True)\n+\n+        lastblockhash = spending_node.generate(1)[0]\n+\n+        # check that neither transaction exists\n+        block_hash = spending_node.listsinceblock(lastblockhash)\n+        original_found = False\n+        double_found = False\n+        for tx in block_hash['transactions']:\n+            if tx['txid'] == original_tx['txid']:\n+                original_found = True\n+            if tx['txid'] == double_tx['txid']:\n+                double_found = True\n+        assert_equal(original_found, False)\n+        assert_equal(double_found, False)\n+\n if __name__ == '__main__':\n     ListSinceBlockTest().main()"
      }
    ]
  }
]