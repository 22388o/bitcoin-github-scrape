[
  {
    "sha": "30392955af1f2575d9cc0553bc99c6f6e79dd3a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDM5Mjk1NWFmMWYyNTc1ZDljYzA1NTNiYzk5YzZmNmU3OWRkM2Ex",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-05-14T19:27:04Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T12:52:55Z"
      },
      "message": "Reverse structure of IsFinalTx()\n\nInstead of checking if the transaction is in a category of cases to return true and failing otherwise, we return false if the tx is a failure case and otherwise return true. This removes an early-exit opportunity which will no longer be possible once sequence numbers are re-enabled, but has no change in behaviour.",
      "tree": {
        "sha": "3f013dd5729e52cc00e811a9e76b9d88e7d72a74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f013dd5729e52cc00e811a9e76b9d88e7d72a74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30392955af1f2575d9cc0553bc99c6f6e79dd3a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30392955af1f2575d9cc0553bc99c6f6e79dd3a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30392955af1f2575d9cc0553bc99c6f6e79dd3a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30392955af1f2575d9cc0553bc99c6f6e79dd3a1/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c7a05d27477c21420a66b96085e417c85542e9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c7a05d27477c21420a66b96085e417c85542e9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c7a05d27477c21420a66b96085e417c85542e9f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "41d4fe8a30caac451cd9038d76db93cc27cfff5f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30392955af1f2575d9cc0553bc99c6f6e79dd3a1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30392955af1f2575d9cc0553bc99c6f6e79dd3a1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=30392955af1f2575d9cc0553bc99c6f6e79dd3a1",
        "patch": "@@ -663,13 +663,13 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n-    if (tx.nLockTime == 0)\n-        return true;\n-    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n-        return true;\n+    bool fFinalized = true;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        if (!txin.IsFinal())\n-            return false;\n+        fFinalized = fFinalized && txin.IsFinal();\n+\n+    if (!fFinalized && (int64_t)tx.nLockTime >= ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n+        return false;\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "998230b446d840b684278dc4a7970fc3011b990f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTgyMzBiNDQ2ZDg0MGI2ODQyNzhkYzRhNzk3MGZjMzAxMWI5OTBm",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-05-15T02:29:55Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T12:52:56Z"
      },
      "message": "Get rid of CTxIn::IsFinal(), which is only used in one location and whose semantics will not survive revival of sequence numbers, and introduce CTxIn::SEQUENCE_FINAL constant instead.",
      "tree": {
        "sha": "69065e2c7aaa5d82a877fab00339a1865031bf14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69065e2c7aaa5d82a877fab00339a1865031bf14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/998230b446d840b684278dc4a7970fc3011b990f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/998230b446d840b684278dc4a7970fc3011b990f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/998230b446d840b684278dc4a7970fc3011b990f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/998230b446d840b684278dc4a7970fc3011b990f/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30392955af1f2575d9cc0553bc99c6f6e79dd3a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30392955af1f2575d9cc0553bc99c6f6e79dd3a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30392955af1f2575d9cc0553bc99c6f6e79dd3a1"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 12,
      "deletions": 13
    },
    "files": [
      {
        "sha": "2eaa7ed49b2c197e42d99184f4c097499960838e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/998230b446d840b684278dc4a7970fc3011b990f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/998230b446d840b684278dc4a7970fc3011b990f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=998230b446d840b684278dc4a7970fc3011b990f",
        "patch": "@@ -665,7 +665,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     bool fFinalized = true;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        fFinalized = fFinalized && txin.IsFinal();\n+        fFinalized = fFinalized && (txin.nSequence == CTxIn::SEQUENCE_FINAL);\n \n     if (!fFinalized && (int64_t)tx.nLockTime >= ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return false;"
      },
      {
        "sha": "7d0b2083986ca266ea3e44bf9e363e7e1af18242",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/998230b446d840b684278dc4a7970fc3011b990f/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/998230b446d840b684278dc4a7970fc3011b990f/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=998230b446d840b684278dc4a7970fc3011b990f",
        "patch": "@@ -37,7 +37,7 @@ std::string CTxIn::ToString() const\n         str += strprintf(\", coinbase %s\", HexStr(scriptSig));\n     else\n         str += strprintf(\", scriptSig=%s\", HexStr(scriptSig).substr(0, 24));\n-    if (nSequence != std::numeric_limits<unsigned int>::max())\n+    if (nSequence != SEQUENCE_FINAL)\n         str += strprintf(\", nSequence=%u\", nSequence);\n     str += \")\";\n     return str;"
      },
      {
        "sha": "cfdbd91994b811e54d2079b3b6a6ea0ebfc6c43b",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/998230b446d840b684278dc4a7970fc3011b990f/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/998230b446d840b684278dc4a7970fc3011b990f/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=998230b446d840b684278dc4a7970fc3011b990f",
        "patch": "@@ -61,13 +61,17 @@ class CTxIn\n     CScript scriptSig;\n     uint32_t nSequence;\n \n+    /* Setting nSequence to this value for every input in a transaction\n+     * disables nLockTime. */\n+    static const uint32_t SEQUENCE_FINAL = 0xffffffff;\n+\n     CTxIn()\n     {\n-        nSequence = std::numeric_limits<unsigned int>::max();\n+        nSequence = SEQUENCE_FINAL;\n     }\n \n-    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<unsigned int>::max());\n-    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=std::numeric_limits<uint32_t>::max());\n+    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -78,11 +82,6 @@ class CTxIn\n         READWRITE(nSequence);\n     }\n \n-    bool IsFinal() const\n-    {\n-        return (nSequence == std::numeric_limits<uint32_t>::max());\n-    }\n-\n     friend bool operator==(const CTxIn& a, const CTxIn& b)\n     {\n         return (a.prevout   == b.prevout &&"
      },
      {
        "sha": "ac753a9d5b9b3fb63f19c2b48ba8df2205fa61ff",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/998230b446d840b684278dc4a7970fc3011b990f/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/998230b446d840b684278dc4a7970fc3011b990f/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=998230b446d840b684278dc4a7970fc3011b990f",
        "patch": "@@ -1147,7 +1147,7 @@ bool TransactionSignatureChecker::CheckLockTime(const CScriptNum& nLockTime) con\n     // prevent this condition. Alternatively we could test all\n     // inputs, but testing just this input minimizes the data\n     // required to prove correct CHECKLOCKTIMEVERIFY execution.\n-    if (txTo->vin[nIn].IsFinal())\n+    if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n         return false;\n \n     return true;"
      },
      {
        "sha": "90822c71d75ad6dfd4a5dcab07154a4e31ed50e3",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/998230b446d840b684278dc4a7970fc3011b990f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/998230b446d840b684278dc4a7970fc3011b990f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=998230b446d840b684278dc4a7970fc3011b990f",
        "patch": "@@ -63,7 +63,7 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     txCredit.vout.resize(1);\n     txCredit.vin[0].prevout.SetNull();\n     txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n-    txCredit.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txCredit.vout[0].scriptPubKey = scriptPubKey;\n     txCredit.vout[0].nValue = 0;\n \n@@ -80,7 +80,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     txSpend.vin[0].prevout.hash = txCredit.GetHash();\n     txSpend.vin[0].prevout.n = 0;\n     txSpend.vin[0].scriptSig = scriptSig;\n-    txSpend.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n     txSpend.vout[0].scriptPubKey = CScript();\n     txSpend.vout[0].nValue = 0;\n "
      }
    ]
  },
  {
    "sha": "bf45b9fa5a08c35be3dbec05febe1dda5875fd36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjQ1YjlmYTVhMDhjMzViZTNkYmVjMDVmZWJlMWRkYTU4NzVmZDM2",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-09-23T18:46:43Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T12:52:56Z"
      },
      "message": "Expand IsFinalTx() to the structure it will have when it becomes LockTime()\n\nBreaks up the modifications to IsFinalTx() / LockTime() for easier review. This commit does not change the logic of IsFinalTx().",
      "tree": {
        "sha": "dcad72c43a325146f71d355d1cc55b36ca5e33c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcad72c43a325146f71d355d1cc55b36ca5e33c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf45b9fa5a08c35be3dbec05febe1dda5875fd36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf45b9fa5a08c35be3dbec05febe1dda5875fd36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf45b9fa5a08c35be3dbec05febe1dda5875fd36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf45b9fa5a08c35be3dbec05febe1dda5875fd36/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "998230b446d840b684278dc4a7970fc3011b990f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/998230b446d840b684278dc4a7970fc3011b990f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/998230b446d840b684278dc4a7970fc3011b990f"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 29,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ed31857d6e5d5cfcd9fa213bac9ffb5bee5c9edb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 3,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf45b9fa5a08c35be3dbec05febe1dda5875fd36/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf45b9fa5a08c35be3dbec05febe1dda5875fd36/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bf45b9fa5a08c35be3dbec05febe1dda5875fd36",
        "patch": "@@ -663,11 +663,37 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n+    // Will be set to the equivalent height- and time-based nLockTime\n+    // values that would be necessary to satisfy all relative lock-\n+    // time constraints given our view of block chain history.\n+    int nMinHeight = 0;\n+    int64_t nMinTime = 0;\n+    // Will remain equal to true if all inputs are finalized\n+    // (CTxIn::SEQUENCE_FINAL).\n     bool fFinalized = true;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        fFinalized = fFinalized && (txin.nSequence == CTxIn::SEQUENCE_FINAL);\n \n-    if (!fFinalized && (int64_t)tx.nLockTime >= ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        // Set a flag if we witness an input that isn't finalized.\n+        if (txin.nSequence == CTxIn::SEQUENCE_FINAL)\n+            continue;\n+        else\n+            fFinalized = false;\n+    }\n+\n+    // If all sequence numbers are CTxIn::SEQUENCE_FINAL, the\n+    // transaction is considered final and nLockTime constraints\n+    // are not enforced.\n+    if (fFinalized)\n+        return true;\n+\n+    if ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD)\n+        nMinHeight = std::max(nMinHeight, (int)tx.nLockTime);\n+    else\n+        nMinTime = std::max(nMinTime, (int64_t)tx.nLockTime);\n+\n+    if (nMinHeight >= nBlockHeight)\n+        return false;\n+    if (nMinTime >= nBlockTime)\n         return false;\n \n     return true;"
      }
    ]
  },
  {
    "sha": "deedf00b9615b3557428e55c01f5e2ba6aa151cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWVkZjAwYjk2MTViMzU1NzQyOGU1NWMwMWY1ZTJiYTZhYTE1MWNk",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-05-16T15:52:58Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T13:53:47Z"
      },
      "message": "Add rules--presently disabled--for using sequence numbers as a relative lock time\n\nIn summary, the sequence number of each input in a transaction can be used to store a relative locktime: a delta value which is added to the height or time of the block which included the output being spent to generate a per-input lock time from the sequence number. If enforced, this would make consensus-enforced transaction replacement possible as replacing an input with a lower sequence number / relative lock time would allow the new transaction to make it on the chain before previous versions of the transaction become valid.\n\nThis commit does not implement the transaction replacement logic. Nor does this commit make the relative lock time rules as consensus or policy rules. It merely adds new, but disabled functionality and unit tests of that functionality.",
      "tree": {
        "sha": "95867c1a31e0c9f1bb153ac3ebb38fd81a3c8bbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95867c1a31e0c9f1bb153ac3ebb38fd81a3c8bbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deedf00b9615b3557428e55c01f5e2ba6aa151cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deedf00b9615b3557428e55c01f5e2ba6aa151cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deedf00b9615b3557428e55c01f5e2ba6aa151cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deedf00b9615b3557428e55c01f5e2ba6aa151cd/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf45b9fa5a08c35be3dbec05febe1dda5875fd36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf45b9fa5a08c35be3dbec05febe1dda5875fd36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf45b9fa5a08c35be3dbec05febe1dda5875fd36"
      }
    ],
    "stats": {
      "total": 264,
      "additions": 204,
      "deletions": 60
    },
    "files": [
      {
        "sha": "a146407209381892b4f9f46ef24b8fcbcca4960a",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -15,6 +15,9 @@ static const int COINBASE_MATURITY = 100;\n \n /** Flags for LockTime() */\n enum {\n+    /* Interpret sequence numbers as relative lock-time constraints. */\n+    LOCKTIME_VERIFY_SEQUENCE = (1 << 0),\n+\n     /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n     LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n };"
      },
      {
        "sha": "8229e324224e4aa0a2d5e21955a2df7288f02e18",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 19,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -661,8 +661,13 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n     return nEvicted;\n }\n \n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n+int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, int nBlockHeight, int64_t nBlockTime)\n {\n+    CCoins coins;\n+\n+    bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n+                      && flags & LOCKTIME_VERIFY_SEQUENCE;\n+\n     // Will be set to the equivalent height- and time-based nLockTime\n     // values that would be necessary to satisfy all relative lock-\n     // time constraints given our view of block chain history.\n@@ -678,28 +683,92 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n             continue;\n         else\n             fFinalized = false;\n+\n+        // Do not enforce sequence numbers as a relative lock time\n+        // unless we have been instructed to, and a view has been\n+        // provided.\n+        if (!(fEnforceBIP68 && pCoinsView))\n+            continue;\n+\n+        // Sequence numbers with the most significant bit set are not\n+        // treated as relative lock-times, nor are they given any\n+        // consensus-enforced meaning at this point.\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLED_FLAG)\n+            continue;\n+\n+        // Fetch the UTXO corresponding to this input.\n+        //\n+        // If the UTXO is not found, proceed to the next because we\n+        // will not be able to do the relative lock-time calculation.\n+        // This should never happen in consensus code.\n+        //\n+        // The better solution would be to fail, but that requires\n+        // rewriting many pieces of non-consensus code that call\n+        // LockTime or CheckLockTime to collect this information\n+        // and pass it in somehow. This would not be simple to\n+        // back-port for the soft-fork, however.\n+        if (!pCoinsView->GetCoins(txin.prevout.hash, coins))\n+            continue;\n+\n+        // coins.nHeight is MEMPOOL_HEIGHT (an absurdly high value)\n+        // if the parent transaction was from the mempool. We can't\n+        // know what height it will have once confirmed, but we\n+        // assume it makes it in the same block.\n+        int nCoinHeight = std::min(coins.nHeight, nBlockHeight);\n+\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG) {\n+            // In two locations that follow we make reference to\n+            // chainActive.Tip(). To prevent a race condition, we\n+            // store a reference to the current tip.\n+            //\n+            // Note that it is not guaranteed that indexBestBlock will\n+            // be consistent with the passed in view. The proper thing\n+            // to do is to have the view return time information about\n+            // UTXOs.\n+            const CBlockIndex& indexBestBlock = *chainActive.Tip();\n+\n+            // The only time the negative branch of this conditional\n+            // is executed is when the prior output was taken from the\n+            // mempool, in which case we assume it makes it into the\n+            // same block (see above).\n+            int64_t nCoinTime = (nCoinHeight <= (indexBestBlock.nHeight+1))\n+                              ? indexBestBlock.GetAncestor(nCoinHeight-1)->GetMedianTimePast()\n+                              : nBlockTime;\n+\n+            // Time-based relative lock-times are measured from the\n+            // smallest allowed timestamp of the block containing the\n+            // txout being spent, which is the median time past of the\n+            // block prior.\n+            nMinTime = std::max(nMinTime, nCoinTime + (int64_t)((txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) << CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) - 1);\n+        } else {\n+            // We subtract 1 from relative lock-times because a lock-\n+            // time of 0 has the semantics of \"same block,\" so a lock-\n+            // time of 1 should mean \"next block,\" but nLockTime has\n+            // the semantics of \"last invalid block height.\"\n+            nMinHeight = std::max(nMinHeight, nCoinHeight + (int)(txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_MASK) - 1);\n+        }\n     }\n \n     // If all sequence numbers are CTxIn::SEQUENCE_FINAL, the\n     // transaction is considered final and nLockTime constraints\n     // are not enforced.\n     if (fFinalized)\n-        return true;\n+        return 0;\n \n     if ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD)\n         nMinHeight = std::max(nMinHeight, (int)tx.nLockTime);\n     else\n         nMinTime = std::max(nMinTime, (int64_t)tx.nLockTime);\n \n     if (nMinHeight >= nBlockHeight)\n-        return false;\n+        return nMinHeight;\n     if (nMinTime >= nBlockTime)\n-        return false;\n+        return nMinTime;\n \n-    return true;\n+    return 0;\n }\n \n-bool CheckFinalTx(const CTransaction &tx, int flags)\n+int64_t CheckLockTime(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n \n@@ -711,24 +780,28 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     // scheduled, so no flags are set.\n     flags = std::max(flags, 0);\n \n-    // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n-    // nLockTime because when IsFinalTx() is called within\n+    // pcoinsTip contains the UTXO set for chainActive.Tip()\n+    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+    const CCoinsView *pCoinsView = &viewMemPool;\n+\n+    // CheckLockTime() uses chainActive.Height()+1 to evaluate\n+    // nLockTime because when LockTime() is called within\n     // CBlock::AcceptBlock(), the height of the block *being*\n     // evaluated is what is used. Thus if we want to know if a\n     // transaction can be part of the *next* block, we need to call\n-    // IsFinalTx() with one more than chainActive.Height().\n+    // LockTime() with one more than chainActive.Height().\n     const int nBlockHeight = chainActive.Height() + 1;\n \n     // BIP113 will require that time-locked transactions have nLockTime set to\n     // less than the median time of the previous block they're contained in.\n     // When the next block is created its previous block will be the current\n     // chain tip, so we use that to calculate the median time passed to\n-    // IsFinalTx() if LOCKTIME_MEDIAN_TIME_PAST is set.\n+    // LockTime() if LOCKTIME_MEDIAN_TIME_PAST is set.\n     const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n                              ? chainActive.Tip()->GetMedianTimePast()\n                              : GetAdjustedTime();\n \n-    return IsFinalTx(tx, nBlockHeight, nBlockTime);\n+    return LockTime(tx, flags, pCoinsView, nBlockHeight, nBlockTime);\n }\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n@@ -881,12 +954,6 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n     if (fRequireStandard && !IsStandardTx(tx, reason))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n-    // Only accept nLockTime-using transactions that can be mined in the next\n-    // block; we don't want our mempool filled up with transactions that can't\n-    // be mined yet.\n-    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n-        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n-\n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n     if (pool.exists(hash))\n@@ -977,6 +1044,12 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n         view.SetBackend(dummy);\n         }\n \n+        // Only accept nLockTime-using transactions that can be mined in the next\n+        // block; we don't want our mempool filled up with transactions that can't\n+        // be mined yet.\n+        if (CheckLockTime(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n+\n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n@@ -2101,6 +2174,12 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n+    int nLockTimeFlags = 0;\n+    int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                            ? pindex->pprev->GetMedianTimePast()\n+                            : pindex->GetBlockTime();\n+\n+    int64_t nTimeStart = GetTimeMicros();\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n@@ -2124,6 +2203,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n+            // Check that transaction is finalized\n+            if (LockTime(tx, nLockTimeFlags, &view, pindex->nHeight, nLockTimeCutoff))\n+                return state.DoS(100, error(\"ConnectBlock(): contains a non-final transaction\", __func__),\n+                                 REJECT_INVALID, \"bad-txns-nonfinal\");\n+\n             if (fStrictPayToScriptHash)\n             {\n                 // Add in sigops done by pay-to-script-hash inputs;\n@@ -3095,9 +3179,8 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n                                 ? pindexPrev->GetMedianTimePast()\n                                 : block.GetBlockTime();\n-        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n+        if (LockTime(tx, nLockTimeFlags, NULL, nHeight, nLockTimeCutoff))\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n-        }\n     }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height"
      },
      {
        "sha": "de7e90c59d97c72d99b5761e1798a3b6b8425e75",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -330,16 +330,16 @@ bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n  * Check if transaction is final and can be included in a block with the\n  * specified height and time. Consensus critical.\n  */\n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n+int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, int nBlockHeight, int64_t nBlockTime);\n \n /**\n  * Check if transaction will be final in the next block to be created.\n  *\n- * Calls IsFinalTx() with current block height and appropriate block time.\n+ * Calls LockTime() with data from the tip of the current active chain.\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n+int64_t CheckLockTime(const CTransaction &tx, int flags = -1);\n \n /** \n  * Closure representing one script verification"
      },
      {
        "sha": "08f0913cbc9c4cd283340f756d1ffaf501b388a1",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -136,6 +136,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n         const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+        CCoinsViewCache view(pcoinsTip);\n \n         int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n                                 ? nMedianTimePast\n@@ -220,7 +221,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                 continue;\n             }\n \n-            if (!IsFinalTx(tx, nHeight, nLockTimeCutoff))\n+            if (LockTime(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &view, nHeight, nLockTimeCutoff))\n                 continue;\n \n             unsigned int nTxSigOps = iter->GetSigOpCount();"
      },
      {
        "sha": "164aca6ac9bce67266fe4f9c1aa8d36341cceb3a",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -45,7 +45,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n+/** Used as the flags parameter to LockTime() in non-consensus code. */\n static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);"
      },
      {
        "sha": "50a7d5e50745924c69531c4f7419cf2590351731",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -64,6 +64,25 @@ class CTxIn\n     /* Setting nSequence to this value for every input in a transaction\n      * disables nLockTime. */\n     static const uint32_t SEQUENCE_FINAL = 0xffffffff;\n+    /* If this flag set, CTxIn::nSequence is NOT interpreted as a\n+     * relative lock-time. Setting the most significant bit of a\n+     * sequence number disabled relative lock-time. */\n+    static const uint32_t SEQUENCE_LOCKTIME_DISABLED_FLAG = (1 << 31);\n+    /* If CTxIn::nSequence encodes a relative lock-time and this flag\n+     * is set, the relative lock-time has units of 512 seconds,\n+     * otherwise it specifies blocks with a granularity of 1. */\n+    static const uint32_t SEQUENCE_LOCKTIME_SECONDS_FLAG = (1 << 22);\n+    /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n+     * applied to extract that lock-time from the sequence field. */\n+    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n+    /* In order to use the same number of bits to encode roughly the\n+     * same wall-clock duration, and because blocks are naturally\n+     * limited to occur every 600s on average, the minimum granularity\n+     * for time-based relative lock-time is fixed at 512 seconds.\n+     * Converting from CTxIn::nSequence to seconds is performed by\n+     * multiplying by 512 = 2^9, or equivalently shifting up by\n+     * 9 bits. */\n+    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n \n     CTxIn()\n     {"
      },
      {
        "sha": "2f0526091f465f2374c566cb2cd91555545b4fb3",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -24,12 +24,13 @@\n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n     AssertLockHeld(cs_main);\n-    if (!CheckFinalTx(wtx))\n+    int64_t nLockTime = CheckLockTime(wtx);\n+    if (nLockTime)\n     {\n-        if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n-            return tr(\"Open for %n more block(s)\", \"\", wtx.nLockTime - chainActive.Height());\n+        if (nLockTime < LOCKTIME_THRESHOLD)\n+            return tr(\"Open for %n more block(s)\", \"\", nLockTime - chainActive.Height());\n         else\n-            return tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx.nLockTime));\n+            return tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(nLockTime));\n     }\n     else\n     {"
      },
      {
        "sha": "dd80a9ab3912d578172779b7e38059837b643b6b",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -188,17 +188,18 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = chainActive.Height();\n \n-    if (!CheckFinalTx(wtx))\n+    int64_t nLockTime = CheckLockTime(wtx);\n+    if (nLockTime)\n     {\n-        if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n+        if (nLockTime < LOCKTIME_THRESHOLD)\n         {\n             status.status = TransactionStatus::OpenUntilBlock;\n-            status.open_for = wtx.nLockTime - chainActive.Height();\n+            status.open_for = nLockTime - chainActive.Height();\n         }\n         else\n         {\n             status.status = TransactionStatus::OpenUntilDate;\n-            status.open_for = wtx.nLockTime;\n+            status.open_for = nLockTime;\n         }\n     }\n     // For generated transactions, determine maturity"
      },
      {
        "sha": "2506320ca3104b3fc7563536a89586aa3c3a8344",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 17,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -92,7 +92,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n         txCoinbase.vout[0].scriptPubKey = CScript();\n         pblock->vtx[0] = CTransaction(txCoinbase);\n-        if (txFirst.size() < 2)\n+        if (txFirst.size() < 4)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n@@ -241,16 +241,24 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n \n-    // height locked\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    // view into mepool for checking dependent transactions\n+    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+\n+    // relative height locked\n+    tx.nVersion = 2;\n+    tx.vin.resize(1);\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction\n+    tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].nSequence = 0;\n+    tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n+    tx.vout.resize(1);\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx.nLockTime = chainActive.Tip()->nHeight+1;\n+    tx.nLockTime = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE) == chainActive.Tip()->nHeight + 1);\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, chainActive.Tip()->nHeight + 2, GetTime()));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -264,25 +272,53 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n-    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(CheckLockTime(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n+    // relative time locked\n+    tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE) == chainActive[1]->GetMedianTimePast() + 511);\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, chainActive.Tip()->nHeight + 1, GetTime() + 512));\n+\n+    // absolute height locked\n+    tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n+    tx.nLockTime = chainActive.Tip()->nHeight + 1;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK(CheckLockTime(tx, 0) == chainActive.Tip()->nHeight + 1);\n+    BOOST_CHECK(!LockTime(tx, 0, &viewMemPool, chainActive.Tip()->nHeight + 2, GetTime()));\n+\n+    // absolute time locked\n+    tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n+    tx.nLockTime = chainActive.Tip()->GetMedianTimePast() + 1;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    BOOST_CHECK(CheckLockTime(tx, 0) == chainActive.Tip()->GetMedianTimePast() + 1);\n+    BOOST_CHECK(!LockTime(tx, 0, &viewMemPool, chainActive.Tip()->nHeight + 1, GetTime() + 1));\n+\n+    // mempool-dependent transactions\n+    tx.vin[0].prevout.hash = hash;\n+    tx.nLockTime = 0;\n+    tx.vin[0].nSequence = 1;\n+    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, chainActive.Tip()->nHeight + 1, GetTime()) == chainActive.Tip()->nHeight + 1);\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | 1;\n+    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, chainActive.Tip()->nHeight + 1, GetTime()) == chainActive.Tip()->GetMedianTimePast() + 511);\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n \n-    // Neither tx should have make it into the template.\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n+    // None of the of the absolute height/time locked tx should have\n+    // made it into the template.\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n \n-    // However if we advance height and time by one, both will.\n+    // However if we advance height and time by one, they will.\n     chainActive.Tip()->nHeight++;\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);\n-\n-    // FIXME: we should *actually* create a new block so the following test\n-    //        works; CheckFinalTx() isn't fooled by monkey-patching nHeight.\n-    //BOOST_CHECK(CheckFinalTx(tx));\n-    //BOOST_CHECK(CheckFinalTx(tx2));\n+    SetMockTime(chainActive.Tip()->GetMedianTimePast() + 2);\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      },
      {
        "sha": "ed8b01123f7fa2c67be42bc61e3d211c7947f031",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -504,7 +504,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        if (!CheckFinalTx(tx, flags)) {\n+        if (CheckLockTime(tx, flags)) {\n             transactionsToRemove.push_back(tx);\n         } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {"
      },
      {
        "sha": "a2885f2d7fed200983f5b13330b52f62e04a3cb5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -590,7 +590,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(wtx))\n+        if (wtx.IsCoinBase() || CheckLockTime(wtx))\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n@@ -644,7 +644,7 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (wtx.IsCoinBase() || !CheckFinalTx(wtx))\n+        if (wtx.IsCoinBase() || CheckLockTime(wtx))\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n@@ -668,7 +668,7 @@ CAmount GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n+        if (CheckLockTime(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n             continue;\n \n         CAmount nReceived, nSent, nFee;\n@@ -740,7 +740,7 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n-            if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n+            if (CheckLockTime(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n                 continue;\n \n             CAmount allFee;\n@@ -1121,7 +1121,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n     {\n         const CWalletTx& wtx = (*it).second;\n \n-        if (wtx.IsCoinBase() || !CheckFinalTx(wtx))\n+        if (wtx.IsCoinBase() || CheckLockTime(wtx))\n             continue;\n \n         int nDepth = wtx.GetDepthInMainChain();"
      },
      {
        "sha": "06c83e6f9327699b822506a58d41c5335ed8b085",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deedf00b9615b3557428e55c01f5e2ba6aa151cd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "patch": "@@ -1362,7 +1362,7 @@ CAmount CWalletTx::GetChange() const\n bool CWalletTx::IsTrusted() const\n {\n     // Quick answer in most cases\n-    if (!CheckFinalTx(*this))\n+    if (CheckLockTime(*this))\n         return false;\n     int nDepth = GetDepthInMainChain();\n     if (nDepth >= 1)\n@@ -1485,7 +1485,7 @@ CAmount CWallet::GetUnconfirmedBalance() const\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-            if (!CheckFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n+            if (CheckLockTime(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n                 nTotal += pcoin->GetAvailableCredit();\n         }\n     }\n@@ -1530,7 +1530,7 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n         {\n             const CWalletTx* pcoin = &(*it).second;\n-            if (!CheckFinalTx(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n+            if (CheckLockTime(*pcoin) || (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0))\n                 nTotal += pcoin->GetAvailableWatchOnlyCredit();\n         }\n     }\n@@ -1562,7 +1562,7 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             const uint256& wtxid = it->first;\n             const CWalletTx* pcoin = &(*it).second;\n \n-            if (!CheckFinalTx(*pcoin))\n+            if (CheckLockTime(*pcoin))\n                 continue;\n \n             if (fOnlyConfirmed && !pcoin->IsTrusted())\n@@ -2469,7 +2469,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n         {\n             CWalletTx *pcoin = &walletEntry.second;\n \n-            if (!CheckFinalTx(*pcoin) || !pcoin->IsTrusted())\n+            if (CheckLockTime(*pcoin) || !pcoin->IsTrusted())\n                 continue;\n \n             if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)"
      }
    ]
  },
  {
    "sha": "8110e73112927084faee058ab66f70b3deafbe9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTEwZTczMTEyOTI3MDg0ZmFlZTA1OGFiNjZmNzBiM2RlYWZiZTlk",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-05-19T00:14:09Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T13:53:48Z"
      },
      "message": "Enable policy enforcing sequence numbers as a relative lock time in the mempool and transaction selection code, for the purpose of later supporting consensus-enforced transaction replacement\n\nTransactions that fail relative lock time checks will be rejected from the mempool and not included in generated blocks, making it easy to test the feature. However blocks including transactions containing \"invalid\" relative lock times will still be accepted; this is *not* the soft-fork required to actually enable relative lock times for production use.",
      "tree": {
        "sha": "7a11c78058f2382323789da3edd3fa5146e7b117",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a11c78058f2382323789da3edd3fa5146e7b117"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8110e73112927084faee058ab66f70b3deafbe9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8110e73112927084faee058ab66f70b3deafbe9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8110e73112927084faee058ab66f70b3deafbe9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8110e73112927084faee058ab66f70b3deafbe9d/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deedf00b9615b3557428e55c01f5e2ba6aa151cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deedf00b9615b3557428e55c01f5e2ba6aa151cd"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 20,
      "deletions": 18
    },
    "files": [
      {
        "sha": "5034b238632f406aa758d5a26f1fe7487539dccf",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8110e73112927084faee058ab66f70b3deafbe9d/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8110e73112927084faee058ab66f70b3deafbe9d/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=8110e73112927084faee058ab66f70b3deafbe9d",
        "patch": "@@ -46,7 +46,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n /** Used as the flags parameter to LockTime() in non-consensus code. */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n+                                                           LOCKTIME_MEDIAN_TIME_PAST;\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**"
      },
      {
        "sha": "b54ee9bb418e742315b9c3984acaa22e1dcb8e2f",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 17,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8110e73112927084faee058ab66f70b3deafbe9d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8110e73112927084faee058ab66f70b3deafbe9d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8110e73112927084faee058ab66f70b3deafbe9d",
        "patch": "@@ -257,8 +257,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE) == chainActive.Tip()->nHeight + 1);\n-    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, chainActive.Tip()->nHeight + 2, GetTime()));\n+    BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->nHeight + 1);\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast()));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -278,47 +278,48 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE) == chainActive[1]->GetMedianTimePast() + 511);\n-    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, chainActive.Tip()->nHeight + 1, GetTime() + 512));\n+    BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) > chainActive.Tip()->GetMedianTimePast());\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 512));\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n     tx.nLockTime = chainActive.Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(CheckLockTime(tx, 0) == chainActive.Tip()->nHeight + 1);\n-    BOOST_CHECK(!LockTime(tx, 0, &viewMemPool, chainActive.Tip()->nHeight + 2, GetTime()));\n+    BOOST_CHECK(CheckLockTime(tx, LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->nHeight + 1);\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast()));\n \n     // absolute time locked\n     tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n-    tx.nLockTime = chainActive.Tip()->GetMedianTimePast() + 1;\n+    tx.nLockTime = chainActive.Tip()->GetMedianTimePast();\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(CheckLockTime(tx, 0) == chainActive.Tip()->GetMedianTimePast() + 1);\n-    BOOST_CHECK(!LockTime(tx, 0, &viewMemPool, chainActive.Tip()->nHeight + 1, GetTime() + 1));\n+    BOOST_CHECK(CheckLockTime(tx, LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->GetMedianTimePast());\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 1));\n \n     // mempool-dependent transactions\n     tx.vin[0].prevout.hash = hash;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 1;\n-    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, chainActive.Tip()->nHeight + 1, GetTime()) == chainActive.Tip()->nHeight + 1);\n-    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | 1;\n-    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, chainActive.Tip()->nHeight + 1, GetTime()) == chainActive.Tip()->GetMedianTimePast() + 511);\n+    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1) == chainActive.Tip()->nHeight + 1);\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | 2;\n+    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1) > chainActive.Tip()->GetMedianTimePast());\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n \n-    // None of the of the absolute height/time locked tx should have\n-    // made it into the template.\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n+    // None of the of the above height/time locked tx should have made\n+    // it into the template.\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n     delete pblocktemplate;\n \n-    // However if we advance height and time by one, they will.\n+    // However if we advance height and time by one, all except for\n+    // possibly the relative time locked tx will.\n     chainActive.Tip()->nHeight++;\n     SetMockTime(chainActive.Tip()->GetMedianTimePast() + 2);\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      }
    ]
  },
  {
    "sha": "33ec593aa193fc0df7174b3e874ee2fc904fb0db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2VjNTkzYWExOTNmYzBkZjcxNzRiM2U4NzRlZTJmYzkwNGZiMGRi",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-10-23T22:45:10Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T13:53:48Z"
      },
      "message": "Add AssertLockHeld(cs_main) to LockTime() function.",
      "tree": {
        "sha": "9d421431bb5f148928381b632dc554e8e7dfc4ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d421431bb5f148928381b632dc554e8e7dfc4ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33ec593aa193fc0df7174b3e874ee2fc904fb0db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33ec593aa193fc0df7174b3e874ee2fc904fb0db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33ec593aa193fc0df7174b3e874ee2fc904fb0db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33ec593aa193fc0df7174b3e874ee2fc904fb0db/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8110e73112927084faee058ab66f70b3deafbe9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8110e73112927084faee058ab66f70b3deafbe9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8110e73112927084faee058ab66f70b3deafbe9d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6939fea3d361b7608e974567473cd228909651ba",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33ec593aa193fc0df7174b3e874ee2fc904fb0db/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33ec593aa193fc0df7174b3e874ee2fc904fb0db/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=33ec593aa193fc0df7174b3e874ee2fc904fb0db",
        "patch": "@@ -663,6 +663,8 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n \n int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, int nBlockHeight, int64_t nBlockTime)\n {\n+    AssertLockHeld(cs_main);\n+\n     CCoins coins;\n \n     bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2"
      }
    ]
  },
  {
    "sha": "fc4bfb40bd7decbf3431ed1963e3b2d053a0d988",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzRiZmI0MGJkN2RlY2JmMzQzMWVkMTk2M2UzYjJkMDUzYTBkOTg4",
    "commit": {
      "author": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-11-07T05:59:04Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T13:53:49Z"
      },
      "message": "Transform LockTime to a pure logic function, while not breaking existing code",
      "tree": {
        "sha": "2d42daf655467ce21f91d9eb459bab3815f06898",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d42daf655467ce21f91d9eb459bab3815f06898"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc4bfb40bd7decbf3431ed1963e3b2d053a0d988",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc4bfb40bd7decbf3431ed1963e3b2d053a0d988",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc4bfb40bd7decbf3431ed1963e3b2d053a0d988",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc4bfb40bd7decbf3431ed1963e3b2d053a0d988/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33ec593aa193fc0df7174b3e874ee2fc904fb0db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33ec593aa193fc0df7174b3e874ee2fc904fb0db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33ec593aa193fc0df7174b3e874ee2fc904fb0db"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 27,
      "deletions": 29
    },
    "files": [
      {
        "sha": "df77d92a7558349f019c65e7af0cfa954e58dd04",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 29,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc4bfb40bd7decbf3431ed1963e3b2d053a0d988/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc4bfb40bd7decbf3431ed1963e3b2d053a0d988/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fc4bfb40bd7decbf3431ed1963e3b2d053a0d988",
        "patch": "@@ -661,10 +661,8 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n     return nEvicted;\n }\n \n-int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, int nBlockHeight, int64_t nBlockTime)\n+int64_t LockTime(const CTransaction &tx, int flags, const CBlockIndex& tip, const std::vector<CCoins>& prevCoins, int nBlockHeight, int64_t nBlockTime)\n {\n-    AssertLockHeld(cs_main);\n-\n     CCoins coins;\n \n     bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n@@ -678,8 +676,9 @@ int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView\n     // Will remain equal to true if all inputs are finalized\n     // (CTxIn::SEQUENCE_FINAL).\n     bool fFinalized = true;\n-\n+    int txinIndex = -1;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        txinIndex++;\n         // Set a flag if we witness an input that isn't finalized.\n         if (txin.nSequence == CTxIn::SEQUENCE_FINAL)\n             continue;\n@@ -689,7 +688,7 @@ int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView\n         // Do not enforce sequence numbers as a relative lock time\n         // unless we have been instructed to, and a view has been\n         // provided.\n-        if (!(fEnforceBIP68 && pCoinsView))\n+        if (!fEnforceBIP68)\n             continue;\n \n         // Sequence numbers with the most significant bit set are not\n@@ -698,19 +697,7 @@ int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView\n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLED_FLAG)\n             continue;\n \n-        // Fetch the UTXO corresponding to this input.\n-        //\n-        // If the UTXO is not found, proceed to the next because we\n-        // will not be able to do the relative lock-time calculation.\n-        // This should never happen in consensus code.\n-        //\n-        // The better solution would be to fail, but that requires\n-        // rewriting many pieces of non-consensus code that call\n-        // LockTime or CheckLockTime to collect this information\n-        // and pass it in somehow. This would not be simple to\n-        // back-port for the soft-fork, however.\n-        if (!pCoinsView->GetCoins(txin.prevout.hash, coins))\n-            continue;\n+        coins = prevCoins.at(txinIndex);\n \n         // coins.nHeight is MEMPOOL_HEIGHT (an absurdly high value)\n         // if the parent transaction was from the mempool. We can't\n@@ -719,22 +706,13 @@ int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView\n         int nCoinHeight = std::min(coins.nHeight, nBlockHeight);\n \n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG) {\n-            // In two locations that follow we make reference to\n-            // chainActive.Tip(). To prevent a race condition, we\n-            // store a reference to the current tip.\n-            //\n-            // Note that it is not guaranteed that indexBestBlock will\n-            // be consistent with the passed in view. The proper thing\n-            // to do is to have the view return time information about\n-            // UTXOs.\n-            const CBlockIndex& indexBestBlock = *chainActive.Tip();\n \n             // The only time the negative branch of this conditional\n             // is executed is when the prior output was taken from the\n             // mempool, in which case we assume it makes it into the\n             // same block (see above).\n-            int64_t nCoinTime = (nCoinHeight <= (indexBestBlock.nHeight+1))\n-                              ? indexBestBlock.GetAncestor(nCoinHeight-1)->GetMedianTimePast()\n+            int64_t nCoinTime = (nCoinHeight <= (tip.nHeight+1))\n+                              ? tip.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast()\n                               : nBlockTime;\n \n             // Time-based relative lock-times are measured from the\n@@ -770,6 +748,26 @@ int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView\n     return 0;\n }\n \n+int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, int nBlockHeight, int64_t nBlockTime)\n+{\n+    AssertLockHeld(cs_main);\n+    CCoins coins;\n+    std::vector<CCoins> prevCoins (tx.vin.size());\n+    int txinIndex = -1;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        txinIndex++;\n+        if (!pCoinsView || !pCoinsView->GetCoins(txin.prevout.hash, coins))\n+        {\n+            coins = CCoins();\n+            //If previous coin is not found in the CCoinsView, \n+            //assume the coin is anormally old, so it does not change the minheight and nMinTime later\n+            coins.nHeight = -100000000;\n+        }\n+        prevCoins.at(txinIndex) = coins;\n+    }\n+    return LockTime(tx, flags, *chainActive.Tip(), prevCoins, nBlockHeight, nBlockTime);\n+}\n+\n int64_t CheckLockTime(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);"
      }
    ]
  },
  {
    "sha": "aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTgzODE5Y2FjNzllZGMzYWI5YzE0MGNiYmQyY2QxNDE3ZTA0YThh",
    "commit": {
      "author": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-11-10T09:27:11Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T15:50:44Z"
      },
      "message": "Make LockTime function easier to use by not requiring the tip, and by making it responsible to calculate the right blockTime from flags\n\nLockTime() : the nCoinTime of a confirmed coin does not depend on MTP\nflag, so the nCoinTime of an unconfirmed also should not be.\n\nAddressing sipa's nits",
      "tree": {
        "sha": "8f37d742df680a1a01c3ff6a10cc29b199024975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f37d742df680a1a01c3ff6a10cc29b199024975"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc4bfb40bd7decbf3431ed1963e3b2d053a0d988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc4bfb40bd7decbf3431ed1963e3b2d053a0d988",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc4bfb40bd7decbf3431ed1963e3b2d053a0d988"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 76,
      "deletions": 69
    },
    "files": [
      {
        "sha": "3f402863393c4d264e4c3e0e414d74cd2da8a521",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
        "patch": "@@ -661,9 +661,12 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n     return nEvicted;\n }\n \n-int64_t LockTime(const CTransaction &tx, int flags, const CBlockIndex& tip, const std::vector<CCoins>& prevCoins, int nBlockHeight, int64_t nBlockTime)\n+int64_t LockTime(const CTransaction &tx, int flags, const std::vector<CCoins>& prevCoins, const CBlockIndex& block)\n {\n-    CCoins coins;\n+    assert(prevCoins.size() == tx.vin.size());\n+    int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n+                                    ? block.GetAncestor(std::max(block.nHeight-1, 0))->GetMedianTimePast()\n+                                    : block.GetBlockTime();\n \n     bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n                       && flags & LOCKTIME_VERIFY_SEQUENCE;\n@@ -676,9 +679,8 @@ int64_t LockTime(const CTransaction &tx, int flags, const CBlockIndex& tip, cons\n     // Will remain equal to true if all inputs are finalized\n     // (CTxIn::SEQUENCE_FINAL).\n     bool fFinalized = true;\n-    int txinIndex = -1;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-        txinIndex++;\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n         // Set a flag if we witness an input that isn't finalized.\n         if (txin.nSequence == CTxIn::SEQUENCE_FINAL)\n             continue;\n@@ -697,23 +699,26 @@ int64_t LockTime(const CTransaction &tx, int flags, const CBlockIndex& tip, cons\n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLED_FLAG)\n             continue;\n \n-        coins = prevCoins.at(txinIndex);\n+        const CCoins& coins = prevCoins[txinIndex];\n+\n+        // If the coin height is unknown, ignore it in the calculation\n+        // of the LockTime\n+        if(coins.nHeight < 0)\n+            continue;\n+\n+        // Spending a coin from a future block should be impossible, skip the input\n+        if(coins.nHeight != MEMPOOL_HEIGHT && coins.nHeight > block.nHeight)\n+            continue;\n \n-        // coins.nHeight is MEMPOOL_HEIGHT (an absurdly high value)\n+        // coins.nHeight is MEMPOOL_HEIGHT\n         // if the parent transaction was from the mempool. We can't\n         // know what height it will have once confirmed, but we\n         // assume it makes it in the same block.\n-        int nCoinHeight = std::min(coins.nHeight, nBlockHeight);\n+        int nCoinHeight = coins.nHeight == MEMPOOL_HEIGHT ? block.nHeight : coins.nHeight;\n \n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG) {\n \n-            // The only time the negative branch of this conditional\n-            // is executed is when the prior output was taken from the\n-            // mempool, in which case we assume it makes it into the\n-            // same block (see above).\n-            int64_t nCoinTime = (nCoinHeight <= (tip.nHeight+1))\n-                              ? tip.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast()\n-                              : nBlockTime;\n+            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n \n             // Time-based relative lock-times are measured from the\n             // smallest allowed timestamp of the block containing the\n@@ -740,32 +745,31 @@ int64_t LockTime(const CTransaction &tx, int flags, const CBlockIndex& tip, cons\n     else\n         nMinTime = std::max(nMinTime, (int64_t)tx.nLockTime);\n \n-    if (nMinHeight >= nBlockHeight)\n+    if (nMinHeight >= block.nHeight)\n         return nMinHeight;\n     if (nMinTime >= nBlockTime)\n         return nMinTime;\n \n     return 0;\n }\n \n-int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, int nBlockHeight, int64_t nBlockTime)\n+int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, const CBlockIndex& block)\n {\n-    AssertLockHeld(cs_main);\n     CCoins coins;\n     std::vector<CCoins> prevCoins (tx.vin.size());\n-    int txinIndex = -1;\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-        txinIndex++;\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n         if (!pCoinsView || !pCoinsView->GetCoins(txin.prevout.hash, coins))\n         {\n             coins = CCoins();\n-            //If previous coin is not found in the CCoinsView, \n-            //assume the coin is anormally old, so it does not change the minheight and nMinTime later\n-            coins.nHeight = -100000000;\n+            // If previous coin is not found in the CCoinsView,\n+            // the next overload will just skip the input\n+            // for lockTime calculation\n+            coins.nHeight = -1;\n         }\n         prevCoins.at(txinIndex) = coins;\n     }\n-    return LockTime(tx, flags, *chainActive.Tip(), prevCoins, nBlockHeight, nBlockTime);\n+    return LockTime(tx, flags, prevCoins, block);\n }\n \n int64_t CheckLockTime(const CTransaction &tx, int flags)\n@@ -784,24 +788,24 @@ int64_t CheckLockTime(const CTransaction &tx, int flags)\n     CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n     const CCoinsView *pCoinsView = &viewMemPool;\n \n+    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex index;\n+    index.pprev = tip;\n     // CheckLockTime() uses chainActive.Height()+1 to evaluate\n     // nLockTime because when LockTime() is called within\n     // CBlock::AcceptBlock(), the height of the block *being*\n     // evaluated is what is used. Thus if we want to know if a\n     // transaction can be part of the *next* block, we need to call\n     // LockTime() with one more than chainActive.Height().\n-    const int nBlockHeight = chainActive.Height() + 1;\n-\n-    // BIP113 will require that time-locked transactions have nLockTime set to\n-    // less than the median time of the previous block they're contained in.\n-    // When the next block is created its previous block will be the current\n-    // chain tip, so we use that to calculate the median time passed to\n-    // LockTime() if LOCKTIME_MEDIAN_TIME_PAST is set.\n-    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n-                             ? chainActive.Tip()->GetMedianTimePast()\n-                             : GetAdjustedTime();\n-\n-    return LockTime(tx, flags, pCoinsView, nBlockHeight, nBlockTime);\n+    index.nHeight = tip->nHeight + 1;\n+\n+    // Timestamps on the other hand don't get any special treatment,\n+    // because we can't know what timestamp the next block will have,\n+    // and there aren't timestamp applications where it matters.\n+    // However this changes once median past time-locks are enforced:\n+    index.nTime = GetAdjustedTime();\n+\n+    return LockTime(tx, flags, pCoinsView, index);\n }\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n@@ -2175,11 +2179,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     int nLockTimeFlags = 0;\n-    int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                            ? pindex->pprev->GetMedianTimePast()\n-                            : pindex->GetBlockTime();\n-\n-    int64_t nTimeStart = GetTimeMicros();\n     CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n@@ -2204,7 +2203,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n             // Check that transaction is finalized\n-            if (LockTime(tx, nLockTimeFlags, &view, pindex->nHeight, nLockTimeCutoff))\n+            if (LockTime(tx, nLockTimeFlags, &view, *pindex))\n                 return state.DoS(100, error(\"ConnectBlock(): contains a non-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n \n@@ -3170,24 +3169,25 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n \n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex * const pindexPrev)\n {\n-    const int nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n+    int nLockTimeFlags = 0;\n+    CBlockIndex blockIndex;\n+    blockIndex.nTime = block.nTime;\n+    blockIndex.nHeight = pindexPrev == NULL ? 0 : pindexPrev->nHeight + 1;\n+    blockIndex.pprev = pindexPrev;\n+\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-        int nLockTimeFlags = 0;\n-        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? pindexPrev->GetMedianTimePast()\n-                                : block.GetBlockTime();\n-        if (LockTime(tx, nLockTimeFlags, NULL, nHeight, nLockTimeCutoff))\n+        if (LockTime(tx, nLockTimeFlags, NULL, blockIndex))\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n     }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):\n     if (block.nVersion >= 2 && IsSuperMajority(2, pindexPrev, consensusParams.nMajorityEnforceBlockUpgrade, consensusParams))\n     {\n-        CScript expect = CScript() << nHeight;\n+        CScript expect = CScript() << blockIndex.nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n             return state.DoS(100, error(\"%s: block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");"
      },
      {
        "sha": "27abd9740e1d431ec0cfdb20d2a3d9d5b934438c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
        "patch": "@@ -327,10 +327,9 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n \n /**\n- * Check if transaction is final and can be included in a block with the\n- * specified height and time. Consensus critical.\n+ * Check if transaction is final and can be included in a block. Consensus critical.\n  */\n-int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, int nBlockHeight, int64_t nBlockTime);\n+int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, const CBlockIndex& block);\n \n /**\n  * Check if transaction will be final in the next block to be created."
      },
      {
        "sha": "7269d8dd140221930c4b081bd8dde0de46257c7e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
        "patch": "@@ -133,22 +133,21 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n     {\n         LOCK2(cs_main, mempool.cs);\n         CBlockIndex* pindexPrev = chainActive.Tip();\n-        const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n-        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n         CCoinsViewCache view(pcoinsTip);\n \n-        int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? nMedianTimePast\n-                                : pblock->GetBlockTime();\n+        CBlockIndex index;\n+        index.nHeight = pindexPrev->nHeight + 1;\n+        index.nTime = pblock->nTime;\n+        index.pprev = pindexPrev;\n \n         bool fPriorityBlock = nBlockPrioritySize > 0;\n         if (fPriorityBlock) {\n             vecPriority.reserve(mempool.mapTx.size());\n             for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n                  mi != mempool.mapTx.end(); ++mi)\n             {\n-                double dPriority = mi->GetPriority(nHeight);\n+                double dPriority = mi->GetPriority(index.nHeight);\n                 CAmount dummy;\n                 mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n                 vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n@@ -221,7 +220,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                 continue;\n             }\n \n-            if (LockTime(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &view, nHeight, nLockTimeCutoff))\n+            if (LockTime(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &view, index))\n                 continue;\n \n             unsigned int nTxSigOps = iter->GetSigOpCount();\n@@ -244,7 +243,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             if (fPrintPriority)\n             {\n-                double dPriority = iter->GetPriority(nHeight);\n+                double dPriority = iter->GetPriority(index.nHeight);\n                 CAmount dummy;\n                 mempool.ApplyDeltas(tx.GetHash(), dPriority, dummy);\n                 LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n@@ -277,8 +276,8 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOps);\n \n         // Compute final coinbase transaction.\n-        txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n-        txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n+        txNew.vout[0].nValue = nFees + GetBlockSubsidy(index.nHeight, chainparams.GetConsensus());\n+        txNew.vin[0].scriptSig = CScript() << index.nHeight << OP_0;\n         pblock->vtx[0] = txNew;\n         pblocktemplate->vTxFees[0] = -nFees;\n "
      },
      {
        "sha": "ec3912d5affa97466d56560765f5d7bfb03955be",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
        "patch": "@@ -57,6 +57,15 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n+    CBlockIndex CreateBlockIndex(int nHeight, int64_t nTime)\n+    {\n+        CBlockIndex index;\n+        index.nHeight = nHeight;\n+        index.nTime = nTime;\n+        index.pprev = chainActive.Tip();\n+        return index;\n+    }\n+\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n@@ -258,7 +267,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->nHeight + 1);\n-    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast()));\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -279,7 +288,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) > chainActive.Tip()->GetMedianTimePast());\n-    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 512));\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 512)));\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n@@ -288,23 +297,23 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->nHeight + 1);\n-    BOOST_CHECK(!LockTime(tx, LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast()));\n+    BOOST_CHECK(!LockTime(tx, 0, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())));\n \n     // absolute time locked\n     tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n     tx.nLockTime = chainActive.Tip()->GetMedianTimePast();\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->GetMedianTimePast());\n-    BOOST_CHECK(!LockTime(tx, LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 1));\n+    BOOST_CHECK(!LockTime(tx, 0, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 1)));\n \n     // mempool-dependent transactions\n     tx.vin[0].prevout.hash = hash;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 1;\n-    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1) == chainActive.Tip()->nHeight + 1);\n+    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1)) == chainActive.Tip()->nHeight + 1);\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | 2;\n-    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST, &viewMemPool, chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1) > chainActive.Tip()->GetMedianTimePast());\n+    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1)) > chainActive.Tip()->GetMedianTimePast());\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n "
      }
    ]
  },
  {
    "sha": "6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmYyMjhlNGMzZmFkNjc1NzhlNWVjZWEzMjc1YWFlMmFmYmFmZGQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-19T14:01:57Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T18:24:07Z"
      },
      "message": "Make LockTime use a height map of inputs",
      "tree": {
        "sha": "73f623c054705da4e79067aae9f638058263fea0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73f623c054705da4e79067aae9f638058263fea0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bf228e4c3fad67578e5ecea3275aae2afbafdd0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa83819cac79edc3ab9c140cbbd2cd1417e04a8a"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 70,
      "deletions": 50
    },
    "files": [
      {
        "sha": "aae5d48863cb2a0ff5dc4e114cfee2c3684d3307",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 40,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bf228e4c3fad67578e5ecea3275aae2afbafdd0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bf228e4c3fad67578e5ecea3275aae2afbafdd0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
        "patch": "@@ -661,9 +661,9 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRE\n     return nEvicted;\n }\n \n-int64_t LockTime(const CTransaction &tx, int flags, const std::vector<CCoins>& prevCoins, const CBlockIndex& block)\n+int64_t LockTime(const CTransaction &tx, int flags, const std::vector<int>* prevHeights, const CBlockIndex& block)\n {\n-    assert(prevCoins.size() == tx.vin.size());\n+    assert(prevHeights == NULL || prevHeights->size() == tx.vin.size());\n     int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n                                     ? block.GetAncestor(std::max(block.nHeight-1, 0))->GetMedianTimePast()\n                                     : block.GetBlockTime();\n@@ -699,22 +699,10 @@ int64_t LockTime(const CTransaction &tx, int flags, const std::vector<CCoins>& p\n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLED_FLAG)\n             continue;\n \n-        const CCoins& coins = prevCoins[txinIndex];\n-\n-        // If the coin height is unknown, ignore it in the calculation\n-        // of the LockTime\n-        if(coins.nHeight < 0)\n-            continue;\n-\n-        // Spending a coin from a future block should be impossible, skip the input\n-        if(coins.nHeight != MEMPOOL_HEIGHT && coins.nHeight > block.nHeight)\n+        if (prevHeights == NULL)\n             continue;\n \n-        // coins.nHeight is MEMPOOL_HEIGHT\n-        // if the parent transaction was from the mempool. We can't\n-        // know what height it will have once confirmed, but we\n-        // assume it makes it in the same block.\n-        int nCoinHeight = coins.nHeight == MEMPOOL_HEIGHT ? block.nHeight : coins.nHeight;\n+        int nCoinHeight = (*prevHeights)[txinIndex];\n \n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG) {\n \n@@ -753,25 +741,6 @@ int64_t LockTime(const CTransaction &tx, int flags, const std::vector<CCoins>& p\n     return 0;\n }\n \n-int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, const CBlockIndex& block)\n-{\n-    CCoins coins;\n-    std::vector<CCoins> prevCoins (tx.vin.size());\n-    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n-        const CTxIn& txin = tx.vin[txinIndex];\n-        if (!pCoinsView || !pCoinsView->GetCoins(txin.prevout.hash, coins))\n-        {\n-            coins = CCoins();\n-            // If previous coin is not found in the CCoinsView,\n-            // the next overload will just skip the input\n-            // for lockTime calculation\n-            coins.nHeight = -1;\n-        }\n-        prevCoins.at(txinIndex) = coins;\n-    }\n-    return LockTime(tx, flags, prevCoins, block);\n-}\n-\n int64_t CheckLockTime(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n@@ -784,9 +753,6 @@ int64_t CheckLockTime(const CTransaction &tx, int flags)\n     // scheduled, so no flags are set.\n     flags = std::max(flags, 0);\n \n-    // pcoinsTip contains the UTXO set for chainActive.Tip()\n-    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n-    const CCoinsView *pCoinsView = &viewMemPool;\n \n     CBlockIndex* tip = chainActive.Tip();\n     CBlockIndex index;\n@@ -805,7 +771,27 @@ int64_t CheckLockTime(const CTransaction &tx, int flags)\n     // However this changes once median past time-locks are enforced:\n     index.nTime = GetAdjustedTime();\n \n-    return LockTime(tx, flags, pCoinsView, index);\n+    // pcoinsTip contains the UTXO set for chainActive.Tip()\n+    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+    std::vector<int> prevheights;\n+    prevheights.resize(tx.vin.size());\n+    for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n+        const CTxIn& txin = tx.vin[txinIndex];\n+        CCoins coins;\n+        if (!viewMemPool.GetCoins(txin.prevout.hash, coins)) {\n+            // Input not found. This can only occur for wallet transactions\n+            // that are already confirmed. Assume it's all fine.\n+            return 0;\n+        }\n+        if (coins.nHeight == MEMPOOL_HEIGHT) {\n+            // Assume all mempool transaction confirm in the next block\n+            prevheights[txinIndex] = tip->nHeight + 1;\n+        } else {\n+            prevheights[txinIndex] = coins.nHeight;\n+        }\n+    }\n+\n+    return LockTime(tx, flags, &prevheights, index);\n }\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n@@ -2178,6 +2164,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n+    std::vector<int> prevheights;\n     int nLockTimeFlags = 0;\n     CAmount nFees = 0;\n     int nInputs = 0;\n@@ -2203,7 +2190,11 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n             // Check that transaction is finalized\n-            if (LockTime(tx, nLockTimeFlags, &view, *pindex))\n+            prevheights.resize(tx.vin.size());\n+            for (size_t j = 0; j < tx.vin.size(); j++) {\n+                prevheights[j] = view.AccessCoins(tx.vin[j].prevout.hash)->nHeight;\n+            }\n+            if (LockTime(tx, nLockTimeFlags, &prevheights, *pindex))\n                 return state.DoS(100, error(\"ConnectBlock(): contains a non-final transaction\", __func__),\n                                  REJECT_INVALID, \"bad-txns-nonfinal\");\n "
      },
      {
        "sha": "af60ad394c29b684ebab4db7424fdb7e821a4091",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bf228e4c3fad67578e5ecea3275aae2afbafdd0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bf228e4c3fad67578e5ecea3275aae2afbafdd0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
        "patch": "@@ -328,8 +328,9 @@ bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n \n /**\n  * Check if transaction is final and can be included in a block. Consensus critical.\n+ * Takes as input a list of heights at which tx's inputs (in order) confirmed.\n  */\n-int64_t LockTime(const CTransaction &tx, int flags, const CCoinsView* pCoinsView, const CBlockIndex& block);\n+int64_t LockTime(const CTransaction &tx, int flags, const std::vector<int>* prevheights, const CBlockIndex& block);\n \n /**\n  * Check if transaction will be final in the next block to be created."
      },
      {
        "sha": "a06f4b7729663d834b85f9754b33a296731cdd2f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bf228e4c3fad67578e5ecea3275aae2afbafdd0/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bf228e4c3fad67578e5ecea3275aae2afbafdd0/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
        "patch": "@@ -140,6 +140,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         index.nHeight = pindexPrev->nHeight + 1;\n         index.nTime = pblock->nTime;\n         index.pprev = pindexPrev;\n+        std::vector<int> prevheights;\n \n         bool fPriorityBlock = nBlockPrioritySize > 0;\n         if (fPriorityBlock) {\n@@ -220,7 +221,24 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                 continue;\n             }\n \n-            if (LockTime(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &view, index))\n+            prevheights.resize(0);\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            {\n+                // Read prev transaction\n+                if (view.HaveCoins(txin.prevout.hash))\n+                {\n+                    const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n+                    assert(coins);\n+                    prevheights.push_back(coins->nHeight);\n+                }\n+                else\n+                {\n+                    //Assume it is in mempool\n+                    prevheights.push_back(index.nHeight);\n+                }\n+            }\n+\n+            if (LockTime(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &prevheights, index))\n                 continue;\n \n             unsigned int nTxSigOps = iter->GetSigOpCount();"
      },
      {
        "sha": "90c1e3f28376d22a6aa395e2e02e5c9d467d325d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bf228e4c3fad67578e5ecea3275aae2afbafdd0/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bf228e4c3fad67578e5ecea3275aae2afbafdd0/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
        "patch": "@@ -88,6 +88,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n+    int baseheight = 0;\n     std::vector<CTransaction*>txFirst;\n     for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n     {\n@@ -101,6 +102,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n         txCoinbase.vout[0].scriptPubKey = CScript();\n         pblock->vtx[0] = CTransaction(txCoinbase);\n+        if (txFirst.size() == 0)\n+            baseheight = chainActive.Height();\n         if (txFirst.size() < 4)\n             txFirst.push_back(new CTransaction(pblock->vtx[0]));\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n@@ -250,24 +253,26 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n \n-    // view into mepool for checking dependent transactions\n-    CCoinsViewMemPool viewMemPool(pcoinsTip, mempool);\n+    // height map\n+    std::vector<int> prevheights;\n \n     // relative height locked\n     tx.nVersion = 2;\n     tx.vin.resize(1);\n+    prevheights.resize(1);\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n+    prevheights[0] = baseheight;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->nHeight + 1);\n-    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())));\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -285,35 +290,40 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    prevheights[0] = baseheight + 1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) > chainActive.Tip()->GetMedianTimePast());\n-    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 512)));\n+    BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 512)));\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n+    prevheights[0] = baseheight + 2;\n     tx.nLockTime = chainActive.Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->nHeight + 1);\n-    BOOST_CHECK(!LockTime(tx, 0, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())));\n+    BOOST_CHECK(!LockTime(tx, 0, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())));\n \n     // absolute time locked\n     tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n     tx.nLockTime = chainActive.Tip()->GetMedianTimePast();\n+    prevheights.resize(1);\n+    prevheights[0] = baseheight + 3;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->GetMedianTimePast());\n-    BOOST_CHECK(!LockTime(tx, 0, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 1)));\n+    BOOST_CHECK(!LockTime(tx, 0, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 1)));\n \n     // mempool-dependent transactions\n     tx.vin[0].prevout.hash = hash;\n+    prevheights[0] = chainActive.Tip()->nHeight + 1;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 1;\n-    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1)) == chainActive.Tip()->nHeight + 1);\n+    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1)) == chainActive.Tip()->nHeight + 1);\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | 2;\n-    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &viewMemPool, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1)) > chainActive.Tip()->GetMedianTimePast());\n+    BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1)) > chainActive.Tip()->GetMedianTimePast());\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n "
      }
    ]
  },
  {
    "sha": "bd5a760e69d2fdfc2a3151122a7f7f3df28876a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDVhNzYwZTY5ZDJmZGZjMmEzMTUxMTIyYTdmN2YzZGYyODg3NmE3",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-11-21T07:58:40Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-02T18:24:08Z"
      },
      "message": "Rename flags\n\n_SECONDS_FLAG to _TYPE_FLAG\n_DISABLED_FLAG to _DISABLE_FLAG",
      "tree": {
        "sha": "eeb180f216cb59f5fa1865f90c23ab690a7467da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eeb180f216cb59f5fa1865f90c23ab690a7467da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bf228e4c3fad67578e5ecea3275aae2afbafdd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bf228e4c3fad67578e5ecea3275aae2afbafdd0"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "cb6a7ce737fca88e5fa2555c14e52587971cf47f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bd5a760e69d2fdfc2a3151122a7f7f3df28876a7",
        "patch": "@@ -696,15 +696,15 @@ int64_t LockTime(const CTransaction &tx, int flags, const std::vector<int>* prev\n         // Sequence numbers with the most significant bit set are not\n         // treated as relative lock-times, nor are they given any\n         // consensus-enforced meaning at this point.\n-        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLED_FLAG)\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_DISABLE_FLAG)\n             continue;\n \n         if (prevHeights == NULL)\n             continue;\n \n         int nCoinHeight = (*prevHeights)[txinIndex];\n \n-        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG) {\n+        if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n \n             int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n "
      },
      {
        "sha": "ea9adf60863e14488f134427ed5cd724b0141e8a",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=bd5a760e69d2fdfc2a3151122a7f7f3df28876a7",
        "patch": "@@ -64,17 +64,20 @@ class CTxIn\n     /* Setting nSequence to this value for every input in a transaction\n      * disables nLockTime. */\n     static const uint32_t SEQUENCE_FINAL = 0xffffffff;\n+\n     /* If this flag set, CTxIn::nSequence is NOT interpreted as a\n-     * relative lock-time. Setting the most significant bit of a\n-     * sequence number disabled relative lock-time. */\n-    static const uint32_t SEQUENCE_LOCKTIME_DISABLED_FLAG = (1 << 31);\n+     * relative lock-time. */\n+    static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);\n+\n     /* If CTxIn::nSequence encodes a relative lock-time and this flag\n      * is set, the relative lock-time has units of 512 seconds,\n      * otherwise it specifies blocks with a granularity of 1. */\n-    static const uint32_t SEQUENCE_LOCKTIME_SECONDS_FLAG = (1 << 22);\n+    static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);\n+\n     /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n      * applied to extract that lock-time from the sequence field. */\n     static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n+\n     /* In order to use the same number of bits to encode roughly the\n      * same wall-clock duration, and because blocks are naturally\n      * limited to occur every 600s on average, the minimum granularity"
      },
      {
        "sha": "2940edc6ac2da0eea7fba6d0be28d42ca324f975",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=bd5a760e69d2fdfc2a3151122a7f7f3df28876a7",
        "patch": "@@ -289,7 +289,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(CheckLockTime(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n     prevheights[0] = baseheight + 1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n@@ -322,7 +322,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 1;\n     BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1)) == chainActive.Tip()->nHeight + 1);\n-    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_SECONDS_FLAG | 2;\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 2;\n     BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1)) > chainActive.Tip()->GetMedianTimePast());\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));"
      }
    ]
  },
  {
    "sha": "ae5d345a62ece5db0049ab9242ac70170de43b0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTVkMzQ1YTYyZWNlNWRiMDA0OWFiOTI0MmFjNzAxNzBkZTQzYjBk",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-12-02T18:56:02Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-12-02T18:56:02Z"
      },
      "message": "Explain the reason for unsigned cast of tx.nVersion",
      "tree": {
        "sha": "8a70d6ce0a63aeedc66a7c2da15966d74152d329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a70d6ce0a63aeedc66a7c2da15966d74152d329"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae5d345a62ece5db0049ab9242ac70170de43b0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae5d345a62ece5db0049ab9242ac70170de43b0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae5d345a62ece5db0049ab9242ac70170de43b0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae5d345a62ece5db0049ab9242ac70170de43b0d/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd5a760e69d2fdfc2a3151122a7f7f3df28876a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd5a760e69d2fdfc2a3151122a7f7f3df28876a7"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "290b92ce43af961e9cfd930a1e0b337d1543cc20",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae5d345a62ece5db0049ab9242ac70170de43b0d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae5d345a62ece5db0049ab9242ac70170de43b0d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ae5d345a62ece5db0049ab9242ac70170de43b0d",
        "patch": "@@ -668,6 +668,9 @@ int64_t LockTime(const CTransaction &tx, int flags, const std::vector<int>* prev\n                                     ? block.GetAncestor(std::max(block.nHeight-1, 0))->GetMedianTimePast()\n                                     : block.GetBlockTime();\n \n+    // tx.nVersion is signed integer so requires cast to unsigned otherwise\n+    // we would be doing a signed comparison and half the range of nVersion\n+    // wouldn't support BIP 68.\n     bool fEnforceBIP68 = static_cast<uint32_t>(tx.nVersion) >= 2\n                       && flags & LOCKTIME_VERIFY_SEQUENCE;\n "
      }
    ]
  },
  {
    "sha": "4a010348d88aa13a950ed1153e1ea17b1e716033",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTAxMDM0OGQ4OGFhMTNhOTUwZWQxMTUzZTFlYTE3YjFlNzE2MDMz",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-12-04T19:34:05Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-12-05T13:36:52Z"
      },
      "message": "Fix minor bugs in miner_tests\n\nThere was an extraneous tx being added to the mempool which spent the same inputs.  This only didn't cause a problem because locktimes stopped it from being selected for the template.\n\nIn addition, since the merger of MedianTimePast, locked txs that were time based were not being correctly tested in the unit test.",
      "tree": {
        "sha": "b9dcf4a2b4c2db5c50e084700246d38455de262e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9dcf4a2b4c2db5c50e084700246d38455de262e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a010348d88aa13a950ed1153e1ea17b1e716033",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a010348d88aa13a950ed1153e1ea17b1e716033",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a010348d88aa13a950ed1153e1ea17b1e716033",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a010348d88aa13a950ed1153e1ea17b1e716033/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae5d345a62ece5db0049ab9242ac70170de43b0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae5d345a62ece5db0049ab9242ac70170de43b0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae5d345a62ece5db0049ab9242ac70170de43b0d"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 9,
      "deletions": 22
    },
    "files": [
      {
        "sha": "215f5aa0eff41c6d6f09fb86f4d48bacbbaf3216",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 22,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a010348d88aa13a950ed1153e1ea17b1e716033/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a010348d88aa13a950ed1153e1ea17b1e716033/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=4a010348d88aa13a950ed1153e1ea17b1e716033",
        "patch": "@@ -264,7 +264,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n-    prevheights[0] = baseheight;\n+    prevheights[0] = baseheight + 1;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n@@ -274,23 +274,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->nHeight + 1);\n     BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())));\n \n-    // time locked\n-    tx2.vin.resize(1);\n-    tx2.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx2.vin[0].prevout.n = 0;\n-    tx2.vin[0].scriptSig = CScript() << OP_1;\n-    tx2.vin[0].nSequence = 0;\n-    tx2.vout.resize(1);\n-    tx2.vout[0].nValue = 4900000000LL;\n-    tx2.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n-    hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx2));\n-    BOOST_CHECK(CheckLockTime(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n-    prevheights[0] = baseheight + 1;\n+    prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) > chainActive.Tip()->GetMedianTimePast());\n@@ -299,7 +286,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n-    prevheights[0] = baseheight + 2;\n+    prevheights[0] = baseheight + 3;\n     tx.nLockTime = chainActive.Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n@@ -310,7 +297,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n     tx.nLockTime = chainActive.Tip()->GetMedianTimePast();\n     prevheights.resize(1);\n-    prevheights[0] = baseheight + 3;\n+    prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->GetMedianTimePast());\n@@ -331,14 +318,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // it into the template.\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n     delete pblocktemplate;\n-\n-    // However if we advance height and time by one, all except for\n-    // possibly the relative time locked tx will.\n+    // However if we advance height and time by one, all of them should be mined\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n+        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n     chainActive.Tip()->nHeight++;\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast() + 2);\n+    SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      }
    ]
  },
  {
    "sha": "26156137655c6fd72731f470b59939ad5c75388b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjE1NjEzNzY1NWM2ZmQ3MjczMWY0NzBiNTk5MzlhZDVjNzUzODhi",
    "commit": {
      "author": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-08T15:41:02Z"
      },
      "committer": {
        "name": "Nicolas DORIER",
        "email": "nicolas.dorier@gmail.com",
        "date": "2015-12-09T14:27:54Z"
      },
      "message": "Do not recalculate LockTime for a mempool entry in removeForReorg if the tip at the time of calculation is still in the main chain",
      "tree": {
        "sha": "a155b6e5465e86886300c121d0bdffc26e54eaf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a155b6e5465e86886300c121d0bdffc26e54eaf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26156137655c6fd72731f470b59939ad5c75388b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26156137655c6fd72731f470b59939ad5c75388b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26156137655c6fd72731f470b59939ad5c75388b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26156137655c6fd72731f470b59939ad5c75388b/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a010348d88aa13a950ed1153e1ea17b1e716033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a010348d88aa13a950ed1153e1ea17b1e716033",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a010348d88aa13a950ed1153e1ea17b1e716033"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 68,
      "deletions": 42
    },
    "files": [
      {
        "sha": "4af93586a6b8016591fd4e24a26488cd33c95952",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26156137655c6fd72731f470b59939ad5c75388b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26156137655c6fd72731f470b59939ad5c75388b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=26156137655c6fd72731f470b59939ad5c75388b",
        "patch": "@@ -1074,7 +1074,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const C\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps);\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps, chainActive.Tip()->GetBlockHash());\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block"
      },
      {
        "sha": "23f675fc4e7a95c440b026b4d843721f9b691f3b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 30,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26156137655c6fd72731f470b59939ad5c75388b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26156137655c6fd72731f470b59939ad5c75388b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=26156137655c6fd72731f470b59939ad5c75388b",
        "patch": "@@ -134,21 +134,16 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         LOCK2(cs_main, mempool.cs);\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         pblock->nTime = GetAdjustedTime();\n-        CCoinsViewCache view(pcoinsTip);\n \n-        CBlockIndex index;\n-        index.nHeight = pindexPrev->nHeight + 1;\n-        index.nTime = pblock->nTime;\n-        index.pprev = pindexPrev;\n-        std::vector<int> prevheights;\n+        unsigned int nHeight = pindexPrev->nHeight + 1;\n \n         bool fPriorityBlock = nBlockPrioritySize > 0;\n         if (fPriorityBlock) {\n             vecPriority.reserve(mempool.mapTx.size());\n             for (CTxMemPool::indexed_transaction_set::iterator mi = mempool.mapTx.begin();\n                  mi != mempool.mapTx.end(); ++mi)\n             {\n-                double dPriority = mi->GetPriority(index.nHeight);\n+                double dPriority = mi->GetPriority(nHeight);\n                 CAmount dummy;\n                 mempool.ApplyDeltas(mi->GetTx().GetHash(), dPriority, dummy);\n                 vecPriority.push_back(TxCoinAgePriority(dPriority, mi));\n@@ -221,26 +216,6 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                 continue;\n             }\n \n-            prevheights.resize(0);\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            {\n-                // Read prev transaction\n-                if (view.HaveCoins(txin.prevout.hash))\n-                {\n-                    const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n-                    assert(coins);\n-                    prevheights.push_back(coins->nHeight);\n-                }\n-                else\n-                {\n-                    //Assume it is in mempool\n-                    prevheights.push_back(index.nHeight);\n-                }\n-            }\n-\n-            if (LockTime(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &prevheights, index))\n-                continue;\n-\n             unsigned int nTxSigOps = iter->GetSigOpCount();\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS) {\n                 if (nBlockSigOps > MAX_BLOCK_SIGOPS - 2) {\n@@ -261,7 +236,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n \n             if (fPrintPriority)\n             {\n-                double dPriority = iter->GetPriority(index.nHeight);\n+                double dPriority = iter->GetPriority(nHeight);\n                 CAmount dummy;\n                 mempool.ApplyDeltas(tx.GetHash(), dPriority, dummy);\n                 LogPrintf(\"priority %.1f fee %s txid %s\\n\",\n@@ -294,8 +269,8 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOps);\n \n         // Compute final coinbase transaction.\n-        txNew.vout[0].nValue = nFees + GetBlockSubsidy(index.nHeight, chainparams.GetConsensus());\n-        txNew.vin[0].scriptSig = CScript() << index.nHeight << OP_0;\n+        txNew.vout[0].nValue = nFees + GetBlockSubsidy(nHeight, chainparams.GetConsensus());\n+        txNew.vin[0].scriptSig = CScript() << nHeight << OP_0;\n         pblock->vtx[0] = txNew;\n         pblocktemplate->vTxFees[0] = -nFees;\n "
      },
      {
        "sha": "4e3d9412214106c0782db64635cc54fc1060b568",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26156137655c6fd72731f470b59939ad5c75388b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26156137655c6fd72731f470b59939ad5c75388b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=26156137655c6fd72731f470b59939ad5c75388b",
        "patch": "@@ -15,6 +15,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n+#include <list>\n \n #include \"test/test_bitcoin.h\"\n \n@@ -256,6 +257,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // height map\n     std::vector<int> prevheights;\n \n+    std::list<CTxMemPoolEntry> transactions;\n+\n     // relative height locked\n     tx.nVersion = 2;\n     tx.vin.resize(1);\n@@ -270,7 +273,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    transactions.push_back(entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n+    mempool.addUnchecked(hash, transactions.back());\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->nHeight + 1);\n     BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())));\n \n@@ -279,17 +283,20 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    transactions.push_back(entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, transactions.back());\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST) > chainActive.Tip()->GetMedianTimePast());\n     BOOST_CHECK(!LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 512)));\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n+    tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n     prevheights[0] = baseheight + 3;\n     tx.nLockTime = chainActive.Tip()->nHeight + 1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    transactions.push_back(entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, transactions.back());\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->nHeight + 1);\n     BOOST_CHECK(!LockTime(tx, 0, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())));\n \n@@ -299,7 +306,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights.resize(1);\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n+    transactions.push_back(entry.Time(GetTime()).FromTx(tx));\n+    mempool.addUnchecked(hash, transactions.back());\n     BOOST_CHECK(CheckLockTime(tx, LOCKTIME_MEDIAN_TIME_PAST) == chainActive.Tip()->GetMedianTimePast());\n     BOOST_CHECK(!LockTime(tx, 0, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast() + 1)));\n \n@@ -312,18 +320,24 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 2;\n     BOOST_CHECK(LockTime(tx, LOCKTIME_VERIFY_SEQUENCE, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1, chainActive.Tip()->GetMedianTimePast()+1)) > chainActive.Tip()->GetMedianTimePast());\n \n+    //This should kick non final transaction from the mempool\n+    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, LOCKTIME_MEDIAN_TIME_PAST | LOCKTIME_VERIFY_SEQUENCE);\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n \n     // None of the of the above height/time locked tx should have made\n     // it into the template.\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n     delete pblocktemplate;\n     // However if we advance height and time by one, all of them should be mined\n+    BOOST_FOREACH(const CTxMemPoolEntry& entry, transactions) {\n+        mempool.addUnchecked(entry.GetTx().GetHash(), entry);\n+    }\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n     chainActive.Tip()->nHeight++;\n     SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n \n+    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, LOCKTIME_MEDIAN_TIME_PAST | LOCKTIME_VERIFY_SEQUENCE);\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n     delete pblocktemplate;"
      },
      {
        "sha": "5595ac5e9afa1807ca37179e34132a55c13b1d8d",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26156137655c6fd72731f470b59939ad5c75388b/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26156137655c6fd72731f470b59939ad5c75388b/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=26156137655c6fd72731f470b59939ad5c75388b",
        "patch": "@@ -150,7 +150,7 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(CMutableTransaction &tx, CTxMemPo\n     CAmount inChainValue = hasNoDependencies ? txn.GetValueOut() : 0;\n \n     return CTxMemPoolEntry(txn, nFee, nTime, dPriority, nHeight,\n-                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCount);\n+                           hasNoDependencies, inChainValue, spendsCoinbase, sigOpCount, uint256());\n }\n \n void Shutdown(void* parg)"
      },
      {
        "sha": "9bd775b2c1b47c581531b676741c8f7f4ae67620",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 5,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26156137655c6fd72731f470b59939ad5c75388b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26156137655c6fd72731f470b59939ad5c75388b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=26156137655c6fd72731f470b59939ad5c75388b",
        "patch": "@@ -22,10 +22,10 @@ using namespace std;\n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                                  bool poolHasNoInputsOf, CAmount _inChainInputValue,\n-                                 bool _spendsCoinbase, unsigned int _sigOps):\n+                                 bool _spendsCoinbase, unsigned int _sigOps, const uint256 _tip):\n     tx(_tx), nFee(_nFee), nTime(_nTime), entryPriority(_entryPriority), entryHeight(_entryHeight),\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n-    spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps)\n+    spendsCoinbase(_spendsCoinbase), sigOpCount(_sigOps), tip(_tip)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n@@ -60,6 +60,11 @@ void CTxMemPoolEntry::UpdateFeeDelta(int64_t newFeeDelta)\n     feeDelta = newFeeDelta;\n }\n \n+void CTxMemPoolEntry::UpdateTip(uint256 newTip)\n+{\n+    tip = newTip;\n+}\n+\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n@@ -501,24 +506,43 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n+    AssertLockHeld(cs_main);\n+    CBlockIndex* tip = chainActive.Tip();\n     list<CTransaction> transactionsToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n-        if (CheckLockTime(tx, flags)) {\n+        bool lockTimeInvalidated = true;\n+        CBlockIndex* current = tip;\n+        for(int i = 0; i < 10; i++)\n+        {\n+            if(current->GetBlockHash() == it->GetTip())\n+            {\n+                lockTimeInvalidated = false;\n+                break;\n+            }\n+            current = tip->pprev;\n+            if(current == NULL)\n+                break;\n+        }\n+        if (lockTimeInvalidated && CheckLockTime(tx, flags)) {\n             transactionsToRemove.push_back(tx);\n-        } else if (it->GetSpendsCoinbase()) {\n+        } else if (it->GetSpendsCoinbase()) {            \n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())\n                     continue;\n                 const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-\t\tif (nCheckFrequency != 0) assert(coins);\n+                if (nCheckFrequency != 0) assert(coins);\n                 if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n                     transactionsToRemove.push_back(tx);\n                     break;\n                 }\n             }\n         }\n+        if(lockTimeInvalidated)\n+        {\n+                mapTx.modify(it, update_tip(tip->GetBlockHash()));\n+        }\n     }\n     BOOST_FOREACH(const CTransaction& tx, transactionsToRemove) {\n         list<CTransaction> removed;"
      },
      {
        "sha": "e5899b5d0911216ef1f47383f2c958aff088532e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26156137655c6fd72731f470b59939ad5c75388b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26156137655c6fd72731f470b59939ad5c75388b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=26156137655c6fd72731f470b59939ad5c75388b",
        "patch": "@@ -70,6 +70,7 @@ class CTxMemPoolEntry\n     bool spendsCoinbase; //! keep track of transactions that spend a coinbase\n     unsigned int sigOpCount; //! Legacy sig ops plus P2SH sig op count\n     int64_t feeDelta; //! Used for determining the priority of the transaction for mining in a block\n+    uint256 tip; //! The tip at the time the mempool entry was inserted, used for knowing if locktime is potentially invalidated by a reorg\n \n     // Information about descendants of this transaction that are in the\n     // mempool; if we remove this transaction we must remove all of these\n@@ -84,7 +85,7 @@ class CTxMemPoolEntry\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _entryPriority, unsigned int _entryHeight,\n                     bool poolHasNoInputsOf, CAmount _inChainInputValue, bool spendsCoinbase,\n-                    unsigned int nSigOps);\n+                    unsigned int nSigOps, uint256 tip);\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n@@ -97,6 +98,7 @@ class CTxMemPoolEntry\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n+    uint256 GetTip() const { return tip; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n     unsigned int GetSigOpCount() const { return sigOpCount; }\n     int64_t GetModifiedFee() const { return nFee + feeDelta; }\n@@ -106,6 +108,8 @@ class CTxMemPoolEntry\n     void UpdateState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount);\n     // Updates the fee delta used for mining priority score\n     void UpdateFeeDelta(int64_t feeDelta);\n+    // Updates the tip used for locktime invalidation detection\n+    void UpdateTip(uint256 tip);\n \n     /** We can set the entry to be dirty if doing the full calculation of in-\n      *  mempool descendants will be too expensive, which can potentially happen\n@@ -163,6 +167,15 @@ struct mempoolentry_txid\n     }\n };\n \n+struct update_tip\n+{\n+    update_tip(uint256 _tip) : tip(_tip) {}\n+    void operator() (CTxMemPoolEntry &e) { e.UpdateTip(tip); }\n+\n+private:\n+    uint256 tip;\n+};\n+\n /** \\class CompareTxMemPoolEntryByFee\n  *\n  *  Sort an entry by max(feerate of entry's tx, feerate with all descendants)."
      }
    ]
  }
]