[
  {
    "sha": "8385101f6c38f40180a082cf793d868074c550fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Mzg1MTAxZjZjMzhmNDAxODBhMDgyY2Y3OTNkODY4MDc0YzU1MGZk",
    "commit": {
      "author": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-07T00:52:17Z"
      },
      "committer": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-08T19:27:15Z"
      },
      "message": "RPC: add weight to mempool entry output",
      "tree": {
        "sha": "a3905da28710f0b1999796d6392d657e2af4b50c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3905da28710f0b1999796d6392d657e2af4b50c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8385101f6c38f40180a082cf793d868074c550fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8385101f6c38f40180a082cf793d868074c550fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8385101f6c38f40180a082cf793d868074c550fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8385101f6c38f40180a082cf793d868074c550fd/comments",
    "author": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3255d6347b1f9eccbec3d6d93d4a424087a3b35b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3255d6347b1f9eccbec3d6d93d4a424087a3b35b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3255d6347b1f9eccbec3d6d93d4a424087a3b35b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7952e5b689bc07158d79002d8fe3e5b9333fcf93",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8385101f6c38f40180a082cf793d868074c550fd/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8385101f6c38f40180a082cf793d868074c550fd/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8385101f6c38f40180a082cf793d868074c550fd",
        "patch": "@@ -333,6 +333,7 @@ UniValue getdifficulty(const JSONRPCRequest& request)\n std::string EntryDescriptionString()\n {\n     return \"    \\\"size\\\" : n,             (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\\n\"\n+           \"    \\\"weight\\\" : n,           (numeric) transaction weight as defined in BIP 141.\\n\"\n            \"    \\\"fee\\\" : n,              (numeric) transaction fee in \" + CURRENCY_UNIT + \"\\n\"\n            \"    \\\"modifiedfee\\\" : n,      (numeric) transaction fee with fee deltas used for mining priority\\n\"\n            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n@@ -354,6 +355,7 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n     AssertLockHeld(mempool.cs);\n \n     info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n+    info.push_back(Pair(\"weight\", (int)e.GetTxWeight()));\n     info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n     info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n     info.push_back(Pair(\"time\", e.GetTime()));"
      }
    ]
  },
  {
    "sha": "9e338bc9058f8f42d50c2833ef453c5d954c900c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTMzOGJjOTA1OGY4ZjQyZDUwYzI4MzNlZjQ1M2M1ZDk1NGM5MDBj",
    "commit": {
      "author": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-08T19:20:00Z"
      },
      "committer": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-08T19:27:15Z"
      },
      "message": "qa: Add RPC tests for weight in mempool entry",
      "tree": {
        "sha": "b33ad9f35ef8f9bcc2a8c60d0cc076c6a68c0784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b33ad9f35ef8f9bcc2a8c60d0cc076c6a68c0784"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e338bc9058f8f42d50c2833ef453c5d954c900c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e338bc9058f8f42d50c2833ef453c5d954c900c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e338bc9058f8f42d50c2833ef453c5d954c900c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e338bc9058f8f42d50c2833ef453c5d954c900c/comments",
    "author": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8385101f6c38f40180a082cf793d868074c550fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8385101f6c38f40180a082cf793d868074c550fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8385101f6c38f40180a082cf793d868074c550fd"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3d775b8b4b24be9926bc53a295161e74628cf4bd",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e338bc9058f8f42d50c2833ef453c5d954c900c/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e338bc9058f8f42d50c2833ef453c5d954c900c/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=9e338bc9058f8f42d50c2833ef453c5d954c900c",
        "patch": "@@ -246,6 +246,13 @@ def run_test(self):\n         assert(tx.wit.is_null()) # This should not be a segwit input\n         assert(txid1 in self.nodes[0].getrawmempool())\n \n+        hex_tx = self.nodes[0].gettransaction(txid1)['hex']\n+        tx = FromHex(CTransaction(), hex_tx)\n+\n+        # Check that weight and sizei (actually vsize) are properly reported in mempool entry (txid1)\n+        assert_equal(self.nodes[0].getmempoolentry(txid1)[\"size\"], (self.nodes[0].getmempoolentry(txid1)[\"weight\"] + 3) // 4)\n+        assert_equal(self.nodes[0].getmempoolentry(txid1)[\"weight\"], len(tx.serialize())*3 + len(tx.serialize_with_witness()))\n+\n         # Now create tx2, which will spend from txid1.\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n@@ -255,6 +262,10 @@ def run_test(self):\n         tx = FromHex(CTransaction(), tx2_hex)\n         assert(not tx.wit.is_null())\n \n+        # Check that weight and size (actually vsize) are properly reported in mempool entry (txid2)\n+        assert_equal(self.nodes[0].getmempoolentry(txid2)[\"size\"], (self.nodes[0].getmempoolentry(txid2)[\"weight\"] + 3) // 4)\n+        assert_equal(self.nodes[0].getmempoolentry(txid2)[\"weight\"], len(tx.serialize())*3 + len(tx.serialize_with_witness()))\n+\n         # Now create tx3, which will spend from txid2\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid2, 16), 0), b\"\"))\n@@ -282,6 +293,10 @@ def run_test(self):\n         # Check that wtxid is properly reported in mempool entry\n         assert_equal(int(self.nodes[0].getmempoolentry(txid3)[\"wtxid\"], 16), tx.calc_sha256(True))\n \n+        # Check that weight and size (actually vsize) are properly reported in mempool entry (txid3)\n+        assert_equal(self.nodes[0].getmempoolentry(txid3)[\"size\"], (self.nodes[0].getmempoolentry(txid3)[\"weight\"] + 3) // 4)\n+        assert_equal(self.nodes[0].getmempoolentry(txid3)[\"weight\"], len(tx.serialize())*3 + len(tx.serialize_with_witness()))\n+\n         # Mine a block to clear the gbt cache again.\n         self.nodes[0].generate(1)\n "
      }
    ]
  },
  {
    "sha": "22086cce4e1fff68a4fe86dad4633748e756bea6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjA4NmNjZTRlMWZmZjY4YTRmZTg2ZGFkNDYzMzc0OGU3NTZiZWE2",
    "commit": {
      "author": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-08T19:20:17Z"
      },
      "committer": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-08T19:27:15Z"
      },
      "message": "qa: Add more RPC tests for wtxid in mempool entry, clarify comment",
      "tree": {
        "sha": "03a366e101aa1c65b8146cff63c426d0fae7ec95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03a366e101aa1c65b8146cff63c426d0fae7ec95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22086cce4e1fff68a4fe86dad4633748e756bea6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22086cce4e1fff68a4fe86dad4633748e756bea6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22086cce4e1fff68a4fe86dad4633748e756bea6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22086cce4e1fff68a4fe86dad4633748e756bea6/comments",
    "author": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e338bc9058f8f42d50c2833ef453c5d954c900c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e338bc9058f8f42d50c2833ef453c5d954c900c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e338bc9058f8f42d50c2833ef453c5d954c900c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f2a8b194b344b45e314bcf901be420b88ffcc395",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22086cce4e1fff68a4fe86dad4633748e756bea6/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22086cce4e1fff68a4fe86dad4633748e756bea6/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=22086cce4e1fff68a4fe86dad4633748e756bea6",
        "patch": "@@ -249,6 +249,9 @@ def run_test(self):\n         hex_tx = self.nodes[0].gettransaction(txid1)['hex']\n         tx = FromHex(CTransaction(), hex_tx)\n \n+        # Check that wtxid is properly reported in mempool entry (txid1)\n+        assert_equal(int(self.nodes[0].getmempoolentry(txid1)[\"wtxid\"], 16), tx.calc_sha256(True))\n+\n         # Check that weight and sizei (actually vsize) are properly reported in mempool entry (txid1)\n         assert_equal(self.nodes[0].getmempoolentry(txid1)[\"size\"], (self.nodes[0].getmempoolentry(txid1)[\"weight\"] + 3) // 4)\n         assert_equal(self.nodes[0].getmempoolentry(txid1)[\"weight\"], len(tx.serialize())*3 + len(tx.serialize_with_witness()))\n@@ -262,6 +265,9 @@ def run_test(self):\n         tx = FromHex(CTransaction(), tx2_hex)\n         assert(not tx.wit.is_null())\n \n+        # Check that wtxid is properly reported in mempool entry (txid2)\n+        assert_equal(int(self.nodes[0].getmempoolentry(txid2)[\"wtxid\"], 16), tx.calc_sha256(True))\n+\n         # Check that weight and size (actually vsize) are properly reported in mempool entry (txid2)\n         assert_equal(self.nodes[0].getmempoolentry(txid2)[\"size\"], (self.nodes[0].getmempoolentry(txid2)[\"weight\"] + 3) // 4)\n         assert_equal(self.nodes[0].getmempoolentry(txid2)[\"weight\"], len(tx.serialize())*3 + len(tx.serialize_with_witness()))\n@@ -290,7 +296,7 @@ def run_test(self):\n         assert(txid2 in template_txids)\n         assert(txid3 in template_txids)\n \n-        # Check that wtxid is properly reported in mempool entry\n+        # Check that wtxid is properly reported in mempool entry (txid3)\n         assert_equal(int(self.nodes[0].getmempoolentry(txid3)[\"wtxid\"], 16), tx.calc_sha256(True))\n \n         # Check that weight and size (actually vsize) are properly reported in mempool entry (txid3)"
      }
    ]
  },
  {
    "sha": "d4b0d81b58f0ef989cbfd526f818225c587ed7ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGIwZDgxYjU4ZjBlZjk4OWNiZmQ1MjZmODE4MjI1YzU4N2VkN2Vj",
    "commit": {
      "author": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-08T19:25:29Z"
      },
      "committer": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-09-08T19:27:15Z"
      },
      "message": "qa: Refactor segwit 3-tx-chain functional test to clarify use of 'tx' variable",
      "tree": {
        "sha": "32e0b24f8c02cb63272dca396095bb3bba4fdeef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32e0b24f8c02cb63272dca396095bb3bba4fdeef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4b0d81b58f0ef989cbfd526f818225c587ed7ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b0d81b58f0ef989cbfd526f818225c587ed7ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4b0d81b58f0ef989cbfd526f818225c587ed7ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b0d81b58f0ef989cbfd526f818225c587ed7ec/comments",
    "author": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22086cce4e1fff68a4fe86dad4633748e756bea6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22086cce4e1fff68a4fe86dad4633748e756bea6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22086cce4e1fff68a4fe86dad4633748e756bea6"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "3c22d251df555045f2e866de0410a8d2b88ca9e0",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0d81b58f0ef989cbfd526f818225c587ed7ec/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0d81b58f0ef989cbfd526f818225c587ed7ec/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=d4b0d81b58f0ef989cbfd526f818225c587ed7ec",
        "patch": "@@ -240,45 +240,45 @@ def run_test(self):\n         #                      tx2 (segwit input, paying to a non-segwit output) ->\n         #                      tx3 (non-segwit input, paying to a non-segwit output).\n         # tx1 is allowed to appear in the block, but no others.\n-        txid1 = send_to_witness(1, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n-        hex_tx = self.nodes[0].gettransaction(txid)['hex']\n-        tx = FromHex(CTransaction(), hex_tx)\n+        tx_hex = self.nodes[0].gettransaction(txid)['hex']\n+        tx = FromHex(CTransaction(), tx_hex)\n         assert(tx.wit.is_null()) # This should not be a segwit input\n-        assert(txid1 in self.nodes[0].getrawmempool())\n \n-        hex_tx = self.nodes[0].gettransaction(txid1)['hex']\n-        tx = FromHex(CTransaction(), hex_tx)\n+        txid1 = send_to_witness(1, self.nodes[0], find_unspent(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n+        assert(txid1 in self.nodes[0].getrawmempool())\n+        tx1_hex = self.nodes[0].gettransaction(txid1)['hex']\n+        tx1 = FromHex(CTransaction(), tx1_hex)\n \n         # Check that wtxid is properly reported in mempool entry (txid1)\n-        assert_equal(int(self.nodes[0].getmempoolentry(txid1)[\"wtxid\"], 16), tx.calc_sha256(True))\n+        assert_equal(int(self.nodes[0].getmempoolentry(txid1)[\"wtxid\"], 16), tx1.calc_sha256(True))\n \n         # Check that weight and sizei (actually vsize) are properly reported in mempool entry (txid1)\n         assert_equal(self.nodes[0].getmempoolentry(txid1)[\"size\"], (self.nodes[0].getmempoolentry(txid1)[\"weight\"] + 3) // 4)\n-        assert_equal(self.nodes[0].getmempoolentry(txid1)[\"weight\"], len(tx.serialize())*3 + len(tx.serialize_with_witness()))\n+        assert_equal(self.nodes[0].getmempoolentry(txid1)[\"weight\"], len(tx1.serialize())*3 + len(tx1.serialize_with_witness()))\n \n         # Now create tx2, which will spend from txid1.\n-        tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n-        tx.vout.append(CTxOut(int(49.99*COIN), CScript([OP_TRUE])))\n-        tx2_hex = self.nodes[0].signrawtransaction(ToHex(tx))['hex']\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n+        tx2.vout.append(CTxOut(int(49.99*COIN), CScript([OP_TRUE])))\n+        tx2_hex = self.nodes[0].signrawtransaction(ToHex(tx2))['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n-        tx = FromHex(CTransaction(), tx2_hex)\n-        assert(not tx.wit.is_null())\n+        tx2 = FromHex(CTransaction(), tx2_hex)\n+        assert(not tx2.wit.is_null())\n \n         # Check that wtxid is properly reported in mempool entry (txid2)\n-        assert_equal(int(self.nodes[0].getmempoolentry(txid2)[\"wtxid\"], 16), tx.calc_sha256(True))\n+        assert_equal(int(self.nodes[0].getmempoolentry(txid2)[\"wtxid\"], 16), tx2.calc_sha256(True))\n \n         # Check that weight and size (actually vsize) are properly reported in mempool entry (txid2)\n         assert_equal(self.nodes[0].getmempoolentry(txid2)[\"size\"], (self.nodes[0].getmempoolentry(txid2)[\"weight\"] + 3) // 4)\n-        assert_equal(self.nodes[0].getmempoolentry(txid2)[\"weight\"], len(tx.serialize())*3 + len(tx.serialize_with_witness()))\n+        assert_equal(self.nodes[0].getmempoolentry(txid2)[\"weight\"], len(tx2.serialize())*3 + len(tx2.serialize_with_witness()))\n \n         # Now create tx3, which will spend from txid2\n-        tx = CTransaction()\n-        tx.vin.append(CTxIn(COutPoint(int(txid2, 16), 0), b\"\"))\n-        tx.vout.append(CTxOut(int(49.95*COIN), CScript([OP_TRUE]))) # Huge fee\n-        tx.calc_sha256()\n-        txid3 = self.nodes[0].sendrawtransaction(ToHex(tx))\n-        assert(tx.wit.is_null())\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(int(txid2, 16), 0), b\"\"))\n+        tx3.vout.append(CTxOut(int(49.95*COIN), CScript([OP_TRUE]))) # Huge fee\n+        tx3.calc_sha256()\n+        txid3 = self.nodes[0].sendrawtransaction(ToHex(tx3))\n+        assert(tx3.wit.is_null())\n         assert(txid3 in self.nodes[0].getrawmempool())\n \n         # Now try calling getblocktemplate() without segwit support.\n@@ -297,11 +297,11 @@ def run_test(self):\n         assert(txid3 in template_txids)\n \n         # Check that wtxid is properly reported in mempool entry (txid3)\n-        assert_equal(int(self.nodes[0].getmempoolentry(txid3)[\"wtxid\"], 16), tx.calc_sha256(True))\n+        assert_equal(int(self.nodes[0].getmempoolentry(txid3)[\"wtxid\"], 16), tx3.calc_sha256(True))\n \n         # Check that weight and size (actually vsize) are properly reported in mempool entry (txid3)\n         assert_equal(self.nodes[0].getmempoolentry(txid3)[\"size\"], (self.nodes[0].getmempoolentry(txid3)[\"weight\"] + 3) // 4)\n-        assert_equal(self.nodes[0].getmempoolentry(txid3)[\"weight\"], len(tx.serialize())*3 + len(tx.serialize_with_witness()))\n+        assert_equal(self.nodes[0].getmempoolentry(txid3)[\"weight\"], len(tx3.serialize())*3 + len(tx3.serialize_with_witness()))\n \n         # Mine a block to clear the gbt cache again.\n         self.nodes[0].generate(1)"
      }
    ]
  }
]