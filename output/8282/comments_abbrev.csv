EthanHeilman,2016-06-28T20:26:18Z,This pull request implements the feeler functionality in #6355. \n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-229171996,229171996,
paveljanik,2016-06-30T12:28:13Z,tests need some love...\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-229643654,229643654,
EthanHeilman,2016-06-30T16:39:02Z,"@paveljanik I am currently working on fixes these days, however I am running into issues with the rpc-tests. When I run rpc-tests locally both with this pull request and against bitcoin/master I get intermittent failures. \n\nI run against bitcoin/master\n\n```\npython3 qa/pull-tester/rpc-tests.py\n```\n\ntests fail\n\n```\nTEST                           | PASSED | DURATION\nbip68-112-113-p2p.py  ",https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-229715503,229715503,
MarcoFalke,2016-06-30T16:46:14Z,"If you get a timeout, you may try to run the test directly `qa/rpc-tests/test.py` and see if it still fails. Also, you may want to check if there are any zombie bitcoin processes which you want to kill. And finally, the test_framework will no longer clean up after a failure, so you need to clean your temp dir manually in case it has limited space available.\n\nUsually none of this should be a prob",https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-229717533,229717533,
MarcoFalke,2016-06-30T16:53:02Z,You should assert that nodes in the existing tests are not marked a feel connection and thus get disconnected.\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-229719568,229719568,
sdaftuar,2016-06-30T16:55:01Z,"From my first glance at a failing travis test, it seems that perhaps `pnode->fFeeler` can be set to true on an incoming connection, causing an immediate disconnect?  That would result in intermittent test failures for sure.\n",https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-229720172,229720172,
EthanHeilman,2016-07-01T19:45:44Z,@sdaftuar  @MarcoFalke I'm working on a simple unittest to make sure that fFeelers is false by default and never happens when fIncoming = true. Should be pushed by EOD.\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-230032676,230032676,
EthanHeilman,2016-07-01T21:08:57Z,I added a simple test and an assert to ensure that that fFeelers are set false by default and don't get assigned to incoming connection.\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-230047759,230047759,
EthanHeilman,2016-08-03T14:36:51Z,"**Summary:** To test feeler connections I ran two nodes on EC2 for ~one month. One node ran this pull request, the second node ran default Bitcoin.  According to this test feeler connections (this pull request) increase the size of the tried table by about an order of magnitude and consequently increase the eclipse resistance of a node by an order of magnitude. I also measured the impact of a futu",https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-237255215,237255215,
sipa,2016-08-03T20:36:01Z,Thanks a lot for the thorough analysis! Concept ACK with a few nits. I'm surprised by how little code was needed.\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-237364633,237364633,
paveljanik,2016-08-03T20:41:13Z,How will feeler endpoints view us when we disconnect just after their `version` message?\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-237366223,237366223,
sipa,2016-08-03T20:42:29Z,@paveljanik Similar to oneshot connections that are used for DNS seeding over tor.\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-237366599,237366599,
paveljanik,2016-08-04T11:32:54Z,Concept ACK. Nice work and interesting reading!\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-237527745,237527745,
rebroad,2016-08-07T04:01:45Z,"One potential niggle with feeler connections is that they cause the node_id to go up rather quickly. I think for feeler connections it might be worthwhile not incrementing the node_id since the connection is so short-lived. Perhaps the feeler connections can have a node_id of zero, or something like this?\n",https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-238062134,238062134,
EthanHeilman,2016-08-15T13:32:41Z,"Bitcoin's code review process has consistently been the most thoughtful and thorough code review process I've encountered. I want to thank all the reviewers for spending their time to read my code and help improve Bitcoin.  My pull requests are better for it. \n\nI realize reviewers might want to take more time to read it over carefully, but in terms of allocating my time for this week is there an",https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-239802440,239802440,
MarcoFalke,2016-08-15T19:55:03Z,utACK 4b4517ce0340c813553f17d1e7710129542d58bd\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-239909985,239909985,
paveljanik,2016-08-15T20:10:40Z,@EthanHeilman Can you please rebase to the current master with https://github.com/bitcoin/bitcoin/pull/8128 in? See https://github.com/bitcoin/bitcoin/pull/8128#issuecomment-239522023 for more information...\n\nIf I do so manually locally:\n\n```\n/Applications/Xcode.app/Contents/Developer/usr/bin/make -C .. bitcoin_test\n  CXX      test/test_test_bitcoin-net_tests.o\ntest/net_tests.cpp:157:30: er,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-239914182,239914182,
sipa,2016-08-15T22:09:41Z,Testing this on bitcoin.sipa.be (together with #8223 #8453 #8452 #8393 #8515).\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-239944775,239944775,
MarcoFalke,2016-08-18T17:14:10Z,Can confirm that 4b4517ce0340c813553f17d1e7710129542d58bd improves the problems raised in #8470\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-240792007,240792007,
MarcoFalke,2016-08-18T17:28:20Z,I think we should move forward with this.\n\n@EthanHeilman Can you try to rebase this (there is a silent merge conflict) and fix any issues as they arise?\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-240795920,240795920,
EthanHeilman,2016-08-19T01:25:32Z,@MarcoFalke \nhttps://github.com/bitcoin/bitcoin/commit/4b4517ce0340c813553f17d1e7710129542d58bd was not designed to fix #8470 but it should have help for three reasons:\n1. By moving reachable addresses from the new table to the tried table it protects those reachable addresses from being evicted by unreachable addresses.\n2. By testing addresses in the new table via feeler connections and markin,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-240903736,240903736,
EthanHeilman,2016-08-19T01:28:59Z,I'm going to be away from my computer for a few days. I will fix the newly broken tests when I get back.\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-240904222,240904222,
laanwj,2016-08-25T08:47:57Z,code review ACK dbb1f64\n,https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-242319960,242319960,
sipa,2016-08-03T17:53:28Z,No need to call GetTime() again.\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73384975,73384975,src/net.cpp
sipa,2016-08-03T17:57:57Z,"Would it make sense to use PoissonNextSend here, resulting in maximally unpredictable times?\n\nEDIT: This comment was meant to appy to FEELER_INTERVAL instead.\n",https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73385847,73385847,src/net.cpp
sipa,2016-08-03T18:00:30Z,"GetTime() is relatively expensive; I think you can introduce an nTime = GetTime() above and then reuse that value 4 times. It probably doesn't matter, but gettimeofday calls appear so many times in traces already :)\n",https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73386342,73386342,src/net.cpp
paveljanik,2016-08-03T20:26:00Z,Can't this be simply changed to\n\n``` c++\nCAddrInfo addr = addrman.Select(fFeeler);\n```\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73413819,73413819,src/net.cpp
paveljanik,2016-08-03T20:27:59Z,syncronization -> synchronization\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73414196,73414196,src/net.cpp
paveljanik,2016-08-03T20:45:19Z,"space after `,` please.\n",https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73417272,73417272,src/net.cpp
paveljanik,2016-08-04T11:43:18Z,"New compile warning here:\n\n```\n+test/net_tests.cpp:154:31: warning: variable 'hSocket' is uninitialized when used here [-Wuninitialized]\n+    CNode* pnode1 = new CNode(hSocket, addr, pszDest, fInboundIn);\n+                              ^~~~~~~\n+test/net_tests.cpp:148:19: note: initialize the variable 'hSocket' to silence this warning\n+    SOCKET hSocket;\n+                  ^\n+            ",https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73507011,73507011,src/test/net_tests.cpp
EthanHeilman,2016-08-04T20:11:45Z,"Oh, I didn't know about PoissonNextSend, very cool. I moved FEELER_INTERVAL to use PoissonNextSend.\n",https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73593862,73593862,src/net.cpp
EthanHeilman,2016-08-04T20:23:43Z,I managed to get rid of one call to GetTime(). PoissonNextSend uses GetTimeMicros() so replacing additional GetTime() calls would require nNow_(1000_1000) which looks a little ugly. \n\nIn a local branch I have some non-ugly changes which can reduce the number of GetTime() and GetTimeMicros() calls in ThreadOpenConnections but it touches code which is out of scope for this pull request. Would it b,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73595634,73595634,src/net.cpp
sipa,2016-08-04T20:35:39Z,Is this still needed with interval randomization?\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73597677,73597677,src/net.cpp
EthanHeilman,2016-08-04T21:15:20Z,Yes. If we remove the random sleep synchronization becomes possible. \n\nConsider a network event which freezes ThreadOpenConnections for 120+ seconds. When that event unfreezes the thread all nodes will connect to an address in the new table all at once.\n\nThis anti-synchronization mechanism becomes more important when test-before-evict is added. Under test-before-evict a connection to a node ca,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73604140,73604140,src/net.cpp
rebroad,2016-08-06T16:08:23Z,This constant seems not to be used other than to effectively increase MAX_OUTBOUND_CONNECTIONS.\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73788134,73788134,src/net.cpp
MarcoFalke,2016-08-06T16:17:32Z,It is used indirectly in https://github.com/bitcoin/bitcoin/pull/8282/files/4b4517ce0340c813553f17d1e7710129542d58bd#diff-9a82240fe7dfe86564178691cc57f2f1R1672\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73788240,73788240,src/net.cpp
rebroad,2016-08-07T02:06:03Z,"I'm perhaps reading the code incorrectly, but it seems that it will only ever make one feeler connection at a time, regardless of the value of this constant. I.e., increasing this value does not cause it to make concurrent feeler connections.\n",https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73794616,73794616,src/net.cpp
rebroad,2016-08-07T04:13:25Z,Why is this in net.h rather than in net.cpp? net.cpp would cause less impact on compile times.\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73795490,73795490,src/net.h
rebroad,2016-08-07T04:20:57Z,"Why not make the feeler interval random also, so instead of 120 seconds fixed, it will occur anytime between 0 and 240 seconds? (thereby 120seconds on average).\n",https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73795535,73795535,src/net.cpp
EthanHeilman,2016-08-08T14:24:09Z,Randomizing the interval was suggested by @sipa and it is an excellent idea!  This pull request already does exactly what you describe using PoissonNextSend.\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73883722,73883722,src/net.cpp
EthanHeilman,2016-08-08T14:31:23Z,I put FEELER_INTERVAL in net.h since that is where all the other net.\* timing intervals static const variables are and because putting static const variables in *.h appears to be the convention in the Bitcoind networking code.\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73885208,73885208,src/net.h
EthanHeilman,2016-08-08T18:33:57Z,I reread the pull request and my understanding is still that MAX_FEELER_CONNECTIONS > 1 allows concurrent feeler connections. I have run tests in response to your comment which appear to show multiple concurrent feeler connections.\n\nWould you be willing to write out your thought process which led you to the conclusion above in case there is something I am missing?\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73928973,73928973,src/net.cpp
EthanHeilman,2016-08-08T18:34:45Z,This compile warning has been fixed.\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r73929131,73929131,src/test/net_tests.cpp
sipa,2016-08-15T21:10:01Z,Perhaps include a link to the Eclipse Attacks paper here? Always good to know that the design behind some code has extensive analysis backing it.\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r74835669,74835669,src/net.cpp
rebroad,2016-08-24T01:09:39Z,"This would be better after the LogPrint to display version message I think, as otherwise the debug.log shows the disconnect and then after, the version message received, which is potentially confusing.\n",https://github.com/bitcoin/bitcoin/pull/8282#discussion_r75980255,75980255,src/main.cpp
rebroad,2016-08-24T01:11:39Z,Why add this assert here?\n,https://github.com/bitcoin/bitcoin/pull/8282#discussion_r75980395,75980395,src/net.cpp
rebroad,2016-08-24T10:09:10Z,"@sipa @laanwj Given this current apparent convention causes a waste of CPU compiling code that doesn't need compiling, can we move some of the net.h code to net.cpp (or other applicable) places in a future pull request?\n",https://github.com/bitcoin/bitcoin/pull/8282#discussion_r76029766,76029766,src/net.h
