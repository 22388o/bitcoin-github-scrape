[
  {
    "sha": "dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmIxZjY0MGU2N2RhMjVmMGE0MWI5ZDJlNjk2Yjc4OWQyZmQ0ZTBk",
    "commit": {
      "author": {
        "name": "Ethan Heilman",
        "email": "Ethan.R.Heilman@gmail.com",
        "date": "2016-06-17T04:10:07Z"
      },
      "committer": {
        "name": "EthanHeilman",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2016-08-23T20:26:42Z"
      },
      "message": "Added feeler connections increasing good addrs in the tried table.\n\nTests if addresses are online or offline by briefly connecting to them. These short lived connections are referred to as feeler connections. Feeler connections are designed to increase the number of fresh online addresses in tried by selecting and connecting to addresses in new. One feeler connection is attempted on average once every two minutes.\n\nThis change was suggested as Countermeasure 4 in\nEclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network, Ethan Heilman,\nAlison Kendler, Aviv Zohar, Sharon Goldberg. ePrint Archive Report\n2015/263. March 2015.",
      "tree": {
        "sha": "1f2478a03fa0005d04411ee3c8b671263e319a2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f2478a03fa0005d04411ee3c8b671263e319a2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d/comments",
    "author": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8250de13587ed05ca45df3e12c5dc9bcb1500e2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8250de13587ed05ca45df3e12c5dc9bcb1500e2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8250de13587ed05ca45df3e12c5dc9bcb1500e2c"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 83,
      "deletions": 9
    },
    "files": [
      {
        "sha": "758a6dcce19249d1560b0e65d9a9e8bbdce1f467",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d",
        "patch": "@@ -4903,6 +4903,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     if (strCommand == NetMsgType::VERSION)\n     {\n+        // Feeler connections exist only to verify if address is online.\n+        if (pfrom->fFeeler) {\n+            assert(pfrom->fInbound == false);\n+            pfrom->fDisconnect = true;\n+        }\n+\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {"
      },
      {
        "sha": "33dc10cbcbe2aff36133ca1d84cfb2d7ac69fa35",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 8,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d",
        "patch": "@@ -43,6 +43,9 @@\n // Dump addresses to peers.dat and banlist.dat every 15 minutes (900s)\n #define DUMP_ADDRESSES_INTERVAL 900\n \n+// We add a random period time (0 to 1 seconds) to feeler connections to prevent synchronization.\n+#define FEELER_SLEEP_WINDOW 1\n+\n #if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0\n #endif\n@@ -61,6 +64,7 @@\n \n namespace {\n     const int MAX_OUTBOUND_CONNECTIONS = 8;\n+    const int MAX_FEELER_CONNECTIONS = 1;\n \n     struct ListenSocket {\n         SOCKET socket;\n@@ -1017,7 +1021,8 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n     SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n     CAddress addr;\n     int nInbound = 0;\n-    int nMaxInbound = nMaxConnections - MAX_OUTBOUND_CONNECTIONS;\n+    int nMaxInbound = nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS);\n+    assert(nMaxInbound > 0);\n \n     if (hSocket != INVALID_SOCKET)\n         if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n@@ -1613,6 +1618,9 @@ void ThreadOpenConnections()\n \n     // Initiate network connections\n     int64_t nStart = GetTime();\n+\n+    // Minimum time before next feeler connection (in microseconds).\n+    int64_t nNextFeeler = PoissonNextSend(nStart*1000*1000, FEELER_INTERVAL);\n     while (true)\n     {\n         ProcessOneShot();\n@@ -1652,13 +1660,36 @@ void ThreadOpenConnections()\n                 }\n             }\n         }\n+        assert(nOutbound <= (MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS));\n \n-        int64_t nANow = GetAdjustedTime();\n+        // Feeler Connections\n+        //\n+        // Design goals:\n+        //  * Increase the number of connectable addresses in the tried table.\n+        //\n+        // Method:\n+        //  * Choose a random address from new and attempt to connect to it if we can connect \n+        //    successfully it is added to tried.\n+        //  * Start attempting feeler connections only after node finishes making outbound \n+        //    connections.\n+        //  * Only make a feeler connection once every few minutes.\n+        //\n+        bool fFeeler = false;\n+        if (nOutbound >= MAX_OUTBOUND_CONNECTIONS) {\n+            int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n+            if (nTime > nNextFeeler) {\n+                nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n+                fFeeler = true;\n+            } else {\n+                continue;\n+            }\n+        }\n \n+        int64_t nANow = GetAdjustedTime();\n         int nTries = 0;\n         while (true)\n         {\n-            CAddrInfo addr = addrman.Select();\n+            CAddrInfo addr = addrman.Select(fFeeler);\n \n             // if we selected an invalid address, restart\n             if (!addr.IsValid() || setConnected.count(addr.GetGroup()) || IsLocal(addr))\n@@ -1694,8 +1725,17 @@ void ThreadOpenConnections()\n             break;\n         }\n \n-        if (addrConnect.IsValid())\n-            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant);\n+        if (addrConnect.IsValid()) {\n+\n+            if (fFeeler) {\n+                // Add small amount of random noise before connection to avoid synchronization.\n+                int randsleep = GetRandInt(FEELER_SLEEP_WINDOW * 1000);\n+                MilliSleep(randsleep);\n+                LogPrint(\"net\", \"Making feeler connection to %s\\n\", addrConnect.ToString());\n+            }\n+\n+            OpenNetworkConnection(addrConnect, (int)setConnected.size() >= std::min(nMaxConnections - 1, 2), &grant, NULL, false, fFeeler);\n+        }\n     }\n }\n \n@@ -1777,7 +1817,7 @@ void ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot)\n+bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler)\n {\n     //\n     // Initiate outbound network connection\n@@ -1801,6 +1841,8 @@ bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSem\n     pnode->fNetworkNode = true;\n     if (fOneShot)\n         pnode->fOneShot = true;\n+    if (fFeeler)\n+        pnode->fFeeler = true;\n \n     return true;\n }\n@@ -2062,7 +2104,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (semOutbound == NULL) {\n         // initialize semaphore\n-        int nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n+        int nMaxOutbound = std::min((MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS), nMaxConnections);\n         semOutbound = new CSemaphore(nMaxOutbound);\n     }\n \n@@ -2107,7 +2149,7 @@ bool StopNode()\n     LogPrintf(\"StopNode()\\n\");\n     MapPort(false);\n     if (semOutbound)\n-        for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n+        for (int i=0; i<(MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS); i++)\n             semOutbound->post();\n \n     if (fAddressesInitialized)\n@@ -2448,6 +2490,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     fWhitelisted = false;\n     fOneShot = false;\n     fClient = false; // set by version message\n+    fFeeler = false;\n     fInbound = fInboundIn;\n     fNetworkNode = false;\n     fSuccessfullyConnected = false;"
      },
      {
        "sha": "1ba2d47da7d8ca8b0bb01ed39322a63d77d4576b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d",
        "patch": "@@ -41,6 +41,8 @@ namespace boost {\n static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n static const int TIMEOUT_INTERVAL = 20 * 60;\n+/** Run the feeler connection loop once every 2 minutes or 120 seconds. **/\n+static const int FEELER_INTERVAL = 120;\n /** The maximum number of entries in an 'inv' protocol message */\n static const unsigned int MAX_INV_SZ = 50000;\n /** The maximum number of new addresses to accumulate before announcing. */\n@@ -89,7 +91,7 @@ CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n CNode* FindNode(const NodeId id); //TODO: Remove this\n-bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false);\n+bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n@@ -350,6 +352,7 @@ class CNode\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer, cleanSubVer;\n     bool fWhitelisted; // This peer can bypass DoS banning.\n+    bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n     bool fClient;\n     bool fInbound;"
      },
      {
        "sha": "267d1b55e13e8f92b00a919d41667b7949261b11",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=dbb1f640e67da25f0a41b9d2e696b789d2fd4e0d",
        "patch": "@@ -150,4 +150,26 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     BOOST_CHECK(addrman2.size() == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(cnode_simple_test)\n+{\n+    SOCKET hSocket = INVALID_SOCKET;\n+\n+    in_addr ipv4Addr;\n+    ipv4Addr.s_addr = 0xa0b0c001;\n+    \n+    CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n+    std::string pszDest = \"\";\n+    bool fInboundIn = false;\n+\n+    // Test that fFeeler is false by default.\n+    CNode* pnode1 = new CNode(hSocket, addr, pszDest, fInboundIn);\n+    BOOST_CHECK(pnode1->fInbound == false);\n+    BOOST_CHECK(pnode1->fFeeler == false);\n+\n+    fInboundIn = true;\n+    CNode* pnode2 = new CNode(hSocket, addr, pszDest, fInboundIn);\n+    BOOST_CHECK(pnode2->fInbound == true);\n+    BOOST_CHECK(pnode2->fFeeler == false);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]