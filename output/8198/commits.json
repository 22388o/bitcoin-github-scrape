[
  {
    "sha": "0e209f9bf940ec2f6215885cf30deaa7355086e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTIwOWY5YmY5NDBlYzJmNjIxNTg4NWNmMzBkZWFhNzM1NTA4NmU5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-06-13T11:33:02Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-06-13T11:51:32Z"
      },
      "message": "[trivial] Sync ax_pthread with upstream draft",
      "tree": {
        "sha": "818c49675481b7637b2b8ca7e9bf55ac92015c32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/818c49675481b7637b2b8ca7e9bf55ac92015c32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e209f9bf940ec2f6215885cf30deaa7355086e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJXXp5LAAoJEC7rn1zAlSbB/34P/3TQo+cbCzk5upE8TeMcTi+n\nnCh6WUnVDUGbBg/Wx3wRAUBEQoW8hXOE1AMULMHnwQetZWMgdBHrIauE1/vzL/Hn\n79Gj1CbHq03COzo/BXWwlOJbsm+4f9u/4W0C+WTCGS2PzC/bIvhQt4myNj9qcRWC\nF+QIqqLennt7Run5aJ9+4DnL8/dxiGDoKTht8Zq7h5233kEnOOUD+rnzGBh5fuo9\nZQSDZECPPDPCIQY0FHUCM3hTTwNGYEplpFu/+tnF9XxYM8wBubZ8N6vuSOGUBX6T\ngjRblXqbnbVEhgBqtZMHCsLGman95mLbnJEfvaG6J+/ZF2B4Lwmusin3cU8mmLnt\nf0Bq9gjaOPioXWyJIII30efW27iJz5K0wW00xevdn3iDotCpZtWmidckLF0Q7sxR\n8Nzp8hZJe3QedrSjl+qU9OWjQVB4D/+P/M3Ph1cnNPQ3oO2rQ1LjgsYxVKbuOOcm\njdD0phMG00ujfscSsXTefNsiViucfEJtfwH6B/HFcpmiVp7mUhh2+QXOwK3+jKXW\n8NUR0jJBFc6MrCL7g8OaLBr8bgSpcZhDfQollwx9Ae3x/S3mg1B8nlzDDtfYVeoy\nmFKLA3LaeKoZkKQVHNi/LUPN4uIW7atYHlgcNpOycvJGhkfNFOlXAPKuj2pw1n0G\nCMY3Gp1BQpNMIDpDgJhI\n=e4v0\n-----END PGP SIGNATURE-----",
        "payload": "tree 818c49675481b7637b2b8ca7e9bf55ac92015c32\nparent 44c1b1c9bb54082625c7ad76af25473abf79f866\nauthor fanquake <fanquake@gmail.com> 1465817582 +0800\ncommitter fanquake <fanquake@gmail.com> 1465818692 +0800\n\n[trivial] Sync ax_pthread with upstream draft\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e209f9bf940ec2f6215885cf30deaa7355086e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e209f9bf940ec2f6215885cf30deaa7355086e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e209f9bf940ec2f6215885cf30deaa7355086e9/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44c1b1c9bb54082625c7ad76af25473abf79f866",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44c1b1c9bb54082625c7ad76af25473abf79f866",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44c1b1c9bb54082625c7ad76af25473abf79f866"
      }
    ],
    "stats": {
      "total": 550,
      "additions": 275,
      "deletions": 275
    },
    "files": [
      {
        "sha": "4c4051ea376f720faf21a4705c66604fe444c958",
        "filename": "build-aux/m4/ax_pthread.m4",
        "status": "modified",
        "additions": 275,
        "deletions": 275,
        "changes": 550,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e209f9bf940ec2f6215885cf30deaa7355086e9/build-aux/m4/ax_pthread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e209f9bf940ec2f6215885cf30deaa7355086e9/build-aux/m4/ax_pthread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_pthread.m4?ref=0e209f9bf940ec2f6215885cf30deaa7355086e9",
        "patch": "@@ -82,7 +82,7 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 22\n+#serial 23\n \n AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])\n AC_DEFUN([AX_PTHREAD], [\n@@ -100,22 +100,22 @@ ax_pthread_ok=no\n # etcetera environment variables, and if threads linking works using\n # them:\n if test \"x$PTHREAD_CFLAGS$PTHREAD_LIBS\" != \"x\"; then\n-\tax_pthread_save_CC=\"$CC\"\n-\tax_pthread_save_CFLAGS=\"$CFLAGS\"\n-\tax_pthread_save_LIBS=\"$LIBS\"\n-\tAS_IF([test \"x$PTHREAD_CC\" != \"x\"], [CC=\"$PTHREAD_CC\"])\n-\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-\tLIBS=\"$PTHREAD_LIBS $LIBS\"\n-\tAC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])\n-\tAC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])\n-\tAC_MSG_RESULT([$ax_pthread_ok])\n-\tif test \"x$ax_pthread_ok\" = \"xno\"; then\n-\t\tPTHREAD_LIBS=\"\"\n-\t\tPTHREAD_CFLAGS=\"\"\n-\tfi\n-\tCC=\"$ax_pthread_save_CC\"\n-\tCFLAGS=\"$ax_pthread_save_CFLAGS\"\n-\tLIBS=\"$ax_pthread_save_LIBS\"\n+        ax_pthread_save_CC=\"$CC\"\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        AS_IF([test \"x$PTHREAD_CC\" != \"x\"], [CC=\"$PTHREAD_CC\"])\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+        AC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])\n+        AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])\n+        AC_MSG_RESULT([$ax_pthread_ok])\n+        if test \"x$ax_pthread_ok\" = \"xno\"; then\n+                PTHREAD_LIBS=\"\"\n+                PTHREAD_CFLAGS=\"\"\n+        fi\n+        CC=\"$ax_pthread_save_CC\"\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n fi\n \n # We must check for the threads library under a number of different\n@@ -152,50 +152,50 @@ ax_pthread_flags=\"pthreads none -Kthread -pthread -pthreads -mthreads pthread --\n \n case $host_os in\n \n-\tfreebsd*)\n+        freebsd*)\n \n-\t# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n-\t# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n+        # -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n+        # lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n \n-\tax_pthread_flags=\"-kthread lthread $ax_pthread_flags\"\n-\t;;\n+        ax_pthread_flags=\"-kthread lthread $ax_pthread_flags\"\n+        ;;\n \n-\thpux*)\n+        hpux*)\n \n-\t# From the cc(1) man page: \"[-mt] Sets various -D flags to enable\n-\t# multi-threading and also sets -lpthread.\"\n+        # From the cc(1) man page: \"[-mt] Sets various -D flags to enable\n+        # multi-threading and also sets -lpthread.\"\n \n-\tax_pthread_flags=\"-mt -pthread pthread $ax_pthread_flags\"\n-\t;;\n+        ax_pthread_flags=\"-mt -pthread pthread $ax_pthread_flags\"\n+        ;;\n \n-\topenedition*)\n+        openedition*)\n \n-\t# IBM z/OS requires a feature-test macro to be defined in order to\n-\t# enable POSIX threads at all, so give the user a hint if this is\n-\t# not set. (We don't define these ourselves, as they can affect\n-\t# other portions of the system API in unpredictable ways.)\n+        # IBM z/OS requires a feature-test macro to be defined in order to\n+        # enable POSIX threads at all, so give the user a hint if this is\n+        # not set. (We don't define these ourselves, as they can affect\n+        # other portions of the system API in unpredictable ways.)\n \n-\tAC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],\n-\t    [\n-#\t     if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)\n-\t     AX_PTHREAD_ZOS_MISSING\n-#\t     endif\n-\t    ],\n-\t    [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])\n-\t;;\n+        AC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],\n+            [\n+#            if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)\n+             AX_PTHREAD_ZOS_MISSING\n+#            endif\n+            ],\n+            [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])\n+        ;;\n \n-\tsolaris*)\n+        solaris*)\n \n-\t# On Solaris (at least, for some versions), libc contains stubbed\n-\t# (non-functional) versions of the pthreads routines, so link-based\n-\t# tests will erroneously succeed. (N.B.: The stubs are missing\n-\t# pthread_cleanup_push, or rather a function called by this macro,\n-\t# so we could check for that, but who knows whether they'll stub\n-\t# that too in a future libc.)  So we'll check first for the\n-\t# standard Solaris way of linking pthreads (-mt -lpthread).\n+        # On Solaris (at least, for some versions), libc contains stubbed\n+        # (non-functional) versions of the pthreads routines, so link-based\n+        # tests will erroneously succeed. (N.B.: The stubs are missing\n+        # pthread_cleanup_push, or rather a function called by this macro,\n+        # so we could check for that, but who knows whether they'll stub\n+        # that too in a future libc.)  So we'll check first for the\n+        # standard Solaris way of linking pthreads (-mt -lpthread).\n \n-\tax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n-\t;;\n+        ax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n+        ;;\n esac\n \n # GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)\n@@ -208,17 +208,17 @@ AS_IF([test \"x$GCC\" = \"xyes\"],\n # correctly enabled\n \n case $host_os in\n-\tdarwin* | hpux* | linux* | osf* | solaris*)\n-\tax_pthread_check_macro=\"_REENTRANT\"\n-\t;;\n+        darwin* | hpux* | linux* | osf* | solaris*)\n+        ax_pthread_check_macro=\"_REENTRANT\"\n+        ;;\n \n-\taix* | freebsd*)\n-\tax_pthread_check_macro=\"_THREAD_SAFE\"\n-\t;;\n+        aix*)\n+        ax_pthread_check_macro=\"_THREAD_SAFE\"\n+        ;;\n \n-\t*)\n-\tax_pthread_check_macro=\"--\"\n-\t;;\n+        *)\n+        ax_pthread_check_macro=\"--\"\n+        ;;\n esac\n AS_IF([test \"x$ax_pthread_check_macro\" = \"x--\"],\n       [ax_pthread_check_cond=0],\n@@ -231,13 +231,13 @@ AC_CACHE_CHECK([whether $CC is Clang],\n     [ax_cv_PTHREAD_CLANG=no\n      # Note that Autoconf sets GCC=yes for Clang as well as GCC\n      if test \"x$GCC\" = \"xyes\"; then\n-\tAC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n-\t    [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n-#\t     if defined(__clang__) && defined(__llvm__)\n-\t     AX_PTHREAD_CC_IS_CLANG\n-#\t     endif\n-\t    ],\n-\t    [ax_cv_PTHREAD_CLANG=yes])\n+        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n+            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n+#            if defined(__clang__) && defined(__llvm__)\n+             AX_PTHREAD_CC_IS_CLANG\n+#            endif\n+            ],\n+            [ax_cv_PTHREAD_CLANG=yes])\n      fi\n     ])\n ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n@@ -249,222 +249,222 @@ ax_pthread_clang_warning=no\n \n if test \"x$ax_pthread_clang\" = \"xyes\"; then\n \n-\t# Clang takes -pthread; it has never supported any other flag\n-\n-\t# (Note 1: This will need to be revisited if a system that Clang\n-\t# supports has POSIX threads in a separate library.  This tends not\n-\t# to be the way of modern systems, but it's conceivable.)\n-\n-\t# (Note 2: On some systems, notably Darwin, -pthread is not needed\n-\t# to get POSIX threads support; the API is always present and\n-\t# active.  We could reasonably leave PTHREAD_CFLAGS empty.  But\n-\t# -pthread does define _REENTRANT, and while the Darwin headers\n-\t# ignore this macro, third-party headers might not.)\n-\n-\tPTHREAD_CFLAGS=\"-pthread\"\n-\tPTHREAD_LIBS=\n-\n-\tax_pthread_ok=yes\n-\n-\t# However, older versions of Clang make a point of warning the user\n-\t# that, in an invocation where only linking and no compilation is\n-\t# taking place, the -pthread option has no effect (\"argument unused\n-\t# during compilation\").  They expect -pthread to be passed in only\n-\t# when source code is being compiled.\n-\t#\n-\t# Problem is, this is at odds with the way Automake and most other\n-\t# C build frameworks function, which is that the same flags used in\n-\t# compilation (CFLAGS) are also used in linking.  Many systems\n-\t# supported by AX_PTHREAD require exactly this for POSIX threads\n-\t# support, and in fact it is often not straightforward to specify a\n-\t# flag that is used only in the compilation phase and not in\n-\t# linking.  Such a scenario is extremely rare in practice.\n-\t#\n-\t# Even though use of the -pthread flag in linking would only print\n-\t# a warning, this can be a nuisance for well-run software projects\n-\t# that build with -Werror.  So if the active version of Clang has\n-\t# this misfeature, we search for an option to squash it.\n-\n-\tAC_CACHE_CHECK([whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread],\n-\t    [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],\n-\t    [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown\n-\t     # Create an alternate version of $ac_link that compiles and\n-\t     # links in two steps (.c -> .o, .o -> exe) instead of one\n-\t     # (.c -> exe), because the warning occurs only in the second\n-\t     # step\n-\t     ax_pthread_save_ac_link=\"$ac_link\"\n-\t     ax_pthread_sed='s/conftest\\.\\$ac_ext/conftest.$ac_objext/g'\n-\t     ax_pthread_link_step=`$as_echo \"$ac_link\" | sed \"$ax_pthread_sed\"`\n-\t     ax_pthread_2step_ac_link=\"($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)\"\n-\t     ax_pthread_save_CFLAGS=\"$CFLAGS\"\n-\t     for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do\n-\t\tAS_IF([test \"x$ax_pthread_try\" = \"xunknown\"], [break])\n-\t\tCFLAGS=\"-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS\"\n-\t\tac_link=\"$ax_pthread_save_ac_link\"\n-\t\tAC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n-\t\t    [ac_link=\"$ax_pthread_2step_ac_link\"\n-\t\t     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n-\t\t\t [break])\n-\t\t    ])\n-\t     done\n-\t     ac_link=\"$ax_pthread_save_ac_link\"\n-\t     CFLAGS=\"$ax_pthread_save_CFLAGS\"\n-\t     AS_IF([test \"x$ax_pthread_try\" = \"x\"], [ax_pthread_try=no])\n-\t     ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=\"$ax_pthread_try\"\n-\t    ])\n-\n-\tcase \"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG\" in\n-\t\tno | unknown) ;;\n-\t\t*) PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS\" ;;\n-\tesac\n+        # Clang takes -pthread; it has never supported any other flag\n+\n+        # (Note 1: This will need to be revisited if a system that Clang\n+        # supports has POSIX threads in a separate library.  This tends not\n+        # to be the way of modern systems, but it's conceivable.)\n+\n+        # (Note 2: On some systems, notably Darwin, -pthread is not needed\n+        # to get POSIX threads support; the API is always present and\n+        # active.  We could reasonably leave PTHREAD_CFLAGS empty.  But\n+        # -pthread does define _REENTRANT, and while the Darwin headers\n+        # ignore this macro, third-party headers might not.)\n+\n+        PTHREAD_CFLAGS=\"-pthread\"\n+        PTHREAD_LIBS=\n+\n+        ax_pthread_ok=yes\n+\n+        # However, older versions of Clang make a point of warning the user\n+        # that, in an invocation where only linking and no compilation is\n+        # taking place, the -pthread option has no effect (\"argument unused\n+        # during compilation\").  They expect -pthread to be passed in only\n+        # when source code is being compiled.\n+        #\n+        # Problem is, this is at odds with the way Automake and most other\n+        # C build frameworks function, which is that the same flags used in\n+        # compilation (CFLAGS) are also used in linking.  Many systems\n+        # supported by AX_PTHREAD require exactly this for POSIX threads\n+        # support, and in fact it is often not straightforward to specify a\n+        # flag that is used only in the compilation phase and not in\n+        # linking.  Such a scenario is extremely rare in practice.\n+        #\n+        # Even though use of the -pthread flag in linking would only print\n+        # a warning, this can be a nuisance for well-run software projects\n+        # that build with -Werror.  So if the active version of Clang has\n+        # this misfeature, we search for an option to squash it.\n+\n+        AC_CACHE_CHECK([whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown\n+             # Create an alternate version of $ac_link that compiles and\n+             # links in two steps (.c -> .o, .o -> exe) instead of one\n+             # (.c -> exe), because the warning occurs only in the second\n+             # step\n+             ax_pthread_save_ac_link=\"$ac_link\"\n+             ax_pthread_sed='s/conftest\\.\\$ac_ext/conftest.$ac_objext/g'\n+             ax_pthread_link_step=`$as_echo \"$ac_link\" | sed \"$ax_pthread_sed\"`\n+             ax_pthread_2step_ac_link=\"($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)\"\n+             ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+             for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do\n+                AS_IF([test \"x$ax_pthread_try\" = \"xunknown\"], [break])\n+                CFLAGS=\"-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS\"\n+                ac_link=\"$ax_pthread_save_ac_link\"\n+                AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                    [ac_link=\"$ax_pthread_2step_ac_link\"\n+                     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                         [break])\n+                    ])\n+             done\n+             ac_link=\"$ax_pthread_save_ac_link\"\n+             CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+             AS_IF([test \"x$ax_pthread_try\" = \"x\"], [ax_pthread_try=no])\n+             ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=\"$ax_pthread_try\"\n+            ])\n+\n+        case \"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG\" in\n+                no | unknown) ;;\n+                *) PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS\" ;;\n+        esac\n \n fi # $ax_pthread_clang = yes\n \n if test \"x$ax_pthread_ok\" = \"xno\"; then\n for ax_pthread_try_flag in $ax_pthread_flags; do\n \n-\tcase $ax_pthread_try_flag in\n-\t\tnone)\n-\t\tAC_MSG_CHECKING([whether pthreads work without any flags])\n-\t\t;;\n-\n-\t\t-mt,pthread)\n-\t\tAC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n-\t\tPTHREAD_CFLAGS=\"-mt\"\n-\t\tPTHREAD_LIBS=\"-lpthread\"\n-\t\t;;\n-\n-\t\t-*)\n-\t\tAC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n-\t\tPTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n-\t\t;;\n-\n-\t\tpthread-config)\n-\t\tAC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n-\t\tAS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n-\t\tPTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n-\t\tPTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n-\t\t;;\n-\n-\t\t*)\n-\t\tAC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n-\t\tPTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n-\t\t;;\n-\tesac\n-\n-\tax_pthread_save_CFLAGS=\"$CFLAGS\"\n-\tax_pthread_save_LIBS=\"$LIBS\"\n-\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-\tLIBS=\"$PTHREAD_LIBS $LIBS\"\n-\n-\t# Check for various functions.  We must include pthread.h,\n-\t# since some functions may be macros.  (On the Sequent, we\n-\t# need a special flag -Kthread to make this header compile.)\n-\t# We check for pthread_join because it is in -lpthread on IRIX\n-\t# while pthread_create is in libc.  We check for pthread_attr_init\n-\t# due to DEC craziness with -lpthreads.  We check for\n-\t# pthread_cleanup_push because it is one of the few pthread\n-\t# functions on Solaris that doesn't have a non-functional libc stub.\n-\t# We try pthread_create on general principles.\n-\n-\tAC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n-#\t\t\tif $ax_pthread_check_cond\n-#\t\t\t error \"$ax_pthread_check_macro must be defined\"\n-#\t\t\tendif\n-\t\t\tstatic void routine(void *a) { a = 0; }\n-\t\t\tstatic void *start_routine(void *a) { return a; }],\n-\t\t       [pthread_t th; pthread_attr_t attr;\n-\t\t\tpthread_create(&th, 0, start_routine, 0);\n-\t\t\tpthread_join(th, 0);\n-\t\t\tpthread_attr_init(&attr);\n-\t\t\tpthread_cleanup_push(routine, 0);\n-\t\t\tpthread_cleanup_pop(0) /* ; */])],\n-\t    [ax_pthread_ok=yes],\n-\t    [])\n-\n-\tCFLAGS=\"$ax_pthread_save_CFLAGS\"\n-\tLIBS=\"$ax_pthread_save_LIBS\"\n-\n-\tAC_MSG_RESULT([$ax_pthread_ok])\n-\tAS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n-\n-\tPTHREAD_LIBS=\"\"\n-\tPTHREAD_CFLAGS=\"\"\n+        case $ax_pthread_try_flag in\n+                none)\n+                AC_MSG_CHECKING([whether pthreads work without any flags])\n+                ;;\n+\n+                -mt,pthread)\n+                AC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n+                PTHREAD_CFLAGS=\"-mt\"\n+                PTHREAD_LIBS=\"-lpthread\"\n+                ;;\n+\n+                -*)\n+                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n+                PTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n+                ;;\n+\n+                pthread-config)\n+                AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n+                AS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n+                PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n+                PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n+                ;;\n+\n+                *)\n+                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n+                PTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n+                ;;\n+        esac\n+\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+        # Check for various functions.  We must include pthread.h,\n+        # since some functions may be macros.  (On the Sequent, we\n+        # need a special flag -Kthread to make this header compile.)\n+        # We check for pthread_join because it is in -lpthread on IRIX\n+        # while pthread_create is in libc.  We check for pthread_attr_init\n+        # due to DEC craziness with -lpthreads.  We check for\n+        # pthread_cleanup_push because it is one of the few pthread\n+        # functions on Solaris that doesn't have a non-functional libc stub.\n+        # We try pthread_create on general principles.\n+\n+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n+#                       if $ax_pthread_check_cond\n+#                        error \"$ax_pthread_check_macro must be defined\"\n+#                       endif\n+                        static void routine(void *a) { a = 0; }\n+                        static void *start_routine(void *a) { return a; }],\n+                       [pthread_t th; pthread_attr_t attr;\n+                        pthread_create(&th, 0, start_routine, 0);\n+                        pthread_join(th, 0);\n+                        pthread_attr_init(&attr);\n+                        pthread_cleanup_push(routine, 0);\n+                        pthread_cleanup_pop(0) /* ; */])],\n+            [ax_pthread_ok=yes],\n+            [])\n+\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n+\n+        AC_MSG_RESULT([$ax_pthread_ok])\n+        AS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n+\n+        PTHREAD_LIBS=\"\"\n+        PTHREAD_CFLAGS=\"\"\n done\n fi\n \n # Various other checks:\n if test \"x$ax_pthread_ok\" = \"xyes\"; then\n-\tax_pthread_save_CFLAGS=\"$CFLAGS\"\n-\tax_pthread_save_LIBS=\"$LIBS\"\n-\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-\tLIBS=\"$PTHREAD_LIBS $LIBS\"\n-\n-\t# Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n-\tAC_CACHE_CHECK([for joinable pthread attribute],\n-\t    [ax_cv_PTHREAD_JOINABLE_ATTR],\n-\t    [ax_cv_PTHREAD_JOINABLE_ATTR=unknown\n-\t     for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n-\t\t AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n-\t\t\t\t\t\t [int attr = $ax_pthread_attr; return attr /* ; */])],\n-\t\t\t\t[ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],\n-\t\t\t\t[])\n-\t     done\n-\t    ])\n-\tAS_IF([test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xunknown\" && \\\n-\t       test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xPTHREAD_CREATE_JOINABLE\" && \\\n-\t       test \"x$ax_pthread_joinable_attr_defined\" != \"xyes\"],\n-\t      [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],\n-\t\t\t\t  [$ax_cv_PTHREAD_JOINABLE_ATTR],\n-\t\t\t\t  [Define to necessary symbol if this constant\n-\t\t\t\t   uses a non-standard name on your system.])\n-\t       ax_pthread_joinable_attr_defined=yes\n-\t      ])\n-\n-\tAC_CACHE_CHECK([whether more special flags are required for pthreads],\n-\t    [ax_cv_PTHREAD_SPECIAL_FLAGS],\n-\t    [ax_cv_PTHREAD_SPECIAL_FLAGS=no\n-\t     case $host_os in\n-\t     solaris*)\n-\t     ax_cv_PTHREAD_SPECIAL_FLAGS=\"-D_POSIX_PTHREAD_SEMANTICS\"\n-\t     ;;\n-\t     esac\n-\t    ])\n-\tAS_IF([test \"x$ax_cv_PTHREAD_SPECIAL_FLAGS\" != \"xno\" && \\\n-\t       test \"x$ax_pthread_special_flags_added\" != \"xyes\"],\n-\t      [PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS\"\n-\t       ax_pthread_special_flags_added=yes])\n-\n-\tAC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n-\t    [ax_cv_PTHREAD_PRIO_INHERIT],\n-\t    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n-\t\t\t\t\t     [[int i = PTHREAD_PRIO_INHERIT;]])],\n-\t\t\t    [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n-\t\t\t    [ax_cv_PTHREAD_PRIO_INHERIT=no])\n-\t    ])\n-\tAS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\" && \\\n-\t       test \"x$ax_pthread_prio_inherit_defined\" != \"xyes\"],\n-\t      [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])\n-\t       ax_pthread_prio_inherit_defined=yes\n-\t      ])\n-\n-\tCFLAGS=\"$ax_pthread_save_CFLAGS\"\n-\tLIBS=\"$ax_pthread_save_LIBS\"\n-\n-\t# More AIX lossage: compile with *_r variant\n-\tif test \"x$GCC\" != \"xyes\"; then\n-\t    case $host_os in\n-\t\taix*)\n-\t\tAS_CASE([\"x/$CC\"],\n-\t\t    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n-\t\t    [#handle absolute path differently from PATH based program lookup\n-\t\t     AS_CASE([\"x$CC\"],\n-\t\t\t [x/*],\n-\t\t\t [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n-\t\t\t [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n-\t\t;;\n-\t    esac\n-\tfi\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n+        AC_CACHE_CHECK([for joinable pthread attribute],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR=unknown\n+             for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n+                 AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n+                                                 [int attr = $ax_pthread_attr; return attr /* ; */])],\n+                                [ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],\n+                                [])\n+             done\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xunknown\" && \\\n+               test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xPTHREAD_CREATE_JOINABLE\" && \\\n+               test \"x$ax_pthread_joinable_attr_defined\" != \"xyes\"],\n+              [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],\n+                                  [$ax_cv_PTHREAD_JOINABLE_ATTR],\n+                                  [Define to necessary symbol if this constant\n+                                   uses a non-standard name on your system.])\n+               ax_pthread_joinable_attr_defined=yes\n+              ])\n+\n+        AC_CACHE_CHECK([whether more special flags are required for pthreads],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS=no\n+             case $host_os in\n+             solaris*)\n+             ax_cv_PTHREAD_SPECIAL_FLAGS=\"-D_POSIX_PTHREAD_SEMANTICS\"\n+             ;;\n+             esac\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_SPECIAL_FLAGS\" != \"xno\" && \\\n+               test \"x$ax_pthread_special_flags_added\" != \"xyes\"],\n+              [PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS\"\n+               ax_pthread_special_flags_added=yes])\n+\n+        AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n+            [ax_cv_PTHREAD_PRIO_INHERIT],\n+            [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n+                                             [[int i = PTHREAD_PRIO_INHERIT;]])],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=no])\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\" && \\\n+               test \"x$ax_pthread_prio_inherit_defined\" != \"xyes\"],\n+              [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])\n+               ax_pthread_prio_inherit_defined=yes\n+              ])\n+\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n+\n+        # More AIX lossage: compile with *_r variant\n+        if test \"x$GCC\" != \"xyes\"; then\n+            case $host_os in\n+                aix*)\n+                AS_CASE([\"x/$CC\"],\n+                    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n+                    [#handle absolute path differently from PATH based program lookup\n+                     AS_CASE([\"x$CC\"],\n+                         [x/*],\n+                         [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n+                         [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n+                ;;\n+            esac\n+        fi\n fi\n \n test -n \"$PTHREAD_CC\" || PTHREAD_CC=\"$CC\"\n@@ -475,11 +475,11 @@ AC_SUBST([PTHREAD_CC])\n \n # Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:\n if test \"x$ax_pthread_ok\" = \"xyes\"; then\n-\tifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])\n-\t:\n+        ifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])\n+        :\n else\n-\tax_pthread_ok=no\n-\t$2\n+        ax_pthread_ok=no\n+        $2\n fi\n AC_LANG_POP\n ])dnl AX_PTHREAD"
      }
    ]
  }
]