[
  {
    "sha": "fa65a11d0c9a34ff7f4cc4efd53367794e751749",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTY1YTExZDBjOWEzNGZmN2Y0Y2M0ZWZkNTMzNjc3OTRlNzUxNzQ5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-09T08:07:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-09T08:38:50Z"
      },
      "message": "test: bugfix: Actually pick largest utxo",
      "tree": {
        "sha": "065d1557e3136073dad7788461bf43984c20ddf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/065d1557e3136073dad7788461bf43984c20ddf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa65a11d0c9a34ff7f4cc4efd53367794e751749",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhu9gv/ekJSkxZMI7n0Zx4tFdFadKnRC3V+RY7bHYo5BwQS26HCrKPkRKhIWefG\nDmHeS0yTy5ThXVHtIFCWEka9t4AeseASkXZXbhmkgzPnIU+c7RBFSzId9V5tR4g1\nmLWx5WpLup/vtnL7irLcLC9oFM6gS4JmXVMLFxX3p2W596AMxuLA5LTIw5scJmsv\nzOiM/fGzIXbdN+v+zQFzTSkBlUkH0g/6afe86MRbYgYYdU7ZOwUdpc2sbWs0KvIA\n5CQoHOtd+uSNblqMxb4+fSdNnxdc74g1j2hNFzK/NVeX3SaF9NgojNJv6ovp1rmt\n2Ny5pGlLqyHyYBAeXbNSQRU/dgPtjfHv1RwBsGVpLAkjkPeZpnxlQacs7Ho5VE1g\n8WFcUBCtKR++5aU+qp3/oY8GJ+H2PyIoBI/+5XnblLmXCmtyv3dCu6otUW4YZO1T\n/m/+H/pR1EjIcQXpQPHl1PVDyWLBcyH2Y6ADprmJIfbY/Xg3kKTEWNLlFOxLRkZM\njzOgCJVK\n=j1I9\n-----END PGP SIGNATURE-----",
        "payload": "tree 065d1557e3136073dad7788461bf43984c20ddf5\nparent 564e1ab0f3dc573bd3ea60a80f6649c361243df9\nauthor MarcoFalke <falke.marco@gmail.com> 1599638825 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1599640730 +0200\n\ntest: bugfix: Actually pick largest utxo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa65a11d0c9a34ff7f4cc4efd53367794e751749",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa65a11d0c9a34ff7f4cc4efd53367794e751749",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa65a11d0c9a34ff7f4cc4efd53367794e751749/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "564e1ab0f3dc573bd3ea60a80f6649c361243df9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/564e1ab0f3dc573bd3ea60a80f6649c361243df9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/564e1ab0f3dc573bd3ea60a80f6649c361243df9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "56ff69dc149223df76a4eac37bf68fbe26d1bf38",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa65a11d0c9a34ff7f4cc4efd53367794e751749/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa65a11d0c9a34ff7f4cc4efd53367794e751749/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=fa65a11d0c9a34ff7f4cc4efd53367794e751749",
        "patch": "@@ -42,12 +42,12 @@ def generate(self, num_blocks):\n \n     def send_self_transfer(self, *, fee_rate, from_node):\n         \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n-        self._utxos = sorted(self._utxos, key=lambda k: -k['value'])\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n         largest_utxo = self._utxos.pop()  # Pick the largest utxo and hope it covers the fee\n         vsize = Decimal(96)\n         send_value = satoshi_round(largest_utxo['value'] - fee_rate * (vsize / 1000))\n         fee = largest_utxo['value'] - send_value\n-        assert (send_value > 0)\n+        assert send_value > 0\n \n         tx = CTransaction()\n         tx.vin = [CTxIn(COutPoint(int(largest_utxo['txid'], 16), largest_utxo['vout']))]"
      }
    ]
  },
  {
    "sha": "faba790bd40b5a9e8849997785020790ff60571b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWJhNzkwYmQ0MGI1YTllODg0OTk5Nzc4NTAyMDc5MGZmNjA1NzFi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-09T08:37:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-09T08:39:05Z"
      },
      "message": "test: MiniWallet: Default fee_rate in send_self_transfer, Pass in utxo_to_spend\n\nAdds two new features to MiniWallet:\n\n* The fee rate is irrelevant sometimes, so just set an arbitrary default\n* The utxo to spend needs to be selected manually sometimes",
      "tree": {
        "sha": "7905254a1196467e41a10d91e894a5551acd09c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7905254a1196467e41a10d91e894a5551acd09c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faba790bd40b5a9e8849997785020790ff60571b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg7Nwv+O4UhjEm/dleMgYHoUCN/r2/GxBod9afbA6ImqUUfpln5D9FKLTqqhZXb\nmFhyC8kE2+QAMZTiiOm4oKCl+EvDzNS9FpfAZ5jPs8V2dJOD8q/LVtgcxm6tjp8u\naSONrVyxfxq9hqj9D+mRWDpdMWSCXhqgJ5OYp2w0udqLMmCQL7LabFp5CKZOuMl2\njBu1GYR55dTaI+KTtHvMXtIG09nqfz8/IcHiJc7X63TxZhbYcRueM7DT79G+Qhe/\nF1bOGF2rbc4esEAnnWioX7Y4bNJlFHuVOjZAGup6a3IA5gO5mf4vHAPvwQkJ0EnK\nRgX6haZ4CJdYeXiTz97/PzxHH9WVdEfSklI6mwE3ryJUVXr3TB+njPhnX0DVQqZ1\nLVCBku4PYf2hs4/h4L6eF5OZbSz2/aGDlVRC9ePdraeUo/NOB5dlbxESvDJzu1pC\n0NUfq0G9L39ddCpvqxq3pdeSXv+gfDLLlP/o2tDSyOdfVfTs+flCqbaIb41Y8IpD\n36Znkhse\n=bF0t\n-----END PGP SIGNATURE-----",
        "payload": "tree 7905254a1196467e41a10d91e894a5551acd09c8\nparent fa65a11d0c9a34ff7f4cc4efd53367794e751749\nauthor MarcoFalke <falke.marco@gmail.com> 1599640659 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1599640745 +0200\n\ntest: MiniWallet: Default fee_rate in send_self_transfer, Pass in utxo_to_spend\n\nAdds two new features to MiniWallet:\n\n* The fee rate is irrelevant sometimes, so just set an arbitrary default\n* The utxo to spend needs to be selected manually sometimes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faba790bd40b5a9e8849997785020790ff60571b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faba790bd40b5a9e8849997785020790ff60571b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faba790bd40b5a9e8849997785020790ff60571b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa65a11d0c9a34ff7f4cc4efd53367794e751749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa65a11d0c9a34ff7f4cc4efd53367794e751749",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa65a11d0c9a34ff7f4cc4efd53367794e751749"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ae6aa6bdca50e9a904cdbce65464481bed1a81b0",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faba790bd40b5a9e8849997785020790ff60571b/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faba790bd40b5a9e8849997785020790ff60571b/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=faba790bd40b5a9e8849997785020790ff60571b",
        "patch": "@@ -40,17 +40,17 @@ def generate(self, num_blocks):\n             self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']})\n         return blocks\n \n-    def send_self_transfer(self, *, fee_rate, from_node):\n+    def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None):\n         \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n         self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n-        largest_utxo = self._utxos.pop()  # Pick the largest utxo and hope it covers the fee\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n         vsize = Decimal(96)\n-        send_value = satoshi_round(largest_utxo['value'] - fee_rate * (vsize / 1000))\n-        fee = largest_utxo['value'] - send_value\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate * (vsize / 1000))\n+        fee = utxo_to_spend['value'] - send_value\n         assert send_value > 0\n \n         tx = CTransaction()\n-        tx.vin = [CTxIn(COutPoint(int(largest_utxo['txid'], 16), largest_utxo['vout']))]\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n         tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n         tx.wit.vtxinwit = [CTxInWitness()]\n         tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]"
      }
    ]
  },
  {
    "sha": "fa56e866e8ac08b35e775a4e37a4e5849e093c7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU2ZTg2NmU4YWMwOGIzNWU3NzVhNGUzN2E0ZTU4NDllMDkzYzdk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-09T08:38:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-09T09:27:28Z"
      },
      "message": "test: Run rpc_txoutproof.py even with wallet disabled",
      "tree": {
        "sha": "2794fe5f678478c46aa2dce101c97c995bb5097c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2794fe5f678478c46aa2dce101c97c995bb5097c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa56e866e8ac08b35e775a4e37a4e5849e093c7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgEBAwAmIfPW/yidYANKw6AYb/HDeNiu/hOJyBin978ioZHBsRXnXsseIAOrj5Z\nDXmdPtNldMX0z8eDeQpY2lN2LLdY2hRPvKU2jLaxhm2AYTFoErmhQodRm4Zz7uNH\nEBQ+8Q+QzNICZi2WTb1ADKXqdQAJf7X2a4eoz6pxQ0Z5n56Xns8uFCNFr1AH3a2p\nq/2YTqJo7XKggOcxRdy8ksZTv5xdkwh6K3dyZlJzl46XMWPD14dKH1yjqMQ1HW2p\nkEEb5OH0uXWeCpIqJeG1AzKn7T2qu9z0oIXL1OfxBXqhdlRq/kfeKS9hjHdvLM1o\nIxkaVtPNpE4GhZHKOCsJuQiUQSbBkrzuPqWMGOiAOlCxChYqUvd23GWxYn6mMw9A\nx7CGbFEX5+xukRAa95CEanbjbnU7BbEvYzdFIA621ctzviWdM9PQSrjyETySVpFr\n2+HbmhOa0i6j+ZnOzOrvjzRZnxt0WTIrUfPCCzYruxNtfGWdNx9EG+a+vdeTJpg4\npyrJYGkU\n=VkgE\n-----END PGP SIGNATURE-----",
        "payload": "tree 2794fe5f678478c46aa2dce101c97c995bb5097c\nparent faba790bd40b5a9e8849997785020790ff60571b\nauthor MarcoFalke <falke.marco@gmail.com> 1599640699 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1599643648 +0200\n\ntest: Run rpc_txoutproof.py even with wallet disabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa56e866e8ac08b35e775a4e37a4e5849e093c7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa56e866e8ac08b35e775a4e37a4e5849e093c7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa56e866e8ac08b35e775a4e37a4e5849e093c7d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faba790bd40b5a9e8849997785020790ff60571b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faba790bd40b5a9e8849997785020790ff60571b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faba790bd40b5a9e8849997785020790ff60571b"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 40,
      "deletions": 46
    },
    "files": [
      {
        "sha": "66dbf292ac4f38cc8ae4b48ca5cf2f6f8aa7769e",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 36,
        "deletions": 46,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa56e866e8ac08b35e775a4e37a4e5849e093c7d/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa56e866e8ac08b35e775a4e37a4e5849e093c7d/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=fa56e866e8ac08b35e775a4e37a4e5849e093c7d",
        "patch": "@@ -6,41 +6,31 @@\n \n from test_framework.messages import CMerkleBlock, FromHex, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet\n+\n \n class MerkleBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 4\n+        self.num_nodes = 2\n         self.setup_clean_chain = True\n-        # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n-        self.extra_args = [[], [], [], [\"-txindex\"]]\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n-    def setup_network(self):\n-        self.setup_nodes()\n-        connect_nodes(self.nodes[0], 1)\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[0], 3)\n-\n-        self.sync_all()\n+        self.extra_args = [\n+            [],\n+            [\"-txindex\"],\n+        ]\n \n     def run_test(self):\n-        self.log.info(\"Mining blocks...\")\n-        self.nodes[0].generate(105)\n+        miniwallet = MiniWallet(self.nodes[0])\n+        # Add enough mature utxos to the wallet, so that all txs spend confirmed coins\n+        miniwallet.generate(5)\n+        self.nodes[0].generate(100)\n         self.sync_all()\n \n         chain_height = self.nodes[1].getblockcount()\n         assert_equal(chain_height, 105)\n-        assert_equal(self.nodes[1].getbalance(), 0)\n-        assert_equal(self.nodes[2].getbalance(), 0)\n-\n-        node0utxos = self.nodes[0].listunspent(1)\n-        tx1 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx1)[\"hex\"])\n-        tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx2)[\"hex\"])\n+\n+        txid1 = miniwallet.send_self_transfer(from_node=self.nodes[0])['txid']\n+        txid2 = miniwallet.send_self_transfer(from_node=self.nodes[0])['txid']\n         # This will raise an exception because the transaction is not yet in a block\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n@@ -53,50 +43,50 @@ def run_test(self):\n         txlist.append(blocktxn[1])\n         txlist.append(blocktxn[2])\n \n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1])), [txid1])\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2])), txlist)\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2], blockhash)), txlist)\n+        assert_equal(self.nodes[0].verifytxoutproof(self.nodes[0].gettxoutproof([txid1])), [txid1])\n+        assert_equal(self.nodes[0].verifytxoutproof(self.nodes[0].gettxoutproof([txid1, txid2])), txlist)\n+        assert_equal(self.nodes[0].verifytxoutproof(self.nodes[0].gettxoutproof([txid1, txid2], blockhash)), txlist)\n \n-        txin_spent = self.nodes[1].listunspent(1).pop()\n-        tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 49.98})\n-        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransactionwithwallet(tx3)[\"hex\"])\n+        txin_spent = miniwallet.get_utxo()  # Get the change from txid2\n+        tx3 = miniwallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=txin_spent)\n+        txid3 = tx3['txid']\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         txid_spent = txin_spent[\"txid\"]\n-        txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n+        txid_unspent = txid1  # Input was change from txid2, so txid1 should be unspent\n \n         # Invalid txids\n-        assert_raises_rpc_error(-8, \"txid must be of length 64 (not 32, for '00000000000000000000000000000000')\", self.nodes[2].gettxoutproof, [\"00000000000000000000000000000000\"], blockhash)\n-        assert_raises_rpc_error(-8, \"txid must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[2].gettxoutproof, [\"ZZZ0000000000000000000000000000000000000000000000000000000000000\"], blockhash)\n+        assert_raises_rpc_error(-8, \"txid must be of length 64 (not 32, for '00000000000000000000000000000000')\", self.nodes[0].gettxoutproof, [\"00000000000000000000000000000000\"], blockhash)\n+        assert_raises_rpc_error(-8, \"txid must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].gettxoutproof, [\"ZZZ0000000000000000000000000000000000000000000000000000000000000\"], blockhash)\n         # Invalid blockhashes\n-        assert_raises_rpc_error(-8, \"blockhash must be of length 64 (not 32, for '00000000000000000000000000000000')\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n-        assert_raises_rpc_error(-8, \"blockhash must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[2].gettxoutproof, [txid_spent], \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n+        assert_raises_rpc_error(-8, \"blockhash must be of length 64 (not 32, for '00000000000000000000000000000000')\", self.nodes[0].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n+        assert_raises_rpc_error(-8, \"blockhash must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].gettxoutproof, [txid_spent], \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n         # We can't find the block from a fully-spent tx\n-        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid_spent])\n         # We can get the proof if we specify the block\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n+        assert_equal(self.nodes[0].verifytxoutproof(self.nodes[0].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n         # We can't get the proof if we specify a non-existent block\n-        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"0000000000000000000000000000000000000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].gettxoutproof, [txid_spent], \"0000000000000000000000000000000000000000000000000000000000000000\")\n         # We can get the proof if the transaction is unspent\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), [txid_unspent])\n+        assert_equal(self.nodes[0].verifytxoutproof(self.nodes[0].gettxoutproof([txid_unspent])), [txid_unspent])\n         # We can get the proof if we provide a list of transactions and one of them is unspent. The ordering of the list should not matter.\n-        assert_equal(sorted(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2]))), sorted(txlist))\n-        assert_equal(sorted(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid2, txid1]))), sorted(txlist))\n+        assert_equal(sorted(self.nodes[0].verifytxoutproof(self.nodes[0].gettxoutproof([txid1, txid2]))), sorted(txlist))\n+        assert_equal(sorted(self.nodes[0].verifytxoutproof(self.nodes[0].gettxoutproof([txid2, txid1]))), sorted(txlist))\n         # We can always get a proof if we have a -txindex\n-        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[3].gettxoutproof([txid_spent])), [txid_spent])\n+        assert_equal(self.nodes[0].verifytxoutproof(self.nodes[1].gettxoutproof([txid_spent])), [txid_spent])\n         # We can't get a proof if we specify transactions from different blocks\n-        assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n+        assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[0].gettxoutproof, [txid1, txid3])\n \n         # Now we'll try tweaking a proof.\n-        proof = self.nodes[3].gettxoutproof([txid1, txid2])\n+        proof = self.nodes[1].gettxoutproof([txid1, txid2])\n         assert txid1 in self.nodes[0].verifytxoutproof(proof)\n         assert txid2 in self.nodes[1].verifytxoutproof(proof)\n \n         tweaked_proof = FromHex(CMerkleBlock(), proof)\n \n         # Make sure that our serialization/deserialization is working\n-        assert txid1 in self.nodes[2].verifytxoutproof(ToHex(tweaked_proof))\n+        assert txid1 in self.nodes[0].verifytxoutproof(ToHex(tweaked_proof))\n \n         # Check to see if we can go up the merkle tree and pass this off as a\n         # single-transaction block"
      },
      {
        "sha": "39b3bf2a5bd4b1b913f11f408a0afc47926efae5",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa56e866e8ac08b35e775a4e37a4e5849e093c7d/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa56e866e8ac08b35e775a4e37a4e5849e093c7d/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=fa56e866e8ac08b35e775a4e37a4e5849e093c7d",
        "patch": "@@ -40,6 +40,10 @@ def generate(self, num_blocks):\n             self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']})\n         return blocks\n \n+    def get_utxo(self):\n+        \"\"\"Return the last utxo. Can be used to get the change output immediately after a send_self_transfer\"\"\"\n+        return self._utxos.pop()\n+\n     def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None):\n         \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n         self._utxos = sorted(self._utxos, key=lambda k: k['value'])"
      }
    ]
  },
  {
    "sha": "faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWY1ZWI0NWM0YTA4ZmJmZDlhOGMxMjUzNGJjYThhZGZlNzU2ZWYy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-09T08:48:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-09T09:27:33Z"
      },
      "message": "test: Test empty array in gettxoutproof",
      "tree": {
        "sha": "c29b39a7443a9a0aed06e57f9c940e63f3930fec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c29b39a7443a9a0aed06e57f9c940e63f3930fec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj+7Qv/W1iop1gdjnAH+awtqTvv6TRVzHxhxWF5YIGku4v8OV3C/9Esop38dPZf\nNRcTo79iHgS7WNdsSgQUW7RmLBhRz2FPWTpMZOOx2/nVJr1pdO7CE4qbF5yC6zLz\nIeAZR/DL0hgMPjohFy5O5hKKXBkyjQK9bqkeDE8JJmLgQYXOyceB6a4KCAdJccoL\nZkbP/o86XPyU98joq/LuFgMBooX2nJKOpa9FHUShTowe2mKXOrajDVWbXjXsFOwE\ndhe4fx4fZ49sxeTySUogxbvUB7jMOQoA9rOj9h5vyX1oPQr7kCfq9htCcgoN7Yf+\ntRr2mYYGb9xZZ86wT1euARt5yu3kNjp1/snPb8cj/idD236XeFymYFgc3eVZFZuQ\nfQ4Z5FIRG3TS6Uy6VIQRm87dyMFse00mWQGaJVLJN/e/bY+I1t6fpBpxMSJ9OorU\n4Ljr25PxYWMBiqPGG3DXzQ59rIrN12pZx4DnUqQcpj6hCLqfOS7vz+4W2evFdq4d\nmE6xVTiA\n=Bh+q\n-----END PGP SIGNATURE-----",
        "payload": "tree c29b39a7443a9a0aed06e57f9c940e63f3930fec\nparent fa56e866e8ac08b35e775a4e37a4e5849e093c7d\nauthor MarcoFalke <falke.marco@gmail.com> 1599641325 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1599643653 +0200\n\ntest: Test empty array in gettxoutproof\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa56e866e8ac08b35e775a4e37a4e5849e093c7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa56e866e8ac08b35e775a4e37a4e5849e093c7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa56e866e8ac08b35e775a4e37a4e5849e093c7d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1699d36cfac76eb563d88f7ba0b65e2705784b64",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2",
        "patch": "@@ -77,6 +77,8 @@ def run_test(self):\n         assert_equal(self.nodes[0].verifytxoutproof(self.nodes[1].gettxoutproof([txid_spent])), [txid_spent])\n         # We can't get a proof if we specify transactions from different blocks\n         assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[0].gettxoutproof, [txid1, txid3])\n+        # Test empty list\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [])\n \n         # Now we'll try tweaking a proof.\n         proof = self.nodes[1].gettxoutproof([txid1, txid2])"
      }
    ]
  },
  {
    "sha": "faf251d854e3a670533ea3e9087e82c92f3ae533",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWYyNTFkODU0ZTNhNjcwNTMzZWEzZTkwODdlODJjOTJmM2FlNTMz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-08-31T14:14:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-09T09:27:35Z"
      },
      "message": "test: gettxoutproof duplicate txid",
      "tree": {
        "sha": "e72462eda1b0cf2e4db6238b46893b51339a72a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e72462eda1b0cf2e4db6238b46893b51339a72a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf251d854e3a670533ea3e9087e82c92f3ae533",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgXVQwAg9DdDAfvBV3ymdwWrJyPi34rLToGYSXCKSgMKxedtYw71wTba87QJpgz\n9sOrvDztIvOh5+aU5KrJZAnFrBfN3MxPsmkPW3PnaFe5521s0JOYkDhehBOuJwjo\nw5zN5KJsmhW9FIpCjOUBUmKItJMyzrgWhE+x23aIGhaqgajIaCqvCVyIR+uHrpJo\n9Qxdp0aDyx2aVQ2u6ysRwl9pLbZkQeKBGpxPFTmDLNRRhqsVTSon0N7wg5811O0k\nGMAIGXVTcdqoXIWs8DFk9iJ/ABs3lEaelK2DeEaGj2jmf+3J4mRUfiY7JRu+n2d0\nTdIrrq/z9ytY7xQRA47S7qKBtONw/oVrdVBNTMOD1OWvumqKIFpyc6BaC8Hzv+4m\n3DdQFKr2a9Z5vXkN/dxwlNS8AMTRCJ46cMStu9AK371fZTGYU/chsQw4908aTg59\n7Tc35/zGPxR46ZAeNBhprBS/7lzNV7kW21BoAVvLC5je6ZhIWQoAninaYCVMpiH9\nR0Q3ZuEu\n=veLJ\n-----END PGP SIGNATURE-----",
        "payload": "tree e72462eda1b0cf2e4db6238b46893b51339a72a7\nparent faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2\nauthor Jo\u00e3o Barbosa <joao.paulo.barbosa@gmail.com> 1598883290 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1599643655 +0200\n\ntest: gettxoutproof duplicate txid\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf251d854e3a670533ea3e9087e82c92f3ae533",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf251d854e3a670533ea3e9087e82c92f3ae533",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf251d854e3a670533ea3e9087e82c92f3ae533/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf5eb45c4a08fbfd9a8c12534bca8adfe756ef2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "93fb62c5d6cad0d2aa306bea2d4b2cfaf17f2fe1",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf251d854e3a670533ea3e9087e82c92f3ae533/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf251d854e3a670533ea3e9087e82c92f3ae533/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=faf251d854e3a670533ea3e9087e82c92f3ae533",
        "patch": "@@ -79,6 +79,8 @@ def run_test(self):\n         assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[0].gettxoutproof, [txid1, txid3])\n         # Test empty list\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [])\n+        # Test duplicate txid\n+        assert_raises_rpc_error(-8, 'Invalid parameter, duplicated txid', self.nodes[0].gettxoutproof, [txid1, txid1])\n \n         # Now we'll try tweaking a proof.\n         proof = self.nodes[1].gettxoutproof([txid1, txid2])"
      }
    ]
  }
]