[
  {
    "sha": "4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e",
    "node_id": "C_kwDOABII59oAKDQ3MTg4OTdjZTNhN2M3MjhmZjdhZWJiYWRhYmNjOGVkN2EwYjhkNmU",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-18T20:25:04Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-26T12:51:18Z"
      },
      "message": "test: add script_util helper for creating bare multisig scripts",
      "tree": {
        "sha": "94688adb3b3e52d5d0c202e960521d49ce680aff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94688adb3b3e52d5d0c202e960521d49ce680aff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22a90186496aea8025316bc5616905ffcf1aeb29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a90186496aea8025316bc5616905ffcf1aeb29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22a90186496aea8025316bc5616905ffcf1aeb29"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 23,
      "deletions": 18
    },
    "files": [
      {
        "sha": "acb7469c6aa853288c0f429ae5deec0fedc71619",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e",
        "patch": "@@ -30,15 +30,14 @@\n     CScript,\n     OP_0,\n     OP_1,\n-    OP_2,\n-    OP_CHECKMULTISIG,\n     OP_DROP,\n     OP_TRUE,\n )\n from test_framework.script_util import (\n     key_to_p2pk_script,\n     key_to_p2pkh_script,\n     key_to_p2wpkh_script,\n+    keys_to_multisig_script,\n     script_to_p2sh_script,\n     script_to_p2wsh_script,\n )\n@@ -149,7 +148,7 @@ def run_test(self):\n             key = get_generate_key()\n             self.pubkey.append(key.pubkey)\n \n-            multiscript = CScript([OP_1, bytes.fromhex(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n+            multiscript = keys_to_multisig_script([self.pubkey[-1]])\n             p2sh_ms_addr = self.nodes[i].createmultisig(1, [self.pubkey[-1]], 'p2sh-segwit')['address']\n             bip173_ms_addr = self.nodes[i].createmultisig(1, [self.pubkey[-1]], 'bech32')['address']\n             assert_equal(p2sh_ms_addr, script_to_p2sh_p2wsh(multiscript))\n@@ -389,7 +388,7 @@ def run_test(self):\n             # Money sent to P2SH of multisig of this should only be seen after importaddress with the BASE58 P2SH address.\n \n             multisig_without_privkey_address = self.nodes[0].addmultisigaddress(2, [pubkeys[3], pubkeys[4]])['address']\n-            script = CScript([OP_2, bytes.fromhex(pubkeys[3]), bytes.fromhex(pubkeys[4]), OP_2, OP_CHECKMULTISIG])\n+            script = keys_to_multisig_script([pubkeys[3], pubkeys[4]])\n             solvable_after_importaddress.append(script_to_p2sh_script(script))\n \n             for i in compressed_spendable_address:"
      },
      {
        "sha": "71be2b4a82ef1257bef6c6b0880d14c10f042969",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e",
        "patch": "@@ -22,13 +22,11 @@\n from test_framework.script import (\n     CScript,\n     OP_0,\n-    OP_2,\n-    OP_3,\n-    OP_CHECKMULTISIG,\n     OP_HASH160,\n     OP_RETURN,\n )\n from test_framework.script_util import (\n+    keys_to_multisig_script,\n     script_to_p2sh_script,\n )\n from test_framework.util import (\n@@ -283,7 +281,7 @@ def run_test(self):\n         key = ECKey()\n         key.generate()\n         pubkey = key.get_pubkey().get_bytes()\n-        tx.vout[0].scriptPubKey = CScript([OP_2, pubkey, pubkey, pubkey, OP_3, OP_CHECKMULTISIG])  # Some bare multisig script (2-of-3)\n+        tx.vout[0].scriptPubKey = keys_to_multisig_script([pubkey] * 3, k=2)  # Some bare multisig script (2-of-3)\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bare-multisig'}],\n             rawtxs=[tx.serialize().hex()],"
      },
      {
        "sha": "5d0113465f411ca6857cc8974fc98015c838169d",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e",
        "patch": "@@ -32,13 +32,13 @@\n     CScriptNum,\n     CScriptOp,\n     OP_1,\n-    OP_CHECKMULTISIG,\n     OP_RETURN,\n     OP_TRUE,\n )\n from .script_util import (\n     key_to_p2pk_script,\n     key_to_p2wpkh_script,\n+    keys_to_multisig_script,\n     script_to_p2wsh_script,\n )\n from .util import assert_equal\n@@ -209,7 +209,7 @@ def witness_script(use_p2wsh, pubkey):\n         pkscript = key_to_p2wpkh_script(pubkey)\n     else:\n         # 1-of-1 multisig\n-        witness_script = CScript([OP_1, bytes.fromhex(pubkey), OP_1, OP_CHECKMULTISIG])\n+        witness_script = keys_to_multisig_script([pubkey])\n         pkscript = script_to_p2wsh_script(witness_script)\n     return pkscript.hex()\n \n@@ -218,7 +218,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n \n     Optionally wrap the segwit output using P2SH.\"\"\"\n     if use_p2wsh:\n-        program = CScript([OP_1, bytes.fromhex(pubkey), OP_1, OP_CHECKMULTISIG])\n+        program = keys_to_multisig_script([pubkey])\n         addr = script_to_p2sh_p2wsh(program) if encode_p2sh else script_to_p2wsh(program)\n     else:\n         addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)"
      },
      {
        "sha": "cbc4a560dbf7fcf927245433c1d97857614430e4",
        "filename": "test/functional/test_framework/script_util.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/test_framework/script_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/test_framework/script_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script_util.py?ref=4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e",
        "patch": "@@ -5,7 +5,9 @@\n \"\"\"Useful Script constants and utils.\"\"\"\n from test_framework.script import (\n     CScript,\n+    CScriptOp,\n     OP_0,\n+    OP_CHECKMULTISIG,\n     OP_CHECKSIG,\n     OP_DUP,\n     OP_EQUAL,\n@@ -41,6 +43,17 @@ def key_to_p2pk_script(key):\n     return CScript([key, OP_CHECKSIG])\n \n \n+def keys_to_multisig_script(keys, *, k=None):\n+    n = len(keys)\n+    if k is None:  # n-of-n multisig by default\n+        k = n\n+    assert k <= n\n+    op_k = CScriptOp.encode_op_n(k)\n+    op_n = CScriptOp.encode_op_n(n)\n+    checked_keys = [check_key(key) for key in keys]\n+    return CScript([op_k] + checked_keys + [op_n, OP_CHECKMULTISIG])\n+\n+\n def keyhash_to_p2pkh_script(hash):\n     assert len(hash) == 20\n     return CScript([OP_DUP, OP_HASH160, hash, OP_EQUALVERIFY, OP_CHECKSIG])"
      },
      {
        "sha": "c307ded542995cf8afc1880d6f20cb41eaaf7e52",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=4718897ce3a7c728ff7aebbadabcc8ed7a0b8d6e",
        "patch": "@@ -15,15 +15,10 @@\n     script_to_p2wsh,\n )\n from test_framework.key import ECKey\n-from test_framework.script import (\n-    CScript,\n-    OP_2,\n-    OP_3,\n-    OP_CHECKMULTISIG,\n-)\n from test_framework.script_util import (\n     key_to_p2pkh_script,\n     key_to_p2wpkh_script,\n+    keys_to_multisig_script,\n     script_to_p2sh_script,\n     script_to_p2wsh_script,\n )\n@@ -92,7 +87,7 @@ def get_multisig(node):\n         addr = node.getaddressinfo(node.getnewaddress())\n         addrs.append(addr['address'])\n         pubkeys.append(addr['pubkey'])\n-    script_code = CScript([OP_2] + [bytes.fromhex(pubkey) for pubkey in pubkeys] + [OP_3, OP_CHECKMULTISIG])\n+    script_code = keys_to_multisig_script(pubkeys, k=2)\n     witness_script = script_to_p2wsh_script(script_code)\n     return Multisig(privkeys=[node.dumpprivkey(addr) for addr in addrs],\n                     pubkeys=pubkeys,"
      }
    ]
  }
]