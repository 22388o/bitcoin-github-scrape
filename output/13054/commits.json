[
  {
    "sha": "68400d8b9675d00ea7126b432e208c1e52658c2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODQwMGQ4Yjk2NzVkMDBlYTcxMjZiNDMyZTIwOGMxZTUyNjU4YzJl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-07-06T22:10:35Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-13T12:13:39Z"
      },
      "message": "tests: Use explicit imports",
      "tree": {
        "sha": "12ad631a45a068b40d63cbf6fd933a57f94dc971",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12ad631a45a068b40d63cbf6fd933a57f94dc971"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68400d8b9675d00ea7126b432e208c1e52658c2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68400d8b9675d00ea7126b432e208c1e52658c2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68400d8b9675d00ea7126b432e208c1e52658c2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68400d8b9675d00ea7126b432e208c1e52658c2e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2115cba9c60504ed1c0af8a56c5d90b5fd415497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2115cba9c60504ed1c0af8a56c5d90b5fd415497",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2115cba9c60504ed1c0af8a56c5d90b5fd415497"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 143,
      "deletions": 94
    },
    "files": [
      {
        "sha": "4a9445f5039e4c615bb815403343ea2071789257",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,9 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP68 implementation.\"\"\"\n \n+import time\n+\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n+from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex\n+from test_framework.script import CScript\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.blocktools import *\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, bytes_to_hex_str, get_bip9_status, satoshi_round, sync_blocks\n \n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)"
      },
      {
        "sha": "56a79738a7d7c53f3705dab2e8b20164f9f0ed21",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -8,11 +8,13 @@\n 1351.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import *\n from test_framework.blocktools import create_coinbase, create_block, create_transaction\n+from test_framework.messages import CTransaction, msg_block, ToHex\n+from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, bytes_to_hex_str, hex_str_to_bytes, wait_until\n+\n from io import BytesIO\n \n CLTV_HEIGHT = 1351"
      },
      {
        "sha": "d612dbe2bce73d13b1e22a0768c620268833ea9d",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -31,10 +31,9 @@\n import sys\n import time\n \n-from test_framework.mininode import *\n-from test_framework.script import *\n+from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, create_confirmed_utxos, hex_str_to_bytes\n \n HTTP_DISCONNECT_ERRORS = [http.client.CannotSendRequest]\n try:"
      },
      {
        "sha": "8cbdeadecfc690edc8e9799b9857b88a9f41f617",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -7,11 +7,12 @@\n Test that the DERSIG soft-fork activates at (regtest) height 1251.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import *\n from test_framework.blocktools import create_coinbase, create_block, create_transaction\n+from test_framework.messages import msg_block\n+from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.script import CScript\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, bytes_to_hex_str, wait_until\n \n DERSIG_HEIGHT = 1251\n "
      },
      {
        "sha": "709910f2e407df9b07bc7aa17552a09b982e1c3a",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -6,7 +6,7 @@\n from decimal import Decimal\n import random\n \n-from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n+from test_framework.messages import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import ("
      },
      {
        "sha": "a81ebb4220d9b51a60a43d98c0552ad7020677fa",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -13,9 +13,10 @@\n from collections import defaultdict\n import time\n \n-from test_framework.mininode import *\n+from test_framework.messages import CInv, msg_getdata\n+from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, mine_large_block\n \n class TestP2PConn(P2PInterface):\n     def __init__(self):"
      },
      {
        "sha": "ab03871849e00d61884a190fee5b73f820a6c8db",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -13,11 +13,12 @@\n [Policy/Consensus] Check that the new NULLDUMMY rules are enforced on the 432nd block.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.messages import CTransaction\n from test_framework.blocktools import create_coinbase, create_block, create_transaction, add_witness_commitment\n+from test_framework.messages import CTransaction\n from test_framework.script import CScript\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str\n+\n import time\n \n NULLDUMMY_ERROR = \"non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero) (code 64)\""
      },
      {
        "sha": "c8f4b7f8b55eed58e98065d9f453ba02a4ebd41e",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -10,7 +10,8 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, connect_nodes, mine_large_block, sync_blocks, wait_until\n+\n import os\n \n MIN_BLOCKS_TO_KEEP = 288"
      },
      {
        "sha": "6105da810c076258a74369abb4bcb41016b21b57",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,10 +4,12 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the RBF code.\"\"\"\n \n+from decimal import Decimal\n+\n+from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut\n+from test_framework.script import CScript, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.mininode import *\n+from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, satoshi_round\n \n MAX_REPLACEMENT_LIMIT = 100\n "
      },
      {
        "sha": "13d7758e1395ec1d09660395d526487f3cf1411f",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,19 +4,23 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the SegWit changeover logic.\"\"\"\n \n+from decimal import Decimal\n+\n from test_framework.address import (\n+    key_to_p2pkh,\n     key_to_p2sh_p2wpkh,\n     key_to_p2wpkh,\n     program_to_witness,\n+    script_to_p2sh,\n     script_to_p2sh_p2wsh,\n     script_to_p2wsh,\n )\n from test_framework.blocktools import witness_script, send_to_witness\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import sha256, CTransaction, CTxIn, COutPoint, CTxOut, COIN, ToHex, FromHex\n-from test_framework.address import script_to_p2sh, key_to_p2pkh\n+from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex\n from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, connect_nodes, hex_str_to_bytes, sync_blocks, try_rpc\n+\n from io import BytesIO\n \n NODE_0 = 0"
      },
      {
        "sha": "e4b86f9e1e0390fdb3ca8a72f6a572e1f75e8469",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the RPC HTTP basics.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, str_to_b64str\n \n import http.client\n import urllib.parse"
      },
      {
        "sha": "72de69625909349e68e7c8d3bfcf56ffe8fb1bb7",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -7,7 +7,7 @@\n \n from test_framework.test_framework import (\n     BitcoinTestFramework, skip_if_no_bitcoind_zmq, skip_if_no_py3_zmq)\n-from test_framework.mininode import CTransaction\n+from test_framework.messages import CTransaction\n from test_framework.util import (assert_equal,\n                                  bytes_to_hex_str,\n                                  hash256,"
      },
      {
        "sha": "55422b67dfff2d9391f9dff7e8cb59d025798134",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n+from decimal import Decimal\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "da254181fec1757f12b79c2528d09a9d86568948",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,9 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test descendant package tracking code.\"\"\"\n \n+from decimal import Decimal\n+\n+from test_framework.messages import COIN\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import COIN\n+from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round, sync_blocks, sync_mempools\n \n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25"
      },
      {
        "sha": "6e5f89efb8e00544dca3e124c9227af04a121522",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -35,11 +35,12 @@\n     node1 can't write to disk.\n \n \"\"\"\n+from decimal import Decimal\n import os\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_rpc_error, wait_until\n \n class MempoolPersistTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "c7f6cef61d5df163333339ef8ef9e27802562242",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -8,9 +8,9 @@\n that spend (directly or indirectly) coinbase transactions.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n from test_framework.blocktools import create_raw_transaction\n-from test_framework.util import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n \n class MempoolCoinbaseTest(BitcoinTestFramework):"
      },
      {
        "sha": "5884a4f454cd0b6846b36e239643d28a74521eec",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,9 +4,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n from test_framework.blocktools import create_raw_transaction\n-from test_framework.util import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n \n \n class MempoolCoinbaseTest(BitcoinTestFramework):"
      },
      {
        "sha": "57ae9d697e7d9a1c964e86bdfec3cafd6b5840bf",
        "filename": "test/functional/mempool_spend_coinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_spend_coinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mempool_spend_coinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spend_coinbase.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -14,7 +14,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.blocktools import create_raw_transaction\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n \n class MempoolSpendCoinbaseTest(BitcoinTestFramework):"
      },
      {
        "sha": "fa20a2d2f4168c07da552ce179ae885b15bb4fd7",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -13,7 +13,7 @@\n from decimal import Decimal\n \n from test_framework.blocktools import create_coinbase\n-from test_framework.mininode import CBlock\n+from test_framework.messages import CBlock\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n "
      },
      {
        "sha": "2bcbe8db7b526962690f1f7e9b4fb62232695a34",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test longpolling with getblocktemplate.\"\"\"\n \n+from decimal import Decimal\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import get_rpc_proxy, random_transaction\n \n import threading\n "
      },
      {
        "sha": "bb0cc082ab02318d6cb8713f7fa18b2fb353323c",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,9 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the prioritisetransaction mining RPC.\"\"\"\n \n+import time\n+\n+from test_framework.messages import COIN, MAX_BLOCK_BASE_SIZE\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import COIN, MAX_BLOCK_BASE_SIZE\n+from test_framework.util import assert_equal, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "5cec5dc6f0100d8107788387b4904c5f8109ad94",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -8,12 +8,15 @@\n Version 2 compact blocks are post-segwit (wtxids)\n \"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from decimal import Decimal\n+import random\n+\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n+from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_block, msg_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_witness_block, msg_witness_blocktxn, MSG_WITNESS_FLAG, NODE_NETWORK, NODE_WITNESS, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n+from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n-\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, get_bip9_status, satoshi_round, sync_blocks, wait_until\n \n # TestP2PConn: A peer we use to send messages to bitcoind, and store responses.\n class TestP2PConn(P2PInterface):"
      },
      {
        "sha": "3bc7734e75e56a2ec8101f3c5bed57a4bef65aee",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,11 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of feefilter messages.\"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from decimal import Decimal\n import time\n \n+from test_framework.messages import msg_feefilter\n+from test_framework.mininode import mininode_lock, P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import sync_blocks, sync_mempools\n \n def hashToHex(hash):\n     return format(hash, '064x')"
      },
      {
        "sha": "4a6ffced932c6b6c1dfef85ef4fc823600ca2e61",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -11,18 +11,18 @@\n import time\n \n from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.messages import CInv\n from test_framework.mininode import (\n-    CInv,\n     P2PInterface,\n     msg_headers,\n     msg_block,\n     msg_getdata,\n     msg_getheaders,\n-    wait_until,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    wait_until,\n )\n \n class P2PFingerprintTest(BitcoinTestFramework):"
      },
      {
        "sha": "dcbf833e7c847d5fbb39826cf3488a6d70484ce4",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -10,9 +10,12 @@\n This test connects to a node and sends it a few messages, trying to entice it\n into sending us something it shouldn't.\"\"\"\n \n-from test_framework.mininode import *\n+import time\n+\n+from test_framework.messages import msg_getaddr, msg_ping, msg_verack\n+from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import wait_until\n \n banscore = 10\n "
      },
      {
        "sha": "a8fcb181e6adc2631fc28170f7a9944fdff7b8f0",
        "filename": "test/functional/p2p_mempool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_mempool.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -8,9 +8,10 @@\n filters are not enabled.\n \"\"\"\n \n-from test_framework.mininode import *\n+from test_framework.messages import msg_mempool\n+from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal\n \n class P2PMempoolTests(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "c987bf4b059b539e25b8d87304233acf905865f6",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -8,10 +8,10 @@\n and that it responds to getdata requests for blocks correctly:\n     - send a block within 288 + 2 of the tip\n     - disconnect peers who request blocks older than that.\"\"\"\n-from test_framework.messages import CInv, msg_getdata, msg_verack\n-from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, P2PInterface, wait_until, mininode_lock\n+from test_framework.messages import CInv, msg_getdata, msg_verack, NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS\n+from test_framework.mininode import P2PInterface, mininode_lock\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, disconnect_nodes, connect_nodes_bi, sync_blocks\n+from test_framework.util import assert_equal, disconnect_nodes, connect_nodes_bi, sync_blocks, wait_until\n \n class P2PIgnoreInv(P2PInterface):\n     firstAddrnServices = 0"
      },
      {
        "sha": "9cc496d510e928e2fdc79534df1cc135db77bb6b",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -86,9 +86,9 @@\n    Expect: disconnect.\n \"\"\"\n from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.messages import CInv\n from test_framework.mininode import (\n     CBlockHeader,\n-    CInv,\n     NODE_WITNESS,\n     P2PInterface,\n     mininode_lock,"
      },
      {
        "sha": "2459a9f243e72c1cbebfbf605373455e0d29454f",
        "filename": "test/functional/p2p_timeouts.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_timeouts.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -23,9 +23,9 @@\n \n from time import sleep\n \n-from test_framework.mininode import *\n+from test_framework.messages import msg_ping\n+from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n \n class TestP2PConn(P2PInterface):\n     def on_version(self, message):"
      },
      {
        "sha": "2e86954aba28fafc53b71427471c9b28d4491f4f",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -51,11 +51,13 @@\n    work on its chain).\n \"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n import time\n+\n from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n+from test_framework.messages import CBlockHeader, CInv, msg_block, msg_headers, msg_inv\n+from test_framework.mininode import mininode_lock, P2PInterface\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, sync_blocks\n \n \n class AcceptBlockTest(BitcoinTestFramework):"
      },
      {
        "sha": "53916d529095c4b0fb8069d6658e5a06c5181a17",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -6,9 +6,9 @@\n \n import sys\n \n+from test_framework.netutil import all_interfaces, addr_to_hex, get_bind_addrs, test_ipv6_local\n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n-from test_framework.util import *\n-from test_framework.netutil import *\n+from test_framework.util import assert_equal, assert_raises_rpc_error, get_rpc_proxy, rpc_port, rpc_url\n \n class RPCBindTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "940386eee79f70e01901ab5875f3028d3d0e5f68",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,9 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test decoding scripts via decodescript RPC command.\"\"\"\n \n+from test_framework.messages import CTransaction, sha256\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import *\n+from test_framework.util import assert_equal, bytes_to_hex_str, hex_str_to_bytes\n+\n from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):"
      },
      {
        "sha": "f40710ef74734a7d6a00a788a1846cda0d761ef0",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the invalidateblock RPC.\"\"\"\n \n+import time\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, connect_nodes_bi, sync_blocks\n \n class InvalidateTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "26eca031c04c36c7096a57e649e4fa1fa541cba0",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -6,7 +6,10 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_rpc_error, find_output\n+\n+import json\n+import os\n \n # Create one-input, one-output, no-fee transaction:\n class PSBTTest(BitcoinTestFramework):"
      },
      {
        "sha": "1e3ada26f8a2e901ad218f97ea5a2fbf6660f0cf",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -13,10 +13,11 @@\n \"\"\"\n \n from collections import OrderedDict\n+from decimal import Decimal\n from io import BytesIO\n from test_framework.messages import CTransaction, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, connect_nodes_bi, hex_str_to_bytes\n \n class multidict(dict):\n     \"\"\"Dictionary that allows duplicate keys."
      },
      {
        "sha": "ceb38e969a7583d7010d2d76b5a04d0d765988c8",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,8 +4,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the scantxoutset rpc call.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal\n \n+from decimal import Decimal\n import shutil\n import os\n "
      },
      {
        "sha": "32b099294f456630b808950fc6cc7e2f72e5881e",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n \n class SignRawTransactionsTest(BitcoinTestFramework):"
      },
      {
        "sha": "f9f85746467c15566c800b4e7fea5e10ceafb200",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,10 +4,9 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test gettxoutproof and verifytxoutproof RPCs.\"\"\"\n \n+from test_framework.messages import CMerkleBlock, FromHex, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import FromHex, ToHex\n-from test_framework.messages import CMerkleBlock\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes\n \n class MerkleBlockTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "d1ddbbe8ee53907d26e61a0d66d259b6ed801589",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -21,7 +21,7 @@\n import sys\n import threading\n \n-from test_framework.messages import *\n+from test_framework.messages import CBlockHeader, MIN_VERSION_SUPPORTED, msg_addr, msg_block, MSG_BLOCK, msg_blocktxn, msg_cmpctblock, msg_feefilter, msg_getaddr, msg_getblocks, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_mempool, msg_ping, msg_pong, msg_reject, msg_sendcmpct, msg_sendheaders, msg_tx, MSG_TX, MSG_TYPE_MASK, msg_verack, msg_version, NODE_NETWORK, NODE_WITNESS, sha256\n from test_framework.util import wait_until\n \n logger = logging.getLogger(\"TestFramework.mininode\")"
      },
      {
        "sha": "375d6334f73f38f6c177924b5de33847072e7b77",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -7,7 +7,8 @@\n This file is modified from python-bitcoinlib.\n \"\"\"\n \n-from .mininode import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string\n+from .messages import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string\n+\n from binascii import hexlify\n import hashlib\n import struct"
      },
      {
        "sha": "8a57b55ca912b90c89c79714068c0cb291bfe4e1",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -10,9 +10,10 @@\n  which are not included in a block and are not currently in the mempool. It has\n  no effect on transactions which are already abandoned.\n \"\"\"\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from decimal import Decimal\n \n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, disconnect_nodes, sync_blocks, sync_mempools\n \n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "4ef8f4776b29bd026667012f27dd4cf727e71c65",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -30,11 +30,13 @@\n Shutdown again, restore using importwallet,\n and confirm again balances are correct.\n \"\"\"\n+from decimal import Decimal\n+import os\n from random import randint\n import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, sync_blocks, sync_mempools\n \n class WalletBackupTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "dd95bb5e2246668fc51806998a2c1b2939f46b8e",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -14,12 +14,12 @@\n make assumptions about execution order.\n \"\"\"\n \n-from test_framework.blocktools import send_to_witness\n+from decimal import Decimal\n+\n+from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n+from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework import blocktools\n-from test_framework.messages import BIP125_SEQUENCE_NUMBER\n-from test_framework.mininode import CTransaction\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, bytes_to_hex_str, connect_nodes_bi, hex_str_to_bytes, sync_mempools\n \n import io\n \n@@ -290,11 +290,11 @@ def submit_block_with_tx(node, tx):\n     tip = node.getbestblockhash()\n     height = node.getblockcount() + 1\n     block_time = node.getblockheader(tip)[\"mediantime\"] + 1\n-    block = blocktools.create_block(int(tip, 16), blocktools.create_coinbase(height), block_time)\n+    block = create_block(int(tip, 16), create_coinbase(height), block_time)\n     block.vtx.append(ctx)\n     block.rehash()\n     block.hashMerkleRoot = block.calc_merkle_root()\n-    blocktools.add_witness_commitment(block)\n+    add_witness_commitment(block)\n     block.solve()\n     node.submitblock(bytes_to_hex_str(block.serialize(True)))\n     return block"
      },
      {
        "sha": "6530c58c78b5cb569dd37c1883a53b2683f26103",
        "filename": "test/functional/wallet_disable.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_disable.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_disable.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disable.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -9,7 +9,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_raises_rpc_error\n \n class DisableWalletTest (BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "91dbae8939f26d7df570313fe83cec0da19d2305",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test wallet replace-by-fee capabilities in conjunction with the fallbackfee.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_raises_rpc_error\n \n class WalletRBFTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "12dac145bdfbe6ca422d1b9c8e892c3d3ca8c5c0",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -5,8 +5,7 @@\n \"\"\"Test wallet group functionality.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.mininode import FromHex, ToHex\n-from test_framework.messages import CTransaction\n+from test_framework.messages import CTransaction, FromHex, ToHex\n from test_framework.util import (\n     assert_equal,\n )"
      },
      {
        "sha": "5f19e1e2c6b88cd7e9629b94aecf361b54b6f2a1",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the importmulti RPC.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error\n \n class ImportMultiTest (BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "f52dce04dd079861659e2a517cefc2a8651c3fc4",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet keypool and interaction with wallet encryption/locking.\"\"\"\n \n+import time\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class KeyPoolTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "4dc3ff4b266697febee4a506eed1aeb8c3bbcf66",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -6,7 +6,7 @@\n from decimal import Decimal\n from io import BytesIO\n \n-from test_framework.mininode import CTransaction, COIN\n+from test_framework.messages import COIN, CTransaction\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_array_result,"
      },
      {
        "sha": "7e73790517f5f487cbdbb10203e267ad83fea9ad",
        "filename": "test/lint/lint-python.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68400d8b9675d00ea7126b432e208c1e52658c2e/test/lint/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68400d8b9675d00ea7126b432e208c1e52658c2e/test/lint/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python.sh?ref=68400d8b9675d00ea7126b432e208c1e52658c2e",
        "patch": "@@ -30,6 +30,8 @@ export LC_ALL=C\n # E306 expected 1 blank line before a nested definition\n # E401 multiple imports on one line\n # E402 module level import not at top of file\n+# F403 'from foo_module import *' used; unable to detect undefined names\n+# F405 foo_function may be undefined, or defined from star imports: bar_module\n # E502 the backslash is redundant between brackets\n # E701 multiple statements on one line (colon)\n # E702 multiple statements on one line (semicolon)\n@@ -77,4 +79,4 @@ export LC_ALL=C\n # W605 invalid escape sequence \"x\"\n # W606 'async' and 'await' are reserved keywords starting with Python 3.7\n \n-flake8 --ignore=B,C,E,F,I,N,W --select=E101,E112,E113,E115,E116,E125,E129,E131,E133,E223,E224,E242,E266,E271,E272,E273,E274,E275,E304,E306,E401,E402,E502,E701,E702,E703,E714,E721,E741,E742,E743,F401,E901,E902,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F821,F822,F823,F831,F841,W191,W291,W292,W293,W504,W601,W602,W603,W604,W605,W606 .\n+flake8 --ignore=B,C,E,F,I,N,W --select=E101,E112,E113,E115,E116,E125,E129,E131,E133,E223,E224,E242,E266,E271,E272,E273,E274,E275,E304,E306,E401,E402,E502,E701,E702,E703,E714,E721,E741,E742,E743,E901,E902,F401,F402,F403,F404,F405,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F821,F822,F823,F831,F841,W191,W291,W292,W293,W504,W601,W602,W603,W604,W605,W606 ."
      }
    ]
  }
]