btcdrak,2016-08-11T19:56:50Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-239273140,239273140,
jl2012,2016-08-12T00:50:48Z,"I think this is only a temporary solution to protect some of the most common script types. It's easy for P2WPKH. For P2WSH, it could only be done on a case-by-case basis. This approach won't work for more complicated scripts like MAST \n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-239335582,239335582,
paveljanik,2016-08-12T11:33:24Z,`*segwit.py` tests fail.\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-239424171,239424171,
jl2012,2016-08-19T03:51:51Z,"Updated to do more sanity checks:\n1. If the public key in P2WPKH is bigger than 33 bytes, make sure it matches the witness program\n2. Make sure the witnessScript is <= 10000 bytes and matches the witness program\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-240921201,240921201,
sipa,2016-08-23T11:34:19Z,"I don't think this belongs in policy. It detects witness transaction inputs that are unambiguously invalid by consensus rules, so I think it belongs in script/interpreter.cpp, but for that it can't depend on CCoinsView. Would it be possible to just have a function per input, that just takes the prevout, scriptsig, and scriptwitness?\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-241703701,241703701,
jl2012,2016-08-23T17:44:57Z,"@sipa: can I still use `Solver` and `txnouttype` after moving to interpreter.cpp? That'd would useful when we define more common script types (e.g. HTLC)\n\nThe `IsBadWitness` function is only a very small subset of consensus rules and it should never be used in the consensus critical path. Actually, we don't need `IsBadWitness` if we fully execute the script before doing any size related policy c",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-241814932,241814932,
jl2012,2016-08-25T02:49:11Z,need a 0.13.1 tag?\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-242267433,242267433,
jl2012,2016-09-06T09:06:51Z,"The function is updated. It returns 1 for witness-related error, and 2 for P2SH-related error. We shouldn't mark corruption possible for P2SH related error.\n\nIt also always checks the HASH160 in P2WPKH\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-244892906,244892906,
sipa,2016-09-06T12:01:54Z,utACK 056dc99bdc538a7af04b21fe3b25586afbc03861\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-244929181,244929181,
instagibbs,2016-09-06T17:40:49Z,nit aside utACK https://github.com/bitcoin/bitcoin/pull/8499/commits/056dc99bdc538a7af04b21fe3b25586afbc03861\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-245029517,245029517,
jl2012,2016-09-08T08:24:07Z,08f5e22: addressing nits and include rpc-test\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-245527825,245527825,
jl2012,2016-09-09T20:42:00Z,"(Ready for review)\n\nThis PR includes several policy rules for segwit:\n1. It detects some types of bad witness injected by malicious relay nodes, before the fee and SigOpCount is calculated. All the rules examined are consensus critical. Nodes sending violating transactions will be banned. See also: #8279, #8525\n2. It a policy limit for P2WSH, with witnessScript <= 3600 bytes, witness stack ite",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-246033843,246033843,
rubensayshi,2016-09-13T08:03:39Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-246606041,246606041,
btcdrak,2016-09-13T14:55:45Z,Tested ACK 603fa20\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-246709281,246709281,
jl2012,2016-09-14T06:33:18Z,"Comments added and max stack item calculation corrected.\n\nThere is a 201 nOpCount limit per script. n-of-m CHECKMULTISIG(VERIFY) is counted as m+1 nOp. 0-of-0 CHECKMULTISIG(VERIFY), despite totally useless, is valid and counts as 1 nOp. It removes 3 items from stack: the dummy item (must be 0 if NULLDUMMY is active), nSig (0 in this case), and nKey (also 0 in this case). This is the only way to ",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-246919223,246919223,
jl2012,2016-09-23T09:59:23Z,Rebased and squashed\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249151786,249151786,
instagibbs,2016-09-23T15:58:42Z,tests are failing for some reason?\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249231788,249231788,
jl2012,2016-09-23T16:19:08Z,"@instagibbs , oh it failed the newly merged NULLDUMMY softfork. Will fix\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249236820,249236820,
sdaftuar,2016-09-23T19:21:40Z,"Hmm, so I don't know if everyone is already sold on the approach here, but conceptually, I'm not sure the benefits outweigh the costs of introducing the BAD_WITNESS and BAD_P2SH checks with their associated DoS-banning.\n\nIn order for the banning to be a reasonable thing to do, it should really only occur for things that would be invalid-according-to-consensus, or else we'd risk partitioning some",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249280354,249280354,
jl2012,2016-09-24T08:50:17Z,"@sdaftuar I think your suggestions make sense as long as #8525 does what it is supposed to do. Especially, since `IsStandardTx` may reject a tx based on its weight, and this is done before the IsBadWitness check, the IsBadWitness is actually not very useful (unless we reject based on the witness-stripped size).\n\nAnyway, I have created a policy-only version based on your suggestions, which has a ",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249353755,249353755,
jl2012,2016-09-25T18:00:56Z,"@btcdrak @sipa @instagibbs @rubensayshi @NicolasDorier As you have reviewed this PR, do you agree with @sdaftuar 's https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249280354 to remove the DoS-banning parts in this PR?\n\nI have created a policy-only version, which has a much smaller diff:\nhttps://github.com/jl2012/bitcoin/commits/badwitnesscheck-new\nIf it's ok I will replace it so we c",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249435981,249435981,
instagibbs,2016-09-26T20:13:39Z,"@jl2012 I like less code when possible, and DoS banning should indeed be done sparingly. concept ACK on the alternative version.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249683696,249683696,
sipa,2016-09-27T15:24:38Z,@jl2012 utACK f55cee5b91c9dfe11437e647e69046e64cbf851c (from https://github.com/jl2012/bitcoin/commits/badwitnesscheck-new)\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249898955,249898955,
jl2012,2016-09-27T15:46:52Z,replaced with f55cee5 (policy only)\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249906403,249906403,
btcdrak,2016-09-27T16:04:39Z,Prefer the policy only version.\n\nutACK f55cee5\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249912250,249912250,
instagibbs,2016-09-27T18:54:12Z,utACK ~~https://github.com/bitcoin/bitcoin/pull/8499/commits/fdb47150c55bcaf0f0569a77ece0abacadbfef38~~ https://github.com/bitcoin/bitcoin/commit/f55cee5b91c9dfe11437e647e69046e64cbf851c\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-249961973,249961973,
NicolasDorier,2016-09-28T03:04:34Z,utACK fdb47150c55bcaf0f0569a77ece0abacadbfef38\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250060031,250060031,
gmaxwell,2016-09-28T09:22:59Z,"utACK, testing now on testnet with RequireStandard = true;\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250116392,250116392,
laanwj,2016-09-28T10:14:57Z,utACK f55cee5\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250127590,250127590,
TheBlueMatt,2016-09-28T20:16:57Z,"The first and last commits seem reasonable to me (haven't reviewed in detail yet), but I'm not sure about actually enforcing compressed pubkeys as a standardness rule. In general, I think we should be considering standardness rules only for a) things which we intend to soft fork or b) things which we are afraid of DoS risks from.\nObviously uncompressed pubkeys dont particularly fit into category ",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250286720,250286720,
instagibbs,2016-09-28T20:22:02Z,"On that note, could we get a justification for this PR's commits up at the top? The linked one is out of date now anyways. Makes reviewing much easier.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250288021,250288021,
sipa,2016-09-28T20:28:52Z,"@TheBlueMatt The compressed pubkeys rule is only applied to segwit scripts,\nso if it is nonstandard from the start it's absolutely potentially\nsoftforkable in the future.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250289794,250289794,
jl2012,2016-09-29T04:44:05Z,"This PR includes several policy rules for segwit:\n- It implements a policy limit for P2WSH, with witnessScript <= 3600 bytes, witness stack item size <= 80 bytes, and witness stack items <= 100\n- 3600 bytes witnessScript and 100 stack items are adequate for a n-of-100 multisig using OP_CHECKSIG, OP_ADD, and OP_EQUAL\n- The max size for ECDSA signature is 73 bytes and nothing should use more than",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250369017,250369017,
TheBlueMatt,2016-09-29T13:41:46Z,"@sipa I do not agree that it is a good candidate for soft-fork in the future. There is little direct benifit from doing so and ""it was always policy in Bitcoin Core to not let you spend this"" is not sufficient to make some not-insane outputs unspendable to me. I'm happy to be overruled on this (because I dont think its a huge deal), but I would not advocate for such a soft-fork in the future.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250469112,250469112,
jl2012,2016-09-29T15:03:35Z,"2 commits added. 620fee0 is a minor fix for the test. 60ea68a is moving IsWitnessStandard before validation, as suggested by @sdaftuar. If we think it's a better idea, I will squash it\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250493182,250493182,
sipa,2016-09-29T15:18:54Z,"@TheBlueMatt I don't see any reason why we'd continue to support\nuncompressed pubkeys. They're a waste of space for no benefit.\n\nIt would indeed have been better to include this in segwit's proposed\nconsensus rules, but it's worth changing at this point I think. If we don't\nuse this opportunity now to get rid of them, we probably won't ever be\nuntil a new script revision entirely.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250497587,250497587,
TheBlueMatt,2016-09-29T15:42:19Z,"@sipa agreed on everything there except that its reasonable to soft-fork them out if we do make it non-standard now. It would absolutely be wonderful to get rid of them in segwit on day 1, but if we think its too late for that, then I think its too late, full stop. In any case, I think its marginally setting the wrong precedent (I dont think policy is a strong enough ""you may not use this"" flag to",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250504499,250504499,
jl2012,2016-09-29T15:46:57Z,Revised the new commits a bit. Now the tests in 0c4ef07 shows that moving IsWitnessStandard before validation wouldn't blind a node to a transaction due to #8525 \n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250505917,250505917,
jl2012,2016-09-29T15:53:33Z,@sipa @TheBlueMatt I don't have strong opinion about having the uncompressed key policy. Maybe one reason for doing it now is to procrastinate the debate about the softfork. I don't think this is a big deal and we should try to decide in today's meeting.\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250507939,250507939,
laanwj,2016-09-29T16:00:14Z,"I prefer not allowing uncompressed keys with segwit.\n\nWith normal transactions there's the argument that uncompressed keys have to remain supported forever, because there may be old time-locked transactions that use them.\n\nBy never allowing them for segwit that won't be an issue there.\n\nPolicy is not 100% strong but experience has shown that it is an effective way to discourage people from t",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250509968,250509968,
gmaxwell,2016-09-29T17:06:40Z,"@TheBlueMatt \n\nLook at p2sh usage-- there is no ongoing uncompressed pubkey usage there. I expect effectively none for segwit. But because there has been uncompressed pubkey usage in p2sh, we're stuck forever supporting it there and taking the costs of doing so.  Several weeks ago we wanted to simply bar uncompressed keys with segwit and you argued that it was too late to add a consensus rule. O",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250529406,250529406,
instagibbs,2016-09-30T13:23:22Z,"Unless there is a compelling use-case(or expectation thereof) for uncompressed pubkeys in Segwit, I think policy and eventual softfork is desired.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250743092,250743092,
jtimon,2016-09-30T15:21:59Z,"I would also prefer not allowing uncompressed keys with segwit as consensus rule from the start. I disagree it is too late for that. But if other people do, I don't mind having it as a default policy (I don't really like saying ""standardness rule"").\nFast review ACK.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250773012,250773012,
sdaftuar,2016-09-30T20:10:52Z,"ACK.\n\nFYI I was able to hack up a test to check that uncompressed pubkeys with segwit are valid in blocks, though not accepted under default policy.\n\nRegarding the uncompressed pubkey discussion: if people think we might want to softfork out uncompressed pubkeys in segwit altogether in the future, then perhaps it's worth considering whether the policy should be implemented with its own validat",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250840634,250840634,
jl2012,2016-10-01T02:59:40Z,"I have a scenario but haven't tested. I have an used uncompressed key in my wallet, say 0x04aabbccddeeff... . Someone finds that on the blockchain, and without asking me he tries to send a few mBTC to scriptPubKey = 0x00 Hash160(0x04aabbccddeeff...), would that show up in the balance of my account and would my wallet keep trying to spending it? If yes we need more fixes for the wallet\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250888504,250888504,
jl2012,2016-10-01T03:39:06Z,Added a new flag for compressed key policy and rebased\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250890012,250890012,
jl2012,2016-10-01T16:09:02Z,fixed the issue I mentioned earlier (https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250888504) with  deae55f . Squashed and rebased\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-250920587,250920587,
sipa,2016-10-05T15:13:39Z,utACK 3a4048de42e351d302c202ee8879a8fd4706e7f2\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-251704577,251704577,
jl2012,2016-10-07T07:59:39Z,"Added rpc tests by @sdaftuar, and some script tests\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252177071,252177071,
NicolasDorier,2016-10-07T08:50:49Z,tACK 137a84e (replicated it on NBitcoin https://github.com/MetacoSA/NBitcoin/commit/b7425bcc564f593e3c0156dc21e4520e96b2716b)\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252186467,252186467,
jl2012,2016-10-08T11:48:51Z,"(71cd2df) This PR includes several policy rules for segwit:\n- It implements a policy limit for P2WSH, with witnessScript <= 3600 bytes, witness stack item size <= 80 bytes, and witness stack items <= 100\n  - 3600 bytes witnessScript and 100 stack items are adequate for a n-of-100 multisig using OP_CHECKSIG, OP_ADD, and OP_EQUAL\n  - The max size for ECDSA signature is 73 bytes and nothing should",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252420342,252420342,
droark,2016-10-09T12:37:16Z,"(**CAVEAT**: I need to confirm the exact state of the code. If I'm wrong, I'll come back and delete or edit out this comment.)\n\nHello. Just FYI, it's possible that, for now at least, this relay policy will break Armory. Right now, Armory supports only uncompressed keys for regular transactions. Compressed key support was going to be added eons ago but never happened. (Long story.) It's still in ",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252484132,252484132,
achow101,2016-10-09T14:16:43Z,@droark This PR would indeed break Armory. We have discussed this on the IRC channel and there is already a solution in the works. The uncompressed keys will be dynamically converted to compressed keys when segwit scripts are being created.\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252488898,252488898,
jl2012,2016-10-09T14:27:16Z,"@droark @achow101 The policy is for segwit txs only, and no existing released version of Armory support segwit. So any existing versions of Armory will work exactly as it works today, with or without this PR.\n\nTo support segwit, any existing wallets need some level of refactor anyway. Using uncompressed keys is a loss for users for absolutely no benefit. As an Armory user since 2012 I hope the A",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252489492,252489492,
achow101,2016-10-09T14:56:47Z,"@jl2012 Current releases of Armory actually completely break with segwit because they read the block files from the disk. Our next release already has that part fixed.\n\nWith compressed keys, the plan is to store the keys uncompressed as we do now and then convert them to compressed for any segwit scripts. It is indeed just a few extra lines between getting the key and putting it into the script.",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252491203,252491203,
mmgen,2016-10-09T20:31:23Z,"@sipa @TheBlueMatt @laanwj @gmaxwell @jl2012  ~~Dropping uncompressed public key support with segwit is **dangerous** and can easily lead to people creating unspendable outputs, losing their money and being very upset.  Consider the following scenario:~~\n- ~~User generates a key/address pair with vanitygen, which uses uncompressed public keys.~~\n- ~~User creates a transaction with RPC 'createraw",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252510661,252510661,
jl2012,2016-10-09T21:00:42Z,"@mmgen : To make it clear this PR affects _ONLY_ segwit outputs. Your wallet, which apparently does not yet support segwit, is totally unaffected.\n\nVanitygen (https://github.com/samr7/vanitygen), which is not updated since 2012, will definitely be unaffected.\n\nELI5:\n- If you are dealing with addresses starting with 1, you are definitely unaffected.\n- If you are dealing with addresses startin",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252512374,252512374,
mmgen,2016-10-09T21:33:44Z,"@jl2012 \n\n> To make it clear this PR affects ONLY segwit outputs.\n\n~~My wallet generates addresses using vanitygen and uses Bitcoin Core RPC as a backend for tx creation.  If Core's 'createrawtransaction' creates segwit outputs by default, then my wallet _is_ affected, unless you can convice me otherwise.~~\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252514196,252514196,
achow101,2016-10-09T21:37:50Z,"@mmgen `createrawtransaction` will not create transactions with segwit outputs. If an address begins with a 1 (as vanitygen addresses do), then it will create a P2PKH output because that is what an address beginning with a 1 means.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252514470,252514470,
mmgen,2016-10-09T21:41:14Z,@achow101 Thanks!  That answers my question and puts my fears to rest. \n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252514720,252514720,
achow101,2016-10-09T21:44:37Z,"It isn't necessary to document that IMO. By definition, an address with a 1 means the output is P2PKH, an address with a 3 means the output is P2SH (with any script you want). Segwit outputs have no address so you should not confuse them with any address.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252514935,252514935,
mmgen,2016-10-09T21:49:28Z,@achow101 \n\n> Segwit outputs have no address\n\nInteresting.  How is that possible?  How does one receive payment then?\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252515231,252515231,
achow101,2016-10-09T21:53:29Z,"@mmgen we're getting OT... If you have questions on segwit, go to the IRC channel.\n\nSegwit scripts are nested inside P2SH addresses. Like P2SH scripts, they can be put into the output script, but most wallets aren't going to recognize that so you have to do it by hand. Remember, addresses are just abstractions.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252515463,252515463,
jl2012,2016-10-10T04:36:57Z,"@mmgen @achow101 : If you are using an ""1"" address, Bitcoin Core wallet will always send it in the old way, to a scriptPubKey that does not support segwit.\n\nHowever, I won't be surprised if some wallet devs will try to ignore the spec and convert an ""1"" address to a segwit output. This is extremely dangerous with or without this PR. There are thousands of ways people could do stupid things like ",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252536979,252536979,
mmgen,2016-10-10T12:11:27Z,"@jl2012 Thanks much to both you and @achow101 for your help. My wallet deals only with '1' addresses, so it turns out I'm not affected.\n\nAnd of course, my concerns were silly in the first place, since obviously the core devs aren't going to introduce a change in the protocol that would turn existing addresses into 'black holes'.\n\nIt would be great if info like what you've provided in this disc",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252600696,252600696,
jl2012,2016-10-10T12:31:38Z,Squashed and rebased\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252605029,252605029,
laanwj,2016-10-10T13:32:44Z,"re-utACK 69e8362\n\n> It would be great if info like what you've provided in this discussion were published in a Segwit FAQ for the benefit of idiots like me.\n\nYes, this would definitely be useful. There's a [segwit benefits](https://bitcoincore.org/en/2016/01/26/segwit-benefits/) FAQ, but no technical one.\nThere are so many things that even hard-core devs get confused once in a while. But inde",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252619287,252619287,
achow101,2016-10-10T13:38:18Z,@mmgen @laanwj changes that happen here should probably be documented on https://bitcoincore.org/en/segwit_wallet_dev/ (and all the other stuff that has happened that isn't there). Also that page should be a bit more accessible.\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252620601,252620601,
mmgen,2016-10-10T14:01:21Z,"Thanks, @laanwj @achow101.  Will take under advisement.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-252629674,252629674,
sdaftuar,2016-10-12T11:08:40Z,A couple of issues with the wallet changes came up during in-person code review the last couple days; specifically there are some open issues with IsMine() and how addwitnessaddress() is using it that need to be addressed before this should be merged.  Patch in progress...\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-253184633,253184633,
jl2012,2016-10-14T21:20:29Z,"The commits e6110a0 and f275d55 are new to cover many edge cases we found, in order to make uncompressed keys in segwit scripts invisible in wallet for both spendable and watch-only keys\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-253922392,253922392,
jl2012,2016-10-15T09:51:43Z,More tests added to cover premature addwitnessaddress. addwitnessaddress should fail if the P2SH version of the given address is unknown\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-253974119,253974119,
sipa,2016-10-16T13:18:50Z,utACK 61c15dfad3e94d2c30e2a6aee96971017c287ff1\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-254046402,254046402,
instagibbs,2016-10-16T16:36:06Z,Sync is failing to complete for some reason in p2p-segwit.py\n\nutACK fixes at 26bd36ba64cd090c862ca19d64e8e73ee79184d2 with only a couple nits\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-254057601,254057601,
jl2012,2016-10-16T16:36:31Z,"Comments added and edited. By the way, it seems the p2p-segwit.py would fail randomly\n\n  File ""./qa/rpc-tests/p2p-segwit.py"", line 2000, in run_test\n    self.test_non_standard_witness()\n  File ""./qa/rpc-tests/p2p-segwit.py"", line 1909, in test_non_standard_witness\n    self.std_node.announce_tx_and_wait_for_getdata(p2sh_txs[1])\n  File ""./qa/rpc-tests/p2p-segwit.py"", line 108, in announce_tx_a",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-254057627,254057627,
jl2012,2016-10-16T19:24:07Z,"I'm removing the tests that causing random sync fail. A similar test is done already to show that policy-rejection won't blind a node to the tx, so I think it's just redundant to try it again.\n",https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-254068127,254068127,
TheBlueMatt,2016-10-16T21:02:00Z,utACK 67d6ee1e3679504f46473fe0818970565ff3b137\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-254074662,254074662,
btcdrak,2016-10-17T11:56:16Z,utACK 67d6ee1e3679504f46473fe0818970565ff3b137\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-254187113,254187113,
laanwj,2016-10-17T12:21:33Z,Backported in #8916\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-254192026,254192026,
instagibbs,2016-10-17T13:49:51Z,post-merge ACK https://github.com/laanwj/bitcoin/commit/9777fe12722ddab7b1b17df11077d448c7a25006\n,https://github.com/bitcoin/bitcoin/pull/8499#issuecomment-254212756,254212756,
sipa,2016-08-22T10:58:04Z,Why only when the size is above 33 bytes?\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75657219,75657219,src/policy/policy.cpp
jl2012,2016-08-22T11:28:01Z,"The main objective of this PR is to detect extra witness data in some known forms of scripts, and DoS ban if found.\n\nThe normal size for compressed key is 33. If the size is 33, we are sure that no extra data is added. Whether the provided key matches the hash or not will be tested later in script evaluation. Testing here is just duplicated work.\n\nIf the size is bigger than 33, we don't know w",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75660562,75660562,src/policy/policy.cpp
jl2012,2016-08-22T14:23:31Z,"More tests could be added here to protect some common scripts. For example, canonical n-of-m multisig must have exactly n + 1 stack items (excluding the witnessScript). The first one must be empty (assuming BIP146) and the followings must be <= 73 bytes. Otherwise we kick the peer. Some common HTLC could be protected in a similar way, until there is a more permanent solution\n\nNon-canonical scrip",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75686509,75686509,src/policy/policy.cpp
jl2012,2016-08-22T14:25:36Z,Comparing the hash here guarantees that the script size and sigOpCount must be correct. And we could further observe the script with static analysis\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r75686929,75686929,src/policy/policy.cpp
instagibbs,2016-09-02T13:56:14Z,"Unless I'm missing something, I think this is over-eager optimization. It took me a few reads of even this explanation to understand the reasoning behind this line, and even then I'm not quite sure if I've fully understood it. Is the only harm in being more general that we are duplicating work later?\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r77349831,77349831,src/policy/policy.cpp
instagibbs,2016-09-02T14:09:30Z,"At a minimum there should be a comment something like:\n""We want to make sure malleated pubkeys don't trigger too-low-fee to avoid DoS ban""\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r77351905,77351905,src/policy/policy.cpp
jl2012,2016-09-04T15:43:29Z,"@instagibbs >Is the only harm in being more general that we are duplicating work later?\nyes, because the only purpose of this PR is to early detect some kinds of witness mutation that would trigger too-low-fee ban. We don't care if the size is same as expected or too small. Otherwise we are just doing the validation twice.\n\nBut this one is probably over optimized.\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r77454583,77454583,src/policy/policy.cpp
sipa,2016-09-05T12:44:35Z,"I believe this is over-optimized, yes. Let's just always check it.\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r77516318,77516318,src/policy/policy.cpp
sipa,2016-09-06T09:09:58Z,Can you define an enum instead?\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r77598282,77598282,src/policy/policy.cpp
jl2012,2016-09-06T11:28:42Z,Revised\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r77617118,77617118,src/policy/policy.cpp
instagibbs,2016-09-06T17:40:03Z,Please use the constant found here: https://github.com/bitcoin/bitcoin/blob/master/src/script/script.h#L31\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r77683006,77683006,src/policy/policy.cpp
instagibbs,2016-09-13T18:08:45Z,Please describe this enum value in the comment above\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r78613491,78613491,src/policy/policy.h
instagibbs,2016-09-13T18:12:13Z,/must/can/ ?\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r78614116,78614116,src/policy/policy.cpp
instagibbs,2016-09-13T18:33:05Z,Could you spell out the math here? I'm not a Script wizard and can't figure what's being asserted here.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r78617806,78617806,src/policy/policy.cpp
jl2012,2016-09-13T19:28:40Z,"There is a 201 op limit in a script. Except CHECKMULTISIG(CMS), 2DROP is the most efficient code to clean up the stack (1 opcode to clean 2 items). A 20-of-20 CMS will clean up 1 dummy +20 sig + 1 nSig + 20 key + 1nKey = 43 items, and it is equivalent to 21 ops, so it's more efficient (1 to 2.05 items). \n\nTherefore, I could have a witnessScript = 9 CMSV + 12 2DROP, which is exactly 201 ops. They",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r78627627,78627627,src/policy/policy.cpp
jl2012,2016-09-13T19:41:51Z,"Sorry, I think the max is 100 CHECKMULTISIGVERIFY for 502 items. Will correct it or just use a bigger number like 1000. The propose is just anti-DoS so the actual number is not very important\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r78629656,78629656,src/policy/policy.cpp
NicolasDorier,2016-09-17T08:22:16Z,"I would do `if(witnessEnabled && !tx.wit.IsNull())`, as with it you can see what segwit is impacting by following where `witnessEnabled` is used. It makes review easier. (NIT)\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79279159,79279159,src/main.cpp
NicolasDorier,2016-09-17T08:31:02Z,Better creating a new ScriptFlags rather than hijacking an existing one. That we you won't have to add a parameter to CheckPubkeyEncoding.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79279293,79279293,src/script/interpreter.cpp
NicolasDorier,2016-09-17T09:02:24Z,"`&& !tx.wit.vtxinwit[i].IsNull()` is not needed, you do already the check above.\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79279815,79279815,src/policy/policy.cpp
NicolasDorier,2016-09-17T09:47:08Z,"I would prefer you create a function for that, as you are repeating it twice.\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79280619,79280619,src/wallet/rpcwallet.cpp
jl2012,2016-09-17T19:26:30Z,the types are different. One is CPubKey and one is std::vector\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79290457,79290457,src/wallet/rpcwallet.cpp
jl2012,2016-09-17T19:34:48Z,Addressed with ec344d9\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79290576,79290576,src/policy/policy.cpp
jl2012,2016-09-17T19:34:56Z,Addressed with ec344d9\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79290578,79290578,src/main.cpp
jl2012,2016-09-17T19:52:58Z,"Even with a new flag, the sigversion is still required in CheckPubkeyEncoding because applicability of the rules is based on the type of tx (base vs witness), not the flag.\n\nHowever, a new error message type is added to correctly describe this error. (516f9f1)\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79290837,79290837,src/script/interpreter.cpp
NicolasDorier,2016-09-18T01:10:52Z,Another reason to use a flag would be to enforce this rule at policy level for old type the other sigversion. But maybe this would need to be in another PR.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79295079,79295079,src/script/interpreter.cpp
NicolasDorier,2016-09-18T01:20:40Z,I think you should add empty signature as standard signature.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79295176,79295176,src/wallet/rpcwallet.cpp
jl2012,2016-09-18T06:38:33Z,"This is pub key, not signature.\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79298672,79298672,src/wallet/rpcwallet.cpp
jl2012,2016-09-18T12:30:08Z,Many people are still using and will use uncompressed keys. We could never have any policy to reject that\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79304615,79304615,src/script/interpreter.cpp
NicolasDorier,2016-09-18T12:56:08Z,"Does it makes sense to check `flags & SCRIPT_VERIFY_STRICTENC` at all ? if segwit is activated (and it is if the sigversion is SIGVERSION_WITNESS_V0 ) then SCRIPT_VERIFY_STRICTENC is enforced anyway by BIP66. To be sure it is always the case, we can add `flags |= SCRIPT_VERIFY_DERSIG` at https://github.com/bitcoin/bitcoin/blob/39ac1ec6426447b924052c2da3f80e0220c308c3/src/main.cpp#L2388\n\nIt would",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79305077,79305077,src/script/interpreter.cpp
jl2012,2016-09-18T13:16:48Z,"BIP66 enforced DERSIG, not STRICTENC. STRICTENC is a pure policy and will never be a consensus rule.\n\nEven in a parallel universe that DERSIG is enforced after WITNESS, they are still softforks. And this is actually impossible, since BIP9 will activate BIP66. Anyway, this is off-topic\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79305473,79305473,src/script/interpreter.cpp
NicolasDorier,2016-09-19T02:37:12Z,oh indeed I always inverse them!\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r79322990,79322990,src/script/interpreter.cpp
instagibbs,2016-09-23T15:28:23Z,nit: I wouldn't complain if you renamed vchSig to vchPubKey...\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r80267525,80267525,src/script/interpreter.cpp
NicolasDorier,2016-09-28T02:57:26Z,nit: would prefer early exit of this iteration with `continue;` it makes review easier by not having to check what happen if it is indeed null.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r80835992,80835992,src/policy/policy.cpp
sdaftuar,2016-09-28T19:30:07Z,Why is this being checked after transaction validation?  I thought that the goal of these segwit policy limits was to mitigate potential DoS risk from unwieldy scripts that we haven't thought of; is there any downside to having this happen before transaction validation?\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r80998469,80998469,src/main.cpp
jl2012,2016-09-28T20:00:59Z,"It's about the #8279. But since this is just one of the many ways to mutate the witness and we won't ban the peer anyway, maybe it makes more sense to move it before validation and after `AreInputsStandard`?\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r81004284,81004284,src/main.cpp
CodeShark,2016-09-30T13:01:47Z,Agree with @NicolasDorier \n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r81333772,81333772,src/policy/policy.cpp
jl2012,2016-09-30T14:10:05Z,done with 8d7146c\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r81345799,81345799,src/policy/policy.cpp
sipa,2016-10-01T16:12:44Z,I think you should keep the IsMine call.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r81452670,81452670,src/script/ismine.cpp
jl2012,2016-10-01T16:28:06Z,"oh, you are right\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r81453178,81453178,src/script/ismine.cpp
TheBlueMatt,2016-10-16T14:46:55Z,You either need to initialize this or check the return value of Solver.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83552722,83552722,src/policy/policy.cpp
TheBlueMatt,2016-10-16T15:16:03Z,"Also, probably Solver should init the type to NONSTD always...\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83553305,83553305,src/policy/policy.cpp
TheBlueMatt,2016-10-16T15:17:25Z,"Also, in this case, you're using Solver to just check IsPayToScriptHash(), so maybe do that.\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83553327,83553327,src/policy/policy.cpp
instagibbs,2016-10-16T15:52:43Z,How does this protect against uncompressed pubkey matching?\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83553947,83553947,src/script/ismine.cpp
jl2012,2016-10-16T15:54:51Z,fixed and squashed\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83553980,83553980,src/policy/policy.cpp
sipa,2016-10-16T15:57:47Z,Because it means the keystore needs to contain a witness-specific CScript for this branch not to trigger.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554018,83554018,src/script/ismine.cpp
jl2012,2016-10-16T16:01:22Z,"If the P2SH version of a witness program is unknown, we don't consider that is ""mine"". That means the user has to explicitly import the P2SH version with importaddress or addwitnessaddress, and the latter is disabled by default before segwit activation. So it is not possible to confuse users by picking random pubkey on the blockchain and send some dust to a corresponding witness output, which is u",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554076,83554076,src/script/ismine.cpp
jl2012,2016-10-16T16:03:22Z,I think @instagibbs is correct that it is no longer needed for uncompressed pubkey matching. But this is still needed for my other reason provided.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554112,83554112,src/script/ismine.cpp
instagibbs,2016-10-16T16:06:22Z,"Could we get an explanation of the different arguments here? `isInvalid` seems to have a particular meaning and use that is non-obvious, so it would benefit reviewers. \n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554180,83554180,src/script/ismine.h
instagibbs,2016-10-16T16:08:55Z,"this `isInvalid` check is to prevent the wallet from ""finding"" funds that have WatchOnly with uncompressed pubkey in Segwit via https://github.com/bitcoin/bitcoin/pull/8499/commits/26bd36ba64cd090c862ca19d64e8e73ee79184d2#diff-1dbee12e01d094e7366545ec024c5041R153?\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554228,83554228,src/script/ismine.cpp
jl2012,2016-10-16T16:18:02Z,"yes, both watchonly and spendable uncompressed keys in segwit scripts should be caught by this logic.\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554368,83554368,src/script/ismine.cpp
instagibbs,2016-10-16T16:18:46Z,isInvalid here will never be true. This value is only set to true if sigversion != SIGVERSION_BASE. This call has `SIGVERSION_BASE` as its default argument in the line above.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554386,83554386,src/script/ismine.cpp
jl2012,2016-10-16T16:20:51Z,"If the subscript is a P2WPKH or P2WSH, the sigversion will become SIGVERSION_WITNESS_V0\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554483,83554483,src/script/ismine.cpp
instagibbs,2016-10-16T16:22:07Z,"ie If it's only going to be checking for uncompressed pubkeys, we should say so, or rename the variable.\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554512,83554512,src/script/ismine.h
jl2012,2016-10-16T16:26:38Z,"I think this could be generalized to a similar situation in the future, if we have valid script in one SIGVERSION which is invalid in another\n",https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554609,83554609,src/script/ismine.h
instagibbs,2016-10-16T16:34:39Z,`isInvalidForSigVersion` or something similar might make sense then.\n,https://github.com/bitcoin/bitcoin/pull/8499#discussion_r83554778,83554778,src/script/ismine.h
