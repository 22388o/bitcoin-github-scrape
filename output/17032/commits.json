[
  {
    "sha": "340d62d48d9b48635070cc1e4e68ad443b04bd8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDBkNjJkNDhkOWI0ODYzNTA3MGNjMWU0ZTY4YWQ0NDNiMDRiZDhi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-02T20:26:30Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2020-02-19T20:49:38Z"
      },
      "message": "Chainparams: Make regtest almost fully customizable",
      "tree": {
        "sha": "ade3d2bd5bb689cc5b49dd283746c686bcd67315",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ade3d2bd5bb689cc5b49dd283746c686bcd67315"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/340d62d48d9b48635070cc1e4e68ad443b04bd8b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl5Nn2IACgkQiGbBjqHJ\nRKIlJw//RuwU7C3GJnR4l7ykmp7NQVzAay5ef8J+7bJNnr6Uh9SFb01hxx/S6rPH\n6c+1AqsVYCUQslwni6ZrAsncU7XluScZ9sVHOB8gPv7py6/ieGqDTVeczoTr72nk\na6rtfDDu4RCvgT2d08Fx7irqZEjulCwbsXXoYUH9tZgjfsXpLvxMqzhe9BABmhps\ntnXmVbukutmrOpd7W1W+UOmm/4mvpczYAkn2q9ciZ6LaWBxzdufhPLoVRFinkk6n\nzZSwAPAVaRRvVNrlS3V8JXgRzuphWpucbEDz5VjIts3kf802lOFT3QLIortPnLlu\n3XCV0Ar7cuQOt8znGX9TsvDKAaDalkEN5txDs9MmK9MpFytDXaVA83ZCvOYwSWZy\nOhBphNxU6QfmRAVsOoAYfg7rCclJEX8h5sFny/tDndFdzmH57LIKr9+0FithNWJc\n8U708i4csX9l4OT+uLPpRmTNSLHpCHTjfL+xoLzEFYXWa4+4Kl+wxKYxebYlZGPt\nv+gYBTavymAjRA4rgMfT3IEzaXZddEo2fg5LrO62w6GfwTtcp55sWE3LP95qY0tO\nR2TvWIJi9lttioALWaGFRmZwOmErlp0/Qjry3zMptyitwc2LRfv8hIGo0WvvUkpF\nMIfxWp9B9JLIZNZ3PrgGVntIfwXpXauh00sEWbYb5wwLQScSFx0=\n=Eg8I\n-----END PGP SIGNATURE-----",
        "payload": "tree ade3d2bd5bb689cc5b49dd283746c686bcd67315\nparent eddcbfb109e592fdf39ea2c38c4d7ba183de3e34\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570047990 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1582145378 +0100\n\nChainparams: Make regtest almost fully customizable\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/340d62d48d9b48635070cc1e4e68ad443b04bd8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/340d62d48d9b48635070cc1e4e68ad443b04bd8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/340d62d48d9b48635070cc1e4e68ad443b04bd8b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eddcbfb109e592fdf39ea2c38c4d7ba183de3e34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eddcbfb109e592fdf39ea2c38c4d7ba183de3e34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eddcbfb109e592fdf39ea2c38c4d7ba183de3e34"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 103,
      "deletions": 47
    },
    "files": [
      {
        "sha": "4d0e9ac951ee7f95e9ff2025689b79918e922915",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 47,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340d62d48d9b48635070cc1e4e68ad443b04bd8b/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340d62d48d9b48635070cc1e4e68ad443b04bd8b/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=340d62d48d9b48635070cc1e4e68ad443b04bd8b",
        "patch": "@@ -255,56 +255,19 @@ class CTestNetParams : public CChainParams {\n class CRegTestParams : public CChainParams {\n public:\n     explicit CRegTestParams(const ArgsManager& args) {\n-        strNetworkID =  CBaseChainParams::REGTEST;\n-        consensus.nSubsidyHalvingInterval = 150;\n-        consensus.BIP16Exception = uint256();\n-        consensus.BIP34Height = 500; // BIP34 activated on regtest (Used in functional tests)\n-        consensus.BIP34Hash = uint256();\n-        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in functional tests)\n-        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n-        consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n-        consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n-        consensus.MinBIP9WarningHeight = 0;\n-        consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n-        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-        consensus.nPowTargetSpacing = 10 * 60;\n-        consensus.fPowAllowMinDifficultyBlocks = true;\n-        consensus.fPowNoRetargeting = true;\n-        consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n-        consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n+        strNetworkID = CBaseChainParams::REGTEST;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n-        // The best chain should have at least this much work.\n-        consensus.nMinimumChainWork = uint256S(\"0x00\");\n-\n-        // By default assume that the signatures in ancestors of this block are valid.\n-        consensus.defaultAssumeValid = uint256S(\"0x00\");\n-\n-        pchMessageStart[0] = 0xfa;\n-        pchMessageStart[1] = 0xbf;\n-        pchMessageStart[2] = 0xb5;\n-        pchMessageStart[3] = 0xda;\n-        nDefaultPort = 18444;\n-        nPruneAfterHeight = 1000;\n-        m_assumed_blockchain_size = 0;\n-        m_assumed_chain_state_size = 0;\n-\n-        UpdateActivationParametersFromArgs(args);\n+        UpdateFromArgs(args);\n \n         genesis = CreateGenesisBlock(1296688602, 2, 0x207fffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n         assert(consensus.hashGenesisBlock == uint256S(\"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n         vFixedSeeds.clear(); //!< Regtest mode doesn't have any fixed seeds.\n-        vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds.\n-\n-        fDefaultConsistencyChecks = true;\n-        fRequireStandard = true;\n-        m_is_test_chain = true;\n-        m_is_mockable_chain = true;\n \n         checkpointData = {\n             {\n@@ -317,16 +280,9 @@ class CRegTestParams : public CChainParams {\n             0,\n             0\n         };\n-\n-        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n-        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);\n-        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n-        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n-\n-        bech32_hrp = \"bcrt\";\n     }\n \n+protected:\n     /**\n      * Allows modifying the Version Bits regtest parameters.\n      */\n@@ -336,10 +292,24 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[d].nTimeout = nTimeout;\n     }\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n+    void UpdateFromArgs(const ArgsManager& args);\n };\n \n void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n {\n+    consensus.BIP16Exception = uint256S(args.GetArg(\"-con_bip16exception\", \"0x0\"));\n+    consensus.BIP34Height = args.GetArg(\"-con_bip34height\", 500); // BIP34 activation (Used in functional tests)\n+    consensus.BIP34Hash = uint256S(args.GetArg(\"-con_bip34hash\", \"0x0\"));\n+    consensus.BIP65Height = args.GetArg(\"-con_bip65height\", 1351); // BIP65 activation (Used in functional tests)\n+    consensus.BIP66Height = args.GetArg(\"-con_bip66height\", 1251); // BIP66 activation (Used in functional tests)\n+    consensus.CSVHeight = args.GetArg(\"-con_csvheight\", 432); // CSV activation (Used in functional tests)\n+    consensus.MinBIP9WarningHeight = args.GetArg(\"-con_minbip9warningheight\", 0); // BIP9 warning activation (Used in functional tests)\n+    // 75% of 144 for regtest by default\n+    consensus.nRuleChangeActivationThreshold = (uint32_t)args.GetArg(\"-con_nrulechangeactivationthreshold\", 108);\n+    // Faster than normal for regtest (144 instead of 2016)\n+    consensus.nMinerConfirmationWindow = (uint32_t)args.GetArg(\"-con_nminerconfirmationwindow\", 144);\n+\n+    consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n     if (gArgs.IsArgSet(\"-segwitheight\")) {\n         int64_t height = gArgs.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n         if (height < -1 || height >= std::numeric_limits<int>::max()) {\n@@ -381,6 +351,59 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n     }\n }\n \n+void CRegTestParams::UpdateFromArgs(const ArgsManager& args)\n+{\n+    UpdateActivationParametersFromArgs(args);\n+\n+    consensus.nSubsidyHalvingInterval = args.GetArg(\"-con_nsubsidyhalvinginterval\", 150);\n+    consensus.powLimit = uint256S(args.GetArg(\"-con_powlimit\", \"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n+    consensus.nPowTargetTimespan = args.GetArg(\"-con_npowtargettimespan\", 14 * 24 * 60 * 60); // two weeks\n+    consensus.nPowTargetSpacing = args.GetArg(\"-con_npowtargetspacing\", 10 * 60);\n+    consensus.fPowAllowMinDifficultyBlocks = args.GetBoolArg(\"-con_fpowallowmindifficultyblocks\", true);\n+    consensus.fPowNoRetargeting = args.GetBoolArg(\"-con_fpownoretargeting\", true);\n+\n+    // The best chain should have at least this much work.\n+    consensus.nMinimumChainWork = uint256S(args.GetArg(\"-con_nminimumchainwork\", \"0x00\"));\n+\n+    // By default assume that the signatures in ancestors of this block are valid.\n+    consensus.defaultAssumeValid = uint256S(args.GetArg(\"-con_defaultassumevalid\", \"0x00\"));\n+\n+    nDefaultPort = (uint64_t)args.GetArg(\"-ndefaultport\", 18444);\n+    nPruneAfterHeight = (uint64_t)args.GetArg(\"-npruneafterheight\", 1000);\n+    m_assumed_blockchain_size = (uint64_t)args.GetArg(\"-assumed_blockchain_size\", 0);\n+    m_assumed_chain_state_size = (uint64_t)args.GetArg(\"-assumed_chain_state_size\", 0);\n+    fDefaultConsistencyChecks = args.GetBoolArg(\"-fdefaultconsistencychecks\", true);\n+    fRequireStandard = args.GetBoolArg(\"-frequirestandard\", true);\n+    m_is_test_chain = args.GetBoolArg(\"-is_test_chain\", true);\n+    m_is_mockable_chain = args.GetBoolArg(\"-is_mockable_chain\", true);\n+\n+    bech32_hrp = args.GetArg(\"-bech32_hrp\", \"bcrt\");\n+    base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1, args.GetArg(\"-pubkeyprefix\", 111));\n+    base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1, args.GetArg(\"-scriptprefix\", 196));\n+    base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1, args.GetArg(\"-secretprefix\", 239));\n+\n+    const std::string extpubprefix = args.GetArg(\"-extpubkeyprefix\", \"043587CF\");\n+    assert(IsHex(extpubprefix) && extpubprefix.size() == 8 && \"-extpubkeyprefix must be hex string of length 8\");\n+    base58Prefixes[EXT_PUBLIC_KEY] = ParseHex(extpubprefix);\n+\n+    const std::string extprvprefix = args.GetArg(\"-extprvkeyprefix\", \"04358394\");\n+    assert(IsHex(extprvprefix) && extprvprefix.size() == 8 && \"-extprvkeyprefix must be hex string of length 8\");\n+    base58Prefixes[EXT_SECRET_KEY] = ParseHex(extprvprefix);\n+\n+    const std::string magic_str = args.GetArg(\"-pchmessagestart\", \"FABFB5DA\");\n+    assert(IsHex(magic_str) && magic_str.size() == 8 && \"-pchmessagestart must be hex string of length 8\");\n+    const std::vector<unsigned char> magic_byte = ParseHex(magic_str);\n+    std::copy(begin(magic_byte), end(magic_byte), pchMessageStart);\n+\n+    vSeeds.clear();      //!< Regtest mode doesn't have any DNS seeds by default\n+    if (gArgs.IsArgSet(\"-seednode\")) {\n+        const auto seednodes = gArgs.GetArgs(\"-seednode\");\n+        if (seednodes.size() != 1 || seednodes[0] != \"0\") {\n+            vSeeds = seednodes;\n+        }\n+    }\n+}\n+\n static std::unique_ptr<const CChainParams> globalChainParams;\n \n const CChainParams &Params() {"
      },
      {
        "sha": "c5153e1450cd3ac4810a0b0cee1e064d64cfd02a",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/340d62d48d9b48635070cc1e4e68ad443b04bd8b/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/340d62d48d9b48635070cc1e4e68ad443b04bd8b/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=340d62d48d9b48635070cc1e4e68ad443b04bd8b",
        "patch": "@@ -23,6 +23,39 @@ void SetupChainParamsBaseOptions()\n     gArgs.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_nsubsidyhalvinginterval\", \"Number of blocks between one subsidy adjustment and the next one. Default: 150 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip16exception\", \"A block hash not to validate BIP16 on. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip34height\", \"Height from which BIP34 is enforced. Default: 500 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip34hash\", \"Hardcoded hash for BIP34 activation corresponding to the bip34height so that bip30 checks can be saved. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip65height\", \"Height from which BIP65 is enforced. Default: 1351 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_bip66height\", \"Height from which BIP66 is enforced. Default: 1251 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_csvheight\", \"Height from which CSV is enforced. Default: 432 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_minbip9warningheight\", \"Height from which BIP9 warnings are used. Default: 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_powlimit\", \"Maximum proof of work target. Default 7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_npowtargettimespan\", \"Proof of work retargetting interval in seconds. Default: 2 weeks (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_npowtargetspacing\", \"Proof of work target for interval between blocks in seconds. Default: 600 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_fpowallowmindifficultyblocks\", \"Whether the chain allows minimum difficulty blocks or not. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_fpownoretargeting\", \"Whether the chain skips proof of work retargetting or not. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_nminerconfirmationwindow\", \"Interval for BIP9 deployment activation. Default: 144 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_nrulechangeactivationthreshold\", \"Minimum blocks to signal readiness for a chain for BIP9 activation. Default 108 (ie 75%). (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_nminimumchainwork\", \"The best chain should have at least this much work. Default: 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-con_defaultassumevalid\", \"By default assume that the signatures in ancestors of this block are valid. Consider using -assumevalid instead. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-ndefaultport\", \"The port to listen for connections on by default. Consider using -port instead of changing the default.  Default: 18444 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-npruneafterheight\", \"Only start prunning after this height. Default: 1000 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-assumed_blockchain_size\", \"Estimated current blockchain size (in GB) for UI purposes. Default 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-assumed_chain_state_size\", \"Estimated current chain state size (in GB) for UI purposes. Default 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-fdefaultconsistencychecks\", \"Whether -checkblockindex and -checkmempool are active by default or not. Consider using those options instead. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-frequirestandard\", \"Whether standard policy rules are applied in the local mempool by default. Consider using -acceptnonstdtxn=0 instead of changing the default. Default: 0 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-is_test_chain\", \"Whether it's allowed to set -acceptnonstdtxn=0 for this chain or not. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-is_mockable_chain\", \"Whether mocktime rpc calls are allowed or not. Default: 1 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-bech32_hrp\", \"Human readable part for bech32 addresses. See BIP173 for more info. Default: bcrt (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-pubkeyprefix\", \"Magic for base58 pubkeys. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-scriptprefix\", \"Magic for base58 scripts. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-secretprefix\", \"Magic for base58 secret keys. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-extpubkeyprefix\", \"Magic for base58 external pubkeys. Default: 043587CF (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-extprvkeyprefix\", \"Magic for base58 external secret keys. Default: 04358394 (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-pchmessagestart\", \"Magic for p2p protocol. Default: FABFB5DA (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    gArgs.AddArg(\"-seednode=<ip>\", \"Use specified node as seed node. This option can be specified multiple times to connect to multiple nodes. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n }\n \n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;"
      }
    ]
  },
  {
    "sha": "2aaf473e57de8e4a016372273a95dd89e68caf7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWFmNDczZTU3ZGU4ZTRhMDE2MzcyMjczYTk1ZGQ4OWU2OGNhZjdm",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2019-10-02T20:46:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2020-02-19T20:49:38Z"
      },
      "message": "Tests: Make sure regtest is now customizable",
      "tree": {
        "sha": "3be6652cf66407af110dd1c68436f73fb825da78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3be6652cf66407af110dd1c68436f73fb825da78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2aaf473e57de8e4a016372273a95dd89e68caf7f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEIuvzCd8AbOwfprXViGbBjqHJRKIFAl5Nn2MACgkQiGbBjqHJ\nRKJuFA/5AWimp5AHB7/Qdxv7Q0JO1Y1zT3G+zAH15VyzXpAzeBC0IPYI1fPyRPfr\nK/TCgofy0vKkHQ5gUsxx3vA/TinW/o4BcuS7rUlBVNBxne9IN2vlulUBYdXnzBgR\nGqdODfQBpv58b3P7y3r9RDofCE3K8vjJYWVHsYnyA1UGL/OaYLeNgR+1tTebciMx\ntCVAS0x2FLlfKbYlk0Zj0Ggc5UDszi/7qPzFY/gUv67VrzEZYag5eB8AsDzSu7+b\nnglnEUWRBDVbuTqvhoTh8519KIHqRjaxzScMgJ4Ob/bvs8X7cfVx3kEA5relKpB5\n9F3nGfugUBwsOxBaKmXiy6D512bt/p6t3az5bwDfj9rmeQzLI1gBCHTaEJGd6C6k\nOqQMaqEpT4SzqguaHEthqqAGJ3zw+PrwHcYxb7itP6St49leSazO7VIg6F2T58IF\n48oSvkp1icupJpBDJfcYykt+MqPTH4NyCukQt4su5iAM1U8wmLE2g5jnVabButBq\nbRefOIkEmuCdg/L26SvuVcWUCUWSAwU297ASOlZdUJ/RWF4iYoRKlbgCHmE8CEBs\nUTkGFnw0hY35c3f0DERWtKc7KiXPvVTp+R2mMFYsw32oUYZYEmIUtp6Jwe8Rpsjj\nn9wWxQM/C/tXrDqsNpUAaGdVlyDxb8t8Xd2D8rGu9frF56+KbWg=\n=0tJl\n-----END PGP SIGNATURE-----",
        "payload": "tree 3be6652cf66407af110dd1c68436f73fb825da78\nparent 340d62d48d9b48635070cc1e4e68ad443b04bd8b\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1570049171 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1582145378 +0100\n\nTests: Make sure regtest is now customizable\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aaf473e57de8e4a016372273a95dd89e68caf7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2aaf473e57de8e4a016372273a95dd89e68caf7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2aaf473e57de8e4a016372273a95dd89e68caf7f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "340d62d48d9b48635070cc1e4e68ad443b04bd8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/340d62d48d9b48635070cc1e4e68ad443b04bd8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/340d62d48d9b48635070cc1e4e68ad443b04bd8b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bad8a2e5d6e9d2ce58d921e84fc30e0fddfcd2c9",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2aaf473e57de8e4a016372273a95dd89e68caf7f/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2aaf473e57de8e4a016372273a95dd89e68caf7f/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=2aaf473e57de8e4a016372273a95dd89e68caf7f",
        "patch": "@@ -42,9 +42,9 @@ def test_config_file_parser(self):\n             self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Config setting for -wallet only applied on %s network when in [%s] section.' % (self.chain, self.chain))\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n-            conf.write('regtest=0\\n') # mainnet\n+            conf.write('is_test_chain=0\\n') # like mainnet\n             conf.write('acceptnonstdtxn=1\\n')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: acceptnonstdtxn is not currently supported for main chain')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: acceptnonstdtxn is not currently supported for %s chain' % self.chain)\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('nono\\n')"
      }
    ]
  }
]