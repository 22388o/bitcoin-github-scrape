jgarzik,2014-08-13T12:49:05Z,~~It does not make much sense to put CScript class to scriptutils.h.  CScript is not a utility.~~\n,https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52043193,52043193,
sipa,2014-08-13T12:52:27Z,"@jgarzik CScript is defined in script/script.h, scriptutils.h only contains whatever isn't necessary for validation.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52043524,52043524,
jgarzik,2014-08-13T12:59:20Z,@sipa Actually it was just the first commit.  CScript _is_ in scriptutils.h...  until it is moved again in a further commit.\n,https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52044213,52044213,
theuni,2014-08-13T15:02:06Z,"Great work! I really like this idea, it's something I've been wanting to do for a long time.\n\nHowever, I would really prefer that this be broken up into 2 steps: splitting out libbitcoinscript as a convenience library, THEN exposing it as a shared lib once that's stabilized. There are just too many issues to work wrt packaging/distribution/api/abi/etc to introduce a shared lib haphazardly. Once ",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52060557,52060557,
jgarzik,2014-08-13T15:22:25Z,"Generally agreed.  I'm curious about the C API, versus C++.  Any comment on that design decision?  Do we want to start providing a C API in additional to C++?  If yes, to what extent?  All core datastructures?\n\nData point, may or may not be relevant:  The few C++-native projects I know of that export a C API typically have a One Big C Wrapper approach, that sits on top of a first class C++ API. ",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52063547,52063547,
theuni,2014-08-13T15:29:12Z,"@jgarzik I think the c api approach is basically the only reasonable one until we have a set of cleaned up c++ structures that can be exported. We don't have any kind of c++ api, only internal data structures.\n\nI think this is a great first step towards that though, and I would be very willing to work on it if others agree it's the way forward.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52064558,52064558,
sipa,2014-08-13T15:32:54Z,"I like this approach in general. I don't think we're ready to start exposing a shared library with a stable API for core data structures, but the sufficiently encapsulated approach of ""Take a bunch of serialized structures, and compute something with it"" should be very safe. Libsecp256k1 uses the same approach by the way - none of the internal data structures are accessible through the public API.",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52065125,52065125,
jtimon,2014-08-13T19:08:14Z,"Ack on the general intent. I'm precisely working on separating things on script and I think I'm close to find something that's ready for a PR, but so far I've been doing incremental little improvements first like #4617 #4680 #4681 #4555 #4694 and #4695 \nRight now it's pretty dirty with ugly commits and half-backed ideas, but you can get a general sense of where I'm headed here: https://github.com",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52095360,52095360,
TheBlueMatt,2014-08-14T02:52:29Z,"@jtimon Well it looks like you're trying to make this library expose more and weight less, which is of course the goal, but I'm just trying to push this step-by-step, so I think they're very much compatible.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52138242,52138242,
TheBlueMatt,2014-08-14T02:53:23Z,"@jgarzik re: C-vs-C++: It was originally C++, but since its using literally nothing C++ in the API, I figured its easier to expose it as a C API and that way its easy to include from C++ or C code, whereas using vectors would make it hard from C...\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52138288,52138288,
laanwj,2014-08-14T02:56:59Z,"+1 for this C API that doesn't expose any of the internal data structures and is purely data in/out. That's much easier to wrap in Python (ctypes) and a bunch and other languages.\nDumb interoperability is what we need here, not a fancy interface.\n(though that can, of course, be done later! But my point is that it shouldn't hold up this very important work)\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52138463,52138463,
TheBlueMatt,2014-08-14T02:57:56Z,The goal is to continue to use this to expose _only_ the minimum required APIs for someone to use much of Bitcoin Core's validation engine to do the consensus-critical stuff and can still feel special for having re-implemented things.\n,https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52138504,52138504,
TheBlueMatt,2014-08-14T02:59:32Z,"Note that the library is very deliberately not built by default (yet), also script/libbitcoinscript.h should move to an include/ directory, I think, but, again, I'll leave that for @theuni after this gets merged.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52138581,52138581,
theuni,2014-08-14T04:53:36Z,"@TheBlueMatt for this PR, would you mind removing the libtool lib so that the code changes can be reviewed independently of the build discussion? There are several build-side things that I'd like to address before actually introducing the lib, but that shouldn't slow this down.\n\nI'll verify the code movement is 1:1 with the originals tomorrow if no one beats me to it.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52143659,52143659,
TheBlueMatt,2014-08-14T04:56:01Z,"@theuni hmm? its all disabled-by-default, whats the harm? Also, having more people verify 1:1 is always welcome :).\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52143760,52143760,
TheBlueMatt,2014-08-14T04:56:16Z,"(and not in configure --help yet, either, as its not supported)\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52143771,52143771,
jtimon,2014-08-14T19:47:12Z,"So I have manually reproduced all the code movements until I've got to a 0-diff branch here:\nhttps://github.com/jtimon/bitcoin/tree/libscript2\n\nIn the last commit you can see only pure changes instead of code movements (plus some include fixes). Nothing bad detected in the process, but yeah, the more people that independently verify is 1:1 the better, I'll leave that branch there in case is use",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52233750,52233750,
theuni,2014-08-14T22:06:36Z,"I went through and manually c/p from the old files to the new. The diffs lined up perfectly other than a few expected formatting changes.\n\nI really don't like the fact that CheckSig is defined differently based on which object you're building (standalone vs unified). Among other things, it’s confusing to read and means that they can’t both be used at the same time (for ex, a test to compare thei",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52251475,52251475,
jtimon,2014-08-15T10:33:48Z,I would prefer to merge this as is and then change the header to add a\ncache bool param and remove the redundancy. I'm biased since this blocks\nfurther refactor work in script and I just prefer to have it merged soon\nthan it being perfect. It's good enough for first step I wouldn't like to\ndelay.\n,https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52293596,52293596,
sipa,2014-08-15T11:18:55Z,"I would prefer CheckSig to remain where it was, but take the\nCSignatureCache object as an optional parameter, which is queried and\nupdated when provided. The usual calls inside script could use the default\ncache, the call in the C wrapper interface could pass NULL.\n\nThis would also be compatible with potentially later extending the\ninterface to have context objects, which could hold such a c",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52296216,52296216,
theuni,2014-08-15T16:09:17Z,"I still contend that this should be split up so that the code movement and lib issues can be addressed separately. I really don't see any disadvantage in that.\n\nThat said, I'd go along with a merge if the issues above will be worked out afterwards.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52325085,52325085,
jtimon,2014-08-16T08:21:30Z,"yeah I would do the code movement from script to scriptutils and script/script first, that would be very simple to merge and the following standalone PR would also be more readable later, but please, let's merge something soon.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52387328,52387328,
petertodd,2014-08-16T22:19:19Z,"We should put the word ""consensus"" or at least ""validation"" into the name of this library somewhere. I'd like us to send a clear message that you can rely on it to accurately validate scripts, and that this library does so significantly more reliably than other alternatives. \n\nAlso, ACK on concept of a C-level interface ""black box"". I'd rather keep what it does and how it exposes functionality a",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52407435,52407435,
sipa,2014-08-17T11:50:03Z,"We perhaps want to keep the externally accessible flags different from the ones used internally.\n\nSome reasons:\n- Caching currently doesn't make sense as an exposed interface flag.\n- Some future flags (like BIP62 ones) may be too low level to expose.\n- I'd like to keep bitcoinscript.{h,cpp} purely a wrapper around internal stuff; the fact that script.h includes bitcoinscript.h is a bit ugly i",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52419868,52419868,
sipa,2014-08-17T11:55:18Z,"@petertodd I like the fact that this library would be pretty much purely consensus-critical stuff, but it is not _all_ consensus critical code - a fair deal of how UTXO handling/block connection/reorgs work belongs there too...\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52419961,52419961,
TheBlueMatt,2014-08-18T23:29:04Z,"Sorry about the delay here (my drive crashed and had to rebuild from backups).\n\nThe reason for having a separate CheckSig instead of building the same for both was because I wanted to avoid building the CSignatureCache object in the text at all. I could #ifdef that part out, if y'all prefer, but I want to atleast get script things properly separated and then separate out the other crap later as ",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52570362,52570362,
TheBlueMatt,2014-08-19T00:01:23Z,"Builds for me....\n\nOn 08/18/14 23:32, BitcoinPullTester wrote:\n\n> Automatic sanity-testing: FAILED BUILD/TEST, see\n> http://jenkins.bluematt.me/pull-tester/p4692_875bdaab3e2f670ac44f587d496b637fb7df091b/\n> for binaries and test log.\n> \n> This could happen for one of several reasons:\n> 1. It chanages paths in makefile.linux-mingw or otherwise changes build\n> scripts in a way that made the",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52573588,52573588,
sipa,2014-08-19T02:32:56Z,"For now, the layering is ""there is a bunch of internal object code -\nincluding all of bitcoin core - with a tiny wrapper to expose a subset of\nthe functionality"". It feels wrong the have that internal code depend on\nthe wrapper.\n\nI agree it would be nice to have bitcoin core one day not include script\nverification code at all, and delegate that to a separate library only\nthrough such a simp",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52583265,52583265,
TheBlueMatt,2014-08-19T03:11:52Z,"sipa: Hmm, what about three files (ewww)? bitcoinscript.h which has just the publicly exposed parts but not internal headers, script.h which has just internal stuff, and some third file that has internal parts that are exposed to the public (with necessary includes). Specifically, I dont want to have things like the flags for verification duplicated.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52585511,52585511,
theuni,2014-08-19T03:15:58Z,"@TheBlueMatt pull-tester is failing because the external headers aren't installed. We've never installed headers, so that's not a one-line fix.\n\nI spent a good chunk of the day working on getting exports working properly. It was simple for Linux, but it's going to be quite complicated for windows/osx. We have no infrastructure for building shared libs there, so it's going to require a re-working",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52585702,52585702,
sipa,2014-08-19T03:16:42Z,"It's two different APIs, with different goals and (partially) different\nfeatures. I don't care about duplicating a few flags.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52585747,52585747,
sipa,2014-08-19T04:14:15Z,"The public API flags could even be a simple enum (not bit flags), with\nvalues like verify_prebip16, verify_bip16, verify_strict, ...\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52588496,52588496,
jgarzik,2014-08-19T04:17:40Z,"+1 for keeping the bit flags, if you can\n\nThough in general agree w/ @sipa   When defining APIs, sometimes you wind up with a bit of duplication.  Not a big issue in the bigger picture.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52588680,52588680,
BitcoinPullTester,2014-08-20T03:07:45Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/p4692_176ec02a6c567d84363ea2394f0508a4f67a82fc/ for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/p",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52729043,52729043,
TheBlueMatt,2014-08-20T03:07:57Z,"@theuni OK, I added the link to fix OSX. Right now this pull works on linux/osx (albeit with too many symbols exposed), and builds a static library on windows (no dll yet, needs the symbol exposure stuff worked out). So, either this pull needs to wait on the symbol exposure stuff and then just add the macros, or the symbol exposure pull needs to throw in the one macro, I dont see much of a differe",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52729052,52729052,
theuni,2014-08-20T03:48:20Z,"There's much more to it for building dll's. For starters, we'll need 2 sets of dependencies and a way to cope with them (dllimport vs dllexport). We'll have to rewrite a good chunk of configure to quit assuming static linkage for mingw. After those are done, we can teach our headers how to cope with the 2 types of builds. Then we'll need some tests to verify that the dll actually does something us",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52730890,52730890,
TheBlueMatt,2014-08-20T07:00:08Z,"Yea, you need to have a define for building (dllexport) vs installing (dllimport), but really these aren't that hard. Anyway, its up to you, either put the the ability to build a dll on windows in a separate pull or this one can wait until the infrastructure for dllimport/dllexport/gcc symbol export is in place and I'll get it in here.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-52740560,52740560,
petertodd,2014-08-23T00:34:59Z,"@TheBlueMatt re: naming, long term I think we need a ""libbtcconsensus"" that holds all the consensus-critical code, so why not just name the library that? Obviously it'll be incomplete, but we can move functionality over in pieces.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-53137326,53137326,
TheBlueMatt,2014-08-23T02:12:24Z,"@petertodd yea, but I think we're so far away from that...I dont know if in the end we'll get a libbtcconsensus which uses a libbtcscript or just force everyone onto a libbtcconsensus (I might be in favor of the second, but I dont know what people will want/demand).\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-53139979,53139979,
TheBlueMatt,2014-08-23T02:13:03Z,"In any case, if we do get a single library, it would be to force people to let libbtc\* handle all block thinking, and then just deal with its results, and would probably want to avoid exposing script stuff directly.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-53139990,53139990,
petertodd,2014-08-23T08:13:32Z,"@TheBlueMatt re: exposing script stuff directly, I'm not opposed to that even with a libbtcconsensus library, because often it can still be useful to be able to evaluate script execution independent of chain validity, for instance to determine if a transaction could be mined in the future.\n\nAlso a libbtcconsensus library will likely have more than just the consensus code strictly needed by a ful",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-53146394,53146394,
laanwj,2014-08-23T08:48:11Z,"@petertodd Disagree about including a SPV implementation - a consensus library should be just the consensus, and the absolute minimum amount of code to implement that, nothing more. It's not meant as a reference anything, that's what Bitcoin Core is already. Well it could be included _in the repository_ if it is clearly marked as an example of using the library.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-53147096,53147096,
TheBlueMatt,2014-08-23T09:03:35Z,"I agree with @laanwj, my goal here and in the future is to provide Bitcoin Core's consensus in an easily-readable form to any clients who want it in a shared library. SPV...meh, its easy enough to implement SPV, the bugs creep in in the wallet, and I'm not sure we want to do that too.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-53147402,53147402,
petertodd,2014-08-24T04:00:38Z,"@laanwj With headers-first my understanding is we will have essentially a SPV-consensus layer, which develops into full consensus as blocks are downloaded. Since a consensus library won't include networking code in it, I see no harm in ensuring that the SPV-consensus part of that library can be used as-is; most likely the natural path of development will make it so anyway.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-53177043,53177043,
jtimon,2014-08-28T09:20:14Z,"Can someone help verify that the changes in #4754 are moving code only?\nIt will make this PR easier to read when reopened and the sooner it is merged, the sooner other changes in script will stop conflicting with these simple code movements.\n",https://github.com/bitcoin/bitcoin/pull/4692#issuecomment-53693137,53693137,
sipa,2014-08-13T12:08:01Z,It is necessary to pass scriptSig? It could be taken from txTo.vin[nIn].scriptSig?\n,https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16171442,16171442,src/script/standalone.cpp
luke-jr,2014-08-13T12:18:32Z,"This is more flexible; maybe the scriptSig being passed is some new form of signed message, for example. But it would make sense to accept NULL to do the extraction from txTo...\n",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16171785,16171785,src/script/standalone.cpp
TheBlueMatt,2014-08-14T04:34:26Z,"ACK, fixed.\n",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16220893,16220893,src/script/standalone.cpp
laanwj,2014-08-19T10:30:25Z,What is the rationale for moving this implementation to the header?\n,https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16406837,16406837,src/core.h
TheBlueMatt,2014-08-19T23:09:30Z,"Its needed to not have to build all of core.cpp, which pulls in quite a bit more weight.\n",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16450308,16450308,src/core.h
sipa,2014-08-19T23:12:01Z,"That's broken. If there is logic in core (whether it's in h or cpp) that you don't want, it should be split up as a whole. \n",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16450392,16450392,src/core.h
TheBlueMatt,2014-08-19T23:13:52Z,"Huh? it needs two functions, moving them to a separate file makes no sense, its two lines of code.\n",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16450446,16450446,src/core.h
sipa,2014-08-19T23:21:13Z,"I don't mind moving these functions. But not including the .cpp source in the library while you are relying on its header file is fragile - just a refactor may break the library. IMHO, the .h and .cpp should be considered as a unit, and if it it turns out that we want the library to be leaner, then that means that the source code needs to be changed to support that.\n\nI'd prefer to not do any suc",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16450722,16450722,src/core.h
TheBlueMatt,2014-08-19T23:26:53Z,"We already have several functions implemented in core.h, including core.cpp doesnt just pull in core.cpp, but quite a few others quite quickly. The library weighs a lot now, but including core.cpp would end up with half of bitcoind...\nre: modifying the header file and breaking build? That's what we have pull-tester (or Travis) for, they tell you if you break something dumb.\n",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16450935,16450935,src/core.h
TheBlueMatt,2014-08-19T23:29:30Z,"The use of core.h without core.cpp simply signifies ""I'm using the definitions and maybe a few of the serialization/deserialization routines, but I dont care about most of the object""\n",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16451029,16451029,src/core.h
TheBlueMatt,2014-08-19T23:30:04Z,"And, the first step in making the library lighter later, would be exactly this.\n",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16451047,16451047,src/core.h
laanwj,2014-08-20T07:12:45Z,I agree with @sipa here. Include files are the interface for the implementation file. Including one but not linking the other is confusing. Please avoid that. Moving functions from the .cpp to the .h should not result in build errors.\n\nI'm sure what you want can be solved some other way. I wouldn't worry about size of the resulting library at all in this initial pull.\n,https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16461524,16461524,src/core.h
jtimon,2014-08-20T10:33:06Z,"If VerifyScript becomes a templated function as shown in https://github.com/jtimon/bitcoin/commit/886260173ee9367b5c00d445fa8f7b678921da4e (well, something simpler and less dirty, that's just a thinking branch for now), the standalone can instantiate the functions with its own minimal CTransaction type without any need to link core.o or include core.h\nMaybe other C++ implementations like libcoin ",https://github.com/bitcoin/bitcoin/pull/4692#discussion_r16468533,16468533,src/core.h
