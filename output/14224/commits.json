[
  {
    "sha": "c1c726efb84d946ea6ebf7b171e1ea952f189da4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWM3MjZlZmI4NGQ5NDZlYTZlYmY3YjE3MWUxZWE5NTJmMTg5ZGE0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-14T17:26:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-12T13:41:49Z"
      },
      "message": "Document unsigned integer wraparounds with ALLOW_WRAPAROUND (intentional) or WARNING_UNINTENTIONAL_WRAPAROUND (unintentional)",
      "tree": {
        "sha": "62223bc405add7b9332dc123f8f92010671686da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62223bc405add7b9332dc123f8f92010671686da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1c726efb84d946ea6ebf7b171e1ea952f189da4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c726efb84d946ea6ebf7b171e1ea952f189da4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c726efb84d946ea6ebf7b171e1ea952f189da4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c726efb84d946ea6ebf7b171e1ea952f189da4/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae32806ea20235c4542b1a5d4011df5ae267b58a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae32806ea20235c4542b1a5d4011df5ae267b58a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae32806ea20235c4542b1a5d4011df5ae267b58a"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 96,
      "deletions": 59
    },
    "files": [
      {
        "sha": "09daaebd236a8c82bd81fad4af02c14f3679e6ed",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -95,6 +95,7 @@ endif\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n+  attributes.h \\\n   base58.h \\\n   bech32.h \\\n   bloom.h \\"
      },
      {
        "sha": "b1fef3b21e286aee077f5ee5671d91b42ab87867",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_ARITH_UINT256_H\n #define BITCOIN_ARITH_UINT256_H\n \n+#include <attributes.h>\n #include <assert.h>\n #include <cstring>\n #include <stdexcept>\n@@ -168,7 +169,7 @@ class base_uint\n     base_uint& operator*=(const base_uint& b);\n     base_uint& operator/=(const base_uint& b);\n \n-    base_uint& operator++()\n+    WARNING_UNINTENTIONAL_WRAPAROUND base_uint& operator++()\n     {\n         // prefix operator\n         int i = 0;"
      },
      {
        "sha": "d12272949008a59ff7ce6f4271eea43d4072ab3f",
        "filename": "src/attributes.h",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ATTRIBUTES_H\n+#define BITCOIN_ATTRIBUTES_H\n+\n+// Use ALLOW_WRAPAROUND to annotate functions that are known to cause unsigned integer\n+// wraparounds where the modular arithmetic is intentional (e.g. hash functions).\n+#if defined(__clang__)\n+#  define ALLOW_WRAPAROUND __attribute__((no_sanitize(\"unsigned-integer-overflow\")))\n+#else\n+#  define ALLOW_WRAPAROUND\n+#endif\n+\n+// Use WARNING_UNINTENTIONAL_WRAPAROUND to annotate existing functions that are known to cause\n+// unsigned integer wraparounds where the modular arithmetic is unintentional.\n+//\n+// Do not add new code with functions annotated WARNING_UNINTENTIONAL_WRAPAROUND. Newly introduced\n+// code should not trigger unintentional integer wraparounds.\n+#if defined(__clang__)\n+#  define WARNING_UNINTENTIONAL_WRAPAROUND __attribute__((no_sanitize(\"unsigned-integer-overflow\")))\n+#else\n+#  define WARNING_UNINTENTIONAL_WRAPAROUND\n+#endif\n+\n+#endif // BITCOIN_ATTRIBUTES_H"
      },
      {
        "sha": "28d4f2b07fa09bc6488febda68e54994fef53a83",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -5,12 +5,14 @@\n #ifndef BITCOIN_BENCH_BENCH_H\n #define BITCOIN_BENCH_BENCH_H\n \n+#include <attributes.h>\n+\n+#include <chrono>\n #include <functional>\n #include <limits>\n #include <map>\n #include <string>\n #include <vector>\n-#include <chrono>\n \n #include <boost/preprocessor/cat.hpp>\n #include <boost/preprocessor/stringize.hpp>\n@@ -67,7 +69,7 @@ class State\n     {\n     }\n \n-    inline bool KeepRunning()\n+    WARNING_UNINTENTIONAL_WRAPAROUND inline bool KeepRunning()\n     {\n         if (m_num_iters_left--) {\n             return true;"
      },
      {
        "sha": "b3c7bc077909caaa1b3e177264fce11a8ee4187c",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -2,13 +2,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <attributes.h>\n #include <bloom.h>\n-\n-#include <primitives/transaction.h>\n #include <hash.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n #include <script/script.h>\n #include <script/standard.h>\n-#include <random.h>\n #include <streams.h>\n \n #include <math.h>\n@@ -230,7 +230,7 @@ CRollingBloomFilter::CRollingBloomFilter(const unsigned int nElements, const dou\n }\n \n /* Similar to CBloomFilter::Hash */\n-static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n+ALLOW_WRAPAROUND static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\n     return MurmurHash3(nHashNum * 0xFBA4C795 + nTweak, vDataToHash);\n }\n "
      },
      {
        "sha": "59d5ad6c80c8ae3c3f812f6c43ca163d0dcb9fe2",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <attributes.h>\n #include <chain.h>\n \n /**\n@@ -133,7 +134,7 @@ arith_uint256 GetBlockProof(const CBlockIndex& block)\n     return (~bnTarget / (bnTarget + 1)) + 1;\n }\n \n-int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\n+WARNING_UNINTENTIONAL_WRAPAROUND int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\n {\n     arith_uint256 r;\n     int sign = 1;"
      },
      {
        "sha": "4b3f72c0b730fc4efbab1166113c5e73064fbef8",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_CHAIN_H\n \n #include <arith_uint256.h>\n+#include <attributes.h>\n #include <consensus/params.h>\n #include <primitives/block.h>\n #include <tinyformat.h>\n@@ -474,7 +475,7 @@ class CChain {\n     }\n \n     /** Return the maximal height in the chain. Is equal to chain.Tip() ? chain.Tip()->nHeight : -1. */\n-    int Height() const {\n+    WARNING_UNINTENTIONAL_WRAPAROUND int Height() const {\n         return vChain.size() - 1;\n     }\n "
      },
      {
        "sha": "2064a626da73e4ad935f03309cfcf785b243e191",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -2,10 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <core_io.h>\n-\n+#include <attributes.h>\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n+#include <core_io.h>\n #include <key_io.h>\n #include <script/script.h>\n #include <script/standard.h>\n@@ -26,7 +26,7 @@ UniValue ValueFromAmount(const CAmount& amount)\n             strprintf(\"%s%d.%08d\", sign ? \"-\" : \"\", quotient, remainder));\n }\n \n-std::string FormatScript(const CScript& script)\n+WARNING_UNINTENTIONAL_WRAPAROUND std::string FormatScript(const CScript& script)\n {\n     std::string ret;\n     CScript::const_iterator it = script.begin();"
      },
      {
        "sha": "038cccdbe2665444981ad6b506b136d4c5805ecb",
        "filename": "src/crypto/chacha20.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/chacha20.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/chacha20.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha20.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -5,8 +5,9 @@\n // Based on the public domain implementation 'merged' by D. J. Bernstein\n // See https://cr.yp.to/chacha.html.\n \n-#include <crypto/common.h>\n+#include <attributes.h>\n #include <crypto/chacha20.h>\n+#include <crypto/common.h>\n \n #include <string.h>\n \n@@ -71,7 +72,7 @@ void ChaCha20::Seek(uint64_t pos)\n     input[13] = pos >> 32;\n }\n \n-void ChaCha20::Output(unsigned char* c, size_t bytes)\n+ALLOW_WRAPAROUND void ChaCha20::Output(unsigned char* c, size_t bytes)\n {\n     uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;\n     uint32_t j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;"
      },
      {
        "sha": "7262a0325dd523cc887524e4dc96fba198269648",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <crypto/ripemd160.h>\n-\n+#include <attributes.h>\n #include <crypto/common.h>\n+#include <crypto/ripemd160.h>\n \n #include <string.h>\n \n@@ -32,7 +32,7 @@ void inline Initialize(uint32_t* s)\n \n uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32 - i)); }\n \n-void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)\n+ALLOW_WRAPAROUND void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)\n {\n     a = rol(a + f + x + k, r) + e;\n     c = rol(c, 10);\n@@ -51,7 +51,7 @@ void inline R42(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, ui\n void inline R52(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }\n \n /** Perform a RIPEMD-160 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+ALLOW_WRAPAROUND void Transform(uint32_t* s, const unsigned char* chunk)\n {\n     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];\n     uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;"
      },
      {
        "sha": "9ddb9cdd4ed3415902b8efe4a22e1c9a5fa54aa9",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <crypto/sha1.h>\n-\n+#include <attributes.h>\n #include <crypto/common.h>\n+#include <crypto/sha1.h>\n \n #include <string.h>\n \n@@ -15,7 +15,7 @@ namespace\n namespace sha1\n {\n /** One round of SHA-1. */\n-void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)\n+ALLOW_WRAPAROUND void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)\n {\n     e += ((a << 5) | (a >> 27)) + f + k + w;\n     b = (b << 30) | (b >> 2);\n@@ -43,7 +43,7 @@ const uint32_t k3 = 0x8F1BBCDCul;\n const uint32_t k4 = 0xCA62C1D6ul;\n \n /** Perform a SHA-1 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t* s, const unsigned char* chunk)\n+ALLOW_WRAPAROUND void Transform(uint32_t* s, const unsigned char* chunk)\n {\n     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4];\n     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;"
      },
      {
        "sha": "4377c8268f0587b6d93361ca6b1dcd9642311907",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -2,8 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <crypto/sha256.h>\n+#include <attributes.h>\n #include <crypto/common.h>\n+#include <crypto/sha256.h>\n \n #include <assert.h>\n #include <string.h>\n@@ -53,7 +54,7 @@ uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x <<\n uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }\n \n /** One round of SHA-256. */\n-void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k)\n+ALLOW_WRAPAROUND void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k)\n {\n     uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k;\n     uint32_t t2 = Sigma0(a) + Maj(a, b, c);\n@@ -75,7 +76,7 @@ void inline Initialize(uint32_t* s)\n }\n \n /** Perform a number of SHA-256 transformations, processing 64-byte chunks. */\n-void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n+ALLOW_WRAPAROUND void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\n {\n     while (blocks--) {\n         uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];"
      },
      {
        "sha": "0fd47bc181ca1fde40cb4d9bdadfd60dfa806b15",
        "filename": "src/crypto/sha512.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/sha512.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/crypto/sha512.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -2,9 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <crypto/sha512.h>\n-\n+#include <attributes.h>\n #include <crypto/common.h>\n+#include <crypto/sha512.h>\n \n #include <string.h>\n \n@@ -22,7 +22,7 @@ uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x <<\n uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }\n \n /** One round of SHA-512. */\n-void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)\n+ALLOW_WRAPAROUND void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)\n {\n     uint64_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n     uint64_t t2 = Sigma0(a) + Maj(a, b, c);\n@@ -44,7 +44,7 @@ void inline Initialize(uint64_t* s)\n }\n \n /** Perform one SHA-512 transformation, processing a 128-byte chunk. */\n-void Transform(uint64_t* s, const unsigned char* chunk)\n+ALLOW_WRAPAROUND void Transform(uint64_t* s, const unsigned char* chunk)\n {\n     uint64_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n     uint64_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;"
      },
      {
        "sha": "a149f06a5a91a7b490556867ba85fd6a71af83a5",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -2,17 +2,17 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <hash.h>\n+#include <attributes.h>\n #include <crypto/common.h>\n #include <crypto/hmac_sha512.h>\n-\n+#include <hash.h>\n \n inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n }\n \n-unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)\n+ALLOW_WRAPAROUND unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)\n {\n     // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;"
      },
      {
        "sha": "ce1010923db173574e9936ed222c9d41e3b747b6",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -3,10 +3,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <attributes.h>\n+#include <clientversion.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n-\n-#include <clientversion.h>\n #include <primitives/transaction.h>\n #include <streams.h>\n #include <txmempool.h>\n@@ -241,7 +241,7 @@ void TxConfirmStats::UpdateMovingAverages()\n }\n \n // returns -1 on error conditions\n-double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n+WARNING_UNINTENTIONAL_WRAPAROUND double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n                                          double successBreakPoint, bool requireGreater,\n                                          unsigned int nBlockHeight, EstimationResult *result) const\n {"
      },
      {
        "sha": "639583d34b27e902e767fdc072a77744bd18b03c",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -5,18 +5,18 @@\n #ifndef BITCOIN_PREVECTOR_H\n #define BITCOIN_PREVECTOR_H\n \n-#include <assert.h>\n-#include <stdlib.h>\n-#include <stdint.h>\n-#include <string.h>\n+#include <attributes.h>\n+#include <compat.h>\n \n #include <algorithm>\n+#include <assert.h>\n #include <cstddef>\n #include <iterator>\n+#include <stdint.h>\n+#include <stdlib.h>\n+#include <string.h>\n #include <type_traits>\n \n-#include <compat.h>\n-\n #pragma pack(push, 1)\n /** Implements a drop-in replacement for std::vector<T> which stores up to N\n  *  elements directly (without heap allocation). The types Size and Diff are\n@@ -293,8 +293,8 @@ class prevector {\n     iterator end() { return iterator(item_ptr(size())); }\n     const_iterator end() const { return const_iterator(item_ptr(size())); }\n \n-    reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }\n-    const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }\n+    WARNING_UNINTENTIONAL_WRAPAROUND reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }\n+    WARNING_UNINTENTIONAL_WRAPAROUND const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }\n     reverse_iterator rend() { return reverse_iterator(item_ptr(-1)); }\n     const_reverse_iterator rend() const { return const_reverse_iterator(item_ptr(-1)); }\n "
      },
      {
        "sha": "6960276d71b7464cc2e8f00178be4edfcc9e654c",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <script/interpreter.h>\n-\n+#include <attributes.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n #include <pubkey.h>\n+#include <script/interpreter.h>\n #include <script/script.h>\n #include <uint256.h>\n \n@@ -278,7 +278,7 @@ int FindAndDelete(CScript& script, const CScript& b)\n     return nFound;\n }\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n+WARNING_UNINTENTIONAL_WRAPAROUND bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\n {\n     static const CScriptNum bnZero(0);\n     static const CScriptNum bnOne(1);"
      },
      {
        "sha": "8382da499ca8925d71c99b81ad3a282cdef3cf82",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -3,20 +3,20 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <txmempool.h>\n-\n+#include <attributes.h>\n #include <consensus/consensus.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n-#include <validation.h>\n-#include <policy/policy.h>\n #include <policy/fees.h>\n+#include <policy/policy.h>\n #include <reverse_iterator.h>\n #include <streams.h>\n #include <timedata.h>\n+#include <txmempool.h>\n #include <util/system.h>\n #include <util/moneystr.h>\n #include <util/time.h>\n+#include <validation.h>\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, unsigned int _entryHeight,\n@@ -208,7 +208,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n-void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)\n+WARNING_UNINTENTIONAL_WRAPAROUND void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)\n {\n     setEntries parentIters = GetMemPoolParents(it);\n     // add or remove this tx as a child of each parent\n@@ -303,7 +303,7 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n     }\n }\n \n-void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\n+WARNING_UNINTENTIONAL_WRAPAROUND void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\n {\n     nSizeWithDescendants += modifySize;\n     assert(int64_t(nSizeWithDescendants) > 0);\n@@ -312,7 +312,7 @@ void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFe\n     assert(int64_t(nCountWithDescendants) > 0);\n }\n \n-void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)\n+WARNING_UNINTENTIONAL_WRAPAROUND void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)\n {\n     nSizeWithAncestors += modifySize;\n     assert(int64_t(nSizeWithAncestors) > 0);"
      },
      {
        "sha": "017c1490d519ce6954cacc1fae1672d81aae441b",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <attributes.h>\n #include <util/strencodings.h>\n \n #include <tinyformat.h>\n@@ -106,7 +107,7 @@ std::vector<unsigned char> ParseHex(const std::string& str)\n     return ParseHex(str.c_str());\n }\n \n-void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n+WARNING_UNINTENTIONAL_WRAPAROUND void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n     size_t colon = in.find_last_of(':');\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n     bool fHaveColon = colon != in.npos;"
      },
      {
        "sha": "55bfbec8ada7db4a73b483ec9b3031426d25b865",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1c726efb84d946ea6ebf7b171e1ea952f189da4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "patch": "@@ -3,9 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <validation.h>\n-\n #include <arith_uint256.h>\n+#include <attributes.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <checkpoints.h>\n@@ -39,6 +38,7 @@\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <validationinterface.h>\n+#include <validation.h>\n #include <warnings.h>\n \n #include <future>\n@@ -1567,7 +1567,7 @@ int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)\n \n /** Undo the effects of this block (with given index) on the UTXO set represented by coins.\n  *  When FAILED is returned, view is left in an indeterminate state. */\n-DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n+WARNING_UNINTENTIONAL_WRAPAROUND DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\n {\n     bool fClean = true;\n \n@@ -3445,7 +3445,7 @@ static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CCh\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+WARNING_UNINTENTIONAL_WRAPAROUND bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -4682,7 +4682,7 @@ int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::D\n \n static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n-bool LoadMempool()\n+WARNING_UNINTENTIONAL_WRAPAROUND bool LoadMempool()\n {\n     const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;"
      }
    ]
  },
  {
    "sha": "0373038cedc07e3d775a1055c0da45f4e8fda2b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzczMDM4Y2VkYzA3ZTNkNzc1YTEwNTVjMGRhNDVmNGU4ZmRhMmI3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-16T07:08:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-11-12T13:41:49Z"
      },
      "message": "Add developer note about ALLOW_WRAPAROUND",
      "tree": {
        "sha": "9f9f632f10da056ee2ddc7933c28e6dc5a734e03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f9f632f10da056ee2ddc7933c28e6dc5a734e03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0373038cedc07e3d775a1055c0da45f4e8fda2b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0373038cedc07e3d775a1055c0da45f4e8fda2b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0373038cedc07e3d775a1055c0da45f4e8fda2b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0373038cedc07e3d775a1055c0da45f4e8fda2b7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1c726efb84d946ea6ebf7b171e1ea952f189da4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1c726efb84d946ea6ebf7b171e1ea952f189da4"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0257373549b933e9e984fb811510b2e858ae4b1c",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0373038cedc07e3d775a1055c0da45f4e8fda2b7/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0373038cedc07e3d775a1055c0da45f4e8fda2b7/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=0373038cedc07e3d775a1055c0da45f4e8fda2b7",
        "patch": "@@ -444,6 +444,14 @@ General C++\n   - *Rationale*: `MakeUnique` is concise and ensures exception safety in complex expressions.\n     `MakeUnique` is a temporary project local implementation of `std::make_unique` (C++14).\n \n+- Do not rely on unsigned wrap-around semantics unless there are good reasons for doing so (e.g. hash functions).\n+  Functions that intentionally rely on unsigned wrap-around semantics should be annotated using `ALLOW_WRAPAROUND`.\n+  Functions that unintentionally trigger unsigned wrap-arounds should be annotated using\n+  `WARNING_UNINTENTIONAL_WRAPAROUND` while awaiting being fixed.\n+\n+  - *Rationale*: Intentional use of modular arithmetic needs to be annotated because unintended wraps are often bugs\n+  and we use instrumentation (e.g. `-fsanitize`) to look for those bugs.\n+\n C++ data structures\n --------------------\n "
      }
    ]
  }
]