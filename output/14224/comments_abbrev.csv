ken2812221,2018-09-15T09:46:54Z,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421546658,421546658,
DrahtBot,2018-09-15T12:44:33Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14651](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14651.html) (Refactor: Fix compiler warning in prevector",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421564692,421564692,
arvidn,2018-09-16T02:42:34Z,"there are a few `#include<>` directives that changed order, was that deliberate?\nI take it the idea is to make new code that relies on unsigned wrap-around semantics to be annotated, and current annotations to be removed as code is fixed. Is that right?\nwould it make sense to use a different name for the macro? something like: `ALLOW_WRAPAROUND`.\n\nnit: technically unsigned integers don't o",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421676888,421676888,
gmaxwell,2018-09-16T07:14:30Z,"Please don't just blindly permit existing cases that might actually be bugs. If we must do this with bypasses, the annotation macro should be different for cases where the modular arithmetic is intentional (e.g. hash functions) and where we're just silencing the warning in order to get something merged.",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421713875,421713875,
practicalswift,2018-09-16T07:18:35Z,"@arvidn `ALLOW_WRAPAROUND` is a much better name. Updated!\n\nYes, the include sorting was deliberate.\n\nYes, the idea is to make it so that new code that relies on unsigned wrap-around semantics is annotated. I've now added the following to the developer notes to clarify:\n\n> Do not rely on unsigned wrap-around semantics unless there are good reasons for doing so (e.g. hashing). Functions",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421714404,421714404,
gmaxwell,2018-09-16T07:24:22Z,"I don't agree that it is error prone. I'm aware of no study which shows as much, and it's not my experience that _intentional_ use of modular arithmetic results in bugs.\n\nThe comment should state that intentional use of it needs to be annotated because unintended wraps are often bugs and we use instrumentation to look for those bugs.\n\nBut so long as the patch just papers over behaviour tha",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421715160,421715160,
practicalswift,2018-09-16T07:24:33Z,"@gmaxwell The bulk of the existing ones were handled in #11535 which was submitted almost a year ago :-)\n\nMy main goal with this PR is to make sure we're not introducing new unintentional integer wrap arounds. Until #11535 is merged I'm afraid we need `ALLOW_WRAPAROUND` to make `-fsanitize=integer` pass, no?\n\nPlease advice on how to proceed :-)\n",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421715185,421715185,
practicalswift,2018-09-16T07:27:32Z,"@gmaxwell Yes, _intentional_ use of wraparound semantics (e.g. hashing code) is obviously not problematic. I'll update the developer note to make that crystal clear.",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421715624,421715624,
practicalswift,2018-09-16T07:36:03Z,"@gmaxwell \n\n> I don't agree that it is error prone. I'm aware of no study which shows as much\n\nFrom the paper ""Understanding Integer Overflow in C/C++"" co-authored by Regehr:\n\n_IOC’s instrumentation is designed to be semantically transparent for programs that conform to the C or C++ language standards, except in the case where a user requests additional checking for conforming but erro",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421716641,421716641,
practicalswift,2018-09-16T13:04:23Z,"@arvidn @gmaxwell Thanks for reviewing. I've now updated the developer notes and split the annotations in two as suggested by @gmaxwell: `ALLOW_WRAPAROUND` for intentional wraparounds and `WARNING_UNINTENTIONAL_WRAPAROUND` for unintentional wraparounds.\n\nCould you please re-review? :-)\n\nThese are the intentional wraparounds:\n\n```\n$ git grep ALLOW_WRAPAROUND -- ""*.cpp"" ""*.h"" "":(exclud",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421762354,421762354,
practicalswift,2018-09-17T12:29:54Z,@ken2812221 Now running also the functional tests and the quick bench test. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421995131,421995131,
practicalswift,2018-09-21T13:06:22Z,"I've now changed this PR to only add annotations.\n\nThe Travis checking is added in #14252 independently of the annotations.\n\nAlso rebased.\n\n",https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-423524356,423524356,
ken2812221,2018-09-15T09:48:27Z,Can't we pass the functional tests with integer sanitizer even we suppress those cases?,https://github.com/bitcoin/bitcoin/pull/14224#discussion_r217881077,217881077,.travis.yml
practicalswift,2018-09-15T14:44:06Z,I got it working locally but not on Travis which is a bit weird. I'm still investigating – the intention is to run also the functional tests under the sanitizer :-),https://github.com/bitcoin/bitcoin/pull/14224#discussion_r217886650,217886650,.travis.yml
arvidn,2018-09-17T14:37:40Z,"would it be unrealistic to fix all these before landing this patch, so this annotation is not needed?",https://github.com/bitcoin/bitcoin/pull/14224#discussion_r218094870,218094870,doc/developer-notes.md
practicalswift,2018-09-17T14:49:30Z,"@arvidn My main goal with this PR is to make it less likely that we introduce new unintentional wraparounds going forward, so I'll choose the quickest route to get this checked by Travis.\n\nThe progress in #11535 which fixes these cases has been quite slow during the last year, so perhaps it would make sense to first get this PR merged and then take on fixing `WARNING_UNINTENTIONAL_WRAPAROUND`?",https://github.com/bitcoin/bitcoin/pull/14224#discussion_r218099806,218099806,doc/developer-notes.md
