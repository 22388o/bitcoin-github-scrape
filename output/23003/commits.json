[
  {
    "sha": "7e88f61b285e6a356ea4f6ba384858f109559985",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTg4ZjYxYjI4NWU2YTM1NmVhNGY2YmEzODQ4NThmMTA5NTU5OTg1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-06-14T21:06:00Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-09-16T18:17:01Z"
      },
      "message": "multiprocess: Make interfaces::Chain::isTaprootActive non-const\n\ninterfaces::Chain is an abstract class, so declaring the method const\nwould be exposing internal implementation details of subclasses to\ninterface callers. And specifically this doesn't work because the\nmultiprocess implementation of the interfaces::Chain::isTaprootActive\nmethod can't be const because IPC connection state and request state is\nnot constant during the call.",
      "tree": {
        "sha": "86f1ed399bfb44c6bde11b165eaa00b0b682de4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86f1ed399bfb44c6bde11b165eaa00b0b682de4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e88f61b285e6a356ea4f6ba384858f109559985",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e88f61b285e6a356ea4f6ba384858f109559985",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e88f61b285e6a356ea4f6ba384858f109559985",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e88f61b285e6a356ea4f6ba384858f109559985/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ef84e0503994c53f77093e7ea5951a7b0edea7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef84e0503994c53f77093e7ea5951a7b0edea7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef84e0503994c53f77093e7ea5951a7b0edea7a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a134174078ad5001ae31376afbc4117a65ab10fb",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e88f61b285e6a356ea4f6ba384858f109559985/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e88f61b285e6a356ea4f6ba384858f109559985/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=7e88f61b285e6a356ea4f6ba384858f109559985",
        "patch": "@@ -289,7 +289,7 @@ class Chain\n     virtual void requestMempoolTransactions(Notifications& notifications) = 0;\n \n     //! Check if Taproot has activated\n-    virtual bool isTaprootActive() const = 0;\n+    virtual bool isTaprootActive() = 0;\n };\n \n //! Interface to let node manage chain clients (wallets, or maybe tools for"
      },
      {
        "sha": "b6778ed4cc6b22a3ad095a3ec68c2ef403c91c5e",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e88f61b285e6a356ea4f6ba384858f109559985/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e88f61b285e6a356ea4f6ba384858f109559985/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=7e88f61b285e6a356ea4f6ba384858f109559985",
        "patch": "@@ -698,7 +698,7 @@ class ChainImpl : public Chain\n             notifications.transactionAddedToMempool(entry.GetSharedTx(), 0 /* mempool_sequence */);\n         }\n     }\n-    bool isTaprootActive() const override\n+    bool isTaprootActive() override\n     {\n         LOCK(::cs_main);\n         const CBlockIndex* tip = Assert(m_node.chainman)->ActiveChain().Tip();"
      }
    ]
  }
]