[
  {
    "sha": "fb32fc78e99e8aa84f82fd971194f05a4759514a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjMyZmM3OGU5OWU4YWE4NGY4MmZkOTcxMTk0ZjA1YTQ3NTk1MTRh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-22T16:49:36Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-25T19:38:38Z"
      },
      "message": "Introduce Container template",
      "tree": {
        "sha": "1db655f454f2e29dfaef562e8dc62668b521e55b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1db655f454f2e29dfaef562e8dc62668b521e55b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb32fc78e99e8aa84f82fd971194f05a4759514a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb32fc78e99e8aa84f82fd971194f05a4759514a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb32fc78e99e8aa84f82fd971194f05a4759514a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb32fc78e99e8aa84f82fd971194f05a4759514a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91389e51c78ae3565b037e31dd5382b52bd75136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91389e51c78ae3565b037e31dd5382b52bd75136",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91389e51c78ae3565b037e31dd5382b52bd75136"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3551179c351cb01370b9a8948197b49727042fb9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb32fc78e99e8aa84f82fd971194f05a4759514a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb32fc78e99e8aa84f82fd971194f05a4759514a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fb32fc78e99e8aa84f82fd971194f05a4759514a",
        "patch": "@@ -135,6 +135,7 @@ BITCOIN_CORE_H = \\\n   support/pagelocker.h \\\n   sync.h \\\n   threadsafety.h \\\n+  templates.hpp \\\n   timedata.h \\\n   tinyformat.h \\\n   txdb.h \\"
      },
      {
        "sha": "55bff7c5a241c7122ddacf1b5eb881ce4b557815",
        "filename": "src/templates.hpp",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb32fc78e99e8aa84f82fd971194f05a4759514a/src/templates.hpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb32fc78e99e8aa84f82fd971194f05a4759514a/src/templates.hpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/templates.hpp?ref=fb32fc78e99e8aa84f82fd971194f05a4759514a",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEMPLATES_H\n+#define BITCOIN_TEMPLATES_H\n+\n+#include <assert.h>\n+#include <cstddef>\n+\n+template<typename T>\n+class Container\n+{\n+    T* pObj;\n+public:\n+    Container() : pObj(NULL) {}\n+    Container(T* pObjIn) : pObj(pObjIn) {}\n+    ~Container()\n+    {\n+        if (!IsNull())\n+            delete(pObj);\n+    }\n+\n+    bool IsNull()\n+    {\n+        return pObj == NULL;\n+    }\n+    const T& Get()\n+    {\n+        assert(!IsNull());\n+        return *pObj;\n+    }\n+    void Set(T* pObjIn)\n+    {\n+        if (!IsNull())\n+            delete(pObj);\n+        pObj = pObjIn;\n+    }\n+};\n+\n+#endif // BITCOIN_TEMPLATES_H"
      }
    ]
  },
  {
    "sha": "61a3fad47165037127c526df6106b8763e2b59e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWEzZmFkNDcxNjUwMzcxMjdjNTI2ZGY2MTA2Yjg3NjNlMmI1OWU2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-25T05:52:16Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-25T19:52:34Z"
      },
      "message": "Chainparams: Replace CBaseChainParams::Network enum with string constants (suggested by Wladimir)",
      "tree": {
        "sha": "03913791be917d7e3e8e534aa68864438708ae6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03913791be917d7e3e8e534aa68864438708ae6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61a3fad47165037127c526df6106b8763e2b59e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a3fad47165037127c526df6106b8763e2b59e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61a3fad47165037127c526df6106b8763e2b59e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a3fad47165037127c526df6106b8763e2b59e6/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb32fc78e99e8aa84f82fd971194f05a4759514a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb32fc78e99e8aa84f82fd971194f05a4759514a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb32fc78e99e8aa84f82fd971194f05a4759514a"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 60,
      "deletions": 56
    },
    "files": [
      {
        "sha": "694ab004b80bf5189ecdaf3dc9cd511458a6ae8d",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61a3fad47165037127c526df6106b8763e2b59e6/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61a3fad47165037127c526df6106b8763e2b59e6/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=61a3fad47165037127c526df6106b8763e2b59e6",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"chainparams.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -30,7 +31,7 @@ using namespace std;\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n-        strNetworkID = \"main\";\n+        strNetworkID = CBaseChainParams::MAIN;\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;\n@@ -136,7 +137,7 @@ static CMainParams mainParams;\n class CTestNetParams : public CMainParams {\n public:\n     CTestNetParams() {\n-        strNetworkID = \"test\";\n+        strNetworkID = CBaseChainParams::TESTNET;\n         consensus.nMajorityEnforceBlockUpgrade = 51;\n         consensus.nMajorityRejectBlockOutdated = 75;\n         consensus.nMajorityWindow = 100;\n@@ -196,7 +197,7 @@ static CTestNetParams testNetParams;\n class CRegTestParams : public CTestNetParams {\n public:\n     CRegTestParams() {\n-        strNetworkID = \"regtest\";\n+        strNetworkID = CBaseChainParams::REGTEST;\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.nMajorityEnforceBlockUpgrade = 750;\n         consensus.nMajorityRejectBlockOutdated = 950;\n@@ -243,31 +244,29 @@ const CChainParams &Params() {\n     return *pCurrentParams;\n }\n \n-CChainParams &Params(CBaseChainParams::Network network) {\n-    switch (network) {\n-        case CBaseChainParams::MAIN:\n+CChainParams& Params(std::string chain)\n+{\n+    if (chain == CBaseChainParams::MAIN)\n             return mainParams;\n-        case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n             return testNetParams;\n-        case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n             return regTestParams;\n-        default:\n-            assert(false && \"Unimplemented network\");\n-            return mainParams;\n-    }\n+    throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n }\n \n-void SelectParams(CBaseChainParams::Network network) {\n-    SelectBaseParams(network);\n-    pCurrentParams = &Params(network);\n+void SelectParams(std::string chain)\n+{\n+    SelectBaseParams(chain);\n+    pCurrentParams = &Params(chain);\n }\n \n bool SelectParamsFromCommandLine()\n {\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n+    std::string chain = ChainNameFromCommandLine();\n+    if (chain == CBaseChainParams::MAX_NETWORK_TYPES)\n         return false;\n \n-    SelectParams(network);\n+    SelectParams(chain);\n     return true;\n }"
      },
      {
        "sha": "7a44502aa9239bfb357b1b1ce91cfd70b30ded64",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61a3fad47165037127c526df6106b8763e2b59e6/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61a3fad47165037127c526df6106b8763e2b59e6/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=61a3fad47165037127c526df6106b8763e2b59e6",
        "patch": "@@ -65,7 +65,7 @@ class CChainParams\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */\n     bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n-    /** Return the BIP70 network string (main, test or regtest) */\n+    /** Returns the BIP70 chain name string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n@@ -101,11 +101,15 @@ class CChainParams\n  */\n const CChainParams &Params();\n \n-/** Return parameters for the given network. */\n-CChainParams &Params(CBaseChainParams::Network network);\n+/**\n+ * Returns parameters for the given BIP70 chain name.\n+ */\n+CChainParams& Params(std::string chain);\n \n-/** Sets the params returned by Params() to those for the given network. */\n-void SelectParams(CBaseChainParams::Network network);\n+/**\n+ * Sets the params returned by Params() to those for the given BIP70 chain name.\n+ */\n+void SelectParams(std::string chain);\n \n /**\n  * Looks for -regtest or -testnet and then calls SelectParams as appropriate."
      },
      {
        "sha": "d14afd73db509e94a12a259943617d9a2a610e84",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61a3fad47165037127c526df6106b8763e2b59e6/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61a3fad47165037127c526df6106b8763e2b59e6/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=61a3fad47165037127c526df6106b8763e2b59e6",
        "patch": "@@ -5,10 +5,16 @@\n \n #include \"chainparamsbase.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n \n #include <assert.h>\n \n+const std::string CBaseChainParams::MAIN = \"main\";\n+const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::MAX_NETWORK_TYPES = \"unknown_chain\";\n+\n /**\n  * Main network\n  */\n@@ -44,7 +50,7 @@ class CBaseRegTestParams : public CBaseTestNetParams\n public:\n     CBaseRegTestParams()\n     {\n-        strDataDir = \"regtest\";\n+        strDataDir = CBaseChainParams::REGTEST;\n     }\n };\n static CBaseRegTestParams regTestParams;\n@@ -70,25 +76,19 @@ const CBaseChainParams& BaseParams()\n     return *pCurrentBaseParams;\n }\n \n-void SelectBaseParams(CBaseChainParams::Network network)\n+void SelectBaseParams(std::string chain)\n {\n-    switch (network) {\n-    case CBaseChainParams::MAIN:\n+    if (chain == CBaseChainParams::MAIN)\n         pCurrentBaseParams = &mainParams;\n-        break;\n-    case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n         pCurrentBaseParams = &testNetParams;\n-        break;\n-    case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n         pCurrentBaseParams = &regTestParams;\n-        break;\n-    default:\n-        assert(false && \"Unimplemented network\");\n-        return;\n-    }\n+    else\n+        throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n }\n \n-CBaseChainParams::Network NetworkIdFromCommandLine()\n+std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n@@ -104,11 +104,11 @@ CBaseChainParams::Network NetworkIdFromCommandLine()\n \n bool SelectBaseParamsFromCommandLine()\n {\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n+    std::string chain = ChainNameFromCommandLine();\n+    if (chain == CBaseChainParams::MAX_NETWORK_TYPES)\n         return false;\n \n-    SelectBaseParams(network);\n+    SelectBaseParams(chain);\n     return true;\n }\n "
      },
      {
        "sha": "220d3800a61b0113a459c0b5a6dc37d8d4bca0e5",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61a3fad47165037127c526df6106b8763e2b59e6/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61a3fad47165037127c526df6106b8763e2b59e6/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=61a3fad47165037127c526df6106b8763e2b59e6",
        "patch": "@@ -15,13 +15,11 @@\n class CBaseChainParams\n {\n public:\n-    enum Network {\n-        MAIN,\n-        TESTNET,\n-        REGTEST,\n-\n-        MAX_NETWORK_TYPES\n-    };\n+    /** BIP70 chain name strings (main, test or regtest) */\n+    static const std::string MAIN;\n+    static const std::string TESTNET;\n+    static const std::string REGTEST;\n+    static const std::string MAX_NETWORK_TYPES;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n@@ -33,20 +31,24 @@ class CBaseChainParams\n     std::string strDataDir;\n };\n \n+/**\n+ * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n+ * Returns CBaseChainParams::MAIN by default.\n+ * Returns CBaseChainParams::MAX_NETWORK_TYPES if an invalid combination is given.\n+ */\n+std::string ChainNameFromCommandLine();\n+\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests.\n  */\n const CBaseChainParams& BaseParams();\n \n-/** Sets the params returned by Params() to those for the given network. */\n-void SelectBaseParams(CBaseChainParams::Network network);\n-\n /**\n- * Looks for -regtest or -testnet and returns the appropriate Network ID.\n- * Returns MAX_NETWORK_TYPES if an invalid combination is given.\n+ * Sets the params returned by BaseParams() to those for the appropriate chain returned by ChainNameFromCommandLine().\n+ * Raises a std::runtime_error if an unsupported chain name is given.\n  */\n-CBaseChainParams::Network NetworkIdFromCommandLine();\n+void SelectBaseParams(std::string chain);\n \n /**\n  * Calls NetworkIdFromCommandLine() and then calls SelectParams as appropriate.\n@@ -55,8 +57,7 @@ CBaseChainParams::Network NetworkIdFromCommandLine();\n bool SelectBaseParamsFromCommandLine();\n \n /**\n- * Return true if SelectBaseParamsFromCommandLine() has been called to select\n- * a network.\n+ * Return true if SelectBaseParamsFromCommandLine() has been called to select a chain.\n  */\n bool AreBaseParamsConfigured();\n "
      },
      {
        "sha": "b3813e2f75eed51e29a736084c2eab22c3b965c6",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61a3fad47165037127c526df6106b8763e2b59e6/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61a3fad47165037127c526df6106b8763e2b59e6/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=61a3fad47165037127c526df6106b8763e2b59e6",
        "patch": "@@ -141,7 +141,7 @@ void PaymentServerTests::paymentServerTests()\n     data = DecodeBase64(paymentrequest1_cert2_BASE64);\n     byteArray = QByteArray((const char*)&data[0], data.size());\n     r.paymentRequest.parse(byteArray);\n-    // Ensure the request is initialized, because network \"main\" is default, even for\n+    // Ensure the request is initialized, because network CBaseChainParams::MAIN is default, even for\n     // uninizialized payment requests and that will fail our test here.\n     QVERIFY(r.paymentRequest.IsInitialized());\n     QCOMPARE(PaymentServer::verifyNetwork(r.paymentRequest.getDetails()), false);"
      }
    ]
  },
  {
    "sha": "3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjQ1OWM3Zjg4NzQwNjRjMTNhM2M0YjlhYTMxYzgzNzI1N2MzYmQw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-22T01:50:01Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-25T19:52:34Z"
      },
      "message": "Chainparams: Use a regular factory for creating chainparams",
      "tree": {
        "sha": "07c28e58fea53daf91567c70f88449256cf5ca86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07c28e58fea53daf91567c70f88449256cf5ca86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61a3fad47165037127c526df6106b8763e2b59e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a3fad47165037127c526df6106b8763e2b59e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61a3fad47165037127c526df6106b8763e2b59e6"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 46,
      "deletions": 28
    },
    "files": [
      {
        "sha": "37183b96e80e8d4f82b28ce850c55473df4f9cd0",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"chainparams.h\"\n \n+#include \"templates.hpp\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n@@ -129,7 +130,6 @@ class CMainParams : public CChainParams {\n         };\n     }\n };\n-static CMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -189,7 +189,6 @@ class CTestNetParams : public CMainParams {\n \n     }\n };\n-static CTestNetParams testNetParams;\n \n /**\n  * Regression test\n@@ -235,30 +234,35 @@ class CRegTestParams : public CTestNetParams {\n         };\n     }\n };\n-static CRegTestParams regTestParams;\n \n-static CChainParams *pCurrentParams = 0;\n+static Container<CChainParams> currentParams;\n+static Container<CChainParams> switchingParams;\n \n const CChainParams &Params() {\n-    assert(pCurrentParams);\n-    return *pCurrentParams;\n+    return currentParams.Get();\n }\n \n-CChainParams& Params(std::string chain)\n+CChainParams* ParamsFactory(std::string chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-            return mainParams;\n+        return new CMainParams();\n     else if (chain == CBaseChainParams::TESTNET)\n-            return testNetParams;\n+        return new CTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n-            return regTestParams;\n+        return new CRegTestParams();\n     throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n }\n \n+const CChainParams& Params(std::string chain)\n+{\n+    switchingParams.Set(ParamsFactory(chain));\n+    return switchingParams.Get();\n+}\n+\n void SelectParams(std::string chain)\n {\n     SelectBaseParams(chain);\n-    pCurrentParams = &Params(chain);\n+    currentParams.Set(ParamsFactory(chain));\n }\n \n bool SelectParamsFromCommandLine()"
      },
      {
        "sha": "9b71e28c5387f15d0eed9c5cd02b118a91b99c54",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
        "patch": "@@ -95,6 +95,14 @@ class CChainParams\n     Checkpoints::CCheckpointData checkpointData;\n };\n \n+/**\n+ * Creates a CChainParams of the chosen chain and returns a\n+ * pointer to it. The caller has to delete the object.\n+ * Raises a std::runtime_error if the chain is not supported.\n+ */\n+CChainParams* ParamsFactory(std::string chain);\n+\n+/** Functions that relay on internal state */\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests.\n@@ -104,7 +112,7 @@ const CChainParams &Params();\n /**\n  * Returns parameters for the given BIP70 chain name.\n  */\n-CChainParams& Params(std::string chain);\n+const CChainParams& Params(std::string chain);\n \n /**\n  * Sets the params returned by Params() to those for the given BIP70 chain name."
      },
      {
        "sha": "44167f352c5774f80fd94d6a6876de4301eca236",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
        "patch": "@@ -5,11 +5,10 @@\n \n #include \"chainparamsbase.h\"\n \n+#include \"templates.hpp\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n \n-#include <assert.h>\n-\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n@@ -26,7 +25,6 @@ class CBaseMainParams : public CBaseChainParams\n         nRPCPort = 8332;\n     }\n };\n-static CBaseMainParams mainParams;\n \n /**\n  * Testnet (v3)\n@@ -40,7 +38,6 @@ class CBaseTestNetParams : public CBaseMainParams\n         strDataDir = \"testnet3\";\n     }\n };\n-static CBaseTestNetParams testNetParams;\n \n /*\n  * Regression test\n@@ -53,7 +50,6 @@ class CBaseRegTestParams : public CBaseTestNetParams\n         strDataDir = CBaseChainParams::REGTEST;\n     }\n };\n-static CBaseRegTestParams regTestParams;\n \n /*\n  * Unit test\n@@ -68,24 +64,27 @@ class CBaseUnitTestParams : public CBaseMainParams\n };\n static CBaseUnitTestParams unitTestParams;\n \n-static CBaseChainParams* pCurrentBaseParams = 0;\n+static Container<CBaseChainParams> currentBaseParams;\n \n const CBaseChainParams& BaseParams()\n {\n-    assert(pCurrentBaseParams);\n-    return *pCurrentBaseParams;\n+    return currentBaseParams.Get();\n }\n \n-void SelectBaseParams(std::string chain)\n+CBaseChainParams* FactoryBaseParams(std::string chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        pCurrentBaseParams = &mainParams;\n+        return new CBaseMainParams();\n     else if (chain == CBaseChainParams::TESTNET)\n-        pCurrentBaseParams = &testNetParams;\n+        return new CBaseTestNetParams();\n     else if (chain == CBaseChainParams::REGTEST)\n-        pCurrentBaseParams = &regTestParams;\n-    else\n-        throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n+        return new CBaseRegTestParams();\n+    throw std::runtime_error(strprintf(_(\"%s: Unknown chain %s.\"), __func__, chain));\n+}\n+\n+void SelectBaseParams(std::string chain)\n+{\n+    currentBaseParams.Set(FactoryBaseParams(chain));\n }\n \n std::string ChainNameFromCommandLine()\n@@ -114,5 +113,5 @@ bool SelectBaseParamsFromCommandLine()\n \n bool AreBaseParamsConfigured()\n {\n-    return pCurrentBaseParams != NULL;\n+    return !currentBaseParams.IsNull();\n }"
      },
      {
        "sha": "72a9f358cd8347ca55f4887fcad5471c3de4baff",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
        "patch": "@@ -31,13 +31,20 @@ class CBaseChainParams\n     std::string strDataDir;\n };\n \n+/**\n+ * Creates a CBaseChainParams of the chosen chain and returns a\n+ * pointer to it. The caller has to delete the object.\n+ * Raises an error if the chain is not supported.\n+ */\n+CBaseChainParams* FactoryBaseParams(std::string chain);\n /**\n  * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n  * Returns CBaseChainParams::MAIN by default.\n  * Returns CBaseChainParams::MAX_NETWORK_TYPES if an invalid combination is given.\n  */\n std::string ChainNameFromCommandLine();\n \n+/** Functions that relay on internal state */\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests."
      },
      {
        "sha": "80a6025e1d78b54525fb83576898bdd106dd71bf",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b459c7f8874064c13a3c4b9aa31c837257c3bd0/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
        "patch": "@@ -202,7 +202,7 @@ BOOST_AUTO_TEST_CASE(PartitionAlert)\n     // Test PartitionCheck\n     CCriticalSection csDummy;\n     CBlockIndex indexDummy[100];\n-    CChainParams& params = Params(CBaseChainParams::MAIN);\n+    const CChainParams& params = Params(CBaseChainParams::MAIN);\n     int64_t nPowTargetSpacing = params.GetConsensus().nPowTargetSpacing;\n \n     // Generate fake blockchain timestamps relative to"
      }
    ]
  },
  {
    "sha": "4cc0e35b8943d1fdceb68bb2061d299d4954d496",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2MwZTM1Yjg5NDNkMWZkY2ViNjhiYjIwNjFkMjk5ZDQ5NTRkNDk2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-25T06:16:15Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-25T19:52:34Z"
      },
      "message": "DRY: TODO find out why this excludes regtest",
      "tree": {
        "sha": "c942dcc37c30497cb998dbecfa862b4f9d703540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c942dcc37c30497cb998dbecfa862b4f9d703540"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cc0e35b8943d1fdceb68bb2061d299d4954d496",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cc0e35b8943d1fdceb68bb2061d299d4954d496",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cc0e35b8943d1fdceb68bb2061d299d4954d496",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cc0e35b8943d1fdceb68bb2061d299d4954d496/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b459c7f8874064c13a3c4b9aa31c837257c3bd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b459c7f8874064c13a3c4b9aa31c837257c3bd0"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 4,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a76d5a0a94f25bee968c204e5afe541ae6d8c8c9",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cc0e35b8943d1fdceb68bb2061d299d4954d496/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cc0e35b8943d1fdceb68bb2061d299d4954d496/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=4cc0e35b8943d1fdceb68bb2061d299d4954d496",
        "patch": "@@ -241,14 +241,10 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n             PaymentRequestPlus request;\n             if (readPaymentRequestFromFile(arg, request))\n             {\n-                if (request.getDetails().network() == \"main\")\n-                {\n-                    SelectParams(CBaseChainParams::MAIN);\n-                }\n-                else if (request.getDetails().network() == \"test\")\n-                {\n-                    SelectParams(CBaseChainParams::TESTNET);\n-                }\n+                // TODO find out why this excludes regtest\n+                std::string chainStr = request.getDetails().network();\n+                if (chainStr == CBaseChainParams::MAIN || chainStr == CBaseChainParams::TESTNET)\n+                    SelectParams(chainStr);\n             }\n         }\n         else"
      }
    ]
  },
  {
    "sha": "68f17435d1b56d49129be15752c63b2c312b4196",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGYxNzQzNWQxYjU2ZDQ5MTI5YmUxNTc1MmM2M2IyYzMxMmI0MTk2",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-25T03:41:00Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-25T19:52:34Z"
      },
      "message": "Change?: Chainparams: DRY: Make qt/guiutil.cpp fit BIP70 chain name strings",
      "tree": {
        "sha": "31c77c8692b37fef844903e0425e1e46556515d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31c77c8692b37fef844903e0425e1e46556515d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68f17435d1b56d49129be15752c63b2c312b4196",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68f17435d1b56d49129be15752c63b2c312b4196",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68f17435d1b56d49129be15752c63b2c312b4196",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68f17435d1b56d49129be15752c63b2c312b4196/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cc0e35b8943d1fdceb68bb2061d299d4954d496",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cc0e35b8943d1fdceb68bb2061d299d4954d496",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cc0e35b8943d1fdceb68bb2061d299d4954d496"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 8,
      "deletions": 11
    },
    "files": [
      {
        "sha": "15970b7d1deb45ead2589b00b0c634b89af57806",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68f17435d1b56d49129be15752c63b2c312b4196/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68f17435d1b56d49129be15752c63b2c312b4196/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=68f17435d1b56d49129be15752c63b2c312b4196",
        "patch": "@@ -581,12 +581,10 @@ TableViewLastColumnResizingFixer::TableViewLastColumnResizingFixer(QTableView* t\n #ifdef WIN32\n boost::filesystem::path static StartupShortcutPath()\n {\n-    if (GetBoolArg(\"-testnet\", false))\n-        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (testnet).lnk\";\n-    else if (GetBoolArg(\"-regtest\", false))\n-        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin (regtest).lnk\";\n-\n-    return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n+    std::string chain = ChainNameFromCommandLine();\n+    if (chain == CBaseChainParams::MAIN)\n+        return GetSpecialFolderPath(CSIDL_STARTUP) / \"Bitcoin.lnk\";\n+    return GetSpecialFolderPath(CSIDL_STARTUP) / strprintf(\"Bitcoin (%s).lnk\", chain);\n }\n \n bool GetStartOnSystemStartup()\n@@ -719,15 +717,14 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         boost::filesystem::ofstream optionFile(GetAutostartFilePath(), std::ios_base::out|std::ios_base::trunc);\n         if (!optionFile.good())\n             return false;\n+        std::string chain = ChainNameFromCommandLine();\n         // Write a bitcoin.desktop file to the autostart directory:\n         optionFile << \"[Desktop Entry]\\n\";\n         optionFile << \"Type=Application\\n\";\n-        if (GetBoolArg(\"-testnet\", false))\n-            optionFile << \"Name=Bitcoin (testnet)\\n\";\n-        else if (GetBoolArg(\"-regtest\", false))\n-            optionFile << \"Name=Bitcoin (regtest)\\n\";\n-        else\n+        if (chain == CBaseChainParams::MAIN)\n             optionFile << \"Name=Bitcoin\\n\";\n+        else\n+            optionFile << strprintf(\"Name=Bitcoin (%s)\\n\", chain);\n         optionFile << \"Exec=\" << pszExePath << strprintf(\" -min -testnet=%d -regtest=%d\\n\", GetBoolArg(\"-testnet\", false), GetBoolArg(\"-regtest\", false));\n         optionFile << \"Terminal=false\\n\";\n         optionFile << \"Hidden=false\\n\";"
      }
    ]
  },
  {
    "sha": "edc08a3dc8b1d889b9def2d4057b79553d4f190a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGMwOGEzZGM4YjFkODg5YjlkZWYyZDQwNTdiNzk1NTNkNGYxOTBh",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-25T06:11:14Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-25T19:52:34Z"
      },
      "message": "Change?: bip70 CBaseChainParams::TESTNET = from \"test\" to \"testnet3\" (and user-facing testnet to \"testnet3\")",
      "tree": {
        "sha": "0b1eda27f2bae8f5a2ade0900aa69d1493b54568",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b1eda27f2bae8f5a2ade0900aa69d1493b54568"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/edc08a3dc8b1d889b9def2d4057b79553d4f190a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc08a3dc8b1d889b9def2d4057b79553d4f190a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/edc08a3dc8b1d889b9def2d4057b79553d4f190a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/edc08a3dc8b1d889b9def2d4057b79553d4f190a/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68f17435d1b56d49129be15752c63b2c312b4196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68f17435d1b56d49129be15752c63b2c312b4196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68f17435d1b56d49129be15752c63b2c312b4196"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f1d71a87c9a4a7e274535b117ef07ef92fdc8e80",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc08a3dc8b1d889b9def2d4057b79553d4f190a/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc08a3dc8b1d889b9def2d4057b79553d4f190a/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=edc08a3dc8b1d889b9def2d4057b79553d4f190a",
        "patch": "@@ -65,7 +65,7 @@ class CChainParams\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** In the future use NetworkIDString() for RPC fields */\n     bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n-    /** Returns the BIP70 chain name string (main, test or regtest) */\n+    /** Returns the BIP70 chain name string (main, testnet3 or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }"
      },
      {
        "sha": "6880d41b55aa12196d282f4da77dcb7b8d811abb",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc08a3dc8b1d889b9def2d4057b79553d4f190a/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc08a3dc8b1d889b9def2d4057b79553d4f190a/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=edc08a3dc8b1d889b9def2d4057b79553d4f190a",
        "patch": "@@ -10,7 +10,7 @@\n #include \"util.h\"\n \n const std::string CBaseChainParams::MAIN = \"main\";\n-const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::TESTNET = \"testnet3\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n const std::string CBaseChainParams::MAX_NETWORK_TYPES = \"unknown_chain\";\n \n@@ -35,7 +35,7 @@ class CBaseTestNetParams : public CBaseMainParams\n     CBaseTestNetParams()\n     {\n         nRPCPort = 18332;\n-        strDataDir = \"testnet3\";\n+        strDataDir = CBaseChainParams::TESTNET;\n     }\n };\n "
      },
      {
        "sha": "6c3108890ddfe3d5a6fcb7caa9bd1680b021daa3",
        "filename": "src/qt/networkstyle.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/edc08a3dc8b1d889b9def2d4057b79553d4f190a/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/edc08a3dc8b1d889b9def2d4057b79553d4f190a/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=edc08a3dc8b1d889b9def2d4057b79553d4f190a",
        "patch": "@@ -17,7 +17,7 @@ static const struct {\n     const char *titleAddText;\n } network_styles[] = {\n     {\"main\", QAPP_APP_NAME_DEFAULT, 0, 0, \"\"},\n-    {\"test\", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\")},\n+    {\"testnet3\", QAPP_APP_NAME_TESTNET, 70, 30, QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet3]\")},\n     {\"regtest\", QAPP_APP_NAME_TESTNET, 160, 30, \"[regtest]\"}\n };\n static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);"
      }
    ]
  }
]