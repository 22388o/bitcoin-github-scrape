[
  {
    "sha": "fa5894f7f581718ea28bb34b52fcd3b33ff3e644",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU4OTRmN2Y1ODE3MThlYTI4YmIzNGI1MmZjZDNiMzNmZjNlNjQ0",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-02-11T03:20:21Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-17T01:33:07Z"
      },
      "message": "DNS seeds: wait for 5m instead of 11s if 1000+ peers are known\n\nIf 1000 potential peers are known, wait for 5m before querying DNS seeds\nfor more peers, since eventually the addresses we already know should\nget us connected. Also check every 11s whether we've got enough active\noutbounds that DNS seeds aren't worth querying, and exit the dnsseed\nthread early if so.",
      "tree": {
        "sha": "ba8b04b40f0bec26f7cd4aab1177b95e5bb430b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba8b04b40f0bec26f7cd4aab1177b95e5bb430b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5894f7f581718ea28bb34b52fcd3b33ff3e644",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5894f7f581718ea28bb34b52fcd3b33ff3e644",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5894f7f581718ea28bb34b52fcd3b33ff3e644",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5894f7f581718ea28bb34b52fcd3b33ff3e644/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "646f0ada0205ae4b3952107e3b1542f06adda32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/646f0ada0205ae4b3952107e3b1542f06adda32b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/646f0ada0205ae4b3952107e3b1542f06adda32b"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 51,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4eb26b095e7220bbb49011af2930f72464d8c5d9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 15,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5894f7f581718ea28bb34b52fcd3b33ff3e644/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5894f7f581718ea28bb34b52fcd3b33ff3e644/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa5894f7f581718ea28bb34b52fcd3b33ff3e644",
        "patch": "@@ -51,6 +51,12 @@ static constexpr int DUMP_PEERS_INTERVAL = 15 * 60;\n /** Number of DNS seeds to query when the number of connections is low. */\n static constexpr int DNSSEEDS_TO_QUERY_AT_ONCE = 3;\n \n+/** How long to delay before querying DNS seeds\n+ */\n+static constexpr std::chrono::seconds DNSSEEDS_DELAY_FEW_PEERS{11}; // 11sec\n+static constexpr std::chrono::seconds DNSSEEDS_DELAY_MANY_PEERS{300}; // 5min\n+static constexpr int DNSSEEDS_DELAY_PEER_THRESHOLD = 1000; // \"many\" vs \"few\" peers -- you should only get this many if you've been on the live network\n+\n // We add a random period time (0 to 1 seconds) to feeler connections to prevent synchronization.\n #define FEELER_SLEEP_WINDOW 1\n \n@@ -1573,31 +1579,61 @@ void CConnman::ThreadDNSAddressSeed()\n     if (gArgs.GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED)) {\n         // When -forcednsseed is provided, query all.\n         seeds_right_now = seeds.size();\n+    } else if (addrman.size() == 0) {\n+        // If we have no known peers, query all.\n+        seeds_right_now = seeds.size();\n     }\n \n+    // goal: only query DNS seed if address need is acute\n+    // * If we have a reasonable number of peers in addrman, spend\n+    //   some time trying them first. This improves user privacy by\n+    //   creating fewer identifying DNS requests, reduces trust by\n+    //   giving seeds less influence on the network topology, and\n+    //   reduces traffic to the seeds.\n+    // * When querying DNS seeds query a few at once, this ensures\n+    //   that we don't give DNS seeds the ability to eclipse nodes\n+    //   that query them.\n+    // * If we continue having problems, eventually query all the\n+    //   DNS seeds, and if that fails too, also try the fixed seeds.\n+    //   (done in ThreadOpenConnections)\n+    const std::chrono::seconds seeds_wait_time = (addrman.size() >= DNSSEEDS_DELAY_PEER_THRESHOLD ? DNSSEEDS_DELAY_MANY_PEERS : DNSSEEDS_DELAY_FEW_PEERS);\n+\n     for (const std::string& seed : seeds) {\n-        // goal: only query DNS seed if address need is acute\n-        // Avoiding DNS seeds when we don't need them improves user privacy by\n-        // creating fewer identifying DNS requests, reduces trust by giving seeds\n-        // less influence on the network topology, and reduces traffic to the seeds.\n-        if (addrman.size() > 0 && seeds_right_now == 0) {\n-            if (!interruptNet.sleep_for(std::chrono::seconds(11))) return;\n+        if (seeds_right_now == 0) {\n+            seeds_right_now += DNSSEEDS_TO_QUERY_AT_ONCE;\n \n-            LOCK(cs_vNodes);\n-            int nRelevant = 0;\n-            for (const CNode* pnode : vNodes) {\n-                nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n-            }\n-            if (nRelevant >= 2) {\n-                LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n-                return;\n+            if (addrman.size() > 0) {\n+                LogPrintf(\"Waiting %d seconds before querying DNS seeds.\\n\", seeds_wait_time.count());\n+                std::chrono::seconds to_wait = seeds_wait_time;\n+                while (to_wait.count() > 0) {\n+                    std::chrono::seconds w = std::min(DNSSEEDS_DELAY_FEW_PEERS, to_wait);\n+                    if (!interruptNet.sleep_for(w)) return;\n+                    to_wait -= w;\n+\n+                    int nRelevant = 0;\n+                    {\n+                        LOCK(cs_vNodes);\n+                        for (const CNode* pnode : vNodes) {\n+                            nRelevant += pnode->fSuccessfullyConnected && !pnode->fFeeler && !pnode->fOneShot && !pnode->m_manual_connection && !pnode->fInbound;\n+                        }\n+                    }\n+                    if (nRelevant >= 2) {\n+                        if (found > 0) {\n+                            LogPrintf(\"%d addresses found from DNS seeds\\n\", found);\n+                            LogPrintf(\"P2P peers available. Finished DNS seeding.\\n\");\n+                        } else {\n+                            LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n+                        }\n+                        return;\n+                    }\n+                }\n             }\n-            seeds_right_now += DNSSEEDS_TO_QUERY_AT_ONCE;\n         }\n \n         if (interruptNet) {\n             return;\n         }\n+\n         LogPrintf(\"Loading addresses from DNS seed %s\\n\", seed);\n         if (HaveNameProxy()) {\n             AddOneShot(seed);"
      }
    ]
  },
  {
    "sha": "96954d17948662672cababc940e453dff08e8cbb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Njk1NGQxNzk0ODY2MjY3MmNhYmFiYzk0MGU0NTNkZmYwOGU4Y2Ji",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-02-11T15:32:46Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-03-17T02:10:47Z"
      },
      "message": "DNS seeds: don't query DNS while network is inactive",
      "tree": {
        "sha": "5b97adc23e6f87a1354a5fc468487e4e77cc538f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b97adc23e6f87a1354a5fc468487e4e77cc538f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96954d17948662672cababc940e453dff08e8cbb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96954d17948662672cababc940e453dff08e8cbb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96954d17948662672cababc940e453dff08e8cbb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96954d17948662672cababc940e453dff08e8cbb/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa5894f7f581718ea28bb34b52fcd3b33ff3e644",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5894f7f581718ea28bb34b52fcd3b33ff3e644",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5894f7f581718ea28bb34b52fcd3b33ff3e644"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b3404a4704c7637a4f76f1e3564c8372288198ac",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96954d17948662672cababc940e453dff08e8cbb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96954d17948662672cababc940e453dff08e8cbb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=96954d17948662672cababc940e453dff08e8cbb",
        "patch": "@@ -1630,8 +1630,14 @@ void CConnman::ThreadDNSAddressSeed()\n             }\n         }\n \n-        if (interruptNet) {\n-            return;\n+        if (interruptNet) return;\n+\n+        // hold off on querying seeds if p2p network deactivated\n+        if (!fNetworkActive) {\n+            LogPrintf(\"Waiting for network to be reactivated before querying DNS seeds.\\n\");\n+            do {\n+                if (!interruptNet.sleep_for(std::chrono::seconds{1})) return;\n+            } while (!fNetworkActive);\n         }\n \n         LogPrintf(\"Loading addresses from DNS seed %s\\n\", seed);"
      }
    ]
  }
]