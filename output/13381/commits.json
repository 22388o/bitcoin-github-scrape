[
  {
    "sha": "a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmI1ZWMxOGZmMzllZjNjY2QxOWVjMGU2ZGI5YWUwMDYwMmQ4OTM4",
    "commit": {
      "author": {
        "name": "marcoagner",
        "email": "marco@agner.io",
        "date": "2018-10-05T12:33:21Z"
      },
      "committer": {
        "name": "marcoagner",
        "email": "marco@agner.io",
        "date": "2018-10-05T12:33:21Z"
      },
      "message": "rpc: creates possibility to preserve labels on importprivkey\n\n- changes importprivkey behavior to overwrite existent label if one\nis passed and keep existing ones if no label is passed\n\n- tests behavior of importprivkey on existing address labels and\ndifferent same key destination",
      "tree": {
        "sha": "0a19e6b08b4c3cac3ceb9d7d86ee95866481257d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a19e6b08b4c3cac3ceb9d7d86ee95866481257d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEBVLlIGnnSaHbHcvrDcd/xh7T7MQFAlu3WjkACgkQDcd/xh7T\n7MS3fRAAs2A1O8VzabhxgSUjfyOJHfYuwH+yZK9tfeHn/O3KglucW4RvSr7TJSAX\nL7mI3IZXfgqdUVj2hPDHjis/yNxHupNtsK0gtpL9RanbpVgcFbQWeGtgJ0ITAIzp\n5BRrzS2PLHobbyUUmHjsx72PTxRqqL358HNmEUwwpKVrX8dbhKg/+3FASLh6Zsd2\nL8sqgpQjvR7YlvtVa5i2NWibQYmHRvWCW4cKB+ozCjNtGbKnryldt22AtExbc/ga\n4FuJD+qC6uTgpKhi4zaOXODT80YeJ1ZGQ0coHr7GR5LGK7UfOqWCtVPzPXLbUXOJ\nIBGcUylodAP7xHHLIsVYdtgv4iO46H2kjVAe7wpPMz7b3Fp54N5RkN6HHnQ3IWnR\nPBvMPGqsXvAhLu8VLJP6QkzGcZGwz/MnZaZv/0K7c67FTZcwSMeZDtTeqlgRzKBD\nJrES9ZGBGQNWv00WQyUDnlNyHBJZhxrjM9qFK3PBrzloAB/128D6A5PhIOUX2zYP\ndHWj6Kiv5tX3iQsazxBwsYlSxyfw3+AnJedfJz36KAGZlmaWbd+ckzEW3mbm4BDP\nXrhBQcrqyFB+RZ7hqDgQmtoWIKwU4eKEbA9XHKEK3qU1CLnhfE0UcbDZpyi0e78J\nb5Smm/uLvvN5kN1I1OTcCoSPYqsWUBFOOlO+isK0W6oTrrx44GE=\n=OUSa\n-----END PGP SIGNATURE-----",
        "payload": "tree 0a19e6b08b4c3cac3ceb9d7d86ee95866481257d\nparent f504a1402afd0760e9d348ecc8bad0094aa7d705\nauthor marcoagner <marco@agner.io> 1538742801 +0100\ncommitter marcoagner <marco@agner.io> 1538742801 +0100\n\nrpc: creates possibility to preserve labels on importprivkey\n\n- changes importprivkey behavior to overwrite existent label if one\nis passed and keep existing ones if no label is passed\n\n- tests behavior of importprivkey on existing address labels and\ndifferent same key destination\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938/comments",
    "author": {
      "login": "marcoagner",
      "id": 5016303,
      "node_id": "MDQ6VXNlcjUwMTYzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5016303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcoagner",
      "html_url": "https://github.com/marcoagner",
      "followers_url": "https://api.github.com/users/marcoagner/followers",
      "following_url": "https://api.github.com/users/marcoagner/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcoagner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcoagner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcoagner/subscriptions",
      "organizations_url": "https://api.github.com/users/marcoagner/orgs",
      "repos_url": "https://api.github.com/users/marcoagner/repos",
      "events_url": "https://api.github.com/users/marcoagner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcoagner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "marcoagner",
      "id": 5016303,
      "node_id": "MDQ6VXNlcjUwMTYzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5016303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcoagner",
      "html_url": "https://github.com/marcoagner",
      "followers_url": "https://api.github.com/users/marcoagner/followers",
      "following_url": "https://api.github.com/users/marcoagner/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcoagner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcoagner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcoagner/subscriptions",
      "organizations_url": "https://api.github.com/users/marcoagner/orgs",
      "repos_url": "https://api.github.com/users/marcoagner/repos",
      "events_url": "https://api.github.com/users/marcoagner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcoagner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f504a1402afd0760e9d348ecc8bad0094aa7d705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f504a1402afd0760e9d348ecc8bad0094aa7d705",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f504a1402afd0760e9d348ecc8bad0094aa7d705"
      }
    ],
    "stats": {
      "total": 175,
      "additions": 172,
      "deletions": 3
    },
    "files": [
      {
        "sha": "75faad99060f59fcb33a7f8fd0696a1c98d5363f",
        "filename": "doc/release-notes-pr13381.md",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938/doc/release-notes-pr13381.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938/doc/release-notes-pr13381.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr13381.md?ref=a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938",
        "patch": "@@ -0,0 +1,29 @@\n+RPC importprivkey: new label behavior\n+-------------------------------------\n+\n+Previously, `importprivkey` automatically added the default empty label\n+(\"\") to all addresses associated with the imported private key.  Now it\n+defaults to using any existing label for those addresses.  For example:\n+\n+- Old behavior: you import a watch-only address with the label \"cold\n+  wallet\".  Later, you import the corresponding private key using the\n+  default settings.  The address's label is changed from \"cold wallet\"\n+  to \"\".\n+\n+- New behavior: you import a watch-only address with the label \"cold\n+  wallet\".  Later, you import the corresponding private key using the\n+  default settings.  The address's label remains \"cold wallet\".\n+\n+In both the previous and current case, if you directly specify a label\n+during the import, that label will override whatever previous label the\n+addresses may have had.  Also in both cases, if none of the addresses\n+previously had a label, they will still receive the default empty label\n+(\"\").  Examples:\n+\n+- You import a watch-only address with the label \"temporary\".  Later you\n+  import the corresponding private key with the label \"final\".  The\n+  address's label will be changed to \"final\".\n+\n+- You use the default settings to import a private key for an address that\n+  was not previously in the wallet.  Its addresses will receive the default\n+  empty label (\"\")."
      },
      {
        "sha": "701da0cf84b7738f49e96d5569b55af5b152ae9c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938",
        "patch": "@@ -113,7 +113,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             \"Hint: use importmulti to import more than one private key.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n-            \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n+            \"2. \\\"label\\\"            (string, optional, default=current label if address exists, otherwise \\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n             \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n@@ -162,9 +162,14 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         CKeyID vchAddress = pubkey.GetID();\n         {\n             pwallet->MarkDirty();\n-            // We don't know which corresponding address will be used; label them all\n+\n+            // We don't know which corresponding address will be used;\n+            // label all new addresses, and label existing addresses if a\n+            // label was passed.\n             for (const auto& dest : GetAllDestinationsForKey(pubkey)) {\n-                pwallet->SetAddressBook(dest, strLabel, \"receive\");\n+                if (!request.params[1].isNull() || pwallet->mapAddressBook.count(dest) == 0) {\n+                    pwallet->SetAddressBook(dest, strLabel, \"receive\");\n+                }\n             }\n \n             // Don't throw error in case a key is already there"
      },
      {
        "sha": "de3b6e400c56e3f5378a70009ecdefe378f71bc4",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938",
        "patch": "@@ -157,6 +157,7 @@\n     'feature_nulldummy.py',\n     'mempool_accept.py',\n     'wallet_import_rescan.py',\n+    'wallet_import_with_label.py',\n     'rpc_bind.py --ipv4',\n     'rpc_bind.py --ipv6',\n     'rpc_bind.py --nonloopback',"
      },
      {
        "sha": "95acaa752e528e2bc7dcacab48d5e0b5d6cd8d83",
        "filename": "test/functional/wallet_import_with_label.py",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938/test/functional/wallet_import_with_label.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938/test/functional/wallet_import_with_label.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_with_label.py?ref=a6b5ec18ff39ef3ccd19ec0e6db9ae00602d8938",
        "patch": "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the behavior of RPC importprivkey on set and unset labels of\n+addresses.\n+\n+It tests different cases in which an address is imported with importaddress\n+with or without a label and then its private key is imported with importprivkey\n+with and without a label.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+\n+class ImportWithLabel(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        self.log.info(\n+            \"Test importaddress with label and importprivkey without label.\"\n+        )\n+        self.log.info(\"Import a watch-only address with a label.\")\n+        address = self.nodes[0].getnewaddress()\n+        label = \"Test Label\"\n+        self.nodes[1].importaddress(address, label)\n+        address_assert = self.nodes[1].getaddressinfo(address)\n+\n+        assert_equal(address_assert[\"iswatchonly\"], True)\n+        assert_equal(address_assert[\"ismine\"], False)\n+        assert_equal(address_assert[\"label\"], label)\n+\n+        self.log.info(\n+            \"Import the watch-only address's private key without a \"\n+            \"label and the address should keep its label.\"\n+        )\n+        priv_key = self.nodes[0].dumpprivkey(address)\n+        self.nodes[1].importprivkey(priv_key)\n+\n+        assert_equal(label, self.nodes[1].getaddressinfo(address)[\"label\"])\n+\n+        self.log.info(\n+            \"Test importaddress without label and importprivkey with label.\"\n+        )\n+        self.log.info(\"Import a watch-only address without a label.\")\n+        address2 = self.nodes[0].getnewaddress()\n+        self.nodes[1].importaddress(address2)\n+        address_assert2 = self.nodes[1].getaddressinfo(address2)\n+\n+        assert_equal(address_assert2[\"iswatchonly\"], True)\n+        assert_equal(address_assert2[\"ismine\"], False)\n+        assert_equal(address_assert2[\"label\"], \"\")\n+\n+        self.log.info(\n+            \"Import the watch-only address's private key with a \"\n+            \"label and the address should have its label updated.\"\n+        )\n+        priv_key2 = self.nodes[0].dumpprivkey(address2)\n+        label2 = \"Test Label 2\"\n+        self.nodes[1].importprivkey(priv_key2, label2)\n+\n+        assert_equal(label2, self.nodes[1].getaddressinfo(address2)[\"label\"])\n+\n+        self.log.info(\"Test importaddress with label and importprivkey with label.\")\n+        self.log.info(\"Import a watch-only address with a label.\")\n+        address3 = self.nodes[0].getnewaddress()\n+        label3_addr = \"Test Label 3 for importaddress\"\n+        self.nodes[1].importaddress(address3, label3_addr)\n+        address_assert3 = self.nodes[1].getaddressinfo(address3)\n+\n+        assert_equal(address_assert3[\"iswatchonly\"], True)\n+        assert_equal(address_assert3[\"ismine\"], False)\n+        assert_equal(address_assert3[\"label\"], label3_addr)\n+\n+        self.log.info(\n+            \"Import the watch-only address's private key with a \"\n+            \"label and the address should have its label updated.\"\n+        )\n+        priv_key3 = self.nodes[0].dumpprivkey(address3)\n+        label3_priv = \"Test Label 3 for importprivkey\"\n+        self.nodes[1].importprivkey(priv_key3, label3_priv)\n+\n+        assert_equal(label3_priv, self.nodes[1].getaddressinfo(address3)[\"label\"])\n+\n+        self.log.info(\n+            \"Test importprivkey won't label new dests with the same \"\n+            \"label as others labeled dests for the same key.\"\n+        )\n+        self.log.info(\"Import a watch-only legacy address with a label.\")\n+        address4 = self.nodes[0].getnewaddress()\n+        label4_addr = \"Test Label 4 for importaddress\"\n+        self.nodes[1].importaddress(address4, label4_addr)\n+        address_assert4 = self.nodes[1].getaddressinfo(address4)\n+\n+        assert_equal(address_assert4[\"iswatchonly\"], True)\n+        assert_equal(address_assert4[\"ismine\"], False)\n+        assert_equal(address_assert4[\"label\"], label4_addr)\n+\n+        self.log.info(\"Asserts address has no embedded field with dests.\")\n+\n+        assert_equal(address_assert4.get(\"embedded\"), None)\n+\n+        self.log.info(\n+            \"Import the watch-only address's private key without a \"\n+            \"label and new destinations for the key should have an \"\n+            \"empty label while the 'old' destination should keep \"\n+            \"its label.\"\n+        )\n+        priv_key4 = self.nodes[0].dumpprivkey(address4)\n+        self.nodes[1].importprivkey(priv_key4)\n+        address_assert4 = self.nodes[1].getaddressinfo(address4)\n+\n+        assert address_assert4.get(\"embedded\")\n+\n+        bcaddress_assert = self.nodes[1].getaddressinfo(\n+            address_assert4[\"embedded\"][\"address\"]\n+        )\n+\n+        assert_equal(address_assert4[\"label\"], label4_addr)\n+        assert_equal(bcaddress_assert[\"label\"], \"\")\n+\n+        self.stop_nodes()\n+\n+\n+if __name__ == \"__main__\":\n+    ImportWithLabel().main()"
      }
    ]
  }
]