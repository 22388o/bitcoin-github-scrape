[
  {
    "sha": "555567ace9baae3c80e118eeca434d5c424a3487",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTU1NjdhY2U5YmFhZTNjODBlMTE4ZWVjYTQzNGQ1YzQyNGEzNDg3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-11T16:59:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-11T16:57:44Z"
      },
      "message": "test: Extend wallet_dump test to cover comments",
      "tree": {
        "sha": "37da6087a78b2fdb013dde84ea3c9a3d2f92ee79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37da6087a78b2fdb013dde84ea3c9a3d2f92ee79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/555567ace9baae3c80e118eeca434d5c424a3487",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhQ1Qv/dGzoKAwqJqSB5s9yggK4Vj3os4GfrM6uCrWfFaL4OYlN9HdcqdFno4Y1\nt8b5ZW2gmDtHIUA8uXvKpvG+HcgrFyOAv0E9HN14fEPfZHx6cQA6keGyq/cgKR34\nL+wbFDo22OR7rd1DAKLD46zDl6y6YI/itvceQcWGVAouH/xw6tgC8pcfAYR2AemP\nAwXt2/+t+TO64lykxv+KeqXao+me9cg8WzLvcyc1zOWI/Kw7aqzUpM4Vsb8r4ca7\nzKdvK7GZXcpBH0y8Bzzw7NILW9bpvtVeYR7K+WobnBeh0VudIHm8zFncUNUaD2Zn\nccVmgmHRiH/6+epkiwWDXzz5aS5bZlaCx4QDaKH+0dCgXsJvd0HyBq1axofZK+jM\nJ2NQYmEaFkQCagLYG2OoJac3NJOUEPYK7dM79lC8uH8sbOonJuGld0VrnXrCuG0g\ntaJ1nHrgvMhEzoLA7cEeRxeowvKxpvoBO+6fFZd9+R0klTUyF+F4JyjZXDxdVQBP\nUrYguqT1\n=qzSu\n-----END PGP SIGNATURE-----",
        "payload": "tree 37da6087a78b2fdb013dde84ea3c9a3d2f92ee79\nparent a5623ba89f050182ce9b1f570f3736b272b544b2\nauthor MarcoFalke <falke.marco@gmail.com> 1586624373 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1586624264 -0400\n\ntest: Extend wallet_dump test to cover comments\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/555567ace9baae3c80e118eeca434d5c424a3487",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/555567ace9baae3c80e118eeca434d5c424a3487",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/555567ace9baae3c80e118eeca434d5c424a3487/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5623ba89f050182ce9b1f570f3736b272b544b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5623ba89f050182ce9b1f570f3736b272b544b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5623ba89f050182ce9b1f570f3736b272b544b2"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 41,
      "deletions": 6
    },
    "files": [
      {
        "sha": "f10719fba289ba8583b0eda1c670fbfe9fb5322d",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 41,
        "deletions": 6,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/555567ace9baae3c80e118eeca434d5c424a3487/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/555567ace9baae3c80e118eeca434d5c424a3487/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=555567ace9baae3c80e118eeca434d5c424a3487",
        "patch": "@@ -3,7 +3,9 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the dumpwallet RPC.\"\"\"\n+import datetime\n import os\n+import time\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -18,6 +20,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n     Also check that the old hd_master is inactive\n     \"\"\"\n     with open(file_name, encoding='utf8') as inputfile:\n+        found_comments = []\n         found_legacy_addr = 0\n         found_p2sh_segwit_addr = 0\n         found_bech32_addr = 0\n@@ -26,8 +29,12 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n         found_addr_rsv = 0\n         hd_master_addr_ret = None\n         for line in inputfile:\n-            # only read non comment lines\n-            if line[0] != \"#\" and len(line) > 10:\n+            line = line.strip()\n+            if not line:\n+                continue\n+            if line[0] == '#':\n+                found_comments.append(line)\n+            else:\n                 # split out some data\n                 key_date_label, comment = line.split(\"#\")\n                 key_date_label = key_date_label.split(\" \")\n@@ -82,7 +89,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                         found_script_addr += 1\n                         break\n \n-        return found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n+        return found_comments, found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n \n \n class WalletDumpTest(BitcoinTestFramework):\n@@ -122,12 +129,36 @@ def run_test(self):\n         # its capacity\n         self.nodes[0].keypoolrefill()\n \n-        # dump unencrypted wallet\n+        self.log.info('Mine a block one second before the wallet is dumped')\n+        dump_time = int(time.time())\n+        self.nodes[0].setmocktime(dump_time - 1)\n+        self.nodes[0].generate(1)\n+        self.nodes[0].setmocktime(dump_time)\n+        dump_time_str = '# * Created on {}Z'.format(\n+            datetime.datetime.fromtimestamp(\n+                dump_time,\n+                tz=datetime.timezone.utc,\n+            ).replace(tzinfo=None).isoformat())\n+        dump_best_block_1 = '# * Best block at time of backup was {} ({}),'.format(\n+            self.nodes[0].getblockcount(),\n+            self.nodes[0].getbestblockhash(),\n+        )\n+        dump_best_block_2 = '#   mined on {}Z'.format(\n+            datetime.datetime.fromtimestamp(\n+                dump_time - 1,\n+                tz=datetime.timezone.utc,\n+            ).replace(tzinfo=None).isoformat())\n+\n+        self.log.info('Dump unencrypted wallet')\n         result = self.nodes[0].dumpwallet(wallet_unenc_dump)\n         assert_equal(result['filename'], wallet_unenc_dump)\n \n-        found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n+        found_comments, found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n             read_dump(wallet_unenc_dump, addrs, [multisig_addr], None)\n+        assert '# End of dump' in found_comments  # Check that file is not corrupt\n+        assert_equal(dump_time_str, next(c for c in found_comments if c.startswith('# * Created on')))\n+        assert_equal(dump_best_block_1, next(c for c in found_comments if c.startswith('# * Best block')))\n+        assert_equal(dump_best_block_2, next(c for c in found_comments if c.startswith('#   mined on')))\n         assert_equal(found_legacy_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_p2sh_segwit_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_bech32_addr, test_addr_count)  # all keys must be in the dump\n@@ -142,8 +173,12 @@ def run_test(self):\n         self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(wallet_enc_dump)\n \n-        found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, _ = \\\n+        found_comments, found_legacy_addr, found_p2sh_segwit_addr, found_bech32_addr, found_script_addr, found_addr_chg, found_addr_rsv, _ = \\\n             read_dump(wallet_enc_dump, addrs, [multisig_addr], hd_master_addr_unenc)\n+        assert '# End of dump' in found_comments  # Check that file is not corrupt\n+        assert_equal(dump_time_str, next(c for c in found_comments if c.startswith('# * Created on')))\n+        assert_equal(dump_best_block_1, next(c for c in found_comments if c.startswith('# * Best block')))\n+        assert_equal(dump_best_block_2, next(c for c in found_comments if c.startswith('#   mined on')))\n         assert_equal(found_legacy_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_p2sh_segwit_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_bech32_addr, test_addr_count)  # all keys must be in the dump"
      }
    ]
  }
]