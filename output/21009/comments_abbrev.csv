DrahtBot,2021-01-26 09:32:39,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19438 (Introduce deploymentstatus by ajtowns)\n\nIf you consider this pull request important, please also help to review ",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767419355,767419355,
jnewbery,2021-01-26 16:41:08,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767670763,767670763,
dhruv,2021-01-26 20:11:48,The linter was failing on all pull requests with the same error when I pushed so it is likely unrelated to the commits here and will get resolved with the next push. Ready for review.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767798617,767798617,
practicalswift,2021-01-26 21:08:49,@dhruv Rebase on `master` and the `boost/thread/mutex.hpp` warning will go away: it was fixed in #21010 :),https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767828931,767828931,
dhruv,2021-01-26 22:20:08,"Rebased against master and linter is passing. Thanks, @practicalswift.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-767865079,767865079,
theStack,2021-01-27 19:25:17,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-768520278,768520278,
dhruv,2021-01-27 21:13:19,Thanks for the review @ccdle12. Comments addressed. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-768580874,768580874,
luke-jr,2021-01-28 21:30:44,"Makes sense, if the rationale was simply to ensure the block gets redownloaded.\n\nIf we focus on validation, however, we would want this around for Taproot. But I'm not sure that's what its purpose is.\n\nRe-validating blocks on upgrade seems like a feature we don't have today, and should be implemented separately from this (without redownloading).\n\n(Therefore, Concept ACK)",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-769411959,769411959,
dhruv,2021-01-29 02:29:44,"@luke-jr You're right, the removed code erases insufficiently validated blocks (which do not have witness data and can't be properly validated by a segwit-aware node) and re-downloads them. AFAICT, with Taproot, the post-activation blocks will have witness data, so we'll need to implement a different function to re-validate the insufficiently validated blocks after upgrade.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-769531849,769531849,
ariard,2021-02-01 22:24:53,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-771202654,771202654,
dhruv,2021-02-06 02:42:35,Comments addressed. The second commit has been broken out into #21090. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-774384254,774384254,
dhruv,2021-02-08 23:35:37,Comments addressed. Rebased. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-775536087,775536087,
jnewbery,2021-02-13 09:51:09,Code review ACK 0af05b95e9c829ff581bb76a0998b5a90386e27a,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-778592210,778592210,
dhruv,2021-02-15 01:15:44,Updated to log the blocksdir and chainstate dir to the user so they do not accidentally delete their wallet. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-778881615,778881615,
dhruv,2021-02-15 18:40:21,Force pushed  d9370c1  to fix failing test.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-779393307,779393307,
ariard,2021-02-16 12:03:29,"Code Review ACK d9370c1, thanks for taking the suggestion, Marco one sounds fine to me if you want to take it.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-779793151,779793151,
dhruv,2021-02-16 16:46:00,Force pushed to use `-reindex` instead of asking the user to delete blocks dir and chainstatedir. Ready for further review!,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-779964042,779964042,
dhruv,2021-02-27 20:28:48,"Thanks for the reviews @ajtowns and @jnewbery. My apologies on the delay. Our twins arrived a few days ago so we are still finding our new routine :)\n\nComments addressed. Ready for further review.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-787130699,787130699,
jnewbery,2021-02-28 14:14:06,utACK e750a774b8375dcbab9b804e2fd1334f1f62d6e4,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-787459091,787459091,
jnewbery,2021-03-04 17:42:00,Your latest rebase has reintroduced the `EraseBlockData()` declaration in validation.h L776.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-790800340,790800340,
dhruv,2021-03-04 17:56:23,"Ah, yes. I was just fixing it while you noticed as well. Thanks, @jnewbery. Rebased. Ready for further review.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-790809870,790809870,
jnewbery,2021-03-04 18:07:42,utACK 1aecaac8b46a936634245739efff852f03c32b55,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-790817719,790817719,
ariard,2021-03-09 16:22:52,Code Review ACK 1aecaac,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-794115862,794115862,
dhruv,2021-03-11 20:39:36,Thank you for the review @jonatack. Comments addressed. Rebased. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-797033840,797033840,
jonatack,2021-03-12 16:28:19,"ACK 644827722b9eba8af40576505a3d5444272f29c3 per `git range-diff e0bc27a 1aecaac 6448277` and debug build/ran bitcoind\n\nSmall suggestion to save a few `getblockcount()` calls, happy to re-ACK if you update. Sorry for not noticing on the first pass:\n\n<details><summary>suggestion</summary><p>\n\n```diff\n         # All nodes are caught up and node 2 is a pre-segwit node that will soon upg",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-797601858,797601858,
dhruv,2021-03-14 22:35:16,"> Small suggestion to save a few getblockcount() calls, happy to re-ACK if you update. Sorry for not noticing on the first pass:\n\nThanks, @jonatack. I will update it if I end up rebasing or addressing other comments.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-798992749,798992749,
jamesob,2021-03-25 14:45:35,"Concept ACK, will review soon.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-806880099,806880099,
jnewbery,2021-04-08 08:31:12,@ariard do you mind re-reviewing this? I believe all of your review comments are addressed.,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-815566835,815566835,
dhruv,2021-04-21 23:13:00,"Addressed comments from @glozow and simplified the functional test a bit - previous code was checking segwit activation on all nodes, but we only need the check on the upgrading node. Ready for further review.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-824423176,824423176,
jnewbery,2021-04-22 07:46:59,utACK d831e711cab83c70bf2ded62fe33f484844e73dd,https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-824621163,824621163,
jamesob,2021-04-22 15:24:30,"ACK https://github.com/bitcoin/bitcoin/pull/21009/commits/d831e711cab83c70bf2ded62fe33f484844e73dd\n\nWill be testing locally today.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-824939591,824939591,
jamesob,2021-04-22 17:29:02,"Built and ran tests locally. Grepped around for lingering references and [found a few](https://github.com/jamesob/bitcoin/blob/d831e711cab83c70bf2ded62fe33f484844e73dd/src/chain.h#L185) in documentation that can be cleaned up after this PR. Snapshot activation docs should also be changed in a follow-up PR but the existing logic there is still necessary: we still need to ""fake"" `BLOCK_OPT_WITNESS` ",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-825046470,825046470,
laanwj,2021-04-27 08:14:34,"Cursory code review ACK d831e711cab83c70bf2ded62fe33f484844e73dd. Agree with the direction of the change, thanks for simplifying the logic here.",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-827412064,827412064,
dhruv,2021-04-30 14:39:49,"> Grepped around for lingering references and [found a few](https://github.com/jamesob/bitcoin/blob/d831e711cab83c70bf2ded62fe33f484844e73dd/src/chain.h#L185) in documentation that can be cleaned up after this PR\n\n@jamesob I've attempted to update references in #21816",https://github.com/bitcoin/bitcoin/pull/21009#issuecomment-830141204,830141204,
ccdle12,2021-01-27 18:52:44,nit: `insuficiently` -> `insufficiently`,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565553753,565553753,src/validation.cpp
ccdle12,2021-01-27 18:59:31,"nit: since we are always using the `NODE_WITNESS` flag, would it make sense to pass it on initialization for [nLocalServices](https://github.com/dhruv/bitcoin/blob/rewindblockindex-2021/src/init.cpp#L899)?",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565558170,565558170,src/init.cpp
dhruv,2021-01-27 21:12:23,Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565636451,565636451,src/validation.cpp
dhruv,2021-01-27 21:12:42,That makes sense. Thanks!,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r565636600,565636600,src/init.cpp
jnewbery,2021-02-02 14:53:04,"This isn't true. `NeedsIBD()` grabs cs_main and holds throughout. You could change it to requires cs_main, then run this entire block under one cs_main lock.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568664358,568664358,src/init.cpp
jnewbery,2021-02-02 14:54:07,Make `[nodiscard]`?,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665203,568665203,src/validation.h
jnewbery,2021-02-02 14:54:31,Perhaps just annotate this function as requiring cs_main and assert that it's held.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665552,568665552,src/validation.cpp
jnewbery,2021-02-02 14:54:54,Can you use a range based for loop since you're iterating over all members of this container?,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r568665869,568665869,src/validation.cpp
ariard,2021-02-03 12:02:36,"Do we really need to iterate on the whole block index from genesis ?\n\nSegwit activation height has been hardcoded by #16060. I think you can start the witness-valid iteration from the hardcoded height, whatever the network, minus one ?",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569358290,569358290,src/validation.cpp
ariard,2021-02-03 13:14:29,Can you commit-split the changes around `segwithheight` from the ones around `NODE_WITNESS` ? Better to review any changes in net_processing on their own. ,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569402143,569402143,src/chainparams.cpp
ariard,2021-02-03 13:22:17,I think this is buggy. Always setting `NODE_WITNESS` to our local service flags doesn't mean we will never meet peers which aren't advertising it. Of course it's unlikely there is that much of those peers deployed but otherwise I believe we'll wrongly unserialize received txn.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569407592,569407592,src/net_processing.cpp
ariard,2021-02-03 13:22:57,"Maybe better to defer those change to #20799, which will achieve the same IIRC but can be reasoned on their own ?",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569408004,569408004,src/net_processing.cpp
jnewbery,2021-02-03 14:15:19,"Why do you think this is buggy? We'll ~un~serialize using `MSG_WITNESS_FLAG` iff `fHaveWitness` is set to true, which happens if the peer includes `NODE_WITNESS` in its version message.\n\nEDIT: I wrote ""unserialize"" here when it should be ""serialize"". `GetFetchFlags()` is used to set our serialization when sending messages.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r569445746,569445746,src/net_processing.cpp
ariard,2021-02-04 13:42:23,"I think we unserialize if `fAllowWitness=true`, `MSG_WITNESS_FLAG` is used by a getdata sender to require serialization of witnesses but not at unserialization itself?\n\nThat said, you're right that `fHaveWitness` implies they advertise their local services with `NODE_WITNESS`. And those ones are static so it should be good. Further, the conditional could be already reduced to `fHaveWitness` ch",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570231459,570231459,src/net_processing.cpp
jnewbery,2021-02-04 14:16:54,"> MSG_WITNESS_FLAG is used by a getdata sender to require serialization of witnesses but not at unserialization itself\n\nSorry, yes - I wrote ""unserialize"" above when I meant ""serialize""\n\n> Further, the conditional could be already reduced to fHaveWitness check only, a test node with -segwitheight== std::numeric_limits<int>::max() will have fHaveWitness=false ?\n\nI don't think that's rig",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570256904,570256904,src/net_processing.cpp
ariard,2021-02-05 12:28:59,"Gotcha, reading comment L869 in `src/net_processing.cpp` : ""Note that pnode->GetLocalServices() is a reflection of the local services we were offering when the CNode object was created for this peer"" makes me understood this is _our_ local services, not _their_. Renaming the method `GetAnnouncedToPeerServices` or something similar would be clearer.\n\nBut further, if our local services are stati",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570934275,570934275,src/net_processing.cpp
jnewbery,2021-02-05 14:08:20,"I'm sure there are lots of improvements that could be made around how we track services (and indeed will be made as part of https://github.com/bitcoin/bitcoin/issues/19398). However, that seems orthogonal to this PR. Here, we just want to ensure that mainnet behaviour is unaffected.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r570991293,570991293,src/net_processing.cpp
dhruv,2021-02-05 20:34:32,Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571234335,571234335,src/init.cpp
dhruv,2021-02-05 20:34:58,Great idea. Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571234543,571234543,src/validation.h
dhruv,2021-02-05 20:35:09,Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571234627,571234627,src/validation.cpp
dhruv,2021-02-05 20:36:45,"I took @ariard's suggestion and started from the `params.SegwitHeight()` - also changed it to a while loop that reads cleaner.\n\nOut of curiosity, is a defined `[]` operator all that's needed to use a range-based for loop?",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571235757,571235757,src/validation.cpp
dhruv,2021-02-05 20:37:25,Great idea. Updated to start from `params.SegwitHeight()`,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571236156,571236156,src/validation.cpp
dhruv,2021-02-05 20:37:57,Done - moved the second commit to #21090 and split it up into several there.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571236449,571236449,src/chainparams.cpp
dhruv,2021-02-05 20:40:57,"This diff is now moved to #21090 but I left it in because the check is redundant if this code is merged. IIUC, #20799 eliminates the entire conditional so they can both be reasoned for independently?",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571238036,571238036,src/net_processing.cpp
ajtowns,2021-02-07 22:40:49,"range-based for loops need an `x.begin()` and `x.end()` (or `begin(x)` and `end(x)`) that return iterators, and the iterators need to accept `++it` and `*it` and be comparable with `!=` -- https://en.cppreference.com/w/cpp/language/range-for ",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571711847,571711847,src/validation.cpp
jnewbery,2021-02-08 10:15:02,This will print the message twice if there are two `CChainState`s.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571925434,571925434,src/init.cpp
jnewbery,2021-02-08 10:21:54,"We can avoid some deep nesting and the need for a temporary variable to pass the result of the predicate out of the loop by using an stl algorithm:\n\n```diff\n--- a/src/init.cpp\n+++ b/src/init.cpp\n@@ -1686,27 +1686,19 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 break;\n             }\n \n-            bool needs_ibd{false};\n-  ",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571930294,571930294,src/init.cpp
jnewbery,2021-02-08 10:23:24,Consider renaming this function `NeedsRedownload`. All nodes that are starting fresh or restarting after some time need IBD. This function is specifically for nodes that need to delete blocks and redownload them.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571931259,571931259,src/validation.cpp
jnewbery,2021-02-08 10:25:34,"This loop seems useless. `sync_blocks()` ensures that the nodes have the same block hash at their tip. We assume that if the block hash at the tip is the same then all blocks in the chain are the same (if not, then bitcoin is fundamentally broken).",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571932692,571932692,test/functional/p2p_segwit.py
dhruv,2021-02-08 17:23:33,Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572227822,572227822,src/init.cpp
dhruv,2021-02-08 17:24:10,Beautiful change. Thank you for teaching so patiently!,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572228350,572228350,src/init.cpp
dhruv,2021-02-08 17:24:34,Makes sense. Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572228646,572228646,src/validation.cpp
dhruv,2021-02-08 17:25:33,Fair enough. I didn't remember that `sync_blocks()` verifies that the best hashes are equal. Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572229363,572229363,test/functional/p2p_segwit.py
jnewbery,2021-02-08 17:47:15,"Ooops. I guess the lambda needs an annotation too. Something like this maybe:\n\n```\n                if (std::any_of(chainstates.begin(), chainstates.end(),\n                                [&chainparams] (CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {return cs->NeedsIBD(chainparams);})) {\n```",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572245344,572245344,src/init.cpp
dhruv,2021-02-08 23:35:16,"That worked. For my education, what happened there and how did you know the lambda annotation would help?\n\nI suspect the annotation is evaluated with the limited scope of the bound variables, so it does not ""know"" about the locks that are acquired in the outer scope. Is that even close?",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r572452874,572452874,src/init.cpp
jnewbery,2021-02-13 09:42:34,My mistake. For some reason I thought m_chain was a container here.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r575646238,575646238,src/validation.cpp
jnewbery,2021-02-13 09:44:51,"As discussed, there was an error message about `NeedsIBD()` requiring cs_main. Since the compiler does not know that when it's inside the lambda, it's in a scope that already has cs_main, we need to annotate it.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r575646403,575646403,src/init.cpp
ariard,2021-02-13 13:02:48,"Should we be more cautious with directly summoning users to delete directories ?\n\nMaybe we should give a more detailed path (`.bitcoin/blocks`, `.bitcoin/chainstate`) but not sure if it's platform dependent. I just want to minimize the risk of someone deleting by mistake its wallet.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r575664861,575664861,src/init.cpp
dhruv,2021-02-15 01:15:06,Good idea! Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r575897776,575897776,src/init.cpp
MarcoFalke,2021-02-15 11:45:04,A `-reindex` should do the same with less effort?,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576134367,576134367,src/init.cpp
dhruv,2021-02-15 18:39:27,"When a pre-segwit node upgrades to segwit, it has no way to sufficiently validate to the segwit consensus rules from the blocks on disk since witness data was never relayed to it. Help for `-reindex` says ""Rebuild chain state and block index from the blk*.dat files on disk"". Looking at the code also does not suggest to me that `-reindex` would cause the node to re-download.\n\nAm I missing somet",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576370924,576370924,src/init.cpp
jnewbery,2021-02-16 10:11:13,"Ah, I think this is true. `-reindex` will cause the node to try to rebuild the chain state from the block files, which will work only as far as the segwit activation height if the blocks after that are serialized without witness. The node will then try to sync by downloading all blocks from peers as normal. The test passes with the following change:\n\n```diff\ndiff --git a/test/functional/p2p_",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576702371,576702371,src/init.cpp
dhruv,2021-02-16 16:32:49,"Ah, what I wasn't thinking about is that it is normal for the block _index_ to not be a 1:1 representation of the blk*.dat files. It happens all the time with reorgs, etc. So, upon `-reindex` the node won't be able to validate `[SEGWIT_HEIGHT, consensusTip]` blocks, will have `tip == SEGWIT_HEIGHT - 1`. It will then proceed to sync headers and therefore re-download `[SEGWIT_HEIGHT, consensusTip]`.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576963163,576963163,src/init.cpp
jnewbery,2021-02-16 16:39:24,Why is this change needed?,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576968263,576968263,src/validation.h
dhruv,2021-02-16 16:43:59,You are right - it is no longer needed with the `-reindex` change (I was previously using it to create the chainstate dir path). Removed.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576971728,576971728,src/validation.h
jnewbery,2021-02-16 17:43:40,"(please don't change the branch for this, but if you need to retouch for some other reason) you can use an f-string here:\n\n```suggestion\n            self.nodes[2].start([f""-segwitheight={SEGWIT_HEIGHT}""])\n```\n\nf-strings are supported from python 3.6, and have a slightly cleaner syntax.\n\nYou can also use an f-string in the `extra_args` argument below.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r577014215,577014215,test/functional/p2p_segwit.py
ajtowns,2021-02-19 07:10:38,"Perhaps `""Witness data for blocks after height %d requires validation.Please restart with -reindex."", params.SegwitHeight` might be better?\n\nSeems like the commit message should also be updated now this isn't recommending deleting the blocks dir.\n\nI suppose with assumeutxo, we could conceivably have a `-reindex-while-running` option, that downgraded the current tip to ""assumeutxo-valid"", a",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r578972424,578972424,src/init.cpp
ajtowns,2021-02-19 07:15:43,"I'm a little surprised this doesn't go from `m_chain.Tip()` backwards to `SegwitHeight`?\n\nYou're only trying to figure out if any blocks didn't have witness data checked, not which is the lowest one, and if there are any without witness data, the tip should also not have witness data (if the node software that downloaded the tip was segwit aware it would have rewound or demanded a reindex, rat",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r578974287,578974287,src/validation.cpp
ajtowns,2021-02-19 07:18:49,"Is this message really needed on every startup, rather than just a message when some action is needed?",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r578975566,578975566,src/init.cpp
ajtowns,2021-02-20 05:12:16,"Add a doxygen comment? `/** Check if chain state needs to be redownloaded due to lack of witness data */` ?\n\nShould be a `const` method, as far as I can see.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r579597720,579597720,src/validation.h
dhruv,2021-02-27 20:25:14,Thanks for showing me that. Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186625,584186625,test/functional/p2p_segwit.py
dhruv,2021-02-27 20:25:18,Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186630,584186630,src/init.cpp
dhruv,2021-02-27 20:26:16,"Yeah, it's a little more intuitive to go backwards. It's also faster. Updated.\n\nNote that the code was not checking each block in `[segwit_height, tip]`. It was merely looking for one insufficiently validated block and returning true. It continues to do the same thing which is why going backwards from tip is faster.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186771,584186771,src/validation.cpp
dhruv,2021-02-27 20:26:42,Nice idea. Removed.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186805,584186805,src/init.cpp
dhruv,2021-02-27 20:26:54,Done and done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r584186840,584186840,src/validation.h
ajtowns,2021-03-02 10:59:58,"In the normal case it checks every block in `[segwit_height, tip]` and returns false because it didn't find a block. :) (Unless I'm very confused?)",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r585467654,585467654,src/validation.cpp
dhruv,2021-03-02 13:44:36,You're correct. I misunderstood what you were saying.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r585575246,585575246,src/validation.cpp
jonatack,2021-03-10 15:14:22,"```diff\n-    CBlockIndex* block = m_chain.Tip();\n+    CBlockIndex* block{m_chain.Tip()};\n+    const int segwit_height{params.GetConsensus().SegwitHeight};\n \n-    while (block != nullptr && block->nHeight >= params.GetConsensus().SegwitHeight) {\n+    while (block != nullptr && block->nHeight >= segwit_height) {\n```\n",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591607496,591607496,src/validation.cpp
jonatack,2021-03-10 15:15:17,"```diff\n         # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.\n+        for n in range(2):\n+            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())\n+            assert softfork_active(self.nodes[n], ""segwit"")\n-        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n-        assert_equal(self.n",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591608342,591608342,test/functional/p2p_segwit.py
jonatack,2021-03-10 15:15:41,"```diff\n         # The upgraded node syncs headers and performs redownload\n-        assert_equal(self.nodes[0].getblockcount(), self.nodes[2].getblockcount())\n-        assert_equal(self.nodes[1].getblockcount(), self.nodes[2].getblockcount())\n-        assert softfork_active(self.nodes[0], 'segwit')\n-        assert softfork_active(self.nodes[1], 'segwit')\n-        assert softfork_active",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591608717,591608717,test/functional/p2p_segwit.py
jonatack,2021-03-10 15:18:07,"```diff\n-    /** Check if chain state needs to be redownloaded due to lack of witness data */\n-    [[nodiscard]] bool NeedsRedownload(const CChainParams& params) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    /** Whether the chain state needs to be reindexed due to lack of witness data. */\n+    [[nodiscard]] bool NeedsReindex(const CChainParams& params) const EXCLUSIVE_LOCKS_REQUIRED(cs_mai",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591611033,591611033,src/validation.h
jonatack,2021-03-10 15:24:06,"(nit, remove extra blank line)",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r591616226,591616226,src/init.cpp
dhruv,2021-03-11 20:36:12,Done,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592703846,592703846,src/validation.cpp
dhruv,2021-03-11 20:36:17,Done,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592703901,592703901,test/functional/p2p_segwit.py
dhruv,2021-03-11 20:36:22,Done,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592703937,592703937,test/functional/p2p_segwit.py
dhruv,2021-03-11 20:38:40,"I left it as `NeedsRedownload` as that represents more accurately, what's needed. Restarting with `-reindex` is just the suggestion we make to the user that accomplishes the redownload. To me, `NeedsReindex` suggests merely rebuilding an index from what we have would be enough.\n\nUpdated the comment though.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592705332,592705332,src/validation.h
dhruv,2021-03-11 20:38:53,Done,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r592705480,592705480,src/init.cpp
glozow,2021-04-19 19:17:51,"Perhaps worth verifying the blocks are equivalent, like in the original test?\n```suggestion\n        height = self.nodes[2].getblockcount()\n        blockhash = self.nodes[2].getblockhash(height)\n        block = self.nodes[2].getblock(blockhash)\n        for n in [0, 1]:\n            assert_equal(self.nodes[n].getblockcount(), height)\n            assert_equal(self.nodes[n].getblockhash(h",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616114589,616114589,test/functional/p2p_segwit.py
glozow,2021-04-19 19:31:55,"```suggestion\n                                [&chainparams](const CChainState* const cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {\n```",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616123099,616123099,src/init.cpp
glozow,2021-04-19 19:43:12,"I did a quick grep for `BLOCK_OPT_WITNESS` and came across #19806 which added a ""fake"" `BLOCK_OPT_WITNESS` ""so that RewindBlockIndex() doesn't zealously unwind the assumed-valid chain."" I don't have much background on AssumeUTXO but is there an interaction there? Should that be cleaned up as well?",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616129532,616129532,src/validation.cpp
jnewbery,2021-04-19 19:59:42,"There's no harm in doing this, but I don't think making the pointer const (`CChainstate* const`) is an improvement. In c++, when you pass a pointer, the called function makes a copy of that pointer, so it being const or not communicates nothing to the caller.\n\nMaking the pointer point to const data (`const CChainstate*`) on the other hand _is_ useful. It means that the function can't mutate th",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616139111,616139111,src/init.cpp
jnewbery,2021-04-19 20:01:52,`self.sync_blocks()` ensures that all the nodes are synced to the same block (see https://github.com/bitcoin/bitcoin/pull/21009#discussion_r571932692).,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616140260,616140260,test/functional/p2p_segwit.py
glozow,2021-04-19 21:20:29,Ah true 👍 the latter `const` is what I was going for :D ,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616185830,616185830,src/init.cpp
glozow,2021-04-20 14:50:49,is the assert_equal for `getblockcount()` necessary?,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r616759874,616759874,test/functional/p2p_segwit.py
jamesob,2021-04-21 15:34:40,"Good call, @glozow. I'll make a note to look at whether that's still necessary after the merge of this PR.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r617660294,617660294,src/validation.cpp
dhruv,2021-04-21 23:11:02,"You're right. `sync_blocks()` checks for the best block hash as mentioned, so the `getblockcount()` check is really just checking for very unlikely hash collisions. Updated.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r617953209,617953209,test/functional/p2p_segwit.py
dhruv,2021-04-21 23:11:11,Done.,https://github.com/bitcoin/bitcoin/pull/21009#discussion_r617953274,617953274,src/init.cpp
jamesob,2021-04-21 23:30:58,"So based on the removal of this test code (and the `SEGWIT_HEIGHT - 1` assertion above), the implication seems to be we expect users who are upgrading from pre-segwit to remove their datadir and sync to tip from scratch? Based on the assertions here, `-reindex` will not bring them to tip, so what's the point of telling the user to reindex at all? Or is this behavior specific to the functional test",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r617961288,617961288,test/functional/p2p_segwit.py
jnewbery,2021-04-22 07:51:41,"Reindexing will result in the node discarding the blocks without witness after segwit activation and redownloading them from peers and validating. See https://github.com/bitcoin/bitcoin/pull/21009#discussion_r576134367. The reason the node doesn't sync to tip here is because in our functional tests, the nodes don't make automatic connections to each other. As soon as the nodes are connected, the u",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r618165170,618165170,test/functional/p2p_segwit.py
dhruv,2021-04-22 15:07:48,"Ah, I should have updated the PR description. Updated to now say:\n\n> This PR introduces NeedsRedownload() which merely checks for insufficiently validated segwit blocks and requests that the user restarts the node with `-reindex`. Reindexing the block files upon restart will make the node rebuild chain state and block index from the `blk*.dat` files on disk. The node won't be able to index the",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r618489237,618489237,test/functional/p2p_segwit.py
jamesob,2021-04-22 15:23:43,"Ah, thanks all. Makes sense.",https://github.com/bitcoin/bitcoin/pull/21009#discussion_r618502626,618502626,test/functional/p2p_segwit.py
