Sjors,2017-11-04T14:01:00Z,"Requesting Travis restart. Most of the environments passed, three failed for `txn_clone.py`, which seems unrelated.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341899116,341899116,
TheBlueMatt,2017-11-04T17:52:35Z,"Concept ACK. I believe the test failures are, in fact, because of the change in default.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341916592,341916592,
Sjors,2017-11-04T19:53:16Z,"@TheBlueMatt ok, I'll double check that. Any theory why they would not fail on _all_ machines (including my own)?",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341925290,341925290,
TheBlueMatt,2017-11-05T00:46:26Z,"listtransactions fails for me locally, too.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341940810,341940810,
meshcollider,2017-11-05T02:32:32Z,"@Sjors not all the travis machines run the full python test suite, each one serves a different purpose, but those three failing definitely means its related to this change :)\n\nThe listtransactions.py failure is due to assertions that transactions are not opt-in, such as:\nhttps://github.com/bitcoin/bitcoin/blob/2f959a58744d42859d74579220922e25ac3d2925/test/functional/listtransactions.py#L117",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341944642,341944642,
MarcoFalke,2017-11-05T04:26:25Z,"Please don't tag with [qt], when you are actually modifying the default for all wallet created transactions",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341948362,341948362,
MarcoFalke,2017-11-05T04:29:05Z,Would also be helpful to have some reasoning in OP that outlines how this will not cause user dissatisfaction because some merchants handle rbf txes differently.,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341948446,341948446,
Sjors,2017-11-05T05:32:39Z,"@MarcoFalke I'll try if I can refactor this in a way that in only impacts QT. Changing the default behavior of RPC is probably not a good idea, since there are automated integrations.\n\nThe current implementation also doesn't warn users that some merchants handle RBF differently, but this may indeed be useful when it becomes the default. Different is not always worse by the way; e.g. ShapeShift",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341950353,341950353,
Sjors,2017-11-05T05:51:10Z,"@MarcoFalke I'll take a look at how some merchants and payment processors currently handle RBF, and add that to my PR description. Unless someone has already done that recently and can link to the research...",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341950868,341950868,
Sjors,2017-11-05T11:09:17Z,"Alternatively I could leave `DEFAULT_WALLET_RBF` alone (not touching RPC behavior), add a new DEFAULT_WALLET_UI_RBF and toggle that. In that case the QT label would be correct.\n\nThe changes in  #11556 require very different wording imo. If you disable a feature by default you need to persuade users why they might want to opt-in to this functionality. You're selling them on the feature. If you ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341965043,341965043,
meshcollider,2017-11-05T11:47:16Z,"@Sjors no, `make test` doesn't run the functional python tests I don't think, you have to run test_runner.py for that :)",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-341967147,341967147,
jonasschnelli,2017-11-05T22:18:46Z,"General Concept ACK. Most payment providers do wait for confirmations anyways so I think it makes sense now to use BIP125-RBF-signaling as a default. Conforming to an eventually (and unsafe) 0-conf payment receiver, one can then set the RBF disable flag.\n\nCode wise, this is incomplete.\nI think introducing a UI based default makes little sense. IMO we should continue this with...\n* fix `sen",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342010545,342010545,
MarcoFalke,2017-11-05T22:37:04Z,I am fine if you change the default globally. But then remove the qt tag\nand add some release notes.\n,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342011753,342011753,
promag,2017-11-05T23:37:14Z,"> (rename from enable to disable)\n\n@jonasschnelli what should be renamed (the RPC option is `replaceable`)?\n\n> It's an API change, so please add a release notes part\n\nIs it an API change because the default value changed? The default value can already be changed with `-walletrbf`. This also happens with, for instance, `-keypool` and `keypoolrefill` RPC. Agree in adding release note but",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342015493,342015493,
jonasschnelli,2017-11-06T02:31:13Z,"Things like....\n```\n\""replaceable\""       (boolean, optional, default true) Whether the new transaction should still be\n""\n            ""                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\n""\n            ""                         be left unchanged from the original. If false, any input sequence numbers in the\n""\n            ""         ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342030754,342030754,
promag,2017-11-06T02:41:17Z,"Yes, that is missing.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342031922,342031922,
Sjors,2017-11-06T08:15:28Z,"I'm not comfortable (yet) changing code at the RPC level. So what I can do is change this PR to work only at the QT level. Someone else can make a PR that changes it all the way down, which would supersede this. Then you can all choose between #11556, this and that other PR.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342075325,342075325,
Sjors,2017-11-06T08:16:39Z,"Another point to consider: most users of QT (probably) don't launch it from the command line, so they're unlikely to use `-walletrbf`.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342075537,342075537,
Sjors,2017-11-06T12:04:06Z,"I pushed a new version: there's now a new setting `DEFAULT_WALLET_QT_RBF` which is `true`. This setting is used by BitcoinQT, unless it's launched with `-walletrbf`. RPC behavior remains unchanged.\n\nWhitespace is gone now, but I'm still going through the other feedback.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342129166,342129166,
Sjors,2017-11-06T13:17:50Z,Rebased. Tests work. Updated screenshots. Explicitly mention BIP-125.,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342145596,342145596,
ryanofsky,2017-11-06T16:15:24Z,"Haven't really looked at this yet, but there was a previous PR to try to switch the rbf default (for both qt and rpc) in #9527, and some of that discussion might apply here.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342199161,342199161,
Sjors,2017-11-06T16:48:15Z,"@ryanofsky that previous PR turned on RBF by default for both the wallet and RPC.\n\nA number of objections were raised. I'll address the ones that I think are relevant:\n\n@luke-jr (and @instagibbs):\n> Probably shouldn't be merged until something can actually use it (preferably from the GUI).\n\nThat's the case now.\n\n@RHavar:\n> I was supportive of bip125 because it was marketed, sol",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342210109,342210109,
MarcoFalke,2017-11-07T18:13:22Z,utACK 58250a5567e8d99cd00321a2c33b30d141b2935d,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342572312,342572312,
RHavar,2017-11-07T18:17:58Z,"> I don't understand RBF really well, but if transactions without change can't use RBF, it would be good UX to grey-out and the checkbox for those transactions (and set it to disabled). \n\nThat's pretty fragile and complex. You need to run coin-selection to know if the transaction is going to have no change or not. I strongly suspect it'll be easier to just fix the cases of bumping transactions",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342573680,342573680,
MarcoFalke,2017-11-07T18:20:10Z,"> fix the cases of bumping transactions without change\n\nShould be a separate pull, though.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342574323,342574323,
instagibbs,2017-11-07T18:20:23Z,"@RHavar I think he's referring to the ""bump fee"" button itself, not the ""enable bip125"" button?",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342574394,342574394,
RHavar,2017-11-07T18:50:51Z,"@instagibbs he did say ""checkbox"" though, which makes it sound like it's the original transaction (and from a users point of view it doesn't really make sense to use bip125 for a transaction that you can't fee bump anyway). But a setting ""enable bip125 (if we have change)"" is the logical behavior, but annoying to explain.\n\n--\n\nAll that said, I'm still very against this change. The reiterat",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342583365,342583365,
Sjors,2017-11-07T19:08:22Z,"@RHavar I'm still trying to understand why RBF would break your application. If you trust customers to not double spend coins, why would they behave any different with RBF enabled? Just because it's marginally easier to cheat?\n\nThe bump fee feature is there. Just a bit hard to find. You need to right click on the question mark next to the transaction.\n\nRevert transaction would be the kind ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342588631,342588631,
RHavar,2017-11-07T19:30:10Z,"> If you trust customers to not double spend coins\n\nI don't trust them. I don't have any of their details, and if they could successfully double spend even 2% of the time, they could turn a profit. However, they would require the assistance of a malicious miner (who could do it costlessly). However no miners are doing it at the moment (and I hope this stays for a long time; even though it prob",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342595183,342595183,
Sjors,2017-11-07T19:35:36Z,"So your concern is that RBF makes it easier to double spend? But the feature is already there. I would expect a customer with malicious intent to just tick the box. Or are you worried about a more opportunistic thief; someone who didn't realize this was possible, but because they see the bump-fee feature, suddenly they start reading up on BIP-125, spin up the RPC client and redirect their transact",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342596786,342596786,
RHavar,2017-11-07T19:55:10Z,"@Sjors bip125 is detectible by merchants, this doesn't change their risk profile. Merchants need to treat bip125 transactions differently and trust them less (e.g. require an extra conf) regardless. By changing this to the default, you just needlessly break smooth workflows for users.\n\nThere's so many more constructive ways to help users experience in the era of crazy fees (like fix fee calcul",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342602435,342602435,
Sjors,2017-11-07T20:09:31Z,"Users can't use bump fee if they didn't tick the box. I suspect they won't even know that they could have used RBF until they experience a stuck transaction for the first time. The wallet recommends lower fees when RBF is enabled, but again, users don't know that and so they pay higher fees despite the RBF feature being available. That drives the fee up for everyone (not if QT is only a small frac",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342606599,342606599,
RHavar,2017-11-07T21:01:46Z,"> Users can't use bump fee if they didn't tick the box. I suspect they won't even know that they could have used RBF until they experience a stuck transaction for the first time. \n\nI think this is more of an argument for supporting a sort of limited RBF in all cases as long as all output amounts are unchanged or increased.\n\n>  users don't know that and so they pay higher fees \n\nI think",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342620846,342620846,
petertodd,2017-11-08T14:56:08Z,"Re: @RHavar \n\n> ""I don't have any of their details, and if they could successfully double spend even 2% of the time, they could turn a profit. However, they would require the assistance of a malicious miner (who could do it costlessly). However no miners are doing it at the moment (and I hope this stays for a long time; even though it probably won't).""\n\nNot sure what exactly your service a",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342842079,342842079,
petertodd,2017-11-08T14:56:30Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342842185,342842185,
RHavar,2017-11-08T15:02:57Z,"> Not sure what exactly your service actually is, but not only do more than 2% of miners run full-RBF - and thus will replace a transaction even if it hasn't set the opt-in RBF bit\n\nI haven't observed this at all. What miners or mining pools are doing this? Are you sure you're not confusing a mining pool that uses a reasonably small mempool with full-RBF?\n\nI did see some full-RBF behavior ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342844243,342844243,
petertodd,2017-11-08T15:13:06Z,"@RHavar Are you running a full-RBF node? E.g. https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.15.0.1 Quite possible that you're just not noticing it.\n\nI say they're running full-RBF, not because I've personally witnessed it, but rather based on the pools that have reached out to me and told me they're running it (including running my full-rbf fork).\n\n> Yeah, I've noticed this. ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342847467,342847467,
instagibbs,2017-11-08T15:14:41Z,">It seems the trade-off here is such that users either get a bad experience because their transaction is stuck for ages, or a bad experience because their merchant has to wait for confirmations.\n\nAgreed. We should just document this well so merchants can tell their users why their deposits are delayed, and how to uncheck it if they want. Being stuck for literal weeks with no recourse(other tha",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342848013,342848013,
RHavar,2017-11-08T15:22:41Z,"> Quite possible that you're just not noticing it.\n\nI don't run a full-rbf node, but I don't really need to. While I do often see full-rbf attempts, I'm only concerned about ones that actually confirm in a block (and aren't the result of a race, or getting dropped by a small mempool)\n\n> I say they're running full-RBF, not because I've personally witnessed it\n\nWell I'm actually actively",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342850561,342850561,
Sjors,2017-11-08T15:27:57Z,"@petertodd @RHavar this experiment would be interesting to watch, but doesn't tell us much about the actual occurrence.\n\n@RHavar not having RBF by default increases fees and long term stuck transactions for the entire network, yet only benefits 0-conf services (marginally, because you can just ask users not to use that feature). It's not fair to only focus on second layer stuff.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342852346,342852346,
RHavar,2017-11-08T15:34:17Z,">  Being stuck for literal weeks with no recourse(other than ""run Peter Todd's full rbf node/tools"") is worse in my estimation\n\nThat's a bit stretched, if there's change they can spend form it to prioritize the transaction. If there's no change, bumpfee doesn't even currently work. \n\n> but doesn't tell us much about the actual occurrence.\n\nWell if he can profitably take advantage of it",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342854426,342854426,
Sjors,2017-11-08T15:43:01Z,"> I think a great example of that would be if your wallet generated ~10 or so transactions, each with a higher fee (and higher nLockn time) according to a schedule so it could automatically bump transactions until they confirm, ensuring you can pay the least possible fees.\n\nYes, this would be very cool. I don't know if it requires keeping your node running for the full duration, but at least t",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342857159,342857159,
instagibbs,2017-11-08T15:48:20Z,"There is no currently coded ""auto-CPFP"" currently, and debate on how to do that as a feature. There are very manual ways of doing this, sure.\n\nThe only persuasive argument here is that some users depositing in 0-conf second layer systems will have to wait(and only if they have no change since they can rbf and unmark it). Malicious users can't even double-spend using this without additional too",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342858931,342858931,
Sjors,2017-11-08T15:53:22Z,"@instagibbs are there second layer proposals where using anything less than 6 confirmations is considered even remotely secure? I think @RHavar reference to second layer solutions referred to a preference for using second layer systems themselves for fast transactions, rather than supporting fast transaction on the layer 1 (using zero conf without opt-in RBF).",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342860569,342860569,
instagibbs,2017-11-08T15:54:47Z,"@Sjors for better or for worse, many exchanges take <6 confirms, and some services take 0-conf. I do not begrudge this.\n\nI was using ""second layer systems"" as anything built on top, including Bitcoin casinos.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342861042,342861042,
Sjors,2017-11-08T15:57:28Z,"@instagibbs I'll let @RHavar clarify, but I would suggest calling things like Lightning ""second layer"", while calling exchanges and casinos ""off-chain"" (or something else), just for clarity.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342861998,342861998,
RHavar,2017-11-08T16:00:11Z,"I use the same definition as @instagibbs which I think is pretty universal. I think him and I agree about everything except which trade-off is worth making.\n\n> are there second layer proposals where using anything less than 6 confirmations is considered even remotely secure?\n\nSure. Why not? 6 isn't some magical number. It's up to everyone to decide what risk tolerance to accept (which will",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342862913,342862913,
Sjors,2017-11-08T16:23:48Z,">> are there second layer proposals where using anything less than 6 confirmations is considered even remotely secure?\n\n> I use the same definition as @instagibbs which I think is pretty universal. I think him and I agree about everything except which trade-off is worth making.\n\nUsing the same term for things like Lightning and custodial services  makes no sense to me. They have completely",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342870861,342870861,
Sjors,2017-11-08T16:29:24Z,"@RHavar I'm also not allowed to use your website where I live, due to some effective lobbying by a state owned corporation with a monopoly on gambling. :-)",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342872786,342872786,
RHavar,2017-11-08T16:39:37Z,"> Using the same term for things like Lightning and custodial services makes no sense to me. \n\nYou're free to use a more specific term\n\n> That's the remark I was referring to when I asked my question about 6 confirmations. Custodial services can certainly do 0 conf, but my question is if non-custodial second layer solutions like side-chains or lightning do.\n\nI'm not sure it's a distinc",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342876165,342876165,
petertodd,2017-11-08T17:00:09Z,@RHavar Looks like your site is down.,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342883172,342883172,
RHavar,2017-11-08T17:06:09Z,"> @RHavar Looks like your site is down.\n\nEdit: I'm an idiot. @petertodd the link was wrong. Should've been: https://www.bustadice.com",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342885164,342885164,
laanwj,2017-11-09T11:47:29Z,"Changing defaults always gives so much discussion, wasted IMO.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-343131299,343131299,
Sjors,2017-11-09T12:06:10Z,"@laanwj if there's no agreement on this PR, I can point that out in the #11556 discussion. I'll still try to address the remaining code quality issues. ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-343135342,343135342,
laanwj,2017-11-09T13:21:45Z,"Yes, good idea to leave the controversial part in a separate PR at least :)",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-343152477,343152477,
jonasschnelli,2017-11-29T23:31:47Z,"What's the state of this PR?\nI think doing it GUI only makes sense for now.\n\nCode-wise, some things are unaddressed:\n* Move code away from core classes. I think the only change you want to have in the non GUI files is that help line for `-walletrbf` (we should mention that the default value for QT is 1).\n* Try to set `-walletrbf=1` in `src/qt/bitcoin.cpp` (`GuiMain`) or in `createOptions",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-348032296,348032296,
Sjors,2017-11-30T12:07:22Z,"I pushed a new version. This led to a conflict, so I also rebased.\n\n* QT now processes `-walletrbf`, so I no longer need to change the non-GUI files. The exception is `DEFAULT_WALLET_QT_RBF`, which is needed by `wallet/init.cpp` to print the help message. There might be a convoluted way to avoid that, by using `HelpMessageMode=HMM_BITCOIN_QT` to suppress `-walletrbf` and instead show this flag",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-348170146,348170146,
RHavar,2017-12-04T21:12:08Z,"> and the only users who may be adversely affected are those paying to services that take 0conf, which appear to be ever fewer \n\nThis is simply not true, and hugely dismissive of the real impacts this change will cause. \n\nJust today I sent an organization $10k USD by paying them through coinbase. Coinbase guaranteed the exchange rate as long as they saw the transaction on the network with ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-349107024,349107024,
TheBlueMatt,2017-12-04T21:34:08Z,"@RHavar Sadly, neither CPFP nor FSS-RBF are realistic replacements (CPFP has real additional cost, and FSS-RBF, at least as originally proposed, is highly restrictive on types of transactions that can be replaced). Given the community's seeming unwillingness to actually work together, those targeting very short confirmation windows almost certainly don't have any options *except* RBF right now tha",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-349113282,349113282,
petertodd,2017-12-04T21:41:40Z,"@RHavar In practice, Coinbase appears to accept opt-in RBF payments just fine for the times I've used them recently (buying hotel/plane tickets via CheapAir, and five minutes ago to buy some Reddit Gold as a test). They of course are just one of many reasons why people send Bitcoin; even if Coinbase has the behavior you mention - which doesn't appear to be true - most Bitcoin exchanges won't even ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-349115290,349115290,
Sjors,2017-12-05T08:58:12Z,"Rebased after #11556 was merged. \n\n@TheBlueMatt I created a placeholder issue for your `no125=1` suggestion.\n\nI'll look into using `OptionsModel` to remember the users previous choice. Not sure if that should be blocking though.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-349238448,349238448,
Sjors,2017-12-05T13:40:44Z,"Travis fails, but `test/functional/zapwallettxes.py` passes for me locally.\n\nIf the user selects ""Subtract fee from amount"", this selection is not remembered for the next transaction. Same goes for selecting e.g. mBTC instead of BTC. It seems that OptionsModel is (mostly) for settings that can be changed through the Options dialog. E.g you can change the default display currency in that dialog",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-349306812,349306812,
TheBlueMatt,2017-12-05T16:29:35Z,"Kicked travis as it seems almost certainly unrelated, but #11831 should fix the race, I believe.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-349359333,349359333,
morcos,2017-12-11T14:32:44Z,"Sorry for chiming in late, but a couple of comments:\n\n1) Concept ACK. I'm strongly in favor of making RBF default to on, I realize there are some downsides, but I think they are significantly outweighed by the fact that accurate fee estimation is essentially an impossible task and being able to adjust fee afterwards is the single biggest usability improvement we can offer now.\n\n2) I think ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-350740658,350740658,
Sjors,2017-12-11T14:59:35Z,"@RHavar can you add your five cents to the [bitcoin-dev list discussion](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-December/015352.html) about a `-no150` flag? In particular regarding @luke-jr's point.\n\n@MarcoFalke:\n\n2 - The additional complexity is only three lines of code. It would seem trivial to switch the RPC default over one version later, when people are more fami",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-350748584,350748584,
jonasschnelli,2017-12-11T19:23:44Z,"I kinda have to agree with @morcos. My first review also mentioned that we shouldn't to a distinction between RPC/GUI (https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-342010545).\n\nI'm fine with both, but would prefer a complete default switchover.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-350829723,350829723,
RHavar,2017-12-15T16:18:15Z,"Regrettably, I'm going to drop my objection to this change. Bitcoin as a payment network is pretty much dead (congratulations boys!) so there is becoming little point in trying to protect 0-confs. Low-balling fees and fee-bumping will lead to a healthier fee market, so might as well do it.\n\nIt should also be imho considered a very high priority to fix `bumpfee` to handle the case without chang",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-352046663,352046663,
Sjors,2017-12-15T16:57:23Z,"@RHavar thanks. Among my ever growing todo list is to make the bump fee functionality better, especially in the UI. There was some [recent IRC discussion](https://botbot.me/freenode/bitcoin-core-dev/2017-12-11/?msg=94528710&page=4) about this as well.\n\nI'm still reluctant about changing the RPC default, which we also [chatted about](https://botbot.me/freenode/bitcoin-core-dev/2017-12-11/?msg=9",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-352056518,352056518,
laanwj,2017-12-21T09:42:42Z,I'm starting to warm up to the idea of changing this default. Seems it would make the fees escalate a little less if clients use more conservative estimates.,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353305495,353305495,
Sjors,2017-12-21T10:33:13Z,"I flipped the checkbox: it's now checked and says ""Enabled"". I adjusted the tooltip to reflect that a bit; it explains why RBF is useful and warns of a least one potential downside of disabling it (higher fees). This passes the strobe test better (removes a bunch of double negatives). See new screenshots.\n\nI renamed the variable `enableRBF` to `enableRBF`.\n\n@laanwj suggested:\n> What abou",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353317076,353317076,
laanwj,2017-12-21T10:38:20Z,"> E.g. -guiwalletrbf? I'm worried that would just make it more confusing, unless we also rename -walletrbf to -rpcwalletrbf.\n\nThe difference is that here, it's effectively two different things already. One changes the default in the GUI, one changes the default that's used with RPC. There is no overlap in code between what the options do.\n\nI really dislike the `(default: %u for RPC, %u for",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353318183,353318183,
Sjors,2017-12-21T10:46:51Z,"Perhaps we can add `-rpcwalletrbf` as an alias for `-walletrbf` and deprecate the latter (with zero rush).  I could then replace `(default: %u for RPC, %u for GUI)` with a warning that this setting applies to RPC (and debug console) only. And then add `-guiwalletrbf`.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353319928,353319928,
Sjors,2017-12-21T11:52:29Z,"I implemented `-guiwalletrbf`, added `-rpcwalletrbf` and a deprecation warning for `-walletrbf`. I added [RPC] to the commit name. This issue probably needs an RPC tag now.\n\nRPC and debug console won't use RBF by default and honor the `-rpcwalletrbf` (or `-walletrb`) flag.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353332537,353332537,
laanwj,2017-12-21T11:59:52Z,"> RPC and debug console won't use RBF by default and honor the -rpcwalletrbf (or -walletrb) flag.\n\nSounds good to me, as it's documented. Doing it otherwise would introduce new complications between core and GUI code that aren't worth it.\n\nI'm not sure the deprecation (nor rename) is worth it either. Soon enough I expect that RBF will be the default for both GUI and RPC, and there's no lon",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353333827,353333827,
Sjors,2017-12-21T12:11:19Z,"I pushed some whitespace and variable name fixes, as well as repaired the `bumpfee.py` test.\n\nI'm open to not doing the rename / deprecation, but if there's not too much downside to it, I do think it adds clarity.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353335836,353335836,
jonasschnelli,2017-12-21T19:24:54Z,I think the consensus is that we enabled RBF by default now. Merging this as it is would cause confusion. I think we should move the PR towards enabling it everywhere.,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353436210,353436210,
Sjors,2017-12-21T19:27:47Z,"@jonasschnelli I think this needs to be addressed first (copied from above):\n\n> I'm still reluctant about changing the RPC default, which we also [chatted about](https://botbot.me/freenode/bitcoin-core-dev/2017-12-11/?msg=94528264&page=4). One thing I'd like to (see someone else) do is go through popular wallets and services to see how they treat RBF payments and how they treat bumped fees. Wh",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353436856,353436856,
jonasschnelli,2017-12-21T19:31:53Z,Merging this would mean we have to get rid of the -rpcwalletrbg -guiwalletrbf split later?,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353437781,353437781,
Sjors,2017-12-21T19:34:33Z,"No, we would get rid of the `-*walletrbf` flag entirely. If there's any reason to keep that flag, then it needs to be separate for QT and GUI.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353438434,353438434,
jonasschnelli,2017-12-21T19:36:04Z,I don't think a split between GUI and RPC defaults is desirable for something we want to have enabled by default long term anyways (on both sides). Splits between GUI and RPC should be avoided where possible to lower confusion.,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353438800,353438800,
Sjors,2017-12-21T19:37:45Z,"If we can't separate the behavior, I don't think we should change the default at all, until we understand what the impact is on automated services with large transaction volumes. Or unless we're sure they read the release notes.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353439135,353439135,
jonasschnelli,2017-12-21T19:44:34Z,"I think if you run large volume business, you either use Qt or much more likely headless/RPC. You certainly will (should!) read default changes in the release notes during a software upgrade.\n\nThe split use case would be for someone running both ""worlds"" (GUI/RPC) with different use cases which I think is unlikely.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353440639,353440639,
RHavar,2017-12-21T20:21:14Z," > Seems it would make the fees escalate a little less if clients use more conservative estimates.\n\nYeah, agree. The current situation is absolutely insane (and tragically foreseeable). While obviously not the cause of the clusterfuck we're in, having clients aggressively blindly outbid each other is not helping.\n\nHowever, I'm still rather skeptical this is anything more than hack. If you ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353448603,353448603,
Sjors,2017-12-21T20:33:15Z,"Alright, so we had some more back and forth on IRC. The new version I just pushed:\n* drops `-guiwalletrbf`; the GUI will just use RBF by default\n* keeps the original `-walletrbf` flag, off by default, but now now only impacts RPC",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353451110,353451110,
jonasschnelli,2017-12-21T20:35:56Z,"Nice.\nutACK dcd50b90b94fbf2295a122693570218932bf15b4\n\nConsider also updating the original PR description. It will be part of the git history once it's merged.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353451686,353451686,
Sjors,2017-12-21T20:43:54Z,@jonasschnelli fixed the PR description.,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353453317,353453317,
laanwj,2017-12-21T20:45:27Z,utACK dcd50b90b94fbf2295a122693570218932bf15b4,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353453631,353453631,
laanwj,2017-12-21T21:15:20Z,"Travis fails on trailing whitespace :(\n```patch\ndiff --git a/doc/release-notes.md b/doc/release-notes.md\n@@ -69,0 +70,8 @@ will only create hierarchical deterministic (HD) wallets.\n+The send screen now uses BIP-125 RBF by default, regardless of `-walletrbf`.\n+There is a checkbox to mark the transaction as final.\n^---- failure generated from contrib/devtools/lint-whitespace.sh\n```",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353459501,353459501,
Sjors,2017-12-22T08:45:58Z,"@laanwj fixed\n\nAtom either automatically fixes all whitespace in a file or nothing at all. I haven't been able to tweak it to only fix whitespace in lines that I'm working on, as per the code style guidelines.\n\nRunning `TRAVIS_COMMIT_RANGE=91eeaa...5cbbbd71 contrib/devtools/lint-whitespace.sh` locally is also not super practical, though could probably be automated.\n\nInstalling linters ",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353551320,353551320,
Sjors,2017-12-22T09:05:14Z,"Travis still unhappy, not sure why:\n<img width=""892"" alt=""schermafbeelding 2017-12-22 om 10 04 53"" src=""https://user-images.githubusercontent.com/10217/34292078-9561546c-e6ff-11e7-8a47-84f362251c63.png"">\n",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353554585,353554585,
laanwj,2017-12-22T11:59:36Z,"Seems Travis is happy now, probably a transient issue.",https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353584687,353584687,
laanwj,2017-12-22T12:15:28Z,Tested ACK 5cbbbd7.,https://github.com/bitcoin/bitcoin/pull/11605#issuecomment-353586944,353586944,
meshcollider,2017-11-05T02:47:05Z,"Nit, braces on same line as `if` and `else`",https://github.com/bitcoin/bitcoin/pull/11605#discussion_r148946753,148946753,src/qt/sendcoinsdialog.cpp
meshcollider,2017-11-05T02:47:51Z,"Nit, indentation\nAlso perhaps add reference to BIP 125 again ",https://github.com/bitcoin/bitcoin/pull/11605#discussion_r148946761,148946761,src/qt/sendcoinsdialog.cpp
Sjors,2017-11-05T05:31:10Z,Will do.,https://github.com/bitcoin/bitcoin/pull/11605#discussion_r148948476,148948476,src/qt/sendcoinsdialog.cpp
promag,2017-11-05T10:51:46Z,Remove these whitespace changes.,https://github.com/bitcoin/bitcoin/pull/11605#discussion_r148954094,148954094,src/wallet/wallet.h
MarcoFalke,2017-11-07T18:12:40Z,Eh. I guess we don't want Qt code to end up here,https://github.com/bitcoin/bitcoin/pull/11605#discussion_r149456863,149456863,src/wallet/wallet.h
MarcoFalke,2017-11-07T18:13:03Z,No need for this wrapper if the member is qt-only,https://github.com/bitcoin/bitcoin/pull/11605#discussion_r149456988,149456988,src/qt/walletmodel.cpp
Sjors,2017-11-07T18:43:56Z,"I'm not sure how to disentangle this. The `-walletrbf` is cast to a boolean in init.cpp, so QT can't tell if that flag was present or not.",https://github.com/bitcoin/bitcoin/pull/11605#discussion_r149465380,149465380,src/wallet/wallet.h
TheBlueMatt,2017-12-04T20:37:00Z,"I believe we cache a bunch of the states of other UI elements in the send dialog (eg feerate selectiton), is it worth doing something similar here?",https://github.com/bitcoin/bitcoin/pull/11605#discussion_r154767953,154767953,src/qt/sendcoinsdialog.cpp
Sjors,2017-12-04T21:00:07Z,Do you mean remembering what the user selected before? Does that use the OptionsModel?,https://github.com/bitcoin/bitcoin/pull/11605#discussion_r154773489,154773489,src/qt/sendcoinsdialog.cpp
TheBlueMatt,2017-12-04T21:34:36Z,"I believe it uses the OptionsModel, yes.",https://github.com/bitcoin/bitcoin/pull/11605#discussion_r154781827,154781827,src/qt/sendcoinsdialog.cpp
TheBlueMatt,2017-12-05T16:38:36Z,"Heh, I'm less a fan of the copy here now. Maybe ""Not using Replace-By-Fee (BIP-125) prevents you from increasing a transaction's fee after it is sent. This may cause the recommended fee to be higher to compensate for the increased risk a transaction is delayed."" or something like that?",https://github.com/bitcoin/bitcoin/pull/11605#discussion_r155004103,155004103,src/qt/forms/sendcoinsdialog.ui
Sjors,2017-12-05T18:01:07Z,"I changed it to:\n> Without Replace-By-Fee (BIP-125) you can't increase a transaction's fee after it is sent. A higher fee may be recommended to compensate for increased transaction delay risk.\n\nUpdated screenshot above.",https://github.com/bitcoin/bitcoin/pull/11605#discussion_r155028068,155028068,src/qt/forms/sendcoinsdialog.ui
laanwj,2017-12-21T09:30:22Z,"Please use ""GUI"" not ""QT"" when referring to the GUI in messages. It's irrelevant what widget toolkit is used.",https://github.com/bitcoin/bitcoin/pull/11605#discussion_r158230399,158230399,src/wallet/init.cpp
Sjors,2017-12-21T09:36:45Z,Will fix.,https://github.com/bitcoin/bitcoin/pull/11605#discussion_r158231768,158231768,src/wallet/init.cpp
laanwj,2017-12-21T09:49:01Z,"What about a separate option for the GUI, GUI-only (so documented in `utilitydialog.cpp` instead of `init.cpp`), that defaults to `-walletrbf`? This would allow it to be completely disentangled from the core.",https://github.com/bitcoin/bitcoin/pull/11605#discussion_r158234455,158234455,src/wallet/wallet.h
